@ arm-none-eabi-as equates file for STM32F746
@ SVD2GAS Equates Generator, Copyright Terry Porter 2017 "terry@tjporter.com.au" for arm-none-eabi-as 
@ Matthias Koch Complimentary Edition 2017
@ Takes a CMSIS-SVD file plus a hand edited config.xml file as input 
@ Licensed under the GPL, see http://www.gnu.org/licenses/


@=========================== RNG ===========================@
.equ RNG_BASE, 0x50060800 @ (Random number generator) 
    .equ RNG_CR, RNG_BASE + 0x0 @ (control register) 
        .equ RNG_CR_IE, 1 << 3   @ bitWidth 1 (Interrupt enable)  
        .equ RNG_CR_RNGEN, 1 << 2   @ bitWidth 1 (Random number generator enable)  
 
    .equ RNG_SR, RNG_BASE + 0x4 @ (status register) 
        .equ RNG_SR_SEIS, 1 << 6   @ bitWidth 1 (Seed error interrupt status)  
        .equ RNG_SR_CEIS, 1 << 5   @ bitWidth 1 (Clock error interrupt status)  
        .equ RNG_SR_SECS, 1 << 2   @ bitWidth 1 (Seed error current status)  
        .equ RNG_SR_CECS, 1 << 1   @ bitWidth 1 (Clock error current status)  
        .equ RNG_SR_DRDY, 1 << 0   @ bitWidth 1 (Data ready)  
 
    .equ RNG_DR, RNG_BASE + 0x8 @ (data register) 
        .equ RNG_DR_RNDATA_Shift, 0   @ bitWidth 32 (Random data)  
 

@=========================== HASH ===========================@
.equ HASH_BASE, 0x50060400 @ (Hash processor) 
    .equ HASH_CR, HASH_BASE + 0x0 @ (control register) 
        .equ HASH_CR_INIT, 1 << 2   @ bitWidth 1 (Initialize message digest calculation)  
        .equ HASH_CR_DMAE, 1 << 3   @ bitWidth 1 (DMA enable)  
        .equ HASH_CR_DATATYPE_Shift, 4   @ bitWidth 2 (Data type selection)  
        .equ HASH_CR_MODE, 1 << 6   @ bitWidth 1 (Mode selection)  
        .equ HASH_CR_ALGO0, 1 << 7   @ bitWidth 1 (Algorithm selection)  
        .equ HASH_CR_NBW_Shift, 8   @ bitWidth 4 (Number of words already pushed)  
        .equ HASH_CR_DINNE, 1 << 12   @ bitWidth 1 (DIN not empty)  
        .equ HASH_CR_MDMAT, 1 << 13   @ bitWidth 1 (Multiple DMA Transfers)  
        .equ HASH_CR_LKEY, 1 << 16   @ bitWidth 1 (Long key selection)  
        .equ HASH_CR_ALGO1, 1 << 18   @ bitWidth 1 (ALGO)  
 
    .equ HASH_DIN, HASH_BASE + 0x4 @ (data input register) 
        .equ HASH_DIN_DATAIN_Shift, 0   @ bitWidth 32 (Data input)  
 
    .equ HASH_STR, HASH_BASE + 0x8 @ (start register) 
        .equ HASH_STR_DCAL, 1 << 8   @ bitWidth 1 (Digest calculation)  
        .equ HASH_STR_NBLW_Shift, 0   @ bitWidth 5 (Number of valid bits in the last word of the message)  
 
    .equ HASH_HR0, HASH_BASE + 0xC @ (digest registers) 
        .equ HASH_HR0_H0_Shift, 0   @ bitWidth 32 (H0)  
 
    .equ HASH_HR1, HASH_BASE + 0x10 @ (digest registers) 
        .equ HASH_HR1_H1_Shift, 0   @ bitWidth 32 (H1)  
 
    .equ HASH_HR2, HASH_BASE + 0x14 @ (digest registers) 
        .equ HASH_HR2_H2_Shift, 0   @ bitWidth 32 (H2)  
 
    .equ HASH_HR3, HASH_BASE + 0x18 @ (digest registers) 
        .equ HASH_HR3_H3_Shift, 0   @ bitWidth 32 (H3)  
 
    .equ HASH_HR4, HASH_BASE + 0x1C @ (digest registers) 
        .equ HASH_HR4_H4_Shift, 0   @ bitWidth 32 (H4)  
 
    .equ HASH_IMR, HASH_BASE + 0x20 @ (interrupt enable register) 
        .equ HASH_IMR_DCIE, 1 << 1   @ bitWidth 1 (Digest calculation completion interrupt enable)  
        .equ HASH_IMR_DINIE, 1 << 0   @ bitWidth 1 (Data input interrupt enable)  
 
    .equ HASH_SR, HASH_BASE + 0x24 @ (status register) 
        .equ HASH_SR_BUSY, 1 << 3   @ bitWidth 1 (Busy bit)  
        .equ HASH_SR_DMAS, 1 << 2   @ bitWidth 1 (DMA Status)  
        .equ HASH_SR_DCIS, 1 << 1   @ bitWidth 1 (Digest calculation completion interrupt status)  
        .equ HASH_SR_DINIS, 1 << 0   @ bitWidth 1 (Data input interrupt status)  
 
    .equ HASH_CSR0, HASH_BASE + 0xF8 @ (context swap registers) 
        .equ HASH_CSR0_CSR0_Shift, 0   @ bitWidth 32 (CSR0)  
 
    .equ HASH_CSR1, HASH_BASE + 0xFC @ (context swap registers) 
        .equ HASH_CSR1_CSR1_Shift, 0   @ bitWidth 32 (CSR1)  
 
    .equ HASH_CSR2, HASH_BASE + 0x100 @ (context swap registers) 
        .equ HASH_CSR2_CSR2_Shift, 0   @ bitWidth 32 (CSR2)  
 
    .equ HASH_CSR3, HASH_BASE + 0x104 @ (context swap registers) 
        .equ HASH_CSR3_CSR3_Shift, 0   @ bitWidth 32 (CSR3)  
 
    .equ HASH_CSR4, HASH_BASE + 0x108 @ (context swap registers) 
        .equ HASH_CSR4_CSR4_Shift, 0   @ bitWidth 32 (CSR4)  
 
    .equ HASH_CSR5, HASH_BASE + 0x10C @ (context swap registers) 
        .equ HASH_CSR5_CSR5_Shift, 0   @ bitWidth 32 (CSR5)  
 
    .equ HASH_CSR6, HASH_BASE + 0x110 @ (context swap registers) 
        .equ HASH_CSR6_CSR6_Shift, 0   @ bitWidth 32 (CSR6)  
 
    .equ HASH_CSR7, HASH_BASE + 0x114 @ (context swap registers) 
        .equ HASH_CSR7_CSR7_Shift, 0   @ bitWidth 32 (CSR7)  
 
    .equ HASH_CSR8, HASH_BASE + 0x118 @ (context swap registers) 
        .equ HASH_CSR8_CSR8_Shift, 0   @ bitWidth 32 (CSR8)  
 
    .equ HASH_CSR9, HASH_BASE + 0x11C @ (context swap registers) 
        .equ HASH_CSR9_CSR9_Shift, 0   @ bitWidth 32 (CSR9)  
 
    .equ HASH_CSR10, HASH_BASE + 0x120 @ (context swap registers) 
        .equ HASH_CSR10_CSR10_Shift, 0   @ bitWidth 32 (CSR10)  
 
    .equ HASH_CSR11, HASH_BASE + 0x124 @ (context swap registers) 
        .equ HASH_CSR11_CSR11_Shift, 0   @ bitWidth 32 (CSR11)  
 
    .equ HASH_CSR12, HASH_BASE + 0x128 @ (context swap registers) 
        .equ HASH_CSR12_CSR12_Shift, 0   @ bitWidth 32 (CSR12)  
 
    .equ HASH_CSR13, HASH_BASE + 0x12C @ (context swap registers) 
        .equ HASH_CSR13_CSR13_Shift, 0   @ bitWidth 32 (CSR13)  
 
    .equ HASH_CSR14, HASH_BASE + 0x130 @ (context swap registers) 
        .equ HASH_CSR14_CSR14_Shift, 0   @ bitWidth 32 (CSR14)  
 
    .equ HASH_CSR15, HASH_BASE + 0x134 @ (context swap registers) 
        .equ HASH_CSR15_CSR15_Shift, 0   @ bitWidth 32 (CSR15)  
 
    .equ HASH_CSR16, HASH_BASE + 0x138 @ (context swap registers) 
        .equ HASH_CSR16_CSR16_Shift, 0   @ bitWidth 32 (CSR16)  
 
    .equ HASH_CSR17, HASH_BASE + 0x13C @ (context swap registers) 
        .equ HASH_CSR17_CSR17_Shift, 0   @ bitWidth 32 (CSR17)  
 
    .equ HASH_CSR18, HASH_BASE + 0x140 @ (context swap registers) 
        .equ HASH_CSR18_CSR18_Shift, 0   @ bitWidth 32 (CSR18)  
 
    .equ HASH_CSR19, HASH_BASE + 0x144 @ (context swap registers) 
        .equ HASH_CSR19_CSR19_Shift, 0   @ bitWidth 32 (CSR19)  
 
    .equ HASH_CSR20, HASH_BASE + 0x148 @ (context swap registers) 
        .equ HASH_CSR20_CSR20_Shift, 0   @ bitWidth 32 (CSR20)  
 
    .equ HASH_CSR21, HASH_BASE + 0x14C @ (context swap registers) 
        .equ HASH_CSR21_CSR21_Shift, 0   @ bitWidth 32 (CSR21)  
 
    .equ HASH_CSR22, HASH_BASE + 0x150 @ (context swap registers) 
        .equ HASH_CSR22_CSR22_Shift, 0   @ bitWidth 32 (CSR22)  
 
    .equ HASH_CSR23, HASH_BASE + 0x154 @ (context swap registers) 
        .equ HASH_CSR23_CSR23_Shift, 0   @ bitWidth 32 (CSR23)  
 
    .equ HASH_CSR24, HASH_BASE + 0x158 @ (context swap registers) 
        .equ HASH_CSR24_CSR24_Shift, 0   @ bitWidth 32 (CSR24)  
 
    .equ HASH_CSR25, HASH_BASE + 0x15C @ (context swap registers) 
        .equ HASH_CSR25_CSR25_Shift, 0   @ bitWidth 32 (CSR25)  
 
    .equ HASH_CSR26, HASH_BASE + 0x160 @ (context swap registers) 
        .equ HASH_CSR26_CSR26_Shift, 0   @ bitWidth 32 (CSR26)  
 
    .equ HASH_CSR27, HASH_BASE + 0x164 @ (context swap registers) 
        .equ HASH_CSR27_CSR27_Shift, 0   @ bitWidth 32 (CSR27)  
 
    .equ HASH_CSR28, HASH_BASE + 0x168 @ (context swap registers) 
        .equ HASH_CSR28_CSR28_Shift, 0   @ bitWidth 32 (CSR28)  
 
    .equ HASH_CSR29, HASH_BASE + 0x16C @ (context swap registers) 
        .equ HASH_CSR29_CSR29_Shift, 0   @ bitWidth 32 (CSR29)  
 
    .equ HASH_CSR30, HASH_BASE + 0x170 @ (context swap registers) 
        .equ HASH_CSR30_CSR30_Shift, 0   @ bitWidth 32 (CSR30)  
 
    .equ HASH_CSR31, HASH_BASE + 0x174 @ (context swap registers) 
        .equ HASH_CSR31_CSR31_Shift, 0   @ bitWidth 32 (CSR31)  
 
    .equ HASH_CSR32, HASH_BASE + 0x178 @ (context swap registers) 
        .equ HASH_CSR32_CSR32_Shift, 0   @ bitWidth 32 (CSR32)  
 
    .equ HASH_CSR33, HASH_BASE + 0x17C @ (context swap registers) 
        .equ HASH_CSR33_CSR33_Shift, 0   @ bitWidth 32 (CSR33)  
 
    .equ HASH_CSR34, HASH_BASE + 0x180 @ (context swap registers) 
        .equ HASH_CSR34_CSR34_Shift, 0   @ bitWidth 32 (CSR34)  
 
    .equ HASH_CSR35, HASH_BASE + 0x184 @ (context swap registers) 
        .equ HASH_CSR35_CSR35_Shift, 0   @ bitWidth 32 (CSR35)  
 
    .equ HASH_CSR36, HASH_BASE + 0x188 @ (context swap registers) 
        .equ HASH_CSR36_CSR36_Shift, 0   @ bitWidth 32 (CSR36)  
 
    .equ HASH_CSR37, HASH_BASE + 0x18C @ (context swap registers) 
        .equ HASH_CSR37_CSR37_Shift, 0   @ bitWidth 32 (CSR37)  
 
    .equ HASH_CSR38, HASH_BASE + 0x190 @ (context swap registers) 
        .equ HASH_CSR38_CSR38_Shift, 0   @ bitWidth 32 (CSR38)  
 
    .equ HASH_CSR39, HASH_BASE + 0x194 @ (context swap registers) 
        .equ HASH_CSR39_CSR39_Shift, 0   @ bitWidth 32 (CSR39)  
 
    .equ HASH_CSR40, HASH_BASE + 0x198 @ (context swap registers) 
        .equ HASH_CSR40_CSR40_Shift, 0   @ bitWidth 32 (CSR40)  
 
    .equ HASH_CSR41, HASH_BASE + 0x19C @ (context swap registers) 
        .equ HASH_CSR41_CSR41_Shift, 0   @ bitWidth 32 (CSR41)  
 
    .equ HASH_CSR42, HASH_BASE + 0x1A0 @ (context swap registers) 
        .equ HASH_CSR42_CSR42_Shift, 0   @ bitWidth 32 (CSR42)  
 
    .equ HASH_CSR43, HASH_BASE + 0x1A4 @ (context swap registers) 
        .equ HASH_CSR43_CSR43_Shift, 0   @ bitWidth 32 (CSR43)  
 
    .equ HASH_CSR44, HASH_BASE + 0x1A8 @ (context swap registers) 
        .equ HASH_CSR44_CSR44_Shift, 0   @ bitWidth 32 (CSR44)  
 
    .equ HASH_CSR45, HASH_BASE + 0x1AC @ (context swap registers) 
        .equ HASH_CSR45_CSR45_Shift, 0   @ bitWidth 32 (CSR45)  
 
    .equ HASH_CSR46, HASH_BASE + 0x1B0 @ (context swap registers) 
        .equ HASH_CSR46_CSR46_Shift, 0   @ bitWidth 32 (CSR46)  
 
    .equ HASH_CSR47, HASH_BASE + 0x1B4 @ (context swap registers) 
        .equ HASH_CSR47_CSR47_Shift, 0   @ bitWidth 32 (CSR47)  
 
    .equ HASH_CSR48, HASH_BASE + 0x1B8 @ (context swap registers) 
        .equ HASH_CSR48_CSR48_Shift, 0   @ bitWidth 32 (CSR48)  
 
    .equ HASH_CSR49, HASH_BASE + 0x1BC @ (context swap registers) 
        .equ HASH_CSR49_CSR49_Shift, 0   @ bitWidth 32 (CSR49)  
 
    .equ HASH_CSR50, HASH_BASE + 0x1C0 @ (context swap registers) 
        .equ HASH_CSR50_CSR50_Shift, 0   @ bitWidth 32 (CSR50)  
 
    .equ HASH_CSR51, HASH_BASE + 0x1C4 @ (context swap registers) 
        .equ HASH_CSR51_CSR51_Shift, 0   @ bitWidth 32 (CSR51)  
 
    .equ HASH_CSR52, HASH_BASE + 0x1C8 @ (context swap registers) 
        .equ HASH_CSR52_CSR52_Shift, 0   @ bitWidth 32 (CSR52)  
 
    .equ HASH_CSR53, HASH_BASE + 0x1CC @ (context swap registers) 
        .equ HASH_CSR53_CSR53_Shift, 0   @ bitWidth 32 (CSR53)  
 
    .equ HASH_HASH_HR0, HASH_BASE + 0x310 @ (HASH digest register) 
        .equ HASH_HASH_HR0_H0_Shift, 0   @ bitWidth 32 (H0)  
 
    .equ HASH_HASH_HR1, HASH_BASE + 0x314 @ (read-only) 
        .equ HASH_HASH_HR1_H1_Shift, 0   @ bitWidth 32 (H1)  
 
    .equ HASH_HASH_HR2, HASH_BASE + 0x318 @ (read-only) 
        .equ HASH_HASH_HR2_H2_Shift, 0   @ bitWidth 32 (H2)  
 
    .equ HASH_HASH_HR3, HASH_BASE + 0x31C @ (read-only) 
        .equ HASH_HASH_HR3_H3_Shift, 0   @ bitWidth 32 (H3)  
 
    .equ HASH_HASH_HR4, HASH_BASE + 0x320 @ (read-only) 
        .equ HASH_HASH_HR4_H4_Shift, 0   @ bitWidth 32 (H4)  
 
    .equ HASH_HASH_HR5, HASH_BASE + 0x324 @ (read-only) 
        .equ HASH_HASH_HR5_H5_Shift, 0   @ bitWidth 32 (H5)  
 
    .equ HASH_HASH_HR6, HASH_BASE + 0x328 @ (read-only) 
        .equ HASH_HASH_HR6_H6_Shift, 0   @ bitWidth 32 (H6)  
 
    .equ HASH_HASH_HR7, HASH_BASE + 0x32C @ (read-only) 
        .equ HASH_HASH_HR7_H7_Shift, 0   @ bitWidth 32 (H7)  
 

@=========================== CRYP ===========================@
.equ CRYP_BASE, 0x50060000 @ (Cryptographic processor) 
    .equ CRYP_CR, CRYP_BASE + 0x0 @ (control register) 
        .equ CRYP_CR_ALGODIR, 1 << 2   @ bitWidth 1 (Algorithm direction)  
        .equ CRYP_CR_ALGOMODE0_Shift, 3   @ bitWidth 3 (Algorithm mode)  
        .equ CRYP_CR_DATATYPE_Shift, 6   @ bitWidth 2 (Data type selection)  
        .equ CRYP_CR_KEYSIZE_Shift, 8   @ bitWidth 2 (Key size selection AES mode only)  
        .equ CRYP_CR_FFLUSH, 1 << 14   @ bitWidth 1 (FIFO flush)  
        .equ CRYP_CR_CRYPEN, 1 << 15   @ bitWidth 1 (Cryptographic processor enable)  
        .equ CRYP_CR_GCM_CCMPH_Shift, 16   @ bitWidth 2 (GCM_CCMPH)  
        .equ CRYP_CR_ALGOMODE3, 1 << 19   @ bitWidth 1 (ALGOMODE)  
 
    .equ CRYP_SR, CRYP_BASE + 0x4 @ (status register) 
        .equ CRYP_SR_BUSY, 1 << 4   @ bitWidth 1 (Busy bit)  
        .equ CRYP_SR_OFFU, 1 << 3   @ bitWidth 1 (Output FIFO full)  
        .equ CRYP_SR_OFNE, 1 << 2   @ bitWidth 1 (Output FIFO not empty)  
        .equ CRYP_SR_IFNF, 1 << 1   @ bitWidth 1 (Input FIFO not full)  
        .equ CRYP_SR_IFEM, 1 << 0   @ bitWidth 1 (Input FIFO empty)  
 
    .equ CRYP_DIN, CRYP_BASE + 0x8 @ (data input register) 
        .equ CRYP_DIN_DATAIN_Shift, 0   @ bitWidth 32 (Data input)  
 
    .equ CRYP_DOUT, CRYP_BASE + 0xC @ (data output register) 
        .equ CRYP_DOUT_DATAOUT_Shift, 0   @ bitWidth 32 (Data output)  
 
    .equ CRYP_DMACR, CRYP_BASE + 0x10 @ (DMA control register) 
        .equ CRYP_DMACR_DOEN, 1 << 1   @ bitWidth 1 (DMA output enable)  
        .equ CRYP_DMACR_DIEN, 1 << 0   @ bitWidth 1 (DMA input enable)  
 
    .equ CRYP_IMSCR, CRYP_BASE + 0x14 @ (interrupt mask set/clear register) 
        .equ CRYP_IMSCR_OUTIM, 1 << 1   @ bitWidth 1 (Output FIFO service interrupt mask)  
        .equ CRYP_IMSCR_INIM, 1 << 0   @ bitWidth 1 (Input FIFO service interrupt mask)  
 
    .equ CRYP_RISR, CRYP_BASE + 0x18 @ (raw interrupt status register) 
        .equ CRYP_RISR_OUTRIS, 1 << 1   @ bitWidth 1 (Output FIFO service raw interrupt status)  
        .equ CRYP_RISR_INRIS, 1 << 0   @ bitWidth 1 (Input FIFO service raw interrupt status)  
 
    .equ CRYP_MISR, CRYP_BASE + 0x1C @ (masked interrupt status register) 
        .equ CRYP_MISR_OUTMIS, 1 << 1   @ bitWidth 1 (Output FIFO service masked interrupt status)  
        .equ CRYP_MISR_INMIS, 1 << 0   @ bitWidth 1 (Input FIFO service masked interrupt status)  
 
    .equ CRYP_K0LR, CRYP_BASE + 0x20 @ (key registers) 
        .equ CRYP_K0LR_b224, 1 << 0   @ bitWidth 1 (b224)  
        .equ CRYP_K0LR_b225, 1 << 1   @ bitWidth 1 (b225)  
        .equ CRYP_K0LR_b226, 1 << 2   @ bitWidth 1 (b226)  
        .equ CRYP_K0LR_b227, 1 << 3   @ bitWidth 1 (b227)  
        .equ CRYP_K0LR_b228, 1 << 4   @ bitWidth 1 (b228)  
        .equ CRYP_K0LR_b229, 1 << 5   @ bitWidth 1 (b229)  
        .equ CRYP_K0LR_b230, 1 << 6   @ bitWidth 1 (b230)  
        .equ CRYP_K0LR_b231, 1 << 7   @ bitWidth 1 (b231)  
        .equ CRYP_K0LR_b232, 1 << 8   @ bitWidth 1 (b232)  
        .equ CRYP_K0LR_b233, 1 << 9   @ bitWidth 1 (b233)  
        .equ CRYP_K0LR_b234, 1 << 10   @ bitWidth 1 (b234)  
        .equ CRYP_K0LR_b235, 1 << 11   @ bitWidth 1 (b235)  
        .equ CRYP_K0LR_b236, 1 << 12   @ bitWidth 1 (b236)  
        .equ CRYP_K0LR_b237, 1 << 13   @ bitWidth 1 (b237)  
        .equ CRYP_K0LR_b238, 1 << 14   @ bitWidth 1 (b238)  
        .equ CRYP_K0LR_b239, 1 << 15   @ bitWidth 1 (b239)  
        .equ CRYP_K0LR_b240, 1 << 16   @ bitWidth 1 (b240)  
        .equ CRYP_K0LR_b241, 1 << 17   @ bitWidth 1 (b241)  
        .equ CRYP_K0LR_b242, 1 << 18   @ bitWidth 1 (b242)  
        .equ CRYP_K0LR_b243, 1 << 19   @ bitWidth 1 (b243)  
        .equ CRYP_K0LR_b244, 1 << 20   @ bitWidth 1 (b244)  
        .equ CRYP_K0LR_b245, 1 << 21   @ bitWidth 1 (b245)  
        .equ CRYP_K0LR_b246, 1 << 22   @ bitWidth 1 (b246)  
        .equ CRYP_K0LR_b247, 1 << 23   @ bitWidth 1 (b247)  
        .equ CRYP_K0LR_b248, 1 << 24   @ bitWidth 1 (b248)  
        .equ CRYP_K0LR_b249, 1 << 25   @ bitWidth 1 (b249)  
        .equ CRYP_K0LR_b250, 1 << 26   @ bitWidth 1 (b250)  
        .equ CRYP_K0LR_b251, 1 << 27   @ bitWidth 1 (b251)  
        .equ CRYP_K0LR_b252, 1 << 28   @ bitWidth 1 (b252)  
        .equ CRYP_K0LR_b253, 1 << 29   @ bitWidth 1 (b253)  
        .equ CRYP_K0LR_b254, 1 << 30   @ bitWidth 1 (b254)  
        .equ CRYP_K0LR_b255, 1 << 31   @ bitWidth 1 (b255)  
 
    .equ CRYP_K0RR, CRYP_BASE + 0x24 @ (key registers) 
        .equ CRYP_K0RR_b192, 1 << 0   @ bitWidth 1 (b192)  
        .equ CRYP_K0RR_b193, 1 << 1   @ bitWidth 1 (b193)  
        .equ CRYP_K0RR_b194, 1 << 2   @ bitWidth 1 (b194)  
        .equ CRYP_K0RR_b195, 1 << 3   @ bitWidth 1 (b195)  
        .equ CRYP_K0RR_b196, 1 << 4   @ bitWidth 1 (b196)  
        .equ CRYP_K0RR_b197, 1 << 5   @ bitWidth 1 (b197)  
        .equ CRYP_K0RR_b198, 1 << 6   @ bitWidth 1 (b198)  
        .equ CRYP_K0RR_b199, 1 << 7   @ bitWidth 1 (b199)  
        .equ CRYP_K0RR_b200, 1 << 8   @ bitWidth 1 (b200)  
        .equ CRYP_K0RR_b201, 1 << 9   @ bitWidth 1 (b201)  
        .equ CRYP_K0RR_b202, 1 << 10   @ bitWidth 1 (b202)  
        .equ CRYP_K0RR_b203, 1 << 11   @ bitWidth 1 (b203)  
        .equ CRYP_K0RR_b204, 1 << 12   @ bitWidth 1 (b204)  
        .equ CRYP_K0RR_b205, 1 << 13   @ bitWidth 1 (b205)  
        .equ CRYP_K0RR_b206, 1 << 14   @ bitWidth 1 (b206)  
        .equ CRYP_K0RR_b207, 1 << 15   @ bitWidth 1 (b207)  
        .equ CRYP_K0RR_b208, 1 << 16   @ bitWidth 1 (b208)  
        .equ CRYP_K0RR_b209, 1 << 17   @ bitWidth 1 (b209)  
        .equ CRYP_K0RR_b210, 1 << 18   @ bitWidth 1 (b210)  
        .equ CRYP_K0RR_b211, 1 << 19   @ bitWidth 1 (b211)  
        .equ CRYP_K0RR_b212, 1 << 20   @ bitWidth 1 (b212)  
        .equ CRYP_K0RR_b213, 1 << 21   @ bitWidth 1 (b213)  
        .equ CRYP_K0RR_b214, 1 << 22   @ bitWidth 1 (b214)  
        .equ CRYP_K0RR_b215, 1 << 23   @ bitWidth 1 (b215)  
        .equ CRYP_K0RR_b216, 1 << 24   @ bitWidth 1 (b216)  
        .equ CRYP_K0RR_b217, 1 << 25   @ bitWidth 1 (b217)  
        .equ CRYP_K0RR_b218, 1 << 26   @ bitWidth 1 (b218)  
        .equ CRYP_K0RR_b219, 1 << 27   @ bitWidth 1 (b219)  
        .equ CRYP_K0RR_b220, 1 << 28   @ bitWidth 1 (b220)  
        .equ CRYP_K0RR_b221, 1 << 29   @ bitWidth 1 (b221)  
        .equ CRYP_K0RR_b222, 1 << 30   @ bitWidth 1 (b222)  
        .equ CRYP_K0RR_b223, 1 << 31   @ bitWidth 1 (b223)  
 
    .equ CRYP_K1LR, CRYP_BASE + 0x28 @ (key registers) 
        .equ CRYP_K1LR_b160, 1 << 0   @ bitWidth 1 (b160)  
        .equ CRYP_K1LR_b161, 1 << 1   @ bitWidth 1 (b161)  
        .equ CRYP_K1LR_b162, 1 << 2   @ bitWidth 1 (b162)  
        .equ CRYP_K1LR_b163, 1 << 3   @ bitWidth 1 (b163)  
        .equ CRYP_K1LR_b164, 1 << 4   @ bitWidth 1 (b164)  
        .equ CRYP_K1LR_b165, 1 << 5   @ bitWidth 1 (b165)  
        .equ CRYP_K1LR_b166, 1 << 6   @ bitWidth 1 (b166)  
        .equ CRYP_K1LR_b167, 1 << 7   @ bitWidth 1 (b167)  
        .equ CRYP_K1LR_b168, 1 << 8   @ bitWidth 1 (b168)  
        .equ CRYP_K1LR_b169, 1 << 9   @ bitWidth 1 (b169)  
        .equ CRYP_K1LR_b170, 1 << 10   @ bitWidth 1 (b170)  
        .equ CRYP_K1LR_b171, 1 << 11   @ bitWidth 1 (b171)  
        .equ CRYP_K1LR_b172, 1 << 12   @ bitWidth 1 (b172)  
        .equ CRYP_K1LR_b173, 1 << 13   @ bitWidth 1 (b173)  
        .equ CRYP_K1LR_b174, 1 << 14   @ bitWidth 1 (b174)  
        .equ CRYP_K1LR_b175, 1 << 15   @ bitWidth 1 (b175)  
        .equ CRYP_K1LR_b176, 1 << 16   @ bitWidth 1 (b176)  
        .equ CRYP_K1LR_b177, 1 << 17   @ bitWidth 1 (b177)  
        .equ CRYP_K1LR_b178, 1 << 18   @ bitWidth 1 (b178)  
        .equ CRYP_K1LR_b179, 1 << 19   @ bitWidth 1 (b179)  
        .equ CRYP_K1LR_b180, 1 << 20   @ bitWidth 1 (b180)  
        .equ CRYP_K1LR_b181, 1 << 21   @ bitWidth 1 (b181)  
        .equ CRYP_K1LR_b182, 1 << 22   @ bitWidth 1 (b182)  
        .equ CRYP_K1LR_b183, 1 << 23   @ bitWidth 1 (b183)  
        .equ CRYP_K1LR_b184, 1 << 24   @ bitWidth 1 (b184)  
        .equ CRYP_K1LR_b185, 1 << 25   @ bitWidth 1 (b185)  
        .equ CRYP_K1LR_b186, 1 << 26   @ bitWidth 1 (b186)  
        .equ CRYP_K1LR_b187, 1 << 27   @ bitWidth 1 (b187)  
        .equ CRYP_K1LR_b188, 1 << 28   @ bitWidth 1 (b188)  
        .equ CRYP_K1LR_b189, 1 << 29   @ bitWidth 1 (b189)  
        .equ CRYP_K1LR_b190, 1 << 30   @ bitWidth 1 (b190)  
        .equ CRYP_K1LR_b191, 1 << 31   @ bitWidth 1 (b191)  
 
    .equ CRYP_K1RR, CRYP_BASE + 0x2C @ (key registers) 
        .equ CRYP_K1RR_b128, 1 << 0   @ bitWidth 1 (b128)  
        .equ CRYP_K1RR_b129, 1 << 1   @ bitWidth 1 (b129)  
        .equ CRYP_K1RR_b130, 1 << 2   @ bitWidth 1 (b130)  
        .equ CRYP_K1RR_b131, 1 << 3   @ bitWidth 1 (b131)  
        .equ CRYP_K1RR_b132, 1 << 4   @ bitWidth 1 (b132)  
        .equ CRYP_K1RR_b133, 1 << 5   @ bitWidth 1 (b133)  
        .equ CRYP_K1RR_b134, 1 << 6   @ bitWidth 1 (b134)  
        .equ CRYP_K1RR_b135, 1 << 7   @ bitWidth 1 (b135)  
        .equ CRYP_K1RR_b136, 1 << 8   @ bitWidth 1 (b136)  
        .equ CRYP_K1RR_b137, 1 << 9   @ bitWidth 1 (b137)  
        .equ CRYP_K1RR_b138, 1 << 10   @ bitWidth 1 (b138)  
        .equ CRYP_K1RR_b139, 1 << 11   @ bitWidth 1 (b139)  
        .equ CRYP_K1RR_b140, 1 << 12   @ bitWidth 1 (b140)  
        .equ CRYP_K1RR_b141, 1 << 13   @ bitWidth 1 (b141)  
        .equ CRYP_K1RR_b142, 1 << 14   @ bitWidth 1 (b142)  
        .equ CRYP_K1RR_b143, 1 << 15   @ bitWidth 1 (b143)  
        .equ CRYP_K1RR_b144, 1 << 16   @ bitWidth 1 (b144)  
        .equ CRYP_K1RR_b145, 1 << 17   @ bitWidth 1 (b145)  
        .equ CRYP_K1RR_b146, 1 << 18   @ bitWidth 1 (b146)  
        .equ CRYP_K1RR_b147, 1 << 19   @ bitWidth 1 (b147)  
        .equ CRYP_K1RR_b148, 1 << 20   @ bitWidth 1 (b148)  
        .equ CRYP_K1RR_b149, 1 << 21   @ bitWidth 1 (b149)  
        .equ CRYP_K1RR_b150, 1 << 22   @ bitWidth 1 (b150)  
        .equ CRYP_K1RR_b151, 1 << 23   @ bitWidth 1 (b151)  
        .equ CRYP_K1RR_b152, 1 << 24   @ bitWidth 1 (b152)  
        .equ CRYP_K1RR_b153, 1 << 25   @ bitWidth 1 (b153)  
        .equ CRYP_K1RR_b154, 1 << 26   @ bitWidth 1 (b154)  
        .equ CRYP_K1RR_b155, 1 << 27   @ bitWidth 1 (b155)  
        .equ CRYP_K1RR_b156, 1 << 28   @ bitWidth 1 (b156)  
        .equ CRYP_K1RR_b157, 1 << 29   @ bitWidth 1 (b157)  
        .equ CRYP_K1RR_b158, 1 << 30   @ bitWidth 1 (b158)  
        .equ CRYP_K1RR_b159, 1 << 31   @ bitWidth 1 (b159)  
 
    .equ CRYP_K2LR, CRYP_BASE + 0x30 @ (key registers) 
        .equ CRYP_K2LR_b96, 1 << 0   @ bitWidth 1 (b96)  
        .equ CRYP_K2LR_b97, 1 << 1   @ bitWidth 1 (b97)  
        .equ CRYP_K2LR_b98, 1 << 2   @ bitWidth 1 (b98)  
        .equ CRYP_K2LR_b99, 1 << 3   @ bitWidth 1 (b99)  
        .equ CRYP_K2LR_b100, 1 << 4   @ bitWidth 1 (b100)  
        .equ CRYP_K2LR_b101, 1 << 5   @ bitWidth 1 (b101)  
        .equ CRYP_K2LR_b102, 1 << 6   @ bitWidth 1 (b102)  
        .equ CRYP_K2LR_b103, 1 << 7   @ bitWidth 1 (b103)  
        .equ CRYP_K2LR_b104, 1 << 8   @ bitWidth 1 (b104)  
        .equ CRYP_K2LR_b105, 1 << 9   @ bitWidth 1 (b105)  
        .equ CRYP_K2LR_b106, 1 << 10   @ bitWidth 1 (b106)  
        .equ CRYP_K2LR_b107, 1 << 11   @ bitWidth 1 (b107)  
        .equ CRYP_K2LR_b108, 1 << 12   @ bitWidth 1 (b108)  
        .equ CRYP_K2LR_b109, 1 << 13   @ bitWidth 1 (b109)  
        .equ CRYP_K2LR_b110, 1 << 14   @ bitWidth 1 (b110)  
        .equ CRYP_K2LR_b111, 1 << 15   @ bitWidth 1 (b111)  
        .equ CRYP_K2LR_b112, 1 << 16   @ bitWidth 1 (b112)  
        .equ CRYP_K2LR_b113, 1 << 17   @ bitWidth 1 (b113)  
        .equ CRYP_K2LR_b114, 1 << 18   @ bitWidth 1 (b114)  
        .equ CRYP_K2LR_b115, 1 << 19   @ bitWidth 1 (b115)  
        .equ CRYP_K2LR_b116, 1 << 20   @ bitWidth 1 (b116)  
        .equ CRYP_K2LR_b117, 1 << 21   @ bitWidth 1 (b117)  
        .equ CRYP_K2LR_b118, 1 << 22   @ bitWidth 1 (b118)  
        .equ CRYP_K2LR_b119, 1 << 23   @ bitWidth 1 (b119)  
        .equ CRYP_K2LR_b120, 1 << 24   @ bitWidth 1 (b120)  
        .equ CRYP_K2LR_b121, 1 << 25   @ bitWidth 1 (b121)  
        .equ CRYP_K2LR_b122, 1 << 26   @ bitWidth 1 (b122)  
        .equ CRYP_K2LR_b123, 1 << 27   @ bitWidth 1 (b123)  
        .equ CRYP_K2LR_b124, 1 << 28   @ bitWidth 1 (b124)  
        .equ CRYP_K2LR_b125, 1 << 29   @ bitWidth 1 (b125)  
        .equ CRYP_K2LR_b126, 1 << 30   @ bitWidth 1 (b126)  
        .equ CRYP_K2LR_b127, 1 << 31   @ bitWidth 1 (b127)  
 
    .equ CRYP_K2RR, CRYP_BASE + 0x34 @ (key registers) 
        .equ CRYP_K2RR_b64, 1 << 0   @ bitWidth 1 (b64)  
        .equ CRYP_K2RR_b65, 1 << 1   @ bitWidth 1 (b65)  
        .equ CRYP_K2RR_b66, 1 << 2   @ bitWidth 1 (b66)  
        .equ CRYP_K2RR_b67, 1 << 3   @ bitWidth 1 (b67)  
        .equ CRYP_K2RR_b68, 1 << 4   @ bitWidth 1 (b68)  
        .equ CRYP_K2RR_b69, 1 << 5   @ bitWidth 1 (b69)  
        .equ CRYP_K2RR_b70, 1 << 6   @ bitWidth 1 (b70)  
        .equ CRYP_K2RR_b71, 1 << 7   @ bitWidth 1 (b71)  
        .equ CRYP_K2RR_b72, 1 << 8   @ bitWidth 1 (b72)  
        .equ CRYP_K2RR_b73, 1 << 9   @ bitWidth 1 (b73)  
        .equ CRYP_K2RR_b74, 1 << 10   @ bitWidth 1 (b74)  
        .equ CRYP_K2RR_b75, 1 << 11   @ bitWidth 1 (b75)  
        .equ CRYP_K2RR_b76, 1 << 12   @ bitWidth 1 (b76)  
        .equ CRYP_K2RR_b77, 1 << 13   @ bitWidth 1 (b77)  
        .equ CRYP_K2RR_b78, 1 << 14   @ bitWidth 1 (b78)  
        .equ CRYP_K2RR_b79, 1 << 15   @ bitWidth 1 (b79)  
        .equ CRYP_K2RR_b80, 1 << 16   @ bitWidth 1 (b80)  
        .equ CRYP_K2RR_b81, 1 << 17   @ bitWidth 1 (b81)  
        .equ CRYP_K2RR_b82, 1 << 18   @ bitWidth 1 (b82)  
        .equ CRYP_K2RR_b83, 1 << 19   @ bitWidth 1 (b83)  
        .equ CRYP_K2RR_b84, 1 << 20   @ bitWidth 1 (b84)  
        .equ CRYP_K2RR_b85, 1 << 21   @ bitWidth 1 (b85)  
        .equ CRYP_K2RR_b86, 1 << 22   @ bitWidth 1 (b86)  
        .equ CRYP_K2RR_b87, 1 << 23   @ bitWidth 1 (b87)  
        .equ CRYP_K2RR_b88, 1 << 24   @ bitWidth 1 (b88)  
        .equ CRYP_K2RR_b89, 1 << 25   @ bitWidth 1 (b89)  
        .equ CRYP_K2RR_b90, 1 << 26   @ bitWidth 1 (b90)  
        .equ CRYP_K2RR_b91, 1 << 27   @ bitWidth 1 (b91)  
        .equ CRYP_K2RR_b92, 1 << 28   @ bitWidth 1 (b92)  
        .equ CRYP_K2RR_b93, 1 << 29   @ bitWidth 1 (b93)  
        .equ CRYP_K2RR_b94, 1 << 30   @ bitWidth 1 (b94)  
        .equ CRYP_K2RR_b95, 1 << 31   @ bitWidth 1 (b95)  
 
    .equ CRYP_K3LR, CRYP_BASE + 0x38 @ (key registers) 
        .equ CRYP_K3LR_b32, 1 << 0   @ bitWidth 1 (b32)  
        .equ CRYP_K3LR_b33, 1 << 1   @ bitWidth 1 (b33)  
        .equ CRYP_K3LR_b34, 1 << 2   @ bitWidth 1 (b34)  
        .equ CRYP_K3LR_b35, 1 << 3   @ bitWidth 1 (b35)  
        .equ CRYP_K3LR_b36, 1 << 4   @ bitWidth 1 (b36)  
        .equ CRYP_K3LR_b37, 1 << 5   @ bitWidth 1 (b37)  
        .equ CRYP_K3LR_b38, 1 << 6   @ bitWidth 1 (b38)  
        .equ CRYP_K3LR_b39, 1 << 7   @ bitWidth 1 (b39)  
        .equ CRYP_K3LR_b40, 1 << 8   @ bitWidth 1 (b40)  
        .equ CRYP_K3LR_b41, 1 << 9   @ bitWidth 1 (b41)  
        .equ CRYP_K3LR_b42, 1 << 10   @ bitWidth 1 (b42)  
        .equ CRYP_K3LR_b43, 1 << 11   @ bitWidth 1 (b43)  
        .equ CRYP_K3LR_b44, 1 << 12   @ bitWidth 1 (b44)  
        .equ CRYP_K3LR_b45, 1 << 13   @ bitWidth 1 (b45)  
        .equ CRYP_K3LR_b46, 1 << 14   @ bitWidth 1 (b46)  
        .equ CRYP_K3LR_b47, 1 << 15   @ bitWidth 1 (b47)  
        .equ CRYP_K3LR_b48, 1 << 16   @ bitWidth 1 (b48)  
        .equ CRYP_K3LR_b49, 1 << 17   @ bitWidth 1 (b49)  
        .equ CRYP_K3LR_b50, 1 << 18   @ bitWidth 1 (b50)  
        .equ CRYP_K3LR_b51, 1 << 19   @ bitWidth 1 (b51)  
        .equ CRYP_K3LR_b52, 1 << 20   @ bitWidth 1 (b52)  
        .equ CRYP_K3LR_b53, 1 << 21   @ bitWidth 1 (b53)  
        .equ CRYP_K3LR_b54, 1 << 22   @ bitWidth 1 (b54)  
        .equ CRYP_K3LR_b55, 1 << 23   @ bitWidth 1 (b55)  
        .equ CRYP_K3LR_b56, 1 << 24   @ bitWidth 1 (b56)  
        .equ CRYP_K3LR_b57, 1 << 25   @ bitWidth 1 (b57)  
        .equ CRYP_K3LR_b58, 1 << 26   @ bitWidth 1 (b58)  
        .equ CRYP_K3LR_b59, 1 << 27   @ bitWidth 1 (b59)  
        .equ CRYP_K3LR_b60, 1 << 28   @ bitWidth 1 (b60)  
        .equ CRYP_K3LR_b61, 1 << 29   @ bitWidth 1 (b61)  
        .equ CRYP_K3LR_b62, 1 << 30   @ bitWidth 1 (b62)  
        .equ CRYP_K3LR_b63, 1 << 31   @ bitWidth 1 (b63)  
 
    .equ CRYP_K3RR, CRYP_BASE + 0x3C @ (key registers) 
        .equ CRYP_K3RR_b0, 1 << 0   @ bitWidth 1 (b0)  
        .equ CRYP_K3RR_b1, 1 << 1   @ bitWidth 1 (b1)  
        .equ CRYP_K3RR_b2, 1 << 2   @ bitWidth 1 (b2)  
        .equ CRYP_K3RR_b3, 1 << 3   @ bitWidth 1 (b3)  
        .equ CRYP_K3RR_b4, 1 << 4   @ bitWidth 1 (b4)  
        .equ CRYP_K3RR_b5, 1 << 5   @ bitWidth 1 (b5)  
        .equ CRYP_K3RR_b6, 1 << 6   @ bitWidth 1 (b6)  
        .equ CRYP_K3RR_b7, 1 << 7   @ bitWidth 1 (b7)  
        .equ CRYP_K3RR_b8, 1 << 8   @ bitWidth 1 (b8)  
        .equ CRYP_K3RR_b9, 1 << 9   @ bitWidth 1 (b9)  
        .equ CRYP_K3RR_b10, 1 << 10   @ bitWidth 1 (b10)  
        .equ CRYP_K3RR_b11, 1 << 11   @ bitWidth 1 (b11)  
        .equ CRYP_K3RR_b12, 1 << 12   @ bitWidth 1 (b12)  
        .equ CRYP_K3RR_b13, 1 << 13   @ bitWidth 1 (b13)  
        .equ CRYP_K3RR_b14, 1 << 14   @ bitWidth 1 (b14)  
        .equ CRYP_K3RR_b15, 1 << 15   @ bitWidth 1 (b15)  
        .equ CRYP_K3RR_b16, 1 << 16   @ bitWidth 1 (b16)  
        .equ CRYP_K3RR_b17, 1 << 17   @ bitWidth 1 (b17)  
        .equ CRYP_K3RR_b18, 1 << 18   @ bitWidth 1 (b18)  
        .equ CRYP_K3RR_b19, 1 << 19   @ bitWidth 1 (b19)  
        .equ CRYP_K3RR_b20, 1 << 20   @ bitWidth 1 (b20)  
        .equ CRYP_K3RR_b21, 1 << 21   @ bitWidth 1 (b21)  
        .equ CRYP_K3RR_b22, 1 << 22   @ bitWidth 1 (b22)  
        .equ CRYP_K3RR_b23, 1 << 23   @ bitWidth 1 (b23)  
        .equ CRYP_K3RR_b24, 1 << 24   @ bitWidth 1 (b24)  
        .equ CRYP_K3RR_b25, 1 << 25   @ bitWidth 1 (b25)  
        .equ CRYP_K3RR_b26, 1 << 26   @ bitWidth 1 (b26)  
        .equ CRYP_K3RR_b27, 1 << 27   @ bitWidth 1 (b27)  
        .equ CRYP_K3RR_b28, 1 << 28   @ bitWidth 1 (b28)  
        .equ CRYP_K3RR_b29, 1 << 29   @ bitWidth 1 (b29)  
        .equ CRYP_K3RR_b30, 1 << 30   @ bitWidth 1 (b30)  
        .equ CRYP_K3RR_b31, 1 << 31   @ bitWidth 1 (b31)  
 
    .equ CRYP_IV0LR, CRYP_BASE + 0x40 @ (initialization vector registers) 
        .equ CRYP_IV0LR_IV31, 1 << 0   @ bitWidth 1 (IV31)  
        .equ CRYP_IV0LR_IV30, 1 << 1   @ bitWidth 1 (IV30)  
        .equ CRYP_IV0LR_IV29, 1 << 2   @ bitWidth 1 (IV29)  
        .equ CRYP_IV0LR_IV28, 1 << 3   @ bitWidth 1 (IV28)  
        .equ CRYP_IV0LR_IV27, 1 << 4   @ bitWidth 1 (IV27)  
        .equ CRYP_IV0LR_IV26, 1 << 5   @ bitWidth 1 (IV26)  
        .equ CRYP_IV0LR_IV25, 1 << 6   @ bitWidth 1 (IV25)  
        .equ CRYP_IV0LR_IV24, 1 << 7   @ bitWidth 1 (IV24)  
        .equ CRYP_IV0LR_IV23, 1 << 8   @ bitWidth 1 (IV23)  
        .equ CRYP_IV0LR_IV22, 1 << 9   @ bitWidth 1 (IV22)  
        .equ CRYP_IV0LR_IV21, 1 << 10   @ bitWidth 1 (IV21)  
        .equ CRYP_IV0LR_IV20, 1 << 11   @ bitWidth 1 (IV20)  
        .equ CRYP_IV0LR_IV19, 1 << 12   @ bitWidth 1 (IV19)  
        .equ CRYP_IV0LR_IV18, 1 << 13   @ bitWidth 1 (IV18)  
        .equ CRYP_IV0LR_IV17, 1 << 14   @ bitWidth 1 (IV17)  
        .equ CRYP_IV0LR_IV16, 1 << 15   @ bitWidth 1 (IV16)  
        .equ CRYP_IV0LR_IV15, 1 << 16   @ bitWidth 1 (IV15)  
        .equ CRYP_IV0LR_IV14, 1 << 17   @ bitWidth 1 (IV14)  
        .equ CRYP_IV0LR_IV13, 1 << 18   @ bitWidth 1 (IV13)  
        .equ CRYP_IV0LR_IV12, 1 << 19   @ bitWidth 1 (IV12)  
        .equ CRYP_IV0LR_IV11, 1 << 20   @ bitWidth 1 (IV11)  
        .equ CRYP_IV0LR_IV10, 1 << 21   @ bitWidth 1 (IV10)  
        .equ CRYP_IV0LR_IV9, 1 << 22   @ bitWidth 1 (IV9)  
        .equ CRYP_IV0LR_IV8, 1 << 23   @ bitWidth 1 (IV8)  
        .equ CRYP_IV0LR_IV7, 1 << 24   @ bitWidth 1 (IV7)  
        .equ CRYP_IV0LR_IV6, 1 << 25   @ bitWidth 1 (IV6)  
        .equ CRYP_IV0LR_IV5, 1 << 26   @ bitWidth 1 (IV5)  
        .equ CRYP_IV0LR_IV4, 1 << 27   @ bitWidth 1 (IV4)  
        .equ CRYP_IV0LR_IV3, 1 << 28   @ bitWidth 1 (IV3)  
        .equ CRYP_IV0LR_IV2, 1 << 29   @ bitWidth 1 (IV2)  
        .equ CRYP_IV0LR_IV1, 1 << 30   @ bitWidth 1 (IV1)  
        .equ CRYP_IV0LR_IV0, 1 << 31   @ bitWidth 1 (IV0)  
 
    .equ CRYP_IV0RR, CRYP_BASE + 0x44 @ (initialization vector registers) 
        .equ CRYP_IV0RR_IV63, 1 << 0   @ bitWidth 1 (IV63)  
        .equ CRYP_IV0RR_IV62, 1 << 1   @ bitWidth 1 (IV62)  
        .equ CRYP_IV0RR_IV61, 1 << 2   @ bitWidth 1 (IV61)  
        .equ CRYP_IV0RR_IV60, 1 << 3   @ bitWidth 1 (IV60)  
        .equ CRYP_IV0RR_IV59, 1 << 4   @ bitWidth 1 (IV59)  
        .equ CRYP_IV0RR_IV58, 1 << 5   @ bitWidth 1 (IV58)  
        .equ CRYP_IV0RR_IV57, 1 << 6   @ bitWidth 1 (IV57)  
        .equ CRYP_IV0RR_IV56, 1 << 7   @ bitWidth 1 (IV56)  
        .equ CRYP_IV0RR_IV55, 1 << 8   @ bitWidth 1 (IV55)  
        .equ CRYP_IV0RR_IV54, 1 << 9   @ bitWidth 1 (IV54)  
        .equ CRYP_IV0RR_IV53, 1 << 10   @ bitWidth 1 (IV53)  
        .equ CRYP_IV0RR_IV52, 1 << 11   @ bitWidth 1 (IV52)  
        .equ CRYP_IV0RR_IV51, 1 << 12   @ bitWidth 1 (IV51)  
        .equ CRYP_IV0RR_IV50, 1 << 13   @ bitWidth 1 (IV50)  
        .equ CRYP_IV0RR_IV49, 1 << 14   @ bitWidth 1 (IV49)  
        .equ CRYP_IV0RR_IV48, 1 << 15   @ bitWidth 1 (IV48)  
        .equ CRYP_IV0RR_IV47, 1 << 16   @ bitWidth 1 (IV47)  
        .equ CRYP_IV0RR_IV46, 1 << 17   @ bitWidth 1 (IV46)  
        .equ CRYP_IV0RR_IV45, 1 << 18   @ bitWidth 1 (IV45)  
        .equ CRYP_IV0RR_IV44, 1 << 19   @ bitWidth 1 (IV44)  
        .equ CRYP_IV0RR_IV43, 1 << 20   @ bitWidth 1 (IV43)  
        .equ CRYP_IV0RR_IV42, 1 << 21   @ bitWidth 1 (IV42)  
        .equ CRYP_IV0RR_IV41, 1 << 22   @ bitWidth 1 (IV41)  
        .equ CRYP_IV0RR_IV40, 1 << 23   @ bitWidth 1 (IV40)  
        .equ CRYP_IV0RR_IV39, 1 << 24   @ bitWidth 1 (IV39)  
        .equ CRYP_IV0RR_IV38, 1 << 25   @ bitWidth 1 (IV38)  
        .equ CRYP_IV0RR_IV37, 1 << 26   @ bitWidth 1 (IV37)  
        .equ CRYP_IV0RR_IV36, 1 << 27   @ bitWidth 1 (IV36)  
        .equ CRYP_IV0RR_IV35, 1 << 28   @ bitWidth 1 (IV35)  
        .equ CRYP_IV0RR_IV34, 1 << 29   @ bitWidth 1 (IV34)  
        .equ CRYP_IV0RR_IV33, 1 << 30   @ bitWidth 1 (IV33)  
        .equ CRYP_IV0RR_IV32, 1 << 31   @ bitWidth 1 (IV32)  
 
    .equ CRYP_IV1LR, CRYP_BASE + 0x48 @ (initialization vector registers) 
        .equ CRYP_IV1LR_IV95, 1 << 0   @ bitWidth 1 (IV95)  
        .equ CRYP_IV1LR_IV94, 1 << 1   @ bitWidth 1 (IV94)  
        .equ CRYP_IV1LR_IV93, 1 << 2   @ bitWidth 1 (IV93)  
        .equ CRYP_IV1LR_IV92, 1 << 3   @ bitWidth 1 (IV92)  
        .equ CRYP_IV1LR_IV91, 1 << 4   @ bitWidth 1 (IV91)  
        .equ CRYP_IV1LR_IV90, 1 << 5   @ bitWidth 1 (IV90)  
        .equ CRYP_IV1LR_IV89, 1 << 6   @ bitWidth 1 (IV89)  
        .equ CRYP_IV1LR_IV88, 1 << 7   @ bitWidth 1 (IV88)  
        .equ CRYP_IV1LR_IV87, 1 << 8   @ bitWidth 1 (IV87)  
        .equ CRYP_IV1LR_IV86, 1 << 9   @ bitWidth 1 (IV86)  
        .equ CRYP_IV1LR_IV85, 1 << 10   @ bitWidth 1 (IV85)  
        .equ CRYP_IV1LR_IV84, 1 << 11   @ bitWidth 1 (IV84)  
        .equ CRYP_IV1LR_IV83, 1 << 12   @ bitWidth 1 (IV83)  
        .equ CRYP_IV1LR_IV82, 1 << 13   @ bitWidth 1 (IV82)  
        .equ CRYP_IV1LR_IV81, 1 << 14   @ bitWidth 1 (IV81)  
        .equ CRYP_IV1LR_IV80, 1 << 15   @ bitWidth 1 (IV80)  
        .equ CRYP_IV1LR_IV79, 1 << 16   @ bitWidth 1 (IV79)  
        .equ CRYP_IV1LR_IV78, 1 << 17   @ bitWidth 1 (IV78)  
        .equ CRYP_IV1LR_IV77, 1 << 18   @ bitWidth 1 (IV77)  
        .equ CRYP_IV1LR_IV76, 1 << 19   @ bitWidth 1 (IV76)  
        .equ CRYP_IV1LR_IV75, 1 << 20   @ bitWidth 1 (IV75)  
        .equ CRYP_IV1LR_IV74, 1 << 21   @ bitWidth 1 (IV74)  
        .equ CRYP_IV1LR_IV73, 1 << 22   @ bitWidth 1 (IV73)  
        .equ CRYP_IV1LR_IV72, 1 << 23   @ bitWidth 1 (IV72)  
        .equ CRYP_IV1LR_IV71, 1 << 24   @ bitWidth 1 (IV71)  
        .equ CRYP_IV1LR_IV70, 1 << 25   @ bitWidth 1 (IV70)  
        .equ CRYP_IV1LR_IV69, 1 << 26   @ bitWidth 1 (IV69)  
        .equ CRYP_IV1LR_IV68, 1 << 27   @ bitWidth 1 (IV68)  
        .equ CRYP_IV1LR_IV67, 1 << 28   @ bitWidth 1 (IV67)  
        .equ CRYP_IV1LR_IV66, 1 << 29   @ bitWidth 1 (IV66)  
        .equ CRYP_IV1LR_IV65, 1 << 30   @ bitWidth 1 (IV65)  
        .equ CRYP_IV1LR_IV64, 1 << 31   @ bitWidth 1 (IV64)  
 
    .equ CRYP_IV1RR, CRYP_BASE + 0x4C @ (initialization vector registers) 
        .equ CRYP_IV1RR_IV127, 1 << 0   @ bitWidth 1 (IV127)  
        .equ CRYP_IV1RR_IV126, 1 << 1   @ bitWidth 1 (IV126)  
        .equ CRYP_IV1RR_IV125, 1 << 2   @ bitWidth 1 (IV125)  
        .equ CRYP_IV1RR_IV124, 1 << 3   @ bitWidth 1 (IV124)  
        .equ CRYP_IV1RR_IV123, 1 << 4   @ bitWidth 1 (IV123)  
        .equ CRYP_IV1RR_IV122, 1 << 5   @ bitWidth 1 (IV122)  
        .equ CRYP_IV1RR_IV121, 1 << 6   @ bitWidth 1 (IV121)  
        .equ CRYP_IV1RR_IV120, 1 << 7   @ bitWidth 1 (IV120)  
        .equ CRYP_IV1RR_IV119, 1 << 8   @ bitWidth 1 (IV119)  
        .equ CRYP_IV1RR_IV118, 1 << 9   @ bitWidth 1 (IV118)  
        .equ CRYP_IV1RR_IV117, 1 << 10   @ bitWidth 1 (IV117)  
        .equ CRYP_IV1RR_IV116, 1 << 11   @ bitWidth 1 (IV116)  
        .equ CRYP_IV1RR_IV115, 1 << 12   @ bitWidth 1 (IV115)  
        .equ CRYP_IV1RR_IV114, 1 << 13   @ bitWidth 1 (IV114)  
        .equ CRYP_IV1RR_IV113, 1 << 14   @ bitWidth 1 (IV113)  
        .equ CRYP_IV1RR_IV112, 1 << 15   @ bitWidth 1 (IV112)  
        .equ CRYP_IV1RR_IV111, 1 << 16   @ bitWidth 1 (IV111)  
        .equ CRYP_IV1RR_IV110, 1 << 17   @ bitWidth 1 (IV110)  
        .equ CRYP_IV1RR_IV109, 1 << 18   @ bitWidth 1 (IV109)  
        .equ CRYP_IV1RR_IV108, 1 << 19   @ bitWidth 1 (IV108)  
        .equ CRYP_IV1RR_IV107, 1 << 20   @ bitWidth 1 (IV107)  
        .equ CRYP_IV1RR_IV106, 1 << 21   @ bitWidth 1 (IV106)  
        .equ CRYP_IV1RR_IV105, 1 << 22   @ bitWidth 1 (IV105)  
        .equ CRYP_IV1RR_IV104, 1 << 23   @ bitWidth 1 (IV104)  
        .equ CRYP_IV1RR_IV103, 1 << 24   @ bitWidth 1 (IV103)  
        .equ CRYP_IV1RR_IV102, 1 << 25   @ bitWidth 1 (IV102)  
        .equ CRYP_IV1RR_IV101, 1 << 26   @ bitWidth 1 (IV101)  
        .equ CRYP_IV1RR_IV100, 1 << 27   @ bitWidth 1 (IV100)  
        .equ CRYP_IV1RR_IV99, 1 << 28   @ bitWidth 1 (IV99)  
        .equ CRYP_IV1RR_IV98, 1 << 29   @ bitWidth 1 (IV98)  
        .equ CRYP_IV1RR_IV97, 1 << 30   @ bitWidth 1 (IV97)  
        .equ CRYP_IV1RR_IV96, 1 << 31   @ bitWidth 1 (IV96)  
 
    .equ CRYP_CSGCMCCM0R, CRYP_BASE + 0x50 @ (context swap register) 
        .equ CRYP_CSGCMCCM0R_CSGCMCCM0R_Shift, 0   @ bitWidth 32 (CSGCMCCM0R)  
 
    .equ CRYP_CSGCMCCM1R, CRYP_BASE + 0x54 @ (context swap register) 
        .equ CRYP_CSGCMCCM1R_CSGCMCCM1R_Shift, 0   @ bitWidth 32 (CSGCMCCM1R)  
 
    .equ CRYP_CSGCMCCM2R, CRYP_BASE + 0x58 @ (context swap register) 
        .equ CRYP_CSGCMCCM2R_CSGCMCCM2R_Shift, 0   @ bitWidth 32 (CSGCMCCM2R)  
 
    .equ CRYP_CSGCMCCM3R, CRYP_BASE + 0x5C @ (context swap register) 
        .equ CRYP_CSGCMCCM3R_CSGCMCCM3R_Shift, 0   @ bitWidth 32 (CSGCMCCM3R)  
 
    .equ CRYP_CSGCMCCM4R, CRYP_BASE + 0x60 @ (context swap register) 
        .equ CRYP_CSGCMCCM4R_CSGCMCCM4R_Shift, 0   @ bitWidth 32 (CSGCMCCM4R)  
 
    .equ CRYP_CSGCMCCM5R, CRYP_BASE + 0x64 @ (context swap register) 
        .equ CRYP_CSGCMCCM5R_CSGCMCCM5R_Shift, 0   @ bitWidth 32 (CSGCMCCM5R)  
 
    .equ CRYP_CSGCMCCM6R, CRYP_BASE + 0x68 @ (context swap register) 
        .equ CRYP_CSGCMCCM6R_CSGCMCCM6R_Shift, 0   @ bitWidth 32 (CSGCMCCM6R)  
 
    .equ CRYP_CSGCMCCM7R, CRYP_BASE + 0x6C @ (context swap register) 
        .equ CRYP_CSGCMCCM7R_CSGCMCCM7R_Shift, 0   @ bitWidth 32 (CSGCMCCM7R)  
 
    .equ CRYP_CSGCM0R, CRYP_BASE + 0x70 @ (context swap register) 
        .equ CRYP_CSGCM0R_CSGCM0R_Shift, 0   @ bitWidth 32 (CSGCM0R)  
 
    .equ CRYP_CSGCM1R, CRYP_BASE + 0x74 @ (context swap register) 
        .equ CRYP_CSGCM1R_CSGCM1R_Shift, 0   @ bitWidth 32 (CSGCM1R)  
 
    .equ CRYP_CSGCM2R, CRYP_BASE + 0x78 @ (context swap register) 
        .equ CRYP_CSGCM2R_CSGCM2R_Shift, 0   @ bitWidth 32 (CSGCM2R)  
 
    .equ CRYP_CSGCM3R, CRYP_BASE + 0x7C @ (context swap register) 
        .equ CRYP_CSGCM3R_CSGCM3R_Shift, 0   @ bitWidth 32 (CSGCM3R)  
 
    .equ CRYP_CSGCM4R, CRYP_BASE + 0x80 @ (context swap register) 
        .equ CRYP_CSGCM4R_CSGCM4R_Shift, 0   @ bitWidth 32 (CSGCM4R)  
 
    .equ CRYP_CSGCM5R, CRYP_BASE + 0x84 @ (context swap register) 
        .equ CRYP_CSGCM5R_CSGCM5R_Shift, 0   @ bitWidth 32 (CSGCM5R)  
 
    .equ CRYP_CSGCM6R, CRYP_BASE + 0x88 @ (context swap register) 
        .equ CRYP_CSGCM6R_CSGCM6R_Shift, 0   @ bitWidth 32 (CSGCM6R)  
 
    .equ CRYP_CSGCM7R, CRYP_BASE + 0x8C @ (context swap register) 
        .equ CRYP_CSGCM7R_CSGCM7R_Shift, 0   @ bitWidth 32 (CSGCM7R)  
 

@=========================== DCMI ===========================@
.equ DCMI_BASE, 0x50050000 @ (Digital camera interface) 
    .equ DCMI_CR, DCMI_BASE + 0x0 @ (control register 1) 
        .equ DCMI_CR_ENABLE, 1 << 14   @ bitWidth 1 (DCMI enable)  
        .equ DCMI_CR_EDM_Shift, 10   @ bitWidth 2 (Extended data mode)  
        .equ DCMI_CR_FCRC_Shift, 8   @ bitWidth 2 (Frame capture rate control)  
        .equ DCMI_CR_VSPOL, 1 << 7   @ bitWidth 1 (Vertical synchronization polarity)  
        .equ DCMI_CR_HSPOL, 1 << 6   @ bitWidth 1 (Horizontal synchronization polarity)  
        .equ DCMI_CR_PCKPOL, 1 << 5   @ bitWidth 1 (Pixel clock polarity)  
        .equ DCMI_CR_ESS, 1 << 4   @ bitWidth 1 (Embedded synchronization select)  
        .equ DCMI_CR_JPEG, 1 << 3   @ bitWidth 1 (JPEG format)  
        .equ DCMI_CR_CROP, 1 << 2   @ bitWidth 1 (Crop feature)  
        .equ DCMI_CR_CM, 1 << 1   @ bitWidth 1 (Capture mode)  
        .equ DCMI_CR_CAPTURE, 1 << 0   @ bitWidth 1 (Capture enable)  
 
    .equ DCMI_SR, DCMI_BASE + 0x4 @ (status register) 
        .equ DCMI_SR_FNE, 1 << 2   @ bitWidth 1 (FIFO not empty)  
        .equ DCMI_SR_VSYNC, 1 << 1   @ bitWidth 1 (VSYNC)  
        .equ DCMI_SR_HSYNC, 1 << 0   @ bitWidth 1 (HSYNC)  
 
    .equ DCMI_RIS, DCMI_BASE + 0x8 @ (raw interrupt status register) 
        .equ DCMI_RIS_LINE_RIS, 1 << 4   @ bitWidth 1 (Line raw interrupt status)  
        .equ DCMI_RIS_VSYNC_RIS, 1 << 3   @ bitWidth 1 (VSYNC raw interrupt status)  
        .equ DCMI_RIS_ERR_RIS, 1 << 2   @ bitWidth 1 (Synchronization error raw interrupt status)  
        .equ DCMI_RIS_OVR_RIS, 1 << 1   @ bitWidth 1 (Overrun raw interrupt status)  
        .equ DCMI_RIS_FRAME_RIS, 1 << 0   @ bitWidth 1 (Capture complete raw interrupt status)  
 
    .equ DCMI_IER, DCMI_BASE + 0xC @ (interrupt enable register) 
        .equ DCMI_IER_LINE_IE, 1 << 4   @ bitWidth 1 (Line interrupt enable)  
        .equ DCMI_IER_VSYNC_IE, 1 << 3   @ bitWidth 1 (VSYNC interrupt enable)  
        .equ DCMI_IER_ERR_IE, 1 << 2   @ bitWidth 1 (Synchronization error interrupt enable)  
        .equ DCMI_IER_OVR_IE, 1 << 1   @ bitWidth 1 (Overrun interrupt enable)  
        .equ DCMI_IER_FRAME_IE, 1 << 0   @ bitWidth 1 (Capture complete interrupt enable)  
 
    .equ DCMI_MIS, DCMI_BASE + 0x10 @ (masked interrupt status register) 
        .equ DCMI_MIS_LINE_MIS, 1 << 4   @ bitWidth 1 (Line masked interrupt status)  
        .equ DCMI_MIS_VSYNC_MIS, 1 << 3   @ bitWidth 1 (VSYNC masked interrupt status)  
        .equ DCMI_MIS_ERR_MIS, 1 << 2   @ bitWidth 1 (Synchronization error masked interrupt status)  
        .equ DCMI_MIS_OVR_MIS, 1 << 1   @ bitWidth 1 (Overrun masked interrupt status)  
        .equ DCMI_MIS_FRAME_MIS, 1 << 0   @ bitWidth 1 (Capture complete masked interrupt status)  
 
    .equ DCMI_ICR, DCMI_BASE + 0x14 @ (interrupt clear register) 
        .equ DCMI_ICR_LINE_ISC, 1 << 4   @ bitWidth 1 (line interrupt status clear)  
        .equ DCMI_ICR_VSYNC_ISC, 1 << 3   @ bitWidth 1 (Vertical synch interrupt status clear)  
        .equ DCMI_ICR_ERR_ISC, 1 << 2   @ bitWidth 1 (Synchronization error interrupt status clear)  
        .equ DCMI_ICR_OVR_ISC, 1 << 1   @ bitWidth 1 (Overrun interrupt status clear)  
        .equ DCMI_ICR_FRAME_ISC, 1 << 0   @ bitWidth 1 (Capture complete interrupt status clear)  
 
    .equ DCMI_ESCR, DCMI_BASE + 0x18 @ (embedded synchronization code register) 
        .equ DCMI_ESCR_FEC_Shift, 24   @ bitWidth 8 (Frame end delimiter code)  
        .equ DCMI_ESCR_LEC_Shift, 16   @ bitWidth 8 (Line end delimiter code)  
        .equ DCMI_ESCR_LSC_Shift, 8   @ bitWidth 8 (Line start delimiter code)  
        .equ DCMI_ESCR_FSC_Shift, 0   @ bitWidth 8 (Frame start delimiter code)  
 
    .equ DCMI_ESUR, DCMI_BASE + 0x1C @ (embedded synchronization unmask register) 
        .equ DCMI_ESUR_FEU_Shift, 24   @ bitWidth 8 (Frame end delimiter unmask)  
        .equ DCMI_ESUR_LEU_Shift, 16   @ bitWidth 8 (Line end delimiter unmask)  
        .equ DCMI_ESUR_LSU_Shift, 8   @ bitWidth 8 (Line start delimiter unmask)  
        .equ DCMI_ESUR_FSU_Shift, 0   @ bitWidth 8 (Frame start delimiter unmask)  
 
    .equ DCMI_CWSTRT, DCMI_BASE + 0x20 @ (crop window start) 
        .equ DCMI_CWSTRT_VST_Shift, 16   @ bitWidth 13 (Vertical start line count)  
        .equ DCMI_CWSTRT_HOFFCNT_Shift, 0   @ bitWidth 14 (Horizontal offset count)  
 
    .equ DCMI_CWSIZE, DCMI_BASE + 0x24 @ (crop window size) 
        .equ DCMI_CWSIZE_VLINE_Shift, 16   @ bitWidth 14 (Vertical line count)  
        .equ DCMI_CWSIZE_CAPCNT_Shift, 0   @ bitWidth 14 (Capture count)  
 
    .equ DCMI_DR, DCMI_BASE + 0x28 @ (data register) 
        .equ DCMI_DR_Byte3_Shift, 24   @ bitWidth 8 (Data byte 3)  
        .equ DCMI_DR_Byte2_Shift, 16   @ bitWidth 8 (Data byte 2)  
        .equ DCMI_DR_Byte1_Shift, 8   @ bitWidth 8 (Data byte 1)  
        .equ DCMI_DR_Byte0_Shift, 0   @ bitWidth 8 (Data byte 0)  
 

@=========================== FMC ===========================@
.equ FMC_BASE, 0xA0000000 @ (Flexible memory controller) 
    .equ FMC_BCR1, FMC_BASE + 0x0 @ (SRAM/NOR-Flash chip-select control register 1) 
        .equ FMC_BCR1_CCLKEN, 1 << 20   @ bitWidth 1 (CCLKEN)  
        .equ FMC_BCR1_CBURSTRW, 1 << 19   @ bitWidth 1 (CBURSTRW)  
        .equ FMC_BCR1_ASYNCWAIT, 1 << 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FMC_BCR1_EXTMOD, 1 << 14   @ bitWidth 1 (EXTMOD)  
        .equ FMC_BCR1_WAITEN, 1 << 13   @ bitWidth 1 (WAITEN)  
        .equ FMC_BCR1_WREN, 1 << 12   @ bitWidth 1 (WREN)  
        .equ FMC_BCR1_WAITCFG, 1 << 11   @ bitWidth 1 (WAITCFG)  
        .equ FMC_BCR1_WAITPOL, 1 << 9   @ bitWidth 1 (WAITPOL)  
        .equ FMC_BCR1_BURSTEN, 1 << 8   @ bitWidth 1 (BURSTEN)  
        .equ FMC_BCR1_FACCEN, 1 << 6   @ bitWidth 1 (FACCEN)  
        .equ FMC_BCR1_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FMC_BCR1_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FMC_BCR1_MUXEN, 1 << 1   @ bitWidth 1 (MUXEN)  
        .equ FMC_BCR1_MBKEN, 1 << 0   @ bitWidth 1 (MBKEN)  
 
    .equ FMC_BTR1, FMC_BASE + 0x4 @ (SRAM/NOR-Flash chip-select timing register 1) 
        .equ FMC_BTR1_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FMC_BTR1_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FMC_BTR1_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FMC_BTR1_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FMC_BTR1_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FMC_BTR1_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FMC_BTR1_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FMC_BCR2, FMC_BASE + 0x8 @ (SRAM/NOR-Flash chip-select control register 2) 
        .equ FMC_BCR2_CBURSTRW, 1 << 19   @ bitWidth 1 (CBURSTRW)  
        .equ FMC_BCR2_ASYNCWAIT, 1 << 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FMC_BCR2_EXTMOD, 1 << 14   @ bitWidth 1 (EXTMOD)  
        .equ FMC_BCR2_WAITEN, 1 << 13   @ bitWidth 1 (WAITEN)  
        .equ FMC_BCR2_WREN, 1 << 12   @ bitWidth 1 (WREN)  
        .equ FMC_BCR2_WAITCFG, 1 << 11   @ bitWidth 1 (WAITCFG)  
        .equ FMC_BCR2_WRAPMOD, 1 << 10   @ bitWidth 1 (WRAPMOD)  
        .equ FMC_BCR2_WAITPOL, 1 << 9   @ bitWidth 1 (WAITPOL)  
        .equ FMC_BCR2_BURSTEN, 1 << 8   @ bitWidth 1 (BURSTEN)  
        .equ FMC_BCR2_FACCEN, 1 << 6   @ bitWidth 1 (FACCEN)  
        .equ FMC_BCR2_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FMC_BCR2_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FMC_BCR2_MUXEN, 1 << 1   @ bitWidth 1 (MUXEN)  
        .equ FMC_BCR2_MBKEN, 1 << 0   @ bitWidth 1 (MBKEN)  
 
    .equ FMC_BTR2, FMC_BASE + 0xC @ (SRAM/NOR-Flash chip-select timing register 2) 
        .equ FMC_BTR2_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FMC_BTR2_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FMC_BTR2_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FMC_BTR2_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FMC_BTR2_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FMC_BTR2_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FMC_BTR2_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FMC_BCR3, FMC_BASE + 0x10 @ (SRAM/NOR-Flash chip-select control register 3) 
        .equ FMC_BCR3_CBURSTRW, 1 << 19   @ bitWidth 1 (CBURSTRW)  
        .equ FMC_BCR3_ASYNCWAIT, 1 << 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FMC_BCR3_EXTMOD, 1 << 14   @ bitWidth 1 (EXTMOD)  
        .equ FMC_BCR3_WAITEN, 1 << 13   @ bitWidth 1 (WAITEN)  
        .equ FMC_BCR3_WREN, 1 << 12   @ bitWidth 1 (WREN)  
        .equ FMC_BCR3_WAITCFG, 1 << 11   @ bitWidth 1 (WAITCFG)  
        .equ FMC_BCR3_WRAPMOD, 1 << 10   @ bitWidth 1 (WRAPMOD)  
        .equ FMC_BCR3_WAITPOL, 1 << 9   @ bitWidth 1 (WAITPOL)  
        .equ FMC_BCR3_BURSTEN, 1 << 8   @ bitWidth 1 (BURSTEN)  
        .equ FMC_BCR3_FACCEN, 1 << 6   @ bitWidth 1 (FACCEN)  
        .equ FMC_BCR3_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FMC_BCR3_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FMC_BCR3_MUXEN, 1 << 1   @ bitWidth 1 (MUXEN)  
        .equ FMC_BCR3_MBKEN, 1 << 0   @ bitWidth 1 (MBKEN)  
 
    .equ FMC_BTR3, FMC_BASE + 0x14 @ (SRAM/NOR-Flash chip-select timing register 3) 
        .equ FMC_BTR3_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FMC_BTR3_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FMC_BTR3_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FMC_BTR3_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FMC_BTR3_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FMC_BTR3_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FMC_BTR3_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FMC_BCR4, FMC_BASE + 0x18 @ (SRAM/NOR-Flash chip-select control register 4) 
        .equ FMC_BCR4_CBURSTRW, 1 << 19   @ bitWidth 1 (CBURSTRW)  
        .equ FMC_BCR4_ASYNCWAIT, 1 << 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FMC_BCR4_EXTMOD, 1 << 14   @ bitWidth 1 (EXTMOD)  
        .equ FMC_BCR4_WAITEN, 1 << 13   @ bitWidth 1 (WAITEN)  
        .equ FMC_BCR4_WREN, 1 << 12   @ bitWidth 1 (WREN)  
        .equ FMC_BCR4_WAITCFG, 1 << 11   @ bitWidth 1 (WAITCFG)  
        .equ FMC_BCR4_WRAPMOD, 1 << 10   @ bitWidth 1 (WRAPMOD)  
        .equ FMC_BCR4_WAITPOL, 1 << 9   @ bitWidth 1 (WAITPOL)  
        .equ FMC_BCR4_BURSTEN, 1 << 8   @ bitWidth 1 (BURSTEN)  
        .equ FMC_BCR4_FACCEN, 1 << 6   @ bitWidth 1 (FACCEN)  
        .equ FMC_BCR4_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FMC_BCR4_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FMC_BCR4_MUXEN, 1 << 1   @ bitWidth 1 (MUXEN)  
        .equ FMC_BCR4_MBKEN, 1 << 0   @ bitWidth 1 (MBKEN)  
 
    .equ FMC_BTR4, FMC_BASE + 0x1C @ (SRAM/NOR-Flash chip-select timing register 4) 
        .equ FMC_BTR4_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FMC_BTR4_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FMC_BTR4_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FMC_BTR4_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FMC_BTR4_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FMC_BTR4_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FMC_BTR4_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FMC_PCR, FMC_BASE + 0x80 @ (PC Card/NAND Flash control register) 
        .equ FMC_PCR_ECCPS_Shift, 17   @ bitWidth 3 (ECCPS)  
        .equ FMC_PCR_TAR_Shift, 13   @ bitWidth 4 (TAR)  
        .equ FMC_PCR_TCLR_Shift, 9   @ bitWidth 4 (TCLR)  
        .equ FMC_PCR_ECCEN, 1 << 6   @ bitWidth 1 (ECCEN)  
        .equ FMC_PCR_PWID_Shift, 4   @ bitWidth 2 (PWID)  
        .equ FMC_PCR_PTYP, 1 << 3   @ bitWidth 1 (PTYP)  
        .equ FMC_PCR_PBKEN, 1 << 2   @ bitWidth 1 (PBKEN)  
        .equ FMC_PCR_PWAITEN, 1 << 1   @ bitWidth 1 (PWAITEN)  
 
    .equ FMC_SR, FMC_BASE + 0x84 @ (FIFO status and interrupt register) 
        .equ FMC_SR_FEMPT, 1 << 6   @ bitWidth 1 (FEMPT)  
        .equ FMC_SR_IFEN, 1 << 5   @ bitWidth 1 (IFEN)  
        .equ FMC_SR_ILEN, 1 << 4   @ bitWidth 1 (ILEN)  
        .equ FMC_SR_IREN, 1 << 3   @ bitWidth 1 (IREN)  
        .equ FMC_SR_IFS, 1 << 2   @ bitWidth 1 (IFS)  
        .equ FMC_SR_ILS, 1 << 1   @ bitWidth 1 (ILS)  
        .equ FMC_SR_IRS, 1 << 0   @ bitWidth 1 (IRS)  
 
    .equ FMC_PMEM, FMC_BASE + 0x88 @ (Common memory space timing register) 
        .equ FMC_PMEM_MEMHIZx_Shift, 24   @ bitWidth 8 (MEMHIZx)  
        .equ FMC_PMEM_MEMHOLDx_Shift, 16   @ bitWidth 8 (MEMHOLDx)  
        .equ FMC_PMEM_MEMWAITx_Shift, 8   @ bitWidth 8 (MEMWAITx)  
        .equ FMC_PMEM_MEMSETx_Shift, 0   @ bitWidth 8 (MEMSETx)  
 
    .equ FMC_PATT, FMC_BASE + 0x8C @ (Attribute memory space timing register) 
        .equ FMC_PATT_ATTHIZx_Shift, 24   @ bitWidth 8 (ATTHIZx)  
        .equ FMC_PATT_ATTHOLDx_Shift, 16   @ bitWidth 8 (ATTHOLDx)  
        .equ FMC_PATT_ATTWAITx_Shift, 8   @ bitWidth 8 (ATTWAITx)  
        .equ FMC_PATT_ATTSETx_Shift, 0   @ bitWidth 8 (ATTSETx)  
 
    .equ FMC_ECCR, FMC_BASE + 0x94 @ (ECC result register) 
        .equ FMC_ECCR_ECCx_Shift, 0   @ bitWidth 32 (ECCx)  
 
    .equ FMC_BWTR1, FMC_BASE + 0x104 @ (SRAM/NOR-Flash write timing registers 1) 
        .equ FMC_BWTR1_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FMC_BWTR1_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FMC_BWTR1_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FMC_BWTR1_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FMC_BWTR1_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FMC_BWTR1_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FMC_BWTR2, FMC_BASE + 0x10C @ (SRAM/NOR-Flash write timing registers 2) 
        .equ FMC_BWTR2_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FMC_BWTR2_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FMC_BWTR2_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FMC_BWTR2_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FMC_BWTR2_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FMC_BWTR2_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FMC_BWTR3, FMC_BASE + 0x114 @ (SRAM/NOR-Flash write timing registers 3) 
        .equ FMC_BWTR3_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FMC_BWTR3_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FMC_BWTR3_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FMC_BWTR3_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FMC_BWTR3_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FMC_BWTR3_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FMC_BWTR4, FMC_BASE + 0x11C @ (SRAM/NOR-Flash write timing registers 4) 
        .equ FMC_BWTR4_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FMC_BWTR4_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FMC_BWTR4_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FMC_BWTR4_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FMC_BWTR4_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FMC_BWTR4_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FMC_SDCR1, FMC_BASE + 0x140 @ (SDRAM Control Register 1) 
        .equ FMC_SDCR1_NC_Shift, 0   @ bitWidth 2 (Number of column address bits)  
        .equ FMC_SDCR1_NR_Shift, 2   @ bitWidth 2 (Number of row address bits)  
        .equ FMC_SDCR1_MWID_Shift, 4   @ bitWidth 2 (Memory data bus width)  
        .equ FMC_SDCR1_NB, 1 << 6   @ bitWidth 1 (Number of internal banks)  
        .equ FMC_SDCR1_CAS_Shift, 7   @ bitWidth 2 (CAS latency)  
        .equ FMC_SDCR1_WP, 1 << 9   @ bitWidth 1 (Write protection)  
        .equ FMC_SDCR1_SDCLK_Shift, 10   @ bitWidth 2 (SDRAM clock configuration)  
        .equ FMC_SDCR1_RBURST, 1 << 12   @ bitWidth 1 (Burst read)  
        .equ FMC_SDCR1_RPIPE_Shift, 13   @ bitWidth 2 (Read pipe)  
 
    .equ FMC_SDCR2, FMC_BASE + 0x144 @ (SDRAM Control Register 2) 
        .equ FMC_SDCR2_NC_Shift, 0   @ bitWidth 2 (Number of column address bits)  
        .equ FMC_SDCR2_NR_Shift, 2   @ bitWidth 2 (Number of row address bits)  
        .equ FMC_SDCR2_MWID_Shift, 4   @ bitWidth 2 (Memory data bus width)  
        .equ FMC_SDCR2_NB, 1 << 6   @ bitWidth 1 (Number of internal banks)  
        .equ FMC_SDCR2_CAS_Shift, 7   @ bitWidth 2 (CAS latency)  
        .equ FMC_SDCR2_WP, 1 << 9   @ bitWidth 1 (Write protection)  
        .equ FMC_SDCR2_SDCLK_Shift, 10   @ bitWidth 2 (SDRAM clock configuration)  
        .equ FMC_SDCR2_RBURST, 1 << 12   @ bitWidth 1 (Burst read)  
        .equ FMC_SDCR2_RPIPE_Shift, 13   @ bitWidth 2 (Read pipe)  
 
    .equ FMC_SDTR1, FMC_BASE + 0x148 @ (SDRAM Timing register 1) 
        .equ FMC_SDTR1_TMRD_Shift, 0   @ bitWidth 4 (Load Mode Register to Active)  
        .equ FMC_SDTR1_TXSR_Shift, 4   @ bitWidth 4 (Exit self-refresh delay)  
        .equ FMC_SDTR1_TRAS_Shift, 8   @ bitWidth 4 (Self refresh time)  
        .equ FMC_SDTR1_TRC_Shift, 12   @ bitWidth 4 (Row cycle delay)  
        .equ FMC_SDTR1_TWR_Shift, 16   @ bitWidth 4 (Recovery delay)  
        .equ FMC_SDTR1_TRP_Shift, 20   @ bitWidth 4 (Row precharge delay)  
        .equ FMC_SDTR1_TRCD_Shift, 24   @ bitWidth 4 (Row to column delay)  
 
    .equ FMC_SDTR2, FMC_BASE + 0x14C @ (SDRAM Timing register 2) 
        .equ FMC_SDTR2_TMRD_Shift, 0   @ bitWidth 4 (Load Mode Register to Active)  
        .equ FMC_SDTR2_TXSR_Shift, 4   @ bitWidth 4 (Exit self-refresh delay)  
        .equ FMC_SDTR2_TRAS_Shift, 8   @ bitWidth 4 (Self refresh time)  
        .equ FMC_SDTR2_TRC_Shift, 12   @ bitWidth 4 (Row cycle delay)  
        .equ FMC_SDTR2_TWR_Shift, 16   @ bitWidth 4 (Recovery delay)  
        .equ FMC_SDTR2_TRP_Shift, 20   @ bitWidth 4 (Row precharge delay)  
        .equ FMC_SDTR2_TRCD_Shift, 24   @ bitWidth 4 (Row to column delay)  
 
    .equ FMC_SDCMR, FMC_BASE + 0x150 @ (SDRAM Command Mode register) 
        .equ FMC_SDCMR_MODE_Shift, 0   @ bitWidth 3 (Command mode)  
        .equ FMC_SDCMR_CTB2, 1 << 3   @ bitWidth 1 (Command target bank 2)  
        .equ FMC_SDCMR_CTB1, 1 << 4   @ bitWidth 1 (Command target bank 1)  
        .equ FMC_SDCMR_NRFS_Shift, 5   @ bitWidth 4 (Number of Auto-refresh)  
        .equ FMC_SDCMR_MRD_Shift, 9   @ bitWidth 13 (Mode Register definition)  
 
    .equ FMC_SDRTR, FMC_BASE + 0x154 @ (SDRAM Refresh Timer register) 
        .equ FMC_SDRTR_CRE, 1 << 0   @ bitWidth 1 (Clear Refresh error flag)  
        .equ FMC_SDRTR_COUNT_Shift, 1   @ bitWidth 13 (Refresh Timer Count)  
        .equ FMC_SDRTR_REIE, 1 << 14   @ bitWidth 1 (RES Interrupt Enable)  
 
    .equ FMC_SDSR, FMC_BASE + 0x158 @ (SDRAM Status register) 
        .equ FMC_SDSR_RE, 1 << 0   @ bitWidth 1 (Refresh error flag)  
        .equ FMC_SDSR_MODES1_Shift, 1   @ bitWidth 2 (Status Mode for Bank 1)  
        .equ FMC_SDSR_MODES2_Shift, 3   @ bitWidth 2 (Status Mode for Bank 2)  
        .equ FMC_SDSR_BUSY, 1 << 5   @ bitWidth 1 (Busy status)  
 

@=========================== DBG ===========================@
.equ DBG_BASE, 0xE0042000 @ (Debug support) 
    .equ DBG_DBGMCU_IDCODE, DBG_BASE + 0x0 @ (IDCODE) 
        .equ DBG_DBGMCU_IDCODE_DEV_ID_Shift, 0   @ bitWidth 12 (DEV_ID)  
        .equ DBG_DBGMCU_IDCODE_REV_ID_Shift, 16   @ bitWidth 16 (REV_ID)  
 
    .equ DBG_DBGMCU_CR, DBG_BASE + 0x4 @ (Control Register) 
        .equ DBG_DBGMCU_CR_DBG_SLEEP, 1 << 0   @ bitWidth 1 (DBG_SLEEP)  
        .equ DBG_DBGMCU_CR_DBG_STOP, 1 << 1   @ bitWidth 1 (DBG_STOP)  
        .equ DBG_DBGMCU_CR_DBG_STANDBY, 1 << 2   @ bitWidth 1 (DBG_STANDBY)  
        .equ DBG_DBGMCU_CR_TRACE_IOEN, 1 << 5   @ bitWidth 1 (TRACE_IOEN)  
        .equ DBG_DBGMCU_CR_TRACE_MODE_Shift, 6   @ bitWidth 2 (TRACE_MODE)  
 
    .equ DBG_DBGMCU_APB1_FZ, DBG_BASE + 0x8 @ (Debug MCU APB1 Freeze registe) 
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM2_STOP, 1 << 0   @ bitWidth 1 (DBG_TIM2_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM3_STOP, 1 << 1   @ bitWidth 1 (DBG_TIM3 _STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM4_STOP, 1 << 2   @ bitWidth 1 (DBG_TIM4_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM5_STOP, 1 << 3   @ bitWidth 1 (DBG_TIM5_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM6_STOP, 1 << 4   @ bitWidth 1 (DBG_TIM6_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM7_STOP, 1 << 5   @ bitWidth 1 (DBG_TIM7_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM12_STOP, 1 << 6   @ bitWidth 1 (DBG_TIM12_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM13_STOP, 1 << 7   @ bitWidth 1 (DBG_TIM13_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM14_STOP, 1 << 8   @ bitWidth 1 (DBG_TIM14_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_WWDG_STOP, 1 << 11   @ bitWidth 1 (DBG_WWDG_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_IWDEG_STOP, 1 << 12   @ bitWidth 1 (DBG_IWDEG_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_J2C1_SMBUS_TIMEOUT, 1 << 21   @ bitWidth 1 (DBG_J2C1_SMBUS_TIMEOUT)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_J2C2_SMBUS_TIMEOUT, 1 << 22   @ bitWidth 1 (DBG_J2C2_SMBUS_TIMEOUT)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_J2C3SMBUS_TIMEOUT, 1 << 23   @ bitWidth 1 (DBG_J2C3SMBUS_TIMEOUT)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_CAN1_STOP, 1 << 25   @ bitWidth 1 (DBG_CAN1_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_CAN2_STOP, 1 << 26   @ bitWidth 1 (DBG_CAN2_STOP)  
 
    .equ DBG_DBGMCU_APB2_FZ, DBG_BASE + 0xC @ (Debug MCU APB2 Freeze registe) 
        .equ DBG_DBGMCU_APB2_FZ_DBG_TIM1_STOP, 1 << 0   @ bitWidth 1 (TIM1 counter stopped when core is halted)  
        .equ DBG_DBGMCU_APB2_FZ_DBG_TIM8_STOP, 1 << 1   @ bitWidth 1 (TIM8 counter stopped when core is halted)  
        .equ DBG_DBGMCU_APB2_FZ_DBG_TIM9_STOP, 1 << 16   @ bitWidth 1 (TIM9 counter stopped when core is halted)  
        .equ DBG_DBGMCU_APB2_FZ_DBG_TIM10_STOP, 1 << 17   @ bitWidth 1 (TIM10 counter stopped when core is halted)  
        .equ DBG_DBGMCU_APB2_FZ_DBG_TIM11_STOP, 1 << 18   @ bitWidth 1 (TIM11 counter stopped when core is halted)  
 

@=========================== DMA2 ===========================@
.equ DMA2_BASE, 0x40026400 @ (DMA controller) 
    .equ DMA2_LISR, DMA2_BASE + 0x0 @ (low interrupt status register) 
        .equ DMA2_LISR_TCIF3, 1 << 27   @ bitWidth 1 (Stream x transfer complete interrupt flag x = 3..0)  
        .equ DMA2_LISR_HTIF3, 1 << 26   @ bitWidth 1 (Stream x half transfer interrupt flag x=3..0)  
        .equ DMA2_LISR_TEIF3, 1 << 25   @ bitWidth 1 (Stream x transfer error interrupt flag x=3..0)  
        .equ DMA2_LISR_DMEIF3, 1 << 24   @ bitWidth 1 (Stream x direct mode error interrupt flag x=3..0)  
        .equ DMA2_LISR_FEIF3, 1 << 22   @ bitWidth 1 (Stream x FIFO error interrupt flag x=3..0)  
        .equ DMA2_LISR_TCIF2, 1 << 21   @ bitWidth 1 (Stream x transfer complete interrupt flag x = 3..0)  
        .equ DMA2_LISR_HTIF2, 1 << 20   @ bitWidth 1 (Stream x half transfer interrupt flag x=3..0)  
        .equ DMA2_LISR_TEIF2, 1 << 19   @ bitWidth 1 (Stream x transfer error interrupt flag x=3..0)  
        .equ DMA2_LISR_DMEIF2, 1 << 18   @ bitWidth 1 (Stream x direct mode error interrupt flag x=3..0)  
        .equ DMA2_LISR_FEIF2, 1 << 16   @ bitWidth 1 (Stream x FIFO error interrupt flag x=3..0)  
        .equ DMA2_LISR_TCIF1, 1 << 11   @ bitWidth 1 (Stream x transfer complete interrupt flag x = 3..0)  
        .equ DMA2_LISR_HTIF1, 1 << 10   @ bitWidth 1 (Stream x half transfer interrupt flag x=3..0)  
        .equ DMA2_LISR_TEIF1, 1 << 9   @ bitWidth 1 (Stream x transfer error interrupt flag x=3..0)  
        .equ DMA2_LISR_DMEIF1, 1 << 8   @ bitWidth 1 (Stream x direct mode error interrupt flag x=3..0)  
        .equ DMA2_LISR_FEIF1, 1 << 6   @ bitWidth 1 (Stream x FIFO error interrupt flag x=3..0)  
        .equ DMA2_LISR_TCIF0, 1 << 5   @ bitWidth 1 (Stream x transfer complete interrupt flag x = 3..0)  
        .equ DMA2_LISR_HTIF0, 1 << 4   @ bitWidth 1 (Stream x half transfer interrupt flag x=3..0)  
        .equ DMA2_LISR_TEIF0, 1 << 3   @ bitWidth 1 (Stream x transfer error interrupt flag x=3..0)  
        .equ DMA2_LISR_DMEIF0, 1 << 2   @ bitWidth 1 (Stream x direct mode error interrupt flag x=3..0)  
        .equ DMA2_LISR_FEIF0, 1 << 0   @ bitWidth 1 (Stream x FIFO error interrupt flag x=3..0)  
 
    .equ DMA2_HISR, DMA2_BASE + 0x4 @ (high interrupt status register) 
        .equ DMA2_HISR_TCIF7, 1 << 27   @ bitWidth 1 (Stream x transfer complete interrupt flag x=7..4)  
        .equ DMA2_HISR_HTIF7, 1 << 26   @ bitWidth 1 (Stream x half transfer interrupt flag x=7..4)  
        .equ DMA2_HISR_TEIF7, 1 << 25   @ bitWidth 1 (Stream x transfer error interrupt flag x=7..4)  
        .equ DMA2_HISR_DMEIF7, 1 << 24   @ bitWidth 1 (Stream x direct mode error interrupt flag x=7..4)  
        .equ DMA2_HISR_FEIF7, 1 << 22   @ bitWidth 1 (Stream x FIFO error interrupt flag x=7..4)  
        .equ DMA2_HISR_TCIF6, 1 << 21   @ bitWidth 1 (Stream x transfer complete interrupt flag x=7..4)  
        .equ DMA2_HISR_HTIF6, 1 << 20   @ bitWidth 1 (Stream x half transfer interrupt flag x=7..4)  
        .equ DMA2_HISR_TEIF6, 1 << 19   @ bitWidth 1 (Stream x transfer error interrupt flag x=7..4)  
        .equ DMA2_HISR_DMEIF6, 1 << 18   @ bitWidth 1 (Stream x direct mode error interrupt flag x=7..4)  
        .equ DMA2_HISR_FEIF6, 1 << 16   @ bitWidth 1 (Stream x FIFO error interrupt flag x=7..4)  
        .equ DMA2_HISR_TCIF5, 1 << 11   @ bitWidth 1 (Stream x transfer complete interrupt flag x=7..4)  
        .equ DMA2_HISR_HTIF5, 1 << 10   @ bitWidth 1 (Stream x half transfer interrupt flag x=7..4)  
        .equ DMA2_HISR_TEIF5, 1 << 9   @ bitWidth 1 (Stream x transfer error interrupt flag x=7..4)  
        .equ DMA2_HISR_DMEIF5, 1 << 8   @ bitWidth 1 (Stream x direct mode error interrupt flag x=7..4)  
        .equ DMA2_HISR_FEIF5, 1 << 6   @ bitWidth 1 (Stream x FIFO error interrupt flag x=7..4)  
        .equ DMA2_HISR_TCIF4, 1 << 5   @ bitWidth 1 (Stream x transfer complete interrupt flag x=7..4)  
        .equ DMA2_HISR_HTIF4, 1 << 4   @ bitWidth 1 (Stream x half transfer interrupt flag x=7..4)  
        .equ DMA2_HISR_TEIF4, 1 << 3   @ bitWidth 1 (Stream x transfer error interrupt flag x=7..4)  
        .equ DMA2_HISR_DMEIF4, 1 << 2   @ bitWidth 1 (Stream x direct mode error interrupt flag x=7..4)  
        .equ DMA2_HISR_FEIF4, 1 << 0   @ bitWidth 1 (Stream x FIFO error interrupt flag x=7..4)  
 
    .equ DMA2_LIFCR, DMA2_BASE + 0x8 @ (low interrupt flag clear register) 
        .equ DMA2_LIFCR_CTCIF3, 1 << 27   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CHTIF3, 1 << 26   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CTEIF3, 1 << 25   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CDMEIF3, 1 << 24   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CFEIF3, 1 << 22   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CTCIF2, 1 << 21   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CHTIF2, 1 << 20   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CTEIF2, 1 << 19   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CDMEIF2, 1 << 18   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CFEIF2, 1 << 16   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CTCIF1, 1 << 11   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CHTIF1, 1 << 10   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CTEIF1, 1 << 9   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CDMEIF1, 1 << 8   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CFEIF1, 1 << 6   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CTCIF0, 1 << 5   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CHTIF0, 1 << 4   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CTEIF0, 1 << 3   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CDMEIF0, 1 << 2   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CFEIF0, 1 << 0   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 3..0)  
 
    .equ DMA2_HIFCR, DMA2_BASE + 0xC @ (high interrupt flag clear register) 
        .equ DMA2_HIFCR_CTCIF7, 1 << 27   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CHTIF7, 1 << 26   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CTEIF7, 1 << 25   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CDMEIF7, 1 << 24   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CFEIF7, 1 << 22   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CTCIF6, 1 << 21   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CHTIF6, 1 << 20   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CTEIF6, 1 << 19   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CDMEIF6, 1 << 18   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CFEIF6, 1 << 16   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CTCIF5, 1 << 11   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CHTIF5, 1 << 10   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CTEIF5, 1 << 9   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CDMEIF5, 1 << 8   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CFEIF5, 1 << 6   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CTCIF4, 1 << 5   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CHTIF4, 1 << 4   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CTEIF4, 1 << 3   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CDMEIF4, 1 << 2   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CFEIF4, 1 << 0   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 7..4)  
 
    .equ DMA2_S0CR, DMA2_BASE + 0x10 @ (stream x configuration register) 
        .equ DMA2_S0CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S0CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA2_S0CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA2_S0CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA2_S0CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S0CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S0CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA2_S0CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S0CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S0CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S0CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S0CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S0CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S0CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S0CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA2_S0CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA2_S0CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA2_S0CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA2_S0CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA2_S0NDTR, DMA2_BASE + 0x14 @ (stream x number of data register) 
        .equ DMA2_S0NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA2_S0PAR, DMA2_BASE + 0x18 @ (stream x peripheral address register) 
        .equ DMA2_S0PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S0M0AR, DMA2_BASE + 0x1C @ (stream x memory 0 address register) 
        .equ DMA2_S0M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S0M1AR, DMA2_BASE + 0x20 @ (stream x memory 1 address register) 
        .equ DMA2_S0M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA2_S0FCR, DMA2_BASE + 0x24 @ (stream x FIFO control register) 
        .equ DMA2_S0FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA2_S0FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S0FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S0FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S1CR, DMA2_BASE + 0x28 @ (stream x configuration register) 
        .equ DMA2_S1CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S1CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA2_S1CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA2_S1CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S1CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA2_S1CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S1CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S1CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA2_S1CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S1CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S1CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S1CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S1CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S1CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S1CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S1CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA2_S1CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA2_S1CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA2_S1CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA2_S1CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA2_S1NDTR, DMA2_BASE + 0x2C @ (stream x number of data register) 
        .equ DMA2_S1NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA2_S1PAR, DMA2_BASE + 0x30 @ (stream x peripheral address register) 
        .equ DMA2_S1PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S1M0AR, DMA2_BASE + 0x34 @ (stream x memory 0 address register) 
        .equ DMA2_S1M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S1M1AR, DMA2_BASE + 0x38 @ (stream x memory 1 address register) 
        .equ DMA2_S1M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA2_S1FCR, DMA2_BASE + 0x3C @ (stream x FIFO control register) 
        .equ DMA2_S1FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA2_S1FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S1FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S1FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S2CR, DMA2_BASE + 0x40 @ (stream x configuration register) 
        .equ DMA2_S2CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S2CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA2_S2CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA2_S2CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S2CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA2_S2CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S2CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S2CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA2_S2CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S2CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S2CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S2CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S2CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S2CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S2CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S2CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA2_S2CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA2_S2CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA2_S2CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA2_S2CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA2_S2NDTR, DMA2_BASE + 0x44 @ (stream x number of data register) 
        .equ DMA2_S2NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA2_S2PAR, DMA2_BASE + 0x48 @ (stream x peripheral address register) 
        .equ DMA2_S2PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S2M0AR, DMA2_BASE + 0x4C @ (stream x memory 0 address register) 
        .equ DMA2_S2M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S2M1AR, DMA2_BASE + 0x50 @ (stream x memory 1 address register) 
        .equ DMA2_S2M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA2_S2FCR, DMA2_BASE + 0x54 @ (stream x FIFO control register) 
        .equ DMA2_S2FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA2_S2FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S2FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S2FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S3CR, DMA2_BASE + 0x58 @ (stream x configuration register) 
        .equ DMA2_S3CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S3CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA2_S3CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA2_S3CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S3CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA2_S3CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S3CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S3CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA2_S3CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S3CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S3CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S3CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S3CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S3CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S3CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S3CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA2_S3CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA2_S3CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA2_S3CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA2_S3CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA2_S3NDTR, DMA2_BASE + 0x5C @ (stream x number of data register) 
        .equ DMA2_S3NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA2_S3PAR, DMA2_BASE + 0x60 @ (stream x peripheral address register) 
        .equ DMA2_S3PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S3M0AR, DMA2_BASE + 0x64 @ (stream x memory 0 address register) 
        .equ DMA2_S3M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S3M1AR, DMA2_BASE + 0x68 @ (stream x memory 1 address register) 
        .equ DMA2_S3M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA2_S3FCR, DMA2_BASE + 0x6C @ (stream x FIFO control register) 
        .equ DMA2_S3FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA2_S3FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S3FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S3FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S4CR, DMA2_BASE + 0x70 @ (stream x configuration register) 
        .equ DMA2_S4CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S4CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA2_S4CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA2_S4CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S4CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA2_S4CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S4CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S4CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA2_S4CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S4CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S4CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S4CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S4CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S4CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S4CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S4CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA2_S4CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA2_S4CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA2_S4CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA2_S4CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA2_S4NDTR, DMA2_BASE + 0x74 @ (stream x number of data register) 
        .equ DMA2_S4NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA2_S4PAR, DMA2_BASE + 0x78 @ (stream x peripheral address register) 
        .equ DMA2_S4PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S4M0AR, DMA2_BASE + 0x7C @ (stream x memory 0 address register) 
        .equ DMA2_S4M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S4M1AR, DMA2_BASE + 0x80 @ (stream x memory 1 address register) 
        .equ DMA2_S4M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA2_S4FCR, DMA2_BASE + 0x84 @ (stream x FIFO control register) 
        .equ DMA2_S4FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA2_S4FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S4FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S4FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S5CR, DMA2_BASE + 0x88 @ (stream x configuration register) 
        .equ DMA2_S5CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S5CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA2_S5CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA2_S5CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S5CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA2_S5CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S5CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S5CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA2_S5CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S5CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S5CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S5CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S5CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S5CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S5CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S5CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA2_S5CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA2_S5CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA2_S5CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA2_S5CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA2_S5NDTR, DMA2_BASE + 0x8C @ (stream x number of data register) 
        .equ DMA2_S5NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA2_S5PAR, DMA2_BASE + 0x90 @ (stream x peripheral address register) 
        .equ DMA2_S5PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S5M0AR, DMA2_BASE + 0x94 @ (stream x memory 0 address register) 
        .equ DMA2_S5M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S5M1AR, DMA2_BASE + 0x98 @ (stream x memory 1 address register) 
        .equ DMA2_S5M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA2_S5FCR, DMA2_BASE + 0x9C @ (stream x FIFO control register) 
        .equ DMA2_S5FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA2_S5FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S5FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S5FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S6CR, DMA2_BASE + 0xA0 @ (stream x configuration register) 
        .equ DMA2_S6CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S6CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA2_S6CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA2_S6CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S6CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA2_S6CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S6CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S6CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA2_S6CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S6CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S6CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S6CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S6CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S6CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S6CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S6CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA2_S6CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA2_S6CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA2_S6CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA2_S6CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA2_S6NDTR, DMA2_BASE + 0xA4 @ (stream x number of data register) 
        .equ DMA2_S6NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA2_S6PAR, DMA2_BASE + 0xA8 @ (stream x peripheral address register) 
        .equ DMA2_S6PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S6M0AR, DMA2_BASE + 0xAC @ (stream x memory 0 address register) 
        .equ DMA2_S6M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S6M1AR, DMA2_BASE + 0xB0 @ (stream x memory 1 address register) 
        .equ DMA2_S6M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA2_S6FCR, DMA2_BASE + 0xB4 @ (stream x FIFO control register) 
        .equ DMA2_S6FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA2_S6FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S6FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S6FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S7CR, DMA2_BASE + 0xB8 @ (stream x configuration register) 
        .equ DMA2_S7CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S7CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA2_S7CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA2_S7CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S7CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA2_S7CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S7CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S7CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA2_S7CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S7CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S7CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S7CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S7CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S7CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S7CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S7CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA2_S7CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA2_S7CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA2_S7CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA2_S7CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA2_S7NDTR, DMA2_BASE + 0xBC @ (stream x number of data register) 
        .equ DMA2_S7NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA2_S7PAR, DMA2_BASE + 0xC0 @ (stream x peripheral address register) 
        .equ DMA2_S7PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S7M0AR, DMA2_BASE + 0xC4 @ (stream x memory 0 address register) 
        .equ DMA2_S7M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S7M1AR, DMA2_BASE + 0xC8 @ (stream x memory 1 address register) 
        .equ DMA2_S7M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA2_S7FCR, DMA2_BASE + 0xCC @ (stream x FIFO control register) 
        .equ DMA2_S7FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA2_S7FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S7FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S7FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 

@=========================== DMA1 ===========================@
.equ DMA1_BASE, 0x40026000 @ (DMA controller) 
    .equ DMA1_LISR, DMA1_BASE + 0x0 @ (low interrupt status register) 
        .equ DMA1_LISR_TCIF3, 1 << 27   @ bitWidth 1 (Stream x transfer complete interrupt flag x = 3..0)  
        .equ DMA1_LISR_HTIF3, 1 << 26   @ bitWidth 1 (Stream x half transfer interrupt flag x=3..0)  
        .equ DMA1_LISR_TEIF3, 1 << 25   @ bitWidth 1 (Stream x transfer error interrupt flag x=3..0)  
        .equ DMA1_LISR_DMEIF3, 1 << 24   @ bitWidth 1 (Stream x direct mode error interrupt flag x=3..0)  
        .equ DMA1_LISR_FEIF3, 1 << 22   @ bitWidth 1 (Stream x FIFO error interrupt flag x=3..0)  
        .equ DMA1_LISR_TCIF2, 1 << 21   @ bitWidth 1 (Stream x transfer complete interrupt flag x = 3..0)  
        .equ DMA1_LISR_HTIF2, 1 << 20   @ bitWidth 1 (Stream x half transfer interrupt flag x=3..0)  
        .equ DMA1_LISR_TEIF2, 1 << 19   @ bitWidth 1 (Stream x transfer error interrupt flag x=3..0)  
        .equ DMA1_LISR_DMEIF2, 1 << 18   @ bitWidth 1 (Stream x direct mode error interrupt flag x=3..0)  
        .equ DMA1_LISR_FEIF2, 1 << 16   @ bitWidth 1 (Stream x FIFO error interrupt flag x=3..0)  
        .equ DMA1_LISR_TCIF1, 1 << 11   @ bitWidth 1 (Stream x transfer complete interrupt flag x = 3..0)  
        .equ DMA1_LISR_HTIF1, 1 << 10   @ bitWidth 1 (Stream x half transfer interrupt flag x=3..0)  
        .equ DMA1_LISR_TEIF1, 1 << 9   @ bitWidth 1 (Stream x transfer error interrupt flag x=3..0)  
        .equ DMA1_LISR_DMEIF1, 1 << 8   @ bitWidth 1 (Stream x direct mode error interrupt flag x=3..0)  
        .equ DMA1_LISR_FEIF1, 1 << 6   @ bitWidth 1 (Stream x FIFO error interrupt flag x=3..0)  
        .equ DMA1_LISR_TCIF0, 1 << 5   @ bitWidth 1 (Stream x transfer complete interrupt flag x = 3..0)  
        .equ DMA1_LISR_HTIF0, 1 << 4   @ bitWidth 1 (Stream x half transfer interrupt flag x=3..0)  
        .equ DMA1_LISR_TEIF0, 1 << 3   @ bitWidth 1 (Stream x transfer error interrupt flag x=3..0)  
        .equ DMA1_LISR_DMEIF0, 1 << 2   @ bitWidth 1 (Stream x direct mode error interrupt flag x=3..0)  
        .equ DMA1_LISR_FEIF0, 1 << 0   @ bitWidth 1 (Stream x FIFO error interrupt flag x=3..0)  
 
    .equ DMA1_HISR, DMA1_BASE + 0x4 @ (high interrupt status register) 
        .equ DMA1_HISR_TCIF7, 1 << 27   @ bitWidth 1 (Stream x transfer complete interrupt flag x=7..4)  
        .equ DMA1_HISR_HTIF7, 1 << 26   @ bitWidth 1 (Stream x half transfer interrupt flag x=7..4)  
        .equ DMA1_HISR_TEIF7, 1 << 25   @ bitWidth 1 (Stream x transfer error interrupt flag x=7..4)  
        .equ DMA1_HISR_DMEIF7, 1 << 24   @ bitWidth 1 (Stream x direct mode error interrupt flag x=7..4)  
        .equ DMA1_HISR_FEIF7, 1 << 22   @ bitWidth 1 (Stream x FIFO error interrupt flag x=7..4)  
        .equ DMA1_HISR_TCIF6, 1 << 21   @ bitWidth 1 (Stream x transfer complete interrupt flag x=7..4)  
        .equ DMA1_HISR_HTIF6, 1 << 20   @ bitWidth 1 (Stream x half transfer interrupt flag x=7..4)  
        .equ DMA1_HISR_TEIF6, 1 << 19   @ bitWidth 1 (Stream x transfer error interrupt flag x=7..4)  
        .equ DMA1_HISR_DMEIF6, 1 << 18   @ bitWidth 1 (Stream x direct mode error interrupt flag x=7..4)  
        .equ DMA1_HISR_FEIF6, 1 << 16   @ bitWidth 1 (Stream x FIFO error interrupt flag x=7..4)  
        .equ DMA1_HISR_TCIF5, 1 << 11   @ bitWidth 1 (Stream x transfer complete interrupt flag x=7..4)  
        .equ DMA1_HISR_HTIF5, 1 << 10   @ bitWidth 1 (Stream x half transfer interrupt flag x=7..4)  
        .equ DMA1_HISR_TEIF5, 1 << 9   @ bitWidth 1 (Stream x transfer error interrupt flag x=7..4)  
        .equ DMA1_HISR_DMEIF5, 1 << 8   @ bitWidth 1 (Stream x direct mode error interrupt flag x=7..4)  
        .equ DMA1_HISR_FEIF5, 1 << 6   @ bitWidth 1 (Stream x FIFO error interrupt flag x=7..4)  
        .equ DMA1_HISR_TCIF4, 1 << 5   @ bitWidth 1 (Stream x transfer complete interrupt flag x=7..4)  
        .equ DMA1_HISR_HTIF4, 1 << 4   @ bitWidth 1 (Stream x half transfer interrupt flag x=7..4)  
        .equ DMA1_HISR_TEIF4, 1 << 3   @ bitWidth 1 (Stream x transfer error interrupt flag x=7..4)  
        .equ DMA1_HISR_DMEIF4, 1 << 2   @ bitWidth 1 (Stream x direct mode error interrupt flag x=7..4)  
        .equ DMA1_HISR_FEIF4, 1 << 0   @ bitWidth 1 (Stream x FIFO error interrupt flag x=7..4)  
 
    .equ DMA1_LIFCR, DMA1_BASE + 0x8 @ (low interrupt flag clear register) 
        .equ DMA1_LIFCR_CTCIF3, 1 << 27   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CHTIF3, 1 << 26   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CTEIF3, 1 << 25   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CDMEIF3, 1 << 24   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CFEIF3, 1 << 22   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CTCIF2, 1 << 21   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CHTIF2, 1 << 20   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CTEIF2, 1 << 19   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CDMEIF2, 1 << 18   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CFEIF2, 1 << 16   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CTCIF1, 1 << 11   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CHTIF1, 1 << 10   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CTEIF1, 1 << 9   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CDMEIF1, 1 << 8   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CFEIF1, 1 << 6   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CTCIF0, 1 << 5   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CHTIF0, 1 << 4   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CTEIF0, 1 << 3   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CDMEIF0, 1 << 2   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CFEIF0, 1 << 0   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 3..0)  
 
    .equ DMA1_HIFCR, DMA1_BASE + 0xC @ (high interrupt flag clear register) 
        .equ DMA1_HIFCR_CTCIF7, 1 << 27   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CHTIF7, 1 << 26   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CTEIF7, 1 << 25   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CDMEIF7, 1 << 24   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CFEIF7, 1 << 22   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CTCIF6, 1 << 21   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CHTIF6, 1 << 20   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CTEIF6, 1 << 19   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CDMEIF6, 1 << 18   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CFEIF6, 1 << 16   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CTCIF5, 1 << 11   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CHTIF5, 1 << 10   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CTEIF5, 1 << 9   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CDMEIF5, 1 << 8   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CFEIF5, 1 << 6   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CTCIF4, 1 << 5   @ bitWidth 1 (Stream x clear transfer complete interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CHTIF4, 1 << 4   @ bitWidth 1 (Stream x clear half transfer interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CTEIF4, 1 << 3   @ bitWidth 1 (Stream x clear transfer error interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CDMEIF4, 1 << 2   @ bitWidth 1 (Stream x clear direct mode error interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CFEIF4, 1 << 0   @ bitWidth 1 (Stream x clear FIFO error interrupt flag x = 7..4)  
 
    .equ DMA1_S0CR, DMA1_BASE + 0x10 @ (stream x configuration register) 
        .equ DMA1_S0CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S0CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA1_S0CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA1_S0CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA1_S0CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S0CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S0CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA1_S0CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S0CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S0CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S0CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S0CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S0CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S0CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S0CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA1_S0CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA1_S0CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA1_S0CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA1_S0CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA1_S0NDTR, DMA1_BASE + 0x14 @ (stream x number of data register) 
        .equ DMA1_S0NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA1_S0PAR, DMA1_BASE + 0x18 @ (stream x peripheral address register) 
        .equ DMA1_S0PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S0M0AR, DMA1_BASE + 0x1C @ (stream x memory 0 address register) 
        .equ DMA1_S0M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S0M1AR, DMA1_BASE + 0x20 @ (stream x memory 1 address register) 
        .equ DMA1_S0M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA1_S0FCR, DMA1_BASE + 0x24 @ (stream x FIFO control register) 
        .equ DMA1_S0FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA1_S0FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S0FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S0FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S1CR, DMA1_BASE + 0x28 @ (stream x configuration register) 
        .equ DMA1_S1CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S1CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA1_S1CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA1_S1CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S1CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA1_S1CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S1CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S1CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA1_S1CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S1CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S1CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S1CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S1CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S1CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S1CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S1CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA1_S1CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA1_S1CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA1_S1CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA1_S1CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA1_S1NDTR, DMA1_BASE + 0x2C @ (stream x number of data register) 
        .equ DMA1_S1NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA1_S1PAR, DMA1_BASE + 0x30 @ (stream x peripheral address register) 
        .equ DMA1_S1PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S1M0AR, DMA1_BASE + 0x34 @ (stream x memory 0 address register) 
        .equ DMA1_S1M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S1M1AR, DMA1_BASE + 0x38 @ (stream x memory 1 address register) 
        .equ DMA1_S1M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA1_S1FCR, DMA1_BASE + 0x3C @ (stream x FIFO control register) 
        .equ DMA1_S1FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA1_S1FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S1FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S1FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S2CR, DMA1_BASE + 0x40 @ (stream x configuration register) 
        .equ DMA1_S2CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S2CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA1_S2CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA1_S2CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S2CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA1_S2CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S2CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S2CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA1_S2CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S2CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S2CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S2CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S2CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S2CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S2CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S2CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA1_S2CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA1_S2CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA1_S2CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA1_S2CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA1_S2NDTR, DMA1_BASE + 0x44 @ (stream x number of data register) 
        .equ DMA1_S2NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA1_S2PAR, DMA1_BASE + 0x48 @ (stream x peripheral address register) 
        .equ DMA1_S2PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S2M0AR, DMA1_BASE + 0x4C @ (stream x memory 0 address register) 
        .equ DMA1_S2M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S2M1AR, DMA1_BASE + 0x50 @ (stream x memory 1 address register) 
        .equ DMA1_S2M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA1_S2FCR, DMA1_BASE + 0x54 @ (stream x FIFO control register) 
        .equ DMA1_S2FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA1_S2FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S2FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S2FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S3CR, DMA1_BASE + 0x58 @ (stream x configuration register) 
        .equ DMA1_S3CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S3CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA1_S3CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA1_S3CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S3CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA1_S3CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S3CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S3CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA1_S3CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S3CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S3CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S3CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S3CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S3CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S3CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S3CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA1_S3CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA1_S3CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA1_S3CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA1_S3CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA1_S3NDTR, DMA1_BASE + 0x5C @ (stream x number of data register) 
        .equ DMA1_S3NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA1_S3PAR, DMA1_BASE + 0x60 @ (stream x peripheral address register) 
        .equ DMA1_S3PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S3M0AR, DMA1_BASE + 0x64 @ (stream x memory 0 address register) 
        .equ DMA1_S3M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S3M1AR, DMA1_BASE + 0x68 @ (stream x memory 1 address register) 
        .equ DMA1_S3M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA1_S3FCR, DMA1_BASE + 0x6C @ (stream x FIFO control register) 
        .equ DMA1_S3FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA1_S3FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S3FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S3FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S4CR, DMA1_BASE + 0x70 @ (stream x configuration register) 
        .equ DMA1_S4CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S4CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA1_S4CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA1_S4CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S4CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA1_S4CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S4CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S4CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA1_S4CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S4CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S4CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S4CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S4CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S4CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S4CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S4CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA1_S4CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA1_S4CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA1_S4CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA1_S4CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA1_S4NDTR, DMA1_BASE + 0x74 @ (stream x number of data register) 
        .equ DMA1_S4NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA1_S4PAR, DMA1_BASE + 0x78 @ (stream x peripheral address register) 
        .equ DMA1_S4PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S4M0AR, DMA1_BASE + 0x7C @ (stream x memory 0 address register) 
        .equ DMA1_S4M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S4M1AR, DMA1_BASE + 0x80 @ (stream x memory 1 address register) 
        .equ DMA1_S4M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA1_S4FCR, DMA1_BASE + 0x84 @ (stream x FIFO control register) 
        .equ DMA1_S4FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA1_S4FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S4FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S4FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S5CR, DMA1_BASE + 0x88 @ (stream x configuration register) 
        .equ DMA1_S5CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S5CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA1_S5CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA1_S5CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S5CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA1_S5CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S5CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S5CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA1_S5CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S5CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S5CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S5CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S5CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S5CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S5CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S5CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA1_S5CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA1_S5CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA1_S5CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA1_S5CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA1_S5NDTR, DMA1_BASE + 0x8C @ (stream x number of data register) 
        .equ DMA1_S5NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA1_S5PAR, DMA1_BASE + 0x90 @ (stream x peripheral address register) 
        .equ DMA1_S5PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S5M0AR, DMA1_BASE + 0x94 @ (stream x memory 0 address register) 
        .equ DMA1_S5M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S5M1AR, DMA1_BASE + 0x98 @ (stream x memory 1 address register) 
        .equ DMA1_S5M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA1_S5FCR, DMA1_BASE + 0x9C @ (stream x FIFO control register) 
        .equ DMA1_S5FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA1_S5FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S5FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S5FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S6CR, DMA1_BASE + 0xA0 @ (stream x configuration register) 
        .equ DMA1_S6CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S6CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA1_S6CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA1_S6CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S6CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA1_S6CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S6CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S6CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA1_S6CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S6CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S6CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S6CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S6CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S6CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S6CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S6CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA1_S6CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA1_S6CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA1_S6CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA1_S6CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA1_S6NDTR, DMA1_BASE + 0xA4 @ (stream x number of data register) 
        .equ DMA1_S6NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA1_S6PAR, DMA1_BASE + 0xA8 @ (stream x peripheral address register) 
        .equ DMA1_S6PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S6M0AR, DMA1_BASE + 0xAC @ (stream x memory 0 address register) 
        .equ DMA1_S6M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S6M1AR, DMA1_BASE + 0xB0 @ (stream x memory 1 address register) 
        .equ DMA1_S6M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA1_S6FCR, DMA1_BASE + 0xB4 @ (stream x FIFO control register) 
        .equ DMA1_S6FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA1_S6FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S6FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S6FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S7CR, DMA1_BASE + 0xB8 @ (stream x configuration register) 
        .equ DMA1_S7CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S7CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer configuration)  
        .equ DMA1_S7CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer configuration)  
        .equ DMA1_S7CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S7CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer mode)  
        .equ DMA1_S7CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S7CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S7CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset size)  
        .equ DMA1_S7CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S7CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S7CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S7CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S7CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S7CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S7CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S7CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA1_S7CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt enable)  
        .equ DMA1_S7CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA1_S7CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt enable)  
        .equ DMA1_S7CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when read low)  
 
    .equ DMA1_S7NDTR, DMA1_BASE + 0xBC @ (stream x number of data register) 
        .equ DMA1_S7NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to transfer)  
 
    .equ DMA1_S7PAR, DMA1_BASE + 0xC0 @ (stream x peripheral address register) 
        .equ DMA1_S7PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S7M0AR, DMA1_BASE + 0xC4 @ (stream x memory 0 address register) 
        .equ DMA1_S7M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S7M1AR, DMA1_BASE + 0xC8 @ (stream x memory 1 address register) 
        .equ DMA1_S7M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double buffer mode)  
 
    .equ DMA1_S7FCR, DMA1_BASE + 0xCC @ (stream x FIFO control register) 
        .equ DMA1_S7FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt enable)  
        .equ DMA1_S7FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S7FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S7FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 

@=========================== RCC ===========================@
.equ RCC_BASE, 0x40023800 @ (Reset and clock control) 
    .equ RCC_CR, RCC_BASE + 0x0 @ (clock control register) 
        .equ RCC_CR_PLLI2SRDY, 1 << 27   @ bitWidth 1 (PLLI2S clock ready flag)  
        .equ RCC_CR_PLLI2SON, 1 << 26   @ bitWidth 1 (PLLI2S enable)  
        .equ RCC_CR_PLLRDY, 1 << 25   @ bitWidth 1 (Main PLL PLL clock ready flag)  
        .equ RCC_CR_PLLON, 1 << 24   @ bitWidth 1 (Main PLL PLL enable)  
        .equ RCC_CR_CSSON, 1 << 19   @ bitWidth 1 (Clock security system enable)  
        .equ RCC_CR_HSEBYP, 1 << 18   @ bitWidth 1 (HSE clock bypass)  
        .equ RCC_CR_HSERDY, 1 << 17   @ bitWidth 1 (HSE clock ready flag)  
        .equ RCC_CR_HSEON, 1 << 16   @ bitWidth 1 (HSE clock enable)  
        .equ RCC_CR_HSICAL_Shift, 8   @ bitWidth 8 (Internal high-speed clock calibration)  
        .equ RCC_CR_HSITRIM_Shift, 3   @ bitWidth 5 (Internal high-speed clock trimming)  
        .equ RCC_CR_HSIRDY, 1 << 1   @ bitWidth 1 (Internal high-speed clock ready flag)  
        .equ RCC_CR_HSION, 1 << 0   @ bitWidth 1 (Internal high-speed clock enable)  
 
    .equ RCC_PLLCFGR, RCC_BASE + 0x4 @ (PLL configuration register) 
        .equ RCC_PLLCFGR_PLLQ3, 1 << 27   @ bitWidth 1 (Main PLL PLL division factor for USB OTG FS, SDIO and random number generator clocks)  
        .equ RCC_PLLCFGR_PLLQ2, 1 << 26   @ bitWidth 1 (Main PLL PLL division factor for USB OTG FS, SDIO and random number generator clocks)  
        .equ RCC_PLLCFGR_PLLQ1, 1 << 25   @ bitWidth 1 (Main PLL PLL division factor for USB OTG FS, SDIO and random number generator clocks)  
        .equ RCC_PLLCFGR_PLLQ0, 1 << 24   @ bitWidth 1 (Main PLL PLL division factor for USB OTG FS, SDIO and random number generator clocks)  
        .equ RCC_PLLCFGR_PLLSRC, 1 << 22   @ bitWidth 1 (Main PLLPLL and audio PLL PLLI2S entry clock source)  
        .equ RCC_PLLCFGR_PLLP1, 1 << 17   @ bitWidth 1 (Main PLL PLL division factor for main system clock)  
        .equ RCC_PLLCFGR_PLLP0, 1 << 16   @ bitWidth 1 (Main PLL PLL division factor for main system clock)  
        .equ RCC_PLLCFGR_PLLN8, 1 << 14   @ bitWidth 1 (Main PLL PLL multiplication factor for VCO)  
        .equ RCC_PLLCFGR_PLLN7, 1 << 13   @ bitWidth 1 (Main PLL PLL multiplication factor for VCO)  
        .equ RCC_PLLCFGR_PLLN6, 1 << 12   @ bitWidth 1 (Main PLL PLL multiplication factor for VCO)  
        .equ RCC_PLLCFGR_PLLN5, 1 << 11   @ bitWidth 1 (Main PLL PLL multiplication factor for VCO)  
        .equ RCC_PLLCFGR_PLLN4, 1 << 10   @ bitWidth 1 (Main PLL PLL multiplication factor for VCO)  
        .equ RCC_PLLCFGR_PLLN3, 1 << 9   @ bitWidth 1 (Main PLL PLL multiplication factor for VCO)  
        .equ RCC_PLLCFGR_PLLN2, 1 << 8   @ bitWidth 1 (Main PLL PLL multiplication factor for VCO)  
        .equ RCC_PLLCFGR_PLLN1, 1 << 7   @ bitWidth 1 (Main PLL PLL multiplication factor for VCO)  
        .equ RCC_PLLCFGR_PLLN0, 1 << 6   @ bitWidth 1 (Main PLL PLL multiplication factor for VCO)  
        .equ RCC_PLLCFGR_PLLM5, 1 << 5   @ bitWidth 1 (Division factor for the main PLL PLL and audio PLL PLLI2S input clock)  
        .equ RCC_PLLCFGR_PLLM4, 1 << 4   @ bitWidth 1 (Division factor for the main PLL PLL and audio PLL PLLI2S input clock)  
        .equ RCC_PLLCFGR_PLLM3, 1 << 3   @ bitWidth 1 (Division factor for the main PLL PLL and audio PLL PLLI2S input clock)  
        .equ RCC_PLLCFGR_PLLM2, 1 << 2   @ bitWidth 1 (Division factor for the main PLL PLL and audio PLL PLLI2S input clock)  
        .equ RCC_PLLCFGR_PLLM1, 1 << 1   @ bitWidth 1 (Division factor for the main PLL PLL and audio PLL PLLI2S input clock)  
        .equ RCC_PLLCFGR_PLLM0, 1 << 0   @ bitWidth 1 (Division factor for the main PLL PLL and audio PLL PLLI2S input clock)  
 
    .equ RCC_CFGR, RCC_BASE + 0x8 @ (clock configuration register) 
        .equ RCC_CFGR_MCO2_Shift, 30   @ bitWidth 2 (Microcontroller clock output 2)  
        .equ RCC_CFGR_MCO2PRE_Shift, 27   @ bitWidth 3 (MCO2 prescaler)  
        .equ RCC_CFGR_MCO1PRE_Shift, 24   @ bitWidth 3 (MCO1 prescaler)  
        .equ RCC_CFGR_I2SSRC, 1 << 23   @ bitWidth 1 (I2S clock selection)  
        .equ RCC_CFGR_MCO1_Shift, 21   @ bitWidth 2 (Microcontroller clock output 1)  
        .equ RCC_CFGR_RTCPRE_Shift, 16   @ bitWidth 5 (HSE division factor for RTC clock)  
        .equ RCC_CFGR_PPRE2_Shift, 13   @ bitWidth 3 (APB high-speed prescaler APB2)  
        .equ RCC_CFGR_PPRE1_Shift, 10   @ bitWidth 3 (APB Low speed prescaler APB1)  
        .equ RCC_CFGR_HPRE_Shift, 4   @ bitWidth 4 (AHB prescaler)  
        .equ RCC_CFGR_SWS1, 1 << 3   @ bitWidth 1 (System clock switch status)  
        .equ RCC_CFGR_SWS0, 1 << 2   @ bitWidth 1 (System clock switch status)  
        .equ RCC_CFGR_SW1, 1 << 1   @ bitWidth 1 (System clock switch)  
        .equ RCC_CFGR_SW0, 1 << 0   @ bitWidth 1 (System clock switch)  
 
    .equ RCC_CIR, RCC_BASE + 0xC @ (clock interrupt register) 
        .equ RCC_CIR_CSSC, 1 << 23   @ bitWidth 1 (Clock security system interrupt clear)  
        .equ RCC_CIR_PLLSAIRDYC, 1 << 22   @ bitWidth 1 (PLLSAI Ready Interrupt Clear)  
        .equ RCC_CIR_PLLI2SRDYC, 1 << 21   @ bitWidth 1 (PLLI2S ready interrupt clear)  
        .equ RCC_CIR_PLLRDYC, 1 << 20   @ bitWidth 1 (Main PLLPLL ready interrupt clear)  
        .equ RCC_CIR_HSERDYC, 1 << 19   @ bitWidth 1 (HSE ready interrupt clear)  
        .equ RCC_CIR_HSIRDYC, 1 << 18   @ bitWidth 1 (HSI ready interrupt clear)  
        .equ RCC_CIR_LSERDYC, 1 << 17   @ bitWidth 1 (LSE ready interrupt clear)  
        .equ RCC_CIR_LSIRDYC, 1 << 16   @ bitWidth 1 (LSI ready interrupt clear)  
        .equ RCC_CIR_PLLSAIRDYIE, 1 << 14   @ bitWidth 1 (PLLSAI Ready Interrupt Enable)  
        .equ RCC_CIR_PLLI2SRDYIE, 1 << 13   @ bitWidth 1 (PLLI2S ready interrupt enable)  
        .equ RCC_CIR_PLLRDYIE, 1 << 12   @ bitWidth 1 (Main PLL PLL ready interrupt enable)  
        .equ RCC_CIR_HSERDYIE, 1 << 11   @ bitWidth 1 (HSE ready interrupt enable)  
        .equ RCC_CIR_HSIRDYIE, 1 << 10   @ bitWidth 1 (HSI ready interrupt enable)  
        .equ RCC_CIR_LSERDYIE, 1 << 9   @ bitWidth 1 (LSE ready interrupt enable)  
        .equ RCC_CIR_LSIRDYIE, 1 << 8   @ bitWidth 1 (LSI ready interrupt enable)  
        .equ RCC_CIR_CSSF, 1 << 7   @ bitWidth 1 (Clock security system interrupt flag)  
        .equ RCC_CIR_PLLSAIRDYF, 1 << 6   @ bitWidth 1 (PLLSAI ready interrupt flag)  
        .equ RCC_CIR_PLLI2SRDYF, 1 << 5   @ bitWidth 1 (PLLI2S ready interrupt flag)  
        .equ RCC_CIR_PLLRDYF, 1 << 4   @ bitWidth 1 (Main PLL PLL ready interrupt flag)  
        .equ RCC_CIR_HSERDYF, 1 << 3   @ bitWidth 1 (HSE ready interrupt flag)  
        .equ RCC_CIR_HSIRDYF, 1 << 2   @ bitWidth 1 (HSI ready interrupt flag)  
        .equ RCC_CIR_LSERDYF, 1 << 1   @ bitWidth 1 (LSE ready interrupt flag)  
        .equ RCC_CIR_LSIRDYF, 1 << 0   @ bitWidth 1 (LSI ready interrupt flag)  
 
    .equ RCC_AHB1RSTR, RCC_BASE + 0x10 @ (AHB1 peripheral reset register) 
        .equ RCC_AHB1RSTR_OTGHSRST, 1 << 29   @ bitWidth 1 (USB OTG HS module reset)  
        .equ RCC_AHB1RSTR_ETHMACRST, 1 << 25   @ bitWidth 1 (Ethernet MAC reset)  
        .equ RCC_AHB1RSTR_DMA2DRST, 1 << 23   @ bitWidth 1 (DMA2D reset)  
        .equ RCC_AHB1RSTR_DMA2RST, 1 << 22   @ bitWidth 1 (DMA2 reset)  
        .equ RCC_AHB1RSTR_DMA1RST, 1 << 21   @ bitWidth 1 (DMA2 reset)  
        .equ RCC_AHB1RSTR_CRCRST, 1 << 12   @ bitWidth 1 (CRC reset)  
        .equ RCC_AHB1RSTR_GPIOKRST, 1 << 10   @ bitWidth 1 (IO port K reset)  
        .equ RCC_AHB1RSTR_GPIOJRST, 1 << 9   @ bitWidth 1 (IO port J reset)  
        .equ RCC_AHB1RSTR_GPIOIRST, 1 << 8   @ bitWidth 1 (IO port I reset)  
        .equ RCC_AHB1RSTR_GPIOHRST, 1 << 7   @ bitWidth 1 (IO port H reset)  
        .equ RCC_AHB1RSTR_GPIOGRST, 1 << 6   @ bitWidth 1 (IO port G reset)  
        .equ RCC_AHB1RSTR_GPIOFRST, 1 << 5   @ bitWidth 1 (IO port F reset)  
        .equ RCC_AHB1RSTR_GPIOERST, 1 << 4   @ bitWidth 1 (IO port E reset)  
        .equ RCC_AHB1RSTR_GPIODRST, 1 << 3   @ bitWidth 1 (IO port D reset)  
        .equ RCC_AHB1RSTR_GPIOCRST, 1 << 2   @ bitWidth 1 (IO port C reset)  
        .equ RCC_AHB1RSTR_GPIOBRST, 1 << 1   @ bitWidth 1 (IO port B reset)  
        .equ RCC_AHB1RSTR_GPIOARST, 1 << 0   @ bitWidth 1 (IO port A reset)  
 
    .equ RCC_AHB2RSTR, RCC_BASE + 0x14 @ (AHB2 peripheral reset register) 
        .equ RCC_AHB2RSTR_OTGFSRST, 1 << 7   @ bitWidth 1 (USB OTG FS module reset)  
        .equ RCC_AHB2RSTR_RNGRST, 1 << 6   @ bitWidth 1 (Random number generator module reset)  
        .equ RCC_AHB2RSTR_HSAHRST, 1 << 5   @ bitWidth 1 (Hash module reset)  
        .equ RCC_AHB2RSTR_CRYPRST, 1 << 4   @ bitWidth 1 (Cryptographic module reset)  
        .equ RCC_AHB2RSTR_DCMIRST, 1 << 0   @ bitWidth 1 (Camera interface reset)  
 
    .equ RCC_AHB3RSTR, RCC_BASE + 0x18 @ (AHB3 peripheral reset register) 
        .equ RCC_AHB3RSTR_FMCRST, 1 << 0   @ bitWidth 1 (Flexible memory controller module reset)  
        .equ RCC_AHB3RSTR_QSPIRST, 1 << 1   @ bitWidth 1 (Quad SPI memory controller reset)  
 
    .equ RCC_APB1RSTR, RCC_BASE + 0x20 @ (APB1 peripheral reset register) 
        .equ RCC_APB1RSTR_TIM2RST, 1 << 0   @ bitWidth 1 (TIM2 reset)  
        .equ RCC_APB1RSTR_TIM3RST, 1 << 1   @ bitWidth 1 (TIM3 reset)  
        .equ RCC_APB1RSTR_TIM4RST, 1 << 2   @ bitWidth 1 (TIM4 reset)  
        .equ RCC_APB1RSTR_TIM5RST, 1 << 3   @ bitWidth 1 (TIM5 reset)  
        .equ RCC_APB1RSTR_TIM6RST, 1 << 4   @ bitWidth 1 (TIM6 reset)  
        .equ RCC_APB1RSTR_TIM7RST, 1 << 5   @ bitWidth 1 (TIM7 reset)  
        .equ RCC_APB1RSTR_TIM12RST, 1 << 6   @ bitWidth 1 (TIM12 reset)  
        .equ RCC_APB1RSTR_TIM13RST, 1 << 7   @ bitWidth 1 (TIM13 reset)  
        .equ RCC_APB1RSTR_TIM14RST, 1 << 8   @ bitWidth 1 (TIM14 reset)  
        .equ RCC_APB1RSTR_WWDGRST, 1 << 11   @ bitWidth 1 (Window watchdog reset)  
        .equ RCC_APB1RSTR_SPI2RST, 1 << 14   @ bitWidth 1 (SPI 2 reset)  
        .equ RCC_APB1RSTR_SPI3RST, 1 << 15   @ bitWidth 1 (SPI 3 reset)  
        .equ RCC_APB1RSTR_UART2RST, 1 << 17   @ bitWidth 1 (USART 2 reset)  
        .equ RCC_APB1RSTR_UART3RST, 1 << 18   @ bitWidth 1 (USART 3 reset)  
        .equ RCC_APB1RSTR_UART4RST, 1 << 19   @ bitWidth 1 (USART 4 reset)  
        .equ RCC_APB1RSTR_UART5RST, 1 << 20   @ bitWidth 1 (USART 5 reset)  
        .equ RCC_APB1RSTR_I2C1RST, 1 << 21   @ bitWidth 1 (I2C 1 reset)  
        .equ RCC_APB1RSTR_I2C2RST, 1 << 22   @ bitWidth 1 (I2C 2 reset)  
        .equ RCC_APB1RSTR_I2C3RST, 1 << 23   @ bitWidth 1 (I2C3 reset)  
        .equ RCC_APB1RSTR_CAN1RST, 1 << 25   @ bitWidth 1 (CAN1 reset)  
        .equ RCC_APB1RSTR_CAN2RST, 1 << 26   @ bitWidth 1 (CAN2 reset)  
        .equ RCC_APB1RSTR_PWRRST, 1 << 28   @ bitWidth 1 (Power interface reset)  
        .equ RCC_APB1RSTR_DACRST, 1 << 29   @ bitWidth 1 (DAC reset)  
        .equ RCC_APB1RSTR_UART7RST, 1 << 30   @ bitWidth 1 (UART7 reset)  
        .equ RCC_APB1RSTR_UART8RST, 1 << 31   @ bitWidth 1 (UART8 reset)  
        .equ RCC_APB1RSTR_SPDIFRXRST, 1 << 16   @ bitWidth 1 (SPDIF-RX reset)  
        .equ RCC_APB1RSTR_CECRST, 1 << 27   @ bitWidth 1 (HDMI-CEC reset)  
        .equ RCC_APB1RSTR_LPTIM1RST, 1 << 9   @ bitWidth 1 (Low power timer 1 reset)  
        .equ RCC_APB1RSTR_I2C4RST, 1 << 24   @ bitWidth 1 (I2C 4 reset)  
 
    .equ RCC_APB2RSTR, RCC_BASE + 0x24 @ (APB2 peripheral reset register) 
        .equ RCC_APB2RSTR_TIM1RST, 1 << 0   @ bitWidth 1 (TIM1 reset)  
        .equ RCC_APB2RSTR_TIM8RST, 1 << 1   @ bitWidth 1 (TIM8 reset)  
        .equ RCC_APB2RSTR_USART1RST, 1 << 4   @ bitWidth 1 (USART1 reset)  
        .equ RCC_APB2RSTR_USART6RST, 1 << 5   @ bitWidth 1 (USART6 reset)  
        .equ RCC_APB2RSTR_ADCRST, 1 << 8   @ bitWidth 1 (ADC interface reset common to all ADCs)  
        .equ RCC_APB2RSTR_SPI1RST, 1 << 12   @ bitWidth 1 (SPI 1 reset)  
        .equ RCC_APB2RSTR_SPI4RST, 1 << 13   @ bitWidth 1 (SPI4 reset)  
        .equ RCC_APB2RSTR_SYSCFGRST, 1 << 14   @ bitWidth 1 (System configuration controller reset)  
        .equ RCC_APB2RSTR_TIM9RST, 1 << 16   @ bitWidth 1 (TIM9 reset)  
        .equ RCC_APB2RSTR_TIM10RST, 1 << 17   @ bitWidth 1 (TIM10 reset)  
        .equ RCC_APB2RSTR_TIM11RST, 1 << 18   @ bitWidth 1 (TIM11 reset)  
        .equ RCC_APB2RSTR_SPI5RST, 1 << 20   @ bitWidth 1 (SPI5 reset)  
        .equ RCC_APB2RSTR_SPI6RST, 1 << 21   @ bitWidth 1 (SPI6 reset)  
        .equ RCC_APB2RSTR_SAI1RST, 1 << 22   @ bitWidth 1 (SAI1 reset)  
        .equ RCC_APB2RSTR_LTDCRST, 1 << 26   @ bitWidth 1 (LTDC reset)  
        .equ RCC_APB2RSTR_SAI2RST, 1 << 23   @ bitWidth 1 (SAI2 reset)  
        .equ RCC_APB2RSTR_SDMMC1RST, 1 << 11   @ bitWidth 1 (SDMMC1 reset)  
 
    .equ RCC_AHB1ENR, RCC_BASE + 0x30 @ (AHB1 peripheral clock register) 
        .equ RCC_AHB1ENR_OTGHSULPIEN, 1 << 30   @ bitWidth 1 (USB OTG HSULPI clock enable)  
        .equ RCC_AHB1ENR_OTGHSEN, 1 << 29   @ bitWidth 1 (USB OTG HS clock enable)  
        .equ RCC_AHB1ENR_ETHMACPTPEN, 1 << 28   @ bitWidth 1 (Ethernet PTP clock enable)  
        .equ RCC_AHB1ENR_ETHMACRXEN, 1 << 27   @ bitWidth 1 (Ethernet Reception clock enable)  
        .equ RCC_AHB1ENR_ETHMACTXEN, 1 << 26   @ bitWidth 1 (Ethernet Transmission clock enable)  
        .equ RCC_AHB1ENR_ETHMACEN, 1 << 25   @ bitWidth 1 (Ethernet MAC clock enable)  
        .equ RCC_AHB1ENR_DMA2DEN, 1 << 23   @ bitWidth 1 (DMA2D clock enable)  
        .equ RCC_AHB1ENR_DMA2EN, 1 << 22   @ bitWidth 1 (DMA2 clock enable)  
        .equ RCC_AHB1ENR_DMA1EN, 1 << 21   @ bitWidth 1 (DMA1 clock enable)  
        .equ RCC_AHB1ENR_CCMDATARAMEN, 1 << 20   @ bitWidth 1 (CCM data RAM clock enable)  
        .equ RCC_AHB1ENR_BKPSRAMEN, 1 << 18   @ bitWidth 1 (Backup SRAM interface clock enable)  
        .equ RCC_AHB1ENR_CRCEN, 1 << 12   @ bitWidth 1 (CRC clock enable)  
        .equ RCC_AHB1ENR_GPIOKEN, 1 << 10   @ bitWidth 1 (IO port K clock enable)  
        .equ RCC_AHB1ENR_GPIOJEN, 1 << 9   @ bitWidth 1 (IO port J clock enable)  
        .equ RCC_AHB1ENR_GPIOIEN, 1 << 8   @ bitWidth 1 (IO port I clock enable)  
        .equ RCC_AHB1ENR_GPIOHEN, 1 << 7   @ bitWidth 1 (IO port H clock enable)  
        .equ RCC_AHB1ENR_GPIOGEN, 1 << 6   @ bitWidth 1 (IO port G clock enable)  
        .equ RCC_AHB1ENR_GPIOFEN, 1 << 5   @ bitWidth 1 (IO port F clock enable)  
        .equ RCC_AHB1ENR_GPIOEEN, 1 << 4   @ bitWidth 1 (IO port E clock enable)  
        .equ RCC_AHB1ENR_GPIODEN, 1 << 3   @ bitWidth 1 (IO port D clock enable)  
        .equ RCC_AHB1ENR_GPIOCEN, 1 << 2   @ bitWidth 1 (IO port C clock enable)  
        .equ RCC_AHB1ENR_GPIOBEN, 1 << 1   @ bitWidth 1 (IO port B clock enable)  
        .equ RCC_AHB1ENR_GPIOAEN, 1 << 0   @ bitWidth 1 (IO port A clock enable)  
 
    .equ RCC_AHB2ENR, RCC_BASE + 0x34 @ (AHB2 peripheral clock enable register) 
        .equ RCC_AHB2ENR_OTGFSEN, 1 << 7   @ bitWidth 1 (USB OTG FS clock enable)  
        .equ RCC_AHB2ENR_RNGEN, 1 << 6   @ bitWidth 1 (Random number generator clock enable)  
        .equ RCC_AHB2ENR_HASHEN, 1 << 5   @ bitWidth 1 (Hash modules clock enable)  
        .equ RCC_AHB2ENR_CRYPEN, 1 << 4   @ bitWidth 1 (Cryptographic modules clock enable)  
        .equ RCC_AHB2ENR_DCMIEN, 1 << 0   @ bitWidth 1 (Camera interface enable)  
 
    .equ RCC_AHB3ENR, RCC_BASE + 0x38 @ (AHB3 peripheral clock enable register) 
        .equ RCC_AHB3ENR_FMCEN, 1 << 0   @ bitWidth 1 (Flexible memory controller module clock enable)  
        .equ RCC_AHB3ENR_QSPIEN, 1 << 1   @ bitWidth 1 (Quad SPI memory controller clock enable)  
 
    .equ RCC_APB1ENR, RCC_BASE + 0x40 @ (APB1 peripheral clock enable register) 
        .equ RCC_APB1ENR_TIM2EN, 1 << 0   @ bitWidth 1 (TIM2 clock enable)  
        .equ RCC_APB1ENR_TIM3EN, 1 << 1   @ bitWidth 1 (TIM3 clock enable)  
        .equ RCC_APB1ENR_TIM4EN, 1 << 2   @ bitWidth 1 (TIM4 clock enable)  
        .equ RCC_APB1ENR_TIM5EN, 1 << 3   @ bitWidth 1 (TIM5 clock enable)  
        .equ RCC_APB1ENR_TIM6EN, 1 << 4   @ bitWidth 1 (TIM6 clock enable)  
        .equ RCC_APB1ENR_TIM7EN, 1 << 5   @ bitWidth 1 (TIM7 clock enable)  
        .equ RCC_APB1ENR_TIM12EN, 1 << 6   @ bitWidth 1 (TIM12 clock enable)  
        .equ RCC_APB1ENR_TIM13EN, 1 << 7   @ bitWidth 1 (TIM13 clock enable)  
        .equ RCC_APB1ENR_TIM14EN, 1 << 8   @ bitWidth 1 (TIM14 clock enable)  
        .equ RCC_APB1ENR_WWDGEN, 1 << 11   @ bitWidth 1 (Window watchdog clock enable)  
        .equ RCC_APB1ENR_SPI2EN, 1 << 14   @ bitWidth 1 (SPI2 clock enable)  
        .equ RCC_APB1ENR_SPI3EN, 1 << 15   @ bitWidth 1 (SPI3 clock enable)  
        .equ RCC_APB1ENR_USART2EN, 1 << 17   @ bitWidth 1 (USART 2 clock enable)  
        .equ RCC_APB1ENR_USART3EN, 1 << 18   @ bitWidth 1 (USART3 clock enable)  
        .equ RCC_APB1ENR_UART4EN, 1 << 19   @ bitWidth 1 (UART4 clock enable)  
        .equ RCC_APB1ENR_UART5EN, 1 << 20   @ bitWidth 1 (UART5 clock enable)  
        .equ RCC_APB1ENR_I2C1EN, 1 << 21   @ bitWidth 1 (I2C1 clock enable)  
        .equ RCC_APB1ENR_I2C2EN, 1 << 22   @ bitWidth 1 (I2C2 clock enable)  
        .equ RCC_APB1ENR_I2C3EN, 1 << 23   @ bitWidth 1 (I2C3 clock enable)  
        .equ RCC_APB1ENR_CAN1EN, 1 << 25   @ bitWidth 1 (CAN 1 clock enable)  
        .equ RCC_APB1ENR_CAN2EN, 1 << 26   @ bitWidth 1 (CAN 2 clock enable)  
        .equ RCC_APB1ENR_PWREN, 1 << 28   @ bitWidth 1 (Power interface clock enable)  
        .equ RCC_APB1ENR_DACEN, 1 << 29   @ bitWidth 1 (DAC interface clock enable)  
        .equ RCC_APB1ENR_UART7ENR, 1 << 30   @ bitWidth 1 (UART7 clock enable)  
        .equ RCC_APB1ENR_UART8ENR, 1 << 31   @ bitWidth 1 (UART8 clock enable)  
        .equ RCC_APB1ENR_SPDIFRXEN, 1 << 16   @ bitWidth 1 (SPDIF-RX clock enable)  
        .equ RCC_APB1ENR_CECEN, 1 << 27   @ bitWidth 1 (HDMI-CEN clock enable)  
        .equ RCC_APB1ENR_LPTMI1EN, 1 << 9   @ bitWidth 1 (Low power timer 1 clock enable)  
        .equ RCC_APB1ENR_I2C4EN, 1 << 24   @ bitWidth 1 (I2C4 clock enable)  
 
    .equ RCC_APB2ENR, RCC_BASE + 0x44 @ (APB2 peripheral clock enable register) 
        .equ RCC_APB2ENR_TIM1EN, 1 << 0   @ bitWidth 1 (TIM1 clock enable)  
        .equ RCC_APB2ENR_TIM8EN, 1 << 1   @ bitWidth 1 (TIM8 clock enable)  
        .equ RCC_APB2ENR_USART1EN, 1 << 4   @ bitWidth 1 (USART1 clock enable)  
        .equ RCC_APB2ENR_USART6EN, 1 << 5   @ bitWidth 1 (USART6 clock enable)  
        .equ RCC_APB2ENR_ADC1EN, 1 << 8   @ bitWidth 1 (ADC1 clock enable)  
        .equ RCC_APB2ENR_ADC2EN, 1 << 9   @ bitWidth 1 (ADC2 clock enable)  
        .equ RCC_APB2ENR_ADC3EN, 1 << 10   @ bitWidth 1 (ADC3 clock enable)  
        .equ RCC_APB2ENR_SPI1EN, 1 << 12   @ bitWidth 1 (SPI1 clock enable)  
        .equ RCC_APB2ENR_SPI4ENR, 1 << 13   @ bitWidth 1 (SPI4 clock enable)  
        .equ RCC_APB2ENR_SYSCFGEN, 1 << 14   @ bitWidth 1 (System configuration controller clock enable)  
        .equ RCC_APB2ENR_TIM9EN, 1 << 16   @ bitWidth 1 (TIM9 clock enable)  
        .equ RCC_APB2ENR_TIM10EN, 1 << 17   @ bitWidth 1 (TIM10 clock enable)  
        .equ RCC_APB2ENR_TIM11EN, 1 << 18   @ bitWidth 1 (TIM11 clock enable)  
        .equ RCC_APB2ENR_SPI5ENR, 1 << 20   @ bitWidth 1 (SPI5 clock enable)  
        .equ RCC_APB2ENR_SPI6ENR, 1 << 21   @ bitWidth 1 (SPI6 clock enable)  
        .equ RCC_APB2ENR_SAI1EN, 1 << 22   @ bitWidth 1 (SAI1 clock enable)  
        .equ RCC_APB2ENR_LTDCEN, 1 << 26   @ bitWidth 1 (LTDC clock enable)  
        .equ RCC_APB2ENR_SAI2EN, 1 << 23   @ bitWidth 1 (SAI2 clock enable)  
        .equ RCC_APB2ENR_SDMMC1EN, 1 << 11   @ bitWidth 1 (SDMMC1 clock enable)  
 
    .equ RCC_AHB1LPENR, RCC_BASE + 0x50 @ (AHB1 peripheral clock enable in low power mode register) 
        .equ RCC_AHB1LPENR_GPIOALPEN, 1 << 0   @ bitWidth 1 (IO port A clock enable during sleep mode)  
        .equ RCC_AHB1LPENR_GPIOBLPEN, 1 << 1   @ bitWidth 1 (IO port B clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_GPIOCLPEN, 1 << 2   @ bitWidth 1 (IO port C clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_GPIODLPEN, 1 << 3   @ bitWidth 1 (IO port D clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_GPIOELPEN, 1 << 4   @ bitWidth 1 (IO port E clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_GPIOFLPEN, 1 << 5   @ bitWidth 1 (IO port F clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_GPIOGLPEN, 1 << 6   @ bitWidth 1 (IO port G clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_GPIOHLPEN, 1 << 7   @ bitWidth 1 (IO port H clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_GPIOILPEN, 1 << 8   @ bitWidth 1 (IO port I clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_GPIOJLPEN, 1 << 9   @ bitWidth 1 (IO port J clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_GPIOKLPEN, 1 << 10   @ bitWidth 1 (IO port K clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_CRCLPEN, 1 << 12   @ bitWidth 1 (CRC clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_FLITFLPEN, 1 << 15   @ bitWidth 1 (Flash interface clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_SRAM1LPEN, 1 << 16   @ bitWidth 1 (SRAM 1interface clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_SRAM2LPEN, 1 << 17   @ bitWidth 1 (SRAM 2 interface clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_BKPSRAMLPEN, 1 << 18   @ bitWidth 1 (Backup SRAM interface clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_SRAM3LPEN, 1 << 19   @ bitWidth 1 (SRAM 3 interface clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_DMA1LPEN, 1 << 21   @ bitWidth 1 (DMA1 clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_DMA2LPEN, 1 << 22   @ bitWidth 1 (DMA2 clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_DMA2DLPEN, 1 << 23   @ bitWidth 1 (DMA2D clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_ETHMACLPEN, 1 << 25   @ bitWidth 1 (Ethernet MAC clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_ETHMACTXLPEN, 1 << 26   @ bitWidth 1 (Ethernet transmission clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_ETHMACRXLPEN, 1 << 27   @ bitWidth 1 (Ethernet reception clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_ETHMACPTPLPEN, 1 << 28   @ bitWidth 1 (Ethernet PTP clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_OTGHSLPEN, 1 << 29   @ bitWidth 1 (USB OTG HS clock enable during Sleep mode)  
        .equ RCC_AHB1LPENR_OTGHSULPILPEN, 1 << 30   @ bitWidth 1 (USB OTG HS ULPI clock enable during Sleep mode)  
 
    .equ RCC_AHB2LPENR, RCC_BASE + 0x54 @ (AHB2 peripheral clock enable in low power mode register) 
        .equ RCC_AHB2LPENR_OTGFSLPEN, 1 << 7   @ bitWidth 1 (USB OTG FS clock enable during Sleep mode)  
        .equ RCC_AHB2LPENR_RNGLPEN, 1 << 6   @ bitWidth 1 (Random number generator clock enable during Sleep mode)  
        .equ RCC_AHB2LPENR_HASHLPEN, 1 << 5   @ bitWidth 1 (Hash modules clock enable during Sleep mode)  
        .equ RCC_AHB2LPENR_CRYPLPEN, 1 << 4   @ bitWidth 1 (Cryptography modules clock enable during Sleep mode)  
        .equ RCC_AHB2LPENR_DCMILPEN, 1 << 0   @ bitWidth 1 (Camera interface enable during Sleep mode)  
 
    .equ RCC_AHB3LPENR, RCC_BASE + 0x58 @ (AHB3 peripheral clock enable in low power mode register) 
        .equ RCC_AHB3LPENR_FMCLPEN, 1 << 0   @ bitWidth 1 (Flexible memory controller module clock enable during Sleep mode)  
        .equ RCC_AHB3LPENR_QSPILPEN, 1 << 1   @ bitWidth 1 (Quand SPI memory controller clock enable during Sleep mode)  
 
    .equ RCC_APB1LPENR, RCC_BASE + 0x60 @ (APB1 peripheral clock enable in low power mode register) 
        .equ RCC_APB1LPENR_TIM2LPEN, 1 << 0   @ bitWidth 1 (TIM2 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_TIM3LPEN, 1 << 1   @ bitWidth 1 (TIM3 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_TIM4LPEN, 1 << 2   @ bitWidth 1 (TIM4 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_TIM5LPEN, 1 << 3   @ bitWidth 1 (TIM5 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_TIM6LPEN, 1 << 4   @ bitWidth 1 (TIM6 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_TIM7LPEN, 1 << 5   @ bitWidth 1 (TIM7 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_TIM12LPEN, 1 << 6   @ bitWidth 1 (TIM12 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_TIM13LPEN, 1 << 7   @ bitWidth 1 (TIM13 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_TIM14LPEN, 1 << 8   @ bitWidth 1 (TIM14 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_WWDGLPEN, 1 << 11   @ bitWidth 1 (Window watchdog clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_SPI2LPEN, 1 << 14   @ bitWidth 1 (SPI2 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_SPI3LPEN, 1 << 15   @ bitWidth 1 (SPI3 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_USART2LPEN, 1 << 17   @ bitWidth 1 (USART2 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_USART3LPEN, 1 << 18   @ bitWidth 1 (USART3 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_UART4LPEN, 1 << 19   @ bitWidth 1 (UART4 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_UART5LPEN, 1 << 20   @ bitWidth 1 (UART5 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_I2C1LPEN, 1 << 21   @ bitWidth 1 (I2C1 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_I2C2LPEN, 1 << 22   @ bitWidth 1 (I2C2 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_I2C3LPEN, 1 << 23   @ bitWidth 1 (I2C3 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_CAN1LPEN, 1 << 25   @ bitWidth 1 (CAN 1 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_CAN2LPEN, 1 << 26   @ bitWidth 1 (CAN 2 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_PWRLPEN, 1 << 28   @ bitWidth 1 (Power interface clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_DACLPEN, 1 << 29   @ bitWidth 1 (DAC interface clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_UART7LPEN, 1 << 30   @ bitWidth 1 (UART7 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_UART8LPEN, 1 << 31   @ bitWidth 1 (UART8 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_SPDIFRXLPEN, 1 << 16   @ bitWidth 1 (SPDIF-RX clock enable during sleep mode)  
        .equ RCC_APB1LPENR_CECLPEN, 1 << 27   @ bitWidth 1 (HDMI-CEN clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_LPTIM1LPEN, 1 << 9   @ bitWidth 1 (low power timer 1 clock enable during Sleep mode)  
        .equ RCC_APB1LPENR_I2C4LPEN, 1 << 24   @ bitWidth 1 (I2C4 clock enable during Sleep mode)  
 
    .equ RCC_APB2LPENR, RCC_BASE + 0x64 @ (APB2 peripheral clock enabled in low power mode register) 
        .equ RCC_APB2LPENR_TIM1LPEN, 1 << 0   @ bitWidth 1 (TIM1 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_TIM8LPEN, 1 << 1   @ bitWidth 1 (TIM8 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_USART1LPEN, 1 << 4   @ bitWidth 1 (USART1 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_USART6LPEN, 1 << 5   @ bitWidth 1 (USART6 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_ADC1LPEN, 1 << 8   @ bitWidth 1 (ADC1 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_ADC2LPEN, 1 << 9   @ bitWidth 1 (ADC2 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_ADC3LPEN, 1 << 10   @ bitWidth 1 (ADC 3 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_SPI1LPEN, 1 << 12   @ bitWidth 1 (SPI 1 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_SPI4LPEN, 1 << 13   @ bitWidth 1 (SPI 4 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_SYSCFGLPEN, 1 << 14   @ bitWidth 1 (System configuration controller clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_TIM9LPEN, 1 << 16   @ bitWidth 1 (TIM9 clock enable during sleep mode)  
        .equ RCC_APB2LPENR_TIM10LPEN, 1 << 17   @ bitWidth 1 (TIM10 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_TIM11LPEN, 1 << 18   @ bitWidth 1 (TIM11 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_SPI5LPEN, 1 << 20   @ bitWidth 1 (SPI 5 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_SPI6LPEN, 1 << 21   @ bitWidth 1 (SPI 6 clock enable during Sleep mode)  
        .equ RCC_APB2LPENR_SAI1LPEN, 1 << 22   @ bitWidth 1 (SAI1 clock enable during sleep mode)  
        .equ RCC_APB2LPENR_LTDCLPEN, 1 << 26   @ bitWidth 1 (LTDC clock enable during sleep mode)  
        .equ RCC_APB2LPENR_SAI2LPEN, 1 << 23   @ bitWidth 1 (SAI2 clock enable during sleep mode)  
        .equ RCC_APB2LPENR_SDMMC1LPEN, 1 << 11   @ bitWidth 1 (SDMMC1 clock enable during Sleep mode)  
 
    .equ RCC_BDCR, RCC_BASE + 0x70 @ (Backup domain control register) 
        .equ RCC_BDCR_BDRST, 1 << 16   @ bitWidth 1 (Backup domain software reset)  
        .equ RCC_BDCR_RTCEN, 1 << 15   @ bitWidth 1 (RTC clock enable)  
        .equ RCC_BDCR_RTCSEL1, 1 << 9   @ bitWidth 1 (RTC clock source selection)  
        .equ RCC_BDCR_RTCSEL0, 1 << 8   @ bitWidth 1 (RTC clock source selection)  
        .equ RCC_BDCR_LSEBYP, 1 << 2   @ bitWidth 1 (External low-speed oscillator bypass)  
        .equ RCC_BDCR_LSERDY, 1 << 1   @ bitWidth 1 (External low-speed oscillator ready)  
        .equ RCC_BDCR_LSEON, 1 << 0   @ bitWidth 1 (External low-speed oscillator enable)  
 
    .equ RCC_CSR, RCC_BASE + 0x74 @ (clock control & status register) 
        .equ RCC_CSR_LPWRRSTF, 1 << 31   @ bitWidth 1 (Low-power reset flag)  
        .equ RCC_CSR_WWDGRSTF, 1 << 30   @ bitWidth 1 (Window watchdog reset flag)  
        .equ RCC_CSR_WDGRSTF, 1 << 29   @ bitWidth 1 (Independent watchdog reset flag)  
        .equ RCC_CSR_SFTRSTF, 1 << 28   @ bitWidth 1 (Software reset flag)  
        .equ RCC_CSR_PORRSTF, 1 << 27   @ bitWidth 1 (POR/PDR reset flag)  
        .equ RCC_CSR_PADRSTF, 1 << 26   @ bitWidth 1 (PIN reset flag)  
        .equ RCC_CSR_BORRSTF, 1 << 25   @ bitWidth 1 (BOR reset flag)  
        .equ RCC_CSR_RMVF, 1 << 24   @ bitWidth 1 (Remove reset flag)  
        .equ RCC_CSR_LSIRDY, 1 << 1   @ bitWidth 1 (Internal low-speed oscillator ready)  
        .equ RCC_CSR_LSION, 1 << 0   @ bitWidth 1 (Internal low-speed oscillator enable)  
 
    .equ RCC_SSCGR, RCC_BASE + 0x80 @ (spread spectrum clock generation register) 
        .equ RCC_SSCGR_SSCGEN, 1 << 31   @ bitWidth 1 (Spread spectrum modulation enable)  
        .equ RCC_SSCGR_SPREADSEL, 1 << 30   @ bitWidth 1 (Spread Select)  
        .equ RCC_SSCGR_INCSTEP_Shift, 13   @ bitWidth 15 (Incrementation step)  
        .equ RCC_SSCGR_MODPER_Shift, 0   @ bitWidth 13 (Modulation period)  
 
    .equ RCC_PLLI2SCFGR, RCC_BASE + 0x84 @ (PLLI2S configuration register) 
        .equ RCC_PLLI2SCFGR_PLLI2SR_Shift, 28   @ bitWidth 3 (PLLI2S division factor for I2S clocks)  
        .equ RCC_PLLI2SCFGR_PLLI2SQ_Shift, 24   @ bitWidth 4 (PLLI2S division factor for SAI1 clock)  
        .equ RCC_PLLI2SCFGR_PLLI2SN_Shift, 6   @ bitWidth 9 (PLLI2S multiplication factor for VCO)  
 
    .equ RCC_PLLSAICFGR, RCC_BASE + 0x88 @ (PLL configuration register) 
        .equ RCC_PLLSAICFGR_PLLSAIN_Shift, 6   @ bitWidth 9 (PLLSAI division factor for VCO)  
        .equ RCC_PLLSAICFGR_PLLSAIP_Shift, 16   @ bitWidth 2 (PLLSAI division factor for 48MHz clock)  
        .equ RCC_PLLSAICFGR_PLLSAIQ_Shift, 24   @ bitWidth 4 (PLLSAI division factor for SAI clock)  
        .equ RCC_PLLSAICFGR_PLLSAIR_Shift, 28   @ bitWidth 3 (PLLSAI division factor for LCD clock)  
 
    .equ RCC_DKCFGR1, RCC_BASE + 0x8C @ (dedicated clocks configuration register) 
        .equ RCC_DKCFGR1_PLLI2SDIV_Shift, 0   @ bitWidth 5 (PLLI2S division factor for SAI1 clock)  
        .equ RCC_DKCFGR1_PLLSAIDIVQ_Shift, 8   @ bitWidth 5 (PLLSAI division factor for SAI1 clock)  
        .equ RCC_DKCFGR1_PLLSAIDIVR_Shift, 16   @ bitWidth 2 (division factor for LCD_CLK)  
        .equ RCC_DKCFGR1_SAI1SEL_Shift, 20   @ bitWidth 2 (SAI1 clock source selection)  
        .equ RCC_DKCFGR1_SAI2SEL_Shift, 22   @ bitWidth 2 (SAI2 clock source selection)  
        .equ RCC_DKCFGR1_TIMPRE, 1 << 24   @ bitWidth 1 (Timers clocks prescalers selection)  
 
    .equ RCC_DKCFGR2, RCC_BASE + 0x90 @ (dedicated clocks configuration register) 
        .equ RCC_DKCFGR2_USART1SEL_Shift, 0   @ bitWidth 2 (USART 1 clock source selection)  
        .equ RCC_DKCFGR2_USART2SEL_Shift, 2   @ bitWidth 2 (USART 2 clock source selection)  
        .equ RCC_DKCFGR2_USART3SEL_Shift, 4   @ bitWidth 2 (USART 3 clock source selection)  
        .equ RCC_DKCFGR2_UART4SEL_Shift, 6   @ bitWidth 2 (UART 4 clock source selection)  
        .equ RCC_DKCFGR2_UART5SEL_Shift, 8   @ bitWidth 2 (UART 5 clock source selection)  
        .equ RCC_DKCFGR2_USART6SEL_Shift, 10   @ bitWidth 2 (USART 6 clock source selection)  
        .equ RCC_DKCFGR2_UART7SEL_Shift, 12   @ bitWidth 2 (UART 7 clock source selection)  
        .equ RCC_DKCFGR2_UART8SEL_Shift, 14   @ bitWidth 2 (UART 8 clock source selection)  
        .equ RCC_DKCFGR2_I2C1SEL_Shift, 16   @ bitWidth 2 (I2C1 clock source selection)  
        .equ RCC_DKCFGR2_I2C2SEL_Shift, 18   @ bitWidth 2 (I2C2 clock source selection)  
        .equ RCC_DKCFGR2_I2C3SEL_Shift, 20   @ bitWidth 2 (I2C3 clock source selection)  
        .equ RCC_DKCFGR2_I2C4SEL_Shift, 22   @ bitWidth 2 (I2C4 clock source selection)  
        .equ RCC_DKCFGR2_LPTIM1SEL_Shift, 24   @ bitWidth 2 (Low power timer 1 clock source selection)  
        .equ RCC_DKCFGR2_CECSEL, 1 << 26   @ bitWidth 1 (HDMI-CEC clock source selection)  
        .equ RCC_DKCFGR2_CK48MSEL, 1 << 27   @ bitWidth 1 (48MHz clock source selection)  
        .equ RCC_DKCFGR2_SDMMCSEL, 1 << 28   @ bitWidth 1 (SDMMC clock source selection)  
 

@=========================== GPIOD ===========================@
.equ GPIOD_BASE, 0X40020C00 @ (General-purpose I/Os) 
    .equ GPIOD_MODER, GPIOD_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOD_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOD_OTYPER, GPIOD_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOD_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOD_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOD_GPIOB_OSPEEDR, GPIOD_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOD_PUPDR, GPIOD_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOD_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOD_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOD_IDR, GPIOD_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOD_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOD_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOD_ODR, GPIOD_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOD_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOD_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOD_BSRR, GPIOD_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOD_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOD_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOD_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOD_LCKR, GPIOD_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOD_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOD_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOD_AFRL, GPIOD_BASE + 0x20 @ (GPIO alternate function lowregister) 
        .equ GPIOD_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOD_AFRH, GPIOD_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOD_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOD_BRR, GPIOD_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOD_BRR_BR0, 1 << 0   @ bitWidth 1 (Port D Reset bit 0)  
        .equ GPIOD_BRR_BR1, 1 << 1   @ bitWidth 1 (Port D Reset bit 1)  
        .equ GPIOD_BRR_BR2, 1 << 2   @ bitWidth 1 (Port D Reset bit 2)  
        .equ GPIOD_BRR_BR3, 1 << 3   @ bitWidth 1 (Port D Reset bit 3)  
        .equ GPIOD_BRR_BR4, 1 << 4   @ bitWidth 1 (Port D Reset bit 4)  
        .equ GPIOD_BRR_BR5, 1 << 5   @ bitWidth 1 (Port D Reset bit 5)  
        .equ GPIOD_BRR_BR6, 1 << 6   @ bitWidth 1 (Port D Reset bit 6)  
        .equ GPIOD_BRR_BR7, 1 << 7   @ bitWidth 1 (Port D Reset bit 7)  
        .equ GPIOD_BRR_BR8, 1 << 8   @ bitWidth 1 (Port D Reset bit 8)  
        .equ GPIOD_BRR_BR9, 1 << 9   @ bitWidth 1 (Port D Reset bit 9)  
        .equ GPIOD_BRR_BR10, 1 << 10   @ bitWidth 1 (Port D Reset bit 10)  
        .equ GPIOD_BRR_BR11, 1 << 11   @ bitWidth 1 (Port D Reset bit 11)  
        .equ GPIOD_BRR_BR12, 1 << 12   @ bitWidth 1 (Port D Reset bit 12)  
        .equ GPIOD_BRR_BR13, 1 << 13   @ bitWidth 1 (Port D Reset bit 13)  
        .equ GPIOD_BRR_BR14, 1 << 14   @ bitWidth 1 (Port D Reset bit 14)  
        .equ GPIOD_BRR_BR15, 1 << 15   @ bitWidth 1 (Port D Reset bit 15)  
 

@=========================== GPIOC ===========================@
.equ GPIOC_BASE, 0x40020800 @ (General-purpose I/Os) 
    .equ GPIOC_MODER, GPIOC_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOC_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOC_OTYPER, GPIOC_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOC_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOC_GPIOB_OSPEEDR, GPIOC_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOC_PUPDR, GPIOC_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOC_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOC_IDR, GPIOC_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOC_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOC_ODR, GPIOC_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOC_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOC_BSRR, GPIOC_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOC_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOC_LCKR, GPIOC_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOC_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOC_AFRL, GPIOC_BASE + 0x20 @ (GPIO alternate function lowregister) 
        .equ GPIOC_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOC_AFRH, GPIOC_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOC_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOC_BRR, GPIOC_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOC_BRR_BR0, 1 << 0   @ bitWidth 1 (Port D Reset bit 0)  
        .equ GPIOC_BRR_BR1, 1 << 1   @ bitWidth 1 (Port D Reset bit 1)  
        .equ GPIOC_BRR_BR2, 1 << 2   @ bitWidth 1 (Port D Reset bit 2)  
        .equ GPIOC_BRR_BR3, 1 << 3   @ bitWidth 1 (Port D Reset bit 3)  
        .equ GPIOC_BRR_BR4, 1 << 4   @ bitWidth 1 (Port D Reset bit 4)  
        .equ GPIOC_BRR_BR5, 1 << 5   @ bitWidth 1 (Port D Reset bit 5)  
        .equ GPIOC_BRR_BR6, 1 << 6   @ bitWidth 1 (Port D Reset bit 6)  
        .equ GPIOC_BRR_BR7, 1 << 7   @ bitWidth 1 (Port D Reset bit 7)  
        .equ GPIOC_BRR_BR8, 1 << 8   @ bitWidth 1 (Port D Reset bit 8)  
        .equ GPIOC_BRR_BR9, 1 << 9   @ bitWidth 1 (Port D Reset bit 9)  
        .equ GPIOC_BRR_BR10, 1 << 10   @ bitWidth 1 (Port D Reset bit 10)  
        .equ GPIOC_BRR_BR11, 1 << 11   @ bitWidth 1 (Port D Reset bit 11)  
        .equ GPIOC_BRR_BR12, 1 << 12   @ bitWidth 1 (Port D Reset bit 12)  
        .equ GPIOC_BRR_BR13, 1 << 13   @ bitWidth 1 (Port D Reset bit 13)  
        .equ GPIOC_BRR_BR14, 1 << 14   @ bitWidth 1 (Port D Reset bit 14)  
        .equ GPIOC_BRR_BR15, 1 << 15   @ bitWidth 1 (Port D Reset bit 15)  
 

@=========================== GPIOK ===========================@
.equ GPIOK_BASE, 0X40022800 @ (General-purpose I/Os) 
    .equ GPIOK_MODER, GPIOK_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOK_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOK_OTYPER, GPIOK_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOK_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOK_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOK_GPIOB_OSPEEDR, GPIOK_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOK_PUPDR, GPIOK_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOK_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOK_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOK_IDR, GPIOK_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOK_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOK_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOK_ODR, GPIOK_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOK_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOK_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOK_BSRR, GPIOK_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOK_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOK_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOK_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOK_LCKR, GPIOK_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOK_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOK_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOK_AFRL, GPIOK_BASE + 0x20 @ (GPIO alternate function lowregister) 
        .equ GPIOK_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOK_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOK_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOK_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOK_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOK_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOK_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOK_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOK_AFRH, GPIOK_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOK_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOK_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOK_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOK_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOK_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOK_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOK_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOK_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOK_BRR, GPIOK_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOK_BRR_BR0, 1 << 0   @ bitWidth 1 (Port D Reset bit 0)  
        .equ GPIOK_BRR_BR1, 1 << 1   @ bitWidth 1 (Port D Reset bit 1)  
        .equ GPIOK_BRR_BR2, 1 << 2   @ bitWidth 1 (Port D Reset bit 2)  
        .equ GPIOK_BRR_BR3, 1 << 3   @ bitWidth 1 (Port D Reset bit 3)  
        .equ GPIOK_BRR_BR4, 1 << 4   @ bitWidth 1 (Port D Reset bit 4)  
        .equ GPIOK_BRR_BR5, 1 << 5   @ bitWidth 1 (Port D Reset bit 5)  
        .equ GPIOK_BRR_BR6, 1 << 6   @ bitWidth 1 (Port D Reset bit 6)  
        .equ GPIOK_BRR_BR7, 1 << 7   @ bitWidth 1 (Port D Reset bit 7)  
        .equ GPIOK_BRR_BR8, 1 << 8   @ bitWidth 1 (Port D Reset bit 8)  
        .equ GPIOK_BRR_BR9, 1 << 9   @ bitWidth 1 (Port D Reset bit 9)  
        .equ GPIOK_BRR_BR10, 1 << 10   @ bitWidth 1 (Port D Reset bit 10)  
        .equ GPIOK_BRR_BR11, 1 << 11   @ bitWidth 1 (Port D Reset bit 11)  
        .equ GPIOK_BRR_BR12, 1 << 12   @ bitWidth 1 (Port D Reset bit 12)  
        .equ GPIOK_BRR_BR13, 1 << 13   @ bitWidth 1 (Port D Reset bit 13)  
        .equ GPIOK_BRR_BR14, 1 << 14   @ bitWidth 1 (Port D Reset bit 14)  
        .equ GPIOK_BRR_BR15, 1 << 15   @ bitWidth 1 (Port D Reset bit 15)  
 

@=========================== GPIOJ ===========================@
.equ GPIOJ_BASE, 0X40022400 @ (General-purpose I/Os) 
    .equ GPIOJ_MODER, GPIOJ_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOJ_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOJ_OTYPER, GPIOJ_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOJ_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOJ_GPIOB_OSPEEDR, GPIOJ_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOJ_PUPDR, GPIOJ_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOJ_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOJ_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOJ_IDR, GPIOJ_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOJ_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOJ_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOJ_ODR, GPIOJ_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOJ_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOJ_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOJ_BSRR, GPIOJ_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOJ_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOJ_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOJ_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOJ_LCKR, GPIOJ_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOJ_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOJ_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOJ_AFRL, GPIOJ_BASE + 0x20 @ (GPIO alternate function lowregister) 
        .equ GPIOJ_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOJ_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOJ_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOJ_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOJ_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOJ_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOJ_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOJ_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOJ_AFRH, GPIOJ_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOJ_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOJ_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOJ_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOJ_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOJ_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOJ_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOJ_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOJ_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOJ_BRR, GPIOJ_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOJ_BRR_BR0, 1 << 0   @ bitWidth 1 (Port D Reset bit 0)  
        .equ GPIOJ_BRR_BR1, 1 << 1   @ bitWidth 1 (Port D Reset bit 1)  
        .equ GPIOJ_BRR_BR2, 1 << 2   @ bitWidth 1 (Port D Reset bit 2)  
        .equ GPIOJ_BRR_BR3, 1 << 3   @ bitWidth 1 (Port D Reset bit 3)  
        .equ GPIOJ_BRR_BR4, 1 << 4   @ bitWidth 1 (Port D Reset bit 4)  
        .equ GPIOJ_BRR_BR5, 1 << 5   @ bitWidth 1 (Port D Reset bit 5)  
        .equ GPIOJ_BRR_BR6, 1 << 6   @ bitWidth 1 (Port D Reset bit 6)  
        .equ GPIOJ_BRR_BR7, 1 << 7   @ bitWidth 1 (Port D Reset bit 7)  
        .equ GPIOJ_BRR_BR8, 1 << 8   @ bitWidth 1 (Port D Reset bit 8)  
        .equ GPIOJ_BRR_BR9, 1 << 9   @ bitWidth 1 (Port D Reset bit 9)  
        .equ GPIOJ_BRR_BR10, 1 << 10   @ bitWidth 1 (Port D Reset bit 10)  
        .equ GPIOJ_BRR_BR11, 1 << 11   @ bitWidth 1 (Port D Reset bit 11)  
        .equ GPIOJ_BRR_BR12, 1 << 12   @ bitWidth 1 (Port D Reset bit 12)  
        .equ GPIOJ_BRR_BR13, 1 << 13   @ bitWidth 1 (Port D Reset bit 13)  
        .equ GPIOJ_BRR_BR14, 1 << 14   @ bitWidth 1 (Port D Reset bit 14)  
        .equ GPIOJ_BRR_BR15, 1 << 15   @ bitWidth 1 (Port D Reset bit 15)  
 

@=========================== GPIOI ===========================@
.equ GPIOI_BASE, 0X40022000 @ (General-purpose I/Os) 
    .equ GPIOI_MODER, GPIOI_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOI_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOI_OTYPER, GPIOI_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOI_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOI_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOI_GPIOB_OSPEEDR, GPIOI_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOI_PUPDR, GPIOI_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOI_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOI_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOI_IDR, GPIOI_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOI_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOI_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOI_ODR, GPIOI_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOI_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOI_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOI_BSRR, GPIOI_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOI_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOI_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOI_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOI_LCKR, GPIOI_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOI_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOI_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOI_AFRL, GPIOI_BASE + 0x20 @ (GPIO alternate function lowregister) 
        .equ GPIOI_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOI_AFRH, GPIOI_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOI_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOI_BRR, GPIOI_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOI_BRR_BR0, 1 << 0   @ bitWidth 1 (Port D Reset bit 0)  
        .equ GPIOI_BRR_BR1, 1 << 1   @ bitWidth 1 (Port D Reset bit 1)  
        .equ GPIOI_BRR_BR2, 1 << 2   @ bitWidth 1 (Port D Reset bit 2)  
        .equ GPIOI_BRR_BR3, 1 << 3   @ bitWidth 1 (Port D Reset bit 3)  
        .equ GPIOI_BRR_BR4, 1 << 4   @ bitWidth 1 (Port D Reset bit 4)  
        .equ GPIOI_BRR_BR5, 1 << 5   @ bitWidth 1 (Port D Reset bit 5)  
        .equ GPIOI_BRR_BR6, 1 << 6   @ bitWidth 1 (Port D Reset bit 6)  
        .equ GPIOI_BRR_BR7, 1 << 7   @ bitWidth 1 (Port D Reset bit 7)  
        .equ GPIOI_BRR_BR8, 1 << 8   @ bitWidth 1 (Port D Reset bit 8)  
        .equ GPIOI_BRR_BR9, 1 << 9   @ bitWidth 1 (Port D Reset bit 9)  
        .equ GPIOI_BRR_BR10, 1 << 10   @ bitWidth 1 (Port D Reset bit 10)  
        .equ GPIOI_BRR_BR11, 1 << 11   @ bitWidth 1 (Port D Reset bit 11)  
        .equ GPIOI_BRR_BR12, 1 << 12   @ bitWidth 1 (Port D Reset bit 12)  
        .equ GPIOI_BRR_BR13, 1 << 13   @ bitWidth 1 (Port D Reset bit 13)  
        .equ GPIOI_BRR_BR14, 1 << 14   @ bitWidth 1 (Port D Reset bit 14)  
        .equ GPIOI_BRR_BR15, 1 << 15   @ bitWidth 1 (Port D Reset bit 15)  
 

@=========================== GPIOH ===========================@
.equ GPIOH_BASE, 0X40021C00 @ (General-purpose I/Os) 
    .equ GPIOH_MODER, GPIOH_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOH_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOH_OTYPER, GPIOH_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOH_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOH_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOH_GPIOB_OSPEEDR, GPIOH_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOH_PUPDR, GPIOH_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOH_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOH_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOH_IDR, GPIOH_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOH_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOH_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOH_ODR, GPIOH_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOH_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOH_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOH_BSRR, GPIOH_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOH_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOH_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOH_LCKR, GPIOH_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOH_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOH_AFRL, GPIOH_BASE + 0x20 @ (GPIO alternate function lowregister) 
        .equ GPIOH_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOH_AFRH, GPIOH_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOH_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOH_BRR, GPIOH_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOH_BRR_BR0, 1 << 0   @ bitWidth 1 (Port D Reset bit 0)  
        .equ GPIOH_BRR_BR1, 1 << 1   @ bitWidth 1 (Port D Reset bit 1)  
        .equ GPIOH_BRR_BR2, 1 << 2   @ bitWidth 1 (Port D Reset bit 2)  
        .equ GPIOH_BRR_BR3, 1 << 3   @ bitWidth 1 (Port D Reset bit 3)  
        .equ GPIOH_BRR_BR4, 1 << 4   @ bitWidth 1 (Port D Reset bit 4)  
        .equ GPIOH_BRR_BR5, 1 << 5   @ bitWidth 1 (Port D Reset bit 5)  
        .equ GPIOH_BRR_BR6, 1 << 6   @ bitWidth 1 (Port D Reset bit 6)  
        .equ GPIOH_BRR_BR7, 1 << 7   @ bitWidth 1 (Port D Reset bit 7)  
        .equ GPIOH_BRR_BR8, 1 << 8   @ bitWidth 1 (Port D Reset bit 8)  
        .equ GPIOH_BRR_BR9, 1 << 9   @ bitWidth 1 (Port D Reset bit 9)  
        .equ GPIOH_BRR_BR10, 1 << 10   @ bitWidth 1 (Port D Reset bit 10)  
        .equ GPIOH_BRR_BR11, 1 << 11   @ bitWidth 1 (Port D Reset bit 11)  
        .equ GPIOH_BRR_BR12, 1 << 12   @ bitWidth 1 (Port D Reset bit 12)  
        .equ GPIOH_BRR_BR13, 1 << 13   @ bitWidth 1 (Port D Reset bit 13)  
        .equ GPIOH_BRR_BR14, 1 << 14   @ bitWidth 1 (Port D Reset bit 14)  
        .equ GPIOH_BRR_BR15, 1 << 15   @ bitWidth 1 (Port D Reset bit 15)  
 

@=========================== GPIOG ===========================@
.equ GPIOG_BASE, 0X40021800 @ (General-purpose I/Os) 
    .equ GPIOG_MODER, GPIOG_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOG_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOG_OTYPER, GPIOG_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOG_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOG_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOG_GPIOB_OSPEEDR, GPIOG_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOG_PUPDR, GPIOG_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOG_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOG_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOG_IDR, GPIOG_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOG_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOG_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOG_ODR, GPIOG_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOG_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOG_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOG_BSRR, GPIOG_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOG_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOG_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOG_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOG_LCKR, GPIOG_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOG_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOG_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOG_AFRL, GPIOG_BASE + 0x20 @ (GPIO alternate function lowregister) 
        .equ GPIOG_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOG_AFRH, GPIOG_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOG_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOG_BRR, GPIOG_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOG_BRR_BR0, 1 << 0   @ bitWidth 1 (Port D Reset bit 0)  
        .equ GPIOG_BRR_BR1, 1 << 1   @ bitWidth 1 (Port D Reset bit 1)  
        .equ GPIOG_BRR_BR2, 1 << 2   @ bitWidth 1 (Port D Reset bit 2)  
        .equ GPIOG_BRR_BR3, 1 << 3   @ bitWidth 1 (Port D Reset bit 3)  
        .equ GPIOG_BRR_BR4, 1 << 4   @ bitWidth 1 (Port D Reset bit 4)  
        .equ GPIOG_BRR_BR5, 1 << 5   @ bitWidth 1 (Port D Reset bit 5)  
        .equ GPIOG_BRR_BR6, 1 << 6   @ bitWidth 1 (Port D Reset bit 6)  
        .equ GPIOG_BRR_BR7, 1 << 7   @ bitWidth 1 (Port D Reset bit 7)  
        .equ GPIOG_BRR_BR8, 1 << 8   @ bitWidth 1 (Port D Reset bit 8)  
        .equ GPIOG_BRR_BR9, 1 << 9   @ bitWidth 1 (Port D Reset bit 9)  
        .equ GPIOG_BRR_BR10, 1 << 10   @ bitWidth 1 (Port D Reset bit 10)  
        .equ GPIOG_BRR_BR11, 1 << 11   @ bitWidth 1 (Port D Reset bit 11)  
        .equ GPIOG_BRR_BR12, 1 << 12   @ bitWidth 1 (Port D Reset bit 12)  
        .equ GPIOG_BRR_BR13, 1 << 13   @ bitWidth 1 (Port D Reset bit 13)  
        .equ GPIOG_BRR_BR14, 1 << 14   @ bitWidth 1 (Port D Reset bit 14)  
        .equ GPIOG_BRR_BR15, 1 << 15   @ bitWidth 1 (Port D Reset bit 15)  
 

@=========================== GPIOF ===========================@
.equ GPIOF_BASE, 0X40021400 @ (General-purpose I/Os) 
    .equ GPIOF_MODER, GPIOF_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOF_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOF_OTYPER, GPIOF_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOF_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOF_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOF_GPIOB_OSPEEDR, GPIOF_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOF_PUPDR, GPIOF_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOF_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOF_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOF_IDR, GPIOF_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOF_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOF_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOF_ODR, GPIOF_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOF_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOF_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOF_BSRR, GPIOF_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOF_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOF_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOF_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOF_LCKR, GPIOF_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOF_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOF_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOF_AFRL, GPIOF_BASE + 0x20 @ (GPIO alternate function lowregister) 
        .equ GPIOF_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOF_AFRH, GPIOF_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOF_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOF_BRR, GPIOF_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOF_BRR_BR0, 1 << 0   @ bitWidth 1 (Port D Reset bit 0)  
        .equ GPIOF_BRR_BR1, 1 << 1   @ bitWidth 1 (Port D Reset bit 1)  
        .equ GPIOF_BRR_BR2, 1 << 2   @ bitWidth 1 (Port D Reset bit 2)  
        .equ GPIOF_BRR_BR3, 1 << 3   @ bitWidth 1 (Port D Reset bit 3)  
        .equ GPIOF_BRR_BR4, 1 << 4   @ bitWidth 1 (Port D Reset bit 4)  
        .equ GPIOF_BRR_BR5, 1 << 5   @ bitWidth 1 (Port D Reset bit 5)  
        .equ GPIOF_BRR_BR6, 1 << 6   @ bitWidth 1 (Port D Reset bit 6)  
        .equ GPIOF_BRR_BR7, 1 << 7   @ bitWidth 1 (Port D Reset bit 7)  
        .equ GPIOF_BRR_BR8, 1 << 8   @ bitWidth 1 (Port D Reset bit 8)  
        .equ GPIOF_BRR_BR9, 1 << 9   @ bitWidth 1 (Port D Reset bit 9)  
        .equ GPIOF_BRR_BR10, 1 << 10   @ bitWidth 1 (Port D Reset bit 10)  
        .equ GPIOF_BRR_BR11, 1 << 11   @ bitWidth 1 (Port D Reset bit 11)  
        .equ GPIOF_BRR_BR12, 1 << 12   @ bitWidth 1 (Port D Reset bit 12)  
        .equ GPIOF_BRR_BR13, 1 << 13   @ bitWidth 1 (Port D Reset bit 13)  
        .equ GPIOF_BRR_BR14, 1 << 14   @ bitWidth 1 (Port D Reset bit 14)  
        .equ GPIOF_BRR_BR15, 1 << 15   @ bitWidth 1 (Port D Reset bit 15)  
 

@=========================== GPIOE ===========================@
.equ GPIOE_BASE, 0X40021000 @ (General-purpose I/Os) 
    .equ GPIOE_MODER, GPIOE_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOE_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOE_OTYPER, GPIOE_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOE_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOE_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOE_GPIOB_OSPEEDR, GPIOE_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOE_PUPDR, GPIOE_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOE_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOE_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOE_IDR, GPIOE_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOE_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOE_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOE_ODR, GPIOE_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOE_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOE_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOE_BSRR, GPIOE_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOE_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOE_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOE_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOE_LCKR, GPIOE_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOE_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOE_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOE_AFRL, GPIOE_BASE + 0x20 @ (GPIO alternate function lowregister) 
        .equ GPIOE_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOE_AFRH, GPIOE_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOE_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOE_BRR, GPIOE_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOE_BRR_BR0, 1 << 0   @ bitWidth 1 (Port D Reset bit 0)  
        .equ GPIOE_BRR_BR1, 1 << 1   @ bitWidth 1 (Port D Reset bit 1)  
        .equ GPIOE_BRR_BR2, 1 << 2   @ bitWidth 1 (Port D Reset bit 2)  
        .equ GPIOE_BRR_BR3, 1 << 3   @ bitWidth 1 (Port D Reset bit 3)  
        .equ GPIOE_BRR_BR4, 1 << 4   @ bitWidth 1 (Port D Reset bit 4)  
        .equ GPIOE_BRR_BR5, 1 << 5   @ bitWidth 1 (Port D Reset bit 5)  
        .equ GPIOE_BRR_BR6, 1 << 6   @ bitWidth 1 (Port D Reset bit 6)  
        .equ GPIOE_BRR_BR7, 1 << 7   @ bitWidth 1 (Port D Reset bit 7)  
        .equ GPIOE_BRR_BR8, 1 << 8   @ bitWidth 1 (Port D Reset bit 8)  
        .equ GPIOE_BRR_BR9, 1 << 9   @ bitWidth 1 (Port D Reset bit 9)  
        .equ GPIOE_BRR_BR10, 1 << 10   @ bitWidth 1 (Port D Reset bit 10)  
        .equ GPIOE_BRR_BR11, 1 << 11   @ bitWidth 1 (Port D Reset bit 11)  
        .equ GPIOE_BRR_BR12, 1 << 12   @ bitWidth 1 (Port D Reset bit 12)  
        .equ GPIOE_BRR_BR13, 1 << 13   @ bitWidth 1 (Port D Reset bit 13)  
        .equ GPIOE_BRR_BR14, 1 << 14   @ bitWidth 1 (Port D Reset bit 14)  
        .equ GPIOE_BRR_BR15, 1 << 15   @ bitWidth 1 (Port D Reset bit 15)  
 

@=========================== GPIOB ===========================@
.equ GPIOB_BASE, 0x40020400 @ (General-purpose I/Os) 
    .equ GPIOB_MODER, GPIOB_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOB_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOB_OTYPER, GPIOB_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOB_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOB_GPIOB_OSPEEDR, GPIOB_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOB_PUPDR, GPIOB_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOB_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOB_IDR, GPIOB_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOB_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOB_ODR, GPIOB_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOB_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOB_BSRR, GPIOB_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOB_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOB_LCKR, GPIOB_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOB_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOB_AFRL, GPIOB_BASE + 0x20 @ (GPIO alternate function low register) 
        .equ GPIOB_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOB_AFRH, GPIOB_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOB_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOB_BRR, GPIOB_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOB_BRR_BR0, 1 << 0   @ bitWidth 1 (Port B Reset bit 0)  
        .equ GPIOB_BRR_BR1, 1 << 1   @ bitWidth 1 (Port B Reset bit 1)  
        .equ GPIOB_BRR_BR2, 1 << 2   @ bitWidth 1 (Port B Reset bit 2)  
        .equ GPIOB_BRR_BR3, 1 << 3   @ bitWidth 1 (Port B Reset bit 3)  
        .equ GPIOB_BRR_BR4, 1 << 4   @ bitWidth 1 (Port B Reset bit 4)  
        .equ GPIOB_BRR_BR5, 1 << 5   @ bitWidth 1 (Port B Reset bit 5)  
        .equ GPIOB_BRR_BR6, 1 << 6   @ bitWidth 1 (Port B Reset bit 6)  
        .equ GPIOB_BRR_BR7, 1 << 7   @ bitWidth 1 (Port B Reset bit 7)  
        .equ GPIOB_BRR_BR8, 1 << 8   @ bitWidth 1 (Port B Reset bit 8)  
        .equ GPIOB_BRR_BR9, 1 << 9   @ bitWidth 1 (Port B Reset bit 9)  
        .equ GPIOB_BRR_BR10, 1 << 10   @ bitWidth 1 (Port B Reset bit 10)  
        .equ GPIOB_BRR_BR11, 1 << 11   @ bitWidth 1 (Port B Reset bit 11)  
        .equ GPIOB_BRR_BR12, 1 << 12   @ bitWidth 1 (Port B Reset bit 12)  
        .equ GPIOB_BRR_BR13, 1 << 13   @ bitWidth 1 (Port B Reset bit 13)  
        .equ GPIOB_BRR_BR14, 1 << 14   @ bitWidth 1 (Port B Reset bit 14)  
        .equ GPIOB_BRR_BR15, 1 << 15   @ bitWidth 1 (Port B Reset bit 15)  
 

@=========================== GPIOA ===========================@
.equ GPIOA_BASE, 0x40020000 @ (General-purpose I/Os) 
    .equ GPIOA_MODER, GPIOA_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOA_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOA_OTYPER, GPIOA_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOA_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOA_GPIOB_OSPEEDR, GPIOA_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOA_PUPDR, GPIOA_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOA_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOA_IDR, GPIOA_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOA_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOA_ODR, GPIOA_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOA_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOA_BSRR, GPIOA_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOA_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOA_LCKR, GPIOA_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOA_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOA_AFRL, GPIOA_BASE + 0x20 @ (GPIO alternate function low register) 
        .equ GPIOA_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOA_AFRH, GPIOA_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOA_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOA_BRR, GPIOA_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOA_BRR_BR0, 1 << 0   @ bitWidth 1 (Port A Reset bit 0)  
        .equ GPIOA_BRR_BR1, 1 << 1   @ bitWidth 1 (Port A Reset bit 1)  
        .equ GPIOA_BRR_BR2, 1 << 2   @ bitWidth 1 (Port A Reset bit 2)  
        .equ GPIOA_BRR_BR3, 1 << 3   @ bitWidth 1 (Port A Reset bit 3)  
        .equ GPIOA_BRR_BR4, 1 << 4   @ bitWidth 1 (Port A Reset bit 4)  
        .equ GPIOA_BRR_BR5, 1 << 5   @ bitWidth 1 (Port A Reset bit 5)  
        .equ GPIOA_BRR_BR6, 1 << 6   @ bitWidth 1 (Port A Reset bit 6)  
        .equ GPIOA_BRR_BR7, 1 << 7   @ bitWidth 1 (Port A Reset bit 7)  
        .equ GPIOA_BRR_BR8, 1 << 8   @ bitWidth 1 (Port A Reset bit 8)  
        .equ GPIOA_BRR_BR9, 1 << 9   @ bitWidth 1 (Port A Reset bit 9)  
        .equ GPIOA_BRR_BR10, 1 << 10   @ bitWidth 1 (Port A Reset bit 10)  
        .equ GPIOA_BRR_BR11, 1 << 11   @ bitWidth 1 (Port A Reset bit 11)  
        .equ GPIOA_BRR_BR12, 1 << 12   @ bitWidth 1 (Port A Reset bit 12)  
        .equ GPIOA_BRR_BR13, 1 << 13   @ bitWidth 1 (Port A Reset bit 13)  
        .equ GPIOA_BRR_BR14, 1 << 14   @ bitWidth 1 (Port A Reset bit 14)  
        .equ GPIOA_BRR_BR15, 1 << 15   @ bitWidth 1 (Port A Reset bit 15)  
 

@=========================== SYSCFG ===========================@
.equ SYSCFG_BASE, 0x40013800 @ (System configuration controller) 
    .equ SYSCFG_MEMRM, SYSCFG_BASE + 0x0 @ (memory remap register) 
        .equ SYSCFG_MEMRM_MEM_MODE_Shift, 0   @ bitWidth 3 (Memory mapping selection)  
        .equ SYSCFG_MEMRM_FB_MODE, 1 << 8   @ bitWidth 1 (Flash bank mode selection)  
        .equ SYSCFG_MEMRM_SWP_FMC_Shift, 10   @ bitWidth 2 (FMC memory mapping swap)  
 
    .equ SYSCFG_PMC, SYSCFG_BASE + 0x4 @ (peripheral mode configuration register) 
        .equ SYSCFG_PMC_MII_RMII_SEL, 1 << 23   @ bitWidth 1 (Ethernet PHY interface selection)  
        .equ SYSCFG_PMC_ADC1DC2, 1 << 16   @ bitWidth 1 (ADC1DC2)  
        .equ SYSCFG_PMC_ADC2DC2, 1 << 17   @ bitWidth 1 (ADC2DC2)  
        .equ SYSCFG_PMC_ADC3DC2, 1 << 18   @ bitWidth 1 (ADC3DC2)  
 
    .equ SYSCFG_EXTICR1, SYSCFG_BASE + 0x8 @ (external interrupt configuration register 1) 
        .equ SYSCFG_EXTICR1_EXTI3_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 0 to 3)  
        .equ SYSCFG_EXTICR1_EXTI2_Shift, 8   @ bitWidth 4 (EXTI x configuration x = 0 to 3)  
        .equ SYSCFG_EXTICR1_EXTI1_Shift, 4   @ bitWidth 4 (EXTI x configuration x = 0 to 3)  
        .equ SYSCFG_EXTICR1_EXTI0_Shift, 0   @ bitWidth 4 (EXTI x configuration x = 0 to 3)  
 
    .equ SYSCFG_EXTICR2, SYSCFG_BASE + 0xC @ (external interrupt configuration register 2) 
        .equ SYSCFG_EXTICR2_EXTI7_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 4 to 7)  
        .equ SYSCFG_EXTICR2_EXTI6_Shift, 8   @ bitWidth 4 (EXTI x configuration x = 4 to 7)  
        .equ SYSCFG_EXTICR2_EXTI5_Shift, 4   @ bitWidth 4 (EXTI x configuration x = 4 to 7)  
        .equ SYSCFG_EXTICR2_EXTI4_Shift, 0   @ bitWidth 4 (EXTI x configuration x = 4 to 7)  
 
    .equ SYSCFG_EXTICR3, SYSCFG_BASE + 0x10 @ (external interrupt configuration register 3) 
        .equ SYSCFG_EXTICR3_EXTI11_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 8 to 11)  
        .equ SYSCFG_EXTICR3_EXTI10_Shift, 8   @ bitWidth 4 (EXTI10)  
        .equ SYSCFG_EXTICR3_EXTI9_Shift, 4   @ bitWidth 4 (EXTI x configuration x = 8 to 11)  
        .equ SYSCFG_EXTICR3_EXTI8_Shift, 0   @ bitWidth 4 (EXTI x configuration x = 8 to 11)  
 
    .equ SYSCFG_EXTICR4, SYSCFG_BASE + 0x14 @ (external interrupt configuration register 4) 
        .equ SYSCFG_EXTICR4_EXTI15_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 12 to 15)  
        .equ SYSCFG_EXTICR4_EXTI14_Shift, 8   @ bitWidth 4 (EXTI x configuration x = 12 to 15)  
        .equ SYSCFG_EXTICR4_EXTI13_Shift, 4   @ bitWidth 4 (EXTI x configuration x = 12 to 15)  
        .equ SYSCFG_EXTICR4_EXTI12_Shift, 0   @ bitWidth 4 (EXTI x configuration x = 12 to 15)  
 
    .equ SYSCFG_CMPCR, SYSCFG_BASE + 0x20 @ (Compensation cell control register) 
        .equ SYSCFG_CMPCR_READY, 1 << 8   @ bitWidth 1 (READY)  
        .equ SYSCFG_CMPCR_CMP_PD, 1 << 0   @ bitWidth 1 (Compensation cell power-down)  
 

@=========================== SPI1 ===========================@
.equ SPI1_BASE, 0x40013000 @ (Serial peripheral interface) 
    .equ SPI1_CR1, SPI1_BASE + 0x0 @ (control register 1) 
        .equ SPI1_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode enable)  
        .equ SPI1_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional mode)  
        .equ SPI1_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation enable)  
        .equ SPI1_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI1_CR1_CRCL, 1 << 11   @ bitWidth 1 (CRC length)  
        .equ SPI1_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI1_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI1_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI1_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI1_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI1_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI1_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI1_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI1_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI1_CR2, SPI1_BASE + 0x4 @ (control register 2) 
        .equ SPI1_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI1_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI1_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI1_CR2_NSSP, 1 << 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI1_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI1_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI1_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt enable)  
        .equ SPI1_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt enable)  
        .equ SPI1_CR2_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI1_CR2_FRXTH, 1 << 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI1_CR2_LDMA_RX, 1 << 13   @ bitWidth 1 (Last DMA transfer for reception)  
        .equ SPI1_CR2_LDMA_TX, 1 << 14   @ bitWidth 1 (Last DMA transfer for transmission)  
 
    .equ SPI1_SR, SPI1_BASE + 0x8 @ (status register) 
        .equ SPI1_SR_FRE, 1 << 8   @ bitWidth 1 (Frame format error)  
        .equ SPI1_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI1_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI1_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI1_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI1_SR_UDR, 1 << 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI1_SR_CHSIDE, 1 << 2   @ bitWidth 1 (Channel side)  
        .equ SPI1_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI1_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI1_SR_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI1_SR_FTLVL_Shift, 11   @ bitWidth 2 (FIFO Transmission Level)  
 
    .equ SPI1_DR, SPI1_BASE + 0xC @ (data register) 
        .equ SPI1_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI1_CRCPR, SPI1_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI1_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI1_RXCRCR, SPI1_BASE + 0x14 @ (RX CRC register) 
        .equ SPI1_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI1_TXCRCR, SPI1_BASE + 0x18 @ (TX CRC register) 
        .equ SPI1_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI1_I2SCFGR, SPI1_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI1_I2SCFGR_I2SMOD, 1 << 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI1_I2SCFGR_I2SE, 1 << 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI1_I2SCFGR_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI1_I2SCFGR_PCMSYNC, 1 << 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI1_I2SCFGR_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI1_I2SCFGR_CKPOL, 1 << 3   @ bitWidth 1 (Steady state clock polarity)  
        .equ SPI1_I2SCFGR_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be transferred)  
        .equ SPI1_I2SCFGR_CHLEN, 1 << 0   @ bitWidth 1 (Channel length number of bits per audio channel)  
        .equ SPI1_I2SCFGR_ASTRTEN, 1 << 12   @ bitWidth 1 (Asynchronous start enable)  
 
    .equ SPI1_I2SPR, SPI1_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI1_I2SPR_MCKOE, 1 << 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI1_I2SPR_ODD, 1 << 8   @ bitWidth 1 (Odd factor for the prescaler)  
        .equ SPI1_I2SPR_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI3 ===========================@
.equ SPI3_BASE, 0x40003C00 @ (Serial peripheral interface) 
    .equ SPI3_CR1, SPI3_BASE + 0x0 @ (control register 1) 
        .equ SPI3_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode enable)  
        .equ SPI3_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional mode)  
        .equ SPI3_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation enable)  
        .equ SPI3_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI3_CR1_CRCL, 1 << 11   @ bitWidth 1 (CRC length)  
        .equ SPI3_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI3_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI3_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI3_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI3_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI3_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI3_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI3_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI3_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI3_CR2, SPI3_BASE + 0x4 @ (control register 2) 
        .equ SPI3_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI3_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI3_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI3_CR2_NSSP, 1 << 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI3_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI3_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI3_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt enable)  
        .equ SPI3_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt enable)  
        .equ SPI3_CR2_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI3_CR2_FRXTH, 1 << 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI3_CR2_LDMA_RX, 1 << 13   @ bitWidth 1 (Last DMA transfer for reception)  
        .equ SPI3_CR2_LDMA_TX, 1 << 14   @ bitWidth 1 (Last DMA transfer for transmission)  
 
    .equ SPI3_SR, SPI3_BASE + 0x8 @ (status register) 
        .equ SPI3_SR_FRE, 1 << 8   @ bitWidth 1 (Frame format error)  
        .equ SPI3_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI3_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI3_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI3_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI3_SR_UDR, 1 << 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI3_SR_CHSIDE, 1 << 2   @ bitWidth 1 (Channel side)  
        .equ SPI3_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI3_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI3_SR_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI3_SR_FTLVL_Shift, 11   @ bitWidth 2 (FIFO Transmission Level)  
 
    .equ SPI3_DR, SPI3_BASE + 0xC @ (data register) 
        .equ SPI3_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI3_CRCPR, SPI3_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI3_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI3_RXCRCR, SPI3_BASE + 0x14 @ (RX CRC register) 
        .equ SPI3_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI3_TXCRCR, SPI3_BASE + 0x18 @ (TX CRC register) 
        .equ SPI3_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI3_I2SCFGR, SPI3_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI3_I2SCFGR_I2SMOD, 1 << 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI3_I2SCFGR_I2SE, 1 << 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI3_I2SCFGR_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI3_I2SCFGR_PCMSYNC, 1 << 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI3_I2SCFGR_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI3_I2SCFGR_CKPOL, 1 << 3   @ bitWidth 1 (Steady state clock polarity)  
        .equ SPI3_I2SCFGR_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be transferred)  
        .equ SPI3_I2SCFGR_CHLEN, 1 << 0   @ bitWidth 1 (Channel length number of bits per audio channel)  
        .equ SPI3_I2SCFGR_ASTRTEN, 1 << 12   @ bitWidth 1 (Asynchronous start enable)  
 
    .equ SPI3_I2SPR, SPI3_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI3_I2SPR_MCKOE, 1 << 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI3_I2SPR_ODD, 1 << 8   @ bitWidth 1 (Odd factor for the prescaler)  
        .equ SPI3_I2SPR_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI4 ===========================@
.equ SPI4_BASE, 0x40013400 @ (Serial peripheral interface) 
    .equ SPI4_CR1, SPI4_BASE + 0x0 @ (control register 1) 
        .equ SPI4_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode enable)  
        .equ SPI4_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional mode)  
        .equ SPI4_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation enable)  
        .equ SPI4_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI4_CR1_CRCL, 1 << 11   @ bitWidth 1 (CRC length)  
        .equ SPI4_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI4_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI4_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI4_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI4_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI4_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI4_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI4_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI4_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI4_CR2, SPI4_BASE + 0x4 @ (control register 2) 
        .equ SPI4_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI4_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI4_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI4_CR2_NSSP, 1 << 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI4_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI4_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI4_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt enable)  
        .equ SPI4_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt enable)  
        .equ SPI4_CR2_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI4_CR2_FRXTH, 1 << 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI4_CR2_LDMA_RX, 1 << 13   @ bitWidth 1 (Last DMA transfer for reception)  
        .equ SPI4_CR2_LDMA_TX, 1 << 14   @ bitWidth 1 (Last DMA transfer for transmission)  
 
    .equ SPI4_SR, SPI4_BASE + 0x8 @ (status register) 
        .equ SPI4_SR_FRE, 1 << 8   @ bitWidth 1 (Frame format error)  
        .equ SPI4_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI4_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI4_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI4_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI4_SR_UDR, 1 << 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI4_SR_CHSIDE, 1 << 2   @ bitWidth 1 (Channel side)  
        .equ SPI4_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI4_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI4_SR_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI4_SR_FTLVL_Shift, 11   @ bitWidth 2 (FIFO Transmission Level)  
 
    .equ SPI4_DR, SPI4_BASE + 0xC @ (data register) 
        .equ SPI4_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI4_CRCPR, SPI4_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI4_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI4_RXCRCR, SPI4_BASE + 0x14 @ (RX CRC register) 
        .equ SPI4_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI4_TXCRCR, SPI4_BASE + 0x18 @ (TX CRC register) 
        .equ SPI4_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI4_I2SCFGR, SPI4_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI4_I2SCFGR_I2SMOD, 1 << 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI4_I2SCFGR_I2SE, 1 << 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI4_I2SCFGR_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI4_I2SCFGR_PCMSYNC, 1 << 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI4_I2SCFGR_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI4_I2SCFGR_CKPOL, 1 << 3   @ bitWidth 1 (Steady state clock polarity)  
        .equ SPI4_I2SCFGR_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be transferred)  
        .equ SPI4_I2SCFGR_CHLEN, 1 << 0   @ bitWidth 1 (Channel length number of bits per audio channel)  
        .equ SPI4_I2SCFGR_ASTRTEN, 1 << 12   @ bitWidth 1 (Asynchronous start enable)  
 
    .equ SPI4_I2SPR, SPI4_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI4_I2SPR_MCKOE, 1 << 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI4_I2SPR_ODD, 1 << 8   @ bitWidth 1 (Odd factor for the prescaler)  
        .equ SPI4_I2SPR_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI5 ===========================@
.equ SPI5_BASE, 0x40015000 @ (Serial peripheral interface) 
    .equ SPI5_CR1, SPI5_BASE + 0x0 @ (control register 1) 
        .equ SPI5_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode enable)  
        .equ SPI5_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional mode)  
        .equ SPI5_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation enable)  
        .equ SPI5_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI5_CR1_CRCL, 1 << 11   @ bitWidth 1 (CRC length)  
        .equ SPI5_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI5_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI5_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI5_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI5_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI5_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI5_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI5_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI5_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI5_CR2, SPI5_BASE + 0x4 @ (control register 2) 
        .equ SPI5_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI5_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI5_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI5_CR2_NSSP, 1 << 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI5_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI5_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI5_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt enable)  
        .equ SPI5_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt enable)  
        .equ SPI5_CR2_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI5_CR2_FRXTH, 1 << 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI5_CR2_LDMA_RX, 1 << 13   @ bitWidth 1 (Last DMA transfer for reception)  
        .equ SPI5_CR2_LDMA_TX, 1 << 14   @ bitWidth 1 (Last DMA transfer for transmission)  
 
    .equ SPI5_SR, SPI5_BASE + 0x8 @ (status register) 
        .equ SPI5_SR_FRE, 1 << 8   @ bitWidth 1 (Frame format error)  
        .equ SPI5_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI5_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI5_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI5_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI5_SR_UDR, 1 << 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI5_SR_CHSIDE, 1 << 2   @ bitWidth 1 (Channel side)  
        .equ SPI5_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI5_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI5_SR_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI5_SR_FTLVL_Shift, 11   @ bitWidth 2 (FIFO Transmission Level)  
 
    .equ SPI5_DR, SPI5_BASE + 0xC @ (data register) 
        .equ SPI5_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI5_CRCPR, SPI5_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI5_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI5_RXCRCR, SPI5_BASE + 0x14 @ (RX CRC register) 
        .equ SPI5_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI5_TXCRCR, SPI5_BASE + 0x18 @ (TX CRC register) 
        .equ SPI5_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI5_I2SCFGR, SPI5_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI5_I2SCFGR_I2SMOD, 1 << 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI5_I2SCFGR_I2SE, 1 << 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI5_I2SCFGR_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI5_I2SCFGR_PCMSYNC, 1 << 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI5_I2SCFGR_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI5_I2SCFGR_CKPOL, 1 << 3   @ bitWidth 1 (Steady state clock polarity)  
        .equ SPI5_I2SCFGR_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be transferred)  
        .equ SPI5_I2SCFGR_CHLEN, 1 << 0   @ bitWidth 1 (Channel length number of bits per audio channel)  
        .equ SPI5_I2SCFGR_ASTRTEN, 1 << 12   @ bitWidth 1 (Asynchronous start enable)  
 
    .equ SPI5_I2SPR, SPI5_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI5_I2SPR_MCKOE, 1 << 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI5_I2SPR_ODD, 1 << 8   @ bitWidth 1 (Odd factor for the prescaler)  
        .equ SPI5_I2SPR_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI6 ===========================@
.equ SPI6_BASE, 0x40015400 @ (Serial peripheral interface) 
    .equ SPI6_CR1, SPI6_BASE + 0x0 @ (control register 1) 
        .equ SPI6_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode enable)  
        .equ SPI6_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional mode)  
        .equ SPI6_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation enable)  
        .equ SPI6_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI6_CR1_CRCL, 1 << 11   @ bitWidth 1 (CRC length)  
        .equ SPI6_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI6_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI6_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI6_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI6_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI6_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI6_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI6_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI6_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI6_CR2, SPI6_BASE + 0x4 @ (control register 2) 
        .equ SPI6_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI6_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI6_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI6_CR2_NSSP, 1 << 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI6_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI6_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI6_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt enable)  
        .equ SPI6_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt enable)  
        .equ SPI6_CR2_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI6_CR2_FRXTH, 1 << 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI6_CR2_LDMA_RX, 1 << 13   @ bitWidth 1 (Last DMA transfer for reception)  
        .equ SPI6_CR2_LDMA_TX, 1 << 14   @ bitWidth 1 (Last DMA transfer for transmission)  
 
    .equ SPI6_SR, SPI6_BASE + 0x8 @ (status register) 
        .equ SPI6_SR_FRE, 1 << 8   @ bitWidth 1 (Frame format error)  
        .equ SPI6_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI6_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI6_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI6_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI6_SR_UDR, 1 << 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI6_SR_CHSIDE, 1 << 2   @ bitWidth 1 (Channel side)  
        .equ SPI6_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI6_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI6_SR_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI6_SR_FTLVL_Shift, 11   @ bitWidth 2 (FIFO Transmission Level)  
 
    .equ SPI6_DR, SPI6_BASE + 0xC @ (data register) 
        .equ SPI6_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI6_CRCPR, SPI6_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI6_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI6_RXCRCR, SPI6_BASE + 0x14 @ (RX CRC register) 
        .equ SPI6_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI6_TXCRCR, SPI6_BASE + 0x18 @ (TX CRC register) 
        .equ SPI6_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI6_I2SCFGR, SPI6_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI6_I2SCFGR_I2SMOD, 1 << 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI6_I2SCFGR_I2SE, 1 << 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI6_I2SCFGR_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI6_I2SCFGR_PCMSYNC, 1 << 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI6_I2SCFGR_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI6_I2SCFGR_CKPOL, 1 << 3   @ bitWidth 1 (Steady state clock polarity)  
        .equ SPI6_I2SCFGR_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be transferred)  
        .equ SPI6_I2SCFGR_CHLEN, 1 << 0   @ bitWidth 1 (Channel length number of bits per audio channel)  
        .equ SPI6_I2SCFGR_ASTRTEN, 1 << 12   @ bitWidth 1 (Asynchronous start enable)  
 
    .equ SPI6_I2SPR, SPI6_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI6_I2SPR_MCKOE, 1 << 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI6_I2SPR_ODD, 1 << 8   @ bitWidth 1 (Odd factor for the prescaler)  
        .equ SPI6_I2SPR_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI2 ===========================@
.equ SPI2_BASE, 0x40003800 @ (Serial peripheral interface) 
    .equ SPI2_CR1, SPI2_BASE + 0x0 @ (control register 1) 
        .equ SPI2_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode enable)  
        .equ SPI2_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional mode)  
        .equ SPI2_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation enable)  
        .equ SPI2_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI2_CR1_CRCL, 1 << 11   @ bitWidth 1 (CRC length)  
        .equ SPI2_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI2_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI2_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI2_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI2_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI2_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI2_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI2_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI2_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI2_CR2, SPI2_BASE + 0x4 @ (control register 2) 
        .equ SPI2_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI2_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI2_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI2_CR2_NSSP, 1 << 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI2_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI2_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI2_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt enable)  
        .equ SPI2_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt enable)  
        .equ SPI2_CR2_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI2_CR2_FRXTH, 1 << 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI2_CR2_LDMA_RX, 1 << 13   @ bitWidth 1 (Last DMA transfer for reception)  
        .equ SPI2_CR2_LDMA_TX, 1 << 14   @ bitWidth 1 (Last DMA transfer for transmission)  
 
    .equ SPI2_SR, SPI2_BASE + 0x8 @ (status register) 
        .equ SPI2_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI2_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI2_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI2_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI2_SR_UDR, 1 << 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI2_SR_CHSIDE, 1 << 2   @ bitWidth 1 (Channel side)  
        .equ SPI2_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI2_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI2_SR_FRE, 1 << 8   @ bitWidth 1 (Frame format error)  
        .equ SPI2_SR_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI2_SR_FTLVL_Shift, 11   @ bitWidth 2 (FIFO Transmission Level)  
 
    .equ SPI2_DR, SPI2_BASE + 0xC @ (data register) 
        .equ SPI2_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI2_CRCPR, SPI2_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI2_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI2_RXCRCR, SPI2_BASE + 0x14 @ (RX CRC register) 
        .equ SPI2_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI2_TXCRCR, SPI2_BASE + 0x18 @ (TX CRC register) 
        .equ SPI2_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI2_I2SCFGR, SPI2_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI2_I2SCFGR_I2SMOD, 1 << 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI2_I2SCFGR_I2SE, 1 << 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI2_I2SCFGR_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI2_I2SCFGR_PCMSYNC, 1 << 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI2_I2SCFGR_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI2_I2SCFGR_CKPOL, 1 << 3   @ bitWidth 1 (Steady state clock polarity)  
        .equ SPI2_I2SCFGR_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be transferred)  
        .equ SPI2_I2SCFGR_CHLEN, 1 << 0   @ bitWidth 1 (Channel length number of bits per audio channel)  
        .equ SPI2_I2SCFGR_ASTRTEN, 1 << 12   @ bitWidth 1 (Asynchronous start enable)  
 
    .equ SPI2_I2SPR, SPI2_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI2_I2SPR_MCKOE, 1 << 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI2_I2SPR_ODD, 1 << 8   @ bitWidth 1 (Odd factor for the prescaler)  
        .equ SPI2_I2SPR_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== ADC1 ===========================@
.equ ADC1_BASE, 0x40012000 @ (Analog-to-digital converter) 
    .equ ADC1_SR, ADC1_BASE + 0x0 @ (status register) 
        .equ ADC1_SR_OVR, 1 << 5   @ bitWidth 1 (Overrun)  
        .equ ADC1_SR_STRT, 1 << 4   @ bitWidth 1 (Regular channel start flag)  
        .equ ADC1_SR_JSTRT, 1 << 3   @ bitWidth 1 (Injected channel start flag)  
        .equ ADC1_SR_JEOC, 1 << 2   @ bitWidth 1 (Injected channel end of conversion)  
        .equ ADC1_SR_EOC, 1 << 1   @ bitWidth 1 (Regular channel end of conversion)  
        .equ ADC1_SR_AWD, 1 << 0   @ bitWidth 1 (Analog watchdog flag)  
 
    .equ ADC1_CR1, ADC1_BASE + 0x4 @ (control register 1) 
        .equ ADC1_CR1_OVRIE, 1 << 26   @ bitWidth 1 (Overrun interrupt enable)  
        .equ ADC1_CR1_RES_Shift, 24   @ bitWidth 2 (Resolution)  
        .equ ADC1_CR1_AWDEN, 1 << 23   @ bitWidth 1 (Analog watchdog enable on regular channels)  
        .equ ADC1_CR1_JAWDEN, 1 << 22   @ bitWidth 1 (Analog watchdog enable on injected channels)  
        .equ ADC1_CR1_DISCNUM_Shift, 13   @ bitWidth 3 (Discontinuous mode channel count)  
        .equ ADC1_CR1_JDISCEN, 1 << 12   @ bitWidth 1 (Discontinuous mode on injected channels)  
        .equ ADC1_CR1_DISCEN, 1 << 11   @ bitWidth 1 (Discontinuous mode on regular channels)  
        .equ ADC1_CR1_JAUTO, 1 << 10   @ bitWidth 1 (Automatic injected group conversion)  
        .equ ADC1_CR1_AWDSGL, 1 << 9   @ bitWidth 1 (Enable the watchdog on a single channel in scan mode)  
        .equ ADC1_CR1_SCAN, 1 << 8   @ bitWidth 1 (Scan mode)  
        .equ ADC1_CR1_JEOCIE, 1 << 7   @ bitWidth 1 (Interrupt enable for injected channels)  
        .equ ADC1_CR1_AWDIE, 1 << 6   @ bitWidth 1 (Analog watchdog interrupt enable)  
        .equ ADC1_CR1_EOCIE, 1 << 5   @ bitWidth 1 (Interrupt enable for EOC)  
        .equ ADC1_CR1_AWDCH_Shift, 0   @ bitWidth 5 (Analog watchdog channel select bits)  
 
    .equ ADC1_CR2, ADC1_BASE + 0x8 @ (control register 2) 
        .equ ADC1_CR2_SWSTART, 1 << 30   @ bitWidth 1 (Start conversion of regular channels)  
        .equ ADC1_CR2_EXTEN_Shift, 28   @ bitWidth 2 (External trigger enable for regular channels)  
        .equ ADC1_CR2_EXTSEL_Shift, 24   @ bitWidth 4 (External event select for regular group)  
        .equ ADC1_CR2_JSWSTART, 1 << 22   @ bitWidth 1 (Start conversion of injected channels)  
        .equ ADC1_CR2_JEXTEN_Shift, 20   @ bitWidth 2 (External trigger enable for injected channels)  
        .equ ADC1_CR2_JEXTSEL_Shift, 16   @ bitWidth 4 (External event select for injected group)  
        .equ ADC1_CR2_ALIGN, 1 << 11   @ bitWidth 1 (Data alignment)  
        .equ ADC1_CR2_EOCS, 1 << 10   @ bitWidth 1 (End of conversion selection)  
        .equ ADC1_CR2_DDS, 1 << 9   @ bitWidth 1 (DMA disable selection for single ADC mode)  
        .equ ADC1_CR2_DMA, 1 << 8   @ bitWidth 1 (Direct memory access mode for single ADC mode)  
        .equ ADC1_CR2_CONT, 1 << 1   @ bitWidth 1 (Continuous conversion)  
        .equ ADC1_CR2_ADON, 1 << 0   @ bitWidth 1 (A/D Converter ON / OFF)  
 
    .equ ADC1_SMPR1, ADC1_BASE + 0xC @ (sample time register 1) 
        .equ ADC1_SMPR1_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC1_SMPR2, ADC1_BASE + 0x10 @ (sample time register 2) 
        .equ ADC1_SMPR2_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC1_JOFR1, ADC1_BASE + 0x14 @ (injected channel data offset register x) 
        .equ ADC1_JOFR1_JOFFSET1_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC1_JOFR2, ADC1_BASE + 0x18 @ (injected channel data offset register x) 
        .equ ADC1_JOFR2_JOFFSET2_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC1_JOFR3, ADC1_BASE + 0x1C @ (injected channel data offset register x) 
        .equ ADC1_JOFR3_JOFFSET3_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC1_JOFR4, ADC1_BASE + 0x20 @ (injected channel data offset register x) 
        .equ ADC1_JOFR4_JOFFSET4_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC1_HTR, ADC1_BASE + 0x24 @ (watchdog higher threshold register) 
        .equ ADC1_HTR_HT_Shift, 0   @ bitWidth 12 (Analog watchdog higher threshold)  
 
    .equ ADC1_LTR, ADC1_BASE + 0x28 @ (watchdog lower threshold register) 
        .equ ADC1_LTR_LT_Shift, 0   @ bitWidth 12 (Analog watchdog lower threshold)  
 
    .equ ADC1_SQR1, ADC1_BASE + 0x2C @ (regular sequence register 1) 
        .equ ADC1_SQR1_L_Shift, 20   @ bitWidth 4 (Regular channel sequence length)  
        .equ ADC1_SQR1_SQ16_Shift, 15   @ bitWidth 5 (16th conversion in regular sequence)  
        .equ ADC1_SQR1_SQ15_Shift, 10   @ bitWidth 5 (15th conversion in regular sequence)  
        .equ ADC1_SQR1_SQ14_Shift, 5   @ bitWidth 5 (14th conversion in regular sequence)  
        .equ ADC1_SQR1_SQ13_Shift, 0   @ bitWidth 5 (13th conversion in regular sequence)  
 
    .equ ADC1_SQR2, ADC1_BASE + 0x30 @ (regular sequence register 2) 
        .equ ADC1_SQR2_SQ12_Shift, 25   @ bitWidth 5 (12th conversion in regular sequence)  
        .equ ADC1_SQR2_SQ11_Shift, 20   @ bitWidth 5 (11th conversion in regular sequence)  
        .equ ADC1_SQR2_SQ10_Shift, 15   @ bitWidth 5 (10th conversion in regular sequence)  
        .equ ADC1_SQR2_SQ9_Shift, 10   @ bitWidth 5 (9th conversion in regular sequence)  
        .equ ADC1_SQR2_SQ8_Shift, 5   @ bitWidth 5 (8th conversion in regular sequence)  
        .equ ADC1_SQR2_SQ7_Shift, 0   @ bitWidth 5 (7th conversion in regular sequence)  
 
    .equ ADC1_SQR3, ADC1_BASE + 0x34 @ (regular sequence register 3) 
        .equ ADC1_SQR3_SQ6_Shift, 25   @ bitWidth 5 (6th conversion in regular sequence)  
        .equ ADC1_SQR3_SQ5_Shift, 20   @ bitWidth 5 (5th conversion in regular sequence)  
        .equ ADC1_SQR3_SQ4_Shift, 15   @ bitWidth 5 (4th conversion in regular sequence)  
        .equ ADC1_SQR3_SQ3_Shift, 10   @ bitWidth 5 (3rd conversion in regular sequence)  
        .equ ADC1_SQR3_SQ2_Shift, 5   @ bitWidth 5 (2nd conversion in regular sequence)  
        .equ ADC1_SQR3_SQ1_Shift, 0   @ bitWidth 5 (1st conversion in regular sequence)  
 
    .equ ADC1_JSQR, ADC1_BASE + 0x38 @ (injected sequence register) 
        .equ ADC1_JSQR_JL_Shift, 20   @ bitWidth 2 (Injected sequence length)  
        .equ ADC1_JSQR_JSQ4_Shift, 15   @ bitWidth 5 (4th conversion in injected sequence)  
        .equ ADC1_JSQR_JSQ3_Shift, 10   @ bitWidth 5 (3rd conversion in injected sequence)  
        .equ ADC1_JSQR_JSQ2_Shift, 5   @ bitWidth 5 (2nd conversion in injected sequence)  
        .equ ADC1_JSQR_JSQ1_Shift, 0   @ bitWidth 5 (1st conversion in injected sequence)  
 
    .equ ADC1_JDR1, ADC1_BASE + 0x3C @ (injected data register x) 
        .equ ADC1_JDR1_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_JDR2, ADC1_BASE + 0x40 @ (injected data register x) 
        .equ ADC1_JDR2_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_JDR3, ADC1_BASE + 0x44 @ (injected data register x) 
        .equ ADC1_JDR3_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_JDR4, ADC1_BASE + 0x48 @ (injected data register x) 
        .equ ADC1_JDR4_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_DR, ADC1_BASE + 0x4C @ (regular data register) 
        .equ ADC1_DR_DATA_Shift, 0   @ bitWidth 16 (Regular data)  
 

@=========================== ADC2 ===========================@
.equ ADC2_BASE, 0x40012100 @ (Analog-to-digital converter) 
    .equ ADC2_SR, ADC2_BASE + 0x0 @ (status register) 
        .equ ADC2_SR_OVR, 1 << 5   @ bitWidth 1 (Overrun)  
        .equ ADC2_SR_STRT, 1 << 4   @ bitWidth 1 (Regular channel start flag)  
        .equ ADC2_SR_JSTRT, 1 << 3   @ bitWidth 1 (Injected channel start flag)  
        .equ ADC2_SR_JEOC, 1 << 2   @ bitWidth 1 (Injected channel end of conversion)  
        .equ ADC2_SR_EOC, 1 << 1   @ bitWidth 1 (Regular channel end of conversion)  
        .equ ADC2_SR_AWD, 1 << 0   @ bitWidth 1 (Analog watchdog flag)  
 
    .equ ADC2_CR1, ADC2_BASE + 0x4 @ (control register 1) 
        .equ ADC2_CR1_OVRIE, 1 << 26   @ bitWidth 1 (Overrun interrupt enable)  
        .equ ADC2_CR1_RES_Shift, 24   @ bitWidth 2 (Resolution)  
        .equ ADC2_CR1_AWDEN, 1 << 23   @ bitWidth 1 (Analog watchdog enable on regular channels)  
        .equ ADC2_CR1_JAWDEN, 1 << 22   @ bitWidth 1 (Analog watchdog enable on injected channels)  
        .equ ADC2_CR1_DISCNUM_Shift, 13   @ bitWidth 3 (Discontinuous mode channel count)  
        .equ ADC2_CR1_JDISCEN, 1 << 12   @ bitWidth 1 (Discontinuous mode on injected channels)  
        .equ ADC2_CR1_DISCEN, 1 << 11   @ bitWidth 1 (Discontinuous mode on regular channels)  
        .equ ADC2_CR1_JAUTO, 1 << 10   @ bitWidth 1 (Automatic injected group conversion)  
        .equ ADC2_CR1_AWDSGL, 1 << 9   @ bitWidth 1 (Enable the watchdog on a single channel in scan mode)  
        .equ ADC2_CR1_SCAN, 1 << 8   @ bitWidth 1 (Scan mode)  
        .equ ADC2_CR1_JEOCIE, 1 << 7   @ bitWidth 1 (Interrupt enable for injected channels)  
        .equ ADC2_CR1_AWDIE, 1 << 6   @ bitWidth 1 (Analog watchdog interrupt enable)  
        .equ ADC2_CR1_EOCIE, 1 << 5   @ bitWidth 1 (Interrupt enable for EOC)  
        .equ ADC2_CR1_AWDCH_Shift, 0   @ bitWidth 5 (Analog watchdog channel select bits)  
 
    .equ ADC2_CR2, ADC2_BASE + 0x8 @ (control register 2) 
        .equ ADC2_CR2_SWSTART, 1 << 30   @ bitWidth 1 (Start conversion of regular channels)  
        .equ ADC2_CR2_EXTEN_Shift, 28   @ bitWidth 2 (External trigger enable for regular channels)  
        .equ ADC2_CR2_EXTSEL_Shift, 24   @ bitWidth 4 (External event select for regular group)  
        .equ ADC2_CR2_JSWSTART, 1 << 22   @ bitWidth 1 (Start conversion of injected channels)  
        .equ ADC2_CR2_JEXTEN_Shift, 20   @ bitWidth 2 (External trigger enable for injected channels)  
        .equ ADC2_CR2_JEXTSEL_Shift, 16   @ bitWidth 4 (External event select for injected group)  
        .equ ADC2_CR2_ALIGN, 1 << 11   @ bitWidth 1 (Data alignment)  
        .equ ADC2_CR2_EOCS, 1 << 10   @ bitWidth 1 (End of conversion selection)  
        .equ ADC2_CR2_DDS, 1 << 9   @ bitWidth 1 (DMA disable selection for single ADC mode)  
        .equ ADC2_CR2_DMA, 1 << 8   @ bitWidth 1 (Direct memory access mode for single ADC mode)  
        .equ ADC2_CR2_CONT, 1 << 1   @ bitWidth 1 (Continuous conversion)  
        .equ ADC2_CR2_ADON, 1 << 0   @ bitWidth 1 (A/D Converter ON / OFF)  
 
    .equ ADC2_SMPR1, ADC2_BASE + 0xC @ (sample time register 1) 
        .equ ADC2_SMPR1_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC2_SMPR2, ADC2_BASE + 0x10 @ (sample time register 2) 
        .equ ADC2_SMPR2_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC2_JOFR1, ADC2_BASE + 0x14 @ (injected channel data offset register x) 
        .equ ADC2_JOFR1_JOFFSET1_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC2_JOFR2, ADC2_BASE + 0x18 @ (injected channel data offset register x) 
        .equ ADC2_JOFR2_JOFFSET2_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC2_JOFR3, ADC2_BASE + 0x1C @ (injected channel data offset register x) 
        .equ ADC2_JOFR3_JOFFSET3_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC2_JOFR4, ADC2_BASE + 0x20 @ (injected channel data offset register x) 
        .equ ADC2_JOFR4_JOFFSET4_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC2_HTR, ADC2_BASE + 0x24 @ (watchdog higher threshold register) 
        .equ ADC2_HTR_HT_Shift, 0   @ bitWidth 12 (Analog watchdog higher threshold)  
 
    .equ ADC2_LTR, ADC2_BASE + 0x28 @ (watchdog lower threshold register) 
        .equ ADC2_LTR_LT_Shift, 0   @ bitWidth 12 (Analog watchdog lower threshold)  
 
    .equ ADC2_SQR1, ADC2_BASE + 0x2C @ (regular sequence register 1) 
        .equ ADC2_SQR1_L_Shift, 20   @ bitWidth 4 (Regular channel sequence length)  
        .equ ADC2_SQR1_SQ16_Shift, 15   @ bitWidth 5 (16th conversion in regular sequence)  
        .equ ADC2_SQR1_SQ15_Shift, 10   @ bitWidth 5 (15th conversion in regular sequence)  
        .equ ADC2_SQR1_SQ14_Shift, 5   @ bitWidth 5 (14th conversion in regular sequence)  
        .equ ADC2_SQR1_SQ13_Shift, 0   @ bitWidth 5 (13th conversion in regular sequence)  
 
    .equ ADC2_SQR2, ADC2_BASE + 0x30 @ (regular sequence register 2) 
        .equ ADC2_SQR2_SQ12_Shift, 25   @ bitWidth 5 (12th conversion in regular sequence)  
        .equ ADC2_SQR2_SQ11_Shift, 20   @ bitWidth 5 (11th conversion in regular sequence)  
        .equ ADC2_SQR2_SQ10_Shift, 15   @ bitWidth 5 (10th conversion in regular sequence)  
        .equ ADC2_SQR2_SQ9_Shift, 10   @ bitWidth 5 (9th conversion in regular sequence)  
        .equ ADC2_SQR2_SQ8_Shift, 5   @ bitWidth 5 (8th conversion in regular sequence)  
        .equ ADC2_SQR2_SQ7_Shift, 0   @ bitWidth 5 (7th conversion in regular sequence)  
 
    .equ ADC2_SQR3, ADC2_BASE + 0x34 @ (regular sequence register 3) 
        .equ ADC2_SQR3_SQ6_Shift, 25   @ bitWidth 5 (6th conversion in regular sequence)  
        .equ ADC2_SQR3_SQ5_Shift, 20   @ bitWidth 5 (5th conversion in regular sequence)  
        .equ ADC2_SQR3_SQ4_Shift, 15   @ bitWidth 5 (4th conversion in regular sequence)  
        .equ ADC2_SQR3_SQ3_Shift, 10   @ bitWidth 5 (3rd conversion in regular sequence)  
        .equ ADC2_SQR3_SQ2_Shift, 5   @ bitWidth 5 (2nd conversion in regular sequence)  
        .equ ADC2_SQR3_SQ1_Shift, 0   @ bitWidth 5 (1st conversion in regular sequence)  
 
    .equ ADC2_JSQR, ADC2_BASE + 0x38 @ (injected sequence register) 
        .equ ADC2_JSQR_JL_Shift, 20   @ bitWidth 2 (Injected sequence length)  
        .equ ADC2_JSQR_JSQ4_Shift, 15   @ bitWidth 5 (4th conversion in injected sequence)  
        .equ ADC2_JSQR_JSQ3_Shift, 10   @ bitWidth 5 (3rd conversion in injected sequence)  
        .equ ADC2_JSQR_JSQ2_Shift, 5   @ bitWidth 5 (2nd conversion in injected sequence)  
        .equ ADC2_JSQR_JSQ1_Shift, 0   @ bitWidth 5 (1st conversion in injected sequence)  
 
    .equ ADC2_JDR1, ADC2_BASE + 0x3C @ (injected data register x) 
        .equ ADC2_JDR1_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_JDR2, ADC2_BASE + 0x40 @ (injected data register x) 
        .equ ADC2_JDR2_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_JDR3, ADC2_BASE + 0x44 @ (injected data register x) 
        .equ ADC2_JDR3_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_JDR4, ADC2_BASE + 0x48 @ (injected data register x) 
        .equ ADC2_JDR4_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_DR, ADC2_BASE + 0x4C @ (regular data register) 
        .equ ADC2_DR_DATA_Shift, 0   @ bitWidth 16 (Regular data)  
 

@=========================== ADC3 ===========================@
.equ ADC3_BASE, 0x40012200 @ (Analog-to-digital converter) 
    .equ ADC3_SR, ADC3_BASE + 0x0 @ (status register) 
        .equ ADC3_SR_OVR, 1 << 5   @ bitWidth 1 (Overrun)  
        .equ ADC3_SR_STRT, 1 << 4   @ bitWidth 1 (Regular channel start flag)  
        .equ ADC3_SR_JSTRT, 1 << 3   @ bitWidth 1 (Injected channel start flag)  
        .equ ADC3_SR_JEOC, 1 << 2   @ bitWidth 1 (Injected channel end of conversion)  
        .equ ADC3_SR_EOC, 1 << 1   @ bitWidth 1 (Regular channel end of conversion)  
        .equ ADC3_SR_AWD, 1 << 0   @ bitWidth 1 (Analog watchdog flag)  
 
    .equ ADC3_CR1, ADC3_BASE + 0x4 @ (control register 1) 
        .equ ADC3_CR1_OVRIE, 1 << 26   @ bitWidth 1 (Overrun interrupt enable)  
        .equ ADC3_CR1_RES_Shift, 24   @ bitWidth 2 (Resolution)  
        .equ ADC3_CR1_AWDEN, 1 << 23   @ bitWidth 1 (Analog watchdog enable on regular channels)  
        .equ ADC3_CR1_JAWDEN, 1 << 22   @ bitWidth 1 (Analog watchdog enable on injected channels)  
        .equ ADC3_CR1_DISCNUM_Shift, 13   @ bitWidth 3 (Discontinuous mode channel count)  
        .equ ADC3_CR1_JDISCEN, 1 << 12   @ bitWidth 1 (Discontinuous mode on injected channels)  
        .equ ADC3_CR1_DISCEN, 1 << 11   @ bitWidth 1 (Discontinuous mode on regular channels)  
        .equ ADC3_CR1_JAUTO, 1 << 10   @ bitWidth 1 (Automatic injected group conversion)  
        .equ ADC3_CR1_AWDSGL, 1 << 9   @ bitWidth 1 (Enable the watchdog on a single channel in scan mode)  
        .equ ADC3_CR1_SCAN, 1 << 8   @ bitWidth 1 (Scan mode)  
        .equ ADC3_CR1_JEOCIE, 1 << 7   @ bitWidth 1 (Interrupt enable for injected channels)  
        .equ ADC3_CR1_AWDIE, 1 << 6   @ bitWidth 1 (Analog watchdog interrupt enable)  
        .equ ADC3_CR1_EOCIE, 1 << 5   @ bitWidth 1 (Interrupt enable for EOC)  
        .equ ADC3_CR1_AWDCH_Shift, 0   @ bitWidth 5 (Analog watchdog channel select bits)  
 
    .equ ADC3_CR2, ADC3_BASE + 0x8 @ (control register 2) 
        .equ ADC3_CR2_SWSTART, 1 << 30   @ bitWidth 1 (Start conversion of regular channels)  
        .equ ADC3_CR2_EXTEN_Shift, 28   @ bitWidth 2 (External trigger enable for regular channels)  
        .equ ADC3_CR2_EXTSEL_Shift, 24   @ bitWidth 4 (External event select for regular group)  
        .equ ADC3_CR2_JSWSTART, 1 << 22   @ bitWidth 1 (Start conversion of injected channels)  
        .equ ADC3_CR2_JEXTEN_Shift, 20   @ bitWidth 2 (External trigger enable for injected channels)  
        .equ ADC3_CR2_JEXTSEL_Shift, 16   @ bitWidth 4 (External event select for injected group)  
        .equ ADC3_CR2_ALIGN, 1 << 11   @ bitWidth 1 (Data alignment)  
        .equ ADC3_CR2_EOCS, 1 << 10   @ bitWidth 1 (End of conversion selection)  
        .equ ADC3_CR2_DDS, 1 << 9   @ bitWidth 1 (DMA disable selection for single ADC mode)  
        .equ ADC3_CR2_DMA, 1 << 8   @ bitWidth 1 (Direct memory access mode for single ADC mode)  
        .equ ADC3_CR2_CONT, 1 << 1   @ bitWidth 1 (Continuous conversion)  
        .equ ADC3_CR2_ADON, 1 << 0   @ bitWidth 1 (A/D Converter ON / OFF)  
 
    .equ ADC3_SMPR1, ADC3_BASE + 0xC @ (sample time register 1) 
        .equ ADC3_SMPR1_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC3_SMPR2, ADC3_BASE + 0x10 @ (sample time register 2) 
        .equ ADC3_SMPR2_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC3_JOFR1, ADC3_BASE + 0x14 @ (injected channel data offset register x) 
        .equ ADC3_JOFR1_JOFFSET1_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC3_JOFR2, ADC3_BASE + 0x18 @ (injected channel data offset register x) 
        .equ ADC3_JOFR2_JOFFSET2_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC3_JOFR3, ADC3_BASE + 0x1C @ (injected channel data offset register x) 
        .equ ADC3_JOFR3_JOFFSET3_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC3_JOFR4, ADC3_BASE + 0x20 @ (injected channel data offset register x) 
        .equ ADC3_JOFR4_JOFFSET4_Shift, 0   @ bitWidth 12 (Data offset for injected channel x)  
 
    .equ ADC3_HTR, ADC3_BASE + 0x24 @ (watchdog higher threshold register) 
        .equ ADC3_HTR_HT_Shift, 0   @ bitWidth 12 (Analog watchdog higher threshold)  
 
    .equ ADC3_LTR, ADC3_BASE + 0x28 @ (watchdog lower threshold register) 
        .equ ADC3_LTR_LT_Shift, 0   @ bitWidth 12 (Analog watchdog lower threshold)  
 
    .equ ADC3_SQR1, ADC3_BASE + 0x2C @ (regular sequence register 1) 
        .equ ADC3_SQR1_L_Shift, 20   @ bitWidth 4 (Regular channel sequence length)  
        .equ ADC3_SQR1_SQ16_Shift, 15   @ bitWidth 5 (16th conversion in regular sequence)  
        .equ ADC3_SQR1_SQ15_Shift, 10   @ bitWidth 5 (15th conversion in regular sequence)  
        .equ ADC3_SQR1_SQ14_Shift, 5   @ bitWidth 5 (14th conversion in regular sequence)  
        .equ ADC3_SQR1_SQ13_Shift, 0   @ bitWidth 5 (13th conversion in regular sequence)  
 
    .equ ADC3_SQR2, ADC3_BASE + 0x30 @ (regular sequence register 2) 
        .equ ADC3_SQR2_SQ12_Shift, 25   @ bitWidth 5 (12th conversion in regular sequence)  
        .equ ADC3_SQR2_SQ11_Shift, 20   @ bitWidth 5 (11th conversion in regular sequence)  
        .equ ADC3_SQR2_SQ10_Shift, 15   @ bitWidth 5 (10th conversion in regular sequence)  
        .equ ADC3_SQR2_SQ9_Shift, 10   @ bitWidth 5 (9th conversion in regular sequence)  
        .equ ADC3_SQR2_SQ8_Shift, 5   @ bitWidth 5 (8th conversion in regular sequence)  
        .equ ADC3_SQR2_SQ7_Shift, 0   @ bitWidth 5 (7th conversion in regular sequence)  
 
    .equ ADC3_SQR3, ADC3_BASE + 0x34 @ (regular sequence register 3) 
        .equ ADC3_SQR3_SQ6_Shift, 25   @ bitWidth 5 (6th conversion in regular sequence)  
        .equ ADC3_SQR3_SQ5_Shift, 20   @ bitWidth 5 (5th conversion in regular sequence)  
        .equ ADC3_SQR3_SQ4_Shift, 15   @ bitWidth 5 (4th conversion in regular sequence)  
        .equ ADC3_SQR3_SQ3_Shift, 10   @ bitWidth 5 (3rd conversion in regular sequence)  
        .equ ADC3_SQR3_SQ2_Shift, 5   @ bitWidth 5 (2nd conversion in regular sequence)  
        .equ ADC3_SQR3_SQ1_Shift, 0   @ bitWidth 5 (1st conversion in regular sequence)  
 
    .equ ADC3_JSQR, ADC3_BASE + 0x38 @ (injected sequence register) 
        .equ ADC3_JSQR_JL_Shift, 20   @ bitWidth 2 (Injected sequence length)  
        .equ ADC3_JSQR_JSQ4_Shift, 15   @ bitWidth 5 (4th conversion in injected sequence)  
        .equ ADC3_JSQR_JSQ3_Shift, 10   @ bitWidth 5 (3rd conversion in injected sequence)  
        .equ ADC3_JSQR_JSQ2_Shift, 5   @ bitWidth 5 (2nd conversion in injected sequence)  
        .equ ADC3_JSQR_JSQ1_Shift, 0   @ bitWidth 5 (1st conversion in injected sequence)  
 
    .equ ADC3_JDR1, ADC3_BASE + 0x3C @ (injected data register x) 
        .equ ADC3_JDR1_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_JDR2, ADC3_BASE + 0x40 @ (injected data register x) 
        .equ ADC3_JDR2_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_JDR3, ADC3_BASE + 0x44 @ (injected data register x) 
        .equ ADC3_JDR3_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_JDR4, ADC3_BASE + 0x48 @ (injected data register x) 
        .equ ADC3_JDR4_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_DR, ADC3_BASE + 0x4C @ (regular data register) 
        .equ ADC3_DR_DATA_Shift, 0   @ bitWidth 16 (Regular data)  
 

@=========================== DAC ===========================@
.equ DAC_BASE, 0x40007400 @ (Digital-to-analog converter) 
    .equ DAC_CR, DAC_BASE + 0x0 @ (control register) 
        .equ DAC_CR_DMAUDRIE2, 1 << 29   @ bitWidth 1 (DAC channel2 DMA underrun interrupt enable)  
        .equ DAC_CR_DMAEN2, 1 << 28   @ bitWidth 1 (DAC channel2 DMA enable)  
        .equ DAC_CR_MAMP2_Shift, 24   @ bitWidth 4 (DAC channel2 mask/amplitude selector)  
        .equ DAC_CR_WAVE2_Shift, 22   @ bitWidth 2 (DAC channel2 noise/triangle wave generation enable)  
        .equ DAC_CR_TSEL2_Shift, 19   @ bitWidth 3 (DAC channel2 trigger selection)  
        .equ DAC_CR_TEN2, 1 << 18   @ bitWidth 1 (DAC channel2 trigger enable)  
        .equ DAC_CR_BOFF2, 1 << 17   @ bitWidth 1 (DAC channel2 output buffer disable)  
        .equ DAC_CR_EN2, 1 << 16   @ bitWidth 1 (DAC channel2 enable)  
        .equ DAC_CR_DMAUDRIE1, 1 << 13   @ bitWidth 1 (DAC channel1 DMA Underrun Interrupt enable)  
        .equ DAC_CR_DMAEN1, 1 << 12   @ bitWidth 1 (DAC channel1 DMA enable)  
        .equ DAC_CR_MAMP1_Shift, 8   @ bitWidth 4 (DAC channel1 mask/amplitude selector)  
        .equ DAC_CR_WAVE1_Shift, 6   @ bitWidth 2 (DAC channel1 noise/triangle wave generation enable)  
        .equ DAC_CR_TSEL1_Shift, 3   @ bitWidth 3 (DAC channel1 trigger selection)  
        .equ DAC_CR_TEN1, 1 << 2   @ bitWidth 1 (DAC channel1 trigger enable)  
        .equ DAC_CR_BOFF1, 1 << 1   @ bitWidth 1 (DAC channel1 output buffer disable)  
        .equ DAC_CR_EN1, 1 << 0   @ bitWidth 1 (DAC channel1 enable)  
 
    .equ DAC_SWTRIGR, DAC_BASE + 0x4 @ (software trigger register) 
        .equ DAC_SWTRIGR_SWTRIG2, 1 << 1   @ bitWidth 1 (DAC channel2 software trigger)  
        .equ DAC_SWTRIGR_SWTRIG1, 1 << 0   @ bitWidth 1 (DAC channel1 software trigger)  
 
    .equ DAC_DHR12R1, DAC_BASE + 0x8 @ (channel1 12-bit right-aligned data holding register) 
        .equ DAC_DHR12R1_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned data)  
 
    .equ DAC_DHR12L1, DAC_BASE + 0xC @ (channel1 12-bit left aligned data holding register) 
        .equ DAC_DHR12L1_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned data)  
 
    .equ DAC_DHR8R1, DAC_BASE + 0x10 @ (channel1 8-bit right aligned data holding register) 
        .equ DAC_DHR8R1_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned data)  
 
    .equ DAC_DHR12R2, DAC_BASE + 0x14 @ (channel2 12-bit right aligned data holding register) 
        .equ DAC_DHR12R2_DACC2DHR_Shift, 0   @ bitWidth 12 (DAC channel2 12-bit right-aligned data)  
 
    .equ DAC_DHR12L2, DAC_BASE + 0x18 @ (channel2 12-bit left aligned data holding register) 
        .equ DAC_DHR12L2_DACC2DHR_Shift, 4   @ bitWidth 12 (DAC channel2 12-bit left-aligned data)  
 
    .equ DAC_DHR8R2, DAC_BASE + 0x1C @ (channel2 8-bit right-aligned data holding register) 
        .equ DAC_DHR8R2_DACC2DHR_Shift, 0   @ bitWidth 8 (DAC channel2 8-bit right-aligned data)  
 
    .equ DAC_DHR12RD, DAC_BASE + 0x20 @ (Dual DAC 12-bit right-aligned data holding register) 
        .equ DAC_DHR12RD_DACC2DHR_Shift, 16   @ bitWidth 12 (DAC channel2 12-bit right-aligned data)  
        .equ DAC_DHR12RD_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned data)  
 
    .equ DAC_DHR12LD, DAC_BASE + 0x24 @ (DUAL DAC 12-bit left aligned data holding register) 
        .equ DAC_DHR12LD_DACC2DHR_Shift, 20   @ bitWidth 12 (DAC channel2 12-bit left-aligned data)  
        .equ DAC_DHR12LD_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned data)  
 
    .equ DAC_DHR8RD, DAC_BASE + 0x28 @ (DUAL DAC 8-bit right aligned data holding register) 
        .equ DAC_DHR8RD_DACC2DHR_Shift, 8   @ bitWidth 8 (DAC channel2 8-bit right-aligned data)  
        .equ DAC_DHR8RD_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned data)  
 
    .equ DAC_DOR1, DAC_BASE + 0x2C @ (channel1 data output register) 
        .equ DAC_DOR1_DACC1DOR_Shift, 0   @ bitWidth 12 (DAC channel1 data output)  
 
    .equ DAC_DOR2, DAC_BASE + 0x30 @ (channel2 data output register) 
        .equ DAC_DOR2_DACC2DOR_Shift, 0   @ bitWidth 12 (DAC channel2 data output)  
 
    .equ DAC_SR, DAC_BASE + 0x34 @ (status register) 
        .equ DAC_SR_DMAUDR2, 1 << 29   @ bitWidth 1 (DAC channel2 DMA underrun flag)  
        .equ DAC_SR_DMAUDR1, 1 << 13   @ bitWidth 1 (DAC channel1 DMA underrun flag)  
 

@=========================== PWR ===========================@
.equ PWR_BASE, 0x40007000 @ (Power control) 
    .equ PWR_CR1, PWR_BASE + 0x0 @ (power control register) 
        .equ PWR_CR1_LPDS, 1 << 0   @ bitWidth 1 (Low-power deep sleep)  
        .equ PWR_CR1_PDDS, 1 << 1   @ bitWidth 1 (Power down deepsleep)  
        .equ PWR_CR1_CSBF, 1 << 3   @ bitWidth 1 (Clear standby flag)  
        .equ PWR_CR1_PVDE, 1 << 4   @ bitWidth 1 (Power voltage detector enable)  
        .equ PWR_CR1_PLS_Shift, 5   @ bitWidth 3 (PVD level selection)  
        .equ PWR_CR1_DBP, 1 << 8   @ bitWidth 1 (Disable backup domain write protection)  
        .equ PWR_CR1_FPDS, 1 << 9   @ bitWidth 1 (Flash power down in Stop mode)  
        .equ PWR_CR1_LPUDS, 1 << 10   @ bitWidth 1 (Low-power regulator in deepsleep under-drive mode)  
        .equ PWR_CR1_MRUDS, 1 << 11   @ bitWidth 1 (Main regulator in deepsleep under-drive mode)  
        .equ PWR_CR1_ADCDC1, 1 << 13   @ bitWidth 1 (ADCDC1)  
        .equ PWR_CR1_VOS_Shift, 14   @ bitWidth 2 (Regulator voltage scaling output selection)  
        .equ PWR_CR1_ODEN, 1 << 16   @ bitWidth 1 (Over-drive enable)  
        .equ PWR_CR1_ODSWEN, 1 << 17   @ bitWidth 1 (Over-drive switching enabled)  
        .equ PWR_CR1_UDEN_Shift, 18   @ bitWidth 2 (Under-drive enable in stop mode)  
 
    .equ PWR_CSR1, PWR_BASE + 0x4 @ (power control/status register) 
        .equ PWR_CSR1_WUIF, 1 << 0   @ bitWidth 1 (Wakeup internal flag)  
        .equ PWR_CSR1_SBF, 1 << 1   @ bitWidth 1 (Standby flag)  
        .equ PWR_CSR1_PVDO, 1 << 2   @ bitWidth 1 (PVD output)  
        .equ PWR_CSR1_BRR, 1 << 3   @ bitWidth 1 (Backup regulator ready)  
        .equ PWR_CSR1_BRE, 1 << 9   @ bitWidth 1 (Backup regulator enable)  
        .equ PWR_CSR1_VOSRDY, 1 << 14   @ bitWidth 1 (Regulator voltage scaling output selection ready bit)  
        .equ PWR_CSR1_ODRDY, 1 << 16   @ bitWidth 1 (Over-drive mode ready)  
        .equ PWR_CSR1_ODSWRDY, 1 << 17   @ bitWidth 1 (Over-drive mode switching ready)  
        .equ PWR_CSR1_UDRDY_Shift, 18   @ bitWidth 2 (Under-drive ready flag)  
 
    .equ PWR_CR2, PWR_BASE + 0x8 @ (power control register) 
        .equ PWR_CR2_CWUPF1, 1 << 0   @ bitWidth 1 (Clear Wakeup Pin flag for PA0)  
        .equ PWR_CR2_CWUPF2, 1 << 1   @ bitWidth 1 (Clear Wakeup Pin flag for PA2)  
        .equ PWR_CR2_CWUPF3, 1 << 2   @ bitWidth 1 (Clear Wakeup Pin flag for PC1)  
        .equ PWR_CR2_CWUPF4, 1 << 3   @ bitWidth 1 (Clear Wakeup Pin flag for PC13)  
        .equ PWR_CR2_CWUPF5, 1 << 4   @ bitWidth 1 (Clear Wakeup Pin flag for PI8)  
        .equ PWR_CR2_CWUPF6, 1 << 5   @ bitWidth 1 (Clear Wakeup Pin flag for PI11)  
        .equ PWR_CR2_WUPP1, 1 << 8   @ bitWidth 1 (Wakeup pin polarity bit for PA0)  
        .equ PWR_CR2_WUPP2, 1 << 9   @ bitWidth 1 (Wakeup pin polarity bit for PA2)  
        .equ PWR_CR2_WUPP3, 1 << 10   @ bitWidth 1 (Wakeup pin polarity bit for PC1)  
        .equ PWR_CR2_WUPP4, 1 << 11   @ bitWidth 1 (Wakeup pin polarity bit for PC13)  
        .equ PWR_CR2_WUPP5, 1 << 12   @ bitWidth 1 (Wakeup pin polarity bit for PI8)  
        .equ PWR_CR2_WUPP6, 1 << 13   @ bitWidth 1 (Wakeup pin polarity bit for PI11)  
 
    .equ PWR_CSR2, PWR_BASE + 0xC @ (power control/status register) 
        .equ PWR_CSR2_WUPF1, 1 << 0   @ bitWidth 1 (Wakeup Pin flag for PA0)  
        .equ PWR_CSR2_WUPF2, 1 << 1   @ bitWidth 1 (Wakeup Pin flag for PA2)  
        .equ PWR_CSR2_WUPF3, 1 << 2   @ bitWidth 1 (Wakeup Pin flag for PC1)  
        .equ PWR_CSR2_WUPF4, 1 << 3   @ bitWidth 1 (Wakeup Pin flag for PC13)  
        .equ PWR_CSR2_WUPF5, 1 << 4   @ bitWidth 1 (Wakeup Pin flag for PI8)  
        .equ PWR_CSR2_WUPF6, 1 << 5   @ bitWidth 1 (Wakeup Pin flag for PI11)  
        .equ PWR_CSR2_EWUP1, 1 << 8   @ bitWidth 1 (Enable Wakeup pin for PA0)  
        .equ PWR_CSR2_EWUP2, 1 << 9   @ bitWidth 1 (Enable Wakeup pin for PA2)  
        .equ PWR_CSR2_EWUP3, 1 << 10   @ bitWidth 1 (Enable Wakeup pin for PC1)  
        .equ PWR_CSR2_EWUP4, 1 << 11   @ bitWidth 1 (Enable Wakeup pin for PC13)  
        .equ PWR_CSR2_EWUP5, 1 << 12   @ bitWidth 1 (Enable Wakeup pin for PI8)  
        .equ PWR_CSR2_EWUP6, 1 << 13   @ bitWidth 1 (Enable Wakeup pin for PI11)  
 

@=========================== IWDG ===========================@
.equ IWDG_BASE, 0x40003000 @ (Independent watchdog) 
    .equ IWDG_KR, IWDG_BASE + 0x0 @ (Key register) 
        .equ IWDG_KR_KEY_Shift, 0   @ bitWidth 16 (Key value write only, read 0000h)  
 
    .equ IWDG_PR, IWDG_BASE + 0x4 @ (Prescaler register) 
        .equ IWDG_PR_PR_Shift, 0   @ bitWidth 3 (Prescaler divider)  
 
    .equ IWDG_RLR, IWDG_BASE + 0x8 @ (Reload register) 
        .equ IWDG_RLR_RL_Shift, 0   @ bitWidth 12 (Watchdog counter reload value)  
 
    .equ IWDG_SR, IWDG_BASE + 0xC @ (Status register) 
        .equ IWDG_SR_RVU, 1 << 1   @ bitWidth 1 (Watchdog counter reload value update)  
        .equ IWDG_SR_PVU, 1 << 0   @ bitWidth 1 (Watchdog prescaler value update)  
 
    .equ IWDG_WINR, IWDG_BASE + 0x10 @ (Window register) 
        .equ IWDG_WINR_WIN_Shift, 0   @ bitWidth 12 (Watchdog counter window value)  
 

@=========================== WWDG ===========================@
.equ WWDG_BASE, 0x40002C00 @ (Window watchdog) 
    .equ WWDG_CR, WWDG_BASE + 0x0 @ (Control register) 
        .equ WWDG_CR_WDGA, 1 << 7   @ bitWidth 1 (Activation bit)  
        .equ WWDG_CR_T_Shift, 0   @ bitWidth 7 (7-bit counter MSB to LSB)  
 
    .equ WWDG_CFR, WWDG_BASE + 0x4 @ (Configuration register) 
        .equ WWDG_CFR_EWI, 1 << 9   @ bitWidth 1 (Early wakeup interrupt)  
        .equ WWDG_CFR_WDGTB1, 1 << 8   @ bitWidth 1 (Timer base)  
        .equ WWDG_CFR_WDGTB0, 1 << 7   @ bitWidth 1 (Timer base)  
        .equ WWDG_CFR_W_Shift, 0   @ bitWidth 7 (7-bit window value)  
 
    .equ WWDG_SR, WWDG_BASE + 0x8 @ (Status register) 
        .equ WWDG_SR_EWIF, 1 << 0   @ bitWidth 1 (Early wakeup interrupt flag)  
 

@=========================== C_ADC ===========================@
.equ C_ADC_BASE, 0x40012300 @ (Common ADC registers) 
    .equ C_ADC_CSR, C_ADC_BASE + 0x0 @ (ADC Common status register) 
        .equ C_ADC_CSR_OVR3, 1 << 21   @ bitWidth 1 (Overrun flag of ADC3)  
        .equ C_ADC_CSR_STRT3, 1 << 20   @ bitWidth 1 (Regular channel Start flag of ADC 3)  
        .equ C_ADC_CSR_JSTRT3, 1 << 19   @ bitWidth 1 (Injected channel Start flag of ADC 3)  
        .equ C_ADC_CSR_JEOC3, 1 << 18   @ bitWidth 1 (Injected channel end of conversion of ADC 3)  
        .equ C_ADC_CSR_EOC3, 1 << 17   @ bitWidth 1 (End of conversion of ADC 3)  
        .equ C_ADC_CSR_AWD3, 1 << 16   @ bitWidth 1 (Analog watchdog flag of ADC 3)  
        .equ C_ADC_CSR_OVR2, 1 << 13   @ bitWidth 1 (Overrun flag of ADC 2)  
        .equ C_ADC_CSR_STRT2, 1 << 12   @ bitWidth 1 (Regular channel Start flag of ADC 2)  
        .equ C_ADC_CSR_JSTRT2, 1 << 11   @ bitWidth 1 (Injected channel Start flag of ADC 2)  
        .equ C_ADC_CSR_JEOC2, 1 << 10   @ bitWidth 1 (Injected channel end of conversion of ADC 2)  
        .equ C_ADC_CSR_EOC2, 1 << 9   @ bitWidth 1 (End of conversion of ADC 2)  
        .equ C_ADC_CSR_AWD2, 1 << 8   @ bitWidth 1 (Analog watchdog flag of ADC 2)  
        .equ C_ADC_CSR_OVR1, 1 << 5   @ bitWidth 1 (Overrun flag of ADC 1)  
        .equ C_ADC_CSR_STRT1, 1 << 4   @ bitWidth 1 (Regular channel Start flag of ADC 1)  
        .equ C_ADC_CSR_JSTRT1, 1 << 3   @ bitWidth 1 (Injected channel Start flag of ADC 1)  
        .equ C_ADC_CSR_JEOC1, 1 << 2   @ bitWidth 1 (Injected channel end of conversion of ADC 1)  
        .equ C_ADC_CSR_EOC1, 1 << 1   @ bitWidth 1 (End of conversion of ADC 1)  
        .equ C_ADC_CSR_AWD1, 1 << 0   @ bitWidth 1 (Analog watchdog flag of ADC 1)  
 
    .equ C_ADC_CCR, C_ADC_BASE + 0x4 @ (ADC common control register) 
        .equ C_ADC_CCR_TSVREFE, 1 << 23   @ bitWidth 1 (Temperature sensor and VREFINT enable)  
        .equ C_ADC_CCR_VBATE, 1 << 22   @ bitWidth 1 (VBAT enable)  
        .equ C_ADC_CCR_ADCPRE_Shift, 16   @ bitWidth 2 (ADC prescaler)  
        .equ C_ADC_CCR_DMA_Shift, 14   @ bitWidth 2 (Direct memory access mode for multi ADC mode)  
        .equ C_ADC_CCR_DDS, 1 << 13   @ bitWidth 1 (DMA disable selection for multi-ADC mode)  
        .equ C_ADC_CCR_DELAY_Shift, 8   @ bitWidth 4 (Delay between 2 sampling phases)  
        .equ C_ADC_CCR_MULT_Shift, 0   @ bitWidth 5 (Multi ADC mode selection)  
 
    .equ C_ADC_CDR, C_ADC_BASE + 0x8 @ (ADC common regular data register for dual and triple modes) 
        .equ C_ADC_CDR_DATA2_Shift, 16   @ bitWidth 16 (2nd data item of a pair of regular conversions)  
        .equ C_ADC_CDR_DATA1_Shift, 0   @ bitWidth 16 (1st data item of a pair of regular conversions)  
 

@=========================== TIM1 ===========================@
.equ TIM1_BASE, 0x40010000 @ (Advanced-timers) 
    .equ TIM1_CR1, TIM1_BASE + 0x0 @ (control register 1) 
        .equ TIM1_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM1_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM1_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode selection)  
        .equ TIM1_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM1_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM1_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM1_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM1_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM1_CR2, TIM1_BASE + 0x4 @ (control register 2) 
        .equ TIM1_CR2_OIS4, 1 << 14   @ bitWidth 1 (Output Idle state 4)  
        .equ TIM1_CR2_OIS3N, 1 << 13   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM1_CR2_OIS3, 1 << 12   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM1_CR2_OIS2N, 1 << 11   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM1_CR2_OIS2, 1 << 10   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM1_CR2_OIS1N, 1 << 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM1_CR2_OIS1, 1 << 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM1_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM1_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM1_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA selection)  
        .equ TIM1_CR2_CCUS, 1 << 2   @ bitWidth 1 (Capture/compare control update selection)  
        .equ TIM1_CR2_CCPC, 1 << 0   @ bitWidth 1 (Capture/compare preloaded control)  
 
    .equ TIM1_SMCR, TIM1_BASE + 0x8 @ (slave mode control register) 
        .equ TIM1_SMCR_SMS_3, 1 << 16   @ bitWidth 1 (Slave model selection - bit[3])  
        .equ TIM1_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM1_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM1_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM1_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM1_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM1_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM1_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection - bit[2:0])  
 
    .equ TIM1_DIER, TIM1_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM1_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM1_DIER_COMDE, 1 << 13   @ bitWidth 1 (COM DMA request enable)  
        .equ TIM1_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request enable)  
        .equ TIM1_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request enable)  
        .equ TIM1_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request enable)  
        .equ TIM1_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request enable)  
        .equ TIM1_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM1_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM1_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt enable)  
        .equ TIM1_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt enable)  
        .equ TIM1_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt enable)  
        .equ TIM1_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM1_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
        .equ TIM1_DIER_BIE, 1 << 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM1_DIER_COMIE, 1 << 5   @ bitWidth 1 (COM interrupt enable)  
 
    .equ TIM1_SR, TIM1_BASE + 0x10 @ (status register) 
        .equ TIM1_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture flag)  
        .equ TIM1_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture flag)  
        .equ TIM1_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture flag)  
        .equ TIM1_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM1_SR_BIF, 1 << 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM1_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM1_SR_COMIF, 1 << 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM1_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt flag)  
        .equ TIM1_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt flag)  
        .equ TIM1_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt flag)  
        .equ TIM1_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM1_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM1_EGR, TIM1_BASE + 0x14 @ (event generation register) 
        .equ TIM1_EGR_BG, 1 << 7   @ bitWidth 1 (Break generation)  
        .equ TIM1_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM1_EGR_COMG, 1 << 5   @ bitWidth 1 (Capture/Compare control update generation)  
        .equ TIM1_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4 generation)  
        .equ TIM1_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3 generation)  
        .equ TIM1_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2 generation)  
        .equ TIM1_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM1_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM1_CCMR1_Output, TIM1_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM1_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (Output Compare 2 clear enable)  
        .equ TIM1_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM1_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output Compare 2 preload enable)  
        .equ TIM1_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output Compare 2 fast enable)  
        .equ TIM1_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM1_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (Output Compare 1 clear enable)  
        .equ TIM1_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM1_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload enable)  
        .equ TIM1_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast enable)  
        .equ TIM1_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM1_CCMR1_Input, TIM1_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM1_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM1_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM1_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM1_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM1_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM1_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM1_CCMR2_Output, TIM1_BASE + 0x1C @ (capture/compare mode register 2 output mode) 
        .equ TIM1_CCMR2_Output_OC4CE, 1 << 15   @ bitWidth 1 (Output compare 4 clear enable)  
        .equ TIM1_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM1_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (Output compare 4 preload enable)  
        .equ TIM1_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (Output compare 4 fast enable)  
        .equ TIM1_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM1_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (Output compare 3 clear enable)  
        .equ TIM1_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM1_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (Output compare 3 preload enable)  
        .equ TIM1_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (Output compare 3 fast enable)  
        .equ TIM1_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3 selection)  
 
    .equ TIM1_CCMR2_Input, TIM1_BASE + 0x1C @ (capture/compare mode register 2 input mode) 
        .equ TIM1_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM1_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM1_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM1_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM1_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM1_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3 selection)  
 
    .equ TIM1_CCER, TIM1_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM1_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM1_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output enable)  
        .equ TIM1_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM1_CCER_CC3NE, 1 << 10   @ bitWidth 1 (Capture/Compare 3 complementary output enable)  
        .equ TIM1_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM1_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output enable)  
        .equ TIM1_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM1_CCER_CC2NE, 1 << 6   @ bitWidth 1 (Capture/Compare 2 complementary output enable)  
        .equ TIM1_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM1_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output enable)  
        .equ TIM1_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM1_CCER_CC1NE, 1 << 2   @ bitWidth 1 (Capture/Compare 1 complementary output enable)  
        .equ TIM1_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM1_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM1_CNT, TIM1_BASE + 0x24 @ (counter) 
        .equ TIM1_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM1_PSC, TIM1_BASE + 0x28 @ (prescaler) 
        .equ TIM1_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM1_ARR, TIM1_BASE + 0x2C @ (auto-reload register) 
        .equ TIM1_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM1_CCR1, TIM1_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM1_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM1_CCR2, TIM1_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM1_CCR2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM1_CCR3, TIM1_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM1_CCR3_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM1_CCR4, TIM1_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM1_CCR4_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM1_DCR, TIM1_BASE + 0x48 @ (DMA control register) 
        .equ TIM1_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM1_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM1_DMAR, TIM1_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM1_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst accesses)  
 
    .equ TIM1_RCR, TIM1_BASE + 0x30 @ (repetition counter register) 
        .equ TIM1_RCR_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM1_BDTR, TIM1_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM1_BDTR_MOE, 1 << 15   @ bitWidth 1 (Main output enable)  
        .equ TIM1_BDTR_AOE, 1 << 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM1_BDTR_BKP, 1 << 13   @ bitWidth 1 (Break polarity)  
        .equ TIM1_BDTR_BKE, 1 << 12   @ bitWidth 1 (Break enable)  
        .equ TIM1_BDTR_OSSR, 1 << 11   @ bitWidth 1 (Off-state selection for Run mode)  
        .equ TIM1_BDTR_OSSI, 1 << 10   @ bitWidth 1 (Off-state selection for Idle mode)  
        .equ TIM1_BDTR_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM1_BDTR_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 
    .equ TIM1_CCMR3_Output, TIM1_BASE + 0x54 @ (capture/compare mode register 3 output mode) 
        .equ TIM1_CCMR3_Output_OC5FE, 1 << 2   @ bitWidth 1 (Output compare 5 fast enable)  
        .equ TIM1_CCMR3_Output_OC5PE, 1 << 3   @ bitWidth 1 (Output compare 5 preload enable)  
        .equ TIM1_CCMR3_Output_OC5M_Shift, 4   @ bitWidth 3 (Output compare 5 mode)  
        .equ TIM1_CCMR3_Output_OC5CE, 1 << 7   @ bitWidth 1 (Output compare 5 clear enable)  
        .equ TIM1_CCMR3_Output_OC6FE, 1 << 10   @ bitWidth 1 (Output compare 6 fast enable)  
        .equ TIM1_CCMR3_Output_OC6PE, 1 << 11   @ bitWidth 1 (Output compare 6 preload enable)  
        .equ TIM1_CCMR3_Output_OC6M_Shift, 12   @ bitWidth 3 (Output compare 6 mode)  
        .equ TIM1_CCMR3_Output_OC6CE, 1 << 15   @ bitWidth 1 (Output compare 6 clear enable)  
        .equ TIM1_CCMR3_Output_OC5M3, 1 << 16   @ bitWidth 1 (Output Compare 5 mode)  
        .equ TIM1_CCMR3_Output_OC6M3, 1 << 24   @ bitWidth 1 (Output Compare 6 mode)  
 
    .equ TIM1_CCR5, TIM1_BASE + 0x58 @ (capture/compare register 5) 
        .equ TIM1_CCR5_CCR5_Shift, 0   @ bitWidth 16 (Capture/Compare 5 value)  
        .equ TIM1_CCR5_GC5C1, 1 << 29   @ bitWidth 1 (Group Channel 5 and Channel 1)  
        .equ TIM1_CCR5_GC5C2, 1 << 30   @ bitWidth 1 (Group Channel 5 and Channel 2)  
        .equ TIM1_CCR5_GC5C3, 1 << 31   @ bitWidth 1 (Group Channel 5 and Channel 3)  
 
    .equ TIM1_CRR6, TIM1_BASE + 0x5C @ (capture/compare register 6) 
        .equ TIM1_CRR6_CCR6_Shift, 0   @ bitWidth 16 (Capture/Compare 6 value)  
 

@=========================== TIM8 ===========================@
.equ TIM8_BASE, 0x40010400 @ (Advanced-timers) 
    .equ TIM8_CR1, TIM8_BASE + 0x0 @ (control register 1) 
        .equ TIM8_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM8_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM8_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode selection)  
        .equ TIM8_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM8_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM8_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM8_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM8_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM8_CR2, TIM8_BASE + 0x4 @ (control register 2) 
        .equ TIM8_CR2_OIS4, 1 << 14   @ bitWidth 1 (Output Idle state 4)  
        .equ TIM8_CR2_OIS3N, 1 << 13   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM8_CR2_OIS3, 1 << 12   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM8_CR2_OIS2N, 1 << 11   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM8_CR2_OIS2, 1 << 10   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM8_CR2_OIS1N, 1 << 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM8_CR2_OIS1, 1 << 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM8_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM8_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM8_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA selection)  
        .equ TIM8_CR2_CCUS, 1 << 2   @ bitWidth 1 (Capture/compare control update selection)  
        .equ TIM8_CR2_CCPC, 1 << 0   @ bitWidth 1 (Capture/compare preloaded control)  
 
    .equ TIM8_SMCR, TIM8_BASE + 0x8 @ (slave mode control register) 
        .equ TIM8_SMCR_SMS_3, 1 << 16   @ bitWidth 1 (Slave model selection - bit[3])  
        .equ TIM8_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM8_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM8_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM8_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM8_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM8_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM8_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection - bit[2:0])  
 
    .equ TIM8_DIER, TIM8_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM8_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM8_DIER_COMDE, 1 << 13   @ bitWidth 1 (COM DMA request enable)  
        .equ TIM8_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request enable)  
        .equ TIM8_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request enable)  
        .equ TIM8_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request enable)  
        .equ TIM8_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request enable)  
        .equ TIM8_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM8_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM8_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt enable)  
        .equ TIM8_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt enable)  
        .equ TIM8_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt enable)  
        .equ TIM8_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM8_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
        .equ TIM8_DIER_BIE, 1 << 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM8_DIER_COMIE, 1 << 5   @ bitWidth 1 (COM interrupt enable)  
 
    .equ TIM8_SR, TIM8_BASE + 0x10 @ (status register) 
        .equ TIM8_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture flag)  
        .equ TIM8_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture flag)  
        .equ TIM8_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture flag)  
        .equ TIM8_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM8_SR_BIF, 1 << 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM8_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM8_SR_COMIF, 1 << 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM8_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt flag)  
        .equ TIM8_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt flag)  
        .equ TIM8_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt flag)  
        .equ TIM8_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM8_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM8_EGR, TIM8_BASE + 0x14 @ (event generation register) 
        .equ TIM8_EGR_BG, 1 << 7   @ bitWidth 1 (Break generation)  
        .equ TIM8_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM8_EGR_COMG, 1 << 5   @ bitWidth 1 (Capture/Compare control update generation)  
        .equ TIM8_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4 generation)  
        .equ TIM8_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3 generation)  
        .equ TIM8_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2 generation)  
        .equ TIM8_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM8_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM8_CCMR1_Output, TIM8_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM8_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (Output Compare 2 clear enable)  
        .equ TIM8_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM8_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output Compare 2 preload enable)  
        .equ TIM8_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output Compare 2 fast enable)  
        .equ TIM8_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM8_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (Output Compare 1 clear enable)  
        .equ TIM8_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM8_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload enable)  
        .equ TIM8_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast enable)  
        .equ TIM8_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM8_CCMR1_Input, TIM8_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM8_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM8_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM8_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM8_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM8_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM8_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM8_CCMR2_Output, TIM8_BASE + 0x1C @ (capture/compare mode register 2 output mode) 
        .equ TIM8_CCMR2_Output_OC4CE, 1 << 15   @ bitWidth 1 (Output compare 4 clear enable)  
        .equ TIM8_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM8_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (Output compare 4 preload enable)  
        .equ TIM8_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (Output compare 4 fast enable)  
        .equ TIM8_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM8_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (Output compare 3 clear enable)  
        .equ TIM8_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM8_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (Output compare 3 preload enable)  
        .equ TIM8_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (Output compare 3 fast enable)  
        .equ TIM8_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3 selection)  
 
    .equ TIM8_CCMR2_Input, TIM8_BASE + 0x1C @ (capture/compare mode register 2 input mode) 
        .equ TIM8_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM8_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM8_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM8_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM8_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM8_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3 selection)  
 
    .equ TIM8_CCER, TIM8_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM8_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM8_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output enable)  
        .equ TIM8_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM8_CCER_CC3NE, 1 << 10   @ bitWidth 1 (Capture/Compare 3 complementary output enable)  
        .equ TIM8_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM8_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output enable)  
        .equ TIM8_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM8_CCER_CC2NE, 1 << 6   @ bitWidth 1 (Capture/Compare 2 complementary output enable)  
        .equ TIM8_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM8_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output enable)  
        .equ TIM8_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM8_CCER_CC1NE, 1 << 2   @ bitWidth 1 (Capture/Compare 1 complementary output enable)  
        .equ TIM8_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM8_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM8_CNT, TIM8_BASE + 0x24 @ (counter) 
        .equ TIM8_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM8_PSC, TIM8_BASE + 0x28 @ (prescaler) 
        .equ TIM8_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM8_ARR, TIM8_BASE + 0x2C @ (auto-reload register) 
        .equ TIM8_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM8_CCR1, TIM8_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM8_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM8_CCR2, TIM8_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM8_CCR2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM8_CCR3, TIM8_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM8_CCR3_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM8_CCR4, TIM8_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM8_CCR4_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM8_DCR, TIM8_BASE + 0x48 @ (DMA control register) 
        .equ TIM8_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM8_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM8_DMAR, TIM8_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM8_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst accesses)  
 
    .equ TIM8_RCR, TIM8_BASE + 0x30 @ (repetition counter register) 
        .equ TIM8_RCR_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM8_BDTR, TIM8_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM8_BDTR_MOE, 1 << 15   @ bitWidth 1 (Main output enable)  
        .equ TIM8_BDTR_AOE, 1 << 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM8_BDTR_BKP, 1 << 13   @ bitWidth 1 (Break polarity)  
        .equ TIM8_BDTR_BKE, 1 << 12   @ bitWidth 1 (Break enable)  
        .equ TIM8_BDTR_OSSR, 1 << 11   @ bitWidth 1 (Off-state selection for Run mode)  
        .equ TIM8_BDTR_OSSI, 1 << 10   @ bitWidth 1 (Off-state selection for Idle mode)  
        .equ TIM8_BDTR_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM8_BDTR_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 
    .equ TIM8_CCMR3_Output, TIM8_BASE + 0x54 @ (capture/compare mode register 3 output mode) 
        .equ TIM8_CCMR3_Output_OC5FE, 1 << 2   @ bitWidth 1 (Output compare 5 fast enable)  
        .equ TIM8_CCMR3_Output_OC5PE, 1 << 3   @ bitWidth 1 (Output compare 5 preload enable)  
        .equ TIM8_CCMR3_Output_OC5M_Shift, 4   @ bitWidth 3 (Output compare 5 mode)  
        .equ TIM8_CCMR3_Output_OC5CE, 1 << 7   @ bitWidth 1 (Output compare 5 clear enable)  
        .equ TIM8_CCMR3_Output_OC6FE, 1 << 10   @ bitWidth 1 (Output compare 6 fast enable)  
        .equ TIM8_CCMR3_Output_OC6PE, 1 << 11   @ bitWidth 1 (Output compare 6 preload enable)  
        .equ TIM8_CCMR3_Output_OC6M_Shift, 12   @ bitWidth 3 (Output compare 6 mode)  
        .equ TIM8_CCMR3_Output_OC6CE, 1 << 15   @ bitWidth 1 (Output compare 6 clear enable)  
        .equ TIM8_CCMR3_Output_OC5M3, 1 << 16   @ bitWidth 1 (Output Compare 5 mode)  
        .equ TIM8_CCMR3_Output_OC6M3, 1 << 24   @ bitWidth 1 (Output Compare 6 mode)  
 
    .equ TIM8_CCR5, TIM8_BASE + 0x58 @ (capture/compare register 5) 
        .equ TIM8_CCR5_CCR5_Shift, 0   @ bitWidth 16 (Capture/Compare 5 value)  
        .equ TIM8_CCR5_GC5C1, 1 << 29   @ bitWidth 1 (Group Channel 5 and Channel 1)  
        .equ TIM8_CCR5_GC5C2, 1 << 30   @ bitWidth 1 (Group Channel 5 and Channel 2)  
        .equ TIM8_CCR5_GC5C3, 1 << 31   @ bitWidth 1 (Group Channel 5 and Channel 3)  
 
    .equ TIM8_CRR6, TIM8_BASE + 0x5C @ (capture/compare register 6) 
        .equ TIM8_CRR6_CCR6_Shift, 0   @ bitWidth 16 (Capture/Compare 6 value)  
 

@=========================== TIM2 ===========================@
.equ TIM2_BASE, 0x40000000 @ (General purpose timers) 
    .equ TIM2_CR1, TIM2_BASE + 0x0 @ (control register 1) 
        .equ TIM2_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM2_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM2_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode selection)  
        .equ TIM2_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM2_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM2_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM2_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM2_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM2_CR2, TIM2_BASE + 0x4 @ (control register 2) 
        .equ TIM2_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM2_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM2_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA selection)  
 
    .equ TIM2_SMCR, TIM2_BASE + 0x8 @ (slave mode control register) 
        .equ TIM2_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
        .equ TIM2_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM2_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM2_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM2_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM2_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM2_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM2_SMCR_SMS_3, 1 << 16   @ bitWidth 1 (Slave model selection - bit[3])  
 
    .equ TIM2_DIER, TIM2_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM2_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM2_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request enable)  
        .equ TIM2_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request enable)  
        .equ TIM2_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request enable)  
        .equ TIM2_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request enable)  
        .equ TIM2_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM2_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM2_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt enable)  
        .equ TIM2_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt enable)  
        .equ TIM2_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt enable)  
        .equ TIM2_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM2_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM2_SR, TIM2_BASE + 0x10 @ (status register) 
        .equ TIM2_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture flag)  
        .equ TIM2_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture flag)  
        .equ TIM2_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture flag)  
        .equ TIM2_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM2_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM2_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt flag)  
        .equ TIM2_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt flag)  
        .equ TIM2_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt flag)  
        .equ TIM2_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM2_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM2_EGR, TIM2_BASE + 0x14 @ (event generation register) 
        .equ TIM2_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM2_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4 generation)  
        .equ TIM2_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3 generation)  
        .equ TIM2_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2 generation)  
        .equ TIM2_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM2_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM2_CCMR1_Output, TIM2_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM2_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (OC2CE)  
        .equ TIM2_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (OC2M)  
        .equ TIM2_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (OC2PE)  
        .equ TIM2_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (OC2FE)  
        .equ TIM2_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (CC2S)  
        .equ TIM2_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (OC1CE)  
        .equ TIM2_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (OC1M)  
        .equ TIM2_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (OC1PE)  
        .equ TIM2_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (OC1FE)  
        .equ TIM2_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM2_CCMR1_Input, TIM2_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM2_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM2_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM2_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM2_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM2_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM2_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM2_CCMR2_Output, TIM2_BASE + 0x1C @ (capture/compare mode register 2 output mode) 
        .equ TIM2_CCMR2_Output_O24CE, 1 << 15   @ bitWidth 1 (O24CE)  
        .equ TIM2_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (OC4M)  
        .equ TIM2_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (OC4PE)  
        .equ TIM2_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (OC4FE)  
        .equ TIM2_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (CC4S)  
        .equ TIM2_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (OC3CE)  
        .equ TIM2_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (OC3M)  
        .equ TIM2_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (OC3PE)  
        .equ TIM2_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (OC3FE)  
        .equ TIM2_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (CC3S)  
 
    .equ TIM2_CCMR2_Input, TIM2_BASE + 0x1C @ (capture/compare mode register 2 input mode) 
        .equ TIM2_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM2_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM2_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM2_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM2_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM2_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3 selection)  
 
    .equ TIM2_CCER, TIM2_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM2_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output Polarity)  
        .equ TIM2_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM2_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output enable)  
        .equ TIM2_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM2_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM2_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output enable)  
        .equ TIM2_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM2_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM2_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output enable)  
        .equ TIM2_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM2_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM2_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM2_CNT, TIM2_BASE + 0x24 @ (counter) 
        .equ TIM2_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value)  
        .equ TIM2_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM2_PSC, TIM2_BASE + 0x28 @ (prescaler) 
        .equ TIM2_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM2_ARR, TIM2_BASE + 0x2C @ (auto-reload register) 
        .equ TIM2_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value)  
        .equ TIM2_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM2_CCR1, TIM2_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM2_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1 value)  
        .equ TIM2_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1 value)  
 
    .equ TIM2_CCR2, TIM2_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM2_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2 value)  
        .equ TIM2_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2 value)  
 
    .equ TIM2_CCR3, TIM2_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM2_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM2_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM2_CCR4, TIM2_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM2_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM2_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM2_DCR, TIM2_BASE + 0x48 @ (DMA control register) 
        .equ TIM2_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM2_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM2_DMAR, TIM2_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM2_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst accesses)  
 
    .equ TIM2_OR1, TIM2_BASE + 0x50 @ (TIM2 option register 1) 
        .equ TIM2_OR1_TI4_RMP_Shift, 2   @ bitWidth 2 (Input Capture 4 remap)  
        .equ TIM2_OR1_ETR1_RMP, 1 << 1   @ bitWidth 1 (External trigger remap)  
        .equ TIM2_OR1_ITR1_RMP, 1 << 0   @ bitWidth 1 (Internal trigger 1 remap)  
 
    .equ TIM2_OR2, TIM2_BASE + 0x60 @ (TIM2 option register 2) 
        .equ TIM2_OR2_ETRSEL_Shift, 14   @ bitWidth 3 (ETR source selection)  
 

@=========================== TIM3 ===========================@
.equ TIM3_BASE, 0x40000400 @ (General purpose timers) 
    .equ TIM3_CR1, TIM3_BASE + 0x0 @ (control register 1) 
        .equ TIM3_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM3_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM3_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode selection)  
        .equ TIM3_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM3_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM3_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM3_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM3_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM3_CR2, TIM3_BASE + 0x4 @ (control register 2) 
        .equ TIM3_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM3_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM3_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA selection)  
 
    .equ TIM3_SMCR, TIM3_BASE + 0x8 @ (slave mode control register) 
        .equ TIM3_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
        .equ TIM3_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM3_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM3_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM3_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM3_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM3_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM3_SMCR_SMS_3, 1 << 16   @ bitWidth 1 (Slave model selection - bit[3])  
 
    .equ TIM3_DIER, TIM3_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM3_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM3_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request enable)  
        .equ TIM3_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request enable)  
        .equ TIM3_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request enable)  
        .equ TIM3_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request enable)  
        .equ TIM3_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM3_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM3_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt enable)  
        .equ TIM3_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt enable)  
        .equ TIM3_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt enable)  
        .equ TIM3_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM3_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM3_SR, TIM3_BASE + 0x10 @ (status register) 
        .equ TIM3_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture flag)  
        .equ TIM3_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture flag)  
        .equ TIM3_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture flag)  
        .equ TIM3_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM3_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM3_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt flag)  
        .equ TIM3_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt flag)  
        .equ TIM3_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt flag)  
        .equ TIM3_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM3_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM3_EGR, TIM3_BASE + 0x14 @ (event generation register) 
        .equ TIM3_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM3_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4 generation)  
        .equ TIM3_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3 generation)  
        .equ TIM3_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2 generation)  
        .equ TIM3_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM3_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM3_CCMR1_Output, TIM3_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM3_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (OC2CE)  
        .equ TIM3_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (OC2M)  
        .equ TIM3_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (OC2PE)  
        .equ TIM3_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (OC2FE)  
        .equ TIM3_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (CC2S)  
        .equ TIM3_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (OC1CE)  
        .equ TIM3_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (OC1M)  
        .equ TIM3_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (OC1PE)  
        .equ TIM3_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (OC1FE)  
        .equ TIM3_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM3_CCMR1_Input, TIM3_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM3_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM3_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM3_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM3_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM3_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM3_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM3_CCMR2_Output, TIM3_BASE + 0x1C @ (capture/compare mode register 2 output mode) 
        .equ TIM3_CCMR2_Output_O24CE, 1 << 15   @ bitWidth 1 (O24CE)  
        .equ TIM3_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (OC4M)  
        .equ TIM3_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (OC4PE)  
        .equ TIM3_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (OC4FE)  
        .equ TIM3_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (CC4S)  
        .equ TIM3_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (OC3CE)  
        .equ TIM3_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (OC3M)  
        .equ TIM3_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (OC3PE)  
        .equ TIM3_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (OC3FE)  
        .equ TIM3_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (CC3S)  
 
    .equ TIM3_CCMR2_Input, TIM3_BASE + 0x1C @ (capture/compare mode register 2 input mode) 
        .equ TIM3_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM3_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM3_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM3_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM3_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM3_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3 selection)  
 
    .equ TIM3_CCER, TIM3_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM3_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output Polarity)  
        .equ TIM3_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM3_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output enable)  
        .equ TIM3_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM3_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM3_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output enable)  
        .equ TIM3_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM3_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM3_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output enable)  
        .equ TIM3_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM3_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM3_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM3_CNT, TIM3_BASE + 0x24 @ (counter) 
        .equ TIM3_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value)  
        .equ TIM3_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM3_PSC, TIM3_BASE + 0x28 @ (prescaler) 
        .equ TIM3_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM3_ARR, TIM3_BASE + 0x2C @ (auto-reload register) 
        .equ TIM3_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value)  
        .equ TIM3_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM3_CCR1, TIM3_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM3_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1 value)  
        .equ TIM3_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1 value)  
 
    .equ TIM3_CCR2, TIM3_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM3_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2 value)  
        .equ TIM3_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2 value)  
 
    .equ TIM3_CCR3, TIM3_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM3_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM3_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM3_CCR4, TIM3_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM3_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM3_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM3_DCR, TIM3_BASE + 0x48 @ (DMA control register) 
        .equ TIM3_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM3_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM3_DMAR, TIM3_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM3_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst accesses)  
 
    .equ TIM3_OR1, TIM3_BASE + 0x50 @ (TIM3 option register 1) 
        .equ TIM3_OR1_TI1_RMP_Shift, 0   @ bitWidth 2 (Input Capture 1 remap)  
 
    .equ TIM3_OR2, TIM3_BASE + 0x60 @ (TIM3 option register 2) 
        .equ TIM3_OR2_ETRSEL_Shift, 14   @ bitWidth 3 (ETR source selection)  
 

@=========================== TIM4 ===========================@
.equ TIM4_BASE, 0x40000800 @ (General purpose timers) 
    .equ TIM4_CR1, TIM4_BASE + 0x0 @ (control register 1) 
        .equ TIM4_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM4_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM4_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode selection)  
        .equ TIM4_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM4_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM4_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM4_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM4_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM4_CR2, TIM4_BASE + 0x4 @ (control register 2) 
        .equ TIM4_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM4_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM4_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA selection)  
 
    .equ TIM4_SMCR, TIM4_BASE + 0x8 @ (slave mode control register) 
        .equ TIM4_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
        .equ TIM4_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM4_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM4_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM4_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM4_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM4_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM4_SMCR_SMS_3, 1 << 16   @ bitWidth 1 (Slave model selection - bit[3])  
 
    .equ TIM4_DIER, TIM4_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM4_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM4_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request enable)  
        .equ TIM4_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request enable)  
        .equ TIM4_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request enable)  
        .equ TIM4_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request enable)  
        .equ TIM4_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM4_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM4_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt enable)  
        .equ TIM4_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt enable)  
        .equ TIM4_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt enable)  
        .equ TIM4_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM4_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM4_SR, TIM4_BASE + 0x10 @ (status register) 
        .equ TIM4_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture flag)  
        .equ TIM4_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture flag)  
        .equ TIM4_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture flag)  
        .equ TIM4_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM4_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM4_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt flag)  
        .equ TIM4_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt flag)  
        .equ TIM4_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt flag)  
        .equ TIM4_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM4_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM4_EGR, TIM4_BASE + 0x14 @ (event generation register) 
        .equ TIM4_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM4_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4 generation)  
        .equ TIM4_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3 generation)  
        .equ TIM4_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2 generation)  
        .equ TIM4_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM4_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM4_CCMR1_Output, TIM4_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM4_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (OC2CE)  
        .equ TIM4_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (OC2M)  
        .equ TIM4_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (OC2PE)  
        .equ TIM4_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (OC2FE)  
        .equ TIM4_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (CC2S)  
        .equ TIM4_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (OC1CE)  
        .equ TIM4_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (OC1M)  
        .equ TIM4_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (OC1PE)  
        .equ TIM4_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (OC1FE)  
        .equ TIM4_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM4_CCMR1_Input, TIM4_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM4_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM4_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM4_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM4_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM4_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM4_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM4_CCMR2_Output, TIM4_BASE + 0x1C @ (capture/compare mode register 2 output mode) 
        .equ TIM4_CCMR2_Output_O24CE, 1 << 15   @ bitWidth 1 (O24CE)  
        .equ TIM4_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (OC4M)  
        .equ TIM4_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (OC4PE)  
        .equ TIM4_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (OC4FE)  
        .equ TIM4_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (CC4S)  
        .equ TIM4_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (OC3CE)  
        .equ TIM4_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (OC3M)  
        .equ TIM4_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (OC3PE)  
        .equ TIM4_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (OC3FE)  
        .equ TIM4_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (CC3S)  
 
    .equ TIM4_CCMR2_Input, TIM4_BASE + 0x1C @ (capture/compare mode register 2 input mode) 
        .equ TIM4_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM4_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM4_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM4_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM4_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM4_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3 selection)  
 
    .equ TIM4_CCER, TIM4_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM4_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output Polarity)  
        .equ TIM4_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM4_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output enable)  
        .equ TIM4_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM4_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM4_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output enable)  
        .equ TIM4_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM4_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM4_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output enable)  
        .equ TIM4_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM4_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM4_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM4_CNT, TIM4_BASE + 0x24 @ (counter) 
        .equ TIM4_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value)  
        .equ TIM4_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM4_PSC, TIM4_BASE + 0x28 @ (prescaler) 
        .equ TIM4_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM4_ARR, TIM4_BASE + 0x2C @ (auto-reload register) 
        .equ TIM4_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value)  
        .equ TIM4_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM4_CCR1, TIM4_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM4_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1 value)  
        .equ TIM4_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1 value)  
 
    .equ TIM4_CCR2, TIM4_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM4_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2 value)  
        .equ TIM4_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2 value)  
 
    .equ TIM4_CCR3, TIM4_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM4_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM4_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM4_CCR4, TIM4_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM4_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM4_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM4_DCR, TIM4_BASE + 0x48 @ (DMA control register) 
        .equ TIM4_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM4_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM4_DMAR, TIM4_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM4_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst accesses)  
 

@=========================== TIM5 ===========================@
.equ TIM5_BASE, 0x40000C00 @ (General purpose timers) 
    .equ TIM5_CR1, TIM5_BASE + 0x0 @ (control register 1) 
        .equ TIM5_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM5_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM5_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode selection)  
        .equ TIM5_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM5_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM5_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM5_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM5_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM5_CR2, TIM5_BASE + 0x4 @ (control register 2) 
        .equ TIM5_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM5_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM5_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA selection)  
 
    .equ TIM5_SMCR, TIM5_BASE + 0x8 @ (slave mode control register) 
        .equ TIM5_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
        .equ TIM5_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM5_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM5_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM5_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM5_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM5_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM5_SMCR_SMS_3, 1 << 16   @ bitWidth 1 (Slave model selection - bit[3])  
 
    .equ TIM5_DIER, TIM5_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM5_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM5_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request enable)  
        .equ TIM5_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request enable)  
        .equ TIM5_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request enable)  
        .equ TIM5_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request enable)  
        .equ TIM5_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM5_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM5_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt enable)  
        .equ TIM5_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt enable)  
        .equ TIM5_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt enable)  
        .equ TIM5_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM5_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM5_SR, TIM5_BASE + 0x10 @ (status register) 
        .equ TIM5_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture flag)  
        .equ TIM5_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture flag)  
        .equ TIM5_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture flag)  
        .equ TIM5_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM5_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM5_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt flag)  
        .equ TIM5_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt flag)  
        .equ TIM5_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt flag)  
        .equ TIM5_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM5_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM5_EGR, TIM5_BASE + 0x14 @ (event generation register) 
        .equ TIM5_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM5_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4 generation)  
        .equ TIM5_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3 generation)  
        .equ TIM5_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2 generation)  
        .equ TIM5_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM5_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM5_CCMR1_Output, TIM5_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM5_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (OC2CE)  
        .equ TIM5_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (OC2M)  
        .equ TIM5_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (OC2PE)  
        .equ TIM5_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (OC2FE)  
        .equ TIM5_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (CC2S)  
        .equ TIM5_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (OC1CE)  
        .equ TIM5_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (OC1M)  
        .equ TIM5_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (OC1PE)  
        .equ TIM5_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (OC1FE)  
        .equ TIM5_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM5_CCMR1_Input, TIM5_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM5_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM5_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM5_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM5_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM5_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM5_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM5_CCMR2_Output, TIM5_BASE + 0x1C @ (capture/compare mode register 2 output mode) 
        .equ TIM5_CCMR2_Output_O24CE, 1 << 15   @ bitWidth 1 (O24CE)  
        .equ TIM5_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (OC4M)  
        .equ TIM5_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (OC4PE)  
        .equ TIM5_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (OC4FE)  
        .equ TIM5_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (CC4S)  
        .equ TIM5_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (OC3CE)  
        .equ TIM5_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (OC3M)  
        .equ TIM5_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (OC3PE)  
        .equ TIM5_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (OC3FE)  
        .equ TIM5_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (CC3S)  
 
    .equ TIM5_CCMR2_Input, TIM5_BASE + 0x1C @ (capture/compare mode register 2 input mode) 
        .equ TIM5_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM5_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM5_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM5_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM5_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM5_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3 selection)  
 
    .equ TIM5_CCER, TIM5_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM5_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output Polarity)  
        .equ TIM5_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM5_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output enable)  
        .equ TIM5_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM5_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM5_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output enable)  
        .equ TIM5_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM5_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM5_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output enable)  
        .equ TIM5_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM5_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM5_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM5_CNT, TIM5_BASE + 0x24 @ (counter) 
        .equ TIM5_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value)  
        .equ TIM5_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM5_PSC, TIM5_BASE + 0x28 @ (prescaler) 
        .equ TIM5_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM5_ARR, TIM5_BASE + 0x2C @ (auto-reload register) 
        .equ TIM5_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value)  
        .equ TIM5_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM5_CCR1, TIM5_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM5_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1 value)  
        .equ TIM5_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1 value)  
 
    .equ TIM5_CCR2, TIM5_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM5_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2 value)  
        .equ TIM5_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2 value)  
 
    .equ TIM5_CCR3, TIM5_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM5_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM5_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM5_CCR4, TIM5_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM5_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM5_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM5_DCR, TIM5_BASE + 0x48 @ (DMA control register) 
        .equ TIM5_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM5_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM5_DMAR, TIM5_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM5_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst accesses)  
 

@=========================== TIM9 ===========================@
.equ TIM9_BASE, 0x40014000 @ (General purpose timers) 
    .equ TIM9_CR1, TIM9_BASE + 0x0 @ (control register 1) 
        .equ TIM9_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM9_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM9_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM9_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM9_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM9_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM9_SMCR, TIM9_BASE + 0x8 @ (slave mode control register) 
        .equ TIM9_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM9_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM9_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM9_DIER, TIM9_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM9_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM9_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt enable)  
        .equ TIM9_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM9_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM9_SR, TIM9_BASE + 0x10 @ (status register) 
        .equ TIM9_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture flag)  
        .equ TIM9_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM9_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM9_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt flag)  
        .equ TIM9_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM9_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM9_EGR, TIM9_BASE + 0x14 @ (event generation register) 
        .equ TIM9_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM9_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2 generation)  
        .equ TIM9_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM9_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM9_CCMR1_Output, TIM9_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM9_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM9_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output Compare 2 preload enable)  
        .equ TIM9_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output Compare 2 fast enable)  
        .equ TIM9_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM9_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM9_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload enable)  
        .equ TIM9_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast enable)  
        .equ TIM9_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM9_CCMR1_Input, TIM9_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM9_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 3 (Input capture 2 filter)  
        .equ TIM9_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM9_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM9_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 3 (Input capture 1 filter)  
        .equ TIM9_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM9_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM9_CCER, TIM9_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM9_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM9_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM9_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output enable)  
        .equ TIM9_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM9_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM9_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM9_CNT, TIM9_BASE + 0x24 @ (counter) 
        .equ TIM9_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM9_PSC, TIM9_BASE + 0x28 @ (prescaler) 
        .equ TIM9_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM9_ARR, TIM9_BASE + 0x2C @ (auto-reload register) 
        .equ TIM9_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM9_CCR1, TIM9_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM9_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM9_CCR2, TIM9_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM9_CCR2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 

@=========================== TIM12 ===========================@
.equ TIM12_BASE, 0x40001800 @ (General purpose timers) 
    .equ TIM12_CR1, TIM12_BASE + 0x0 @ (control register 1) 
        .equ TIM12_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM12_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM12_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM12_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM12_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM12_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM12_SMCR, TIM12_BASE + 0x8 @ (slave mode control register) 
        .equ TIM12_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM12_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM12_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM12_DIER, TIM12_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM12_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM12_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt enable)  
        .equ TIM12_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM12_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM12_SR, TIM12_BASE + 0x10 @ (status register) 
        .equ TIM12_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture flag)  
        .equ TIM12_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM12_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM12_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt flag)  
        .equ TIM12_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM12_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM12_EGR, TIM12_BASE + 0x14 @ (event generation register) 
        .equ TIM12_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM12_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2 generation)  
        .equ TIM12_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM12_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM12_CCMR1_Output, TIM12_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM12_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM12_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output Compare 2 preload enable)  
        .equ TIM12_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output Compare 2 fast enable)  
        .equ TIM12_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM12_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM12_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload enable)  
        .equ TIM12_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast enable)  
        .equ TIM12_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM12_CCMR1_Input, TIM12_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM12_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 3 (Input capture 2 filter)  
        .equ TIM12_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM12_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM12_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 3 (Input capture 1 filter)  
        .equ TIM12_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM12_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM12_CCER, TIM12_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM12_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM12_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM12_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output enable)  
        .equ TIM12_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM12_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM12_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM12_CNT, TIM12_BASE + 0x24 @ (counter) 
        .equ TIM12_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM12_PSC, TIM12_BASE + 0x28 @ (prescaler) 
        .equ TIM12_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM12_ARR, TIM12_BASE + 0x2C @ (auto-reload register) 
        .equ TIM12_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM12_CCR1, TIM12_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM12_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM12_CCR2, TIM12_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM12_CCR2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 

@=========================== TIM10 ===========================@
.equ TIM10_BASE, 0x40014400 @ (General-purpose-timers) 
    .equ TIM10_CR1, TIM10_BASE + 0x0 @ (control register 1) 
        .equ TIM10_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM10_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM10_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM10_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM10_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM10_DIER, TIM10_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM10_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM10_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM10_SR, TIM10_BASE + 0x10 @ (status register) 
        .equ TIM10_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM10_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM10_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM10_EGR, TIM10_BASE + 0x14 @ (event generation register) 
        .equ TIM10_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM10_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM10_CCMR1_Output, TIM10_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM10_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM10_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload enable)  
        .equ TIM10_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast enable)  
        .equ TIM10_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM10_CCMR1_Input, TIM10_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM10_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM10_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM10_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM10_CCER, TIM10_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM10_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM10_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM10_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM10_CNT, TIM10_BASE + 0x24 @ (counter) 
        .equ TIM10_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM10_PSC, TIM10_BASE + 0x28 @ (prescaler) 
        .equ TIM10_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM10_ARR, TIM10_BASE + 0x2C @ (auto-reload register) 
        .equ TIM10_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM10_CCR1, TIM10_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM10_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM10_SMCR, TIM10_BASE + 0x8 @ (slave mode control register) 
        .equ TIM10_SMCR_SMS3, 1 << 16   @ bitWidth 1 (Slave mode selection)  
        .equ TIM10_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM10_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM10_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM10_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM10_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/slave mode)  
        .equ TIM10_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM10_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM10_OR, TIM10_BASE + 0x50 @ (option register) 
        .equ TIM10_OR_TI1_RMP_Shift, 0   @ bitWidth 2 (TIM11 Input 1 remapping capability)  
 

@=========================== TIM11 ===========================@
.equ TIM11_BASE, 0x40014800 @ (General-purpose-timers) 
    .equ TIM11_CR1, TIM11_BASE + 0x0 @ (control register 1) 
        .equ TIM11_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM11_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM11_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM11_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM11_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM11_DIER, TIM11_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM11_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM11_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM11_SR, TIM11_BASE + 0x10 @ (status register) 
        .equ TIM11_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM11_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM11_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM11_EGR, TIM11_BASE + 0x14 @ (event generation register) 
        .equ TIM11_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM11_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM11_CCMR1_Output, TIM11_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM11_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM11_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload enable)  
        .equ TIM11_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast enable)  
        .equ TIM11_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM11_CCMR1_Input, TIM11_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM11_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM11_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM11_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM11_CCER, TIM11_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM11_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM11_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM11_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM11_CNT, TIM11_BASE + 0x24 @ (counter) 
        .equ TIM11_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM11_PSC, TIM11_BASE + 0x28 @ (prescaler) 
        .equ TIM11_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM11_ARR, TIM11_BASE + 0x2C @ (auto-reload register) 
        .equ TIM11_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM11_CCR1, TIM11_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM11_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM11_SMCR, TIM11_BASE + 0x8 @ (slave mode control register) 
        .equ TIM11_SMCR_SMS3, 1 << 16   @ bitWidth 1 (Slave mode selection)  
        .equ TIM11_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM11_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM11_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM11_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM11_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/slave mode)  
        .equ TIM11_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM11_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM11_OR, TIM11_BASE + 0x50 @ (option register) 
        .equ TIM11_OR_TI1_RMP_Shift, 0   @ bitWidth 2 (TIM11 Input 1 remapping capability)  
 

@=========================== TIM13 ===========================@
.equ TIM13_BASE, 0x40001C00 @ (General-purpose-timers) 
    .equ TIM13_CR1, TIM13_BASE + 0x0 @ (control register 1) 
        .equ TIM13_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM13_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM13_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM13_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM13_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM13_DIER, TIM13_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM13_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM13_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM13_SR, TIM13_BASE + 0x10 @ (status register) 
        .equ TIM13_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM13_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM13_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM13_EGR, TIM13_BASE + 0x14 @ (event generation register) 
        .equ TIM13_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM13_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM13_CCMR1_Output, TIM13_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM13_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM13_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload enable)  
        .equ TIM13_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast enable)  
        .equ TIM13_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM13_CCMR1_Input, TIM13_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM13_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM13_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM13_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM13_CCER, TIM13_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM13_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM13_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM13_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM13_CNT, TIM13_BASE + 0x24 @ (counter) 
        .equ TIM13_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM13_PSC, TIM13_BASE + 0x28 @ (prescaler) 
        .equ TIM13_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM13_ARR, TIM13_BASE + 0x2C @ (auto-reload register) 
        .equ TIM13_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM13_CCR1, TIM13_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM13_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM13_SMCR, TIM13_BASE + 0x8 @ (slave mode control register) 
        .equ TIM13_SMCR_SMS3, 1 << 16   @ bitWidth 1 (Slave mode selection)  
        .equ TIM13_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM13_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM13_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM13_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM13_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/slave mode)  
        .equ TIM13_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM13_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM13_OR, TIM13_BASE + 0x50 @ (option register) 
        .equ TIM13_OR_TI1_RMP_Shift, 0   @ bitWidth 2 (TIM11 Input 1 remapping capability)  
 

@=========================== TIM14 ===========================@
.equ TIM14_BASE, 0x40002000 @ (General-purpose-timers) 
    .equ TIM14_CR1, TIM14_BASE + 0x0 @ (control register 1) 
        .equ TIM14_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM14_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM14_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM14_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM14_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM14_DIER, TIM14_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM14_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM14_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM14_SR, TIM14_BASE + 0x10 @ (status register) 
        .equ TIM14_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM14_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM14_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM14_EGR, TIM14_BASE + 0x14 @ (event generation register) 
        .equ TIM14_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM14_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM14_CCMR1_Output, TIM14_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM14_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM14_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload enable)  
        .equ TIM14_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast enable)  
        .equ TIM14_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM14_CCMR1_Input, TIM14_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM14_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM14_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM14_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM14_CCER, TIM14_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM14_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM14_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM14_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM14_CNT, TIM14_BASE + 0x24 @ (counter) 
        .equ TIM14_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM14_PSC, TIM14_BASE + 0x28 @ (prescaler) 
        .equ TIM14_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM14_ARR, TIM14_BASE + 0x2C @ (auto-reload register) 
        .equ TIM14_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM14_CCR1, TIM14_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM14_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM14_SMCR, TIM14_BASE + 0x8 @ (slave mode control register) 
        .equ TIM14_SMCR_SMS3, 1 << 16   @ bitWidth 1 (Slave mode selection)  
        .equ TIM14_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM14_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM14_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM14_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM14_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/slave mode)  
        .equ TIM14_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM14_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM14_OR, TIM14_BASE + 0x50 @ (option register) 
        .equ TIM14_OR_TI1_RMP_Shift, 0   @ bitWidth 2 (TIM11 Input 1 remapping capability)  
 

@=========================== TIM6 ===========================@
.equ TIM6_BASE, 0x40001000 @ (Basic timers) 
    .equ TIM6_CR1, TIM6_BASE + 0x0 @ (control register 1) 
        .equ TIM6_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM6_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM6_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM6_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM6_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM6_CR2, TIM6_BASE + 0x4 @ (control register 2) 
        .equ TIM6_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM6_DIER, TIM6_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM6_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM6_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM6_SR, TIM6_BASE + 0x10 @ (status register) 
        .equ TIM6_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM6_EGR, TIM6_BASE + 0x14 @ (event generation register) 
        .equ TIM6_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM6_CNT, TIM6_BASE + 0x24 @ (counter) 
        .equ TIM6_CNT_CNT_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM6_PSC, TIM6_BASE + 0x28 @ (prescaler) 
        .equ TIM6_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM6_ARR, TIM6_BASE + 0x2C @ (auto-reload register) 
        .equ TIM6_ARR_ARR_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 

@=========================== TIM7 ===========================@
.equ TIM7_BASE, 0x40001400 @ (Basic timers) 
    .equ TIM7_CR1, TIM7_BASE + 0x0 @ (control register 1) 
        .equ TIM7_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM7_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM7_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM7_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM7_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM7_CR2, TIM7_BASE + 0x4 @ (control register 2) 
        .equ TIM7_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM7_DIER, TIM7_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM7_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM7_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM7_SR, TIM7_BASE + 0x10 @ (status register) 
        .equ TIM7_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM7_EGR, TIM7_BASE + 0x14 @ (event generation register) 
        .equ TIM7_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM7_CNT, TIM7_BASE + 0x24 @ (counter) 
        .equ TIM7_CNT_CNT_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM7_PSC, TIM7_BASE + 0x28 @ (prescaler) 
        .equ TIM7_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM7_ARR, TIM7_BASE + 0x2C @ (auto-reload register) 
        .equ TIM7_ARR_ARR_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 

@=========================== Ethernet_MAC ===========================@
.equ Ethernet_MAC_BASE, 0x40028000 @ (Ethernet: media access control MAC) 
    .equ Ethernet_MAC_MACCR, Ethernet_MAC_BASE + 0x0 @ (Ethernet MAC configuration register) 
        .equ Ethernet_MAC_MACCR_RE, 1 << 2   @ bitWidth 1 (RE)  
        .equ Ethernet_MAC_MACCR_TE, 1 << 3   @ bitWidth 1 (TE)  
        .equ Ethernet_MAC_MACCR_DC, 1 << 4   @ bitWidth 1 (DC)  
        .equ Ethernet_MAC_MACCR_BL_Shift, 5   @ bitWidth 2 (BL)  
        .equ Ethernet_MAC_MACCR_APCS, 1 << 7   @ bitWidth 1 (APCS)  
        .equ Ethernet_MAC_MACCR_RD, 1 << 9   @ bitWidth 1 (RD)  
        .equ Ethernet_MAC_MACCR_IPCO, 1 << 10   @ bitWidth 1 (IPCO)  
        .equ Ethernet_MAC_MACCR_DM, 1 << 11   @ bitWidth 1 (DM)  
        .equ Ethernet_MAC_MACCR_LM, 1 << 12   @ bitWidth 1 (LM)  
        .equ Ethernet_MAC_MACCR_ROD, 1 << 13   @ bitWidth 1 (ROD)  
        .equ Ethernet_MAC_MACCR_FES, 1 << 14   @ bitWidth 1 (FES)  
        .equ Ethernet_MAC_MACCR_CSD, 1 << 16   @ bitWidth 1 (CSD)  
        .equ Ethernet_MAC_MACCR_IFG_Shift, 17   @ bitWidth 3 (IFG)  
        .equ Ethernet_MAC_MACCR_JD, 1 << 22   @ bitWidth 1 (JD)  
        .equ Ethernet_MAC_MACCR_WD, 1 << 23   @ bitWidth 1 (WD)  
        .equ Ethernet_MAC_MACCR_CSTF, 1 << 25   @ bitWidth 1 (CSTF)  
 
    .equ Ethernet_MAC_MACFFR, Ethernet_MAC_BASE + 0x4 @ (Ethernet MAC frame filter register) 
        .equ Ethernet_MAC_MACFFR_PM, 1 << 0   @ bitWidth 1 (PM)  
        .equ Ethernet_MAC_MACFFR_HU, 1 << 1   @ bitWidth 1 (HU)  
        .equ Ethernet_MAC_MACFFR_HM, 1 << 2   @ bitWidth 1 (HM)  
        .equ Ethernet_MAC_MACFFR_DAIF, 1 << 3   @ bitWidth 1 (DAIF)  
        .equ Ethernet_MAC_MACFFR_RAM, 1 << 4   @ bitWidth 1 (RAM)  
        .equ Ethernet_MAC_MACFFR_BFD, 1 << 5   @ bitWidth 1 (BFD)  
        .equ Ethernet_MAC_MACFFR_PCF, 1 << 6   @ bitWidth 1 (PCF)  
        .equ Ethernet_MAC_MACFFR_SAIF, 1 << 7   @ bitWidth 1 (SAIF)  
        .equ Ethernet_MAC_MACFFR_SAF, 1 << 8   @ bitWidth 1 (SAF)  
        .equ Ethernet_MAC_MACFFR_HPF, 1 << 9   @ bitWidth 1 (HPF)  
        .equ Ethernet_MAC_MACFFR_RA, 1 << 31   @ bitWidth 1 (RA)  
 
    .equ Ethernet_MAC_MACHTHR, Ethernet_MAC_BASE + 0x8 @ (Ethernet MAC hash table high register) 
        .equ Ethernet_MAC_MACHTHR_HTH_Shift, 0   @ bitWidth 32 (HTH)  
 
    .equ Ethernet_MAC_MACHTLR, Ethernet_MAC_BASE + 0xC @ (Ethernet MAC hash table low register) 
        .equ Ethernet_MAC_MACHTLR_HTL_Shift, 0   @ bitWidth 32 (HTL)  
 
    .equ Ethernet_MAC_MACMIIAR, Ethernet_MAC_BASE + 0x10 @ (Ethernet MAC MII address register) 
        .equ Ethernet_MAC_MACMIIAR_MB, 1 << 0   @ bitWidth 1 (MB)  
        .equ Ethernet_MAC_MACMIIAR_MW, 1 << 1   @ bitWidth 1 (MW)  
        .equ Ethernet_MAC_MACMIIAR_CR_Shift, 2   @ bitWidth 3 (CR)  
        .equ Ethernet_MAC_MACMIIAR_MR_Shift, 6   @ bitWidth 5 (MR)  
        .equ Ethernet_MAC_MACMIIAR_PA_Shift, 11   @ bitWidth 5 (PA)  
 
    .equ Ethernet_MAC_MACMIIDR, Ethernet_MAC_BASE + 0x14 @ (Ethernet MAC MII data register) 
        .equ Ethernet_MAC_MACMIIDR_TD_Shift, 0   @ bitWidth 16 (TD)  
 
    .equ Ethernet_MAC_MACFCR, Ethernet_MAC_BASE + 0x18 @ (Ethernet MAC flow control register) 
        .equ Ethernet_MAC_MACFCR_FCB, 1 << 0   @ bitWidth 1 (FCB)  
        .equ Ethernet_MAC_MACFCR_TFCE, 1 << 1   @ bitWidth 1 (TFCE)  
        .equ Ethernet_MAC_MACFCR_RFCE, 1 << 2   @ bitWidth 1 (RFCE)  
        .equ Ethernet_MAC_MACFCR_UPFD, 1 << 3   @ bitWidth 1 (UPFD)  
        .equ Ethernet_MAC_MACFCR_PLT_Shift, 4   @ bitWidth 2 (PLT)  
        .equ Ethernet_MAC_MACFCR_ZQPD, 1 << 7   @ bitWidth 1 (ZQPD)  
        .equ Ethernet_MAC_MACFCR_PT_Shift, 16   @ bitWidth 16 (PT)  
 
    .equ Ethernet_MAC_MACVLANTR, Ethernet_MAC_BASE + 0x1C @ (Ethernet MAC VLAN tag register) 
        .equ Ethernet_MAC_MACVLANTR_VLANTI_Shift, 0   @ bitWidth 16 (VLANTI)  
        .equ Ethernet_MAC_MACVLANTR_VLANTC, 1 << 16   @ bitWidth 1 (VLANTC)  
 
    .equ Ethernet_MAC_MACPMTCSR, Ethernet_MAC_BASE + 0x2C @ (Ethernet MAC PMT control and status register) 
        .equ Ethernet_MAC_MACPMTCSR_PD, 1 << 0   @ bitWidth 1 (PD)  
        .equ Ethernet_MAC_MACPMTCSR_MPE, 1 << 1   @ bitWidth 1 (MPE)  
        .equ Ethernet_MAC_MACPMTCSR_WFE, 1 << 2   @ bitWidth 1 (WFE)  
        .equ Ethernet_MAC_MACPMTCSR_MPR, 1 << 5   @ bitWidth 1 (MPR)  
        .equ Ethernet_MAC_MACPMTCSR_WFR, 1 << 6   @ bitWidth 1 (WFR)  
        .equ Ethernet_MAC_MACPMTCSR_GU, 1 << 9   @ bitWidth 1 (GU)  
        .equ Ethernet_MAC_MACPMTCSR_WFFRPR, 1 << 31   @ bitWidth 1 (WFFRPR)  
 
    .equ Ethernet_MAC_MACDBGR, Ethernet_MAC_BASE + 0x34 @ (Ethernet MAC debug register) 
        .equ Ethernet_MAC_MACDBGR_CR, 1 << 0   @ bitWidth 1 (CR)  
        .equ Ethernet_MAC_MACDBGR_CSR, 1 << 1   @ bitWidth 1 (CSR)  
        .equ Ethernet_MAC_MACDBGR_ROR, 1 << 2   @ bitWidth 1 (ROR)  
        .equ Ethernet_MAC_MACDBGR_MCF, 1 << 3   @ bitWidth 1 (MCF)  
        .equ Ethernet_MAC_MACDBGR_MCP, 1 << 4   @ bitWidth 1 (MCP)  
        .equ Ethernet_MAC_MACDBGR_MCFHP, 1 << 5   @ bitWidth 1 (MCFHP)  
 
    .equ Ethernet_MAC_MACSR, Ethernet_MAC_BASE + 0x38 @ (Ethernet MAC interrupt status register) 
        .equ Ethernet_MAC_MACSR_PMTS, 1 << 3   @ bitWidth 1 (PMTS)  
        .equ Ethernet_MAC_MACSR_MMCS, 1 << 4   @ bitWidth 1 (MMCS)  
        .equ Ethernet_MAC_MACSR_MMCRS, 1 << 5   @ bitWidth 1 (MMCRS)  
        .equ Ethernet_MAC_MACSR_MMCTS, 1 << 6   @ bitWidth 1 (MMCTS)  
        .equ Ethernet_MAC_MACSR_TSTS, 1 << 9   @ bitWidth 1 (TSTS)  
 
    .equ Ethernet_MAC_MACIMR, Ethernet_MAC_BASE + 0x3C @ (Ethernet MAC interrupt mask register) 
        .equ Ethernet_MAC_MACIMR_PMTIM, 1 << 3   @ bitWidth 1 (PMTIM)  
        .equ Ethernet_MAC_MACIMR_TSTIM, 1 << 9   @ bitWidth 1 (TSTIM)  
 
    .equ Ethernet_MAC_MACA0HR, Ethernet_MAC_BASE + 0x40 @ (Ethernet MAC address 0 high register) 
        .equ Ethernet_MAC_MACA0HR_MACA0H_Shift, 0   @ bitWidth 16 (MAC address0 high)  
        .equ Ethernet_MAC_MACA0HR_MO, 1 << 31   @ bitWidth 1 (Always 1)  
 
    .equ Ethernet_MAC_MACA0LR, Ethernet_MAC_BASE + 0x44 @ (Ethernet MAC address 0 low register) 
        .equ Ethernet_MAC_MACA0LR_MACA0L_Shift, 0   @ bitWidth 32 (0)  
 
    .equ Ethernet_MAC_MACA1HR, Ethernet_MAC_BASE + 0x48 @ (Ethernet MAC address 1 high register) 
        .equ Ethernet_MAC_MACA1HR_MACA1H_Shift, 0   @ bitWidth 16 (MACA1H)  
        .equ Ethernet_MAC_MACA1HR_MBC_Shift, 24   @ bitWidth 6 (MBC)  
        .equ Ethernet_MAC_MACA1HR_SA, 1 << 30   @ bitWidth 1 (SA)  
        .equ Ethernet_MAC_MACA1HR_AE, 1 << 31   @ bitWidth 1 (AE)  
 
    .equ Ethernet_MAC_MACA1LR, Ethernet_MAC_BASE + 0x4C @ (Ethernet MAC address1 low register) 
        .equ Ethernet_MAC_MACA1LR_MACA1LR_Shift, 0   @ bitWidth 32 (MACA1LR)  
 
    .equ Ethernet_MAC_MACA2HR, Ethernet_MAC_BASE + 0x50 @ (Ethernet MAC address 2 high register) 
        .equ Ethernet_MAC_MACA2HR_MAC2AH_Shift, 0   @ bitWidth 16 (MAC2AH)  
        .equ Ethernet_MAC_MACA2HR_MBC_Shift, 24   @ bitWidth 6 (MBC)  
        .equ Ethernet_MAC_MACA2HR_SA, 1 << 30   @ bitWidth 1 (SA)  
        .equ Ethernet_MAC_MACA2HR_AE, 1 << 31   @ bitWidth 1 (AE)  
 
    .equ Ethernet_MAC_MACA2LR, Ethernet_MAC_BASE + 0x54 @ (Ethernet MAC address 2 low register) 
        .equ Ethernet_MAC_MACA2LR_MACA2L_Shift, 0   @ bitWidth 31 (MACA2L)  
 
    .equ Ethernet_MAC_MACA3HR, Ethernet_MAC_BASE + 0x58 @ (Ethernet MAC address 3 high register) 
        .equ Ethernet_MAC_MACA3HR_MACA3H_Shift, 0   @ bitWidth 16 (MACA3H)  
        .equ Ethernet_MAC_MACA3HR_MBC_Shift, 24   @ bitWidth 6 (MBC)  
        .equ Ethernet_MAC_MACA3HR_SA, 1 << 30   @ bitWidth 1 (SA)  
        .equ Ethernet_MAC_MACA3HR_AE, 1 << 31   @ bitWidth 1 (AE)  
 
    .equ Ethernet_MAC_MACA3LR, Ethernet_MAC_BASE + 0x5C @ (Ethernet MAC address 3 low register) 
        .equ Ethernet_MAC_MACA3LR_MBCA3L_Shift, 0   @ bitWidth 32 (MBCA3L)  
 
    .equ Ethernet_MAC_MACRWUFFER, Ethernet_MAC_BASE + 0x60 @ (Ethernet MAC remote wakeup frame filter register) 
 

@=========================== Ethernet_MMC ===========================@
.equ Ethernet_MMC_BASE, 0x40028100 @ (Ethernet: MAC management counters) 
    .equ Ethernet_MMC_MMCCR, Ethernet_MMC_BASE + 0x0 @ (Ethernet MMC control register) 
        .equ Ethernet_MMC_MMCCR_CR, 1 << 0   @ bitWidth 1 (CR)  
        .equ Ethernet_MMC_MMCCR_CSR, 1 << 1   @ bitWidth 1 (CSR)  
        .equ Ethernet_MMC_MMCCR_ROR, 1 << 2   @ bitWidth 1 (ROR)  
        .equ Ethernet_MMC_MMCCR_MCF, 1 << 3   @ bitWidth 1 (MCF)  
        .equ Ethernet_MMC_MMCCR_MCP, 1 << 4   @ bitWidth 1 (MCP)  
        .equ Ethernet_MMC_MMCCR_MCFHP, 1 << 5   @ bitWidth 1 (MCFHP)  
 
    .equ Ethernet_MMC_MMCRIR, Ethernet_MMC_BASE + 0x4 @ (Ethernet MMC receive interrupt register) 
        .equ Ethernet_MMC_MMCRIR_RFCES, 1 << 5   @ bitWidth 1 (RFCES)  
        .equ Ethernet_MMC_MMCRIR_RFAES, 1 << 6   @ bitWidth 1 (RFAES)  
        .equ Ethernet_MMC_MMCRIR_RGUFS, 1 << 17   @ bitWidth 1 (RGUFS)  
 
    .equ Ethernet_MMC_MMCTIR, Ethernet_MMC_BASE + 0x8 @ (Ethernet MMC transmit interrupt register) 
        .equ Ethernet_MMC_MMCTIR_TGFSCS, 1 << 14   @ bitWidth 1 (TGFSCS)  
        .equ Ethernet_MMC_MMCTIR_TGFMSCS, 1 << 15   @ bitWidth 1 (TGFMSCS)  
        .equ Ethernet_MMC_MMCTIR_TGFS, 1 << 21   @ bitWidth 1 (TGFS)  
 
    .equ Ethernet_MMC_MMCRIMR, Ethernet_MMC_BASE + 0xC @ (Ethernet MMC receive interrupt mask register) 
        .equ Ethernet_MMC_MMCRIMR_RFCEM, 1 << 5   @ bitWidth 1 (RFCEM)  
        .equ Ethernet_MMC_MMCRIMR_RFAEM, 1 << 6   @ bitWidth 1 (RFAEM)  
        .equ Ethernet_MMC_MMCRIMR_RGUFM, 1 << 17   @ bitWidth 1 (RGUFM)  
 
    .equ Ethernet_MMC_MMCTIMR, Ethernet_MMC_BASE + 0x10 @ (Ethernet MMC transmit interrupt mask register) 
        .equ Ethernet_MMC_MMCTIMR_TGFSCM, 1 << 14   @ bitWidth 1 (TGFSCM)  
        .equ Ethernet_MMC_MMCTIMR_TGFMSCM, 1 << 15   @ bitWidth 1 (TGFMSCM)  
        .equ Ethernet_MMC_MMCTIMR_TGFM, 1 << 16   @ bitWidth 1 (TGFM)  
 
    .equ Ethernet_MMC_MMCTGFSCCR, Ethernet_MMC_BASE + 0x4C @ (Ethernet MMC transmitted good frames after a single collision counter) 
        .equ Ethernet_MMC_MMCTGFSCCR_TGFSCC_Shift, 0   @ bitWidth 32 (TGFSCC)  
 
    .equ Ethernet_MMC_MMCTGFMSCCR, Ethernet_MMC_BASE + 0x50 @ (Ethernet MMC transmitted good frames after more than a single collision) 
        .equ Ethernet_MMC_MMCTGFMSCCR_TGFMSCC_Shift, 0   @ bitWidth 32 (TGFMSCC)  
 
    .equ Ethernet_MMC_MMCTGFCR, Ethernet_MMC_BASE + 0x68 @ (Ethernet MMC transmitted good frames counter register) 
        .equ Ethernet_MMC_MMCTGFCR_TGFC_Shift, 0   @ bitWidth 32 (HTL)  
 
    .equ Ethernet_MMC_MMCRFCECR, Ethernet_MMC_BASE + 0x94 @ (Ethernet MMC received frames with CRC error counter register) 
        .equ Ethernet_MMC_MMCRFCECR_RFCFC_Shift, 0   @ bitWidth 32 (RFCFC)  
 
    .equ Ethernet_MMC_MMCRFAECR, Ethernet_MMC_BASE + 0x98 @ (Ethernet MMC received frames with alignment error counter register) 
        .equ Ethernet_MMC_MMCRFAECR_RFAEC_Shift, 0   @ bitWidth 32 (RFAEC)  
 
    .equ Ethernet_MMC_MMCRGUFCR, Ethernet_MMC_BASE + 0xC4 @ (MMC received good unicast frames counter register) 
        .equ Ethernet_MMC_MMCRGUFCR_RGUFC_Shift, 0   @ bitWidth 32 (RGUFC)  
 

@=========================== Ethernet_PTP ===========================@
.equ Ethernet_PTP_BASE, 0x40028700 @ (Ethernet: Precision time protocol) 
    .equ Ethernet_PTP_PTPTSCR, Ethernet_PTP_BASE + 0x0 @ (Ethernet PTP time stamp control register) 
        .equ Ethernet_PTP_PTPTSCR_TSE, 1 << 0   @ bitWidth 1 (TSE)  
        .equ Ethernet_PTP_PTPTSCR_TSFCU, 1 << 1   @ bitWidth 1 (TSFCU)  
        .equ Ethernet_PTP_PTPTSCR_TSPTPPSV2E, 1 << 10   @ bitWidth 1 (TSPTPPSV2E)  
        .equ Ethernet_PTP_PTPTSCR_TSSPTPOEFE, 1 << 11   @ bitWidth 1 (TSSPTPOEFE)  
        .equ Ethernet_PTP_PTPTSCR_TSSIPV6FE, 1 << 12   @ bitWidth 1 (TSSIPV6FE)  
        .equ Ethernet_PTP_PTPTSCR_TSSIPV4FE, 1 << 13   @ bitWidth 1 (TSSIPV4FE)  
        .equ Ethernet_PTP_PTPTSCR_TSSEME, 1 << 14   @ bitWidth 1 (TSSEME)  
        .equ Ethernet_PTP_PTPTSCR_TSSMRME, 1 << 15   @ bitWidth 1 (TSSMRME)  
        .equ Ethernet_PTP_PTPTSCR_TSCNT_Shift, 16   @ bitWidth 2 (TSCNT)  
        .equ Ethernet_PTP_PTPTSCR_TSPFFMAE, 1 << 18   @ bitWidth 1 (TSPFFMAE)  
        .equ Ethernet_PTP_PTPTSCR_TSSTI, 1 << 2   @ bitWidth 1 (TSSTI)  
        .equ Ethernet_PTP_PTPTSCR_TSSTU, 1 << 3   @ bitWidth 1 (TSSTU)  
        .equ Ethernet_PTP_PTPTSCR_TSITE, 1 << 4   @ bitWidth 1 (TSITE)  
        .equ Ethernet_PTP_PTPTSCR_TTSARU, 1 << 5   @ bitWidth 1 (TTSARU)  
        .equ Ethernet_PTP_PTPTSCR_TSSARFE, 1 << 8   @ bitWidth 1 (TSSARFE)  
        .equ Ethernet_PTP_PTPTSCR_TSSSR, 1 << 9   @ bitWidth 1 (TSSSR)  
 
    .equ Ethernet_PTP_PTPSSIR, Ethernet_PTP_BASE + 0x4 @ (Ethernet PTP subsecond increment register) 
        .equ Ethernet_PTP_PTPSSIR_STSSI_Shift, 0   @ bitWidth 8 (STSSI)  
 
    .equ Ethernet_PTP_PTPTSHR, Ethernet_PTP_BASE + 0x8 @ (Ethernet PTP time stamp high register) 
        .equ Ethernet_PTP_PTPTSHR_STS_Shift, 0   @ bitWidth 32 (STS)  
 
    .equ Ethernet_PTP_PTPTSLR, Ethernet_PTP_BASE + 0xC @ (Ethernet PTP time stamp low register) 
        .equ Ethernet_PTP_PTPTSLR_STSS_Shift, 0   @ bitWidth 31 (STSS)  
        .equ Ethernet_PTP_PTPTSLR_STPNS, 1 << 31   @ bitWidth 1 (STPNS)  
 
    .equ Ethernet_PTP_PTPTSHUR, Ethernet_PTP_BASE + 0x10 @ (Ethernet PTP time stamp high update register) 
        .equ Ethernet_PTP_PTPTSHUR_TSUS_Shift, 0   @ bitWidth 32 (TSUS)  
 
    .equ Ethernet_PTP_PTPTSLUR, Ethernet_PTP_BASE + 0x14 @ (Ethernet PTP time stamp low update register) 
        .equ Ethernet_PTP_PTPTSLUR_TSUSS_Shift, 0   @ bitWidth 31 (TSUSS)  
        .equ Ethernet_PTP_PTPTSLUR_TSUPNS, 1 << 31   @ bitWidth 1 (TSUPNS)  
 
    .equ Ethernet_PTP_PTPTSAR, Ethernet_PTP_BASE + 0x18 @ (Ethernet PTP time stamp addend register) 
        .equ Ethernet_PTP_PTPTSAR_TSA_Shift, 0   @ bitWidth 32 (TSA)  
 
    .equ Ethernet_PTP_PTPTTHR, Ethernet_PTP_BASE + 0x1C @ (Ethernet PTP target time high register) 
        .equ Ethernet_PTP_PTPTTHR_TTSH_Shift, 0   @ bitWidth 32 (0)  
 
    .equ Ethernet_PTP_PTPTTLR, Ethernet_PTP_BASE + 0x20 @ (Ethernet PTP target time low register) 
        .equ Ethernet_PTP_PTPTTLR_TTSL_Shift, 0   @ bitWidth 32 (TTSL)  
 
    .equ Ethernet_PTP_PTPTSSR, Ethernet_PTP_BASE + 0x28 @ (Ethernet PTP time stamp status register) 
        .equ Ethernet_PTP_PTPTSSR_TSSO, 1 << 0   @ bitWidth 1 (TSSO)  
        .equ Ethernet_PTP_PTPTSSR_TSTTR, 1 << 1   @ bitWidth 1 (TSTTR)  
 
    .equ Ethernet_PTP_PTPPPSCR, Ethernet_PTP_BASE + 0x2C @ (Ethernet PTP PPS control register) 
        .equ Ethernet_PTP_PTPPPSCR_TSSO, 1 << 0   @ bitWidth 1 (TSSO)  
        .equ Ethernet_PTP_PTPPPSCR_TSTTR, 1 << 1   @ bitWidth 1 (TSTTR)  
 

@=========================== Ethernet_DMA ===========================@
.equ Ethernet_DMA_BASE, 0x40029000 @ (Ethernet: DMA controller operation) 
    .equ Ethernet_DMA_DMABMR, Ethernet_DMA_BASE + 0x0 @ (Ethernet DMA bus mode register) 
        .equ Ethernet_DMA_DMABMR_SR, 1 << 0   @ bitWidth 1 (SR)  
        .equ Ethernet_DMA_DMABMR_DA, 1 << 1   @ bitWidth 1 (DA)  
        .equ Ethernet_DMA_DMABMR_DSL_Shift, 2   @ bitWidth 5 (DSL)  
        .equ Ethernet_DMA_DMABMR_EDFE, 1 << 7   @ bitWidth 1 (EDFE)  
        .equ Ethernet_DMA_DMABMR_PBL_Shift, 8   @ bitWidth 6 (PBL)  
        .equ Ethernet_DMA_DMABMR_RTPR_Shift, 14   @ bitWidth 2 (RTPR)  
        .equ Ethernet_DMA_DMABMR_FB, 1 << 16   @ bitWidth 1 (FB)  
        .equ Ethernet_DMA_DMABMR_RDP_Shift, 17   @ bitWidth 6 (RDP)  
        .equ Ethernet_DMA_DMABMR_USP, 1 << 23   @ bitWidth 1 (USP)  
        .equ Ethernet_DMA_DMABMR_FPM, 1 << 24   @ bitWidth 1 (FPM)  
        .equ Ethernet_DMA_DMABMR_AAB, 1 << 25   @ bitWidth 1 (AAB)  
        .equ Ethernet_DMA_DMABMR_MB, 1 << 26   @ bitWidth 1 (MB)  
 
    .equ Ethernet_DMA_DMATPDR, Ethernet_DMA_BASE + 0x4 @ (Ethernet DMA transmit poll demand register) 
        .equ Ethernet_DMA_DMATPDR_TPD_Shift, 0   @ bitWidth 32 (TPD)  
 
    .equ Ethernet_DMA_DMARPDR, Ethernet_DMA_BASE + 0x8 @ (EHERNET DMA receive poll demand register) 
        .equ Ethernet_DMA_DMARPDR_RPD_Shift, 0   @ bitWidth 32 (RPD)  
 
    .equ Ethernet_DMA_DMARDLAR, Ethernet_DMA_BASE + 0xC @ (Ethernet DMA receive descriptor list address register) 
        .equ Ethernet_DMA_DMARDLAR_SRL_Shift, 0   @ bitWidth 32 (SRL)  
 
    .equ Ethernet_DMA_DMATDLAR, Ethernet_DMA_BASE + 0x10 @ (Ethernet DMA transmit descriptor list address register) 
        .equ Ethernet_DMA_DMATDLAR_STL_Shift, 0   @ bitWidth 32 (STL)  
 
    .equ Ethernet_DMA_DMASR, Ethernet_DMA_BASE + 0x14 @ (Ethernet DMA status register) 
        .equ Ethernet_DMA_DMASR_TS, 1 << 0   @ bitWidth 1 (TS)  
        .equ Ethernet_DMA_DMASR_TPSS, 1 << 1   @ bitWidth 1 (TPSS)  
        .equ Ethernet_DMA_DMASR_TBUS, 1 << 2   @ bitWidth 1 (TBUS)  
        .equ Ethernet_DMA_DMASR_TJTS, 1 << 3   @ bitWidth 1 (TJTS)  
        .equ Ethernet_DMA_DMASR_ROS, 1 << 4   @ bitWidth 1 (ROS)  
        .equ Ethernet_DMA_DMASR_TUS, 1 << 5   @ bitWidth 1 (TUS)  
        .equ Ethernet_DMA_DMASR_RS, 1 << 6   @ bitWidth 1 (RS)  
        .equ Ethernet_DMA_DMASR_RBUS, 1 << 7   @ bitWidth 1 (RBUS)  
        .equ Ethernet_DMA_DMASR_RPSS, 1 << 8   @ bitWidth 1 (RPSS)  
        .equ Ethernet_DMA_DMASR_PWTS, 1 << 9   @ bitWidth 1 (PWTS)  
        .equ Ethernet_DMA_DMASR_ETS, 1 << 10   @ bitWidth 1 (ETS)  
        .equ Ethernet_DMA_DMASR_FBES, 1 << 13   @ bitWidth 1 (FBES)  
        .equ Ethernet_DMA_DMASR_ERS, 1 << 14   @ bitWidth 1 (ERS)  
        .equ Ethernet_DMA_DMASR_AIS, 1 << 15   @ bitWidth 1 (AIS)  
        .equ Ethernet_DMA_DMASR_NIS, 1 << 16   @ bitWidth 1 (NIS)  
        .equ Ethernet_DMA_DMASR_RPS_Shift, 17   @ bitWidth 3 (RPS)  
        .equ Ethernet_DMA_DMASR_TPS_Shift, 20   @ bitWidth 3 (TPS)  
        .equ Ethernet_DMA_DMASR_EBS_Shift, 23   @ bitWidth 3 (EBS)  
        .equ Ethernet_DMA_DMASR_MMCS, 1 << 27   @ bitWidth 1 (MMCS)  
        .equ Ethernet_DMA_DMASR_PMTS, 1 << 28   @ bitWidth 1 (PMTS)  
        .equ Ethernet_DMA_DMASR_TSTS, 1 << 29   @ bitWidth 1 (TSTS)  
 
    .equ Ethernet_DMA_DMAOMR, Ethernet_DMA_BASE + 0x18 @ (Ethernet DMA operation mode register) 
        .equ Ethernet_DMA_DMAOMR_SR, 1 << 1   @ bitWidth 1 (SR)  
        .equ Ethernet_DMA_DMAOMR_OSF, 1 << 2   @ bitWidth 1 (OSF)  
        .equ Ethernet_DMA_DMAOMR_RTC_Shift, 3   @ bitWidth 2 (RTC)  
        .equ Ethernet_DMA_DMAOMR_FUGF, 1 << 6   @ bitWidth 1 (FUGF)  
        .equ Ethernet_DMA_DMAOMR_FEF, 1 << 7   @ bitWidth 1 (FEF)  
        .equ Ethernet_DMA_DMAOMR_ST, 1 << 13   @ bitWidth 1 (ST)  
        .equ Ethernet_DMA_DMAOMR_TTC_Shift, 14   @ bitWidth 3 (TTC)  
        .equ Ethernet_DMA_DMAOMR_FTF, 1 << 20   @ bitWidth 1 (FTF)  
        .equ Ethernet_DMA_DMAOMR_TSF, 1 << 21   @ bitWidth 1 (TSF)  
        .equ Ethernet_DMA_DMAOMR_DFRF, 1 << 24   @ bitWidth 1 (DFRF)  
        .equ Ethernet_DMA_DMAOMR_RSF, 1 << 25   @ bitWidth 1 (RSF)  
        .equ Ethernet_DMA_DMAOMR_DTCEFD, 1 << 26   @ bitWidth 1 (DTCEFD)  
 
    .equ Ethernet_DMA_DMAIER, Ethernet_DMA_BASE + 0x1C @ (Ethernet DMA interrupt enable register) 
        .equ Ethernet_DMA_DMAIER_TIE, 1 << 0   @ bitWidth 1 (TIE)  
        .equ Ethernet_DMA_DMAIER_TPSIE, 1 << 1   @ bitWidth 1 (TPSIE)  
        .equ Ethernet_DMA_DMAIER_TBUIE, 1 << 2   @ bitWidth 1 (TBUIE)  
        .equ Ethernet_DMA_DMAIER_TJTIE, 1 << 3   @ bitWidth 1 (TJTIE)  
        .equ Ethernet_DMA_DMAIER_ROIE, 1 << 4   @ bitWidth 1 (ROIE)  
        .equ Ethernet_DMA_DMAIER_TUIE, 1 << 5   @ bitWidth 1 (TUIE)  
        .equ Ethernet_DMA_DMAIER_RIE, 1 << 6   @ bitWidth 1 (RIE)  
        .equ Ethernet_DMA_DMAIER_RBUIE, 1 << 7   @ bitWidth 1 (RBUIE)  
        .equ Ethernet_DMA_DMAIER_RPSIE, 1 << 8   @ bitWidth 1 (RPSIE)  
        .equ Ethernet_DMA_DMAIER_RWTIE, 1 << 9   @ bitWidth 1 (RWTIE)  
        .equ Ethernet_DMA_DMAIER_ETIE, 1 << 10   @ bitWidth 1 (ETIE)  
        .equ Ethernet_DMA_DMAIER_FBEIE, 1 << 13   @ bitWidth 1 (FBEIE)  
        .equ Ethernet_DMA_DMAIER_ERIE, 1 << 14   @ bitWidth 1 (ERIE)  
        .equ Ethernet_DMA_DMAIER_AISE, 1 << 15   @ bitWidth 1 (AISE)  
        .equ Ethernet_DMA_DMAIER_NISE, 1 << 16   @ bitWidth 1 (NISE)  
 
    .equ Ethernet_DMA_DMAMFBOCR, Ethernet_DMA_BASE + 0x20 @ (Ethernet DMA missed frame and buffer overflow counter register) 
        .equ Ethernet_DMA_DMAMFBOCR_MFC_Shift, 0   @ bitWidth 16 (MFC)  
        .equ Ethernet_DMA_DMAMFBOCR_OMFC, 1 << 16   @ bitWidth 1 (OMFC)  
        .equ Ethernet_DMA_DMAMFBOCR_MFA_Shift, 17   @ bitWidth 11 (MFA)  
        .equ Ethernet_DMA_DMAMFBOCR_OFOC, 1 << 28   @ bitWidth 1 (OFOC)  
 
    .equ Ethernet_DMA_DMARSWTR, Ethernet_DMA_BASE + 0x24 @ (Ethernet DMA receive status watchdog timer register) 
        .equ Ethernet_DMA_DMARSWTR_RSWTC_Shift, 0   @ bitWidth 8 (RSWTC)  
 
    .equ Ethernet_DMA_DMACHTDR, Ethernet_DMA_BASE + 0x48 @ (Ethernet DMA current host transmit descriptor register) 
        .equ Ethernet_DMA_DMACHTDR_HTDAP_Shift, 0   @ bitWidth 32 (HTDAP)  
 
    .equ Ethernet_DMA_DMACHRDR, Ethernet_DMA_BASE + 0x4C @ (Ethernet DMA current host receive descriptor register) 
        .equ Ethernet_DMA_DMACHRDR_HRDAP_Shift, 0   @ bitWidth 32 (HRDAP)  
 
    .equ Ethernet_DMA_DMACHTBAR, Ethernet_DMA_BASE + 0x50 @ (Ethernet DMA current host transmit buffer address register) 
        .equ Ethernet_DMA_DMACHTBAR_HTBAP_Shift, 0   @ bitWidth 32 (HTBAP)  
 
    .equ Ethernet_DMA_DMACHRBAR, Ethernet_DMA_BASE + 0x54 @ (Ethernet DMA current host receive buffer address register) 
        .equ Ethernet_DMA_DMACHRBAR_HRBAP_Shift, 0   @ bitWidth 32 (HRBAP)  
 

@=========================== CRC ===========================@
.equ CRC_BASE, 0x40023000 @ (Cryptographic processor) 
    .equ CRC_DR, CRC_BASE + 0x0 @ (Data register) 
        .equ CRC_DR_DR_Shift, 0   @ bitWidth 32 (Data Register)  
 
    .equ CRC_IDR, CRC_BASE + 0x4 @ (Independent Data register) 
        .equ CRC_IDR_IDR_Shift, 0   @ bitWidth 8 (Independent Data register)  
 
    .equ CRC_CR, CRC_BASE + 0x8 @ (Control register) 
        .equ CRC_CR_CR, 1 << 0   @ bitWidth 1 (Control regidter)  
 
    .equ CRC_INIT, CRC_BASE + 0x10 @ (Initial CRC value) 
        .equ CRC_INIT_CRC_INIT_Shift, 0   @ bitWidth 32 (Programmable initial CRC value)  
 
    .equ CRC_POL, CRC_BASE + 0x14 @ (CRC polynomial) 
        .equ CRC_POL_POL_Shift, 0   @ bitWidth 32 (Programmable polynomial)  
 

@=========================== CAN1 ===========================@
.equ CAN1_BASE, 0x40006400 @ (Controller area network) 
    .equ CAN1_MCR, CAN1_BASE + 0x0 @ (master control register) 
        .equ CAN1_MCR_DBF, 1 << 16   @ bitWidth 1 (DBF)  
        .equ CAN1_MCR_RESET, 1 << 15   @ bitWidth 1 (RESET)  
        .equ CAN1_MCR_TTCM, 1 << 7   @ bitWidth 1 (TTCM)  
        .equ CAN1_MCR_ABOM, 1 << 6   @ bitWidth 1 (ABOM)  
        .equ CAN1_MCR_AWUM, 1 << 5   @ bitWidth 1 (AWUM)  
        .equ CAN1_MCR_NART, 1 << 4   @ bitWidth 1 (NART)  
        .equ CAN1_MCR_RFLM, 1 << 3   @ bitWidth 1 (RFLM)  
        .equ CAN1_MCR_TXFP, 1 << 2   @ bitWidth 1 (TXFP)  
        .equ CAN1_MCR_SLEEP, 1 << 1   @ bitWidth 1 (SLEEP)  
        .equ CAN1_MCR_INRQ, 1 << 0   @ bitWidth 1 (INRQ)  
 
    .equ CAN1_MSR, CAN1_BASE + 0x4 @ (master status register) 
        .equ CAN1_MSR_RX, 1 << 11   @ bitWidth 1 (RX)  
        .equ CAN1_MSR_SAMP, 1 << 10   @ bitWidth 1 (SAMP)  
        .equ CAN1_MSR_RXM, 1 << 9   @ bitWidth 1 (RXM)  
        .equ CAN1_MSR_TXM, 1 << 8   @ bitWidth 1 (TXM)  
        .equ CAN1_MSR_SLAKI, 1 << 4   @ bitWidth 1 (SLAKI)  
        .equ CAN1_MSR_WKUI, 1 << 3   @ bitWidth 1 (WKUI)  
        .equ CAN1_MSR_ERRI, 1 << 2   @ bitWidth 1 (ERRI)  
        .equ CAN1_MSR_SLAK, 1 << 1   @ bitWidth 1 (SLAK)  
        .equ CAN1_MSR_INAK, 1 << 0   @ bitWidth 1 (INAK)  
 
    .equ CAN1_TSR, CAN1_BASE + 0x8 @ (transmit status register) 
        .equ CAN1_TSR_LOW2, 1 << 31   @ bitWidth 1 (Lowest priority flag for mailbox 2)  
        .equ CAN1_TSR_LOW1, 1 << 30   @ bitWidth 1 (Lowest priority flag for mailbox 1)  
        .equ CAN1_TSR_LOW0, 1 << 29   @ bitWidth 1 (Lowest priority flag for mailbox 0)  
        .equ CAN1_TSR_TME2, 1 << 28   @ bitWidth 1 (Lowest priority flag for mailbox 2)  
        .equ CAN1_TSR_TME1, 1 << 27   @ bitWidth 1 (Lowest priority flag for mailbox 1)  
        .equ CAN1_TSR_TME0, 1 << 26   @ bitWidth 1 (Lowest priority flag for mailbox 0)  
        .equ CAN1_TSR_CODE_Shift, 24   @ bitWidth 2 (CODE)  
        .equ CAN1_TSR_ABRQ2, 1 << 23   @ bitWidth 1 (ABRQ2)  
        .equ CAN1_TSR_TERR2, 1 << 19   @ bitWidth 1 (TERR2)  
        .equ CAN1_TSR_ALST2, 1 << 18   @ bitWidth 1 (ALST2)  
        .equ CAN1_TSR_TXOK2, 1 << 17   @ bitWidth 1 (TXOK2)  
        .equ CAN1_TSR_RQCP2, 1 << 16   @ bitWidth 1 (RQCP2)  
        .equ CAN1_TSR_ABRQ1, 1 << 15   @ bitWidth 1 (ABRQ1)  
        .equ CAN1_TSR_TERR1, 1 << 11   @ bitWidth 1 (TERR1)  
        .equ CAN1_TSR_ALST1, 1 << 10   @ bitWidth 1 (ALST1)  
        .equ CAN1_TSR_TXOK1, 1 << 9   @ bitWidth 1 (TXOK1)  
        .equ CAN1_TSR_RQCP1, 1 << 8   @ bitWidth 1 (RQCP1)  
        .equ CAN1_TSR_ABRQ0, 1 << 7   @ bitWidth 1 (ABRQ0)  
        .equ CAN1_TSR_TERR0, 1 << 3   @ bitWidth 1 (TERR0)  
        .equ CAN1_TSR_ALST0, 1 << 2   @ bitWidth 1 (ALST0)  
        .equ CAN1_TSR_TXOK0, 1 << 1   @ bitWidth 1 (TXOK0)  
        .equ CAN1_TSR_RQCP0, 1 << 0   @ bitWidth 1 (RQCP0)  
 
    .equ CAN1_RF0R, CAN1_BASE + 0xC @ (receive FIFO 0 register) 
        .equ CAN1_RF0R_RFOM0, 1 << 5   @ bitWidth 1 (RFOM0)  
        .equ CAN1_RF0R_FOVR0, 1 << 4   @ bitWidth 1 (FOVR0)  
        .equ CAN1_RF0R_FULL0, 1 << 3   @ bitWidth 1 (FULL0)  
        .equ CAN1_RF0R_FMP0_Shift, 0   @ bitWidth 2 (FMP0)  
 
    .equ CAN1_RF1R, CAN1_BASE + 0x10 @ (receive FIFO 1 register) 
        .equ CAN1_RF1R_RFOM1, 1 << 5   @ bitWidth 1 (RFOM1)  
        .equ CAN1_RF1R_FOVR1, 1 << 4   @ bitWidth 1 (FOVR1)  
        .equ CAN1_RF1R_FULL1, 1 << 3   @ bitWidth 1 (FULL1)  
        .equ CAN1_RF1R_FMP1_Shift, 0   @ bitWidth 2 (FMP1)  
 
    .equ CAN1_IER, CAN1_BASE + 0x14 @ (interrupt enable register) 
        .equ CAN1_IER_SLKIE, 1 << 17   @ bitWidth 1 (SLKIE)  
        .equ CAN1_IER_WKUIE, 1 << 16   @ bitWidth 1 (WKUIE)  
        .equ CAN1_IER_ERRIE, 1 << 15   @ bitWidth 1 (ERRIE)  
        .equ CAN1_IER_LECIE, 1 << 11   @ bitWidth 1 (LECIE)  
        .equ CAN1_IER_BOFIE, 1 << 10   @ bitWidth 1 (BOFIE)  
        .equ CAN1_IER_EPVIE, 1 << 9   @ bitWidth 1 (EPVIE)  
        .equ CAN1_IER_EWGIE, 1 << 8   @ bitWidth 1 (EWGIE)  
        .equ CAN1_IER_FOVIE1, 1 << 6   @ bitWidth 1 (FOVIE1)  
        .equ CAN1_IER_FFIE1, 1 << 5   @ bitWidth 1 (FFIE1)  
        .equ CAN1_IER_FMPIE1, 1 << 4   @ bitWidth 1 (FMPIE1)  
        .equ CAN1_IER_FOVIE0, 1 << 3   @ bitWidth 1 (FOVIE0)  
        .equ CAN1_IER_FFIE0, 1 << 2   @ bitWidth 1 (FFIE0)  
        .equ CAN1_IER_FMPIE0, 1 << 1   @ bitWidth 1 (FMPIE0)  
        .equ CAN1_IER_TMEIE, 1 << 0   @ bitWidth 1 (TMEIE)  
 
    .equ CAN1_ESR, CAN1_BASE + 0x18 @ (interrupt enable register) 
        .equ CAN1_ESR_REC_Shift, 24   @ bitWidth 8 (REC)  
        .equ CAN1_ESR_TEC_Shift, 16   @ bitWidth 8 (TEC)  
        .equ CAN1_ESR_LEC_Shift, 4   @ bitWidth 3 (LEC)  
        .equ CAN1_ESR_BOFF, 1 << 2   @ bitWidth 1 (BOFF)  
        .equ CAN1_ESR_EPVF, 1 << 1   @ bitWidth 1 (EPVF)  
        .equ CAN1_ESR_EWGF, 1 << 0   @ bitWidth 1 (EWGF)  
 
    .equ CAN1_BTR, CAN1_BASE + 0x1C @ (bit timing register) 
        .equ CAN1_BTR_SILM, 1 << 31   @ bitWidth 1 (SILM)  
        .equ CAN1_BTR_LBKM, 1 << 30   @ bitWidth 1 (LBKM)  
        .equ CAN1_BTR_SJW_Shift, 24   @ bitWidth 2 (SJW)  
        .equ CAN1_BTR_TS2_Shift, 20   @ bitWidth 3 (TS2)  
        .equ CAN1_BTR_TS1_Shift, 16   @ bitWidth 4 (TS1)  
        .equ CAN1_BTR_BRP_Shift, 0   @ bitWidth 10 (BRP)  
 
    .equ CAN1_TI0R, CAN1_BASE + 0x180 @ (TX mailbox identifier register) 
        .equ CAN1_TI0R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN1_TI0R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN1_TI0R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN1_TI0R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN1_TI0R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN1_TDT0R, CAN1_BASE + 0x184 @ (mailbox data length control and time stamp register) 
        .equ CAN1_TDT0R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN1_TDT0R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN1_TDT0R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN1_TDL0R, CAN1_BASE + 0x188 @ (mailbox data low register) 
        .equ CAN1_TDL0R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN1_TDL0R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN1_TDL0R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN1_TDL0R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN1_TDH0R, CAN1_BASE + 0x18C @ (mailbox data high register) 
        .equ CAN1_TDH0R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN1_TDH0R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN1_TDH0R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN1_TDH0R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN1_TI1R, CAN1_BASE + 0x190 @ (mailbox identifier register) 
        .equ CAN1_TI1R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN1_TI1R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN1_TI1R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN1_TI1R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN1_TI1R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN1_TDT1R, CAN1_BASE + 0x194 @ (mailbox data length control and time stamp register) 
        .equ CAN1_TDT1R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN1_TDT1R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN1_TDT1R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN1_TDL1R, CAN1_BASE + 0x198 @ (mailbox data low register) 
        .equ CAN1_TDL1R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN1_TDL1R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN1_TDL1R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN1_TDL1R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN1_TDH1R, CAN1_BASE + 0x19C @ (mailbox data high register) 
        .equ CAN1_TDH1R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN1_TDH1R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN1_TDH1R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN1_TDH1R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN1_TI2R, CAN1_BASE + 0x1A0 @ (mailbox identifier register) 
        .equ CAN1_TI2R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN1_TI2R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN1_TI2R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN1_TI2R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN1_TI2R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN1_TDT2R, CAN1_BASE + 0x1A4 @ (mailbox data length control and time stamp register) 
        .equ CAN1_TDT2R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN1_TDT2R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN1_TDT2R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN1_TDL2R, CAN1_BASE + 0x1A8 @ (mailbox data low register) 
        .equ CAN1_TDL2R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN1_TDL2R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN1_TDL2R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN1_TDL2R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN1_TDH2R, CAN1_BASE + 0x1AC @ (mailbox data high register) 
        .equ CAN1_TDH2R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN1_TDH2R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN1_TDH2R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN1_TDH2R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN1_RI0R, CAN1_BASE + 0x1B0 @ (receive FIFO mailbox identifier register) 
        .equ CAN1_RI0R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN1_RI0R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN1_RI0R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN1_RI0R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
 
    .equ CAN1_RDT0R, CAN1_BASE + 0x1B4 @ (mailbox data high register) 
        .equ CAN1_RDT0R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN1_RDT0R_FMI_Shift, 8   @ bitWidth 8 (FMI)  
        .equ CAN1_RDT0R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN1_RDL0R, CAN1_BASE + 0x1B8 @ (mailbox data high register) 
        .equ CAN1_RDL0R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN1_RDL0R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN1_RDL0R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN1_RDL0R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN1_RDH0R, CAN1_BASE + 0x1BC @ (receive FIFO mailbox data high register) 
        .equ CAN1_RDH0R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN1_RDH0R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN1_RDH0R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN1_RDH0R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN1_RI1R, CAN1_BASE + 0x1C0 @ (mailbox data high register) 
        .equ CAN1_RI1R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN1_RI1R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN1_RI1R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN1_RI1R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
 
    .equ CAN1_RDT1R, CAN1_BASE + 0x1C4 @ (mailbox data high register) 
        .equ CAN1_RDT1R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN1_RDT1R_FMI_Shift, 8   @ bitWidth 8 (FMI)  
        .equ CAN1_RDT1R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN1_RDL1R, CAN1_BASE + 0x1C8 @ (mailbox data high register) 
        .equ CAN1_RDL1R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN1_RDL1R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN1_RDL1R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN1_RDL1R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN1_RDH1R, CAN1_BASE + 0x1CC @ (mailbox data high register) 
        .equ CAN1_RDH1R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN1_RDH1R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN1_RDH1R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN1_RDH1R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN1_FMR, CAN1_BASE + 0x200 @ (filter master register) 
        .equ CAN1_FMR_CAN2SB_Shift, 8   @ bitWidth 6 (CAN2SB)  
        .equ CAN1_FMR_FINIT, 1 << 0   @ bitWidth 1 (FINIT)  
 
    .equ CAN1_FM1R, CAN1_BASE + 0x204 @ (filter mode register) 
        .equ CAN1_FM1R_FBM0, 1 << 0   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM1, 1 << 1   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM2, 1 << 2   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM3, 1 << 3   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM4, 1 << 4   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM5, 1 << 5   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM6, 1 << 6   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM7, 1 << 7   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM8, 1 << 8   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM9, 1 << 9   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM10, 1 << 10   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM11, 1 << 11   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM12, 1 << 12   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM13, 1 << 13   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM14, 1 << 14   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM15, 1 << 15   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM16, 1 << 16   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM17, 1 << 17   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM18, 1 << 18   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM19, 1 << 19   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM20, 1 << 20   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM21, 1 << 21   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM22, 1 << 22   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM23, 1 << 23   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM24, 1 << 24   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM25, 1 << 25   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM26, 1 << 26   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM27, 1 << 27   @ bitWidth 1 (Filter mode)  
 
    .equ CAN1_FS1R, CAN1_BASE + 0x20C @ (filter scale register) 
        .equ CAN1_FS1R_FSC0, 1 << 0   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC1, 1 << 1   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC2, 1 << 2   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC3, 1 << 3   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC4, 1 << 4   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC5, 1 << 5   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC6, 1 << 6   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC7, 1 << 7   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC8, 1 << 8   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC9, 1 << 9   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC10, 1 << 10   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC11, 1 << 11   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC12, 1 << 12   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC13, 1 << 13   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC14, 1 << 14   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC15, 1 << 15   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC16, 1 << 16   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC17, 1 << 17   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC18, 1 << 18   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC19, 1 << 19   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC20, 1 << 20   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC21, 1 << 21   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC22, 1 << 22   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC23, 1 << 23   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC24, 1 << 24   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC25, 1 << 25   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC26, 1 << 26   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC27, 1 << 27   @ bitWidth 1 (Filter scale configuration)  
 
    .equ CAN1_FFA1R, CAN1_BASE + 0x214 @ (filter FIFO assignment register) 
        .equ CAN1_FFA1R_FFA0, 1 << 0   @ bitWidth 1 (Filter FIFO assignment for filter 0)  
        .equ CAN1_FFA1R_FFA1, 1 << 1   @ bitWidth 1 (Filter FIFO assignment for filter 1)  
        .equ CAN1_FFA1R_FFA2, 1 << 2   @ bitWidth 1 (Filter FIFO assignment for filter 2)  
        .equ CAN1_FFA1R_FFA3, 1 << 3   @ bitWidth 1 (Filter FIFO assignment for filter 3)  
        .equ CAN1_FFA1R_FFA4, 1 << 4   @ bitWidth 1 (Filter FIFO assignment for filter 4)  
        .equ CAN1_FFA1R_FFA5, 1 << 5   @ bitWidth 1 (Filter FIFO assignment for filter 5)  
        .equ CAN1_FFA1R_FFA6, 1 << 6   @ bitWidth 1 (Filter FIFO assignment for filter 6)  
        .equ CAN1_FFA1R_FFA7, 1 << 7   @ bitWidth 1 (Filter FIFO assignment for filter 7)  
        .equ CAN1_FFA1R_FFA8, 1 << 8   @ bitWidth 1 (Filter FIFO assignment for filter 8)  
        .equ CAN1_FFA1R_FFA9, 1 << 9   @ bitWidth 1 (Filter FIFO assignment for filter 9)  
        .equ CAN1_FFA1R_FFA10, 1 << 10   @ bitWidth 1 (Filter FIFO assignment for filter 10)  
        .equ CAN1_FFA1R_FFA11, 1 << 11   @ bitWidth 1 (Filter FIFO assignment for filter 11)  
        .equ CAN1_FFA1R_FFA12, 1 << 12   @ bitWidth 1 (Filter FIFO assignment for filter 12)  
        .equ CAN1_FFA1R_FFA13, 1 << 13   @ bitWidth 1 (Filter FIFO assignment for filter 13)  
        .equ CAN1_FFA1R_FFA14, 1 << 14   @ bitWidth 1 (Filter FIFO assignment for filter 14)  
        .equ CAN1_FFA1R_FFA15, 1 << 15   @ bitWidth 1 (Filter FIFO assignment for filter 15)  
        .equ CAN1_FFA1R_FFA16, 1 << 16   @ bitWidth 1 (Filter FIFO assignment for filter 16)  
        .equ CAN1_FFA1R_FFA17, 1 << 17   @ bitWidth 1 (Filter FIFO assignment for filter 17)  
        .equ CAN1_FFA1R_FFA18, 1 << 18   @ bitWidth 1 (Filter FIFO assignment for filter 18)  
        .equ CAN1_FFA1R_FFA19, 1 << 19   @ bitWidth 1 (Filter FIFO assignment for filter 19)  
        .equ CAN1_FFA1R_FFA20, 1 << 20   @ bitWidth 1 (Filter FIFO assignment for filter 20)  
        .equ CAN1_FFA1R_FFA21, 1 << 21   @ bitWidth 1 (Filter FIFO assignment for filter 21)  
        .equ CAN1_FFA1R_FFA22, 1 << 22   @ bitWidth 1 (Filter FIFO assignment for filter 22)  
        .equ CAN1_FFA1R_FFA23, 1 << 23   @ bitWidth 1 (Filter FIFO assignment for filter 23)  
        .equ CAN1_FFA1R_FFA24, 1 << 24   @ bitWidth 1 (Filter FIFO assignment for filter 24)  
        .equ CAN1_FFA1R_FFA25, 1 << 25   @ bitWidth 1 (Filter FIFO assignment for filter 25)  
        .equ CAN1_FFA1R_FFA26, 1 << 26   @ bitWidth 1 (Filter FIFO assignment for filter 26)  
        .equ CAN1_FFA1R_FFA27, 1 << 27   @ bitWidth 1 (Filter FIFO assignment for filter 27)  
 
    .equ CAN1_FA1R, CAN1_BASE + 0x21C @ (filter activation register) 
        .equ CAN1_FA1R_FACT0, 1 << 0   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT1, 1 << 1   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT2, 1 << 2   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT3, 1 << 3   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT4, 1 << 4   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT5, 1 << 5   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT6, 1 << 6   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT7, 1 << 7   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT8, 1 << 8   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT9, 1 << 9   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT10, 1 << 10   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT11, 1 << 11   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT12, 1 << 12   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT13, 1 << 13   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT14, 1 << 14   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT15, 1 << 15   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT16, 1 << 16   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT17, 1 << 17   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT18, 1 << 18   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT19, 1 << 19   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT20, 1 << 20   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT21, 1 << 21   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT22, 1 << 22   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT23, 1 << 23   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT24, 1 << 24   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT25, 1 << 25   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT26, 1 << 26   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT27, 1 << 27   @ bitWidth 1 (Filter active)  
 
    .equ CAN1_F0R1, CAN1_BASE + 0x240 @ (Filter bank 0 register 1) 
        .equ CAN1_F0R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F0R2, CAN1_BASE + 0x244 @ (Filter bank 0 register 2) 
        .equ CAN1_F0R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F1R1, CAN1_BASE + 0x248 @ (Filter bank 1 register 1) 
        .equ CAN1_F1R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F1R2, CAN1_BASE + 0x24C @ (Filter bank 1 register 2) 
        .equ CAN1_F1R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F2R1, CAN1_BASE + 0x250 @ (Filter bank 2 register 1) 
        .equ CAN1_F2R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F2R2, CAN1_BASE + 0x254 @ (Filter bank 2 register 2) 
        .equ CAN1_F2R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F3R1, CAN1_BASE + 0x258 @ (Filter bank 3 register 1) 
        .equ CAN1_F3R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F3R2, CAN1_BASE + 0x25C @ (Filter bank 3 register 2) 
        .equ CAN1_F3R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F4R1, CAN1_BASE + 0x260 @ (Filter bank 4 register 1) 
        .equ CAN1_F4R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F4R2, CAN1_BASE + 0x264 @ (Filter bank 4 register 2) 
        .equ CAN1_F4R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F5R1, CAN1_BASE + 0x268 @ (Filter bank 5 register 1) 
        .equ CAN1_F5R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F5R2, CAN1_BASE + 0x26C @ (Filter bank 5 register 2) 
        .equ CAN1_F5R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F6R1, CAN1_BASE + 0x270 @ (Filter bank 6 register 1) 
        .equ CAN1_F6R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F6R2, CAN1_BASE + 0x274 @ (Filter bank 6 register 2) 
        .equ CAN1_F6R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F7R1, CAN1_BASE + 0x278 @ (Filter bank 7 register 1) 
        .equ CAN1_F7R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F7R2, CAN1_BASE + 0x27C @ (Filter bank 7 register 2) 
        .equ CAN1_F7R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F8R1, CAN1_BASE + 0x280 @ (Filter bank 8 register 1) 
        .equ CAN1_F8R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F8R2, CAN1_BASE + 0x284 @ (Filter bank 8 register 2) 
        .equ CAN1_F8R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F9R1, CAN1_BASE + 0x288 @ (Filter bank 9 register 1) 
        .equ CAN1_F9R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F9R2, CAN1_BASE + 0x28C @ (Filter bank 9 register 2) 
        .equ CAN1_F9R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F10R1, CAN1_BASE + 0x290 @ (Filter bank 10 register 1) 
        .equ CAN1_F10R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F10R2, CAN1_BASE + 0x294 @ (Filter bank 10 register 2) 
        .equ CAN1_F10R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F11R1, CAN1_BASE + 0x298 @ (Filter bank 11 register 1) 
        .equ CAN1_F11R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F11R2, CAN1_BASE + 0x29C @ (Filter bank 11 register 2) 
        .equ CAN1_F11R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F12R1, CAN1_BASE + 0x2A0 @ (Filter bank 4 register 1) 
        .equ CAN1_F12R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F12R2, CAN1_BASE + 0x2A4 @ (Filter bank 12 register 2) 
        .equ CAN1_F12R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F13R1, CAN1_BASE + 0x2A8 @ (Filter bank 13 register 1) 
        .equ CAN1_F13R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F13R2, CAN1_BASE + 0x2AC @ (Filter bank 13 register 2) 
        .equ CAN1_F13R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F14R1, CAN1_BASE + 0x2B0 @ (Filter bank 14 register 1) 
        .equ CAN1_F14R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F14R2, CAN1_BASE + 0x2B4 @ (Filter bank 14 register 2) 
        .equ CAN1_F14R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F15R1, CAN1_BASE + 0x2B8 @ (Filter bank 15 register 1) 
        .equ CAN1_F15R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F15R2, CAN1_BASE + 0x2BC @ (Filter bank 15 register 2) 
        .equ CAN1_F15R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F16R1, CAN1_BASE + 0x2C0 @ (Filter bank 16 register 1) 
        .equ CAN1_F16R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F16R2, CAN1_BASE + 0x2C4 @ (Filter bank 16 register 2) 
        .equ CAN1_F16R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F17R1, CAN1_BASE + 0x2C8 @ (Filter bank 17 register 1) 
        .equ CAN1_F17R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F17R2, CAN1_BASE + 0x2CC @ (Filter bank 17 register 2) 
        .equ CAN1_F17R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F18R1, CAN1_BASE + 0x2D0 @ (Filter bank 18 register 1) 
        .equ CAN1_F18R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F18R2, CAN1_BASE + 0x2D4 @ (Filter bank 18 register 2) 
        .equ CAN1_F18R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F19R1, CAN1_BASE + 0x2D8 @ (Filter bank 19 register 1) 
        .equ CAN1_F19R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F19R2, CAN1_BASE + 0x2DC @ (Filter bank 19 register 2) 
        .equ CAN1_F19R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F20R1, CAN1_BASE + 0x2E0 @ (Filter bank 20 register 1) 
        .equ CAN1_F20R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F20R2, CAN1_BASE + 0x2E4 @ (Filter bank 20 register 2) 
        .equ CAN1_F20R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F21R1, CAN1_BASE + 0x2E8 @ (Filter bank 21 register 1) 
        .equ CAN1_F21R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F21R2, CAN1_BASE + 0x2EC @ (Filter bank 21 register 2) 
        .equ CAN1_F21R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F22R1, CAN1_BASE + 0x2F0 @ (Filter bank 22 register 1) 
        .equ CAN1_F22R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F22R2, CAN1_BASE + 0x2F4 @ (Filter bank 22 register 2) 
        .equ CAN1_F22R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F23R1, CAN1_BASE + 0x2F8 @ (Filter bank 23 register 1) 
        .equ CAN1_F23R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F23R2, CAN1_BASE + 0x2FC @ (Filter bank 23 register 2) 
        .equ CAN1_F23R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F24R1, CAN1_BASE + 0x300 @ (Filter bank 24 register 1) 
        .equ CAN1_F24R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F24R2, CAN1_BASE + 0x304 @ (Filter bank 24 register 2) 
        .equ CAN1_F24R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F25R1, CAN1_BASE + 0x308 @ (Filter bank 25 register 1) 
        .equ CAN1_F25R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F25R2, CAN1_BASE + 0x30C @ (Filter bank 25 register 2) 
        .equ CAN1_F25R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F26R1, CAN1_BASE + 0x310 @ (Filter bank 26 register 1) 
        .equ CAN1_F26R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F26R2, CAN1_BASE + 0x314 @ (Filter bank 26 register 2) 
        .equ CAN1_F26R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F27R1, CAN1_BASE + 0x318 @ (Filter bank 27 register 1) 
        .equ CAN1_F27R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F27R2, CAN1_BASE + 0x31C @ (Filter bank 27 register 2) 
        .equ CAN1_F27R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 

@=========================== CAN2 ===========================@
.equ CAN2_BASE, 0x40006800 @ (Controller area network) 
    .equ CAN2_MCR, CAN2_BASE + 0x0 @ (master control register) 
        .equ CAN2_MCR_DBF, 1 << 16   @ bitWidth 1 (DBF)  
        .equ CAN2_MCR_RESET, 1 << 15   @ bitWidth 1 (RESET)  
        .equ CAN2_MCR_TTCM, 1 << 7   @ bitWidth 1 (TTCM)  
        .equ CAN2_MCR_ABOM, 1 << 6   @ bitWidth 1 (ABOM)  
        .equ CAN2_MCR_AWUM, 1 << 5   @ bitWidth 1 (AWUM)  
        .equ CAN2_MCR_NART, 1 << 4   @ bitWidth 1 (NART)  
        .equ CAN2_MCR_RFLM, 1 << 3   @ bitWidth 1 (RFLM)  
        .equ CAN2_MCR_TXFP, 1 << 2   @ bitWidth 1 (TXFP)  
        .equ CAN2_MCR_SLEEP, 1 << 1   @ bitWidth 1 (SLEEP)  
        .equ CAN2_MCR_INRQ, 1 << 0   @ bitWidth 1 (INRQ)  
 
    .equ CAN2_MSR, CAN2_BASE + 0x4 @ (master status register) 
        .equ CAN2_MSR_RX, 1 << 11   @ bitWidth 1 (RX)  
        .equ CAN2_MSR_SAMP, 1 << 10   @ bitWidth 1 (SAMP)  
        .equ CAN2_MSR_RXM, 1 << 9   @ bitWidth 1 (RXM)  
        .equ CAN2_MSR_TXM, 1 << 8   @ bitWidth 1 (TXM)  
        .equ CAN2_MSR_SLAKI, 1 << 4   @ bitWidth 1 (SLAKI)  
        .equ CAN2_MSR_WKUI, 1 << 3   @ bitWidth 1 (WKUI)  
        .equ CAN2_MSR_ERRI, 1 << 2   @ bitWidth 1 (ERRI)  
        .equ CAN2_MSR_SLAK, 1 << 1   @ bitWidth 1 (SLAK)  
        .equ CAN2_MSR_INAK, 1 << 0   @ bitWidth 1 (INAK)  
 
    .equ CAN2_TSR, CAN2_BASE + 0x8 @ (transmit status register) 
        .equ CAN2_TSR_LOW2, 1 << 31   @ bitWidth 1 (Lowest priority flag for mailbox 2)  
        .equ CAN2_TSR_LOW1, 1 << 30   @ bitWidth 1 (Lowest priority flag for mailbox 1)  
        .equ CAN2_TSR_LOW0, 1 << 29   @ bitWidth 1 (Lowest priority flag for mailbox 0)  
        .equ CAN2_TSR_TME2, 1 << 28   @ bitWidth 1 (Lowest priority flag for mailbox 2)  
        .equ CAN2_TSR_TME1, 1 << 27   @ bitWidth 1 (Lowest priority flag for mailbox 1)  
        .equ CAN2_TSR_TME0, 1 << 26   @ bitWidth 1 (Lowest priority flag for mailbox 0)  
        .equ CAN2_TSR_CODE_Shift, 24   @ bitWidth 2 (CODE)  
        .equ CAN2_TSR_ABRQ2, 1 << 23   @ bitWidth 1 (ABRQ2)  
        .equ CAN2_TSR_TERR2, 1 << 19   @ bitWidth 1 (TERR2)  
        .equ CAN2_TSR_ALST2, 1 << 18   @ bitWidth 1 (ALST2)  
        .equ CAN2_TSR_TXOK2, 1 << 17   @ bitWidth 1 (TXOK2)  
        .equ CAN2_TSR_RQCP2, 1 << 16   @ bitWidth 1 (RQCP2)  
        .equ CAN2_TSR_ABRQ1, 1 << 15   @ bitWidth 1 (ABRQ1)  
        .equ CAN2_TSR_TERR1, 1 << 11   @ bitWidth 1 (TERR1)  
        .equ CAN2_TSR_ALST1, 1 << 10   @ bitWidth 1 (ALST1)  
        .equ CAN2_TSR_TXOK1, 1 << 9   @ bitWidth 1 (TXOK1)  
        .equ CAN2_TSR_RQCP1, 1 << 8   @ bitWidth 1 (RQCP1)  
        .equ CAN2_TSR_ABRQ0, 1 << 7   @ bitWidth 1 (ABRQ0)  
        .equ CAN2_TSR_TERR0, 1 << 3   @ bitWidth 1 (TERR0)  
        .equ CAN2_TSR_ALST0, 1 << 2   @ bitWidth 1 (ALST0)  
        .equ CAN2_TSR_TXOK0, 1 << 1   @ bitWidth 1 (TXOK0)  
        .equ CAN2_TSR_RQCP0, 1 << 0   @ bitWidth 1 (RQCP0)  
 
    .equ CAN2_RF0R, CAN2_BASE + 0xC @ (receive FIFO 0 register) 
        .equ CAN2_RF0R_RFOM0, 1 << 5   @ bitWidth 1 (RFOM0)  
        .equ CAN2_RF0R_FOVR0, 1 << 4   @ bitWidth 1 (FOVR0)  
        .equ CAN2_RF0R_FULL0, 1 << 3   @ bitWidth 1 (FULL0)  
        .equ CAN2_RF0R_FMP0_Shift, 0   @ bitWidth 2 (FMP0)  
 
    .equ CAN2_RF1R, CAN2_BASE + 0x10 @ (receive FIFO 1 register) 
        .equ CAN2_RF1R_RFOM1, 1 << 5   @ bitWidth 1 (RFOM1)  
        .equ CAN2_RF1R_FOVR1, 1 << 4   @ bitWidth 1 (FOVR1)  
        .equ CAN2_RF1R_FULL1, 1 << 3   @ bitWidth 1 (FULL1)  
        .equ CAN2_RF1R_FMP1_Shift, 0   @ bitWidth 2 (FMP1)  
 
    .equ CAN2_IER, CAN2_BASE + 0x14 @ (interrupt enable register) 
        .equ CAN2_IER_SLKIE, 1 << 17   @ bitWidth 1 (SLKIE)  
        .equ CAN2_IER_WKUIE, 1 << 16   @ bitWidth 1 (WKUIE)  
        .equ CAN2_IER_ERRIE, 1 << 15   @ bitWidth 1 (ERRIE)  
        .equ CAN2_IER_LECIE, 1 << 11   @ bitWidth 1 (LECIE)  
        .equ CAN2_IER_BOFIE, 1 << 10   @ bitWidth 1 (BOFIE)  
        .equ CAN2_IER_EPVIE, 1 << 9   @ bitWidth 1 (EPVIE)  
        .equ CAN2_IER_EWGIE, 1 << 8   @ bitWidth 1 (EWGIE)  
        .equ CAN2_IER_FOVIE1, 1 << 6   @ bitWidth 1 (FOVIE1)  
        .equ CAN2_IER_FFIE1, 1 << 5   @ bitWidth 1 (FFIE1)  
        .equ CAN2_IER_FMPIE1, 1 << 4   @ bitWidth 1 (FMPIE1)  
        .equ CAN2_IER_FOVIE0, 1 << 3   @ bitWidth 1 (FOVIE0)  
        .equ CAN2_IER_FFIE0, 1 << 2   @ bitWidth 1 (FFIE0)  
        .equ CAN2_IER_FMPIE0, 1 << 1   @ bitWidth 1 (FMPIE0)  
        .equ CAN2_IER_TMEIE, 1 << 0   @ bitWidth 1 (TMEIE)  
 
    .equ CAN2_ESR, CAN2_BASE + 0x18 @ (interrupt enable register) 
        .equ CAN2_ESR_REC_Shift, 24   @ bitWidth 8 (REC)  
        .equ CAN2_ESR_TEC_Shift, 16   @ bitWidth 8 (TEC)  
        .equ CAN2_ESR_LEC_Shift, 4   @ bitWidth 3 (LEC)  
        .equ CAN2_ESR_BOFF, 1 << 2   @ bitWidth 1 (BOFF)  
        .equ CAN2_ESR_EPVF, 1 << 1   @ bitWidth 1 (EPVF)  
        .equ CAN2_ESR_EWGF, 1 << 0   @ bitWidth 1 (EWGF)  
 
    .equ CAN2_BTR, CAN2_BASE + 0x1C @ (bit timing register) 
        .equ CAN2_BTR_SILM, 1 << 31   @ bitWidth 1 (SILM)  
        .equ CAN2_BTR_LBKM, 1 << 30   @ bitWidth 1 (LBKM)  
        .equ CAN2_BTR_SJW_Shift, 24   @ bitWidth 2 (SJW)  
        .equ CAN2_BTR_TS2_Shift, 20   @ bitWidth 3 (TS2)  
        .equ CAN2_BTR_TS1_Shift, 16   @ bitWidth 4 (TS1)  
        .equ CAN2_BTR_BRP_Shift, 0   @ bitWidth 10 (BRP)  
 
    .equ CAN2_TI0R, CAN2_BASE + 0x180 @ (TX mailbox identifier register) 
        .equ CAN2_TI0R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN2_TI0R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN2_TI0R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN2_TI0R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN2_TI0R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN2_TDT0R, CAN2_BASE + 0x184 @ (mailbox data length control and time stamp register) 
        .equ CAN2_TDT0R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN2_TDT0R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN2_TDT0R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN2_TDL0R, CAN2_BASE + 0x188 @ (mailbox data low register) 
        .equ CAN2_TDL0R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN2_TDL0R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN2_TDL0R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN2_TDL0R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN2_TDH0R, CAN2_BASE + 0x18C @ (mailbox data high register) 
        .equ CAN2_TDH0R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN2_TDH0R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN2_TDH0R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN2_TDH0R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN2_TI1R, CAN2_BASE + 0x190 @ (mailbox identifier register) 
        .equ CAN2_TI1R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN2_TI1R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN2_TI1R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN2_TI1R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN2_TI1R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN2_TDT1R, CAN2_BASE + 0x194 @ (mailbox data length control and time stamp register) 
        .equ CAN2_TDT1R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN2_TDT1R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN2_TDT1R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN2_TDL1R, CAN2_BASE + 0x198 @ (mailbox data low register) 
        .equ CAN2_TDL1R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN2_TDL1R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN2_TDL1R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN2_TDL1R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN2_TDH1R, CAN2_BASE + 0x19C @ (mailbox data high register) 
        .equ CAN2_TDH1R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN2_TDH1R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN2_TDH1R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN2_TDH1R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN2_TI2R, CAN2_BASE + 0x1A0 @ (mailbox identifier register) 
        .equ CAN2_TI2R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN2_TI2R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN2_TI2R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN2_TI2R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN2_TI2R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN2_TDT2R, CAN2_BASE + 0x1A4 @ (mailbox data length control and time stamp register) 
        .equ CAN2_TDT2R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN2_TDT2R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN2_TDT2R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN2_TDL2R, CAN2_BASE + 0x1A8 @ (mailbox data low register) 
        .equ CAN2_TDL2R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN2_TDL2R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN2_TDL2R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN2_TDL2R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN2_TDH2R, CAN2_BASE + 0x1AC @ (mailbox data high register) 
        .equ CAN2_TDH2R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN2_TDH2R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN2_TDH2R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN2_TDH2R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN2_RI0R, CAN2_BASE + 0x1B0 @ (receive FIFO mailbox identifier register) 
        .equ CAN2_RI0R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN2_RI0R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN2_RI0R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN2_RI0R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
 
    .equ CAN2_RDT0R, CAN2_BASE + 0x1B4 @ (mailbox data high register) 
        .equ CAN2_RDT0R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN2_RDT0R_FMI_Shift, 8   @ bitWidth 8 (FMI)  
        .equ CAN2_RDT0R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN2_RDL0R, CAN2_BASE + 0x1B8 @ (mailbox data high register) 
        .equ CAN2_RDL0R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN2_RDL0R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN2_RDL0R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN2_RDL0R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN2_RDH0R, CAN2_BASE + 0x1BC @ (receive FIFO mailbox data high register) 
        .equ CAN2_RDH0R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN2_RDH0R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN2_RDH0R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN2_RDH0R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN2_RI1R, CAN2_BASE + 0x1C0 @ (mailbox data high register) 
        .equ CAN2_RI1R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN2_RI1R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN2_RI1R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN2_RI1R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
 
    .equ CAN2_RDT1R, CAN2_BASE + 0x1C4 @ (mailbox data high register) 
        .equ CAN2_RDT1R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN2_RDT1R_FMI_Shift, 8   @ bitWidth 8 (FMI)  
        .equ CAN2_RDT1R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN2_RDL1R, CAN2_BASE + 0x1C8 @ (mailbox data high register) 
        .equ CAN2_RDL1R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN2_RDL1R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN2_RDL1R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN2_RDL1R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN2_RDH1R, CAN2_BASE + 0x1CC @ (mailbox data high register) 
        .equ CAN2_RDH1R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN2_RDH1R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN2_RDH1R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN2_RDH1R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN2_FMR, CAN2_BASE + 0x200 @ (filter master register) 
        .equ CAN2_FMR_CAN2SB_Shift, 8   @ bitWidth 6 (CAN2SB)  
        .equ CAN2_FMR_FINIT, 1 << 0   @ bitWidth 1 (FINIT)  
 
    .equ CAN2_FM1R, CAN2_BASE + 0x204 @ (filter mode register) 
        .equ CAN2_FM1R_FBM0, 1 << 0   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM1, 1 << 1   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM2, 1 << 2   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM3, 1 << 3   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM4, 1 << 4   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM5, 1 << 5   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM6, 1 << 6   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM7, 1 << 7   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM8, 1 << 8   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM9, 1 << 9   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM10, 1 << 10   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM11, 1 << 11   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM12, 1 << 12   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM13, 1 << 13   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM14, 1 << 14   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM15, 1 << 15   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM16, 1 << 16   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM17, 1 << 17   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM18, 1 << 18   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM19, 1 << 19   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM20, 1 << 20   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM21, 1 << 21   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM22, 1 << 22   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM23, 1 << 23   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM24, 1 << 24   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM25, 1 << 25   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM26, 1 << 26   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM27, 1 << 27   @ bitWidth 1 (Filter mode)  
 
    .equ CAN2_FS1R, CAN2_BASE + 0x20C @ (filter scale register) 
        .equ CAN2_FS1R_FSC0, 1 << 0   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC1, 1 << 1   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC2, 1 << 2   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC3, 1 << 3   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC4, 1 << 4   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC5, 1 << 5   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC6, 1 << 6   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC7, 1 << 7   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC8, 1 << 8   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC9, 1 << 9   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC10, 1 << 10   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC11, 1 << 11   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC12, 1 << 12   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC13, 1 << 13   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC14, 1 << 14   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC15, 1 << 15   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC16, 1 << 16   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC17, 1 << 17   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC18, 1 << 18   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC19, 1 << 19   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC20, 1 << 20   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC21, 1 << 21   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC22, 1 << 22   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC23, 1 << 23   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC24, 1 << 24   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC25, 1 << 25   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC26, 1 << 26   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC27, 1 << 27   @ bitWidth 1 (Filter scale configuration)  
 
    .equ CAN2_FFA1R, CAN2_BASE + 0x214 @ (filter FIFO assignment register) 
        .equ CAN2_FFA1R_FFA0, 1 << 0   @ bitWidth 1 (Filter FIFO assignment for filter 0)  
        .equ CAN2_FFA1R_FFA1, 1 << 1   @ bitWidth 1 (Filter FIFO assignment for filter 1)  
        .equ CAN2_FFA1R_FFA2, 1 << 2   @ bitWidth 1 (Filter FIFO assignment for filter 2)  
        .equ CAN2_FFA1R_FFA3, 1 << 3   @ bitWidth 1 (Filter FIFO assignment for filter 3)  
        .equ CAN2_FFA1R_FFA4, 1 << 4   @ bitWidth 1 (Filter FIFO assignment for filter 4)  
        .equ CAN2_FFA1R_FFA5, 1 << 5   @ bitWidth 1 (Filter FIFO assignment for filter 5)  
        .equ CAN2_FFA1R_FFA6, 1 << 6   @ bitWidth 1 (Filter FIFO assignment for filter 6)  
        .equ CAN2_FFA1R_FFA7, 1 << 7   @ bitWidth 1 (Filter FIFO assignment for filter 7)  
        .equ CAN2_FFA1R_FFA8, 1 << 8   @ bitWidth 1 (Filter FIFO assignment for filter 8)  
        .equ CAN2_FFA1R_FFA9, 1 << 9   @ bitWidth 1 (Filter FIFO assignment for filter 9)  
        .equ CAN2_FFA1R_FFA10, 1 << 10   @ bitWidth 1 (Filter FIFO assignment for filter 10)  
        .equ CAN2_FFA1R_FFA11, 1 << 11   @ bitWidth 1 (Filter FIFO assignment for filter 11)  
        .equ CAN2_FFA1R_FFA12, 1 << 12   @ bitWidth 1 (Filter FIFO assignment for filter 12)  
        .equ CAN2_FFA1R_FFA13, 1 << 13   @ bitWidth 1 (Filter FIFO assignment for filter 13)  
        .equ CAN2_FFA1R_FFA14, 1 << 14   @ bitWidth 1 (Filter FIFO assignment for filter 14)  
        .equ CAN2_FFA1R_FFA15, 1 << 15   @ bitWidth 1 (Filter FIFO assignment for filter 15)  
        .equ CAN2_FFA1R_FFA16, 1 << 16   @ bitWidth 1 (Filter FIFO assignment for filter 16)  
        .equ CAN2_FFA1R_FFA17, 1 << 17   @ bitWidth 1 (Filter FIFO assignment for filter 17)  
        .equ CAN2_FFA1R_FFA18, 1 << 18   @ bitWidth 1 (Filter FIFO assignment for filter 18)  
        .equ CAN2_FFA1R_FFA19, 1 << 19   @ bitWidth 1 (Filter FIFO assignment for filter 19)  
        .equ CAN2_FFA1R_FFA20, 1 << 20   @ bitWidth 1 (Filter FIFO assignment for filter 20)  
        .equ CAN2_FFA1R_FFA21, 1 << 21   @ bitWidth 1 (Filter FIFO assignment for filter 21)  
        .equ CAN2_FFA1R_FFA22, 1 << 22   @ bitWidth 1 (Filter FIFO assignment for filter 22)  
        .equ CAN2_FFA1R_FFA23, 1 << 23   @ bitWidth 1 (Filter FIFO assignment for filter 23)  
        .equ CAN2_FFA1R_FFA24, 1 << 24   @ bitWidth 1 (Filter FIFO assignment for filter 24)  
        .equ CAN2_FFA1R_FFA25, 1 << 25   @ bitWidth 1 (Filter FIFO assignment for filter 25)  
        .equ CAN2_FFA1R_FFA26, 1 << 26   @ bitWidth 1 (Filter FIFO assignment for filter 26)  
        .equ CAN2_FFA1R_FFA27, 1 << 27   @ bitWidth 1 (Filter FIFO assignment for filter 27)  
 
    .equ CAN2_FA1R, CAN2_BASE + 0x21C @ (filter activation register) 
        .equ CAN2_FA1R_FACT0, 1 << 0   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT1, 1 << 1   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT2, 1 << 2   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT3, 1 << 3   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT4, 1 << 4   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT5, 1 << 5   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT6, 1 << 6   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT7, 1 << 7   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT8, 1 << 8   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT9, 1 << 9   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT10, 1 << 10   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT11, 1 << 11   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT12, 1 << 12   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT13, 1 << 13   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT14, 1 << 14   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT15, 1 << 15   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT16, 1 << 16   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT17, 1 << 17   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT18, 1 << 18   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT19, 1 << 19   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT20, 1 << 20   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT21, 1 << 21   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT22, 1 << 22   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT23, 1 << 23   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT24, 1 << 24   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT25, 1 << 25   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT26, 1 << 26   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT27, 1 << 27   @ bitWidth 1 (Filter active)  
 
    .equ CAN2_F0R1, CAN2_BASE + 0x240 @ (Filter bank 0 register 1) 
        .equ CAN2_F0R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F0R2, CAN2_BASE + 0x244 @ (Filter bank 0 register 2) 
        .equ CAN2_F0R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F1R1, CAN2_BASE + 0x248 @ (Filter bank 1 register 1) 
        .equ CAN2_F1R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F1R2, CAN2_BASE + 0x24C @ (Filter bank 1 register 2) 
        .equ CAN2_F1R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F2R1, CAN2_BASE + 0x250 @ (Filter bank 2 register 1) 
        .equ CAN2_F2R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F2R2, CAN2_BASE + 0x254 @ (Filter bank 2 register 2) 
        .equ CAN2_F2R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F3R1, CAN2_BASE + 0x258 @ (Filter bank 3 register 1) 
        .equ CAN2_F3R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F3R2, CAN2_BASE + 0x25C @ (Filter bank 3 register 2) 
        .equ CAN2_F3R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F4R1, CAN2_BASE + 0x260 @ (Filter bank 4 register 1) 
        .equ CAN2_F4R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F4R2, CAN2_BASE + 0x264 @ (Filter bank 4 register 2) 
        .equ CAN2_F4R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F5R1, CAN2_BASE + 0x268 @ (Filter bank 5 register 1) 
        .equ CAN2_F5R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F5R2, CAN2_BASE + 0x26C @ (Filter bank 5 register 2) 
        .equ CAN2_F5R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F6R1, CAN2_BASE + 0x270 @ (Filter bank 6 register 1) 
        .equ CAN2_F6R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F6R2, CAN2_BASE + 0x274 @ (Filter bank 6 register 2) 
        .equ CAN2_F6R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F7R1, CAN2_BASE + 0x278 @ (Filter bank 7 register 1) 
        .equ CAN2_F7R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F7R2, CAN2_BASE + 0x27C @ (Filter bank 7 register 2) 
        .equ CAN2_F7R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F8R1, CAN2_BASE + 0x280 @ (Filter bank 8 register 1) 
        .equ CAN2_F8R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F8R2, CAN2_BASE + 0x284 @ (Filter bank 8 register 2) 
        .equ CAN2_F8R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F9R1, CAN2_BASE + 0x288 @ (Filter bank 9 register 1) 
        .equ CAN2_F9R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F9R2, CAN2_BASE + 0x28C @ (Filter bank 9 register 2) 
        .equ CAN2_F9R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F10R1, CAN2_BASE + 0x290 @ (Filter bank 10 register 1) 
        .equ CAN2_F10R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F10R2, CAN2_BASE + 0x294 @ (Filter bank 10 register 2) 
        .equ CAN2_F10R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F11R1, CAN2_BASE + 0x298 @ (Filter bank 11 register 1) 
        .equ CAN2_F11R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F11R2, CAN2_BASE + 0x29C @ (Filter bank 11 register 2) 
        .equ CAN2_F11R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F12R1, CAN2_BASE + 0x2A0 @ (Filter bank 4 register 1) 
        .equ CAN2_F12R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F12R2, CAN2_BASE + 0x2A4 @ (Filter bank 12 register 2) 
        .equ CAN2_F12R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F13R1, CAN2_BASE + 0x2A8 @ (Filter bank 13 register 1) 
        .equ CAN2_F13R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F13R2, CAN2_BASE + 0x2AC @ (Filter bank 13 register 2) 
        .equ CAN2_F13R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F14R1, CAN2_BASE + 0x2B0 @ (Filter bank 14 register 1) 
        .equ CAN2_F14R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F14R2, CAN2_BASE + 0x2B4 @ (Filter bank 14 register 2) 
        .equ CAN2_F14R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F15R1, CAN2_BASE + 0x2B8 @ (Filter bank 15 register 1) 
        .equ CAN2_F15R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F15R2, CAN2_BASE + 0x2BC @ (Filter bank 15 register 2) 
        .equ CAN2_F15R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F16R1, CAN2_BASE + 0x2C0 @ (Filter bank 16 register 1) 
        .equ CAN2_F16R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F16R2, CAN2_BASE + 0x2C4 @ (Filter bank 16 register 2) 
        .equ CAN2_F16R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F17R1, CAN2_BASE + 0x2C8 @ (Filter bank 17 register 1) 
        .equ CAN2_F17R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F17R2, CAN2_BASE + 0x2CC @ (Filter bank 17 register 2) 
        .equ CAN2_F17R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F18R1, CAN2_BASE + 0x2D0 @ (Filter bank 18 register 1) 
        .equ CAN2_F18R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F18R2, CAN2_BASE + 0x2D4 @ (Filter bank 18 register 2) 
        .equ CAN2_F18R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F19R1, CAN2_BASE + 0x2D8 @ (Filter bank 19 register 1) 
        .equ CAN2_F19R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F19R2, CAN2_BASE + 0x2DC @ (Filter bank 19 register 2) 
        .equ CAN2_F19R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F20R1, CAN2_BASE + 0x2E0 @ (Filter bank 20 register 1) 
        .equ CAN2_F20R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F20R2, CAN2_BASE + 0x2E4 @ (Filter bank 20 register 2) 
        .equ CAN2_F20R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F21R1, CAN2_BASE + 0x2E8 @ (Filter bank 21 register 1) 
        .equ CAN2_F21R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F21R2, CAN2_BASE + 0x2EC @ (Filter bank 21 register 2) 
        .equ CAN2_F21R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F22R1, CAN2_BASE + 0x2F0 @ (Filter bank 22 register 1) 
        .equ CAN2_F22R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F22R2, CAN2_BASE + 0x2F4 @ (Filter bank 22 register 2) 
        .equ CAN2_F22R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F23R1, CAN2_BASE + 0x2F8 @ (Filter bank 23 register 1) 
        .equ CAN2_F23R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F23R2, CAN2_BASE + 0x2FC @ (Filter bank 23 register 2) 
        .equ CAN2_F23R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F24R1, CAN2_BASE + 0x300 @ (Filter bank 24 register 1) 
        .equ CAN2_F24R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F24R2, CAN2_BASE + 0x304 @ (Filter bank 24 register 2) 
        .equ CAN2_F24R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F25R1, CAN2_BASE + 0x308 @ (Filter bank 25 register 1) 
        .equ CAN2_F25R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F25R2, CAN2_BASE + 0x30C @ (Filter bank 25 register 2) 
        .equ CAN2_F25R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F26R1, CAN2_BASE + 0x310 @ (Filter bank 26 register 1) 
        .equ CAN2_F26R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F26R2, CAN2_BASE + 0x314 @ (Filter bank 26 register 2) 
        .equ CAN2_F26R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F27R1, CAN2_BASE + 0x318 @ (Filter bank 27 register 1) 
        .equ CAN2_F27R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F27R2, CAN2_BASE + 0x31C @ (Filter bank 27 register 2) 
        .equ CAN2_F27R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 

@=========================== FLASH ===========================@
.equ FLASH_BASE, 0x40023C00 @ (FLASH) 
    .equ FLASH_ACR, FLASH_BASE + 0x0 @ (Flash access control register) 
        .equ FLASH_ACR_LATENCY_Shift, 0   @ bitWidth 4 (Latency)  
        .equ FLASH_ACR_PRFTEN, 1 << 8   @ bitWidth 1 (Prefetch enable)  
        .equ FLASH_ACR_ARTEN, 1 << 9   @ bitWidth 1 (ART Accelerator Enable)  
        .equ FLASH_ACR_ARTRST, 1 << 11   @ bitWidth 1 (ART Accelerator reset)  
 
    .equ FLASH_KEYR, FLASH_BASE + 0x4 @ (Flash key register) 
        .equ FLASH_KEYR_KEY_Shift, 0   @ bitWidth 32 (FPEC key)  
 
    .equ FLASH_OPTKEYR, FLASH_BASE + 0x8 @ (Flash option key register) 
        .equ FLASH_OPTKEYR_OPTKEY_Shift, 0   @ bitWidth 32 (Option byte key)  
 
    .equ FLASH_SR, FLASH_BASE + 0xC @ (Status register) 
        .equ FLASH_SR_EOP, 1 << 0   @ bitWidth 1 (End of operation)  
        .equ FLASH_SR_OPERR, 1 << 1   @ bitWidth 1 (Operation error)  
        .equ FLASH_SR_WRPERR, 1 << 4   @ bitWidth 1 (Write protection error)  
        .equ FLASH_SR_PGAERR, 1 << 5   @ bitWidth 1 (Programming alignment error)  
        .equ FLASH_SR_PGPERR, 1 << 6   @ bitWidth 1 (Programming parallelism error)  
        .equ FLASH_SR_PGSERR, 1 << 7   @ bitWidth 1 (Programming sequence error)  
        .equ FLASH_SR_BSY, 1 << 16   @ bitWidth 1 (Busy)  
 
    .equ FLASH_CR, FLASH_BASE + 0x10 @ (Control register) 
        .equ FLASH_CR_PG, 1 << 0   @ bitWidth 1 (Programming)  
        .equ FLASH_CR_SER, 1 << 1   @ bitWidth 1 (Sector Erase)  
        .equ FLASH_CR_MER, 1 << 2   @ bitWidth 1 (Mass Erase of sectors 0 to 11)  
        .equ FLASH_CR_SNB_Shift, 3   @ bitWidth 5 (Sector number)  
        .equ FLASH_CR_PSIZE_Shift, 8   @ bitWidth 2 (Program size)  
        .equ FLASH_CR_MER1, 1 << 15   @ bitWidth 1 (Mass Erase of sectors 12 to 23)  
        .equ FLASH_CR_STRT, 1 << 16   @ bitWidth 1 (Start)  
        .equ FLASH_CR_EOPIE, 1 << 24   @ bitWidth 1 (End of operation interrupt enable)  
        .equ FLASH_CR_ERRIE, 1 << 25   @ bitWidth 1 (Error interrupt enable)  
        .equ FLASH_CR_LOCK, 1 << 31   @ bitWidth 1 (Lock)  
 
    .equ FLASH_OPTCR, FLASH_BASE + 0x14 @ (Flash option control register) 
        .equ FLASH_OPTCR_OPTLOCK, 1 << 0   @ bitWidth 1 (Option lock)  
        .equ FLASH_OPTCR_OPTSTRT, 1 << 1   @ bitWidth 1 (Option start)  
        .equ FLASH_OPTCR_BOR_LEV_Shift, 2   @ bitWidth 2 (BOR reset Level)  
        .equ FLASH_OPTCR_WWDG_SW, 1 << 4   @ bitWidth 1 (User option bytes)  
        .equ FLASH_OPTCR_IWDG_SW, 1 << 5   @ bitWidth 1 (User option bytes)  
        .equ FLASH_OPTCR_nRST_STOP, 1 << 6   @ bitWidth 1 (User option bytes)  
        .equ FLASH_OPTCR_nRST_STDBY, 1 << 7   @ bitWidth 1 (User option bytes)  
        .equ FLASH_OPTCR_RDP_Shift, 8   @ bitWidth 8 (Read protect)  
        .equ FLASH_OPTCR_nWRP_Shift, 16   @ bitWidth 8 (Not write protect)  
        .equ FLASH_OPTCR_IWDG_STDBY, 1 << 30   @ bitWidth 1 (Independent watchdog counter freeze in standby mode)  
        .equ FLASH_OPTCR_IWDG_STOP, 1 << 31   @ bitWidth 1 (Independent watchdog counter freeze in Stop mode)  
 
    .equ FLASH_OPTCR1, FLASH_BASE + 0x18 @ (Flash option control register 1) 
        .equ FLASH_OPTCR1_BOOT_ADD0_Shift, 0   @ bitWidth 16 (Boot base address when Boot pin =0)  
        .equ FLASH_OPTCR1_BOOT_ADD1_Shift, 16   @ bitWidth 16 (Boot base address when Boot pin =1)  
 

@=========================== EXTI ===========================@
.equ EXTI_BASE, 0x40013C00 @ (External interrupt/event controller) 
    .equ EXTI_IMR, EXTI_BASE + 0x0 @ (Interrupt mask register EXTI_IMR) 
        .equ EXTI_IMR_MR0, 1 << 0   @ bitWidth 1 (Interrupt Mask on line 0)  
        .equ EXTI_IMR_MR1, 1 << 1   @ bitWidth 1 (Interrupt Mask on line 1)  
        .equ EXTI_IMR_MR2, 1 << 2   @ bitWidth 1 (Interrupt Mask on line 2)  
        .equ EXTI_IMR_MR3, 1 << 3   @ bitWidth 1 (Interrupt Mask on line 3)  
        .equ EXTI_IMR_MR4, 1 << 4   @ bitWidth 1 (Interrupt Mask on line 4)  
        .equ EXTI_IMR_MR5, 1 << 5   @ bitWidth 1 (Interrupt Mask on line 5)  
        .equ EXTI_IMR_MR6, 1 << 6   @ bitWidth 1 (Interrupt Mask on line 6)  
        .equ EXTI_IMR_MR7, 1 << 7   @ bitWidth 1 (Interrupt Mask on line 7)  
        .equ EXTI_IMR_MR8, 1 << 8   @ bitWidth 1 (Interrupt Mask on line 8)  
        .equ EXTI_IMR_MR9, 1 << 9   @ bitWidth 1 (Interrupt Mask on line 9)  
        .equ EXTI_IMR_MR10, 1 << 10   @ bitWidth 1 (Interrupt Mask on line 10)  
        .equ EXTI_IMR_MR11, 1 << 11   @ bitWidth 1 (Interrupt Mask on line 11)  
        .equ EXTI_IMR_MR12, 1 << 12   @ bitWidth 1 (Interrupt Mask on line 12)  
        .equ EXTI_IMR_MR13, 1 << 13   @ bitWidth 1 (Interrupt Mask on line 13)  
        .equ EXTI_IMR_MR14, 1 << 14   @ bitWidth 1 (Interrupt Mask on line 14)  
        .equ EXTI_IMR_MR15, 1 << 15   @ bitWidth 1 (Interrupt Mask on line 15)  
        .equ EXTI_IMR_MR16, 1 << 16   @ bitWidth 1 (Interrupt Mask on line 16)  
        .equ EXTI_IMR_MR17, 1 << 17   @ bitWidth 1 (Interrupt Mask on line 17)  
        .equ EXTI_IMR_MR18, 1 << 18   @ bitWidth 1 (Interrupt Mask on line 18)  
        .equ EXTI_IMR_MR19, 1 << 19   @ bitWidth 1 (Interrupt Mask on line 19)  
        .equ EXTI_IMR_MR20, 1 << 20   @ bitWidth 1 (Interrupt Mask on line 20)  
        .equ EXTI_IMR_MR21, 1 << 21   @ bitWidth 1 (Interrupt Mask on line 21)  
        .equ EXTI_IMR_MR22, 1 << 22   @ bitWidth 1 (Interrupt Mask on line 22)  
 
    .equ EXTI_EMR, EXTI_BASE + 0x4 @ (Event mask register EXTI_EMR) 
        .equ EXTI_EMR_MR0, 1 << 0   @ bitWidth 1 (Event Mask on line 0)  
        .equ EXTI_EMR_MR1, 1 << 1   @ bitWidth 1 (Event Mask on line 1)  
        .equ EXTI_EMR_MR2, 1 << 2   @ bitWidth 1 (Event Mask on line 2)  
        .equ EXTI_EMR_MR3, 1 << 3   @ bitWidth 1 (Event Mask on line 3)  
        .equ EXTI_EMR_MR4, 1 << 4   @ bitWidth 1 (Event Mask on line 4)  
        .equ EXTI_EMR_MR5, 1 << 5   @ bitWidth 1 (Event Mask on line 5)  
        .equ EXTI_EMR_MR6, 1 << 6   @ bitWidth 1 (Event Mask on line 6)  
        .equ EXTI_EMR_MR7, 1 << 7   @ bitWidth 1 (Event Mask on line 7)  
        .equ EXTI_EMR_MR8, 1 << 8   @ bitWidth 1 (Event Mask on line 8)  
        .equ EXTI_EMR_MR9, 1 << 9   @ bitWidth 1 (Event Mask on line 9)  
        .equ EXTI_EMR_MR10, 1 << 10   @ bitWidth 1 (Event Mask on line 10)  
        .equ EXTI_EMR_MR11, 1 << 11   @ bitWidth 1 (Event Mask on line 11)  
        .equ EXTI_EMR_MR12, 1 << 12   @ bitWidth 1 (Event Mask on line 12)  
        .equ EXTI_EMR_MR13, 1 << 13   @ bitWidth 1 (Event Mask on line 13)  
        .equ EXTI_EMR_MR14, 1 << 14   @ bitWidth 1 (Event Mask on line 14)  
        .equ EXTI_EMR_MR15, 1 << 15   @ bitWidth 1 (Event Mask on line 15)  
        .equ EXTI_EMR_MR16, 1 << 16   @ bitWidth 1 (Event Mask on line 16)  
        .equ EXTI_EMR_MR17, 1 << 17   @ bitWidth 1 (Event Mask on line 17)  
        .equ EXTI_EMR_MR18, 1 << 18   @ bitWidth 1 (Event Mask on line 18)  
        .equ EXTI_EMR_MR19, 1 << 19   @ bitWidth 1 (Event Mask on line 19)  
        .equ EXTI_EMR_MR20, 1 << 20   @ bitWidth 1 (Event Mask on line 20)  
        .equ EXTI_EMR_MR21, 1 << 21   @ bitWidth 1 (Event Mask on line 21)  
        .equ EXTI_EMR_MR22, 1 << 22   @ bitWidth 1 (Event Mask on line 22)  
 
    .equ EXTI_RTSR, EXTI_BASE + 0x8 @ (Rising Trigger selection register EXTI_RTSR) 
        .equ EXTI_RTSR_TR0, 1 << 0   @ bitWidth 1 (Rising trigger event configuration of line 0)  
        .equ EXTI_RTSR_TR1, 1 << 1   @ bitWidth 1 (Rising trigger event configuration of line 1)  
        .equ EXTI_RTSR_TR2, 1 << 2   @ bitWidth 1 (Rising trigger event configuration of line 2)  
        .equ EXTI_RTSR_TR3, 1 << 3   @ bitWidth 1 (Rising trigger event configuration of line 3)  
        .equ EXTI_RTSR_TR4, 1 << 4   @ bitWidth 1 (Rising trigger event configuration of line 4)  
        .equ EXTI_RTSR_TR5, 1 << 5   @ bitWidth 1 (Rising trigger event configuration of line 5)  
        .equ EXTI_RTSR_TR6, 1 << 6   @ bitWidth 1 (Rising trigger event configuration of line 6)  
        .equ EXTI_RTSR_TR7, 1 << 7   @ bitWidth 1 (Rising trigger event configuration of line 7)  
        .equ EXTI_RTSR_TR8, 1 << 8   @ bitWidth 1 (Rising trigger event configuration of line 8)  
        .equ EXTI_RTSR_TR9, 1 << 9   @ bitWidth 1 (Rising trigger event configuration of line 9)  
        .equ EXTI_RTSR_TR10, 1 << 10   @ bitWidth 1 (Rising trigger event configuration of line 10)  
        .equ EXTI_RTSR_TR11, 1 << 11   @ bitWidth 1 (Rising trigger event configuration of line 11)  
        .equ EXTI_RTSR_TR12, 1 << 12   @ bitWidth 1 (Rising trigger event configuration of line 12)  
        .equ EXTI_RTSR_TR13, 1 << 13   @ bitWidth 1 (Rising trigger event configuration of line 13)  
        .equ EXTI_RTSR_TR14, 1 << 14   @ bitWidth 1 (Rising trigger event configuration of line 14)  
        .equ EXTI_RTSR_TR15, 1 << 15   @ bitWidth 1 (Rising trigger event configuration of line 15)  
        .equ EXTI_RTSR_TR16, 1 << 16   @ bitWidth 1 (Rising trigger event configuration of line 16)  
        .equ EXTI_RTSR_TR17, 1 << 17   @ bitWidth 1 (Rising trigger event configuration of line 17)  
        .equ EXTI_RTSR_TR18, 1 << 18   @ bitWidth 1 (Rising trigger event configuration of line 18)  
        .equ EXTI_RTSR_TR19, 1 << 19   @ bitWidth 1 (Rising trigger event configuration of line 19)  
        .equ EXTI_RTSR_TR20, 1 << 20   @ bitWidth 1 (Rising trigger event configuration of line 20)  
        .equ EXTI_RTSR_TR21, 1 << 21   @ bitWidth 1 (Rising trigger event configuration of line 21)  
        .equ EXTI_RTSR_TR22, 1 << 22   @ bitWidth 1 (Rising trigger event configuration of line 22)  
 
    .equ EXTI_FTSR, EXTI_BASE + 0xC @ (Falling Trigger selection register EXTI_FTSR) 
        .equ EXTI_FTSR_TR0, 1 << 0   @ bitWidth 1 (Falling trigger event configuration of line 0)  
        .equ EXTI_FTSR_TR1, 1 << 1   @ bitWidth 1 (Falling trigger event configuration of line 1)  
        .equ EXTI_FTSR_TR2, 1 << 2   @ bitWidth 1 (Falling trigger event configuration of line 2)  
        .equ EXTI_FTSR_TR3, 1 << 3   @ bitWidth 1 (Falling trigger event configuration of line 3)  
        .equ EXTI_FTSR_TR4, 1 << 4   @ bitWidth 1 (Falling trigger event configuration of line 4)  
        .equ EXTI_FTSR_TR5, 1 << 5   @ bitWidth 1 (Falling trigger event configuration of line 5)  
        .equ EXTI_FTSR_TR6, 1 << 6   @ bitWidth 1 (Falling trigger event configuration of line 6)  
        .equ EXTI_FTSR_TR7, 1 << 7   @ bitWidth 1 (Falling trigger event configuration of line 7)  
        .equ EXTI_FTSR_TR8, 1 << 8   @ bitWidth 1 (Falling trigger event configuration of line 8)  
        .equ EXTI_FTSR_TR9, 1 << 9   @ bitWidth 1 (Falling trigger event configuration of line 9)  
        .equ EXTI_FTSR_TR10, 1 << 10   @ bitWidth 1 (Falling trigger event configuration of line 10)  
        .equ EXTI_FTSR_TR11, 1 << 11   @ bitWidth 1 (Falling trigger event configuration of line 11)  
        .equ EXTI_FTSR_TR12, 1 << 12   @ bitWidth 1 (Falling trigger event configuration of line 12)  
        .equ EXTI_FTSR_TR13, 1 << 13   @ bitWidth 1 (Falling trigger event configuration of line 13)  
        .equ EXTI_FTSR_TR14, 1 << 14   @ bitWidth 1 (Falling trigger event configuration of line 14)  
        .equ EXTI_FTSR_TR15, 1 << 15   @ bitWidth 1 (Falling trigger event configuration of line 15)  
        .equ EXTI_FTSR_TR16, 1 << 16   @ bitWidth 1 (Falling trigger event configuration of line 16)  
        .equ EXTI_FTSR_TR17, 1 << 17   @ bitWidth 1 (Falling trigger event configuration of line 17)  
        .equ EXTI_FTSR_TR18, 1 << 18   @ bitWidth 1 (Falling trigger event configuration of line 18)  
        .equ EXTI_FTSR_TR19, 1 << 19   @ bitWidth 1 (Falling trigger event configuration of line 19)  
        .equ EXTI_FTSR_TR20, 1 << 20   @ bitWidth 1 (Falling trigger event configuration of line 20)  
        .equ EXTI_FTSR_TR21, 1 << 21   @ bitWidth 1 (Falling trigger event configuration of line 21)  
        .equ EXTI_FTSR_TR22, 1 << 22   @ bitWidth 1 (Falling trigger event configuration of line 22)  
 
    .equ EXTI_SWIER, EXTI_BASE + 0x10 @ (Software interrupt event register EXTI_SWIER) 
        .equ EXTI_SWIER_SWIER0, 1 << 0   @ bitWidth 1 (Software Interrupt on line 0)  
        .equ EXTI_SWIER_SWIER1, 1 << 1   @ bitWidth 1 (Software Interrupt on line 1)  
        .equ EXTI_SWIER_SWIER2, 1 << 2   @ bitWidth 1 (Software Interrupt on line 2)  
        .equ EXTI_SWIER_SWIER3, 1 << 3   @ bitWidth 1 (Software Interrupt on line 3)  
        .equ EXTI_SWIER_SWIER4, 1 << 4   @ bitWidth 1 (Software Interrupt on line 4)  
        .equ EXTI_SWIER_SWIER5, 1 << 5   @ bitWidth 1 (Software Interrupt on line 5)  
        .equ EXTI_SWIER_SWIER6, 1 << 6   @ bitWidth 1 (Software Interrupt on line 6)  
        .equ EXTI_SWIER_SWIER7, 1 << 7   @ bitWidth 1 (Software Interrupt on line 7)  
        .equ EXTI_SWIER_SWIER8, 1 << 8   @ bitWidth 1 (Software Interrupt on line 8)  
        .equ EXTI_SWIER_SWIER9, 1 << 9   @ bitWidth 1 (Software Interrupt on line 9)  
        .equ EXTI_SWIER_SWIER10, 1 << 10   @ bitWidth 1 (Software Interrupt on line 10)  
        .equ EXTI_SWIER_SWIER11, 1 << 11   @ bitWidth 1 (Software Interrupt on line 11)  
        .equ EXTI_SWIER_SWIER12, 1 << 12   @ bitWidth 1 (Software Interrupt on line 12)  
        .equ EXTI_SWIER_SWIER13, 1 << 13   @ bitWidth 1 (Software Interrupt on line 13)  
        .equ EXTI_SWIER_SWIER14, 1 << 14   @ bitWidth 1 (Software Interrupt on line 14)  
        .equ EXTI_SWIER_SWIER15, 1 << 15   @ bitWidth 1 (Software Interrupt on line 15)  
        .equ EXTI_SWIER_SWIER16, 1 << 16   @ bitWidth 1 (Software Interrupt on line 16)  
        .equ EXTI_SWIER_SWIER17, 1 << 17   @ bitWidth 1 (Software Interrupt on line 17)  
        .equ EXTI_SWIER_SWIER18, 1 << 18   @ bitWidth 1 (Software Interrupt on line 18)  
        .equ EXTI_SWIER_SWIER19, 1 << 19   @ bitWidth 1 (Software Interrupt on line 19)  
        .equ EXTI_SWIER_SWIER20, 1 << 20   @ bitWidth 1 (Software Interrupt on line 20)  
        .equ EXTI_SWIER_SWIER21, 1 << 21   @ bitWidth 1 (Software Interrupt on line 21)  
        .equ EXTI_SWIER_SWIER22, 1 << 22   @ bitWidth 1 (Software Interrupt on line 22)  
 
    .equ EXTI_PR, EXTI_BASE + 0x14 @ (Pending register EXTI_PR) 
        .equ EXTI_PR_PR0, 1 << 0   @ bitWidth 1 (Pending bit 0)  
        .equ EXTI_PR_PR1, 1 << 1   @ bitWidth 1 (Pending bit 1)  
        .equ EXTI_PR_PR2, 1 << 2   @ bitWidth 1 (Pending bit 2)  
        .equ EXTI_PR_PR3, 1 << 3   @ bitWidth 1 (Pending bit 3)  
        .equ EXTI_PR_PR4, 1 << 4   @ bitWidth 1 (Pending bit 4)  
        .equ EXTI_PR_PR5, 1 << 5   @ bitWidth 1 (Pending bit 5)  
        .equ EXTI_PR_PR6, 1 << 6   @ bitWidth 1 (Pending bit 6)  
        .equ EXTI_PR_PR7, 1 << 7   @ bitWidth 1 (Pending bit 7)  
        .equ EXTI_PR_PR8, 1 << 8   @ bitWidth 1 (Pending bit 8)  
        .equ EXTI_PR_PR9, 1 << 9   @ bitWidth 1 (Pending bit 9)  
        .equ EXTI_PR_PR10, 1 << 10   @ bitWidth 1 (Pending bit 10)  
        .equ EXTI_PR_PR11, 1 << 11   @ bitWidth 1 (Pending bit 11)  
        .equ EXTI_PR_PR12, 1 << 12   @ bitWidth 1 (Pending bit 12)  
        .equ EXTI_PR_PR13, 1 << 13   @ bitWidth 1 (Pending bit 13)  
        .equ EXTI_PR_PR14, 1 << 14   @ bitWidth 1 (Pending bit 14)  
        .equ EXTI_PR_PR15, 1 << 15   @ bitWidth 1 (Pending bit 15)  
        .equ EXTI_PR_PR16, 1 << 16   @ bitWidth 1 (Pending bit 16)  
        .equ EXTI_PR_PR17, 1 << 17   @ bitWidth 1 (Pending bit 17)  
        .equ EXTI_PR_PR18, 1 << 18   @ bitWidth 1 (Pending bit 18)  
        .equ EXTI_PR_PR19, 1 << 19   @ bitWidth 1 (Pending bit 19)  
        .equ EXTI_PR_PR20, 1 << 20   @ bitWidth 1 (Pending bit 20)  
        .equ EXTI_PR_PR21, 1 << 21   @ bitWidth 1 (Pending bit 21)  
        .equ EXTI_PR_PR22, 1 << 22   @ bitWidth 1 (Pending bit 22)  
 

@=========================== LTDC ===========================@
.equ LTDC_BASE, 0x40016800 @ (LCD-TFT Controller) 
    .equ LTDC_SSCR, LTDC_BASE + 0x8 @ (Synchronization Size Configuration Register) 
        .equ LTDC_SSCR_HSW_Shift, 16   @ bitWidth 10 (Horizontal Synchronization Width in units of pixel clock period)  
        .equ LTDC_SSCR_VSH_Shift, 0   @ bitWidth 11 (Vertical Synchronization Height in units of horizontal scan line)  
 
    .equ LTDC_BPCR, LTDC_BASE + 0xC @ (Back Porch Configuration Register) 
        .equ LTDC_BPCR_AHBP_Shift, 16   @ bitWidth 10 (Accumulated Horizontal back porch in units of pixel clock period)  
        .equ LTDC_BPCR_AVBP_Shift, 0   @ bitWidth 11 (Accumulated Vertical back porch in units of horizontal scan line)  
 
    .equ LTDC_AWCR, LTDC_BASE + 0x10 @ (Active Width Configuration Register) 
        .equ LTDC_AWCR_AAV_Shift, 16   @ bitWidth 10 (AAV)  
        .equ LTDC_AWCR_AAH_Shift, 0   @ bitWidth 11 (Accumulated Active Height in units of horizontal scan line)  
 
    .equ LTDC_TWCR, LTDC_BASE + 0x14 @ (Total Width Configuration Register) 
        .equ LTDC_TWCR_TOTALW_Shift, 16   @ bitWidth 10 (Total Width in units of pixel clock period)  
        .equ LTDC_TWCR_TOTALH_Shift, 0   @ bitWidth 11 (Total Height in units of horizontal scan line)  
 
    .equ LTDC_GCR, LTDC_BASE + 0x18 @ (Global Control Register) 
        .equ LTDC_GCR_HSPOL, 1 << 31   @ bitWidth 1 (Horizontal Synchronization Polarity)  
        .equ LTDC_GCR_VSPOL, 1 << 30   @ bitWidth 1 (Vertical Synchronization Polarity)  
        .equ LTDC_GCR_DEPOL, 1 << 29   @ bitWidth 1 (Data Enable Polarity)  
        .equ LTDC_GCR_PCPOL, 1 << 28   @ bitWidth 1 (Pixel Clock Polarity)  
        .equ LTDC_GCR_DEN, 1 << 16   @ bitWidth 1 (Dither Enable)  
        .equ LTDC_GCR_DRW_Shift, 12   @ bitWidth 3 (Dither Red Width)  
        .equ LTDC_GCR_DGW_Shift, 8   @ bitWidth 3 (Dither Green Width)  
        .equ LTDC_GCR_DBW_Shift, 4   @ bitWidth 3 (Dither Blue Width)  
        .equ LTDC_GCR_LTDCEN, 1 << 0   @ bitWidth 1 (LCD-TFT controller enable bit)  
 
    .equ LTDC_SRCR, LTDC_BASE + 0x24 @ (Shadow Reload Configuration Register) 
        .equ LTDC_SRCR_VBR, 1 << 1   @ bitWidth 1 (Vertical Blanking Reload)  
        .equ LTDC_SRCR_IMR, 1 << 0   @ bitWidth 1 (Immediate Reload)  
 
    .equ LTDC_BCCR, LTDC_BASE + 0x2C @ (Background Color Configuration Register) 
        .equ LTDC_BCCR_BC_Shift, 0   @ bitWidth 24 (Background Color Red value)  
 
    .equ LTDC_IER, LTDC_BASE + 0x34 @ (Interrupt Enable Register) 
        .equ LTDC_IER_RRIE, 1 << 3   @ bitWidth 1 (Register Reload interrupt enable)  
        .equ LTDC_IER_TERRIE, 1 << 2   @ bitWidth 1 (Transfer Error Interrupt Enable)  
        .equ LTDC_IER_FUIE, 1 << 1   @ bitWidth 1 (FIFO Underrun Interrupt Enable)  
        .equ LTDC_IER_LIE, 1 << 0   @ bitWidth 1 (Line Interrupt Enable)  
 
    .equ LTDC_ISR, LTDC_BASE + 0x38 @ (Interrupt Status Register) 
        .equ LTDC_ISR_RRIF, 1 << 3   @ bitWidth 1 (Register Reload Interrupt Flag)  
        .equ LTDC_ISR_TERRIF, 1 << 2   @ bitWidth 1 (Transfer Error interrupt flag)  
        .equ LTDC_ISR_FUIF, 1 << 1   @ bitWidth 1 (FIFO Underrun Interrupt flag)  
        .equ LTDC_ISR_LIF, 1 << 0   @ bitWidth 1 (Line Interrupt flag)  
 
    .equ LTDC_ICR, LTDC_BASE + 0x3C @ (Interrupt Clear Register) 
        .equ LTDC_ICR_CRRIF, 1 << 3   @ bitWidth 1 (Clears Register Reload Interrupt Flag)  
        .equ LTDC_ICR_CTERRIF, 1 << 2   @ bitWidth 1 (Clears the Transfer Error Interrupt Flag)  
        .equ LTDC_ICR_CFUIF, 1 << 1   @ bitWidth 1 (Clears the FIFO Underrun Interrupt flag)  
        .equ LTDC_ICR_CLIF, 1 << 0   @ bitWidth 1 (Clears the Line Interrupt Flag)  
 
    .equ LTDC_LIPCR, LTDC_BASE + 0x40 @ (Line Interrupt Position Configuration Register) 
        .equ LTDC_LIPCR_LIPOS_Shift, 0   @ bitWidth 11 (Line Interrupt Position)  
 
    .equ LTDC_CPSR, LTDC_BASE + 0x44 @ (Current Position Status Register) 
        .equ LTDC_CPSR_CXPOS_Shift, 16   @ bitWidth 16 (Current X Position)  
        .equ LTDC_CPSR_CYPOS_Shift, 0   @ bitWidth 16 (Current Y Position)  
 
    .equ LTDC_CDSR, LTDC_BASE + 0x48 @ (Current Display Status Register) 
        .equ LTDC_CDSR_HSYNCS, 1 << 3   @ bitWidth 1 (Horizontal Synchronization display Status)  
        .equ LTDC_CDSR_VSYNCS, 1 << 2   @ bitWidth 1 (Vertical Synchronization display Status)  
        .equ LTDC_CDSR_HDES, 1 << 1   @ bitWidth 1 (Horizontal Data Enable display Status)  
        .equ LTDC_CDSR_VDES, 1 << 0   @ bitWidth 1 (Vertical Data Enable display Status)  
 
    .equ LTDC_L1CR, LTDC_BASE + 0x84 @ (Layerx Control Register) 
        .equ LTDC_L1CR_CLUTEN, 1 << 4   @ bitWidth 1 (Color Look-Up Table Enable)  
        .equ LTDC_L1CR_COLKEN, 1 << 1   @ bitWidth 1 (Color Keying Enable)  
        .equ LTDC_L1CR_LEN, 1 << 0   @ bitWidth 1 (Layer Enable)  
 
    .equ LTDC_L1WHPCR, LTDC_BASE + 0x88 @ (Layerx Window Horizontal Position Configuration Register) 
        .equ LTDC_L1WHPCR_WHSPPOS_Shift, 16   @ bitWidth 12 (Window Horizontal Stop Position)  
        .equ LTDC_L1WHPCR_WHSTPOS_Shift, 0   @ bitWidth 12 (Window Horizontal Start Position)  
 
    .equ LTDC_L1WVPCR, LTDC_BASE + 0x8C @ (Layerx Window Vertical Position Configuration Register) 
        .equ LTDC_L1WVPCR_WVSPPOS_Shift, 16   @ bitWidth 11 (Window Vertical Stop Position)  
        .equ LTDC_L1WVPCR_WVSTPOS_Shift, 0   @ bitWidth 11 (Window Vertical Start Position)  
 
    .equ LTDC_L1CKCR, LTDC_BASE + 0x90 @ (Layerx Color Keying Configuration Register) 
        .equ LTDC_L1CKCR_CKRED_Shift, 16   @ bitWidth 8 (Color Key Red value)  
        .equ LTDC_L1CKCR_CKGREEN_Shift, 8   @ bitWidth 8 (Color Key Green value)  
        .equ LTDC_L1CKCR_CKBLUE_Shift, 0   @ bitWidth 8 (Color Key Blue value)  
 
    .equ LTDC_L1PFCR, LTDC_BASE + 0x94 @ (Layerx Pixel Format Configuration Register) 
        .equ LTDC_L1PFCR_PF_Shift, 0   @ bitWidth 3 (Pixel Format)  
 
    .equ LTDC_L1CACR, LTDC_BASE + 0x98 @ (Layerx Constant Alpha Configuration Register) 
        .equ LTDC_L1CACR_CONSTA_Shift, 0   @ bitWidth 8 (Constant Alpha)  
 
    .equ LTDC_L1DCCR, LTDC_BASE + 0x9C @ (Layerx Default Color Configuration Register) 
        .equ LTDC_L1DCCR_DCALPHA_Shift, 24   @ bitWidth 8 (Default Color Alpha)  
        .equ LTDC_L1DCCR_DCRED_Shift, 16   @ bitWidth 8 (Default Color Red)  
        .equ LTDC_L1DCCR_DCGREEN_Shift, 8   @ bitWidth 8 (Default Color Green)  
        .equ LTDC_L1DCCR_DCBLUE_Shift, 0   @ bitWidth 8 (Default Color Blue)  
 
    .equ LTDC_L1BFCR, LTDC_BASE + 0xA0 @ (Layerx Blending Factors Configuration Register) 
        .equ LTDC_L1BFCR_BF1_Shift, 8   @ bitWidth 3 (Blending Factor 1)  
        .equ LTDC_L1BFCR_BF2_Shift, 0   @ bitWidth 3 (Blending Factor 2)  
 
    .equ LTDC_L1CFBAR, LTDC_BASE + 0xAC @ (Layerx Color Frame Buffer Address Register) 
        .equ LTDC_L1CFBAR_CFBADD_Shift, 0   @ bitWidth 32 (Color Frame Buffer Start Address)  
 
    .equ LTDC_L1CFBLR, LTDC_BASE + 0xB0 @ (Layerx Color Frame Buffer Length Register) 
        .equ LTDC_L1CFBLR_CFBP_Shift, 16   @ bitWidth 13 (Color Frame Buffer Pitch in bytes)  
        .equ LTDC_L1CFBLR_CFBLL_Shift, 0   @ bitWidth 13 (Color Frame Buffer Line Length)  
 
    .equ LTDC_L1CFBLNR, LTDC_BASE + 0xB4 @ (Layerx ColorFrame Buffer Line Number Register) 
        .equ LTDC_L1CFBLNR_CFBLNBR_Shift, 0   @ bitWidth 11 (Frame Buffer Line Number)  
 
    .equ LTDC_L1CLUTWR, LTDC_BASE + 0xC4 @ (Layerx CLUT Write Register) 
        .equ LTDC_L1CLUTWR_CLUTADD_Shift, 24   @ bitWidth 8 (CLUT Address)  
        .equ LTDC_L1CLUTWR_RED_Shift, 16   @ bitWidth 8 (Red value)  
        .equ LTDC_L1CLUTWR_GREEN_Shift, 8   @ bitWidth 8 (Green value)  
        .equ LTDC_L1CLUTWR_BLUE_Shift, 0   @ bitWidth 8 (Blue value)  
 
    .equ LTDC_L2CR, LTDC_BASE + 0x104 @ (Layerx Control Register) 
        .equ LTDC_L2CR_CLUTEN, 1 << 4   @ bitWidth 1 (Color Look-Up Table Enable)  
        .equ LTDC_L2CR_COLKEN, 1 << 1   @ bitWidth 1 (Color Keying Enable)  
        .equ LTDC_L2CR_LEN, 1 << 0   @ bitWidth 1 (Layer Enable)  
 
    .equ LTDC_L2WHPCR, LTDC_BASE + 0x108 @ (Layerx Window Horizontal Position Configuration Register) 
        .equ LTDC_L2WHPCR_WHSPPOS_Shift, 16   @ bitWidth 12 (Window Horizontal Stop Position)  
        .equ LTDC_L2WHPCR_WHSTPOS_Shift, 0   @ bitWidth 12 (Window Horizontal Start Position)  
 
    .equ LTDC_L2WVPCR, LTDC_BASE + 0x10C @ (Layerx Window Vertical Position Configuration Register) 
        .equ LTDC_L2WVPCR_WVSPPOS_Shift, 16   @ bitWidth 11 (Window Vertical Stop Position)  
        .equ LTDC_L2WVPCR_WVSTPOS_Shift, 0   @ bitWidth 11 (Window Vertical Start Position)  
 
    .equ LTDC_L2CKCR, LTDC_BASE + 0x110 @ (Layerx Color Keying Configuration Register) 
        .equ LTDC_L2CKCR_CKRED_Shift, 15   @ bitWidth 9 (Color Key Red value)  
        .equ LTDC_L2CKCR_CKGREEN_Shift, 8   @ bitWidth 7 (Color Key Green value)  
        .equ LTDC_L2CKCR_CKBLUE_Shift, 0   @ bitWidth 8 (Color Key Blue value)  
 
    .equ LTDC_L2PFCR, LTDC_BASE + 0x114 @ (Layerx Pixel Format Configuration Register) 
        .equ LTDC_L2PFCR_PF_Shift, 0   @ bitWidth 3 (Pixel Format)  
 
    .equ LTDC_L2CACR, LTDC_BASE + 0x118 @ (Layerx Constant Alpha Configuration Register) 
        .equ LTDC_L2CACR_CONSTA_Shift, 0   @ bitWidth 8 (Constant Alpha)  
 
    .equ LTDC_L2DCCR, LTDC_BASE + 0x11C @ (Layerx Default Color Configuration Register) 
        .equ LTDC_L2DCCR_DCALPHA_Shift, 24   @ bitWidth 8 (Default Color Alpha)  
        .equ LTDC_L2DCCR_DCRED_Shift, 16   @ bitWidth 8 (Default Color Red)  
        .equ LTDC_L2DCCR_DCGREEN_Shift, 8   @ bitWidth 8 (Default Color Green)  
        .equ LTDC_L2DCCR_DCBLUE_Shift, 0   @ bitWidth 8 (Default Color Blue)  
 
    .equ LTDC_L2BFCR, LTDC_BASE + 0x120 @ (Layerx Blending Factors Configuration Register) 
        .equ LTDC_L2BFCR_BF1_Shift, 8   @ bitWidth 3 (Blending Factor 1)  
        .equ LTDC_L2BFCR_BF2_Shift, 0   @ bitWidth 3 (Blending Factor 2)  
 
    .equ LTDC_L2CFBAR, LTDC_BASE + 0x12C @ (Layerx Color Frame Buffer Address Register) 
        .equ LTDC_L2CFBAR_CFBADD_Shift, 0   @ bitWidth 32 (Color Frame Buffer Start Address)  
 
    .equ LTDC_L2CFBLR, LTDC_BASE + 0x130 @ (Layerx Color Frame Buffer Length Register) 
        .equ LTDC_L2CFBLR_CFBP_Shift, 16   @ bitWidth 13 (Color Frame Buffer Pitch in bytes)  
        .equ LTDC_L2CFBLR_CFBLL_Shift, 0   @ bitWidth 13 (Color Frame Buffer Line Length)  
 
    .equ LTDC_L2CFBLNR, LTDC_BASE + 0x134 @ (Layerx ColorFrame Buffer Line Number Register) 
        .equ LTDC_L2CFBLNR_CFBLNBR_Shift, 0   @ bitWidth 11 (Frame Buffer Line Number)  
 
    .equ LTDC_L2CLUTWR, LTDC_BASE + 0x144 @ (Layerx CLUT Write Register) 
        .equ LTDC_L2CLUTWR_CLUTADD_Shift, 24   @ bitWidth 8 (CLUT Address)  
        .equ LTDC_L2CLUTWR_RED_Shift, 16   @ bitWidth 8 (Red value)  
        .equ LTDC_L2CLUTWR_GREEN_Shift, 8   @ bitWidth 8 (Green value)  
        .equ LTDC_L2CLUTWR_BLUE_Shift, 0   @ bitWidth 8 (Blue value)  
 

@=========================== SAI1 ===========================@
.equ SAI1_BASE, 0x40015800 @ (Serial audio interface) 
    .equ SAI1_BCR1, SAI1_BASE + 0x24 @ (BConfiguration register 1) 
        .equ SAI1_BCR1_MCJDIV_Shift, 20   @ bitWidth 4 (Master clock divider)  
        .equ SAI1_BCR1_NODIV, 1 << 19   @ bitWidth 1 (No divider)  
        .equ SAI1_BCR1_DMAEN, 1 << 17   @ bitWidth 1 (DMA enable)  
        .equ SAI1_BCR1_SAIBEN, 1 << 16   @ bitWidth 1 (Audio block B enable)  
        .equ SAI1_BCR1_OutDri, 1 << 13   @ bitWidth 1 (Output drive)  
        .equ SAI1_BCR1_MONO, 1 << 12   @ bitWidth 1 (Mono mode)  
        .equ SAI1_BCR1_SYNCEN_Shift, 10   @ bitWidth 2 (Synchronization enable)  
        .equ SAI1_BCR1_CKSTR, 1 << 9   @ bitWidth 1 (Clock strobing edge)  
        .equ SAI1_BCR1_LSBFIRST, 1 << 8   @ bitWidth 1 (Least significant bit first)  
        .equ SAI1_BCR1_DS_Shift, 5   @ bitWidth 3 (Data size)  
        .equ SAI1_BCR1_PRTCFG_Shift, 2   @ bitWidth 2 (Protocol configuration)  
        .equ SAI1_BCR1_MODE_Shift, 0   @ bitWidth 2 (Audio block mode)  
 
    .equ SAI1_BCR2, SAI1_BASE + 0x28 @ (BConfiguration register 2) 
        .equ SAI1_BCR2_COMP_Shift, 14   @ bitWidth 2 (Companding mode)  
        .equ SAI1_BCR2_CPL, 1 << 13   @ bitWidth 1 (Complement bit)  
        .equ SAI1_BCR2_MUTECN_Shift, 7   @ bitWidth 6 (Mute counter)  
        .equ SAI1_BCR2_MUTEVAL, 1 << 6   @ bitWidth 1 (Mute value)  
        .equ SAI1_BCR2_MUTE, 1 << 5   @ bitWidth 1 (Mute)  
        .equ SAI1_BCR2_TRIS, 1 << 4   @ bitWidth 1 (Tristate management on data line)  
        .equ SAI1_BCR2_FFLUS, 1 << 3   @ bitWidth 1 (FIFO flush)  
        .equ SAI1_BCR2_FTH_Shift, 0   @ bitWidth 3 (FIFO threshold)  
 
    .equ SAI1_BFRCR, SAI1_BASE + 0x2C @ (BFRCR) 
        .equ SAI1_BFRCR_FSOFF, 1 << 18   @ bitWidth 1 (Frame synchronization offset)  
        .equ SAI1_BFRCR_FSPOL, 1 << 17   @ bitWidth 1 (Frame synchronization polarity)  
        .equ SAI1_BFRCR_FSDEF, 1 << 16   @ bitWidth 1 (Frame synchronization definition)  
        .equ SAI1_BFRCR_FSALL_Shift, 8   @ bitWidth 7 (Frame synchronization active level length)  
        .equ SAI1_BFRCR_FRL_Shift, 0   @ bitWidth 8 (Frame length)  
 
    .equ SAI1_BSLOTR, SAI1_BASE + 0x30 @ (BSlot register) 
        .equ SAI1_BSLOTR_SLOTEN_Shift, 16   @ bitWidth 16 (Slot enable)  
        .equ SAI1_BSLOTR_NBSLOT_Shift, 8   @ bitWidth 4 (Number of slots in an audio frame)  
        .equ SAI1_BSLOTR_SLOTSZ_Shift, 6   @ bitWidth 2 (Slot size)  
        .equ SAI1_BSLOTR_FBOFF_Shift, 0   @ bitWidth 5 (First bit offset)  
 
    .equ SAI1_BIM, SAI1_BASE + 0x34 @ (BInterrupt mask register2) 
        .equ SAI1_BIM_LFSDETIE, 1 << 6   @ bitWidth 1 (Late frame synchronization detection interrupt enable)  
        .equ SAI1_BIM_AFSDETIE, 1 << 5   @ bitWidth 1 (Anticipated frame synchronization detection interrupt enable)  
        .equ SAI1_BIM_CNRDYIE, 1 << 4   @ bitWidth 1 (Codec not ready interrupt enable)  
        .equ SAI1_BIM_FREQIE, 1 << 3   @ bitWidth 1 (FIFO request interrupt enable)  
        .equ SAI1_BIM_WCKCFG, 1 << 2   @ bitWidth 1 (Wrong clock configuration interrupt enable)  
        .equ SAI1_BIM_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection interrupt enable)  
        .equ SAI1_BIM_OVRUDRIE, 1 << 0   @ bitWidth 1 (Overrun/underrun interrupt enable)  
 
    .equ SAI1_BSR, SAI1_BASE + 0x38 @ (BStatus register) 
        .equ SAI1_BSR_FLVL_Shift, 16   @ bitWidth 3 (FIFO level threshold)  
        .equ SAI1_BSR_LFSDET, 1 << 6   @ bitWidth 1 (Late frame synchronization detection)  
        .equ SAI1_BSR_AFSDET, 1 << 5   @ bitWidth 1 (Anticipated frame synchronization detection)  
        .equ SAI1_BSR_CNRDY, 1 << 4   @ bitWidth 1 (Codec not ready)  
        .equ SAI1_BSR_FREQ, 1 << 3   @ bitWidth 1 (FIFO request)  
        .equ SAI1_BSR_WCKCFG, 1 << 2   @ bitWidth 1 (Wrong clock configuration flag)  
        .equ SAI1_BSR_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection)  
        .equ SAI1_BSR_OVRUDR, 1 << 0   @ bitWidth 1 (Overrun / underrun)  
 
    .equ SAI1_BCLRFR, SAI1_BASE + 0x3C @ (BClear flag register) 
        .equ SAI1_BCLRFR_LFSDET, 1 << 6   @ bitWidth 1 (Clear late frame synchronization detection flag)  
        .equ SAI1_BCLRFR_CAFSDET, 1 << 5   @ bitWidth 1 (Clear anticipated frame synchronization detection flag)  
        .equ SAI1_BCLRFR_CNRDY, 1 << 4   @ bitWidth 1 (Clear codec not ready flag)  
        .equ SAI1_BCLRFR_WCKCFG, 1 << 2   @ bitWidth 1 (Clear wrong clock configuration flag)  
        .equ SAI1_BCLRFR_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection flag)  
        .equ SAI1_BCLRFR_OVRUDR, 1 << 0   @ bitWidth 1 (Clear overrun / underrun)  
 
    .equ SAI1_BDR, SAI1_BASE + 0x40 @ (BData register) 
        .equ SAI1_BDR_DATA_Shift, 0   @ bitWidth 32 (Data)  
 
    .equ SAI1_ACR1, SAI1_BASE + 0x4 @ (AConfiguration register 1) 
        .equ SAI1_ACR1_MCJDIV_Shift, 20   @ bitWidth 4 (Master clock divider)  
        .equ SAI1_ACR1_NODIV, 1 << 19   @ bitWidth 1 (No divider)  
        .equ SAI1_ACR1_DMAEN, 1 << 17   @ bitWidth 1 (DMA enable)  
        .equ SAI1_ACR1_SAIAEN, 1 << 16   @ bitWidth 1 (Audio block A enable)  
        .equ SAI1_ACR1_OutDri, 1 << 13   @ bitWidth 1 (Output drive)  
        .equ SAI1_ACR1_MONO, 1 << 12   @ bitWidth 1 (Mono mode)  
        .equ SAI1_ACR1_SYNCEN_Shift, 10   @ bitWidth 2 (Synchronization enable)  
        .equ SAI1_ACR1_CKSTR, 1 << 9   @ bitWidth 1 (Clock strobing edge)  
        .equ SAI1_ACR1_LSBFIRST, 1 << 8   @ bitWidth 1 (Least significant bit first)  
        .equ SAI1_ACR1_DS_Shift, 5   @ bitWidth 3 (Data size)  
        .equ SAI1_ACR1_PRTCFG_Shift, 2   @ bitWidth 2 (Protocol configuration)  
        .equ SAI1_ACR1_MODE_Shift, 0   @ bitWidth 2 (Audio block mode)  
 
    .equ SAI1_ACR2, SAI1_BASE + 0x8 @ (AConfiguration register 2) 
        .equ SAI1_ACR2_COMP_Shift, 14   @ bitWidth 2 (Companding mode)  
        .equ SAI1_ACR2_CPL, 1 << 13   @ bitWidth 1 (Complement bit)  
        .equ SAI1_ACR2_MUTECN_Shift, 7   @ bitWidth 6 (Mute counter)  
        .equ SAI1_ACR2_MUTEVAL, 1 << 6   @ bitWidth 1 (Mute value)  
        .equ SAI1_ACR2_MUTE, 1 << 5   @ bitWidth 1 (Mute)  
        .equ SAI1_ACR2_TRIS, 1 << 4   @ bitWidth 1 (Tristate management on data line)  
        .equ SAI1_ACR2_FFLUS, 1 << 3   @ bitWidth 1 (FIFO flush)  
        .equ SAI1_ACR2_FTH_Shift, 0   @ bitWidth 3 (FIFO threshold)  
 
    .equ SAI1_AFRCR, SAI1_BASE + 0xC @ (AFRCR) 
        .equ SAI1_AFRCR_FSOFF, 1 << 18   @ bitWidth 1 (Frame synchronization offset)  
        .equ SAI1_AFRCR_FSPOL, 1 << 17   @ bitWidth 1 (Frame synchronization polarity)  
        .equ SAI1_AFRCR_FSDEF, 1 << 16   @ bitWidth 1 (Frame synchronization definition)  
        .equ SAI1_AFRCR_FSALL_Shift, 8   @ bitWidth 7 (Frame synchronization active level length)  
        .equ SAI1_AFRCR_FRL_Shift, 0   @ bitWidth 8 (Frame length)  
 
    .equ SAI1_ASLOTR, SAI1_BASE + 0x10 @ (ASlot register) 
        .equ SAI1_ASLOTR_SLOTEN_Shift, 16   @ bitWidth 16 (Slot enable)  
        .equ SAI1_ASLOTR_NBSLOT_Shift, 8   @ bitWidth 4 (Number of slots in an audio frame)  
        .equ SAI1_ASLOTR_SLOTSZ_Shift, 6   @ bitWidth 2 (Slot size)  
        .equ SAI1_ASLOTR_FBOFF_Shift, 0   @ bitWidth 5 (First bit offset)  
 
    .equ SAI1_AIM, SAI1_BASE + 0x14 @ (AInterrupt mask register2) 
        .equ SAI1_AIM_LFSDET, 1 << 6   @ bitWidth 1 (Late frame synchronization detection interrupt enable)  
        .equ SAI1_AIM_AFSDETIE, 1 << 5   @ bitWidth 1 (Anticipated frame synchronization detection interrupt enable)  
        .equ SAI1_AIM_CNRDYIE, 1 << 4   @ bitWidth 1 (Codec not ready interrupt enable)  
        .equ SAI1_AIM_FREQIE, 1 << 3   @ bitWidth 1 (FIFO request interrupt enable)  
        .equ SAI1_AIM_WCKCFG, 1 << 2   @ bitWidth 1 (Wrong clock configuration interrupt enable)  
        .equ SAI1_AIM_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection interrupt enable)  
        .equ SAI1_AIM_OVRUDRIE, 1 << 0   @ bitWidth 1 (Overrun/underrun interrupt enable)  
 
    .equ SAI1_ASR, SAI1_BASE + 0x18 @ (AStatus register) 
        .equ SAI1_ASR_FLVL_Shift, 16   @ bitWidth 3 (FIFO level threshold)  
        .equ SAI1_ASR_LFSDET, 1 << 6   @ bitWidth 1 (Late frame synchronization detection)  
        .equ SAI1_ASR_AFSDET, 1 << 5   @ bitWidth 1 (Anticipated frame synchronization detection)  
        .equ SAI1_ASR_CNRDY, 1 << 4   @ bitWidth 1 (Codec not ready)  
        .equ SAI1_ASR_FREQ, 1 << 3   @ bitWidth 1 (FIFO request)  
        .equ SAI1_ASR_WCKCFG, 1 << 2   @ bitWidth 1 (Wrong clock configuration flag. This bit is read only.)  
        .equ SAI1_ASR_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection)  
        .equ SAI1_ASR_OVRUDR, 1 << 0   @ bitWidth 1 (Overrun / underrun)  
 
    .equ SAI1_ACLRFR, SAI1_BASE + 0x1C @ (AClear flag register) 
        .equ SAI1_ACLRFR_LFSDET, 1 << 6   @ bitWidth 1 (Clear late frame synchronization detection flag)  
        .equ SAI1_ACLRFR_CAFSDET, 1 << 5   @ bitWidth 1 (Clear anticipated frame synchronization detection flag.)  
        .equ SAI1_ACLRFR_CNRDY, 1 << 4   @ bitWidth 1 (Clear codec not ready flag)  
        .equ SAI1_ACLRFR_WCKCFG, 1 << 2   @ bitWidth 1 (Clear wrong clock configuration flag)  
        .equ SAI1_ACLRFR_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection flag)  
        .equ SAI1_ACLRFR_OVRUDR, 1 << 0   @ bitWidth 1 (Clear overrun / underrun)  
 
    .equ SAI1_ADR, SAI1_BASE + 0x20 @ (AData register) 
        .equ SAI1_ADR_DATA_Shift, 0   @ bitWidth 32 (Data)  
 
    .equ SAI1_GCR, SAI1_BASE + 0x0 @ (Global configuration register) 
        .equ SAI1_GCR_SYNCIN_Shift, 0   @ bitWidth 2 (Synchronization inputs)  
        .equ SAI1_GCR_SYNCOUT_Shift, 4   @ bitWidth 2 (Synchronization outputs)  
 

@=========================== SAI2 ===========================@
.equ SAI2_BASE, 0x40015C00 @ (Serial audio interface) 
    .equ SAI2_BCR1, SAI2_BASE + 0x24 @ (BConfiguration register 1) 
        .equ SAI2_BCR1_MCJDIV_Shift, 20   @ bitWidth 4 (Master clock divider)  
        .equ SAI2_BCR1_NODIV, 1 << 19   @ bitWidth 1 (No divider)  
        .equ SAI2_BCR1_DMAEN, 1 << 17   @ bitWidth 1 (DMA enable)  
        .equ SAI2_BCR1_SAIBEN, 1 << 16   @ bitWidth 1 (Audio block B enable)  
        .equ SAI2_BCR1_OutDri, 1 << 13   @ bitWidth 1 (Output drive)  
        .equ SAI2_BCR1_MONO, 1 << 12   @ bitWidth 1 (Mono mode)  
        .equ SAI2_BCR1_SYNCEN_Shift, 10   @ bitWidth 2 (Synchronization enable)  
        .equ SAI2_BCR1_CKSTR, 1 << 9   @ bitWidth 1 (Clock strobing edge)  
        .equ SAI2_BCR1_LSBFIRST, 1 << 8   @ bitWidth 1 (Least significant bit first)  
        .equ SAI2_BCR1_DS_Shift, 5   @ bitWidth 3 (Data size)  
        .equ SAI2_BCR1_PRTCFG_Shift, 2   @ bitWidth 2 (Protocol configuration)  
        .equ SAI2_BCR1_MODE_Shift, 0   @ bitWidth 2 (Audio block mode)  
 
    .equ SAI2_BCR2, SAI2_BASE + 0x28 @ (BConfiguration register 2) 
        .equ SAI2_BCR2_COMP_Shift, 14   @ bitWidth 2 (Companding mode)  
        .equ SAI2_BCR2_CPL, 1 << 13   @ bitWidth 1 (Complement bit)  
        .equ SAI2_BCR2_MUTECN_Shift, 7   @ bitWidth 6 (Mute counter)  
        .equ SAI2_BCR2_MUTEVAL, 1 << 6   @ bitWidth 1 (Mute value)  
        .equ SAI2_BCR2_MUTE, 1 << 5   @ bitWidth 1 (Mute)  
        .equ SAI2_BCR2_TRIS, 1 << 4   @ bitWidth 1 (Tristate management on data line)  
        .equ SAI2_BCR2_FFLUS, 1 << 3   @ bitWidth 1 (FIFO flush)  
        .equ SAI2_BCR2_FTH_Shift, 0   @ bitWidth 3 (FIFO threshold)  
 
    .equ SAI2_BFRCR, SAI2_BASE + 0x2C @ (BFRCR) 
        .equ SAI2_BFRCR_FSOFF, 1 << 18   @ bitWidth 1 (Frame synchronization offset)  
        .equ SAI2_BFRCR_FSPOL, 1 << 17   @ bitWidth 1 (Frame synchronization polarity)  
        .equ SAI2_BFRCR_FSDEF, 1 << 16   @ bitWidth 1 (Frame synchronization definition)  
        .equ SAI2_BFRCR_FSALL_Shift, 8   @ bitWidth 7 (Frame synchronization active level length)  
        .equ SAI2_BFRCR_FRL_Shift, 0   @ bitWidth 8 (Frame length)  
 
    .equ SAI2_BSLOTR, SAI2_BASE + 0x30 @ (BSlot register) 
        .equ SAI2_BSLOTR_SLOTEN_Shift, 16   @ bitWidth 16 (Slot enable)  
        .equ SAI2_BSLOTR_NBSLOT_Shift, 8   @ bitWidth 4 (Number of slots in an audio frame)  
        .equ SAI2_BSLOTR_SLOTSZ_Shift, 6   @ bitWidth 2 (Slot size)  
        .equ SAI2_BSLOTR_FBOFF_Shift, 0   @ bitWidth 5 (First bit offset)  
 
    .equ SAI2_BIM, SAI2_BASE + 0x34 @ (BInterrupt mask register2) 
        .equ SAI2_BIM_LFSDETIE, 1 << 6   @ bitWidth 1 (Late frame synchronization detection interrupt enable)  
        .equ SAI2_BIM_AFSDETIE, 1 << 5   @ bitWidth 1 (Anticipated frame synchronization detection interrupt enable)  
        .equ SAI2_BIM_CNRDYIE, 1 << 4   @ bitWidth 1 (Codec not ready interrupt enable)  
        .equ SAI2_BIM_FREQIE, 1 << 3   @ bitWidth 1 (FIFO request interrupt enable)  
        .equ SAI2_BIM_WCKCFG, 1 << 2   @ bitWidth 1 (Wrong clock configuration interrupt enable)  
        .equ SAI2_BIM_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection interrupt enable)  
        .equ SAI2_BIM_OVRUDRIE, 1 << 0   @ bitWidth 1 (Overrun/underrun interrupt enable)  
 
    .equ SAI2_BSR, SAI2_BASE + 0x38 @ (BStatus register) 
        .equ SAI2_BSR_FLVL_Shift, 16   @ bitWidth 3 (FIFO level threshold)  
        .equ SAI2_BSR_LFSDET, 1 << 6   @ bitWidth 1 (Late frame synchronization detection)  
        .equ SAI2_BSR_AFSDET, 1 << 5   @ bitWidth 1 (Anticipated frame synchronization detection)  
        .equ SAI2_BSR_CNRDY, 1 << 4   @ bitWidth 1 (Codec not ready)  
        .equ SAI2_BSR_FREQ, 1 << 3   @ bitWidth 1 (FIFO request)  
        .equ SAI2_BSR_WCKCFG, 1 << 2   @ bitWidth 1 (Wrong clock configuration flag)  
        .equ SAI2_BSR_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection)  
        .equ SAI2_BSR_OVRUDR, 1 << 0   @ bitWidth 1 (Overrun / underrun)  
 
    .equ SAI2_BCLRFR, SAI2_BASE + 0x3C @ (BClear flag register) 
        .equ SAI2_BCLRFR_LFSDET, 1 << 6   @ bitWidth 1 (Clear late frame synchronization detection flag)  
        .equ SAI2_BCLRFR_CAFSDET, 1 << 5   @ bitWidth 1 (Clear anticipated frame synchronization detection flag)  
        .equ SAI2_BCLRFR_CNRDY, 1 << 4   @ bitWidth 1 (Clear codec not ready flag)  
        .equ SAI2_BCLRFR_WCKCFG, 1 << 2   @ bitWidth 1 (Clear wrong clock configuration flag)  
        .equ SAI2_BCLRFR_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection flag)  
        .equ SAI2_BCLRFR_OVRUDR, 1 << 0   @ bitWidth 1 (Clear overrun / underrun)  
 
    .equ SAI2_BDR, SAI2_BASE + 0x40 @ (BData register) 
        .equ SAI2_BDR_DATA_Shift, 0   @ bitWidth 32 (Data)  
 
    .equ SAI2_ACR1, SAI2_BASE + 0x4 @ (AConfiguration register 1) 
        .equ SAI2_ACR1_MCJDIV_Shift, 20   @ bitWidth 4 (Master clock divider)  
        .equ SAI2_ACR1_NODIV, 1 << 19   @ bitWidth 1 (No divider)  
        .equ SAI2_ACR1_DMAEN, 1 << 17   @ bitWidth 1 (DMA enable)  
        .equ SAI2_ACR1_SAIAEN, 1 << 16   @ bitWidth 1 (Audio block A enable)  
        .equ SAI2_ACR1_OutDri, 1 << 13   @ bitWidth 1 (Output drive)  
        .equ SAI2_ACR1_MONO, 1 << 12   @ bitWidth 1 (Mono mode)  
        .equ SAI2_ACR1_SYNCEN_Shift, 10   @ bitWidth 2 (Synchronization enable)  
        .equ SAI2_ACR1_CKSTR, 1 << 9   @ bitWidth 1 (Clock strobing edge)  
        .equ SAI2_ACR1_LSBFIRST, 1 << 8   @ bitWidth 1 (Least significant bit first)  
        .equ SAI2_ACR1_DS_Shift, 5   @ bitWidth 3 (Data size)  
        .equ SAI2_ACR1_PRTCFG_Shift, 2   @ bitWidth 2 (Protocol configuration)  
        .equ SAI2_ACR1_MODE_Shift, 0   @ bitWidth 2 (Audio block mode)  
 
    .equ SAI2_ACR2, SAI2_BASE + 0x8 @ (AConfiguration register 2) 
        .equ SAI2_ACR2_COMP_Shift, 14   @ bitWidth 2 (Companding mode)  
        .equ SAI2_ACR2_CPL, 1 << 13   @ bitWidth 1 (Complement bit)  
        .equ SAI2_ACR2_MUTECN_Shift, 7   @ bitWidth 6 (Mute counter)  
        .equ SAI2_ACR2_MUTEVAL, 1 << 6   @ bitWidth 1 (Mute value)  
        .equ SAI2_ACR2_MUTE, 1 << 5   @ bitWidth 1 (Mute)  
        .equ SAI2_ACR2_TRIS, 1 << 4   @ bitWidth 1 (Tristate management on data line)  
        .equ SAI2_ACR2_FFLUS, 1 << 3   @ bitWidth 1 (FIFO flush)  
        .equ SAI2_ACR2_FTH_Shift, 0   @ bitWidth 3 (FIFO threshold)  
 
    .equ SAI2_AFRCR, SAI2_BASE + 0xC @ (AFRCR) 
        .equ SAI2_AFRCR_FSOFF, 1 << 18   @ bitWidth 1 (Frame synchronization offset)  
        .equ SAI2_AFRCR_FSPOL, 1 << 17   @ bitWidth 1 (Frame synchronization polarity)  
        .equ SAI2_AFRCR_FSDEF, 1 << 16   @ bitWidth 1 (Frame synchronization definition)  
        .equ SAI2_AFRCR_FSALL_Shift, 8   @ bitWidth 7 (Frame synchronization active level length)  
        .equ SAI2_AFRCR_FRL_Shift, 0   @ bitWidth 8 (Frame length)  
 
    .equ SAI2_ASLOTR, SAI2_BASE + 0x10 @ (ASlot register) 
        .equ SAI2_ASLOTR_SLOTEN_Shift, 16   @ bitWidth 16 (Slot enable)  
        .equ SAI2_ASLOTR_NBSLOT_Shift, 8   @ bitWidth 4 (Number of slots in an audio frame)  
        .equ SAI2_ASLOTR_SLOTSZ_Shift, 6   @ bitWidth 2 (Slot size)  
        .equ SAI2_ASLOTR_FBOFF_Shift, 0   @ bitWidth 5 (First bit offset)  
 
    .equ SAI2_AIM, SAI2_BASE + 0x14 @ (AInterrupt mask register2) 
        .equ SAI2_AIM_LFSDET, 1 << 6   @ bitWidth 1 (Late frame synchronization detection interrupt enable)  
        .equ SAI2_AIM_AFSDETIE, 1 << 5   @ bitWidth 1 (Anticipated frame synchronization detection interrupt enable)  
        .equ SAI2_AIM_CNRDYIE, 1 << 4   @ bitWidth 1 (Codec not ready interrupt enable)  
        .equ SAI2_AIM_FREQIE, 1 << 3   @ bitWidth 1 (FIFO request interrupt enable)  
        .equ SAI2_AIM_WCKCFG, 1 << 2   @ bitWidth 1 (Wrong clock configuration interrupt enable)  
        .equ SAI2_AIM_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection interrupt enable)  
        .equ SAI2_AIM_OVRUDRIE, 1 << 0   @ bitWidth 1 (Overrun/underrun interrupt enable)  
 
    .equ SAI2_ASR, SAI2_BASE + 0x18 @ (AStatus register) 
        .equ SAI2_ASR_FLVL_Shift, 16   @ bitWidth 3 (FIFO level threshold)  
        .equ SAI2_ASR_LFSDET, 1 << 6   @ bitWidth 1 (Late frame synchronization detection)  
        .equ SAI2_ASR_AFSDET, 1 << 5   @ bitWidth 1 (Anticipated frame synchronization detection)  
        .equ SAI2_ASR_CNRDY, 1 << 4   @ bitWidth 1 (Codec not ready)  
        .equ SAI2_ASR_FREQ, 1 << 3   @ bitWidth 1 (FIFO request)  
        .equ SAI2_ASR_WCKCFG, 1 << 2   @ bitWidth 1 (Wrong clock configuration flag. This bit is read only.)  
        .equ SAI2_ASR_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection)  
        .equ SAI2_ASR_OVRUDR, 1 << 0   @ bitWidth 1 (Overrun / underrun)  
 
    .equ SAI2_ACLRFR, SAI2_BASE + 0x1C @ (AClear flag register) 
        .equ SAI2_ACLRFR_LFSDET, 1 << 6   @ bitWidth 1 (Clear late frame synchronization detection flag)  
        .equ SAI2_ACLRFR_CAFSDET, 1 << 5   @ bitWidth 1 (Clear anticipated frame synchronization detection flag.)  
        .equ SAI2_ACLRFR_CNRDY, 1 << 4   @ bitWidth 1 (Clear codec not ready flag)  
        .equ SAI2_ACLRFR_WCKCFG, 1 << 2   @ bitWidth 1 (Clear wrong clock configuration flag)  
        .equ SAI2_ACLRFR_MUTEDET, 1 << 1   @ bitWidth 1 (Mute detection flag)  
        .equ SAI2_ACLRFR_OVRUDR, 1 << 0   @ bitWidth 1 (Clear overrun / underrun)  
 
    .equ SAI2_ADR, SAI2_BASE + 0x20 @ (AData register) 
        .equ SAI2_ADR_DATA_Shift, 0   @ bitWidth 32 (Data)  
 
    .equ SAI2_GCR, SAI2_BASE + 0x0 @ (Global configuration register) 
        .equ SAI2_GCR_SYNCIN_Shift, 0   @ bitWidth 2 (Synchronization inputs)  
        .equ SAI2_GCR_SYNCOUT_Shift, 4   @ bitWidth 2 (Synchronization outputs)  
 

@=========================== DMA2D ===========================@
.equ DMA2D_BASE, 0x4002B000 @ (DMA2D controller) 
    .equ DMA2D_CR, DMA2D_BASE + 0x0 @ (control register) 
        .equ DMA2D_CR_MODE_Shift, 16   @ bitWidth 2 (DMA2D mode)  
        .equ DMA2D_CR_CEIE, 1 << 13   @ bitWidth 1 (Configuration Error Interrupt Enable)  
        .equ DMA2D_CR_CTCIE, 1 << 12   @ bitWidth 1 (CLUT transfer complete interrupt enable)  
        .equ DMA2D_CR_CAEIE, 1 << 11   @ bitWidth 1 (CLUT access error interrupt enable)  
        .equ DMA2D_CR_TWIE, 1 << 10   @ bitWidth 1 (Transfer watermark interrupt enable)  
        .equ DMA2D_CR_TCIE, 1 << 9   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ DMA2D_CR_TEIE, 1 << 8   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ DMA2D_CR_ABORT, 1 << 2   @ bitWidth 1 (Abort)  
        .equ DMA2D_CR_SUSP, 1 << 1   @ bitWidth 1 (Suspend)  
        .equ DMA2D_CR_START, 1 << 0   @ bitWidth 1 (Start)  
 
    .equ DMA2D_ISR, DMA2D_BASE + 0x4 @ (Interrupt Status Register) 
        .equ DMA2D_ISR_CEIF, 1 << 5   @ bitWidth 1 (Configuration error interrupt flag)  
        .equ DMA2D_ISR_CTCIF, 1 << 4   @ bitWidth 1 (CLUT transfer complete interrupt flag)  
        .equ DMA2D_ISR_CAEIF, 1 << 3   @ bitWidth 1 (CLUT access error interrupt flag)  
        .equ DMA2D_ISR_TWIF, 1 << 2   @ bitWidth 1 (Transfer watermark interrupt flag)  
        .equ DMA2D_ISR_TCIF, 1 << 1   @ bitWidth 1 (Transfer complete interrupt flag)  
        .equ DMA2D_ISR_TEIF, 1 << 0   @ bitWidth 1 (Transfer error interrupt flag)  
 
    .equ DMA2D_IFCR, DMA2D_BASE + 0x8 @ (interrupt flag clear register) 
        .equ DMA2D_IFCR_CCEIF, 1 << 5   @ bitWidth 1 (Clear configuration error interrupt flag)  
        .equ DMA2D_IFCR_CCTCIF, 1 << 4   @ bitWidth 1 (Clear CLUT transfer complete interrupt flag)  
        .equ DMA2D_IFCR_CAECIF, 1 << 3   @ bitWidth 1 (Clear CLUT access error interrupt flag)  
        .equ DMA2D_IFCR_CTWIF, 1 << 2   @ bitWidth 1 (Clear transfer watermark interrupt flag)  
        .equ DMA2D_IFCR_CTCIF, 1 << 1   @ bitWidth 1 (Clear transfer complete interrupt flag)  
        .equ DMA2D_IFCR_CTEIF, 1 << 0   @ bitWidth 1 (Clear Transfer error interrupt flag)  
 
    .equ DMA2D_FGMAR, DMA2D_BASE + 0xC @ (foreground memory address register) 
        .equ DMA2D_FGMAR_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2D_FGOR, DMA2D_BASE + 0x10 @ (foreground offset register) 
        .equ DMA2D_FGOR_LO_Shift, 0   @ bitWidth 14 (Line offset)  
 
    .equ DMA2D_BGMAR, DMA2D_BASE + 0x14 @ (background memory address register) 
        .equ DMA2D_BGMAR_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2D_BGOR, DMA2D_BASE + 0x18 @ (background offset register) 
        .equ DMA2D_BGOR_LO_Shift, 0   @ bitWidth 14 (Line offset)  
 
    .equ DMA2D_FGPFCCR, DMA2D_BASE + 0x1C @ (foreground PFC control register) 
        .equ DMA2D_FGPFCCR_ALPHA_Shift, 24   @ bitWidth 8 (Alpha value)  
        .equ DMA2D_FGPFCCR_AM_Shift, 16   @ bitWidth 2 (Alpha mode)  
        .equ DMA2D_FGPFCCR_CS_Shift, 8   @ bitWidth 8 (CLUT size)  
        .equ DMA2D_FGPFCCR_START, 1 << 5   @ bitWidth 1 (Start)  
        .equ DMA2D_FGPFCCR_CCM, 1 << 4   @ bitWidth 1 (CLUT color mode)  
        .equ DMA2D_FGPFCCR_CM_Shift, 0   @ bitWidth 4 (Color mode)  
 
    .equ DMA2D_FGCOLR, DMA2D_BASE + 0x20 @ (foreground color register) 
        .equ DMA2D_FGCOLR_RED_Shift, 16   @ bitWidth 8 (Red Value)  
        .equ DMA2D_FGCOLR_GREEN_Shift, 8   @ bitWidth 8 (Green Value)  
        .equ DMA2D_FGCOLR_BLUE_Shift, 0   @ bitWidth 8 (Blue Value)  
 
    .equ DMA2D_BGPFCCR, DMA2D_BASE + 0x24 @ (background PFC control register) 
        .equ DMA2D_BGPFCCR_ALPHA_Shift, 24   @ bitWidth 8 (Alpha value)  
        .equ DMA2D_BGPFCCR_AM_Shift, 16   @ bitWidth 2 (Alpha mode)  
        .equ DMA2D_BGPFCCR_CS_Shift, 8   @ bitWidth 8 (CLUT size)  
        .equ DMA2D_BGPFCCR_START, 1 << 5   @ bitWidth 1 (Start)  
        .equ DMA2D_BGPFCCR_CCM, 1 << 4   @ bitWidth 1 (CLUT Color mode)  
        .equ DMA2D_BGPFCCR_CM_Shift, 0   @ bitWidth 4 (Color mode)  
 
    .equ DMA2D_BGCOLR, DMA2D_BASE + 0x28 @ (background color register) 
        .equ DMA2D_BGCOLR_RED_Shift, 16   @ bitWidth 8 (Red Value)  
        .equ DMA2D_BGCOLR_GREEN_Shift, 8   @ bitWidth 8 (Green Value)  
        .equ DMA2D_BGCOLR_BLUE_Shift, 0   @ bitWidth 8 (Blue Value)  
 
    .equ DMA2D_FGCMAR, DMA2D_BASE + 0x2C @ (foreground CLUT memory address register) 
        .equ DMA2D_FGCMAR_MA_Shift, 0   @ bitWidth 32 (Memory Address)  
 
    .equ DMA2D_BGCMAR, DMA2D_BASE + 0x30 @ (background CLUT memory address register) 
        .equ DMA2D_BGCMAR_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2D_OPFCCR, DMA2D_BASE + 0x34 @ (output PFC control register) 
        .equ DMA2D_OPFCCR_CM_Shift, 0   @ bitWidth 3 (Color mode)  
 
    .equ DMA2D_OCOLR, DMA2D_BASE + 0x38 @ (output color register) 
        .equ DMA2D_OCOLR_APLHA_Shift, 24   @ bitWidth 8 (Alpha Channel Value)  
        .equ DMA2D_OCOLR_RED_Shift, 16   @ bitWidth 8 (Red Value)  
        .equ DMA2D_OCOLR_GREEN_Shift, 8   @ bitWidth 8 (Green Value)  
        .equ DMA2D_OCOLR_BLUE_Shift, 0   @ bitWidth 8 (Blue Value)  
 
    .equ DMA2D_OMAR, DMA2D_BASE + 0x3C @ (output memory address register) 
        .equ DMA2D_OMAR_MA_Shift, 0   @ bitWidth 32 (Memory Address)  
 
    .equ DMA2D_OOR, DMA2D_BASE + 0x40 @ (output offset register) 
        .equ DMA2D_OOR_LO_Shift, 0   @ bitWidth 14 (Line Offset)  
 
    .equ DMA2D_NLR, DMA2D_BASE + 0x44 @ (number of line register) 
        .equ DMA2D_NLR_PL_Shift, 16   @ bitWidth 14 (Pixel per lines)  
        .equ DMA2D_NLR_NL_Shift, 0   @ bitWidth 16 (Number of lines)  
 
    .equ DMA2D_LWR, DMA2D_BASE + 0x48 @ (line watermark register) 
        .equ DMA2D_LWR_LW_Shift, 0   @ bitWidth 16 (Line watermark)  
 
    .equ DMA2D_AMTCR, DMA2D_BASE + 0x4C @ (AHB master timer configuration register) 
        .equ DMA2D_AMTCR_DT_Shift, 8   @ bitWidth 8 (Dead Time)  
        .equ DMA2D_AMTCR_EN, 1 << 0   @ bitWidth 1 (Enable)  
 
    .equ DMA2D_FGCLUT, DMA2D_BASE + 0x400 @ (FGCLUT) 
        .equ DMA2D_FGCLUT_APLHA_Shift, 24   @ bitWidth 8 (APLHA)  
        .equ DMA2D_FGCLUT_RED_Shift, 16   @ bitWidth 8 (RED)  
        .equ DMA2D_FGCLUT_GREEN_Shift, 8   @ bitWidth 8 (GREEN)  
        .equ DMA2D_FGCLUT_BLUE_Shift, 0   @ bitWidth 8 (BLUE)  
 
    .equ DMA2D_BGCLUT, DMA2D_BASE + 0x800 @ (BGCLUT) 
        .equ DMA2D_BGCLUT_APLHA_Shift, 24   @ bitWidth 8 (APLHA)  
        .equ DMA2D_BGCLUT_RED_Shift, 16   @ bitWidth 8 (RED)  
        .equ DMA2D_BGCLUT_GREEN_Shift, 8   @ bitWidth 8 (GREEN)  
        .equ DMA2D_BGCLUT_BLUE_Shift, 0   @ bitWidth 8 (BLUE)  
 

@=========================== QUADSPI ===========================@
.equ QUADSPI_BASE, 0xA0001000 @ (QuadSPI interface) 
    .equ QUADSPI_CR, QUADSPI_BASE + 0x0 @ (control register) 
        .equ QUADSPI_CR_PRESCALER_Shift, 24   @ bitWidth 8 (Clock prescaler)  
        .equ QUADSPI_CR_PMM, 1 << 23   @ bitWidth 1 (Polling match mode)  
        .equ QUADSPI_CR_APMS, 1 << 22   @ bitWidth 1 (Automatic poll mode stop)  
        .equ QUADSPI_CR_TOIE, 1 << 20   @ bitWidth 1 (TimeOut interrupt enable)  
        .equ QUADSPI_CR_SMIE, 1 << 19   @ bitWidth 1 (Status match interrupt enable)  
        .equ QUADSPI_CR_FTIE, 1 << 18   @ bitWidth 1 (FIFO threshold interrupt enable)  
        .equ QUADSPI_CR_TCIE, 1 << 17   @ bitWidth 1 (Transfer complete interrupt enable)  
        .equ QUADSPI_CR_TEIE, 1 << 16   @ bitWidth 1 (Transfer error interrupt enable)  
        .equ QUADSPI_CR_FTHRES_Shift, 8   @ bitWidth 5 (IFO threshold level)  
        .equ QUADSPI_CR_FSEL, 1 << 7   @ bitWidth 1 (FLASH memory selection)  
        .equ QUADSPI_CR_DFM, 1 << 6   @ bitWidth 1 (Dual-flash mode)  
        .equ QUADSPI_CR_SSHIFT, 1 << 4   @ bitWidth 1 (Sample shift)  
        .equ QUADSPI_CR_TCEN, 1 << 3   @ bitWidth 1 (Timeout counter enable)  
        .equ QUADSPI_CR_DMAEN, 1 << 2   @ bitWidth 1 (DMA enable)  
        .equ QUADSPI_CR_ABORT, 1 << 1   @ bitWidth 1 (Abort request)  
        .equ QUADSPI_CR_EN, 1 << 0   @ bitWidth 1 (Enable)  
 
    .equ QUADSPI_DCR, QUADSPI_BASE + 0x4 @ (device configuration register) 
        .equ QUADSPI_DCR_FSIZE_Shift, 16   @ bitWidth 5 (FLASH memory size)  
        .equ QUADSPI_DCR_CSHT_Shift, 8   @ bitWidth 3 (Chip select high time)  
        .equ QUADSPI_DCR_CKMODE, 1 << 0   @ bitWidth 1 (Mode 0 / mode 3)  
 
    .equ QUADSPI_SR, QUADSPI_BASE + 0x8 @ (status register) 
        .equ QUADSPI_SR_FLEVEL_Shift, 8   @ bitWidth 7 (FIFO level)  
        .equ QUADSPI_SR_BUSY, 1 << 5   @ bitWidth 1 (Busy)  
        .equ QUADSPI_SR_TOF, 1 << 4   @ bitWidth 1 (Timeout flag)  
        .equ QUADSPI_SR_SMF, 1 << 3   @ bitWidth 1 (Status match flag)  
        .equ QUADSPI_SR_FTF, 1 << 2   @ bitWidth 1 (FIFO threshold flag)  
        .equ QUADSPI_SR_TCF, 1 << 1   @ bitWidth 1 (Transfer complete flag)  
        .equ QUADSPI_SR_TEF, 1 << 0   @ bitWidth 1 (Transfer error flag)  
 
    .equ QUADSPI_FCR, QUADSPI_BASE + 0xC @ (flag clear register) 
        .equ QUADSPI_FCR_CTOF, 1 << 4   @ bitWidth 1 (Clear timeout flag)  
        .equ QUADSPI_FCR_CSMF, 1 << 3   @ bitWidth 1 (Clear status match flag)  
        .equ QUADSPI_FCR_CTCF, 1 << 1   @ bitWidth 1 (Clear transfer complete flag)  
        .equ QUADSPI_FCR_CTEF, 1 << 0   @ bitWidth 1 (Clear transfer error flag)  
 
    .equ QUADSPI_DLR, QUADSPI_BASE + 0x10 @ (data length register) 
        .equ QUADSPI_DLR_DL_Shift, 0   @ bitWidth 32 (Data length)  
 
    .equ QUADSPI_CCR, QUADSPI_BASE + 0x14 @ (communication configuration register) 
        .equ QUADSPI_CCR_DDRM, 1 << 31   @ bitWidth 1 (Double data rate mode)  
        .equ QUADSPI_CCR_DHHC, 1 << 30   @ bitWidth 1 (DDR hold half cycle)  
        .equ QUADSPI_CCR_SIOO, 1 << 28   @ bitWidth 1 (Send instruction only once mode)  
        .equ QUADSPI_CCR_FMODE_Shift, 26   @ bitWidth 2 (Functional mode)  
        .equ QUADSPI_CCR_DMODE_Shift, 24   @ bitWidth 2 (Data mode)  
        .equ QUADSPI_CCR_DCYC_Shift, 18   @ bitWidth 5 (Number of dummy cycles)  
        .equ QUADSPI_CCR_ABSIZE_Shift, 16   @ bitWidth 2 (Alternate bytes size)  
        .equ QUADSPI_CCR_ABMODE_Shift, 14   @ bitWidth 2 (Alternate bytes mode)  
        .equ QUADSPI_CCR_ADSIZE_Shift, 12   @ bitWidth 2 (Address size)  
        .equ QUADSPI_CCR_ADMODE_Shift, 10   @ bitWidth 2 (Address mode)  
        .equ QUADSPI_CCR_IMODE_Shift, 8   @ bitWidth 2 (Instruction mode)  
        .equ QUADSPI_CCR_INSTRUCTION_Shift, 0   @ bitWidth 8 (Instruction)  
 
    .equ QUADSPI_AR, QUADSPI_BASE + 0x18 @ (address register) 
        .equ QUADSPI_AR_ADDRESS_Shift, 0   @ bitWidth 32 (Address)  
 
    .equ QUADSPI_ABR, QUADSPI_BASE + 0x1C @ (ABR) 
        .equ QUADSPI_ABR_ALTERNATE_Shift, 0   @ bitWidth 32 (ALTERNATE)  
 
    .equ QUADSPI_DR, QUADSPI_BASE + 0x20 @ (data register) 
        .equ QUADSPI_DR_DATA_Shift, 0   @ bitWidth 32 (Data)  
 
    .equ QUADSPI_PSMKR, QUADSPI_BASE + 0x24 @ (polling status mask register) 
        .equ QUADSPI_PSMKR_MASK_Shift, 0   @ bitWidth 32 (Status mask)  
 
    .equ QUADSPI_PSMAR, QUADSPI_BASE + 0x28 @ (polling status match register) 
        .equ QUADSPI_PSMAR_MATCH_Shift, 0   @ bitWidth 32 (Status match)  
 
    .equ QUADSPI_PIR, QUADSPI_BASE + 0x2C @ (polling interval register) 
        .equ QUADSPI_PIR_INTERVAL_Shift, 0   @ bitWidth 16 (Polling interval)  
 
    .equ QUADSPI_LPTR, QUADSPI_BASE + 0x30 @ (low-power timeout register) 
        .equ QUADSPI_LPTR_TIMEOUT_Shift, 0   @ bitWidth 16 (Timeout period)  
 

@=========================== CEC ===========================@
.equ CEC_BASE, 0x40006C00 @ (HDMI-CEC controller) 
    .equ CEC_CR, CEC_BASE + 0x0 @ (control register) 
        .equ CEC_CR_TXEOM, 1 << 2   @ bitWidth 1 (Tx End Of Message)  
        .equ CEC_CR_TXSOM, 1 << 1   @ bitWidth 1 (Tx start of message)  
        .equ CEC_CR_CECEN, 1 << 0   @ bitWidth 1 (CEC Enable)  
 
    .equ CEC_CFGR, CEC_BASE + 0x4 @ (configuration register) 
        .equ CEC_CFGR_SFT_Shift, 0   @ bitWidth 3 (Signal Free Time)  
        .equ CEC_CFGR_RXTOL, 1 << 3   @ bitWidth 1 (Rx-Tolerance)  
        .equ CEC_CFGR_BRESTP, 1 << 4   @ bitWidth 1 (Rx-stop on bit rising error)  
        .equ CEC_CFGR_BREGEN, 1 << 5   @ bitWidth 1 (Generate error-bit on bit rising error)  
        .equ CEC_CFGR_LBPEGEN, 1 << 6   @ bitWidth 1 (Generate Error-Bit on Long Bit Period Error)  
        .equ CEC_CFGR_BRDNOGEN, 1 << 7   @ bitWidth 1 (Avoid Error-Bit Generation in Broadcast)  
        .equ CEC_CFGR_SFTOP, 1 << 8   @ bitWidth 1 (SFT Option Bit)  
        .equ CEC_CFGR_OAR_Shift, 16   @ bitWidth 15 (Own addresses configuration)  
        .equ CEC_CFGR_LSTN, 1 << 31   @ bitWidth 1 (Listen mode)  
 
    .equ CEC_TXDR, CEC_BASE + 0x8 @ (Tx data register) 
        .equ CEC_TXDR_TXD_Shift, 0   @ bitWidth 8 (Tx Data register)  
 
    .equ CEC_RXDR, CEC_BASE + 0xC @ (Rx Data Register) 
        .equ CEC_RXDR_RXDR_Shift, 0   @ bitWidth 8 (CEC Rx Data Register)  
 
    .equ CEC_ISR, CEC_BASE + 0x10 @ (Interrupt and Status Register) 
        .equ CEC_ISR_TXACKE, 1 << 12   @ bitWidth 1 (Tx-Missing acknowledge error)  
        .equ CEC_ISR_TXERR, 1 << 11   @ bitWidth 1 (Tx-Error)  
        .equ CEC_ISR_TXUDR, 1 << 10   @ bitWidth 1 (Tx-Buffer Underrun)  
        .equ CEC_ISR_TXEND, 1 << 9   @ bitWidth 1 (End of Transmission)  
        .equ CEC_ISR_TXBR, 1 << 8   @ bitWidth 1 (Tx-Byte Request)  
        .equ CEC_ISR_ARBLST, 1 << 7   @ bitWidth 1 (Arbitration Lost)  
        .equ CEC_ISR_RXACKE, 1 << 6   @ bitWidth 1 (Rx-Missing Acknowledge)  
        .equ CEC_ISR_LBPE, 1 << 5   @ bitWidth 1 (Rx-Long Bit Period Error)  
        .equ CEC_ISR_SBPE, 1 << 4   @ bitWidth 1 (Rx-Short Bit period error)  
        .equ CEC_ISR_BRE, 1 << 3   @ bitWidth 1 (Rx-Bit rising error)  
        .equ CEC_ISR_RXOVR, 1 << 2   @ bitWidth 1 (Rx-Overrun)  
        .equ CEC_ISR_RXEND, 1 << 1   @ bitWidth 1 (End Of Reception)  
        .equ CEC_ISR_RXBR, 1 << 0   @ bitWidth 1 (Rx-Byte Received)  
 
    .equ CEC_IER, CEC_BASE + 0x14 @ (interrupt enable register) 
        .equ CEC_IER_TXACKIE, 1 << 12   @ bitWidth 1 (Tx-Missing Acknowledge Error Interrupt Enable)  
        .equ CEC_IER_TXERRIE, 1 << 11   @ bitWidth 1 (Tx-Error Interrupt Enable)  
        .equ CEC_IER_TXUDRIE, 1 << 10   @ bitWidth 1 (Tx-Underrun interrupt enable)  
        .equ CEC_IER_TXENDIE, 1 << 9   @ bitWidth 1 (Tx-End of message interrupt enable)  
        .equ CEC_IER_TXBRIE, 1 << 8   @ bitWidth 1 (Tx-Byte Request Interrupt Enable)  
        .equ CEC_IER_ARBLSTIE, 1 << 7   @ bitWidth 1 (Arbitration Lost Interrupt Enable)  
        .equ CEC_IER_RXACKIE, 1 << 6   @ bitWidth 1 (Rx-Missing Acknowledge Error Interrupt Enable)  
        .equ CEC_IER_LBPEIE, 1 << 5   @ bitWidth 1 (Long Bit Period Error Interrupt Enable)  
        .equ CEC_IER_SBPEIE, 1 << 4   @ bitWidth 1 (Short Bit Period Error Interrupt Enable)  
        .equ CEC_IER_BREIE, 1 << 3   @ bitWidth 1 (Bit Rising Error Interrupt Enable)  
        .equ CEC_IER_RXOVRIE, 1 << 2   @ bitWidth 1 (Rx-Buffer Overrun Interrupt Enable)  
        .equ CEC_IER_RXENDIE, 1 << 1   @ bitWidth 1 (End Of Reception Interrupt Enable)  
        .equ CEC_IER_RXBRIE, 1 << 0   @ bitWidth 1 (Rx-Byte Received Interrupt Enable)  
 

@=========================== SPDIF_RX ===========================@
.equ SPDIF_RX_BASE, 0x40004000 @ (Receiver Interface) 
    .equ SPDIF_RX_CR, SPDIF_RX_BASE + 0x0 @ (Control register) 
        .equ SPDIF_RX_CR_SPDIFEN_Shift, 0   @ bitWidth 2 (Peripheral Block Enable)  
        .equ SPDIF_RX_CR_RXDMAEN, 1 << 2   @ bitWidth 1 (Receiver DMA ENable for data flow)  
        .equ SPDIF_RX_CR_RXSTEO, 1 << 3   @ bitWidth 1 (STerEO Mode)  
        .equ SPDIF_RX_CR_DRFMT_Shift, 4   @ bitWidth 2 (RX Data format)  
        .equ SPDIF_RX_CR_PMSK, 1 << 6   @ bitWidth 1 (Mask Parity error bit)  
        .equ SPDIF_RX_CR_VMSK, 1 << 7   @ bitWidth 1 (Mask of Validity bit)  
        .equ SPDIF_RX_CR_CUMSK, 1 << 8   @ bitWidth 1 (Mask of channel status and user bits)  
        .equ SPDIF_RX_CR_PTMSK, 1 << 9   @ bitWidth 1 (Mask of Preamble Type bits)  
        .equ SPDIF_RX_CR_CBDMAEN, 1 << 10   @ bitWidth 1 (Control Buffer DMA ENable for control flow)  
        .equ SPDIF_RX_CR_CHSEL, 1 << 11   @ bitWidth 1 (Channel Selection)  
        .equ SPDIF_RX_CR_NBTR_Shift, 12   @ bitWidth 2 (Maximum allowed re-tries during synchronization phase)  
        .equ SPDIF_RX_CR_WFA, 1 << 14   @ bitWidth 1 (Wait For Activity)  
        .equ SPDIF_RX_CR_INSEL_Shift, 16   @ bitWidth 3 (input selection)  
 
    .equ SPDIF_RX_IMR, SPDIF_RX_BASE + 0x4 @ (Interrupt mask register) 
        .equ SPDIF_RX_IMR_RXNEIE, 1 << 0   @ bitWidth 1 (RXNE interrupt enable)  
        .equ SPDIF_RX_IMR_CSRNEIE, 1 << 1   @ bitWidth 1 (Control Buffer Ready Interrupt Enable)  
        .equ SPDIF_RX_IMR_PERRIE, 1 << 2   @ bitWidth 1 (Parity error interrupt enable)  
        .equ SPDIF_RX_IMR_OVRIE, 1 << 3   @ bitWidth 1 (Overrun error Interrupt Enable)  
        .equ SPDIF_RX_IMR_SBLKIE, 1 << 4   @ bitWidth 1 (Synchronization Block Detected Interrupt Enable)  
        .equ SPDIF_RX_IMR_SYNCDIE, 1 << 5   @ bitWidth 1 (Synchronization Done)  
        .equ SPDIF_RX_IMR_IFEIE, 1 << 6   @ bitWidth 1 (Serial Interface Error Interrupt Enable)  
 
    .equ SPDIF_RX_SR, SPDIF_RX_BASE + 0x8 @ (Status register) 
        .equ SPDIF_RX_SR_RXNE, 1 << 0   @ bitWidth 1 (Read data register not empty)  
        .equ SPDIF_RX_SR_CSRNE, 1 << 1   @ bitWidth 1 (Control Buffer register is not empty)  
        .equ SPDIF_RX_SR_PERR, 1 << 2   @ bitWidth 1 (Parity error)  
        .equ SPDIF_RX_SR_OVR, 1 << 3   @ bitWidth 1 (Overrun error)  
        .equ SPDIF_RX_SR_SBD, 1 << 4   @ bitWidth 1 (Synchronization Block Detected)  
        .equ SPDIF_RX_SR_SYNCD, 1 << 5   @ bitWidth 1 (Synchronization Done)  
        .equ SPDIF_RX_SR_FERR, 1 << 6   @ bitWidth 1 (Framing error)  
        .equ SPDIF_RX_SR_SERR, 1 << 7   @ bitWidth 1 (Synchronization error)  
        .equ SPDIF_RX_SR_TERR, 1 << 8   @ bitWidth 1 (Time-out error)  
        .equ SPDIF_RX_SR_WIDTH5_Shift, 16   @ bitWidth 15 (Duration of 5 symbols counted with SPDIF_CLK)  
 
    .equ SPDIF_RX_IFCR, SPDIF_RX_BASE + 0xC @ (Interrupt Flag Clear register) 
        .equ SPDIF_RX_IFCR_PERRCF, 1 << 2   @ bitWidth 1 (Clears the Parity error flag)  
        .equ SPDIF_RX_IFCR_OVRCF, 1 << 3   @ bitWidth 1 (Clears the Overrun error flag)  
        .equ SPDIF_RX_IFCR_SBDCF, 1 << 4   @ bitWidth 1 (Clears the Synchronization Block Detected flag)  
        .equ SPDIF_RX_IFCR_SYNCDCF, 1 << 5   @ bitWidth 1 (Clears the Synchronization Done flag)  
 
    .equ SPDIF_RX_DR, SPDIF_RX_BASE + 0x10 @ (Data input register) 
        .equ SPDIF_RX_DR_DR_Shift, 0   @ bitWidth 24 (Parity Error bit)  
        .equ SPDIF_RX_DR_PE, 1 << 24   @ bitWidth 1 (Parity Error bit)  
        .equ SPDIF_RX_DR_V, 1 << 25   @ bitWidth 1 (Validity bit)  
        .equ SPDIF_RX_DR_U, 1 << 26   @ bitWidth 1 (User bit)  
        .equ SPDIF_RX_DR_C, 1 << 27   @ bitWidth 1 (Channel Status bit)  
        .equ SPDIF_RX_DR_PT_Shift, 28   @ bitWidth 2 (Preamble Type)  
 
    .equ SPDIF_RX_CSR, SPDIF_RX_BASE + 0x14 @ (Channel Status register) 
        .equ SPDIF_RX_CSR_USR_Shift, 0   @ bitWidth 16 (User data information)  
        .equ SPDIF_RX_CSR_CS_Shift, 16   @ bitWidth 8 (Channel A status information)  
        .equ SPDIF_RX_CSR_SOB, 1 << 24   @ bitWidth 1 (Start Of Block)  
 
    .equ SPDIF_RX_DIR, SPDIF_RX_BASE + 0x18 @ (Debug Information register) 
        .equ SPDIF_RX_DIR_THI_Shift, 0   @ bitWidth 13 (Threshold HIGH)  
        .equ SPDIF_RX_DIR_TLO_Shift, 16   @ bitWidth 13 (Threshold LOW)  
 

@=========================== SDMMC1 ===========================@
.equ SDMMC1_BASE, 0x40012C00 @ (Secure digital input/output interface) 
    .equ SDMMC1_POWER, SDMMC1_BASE + 0x0 @ (power control register) 
        .equ SDMMC1_POWER_PWRCTRL_Shift, 0   @ bitWidth 2 (PWRCTRL)  
 
    .equ SDMMC1_CLKCR, SDMMC1_BASE + 0x4 @ (SDI clock control register) 
        .equ SDMMC1_CLKCR_HWFC_EN, 1 << 14   @ bitWidth 1 (HW Flow Control enable)  
        .equ SDMMC1_CLKCR_NEGEDGE, 1 << 13   @ bitWidth 1 (SDIO_CK dephasing selection bit)  
        .equ SDMMC1_CLKCR_WIDBUS_Shift, 11   @ bitWidth 2 (Wide bus mode enable bit)  
        .equ SDMMC1_CLKCR_BYPASS, 1 << 10   @ bitWidth 1 (Clock divider bypass enable bit)  
        .equ SDMMC1_CLKCR_PWRSAV, 1 << 9   @ bitWidth 1 (Power saving configuration bit)  
        .equ SDMMC1_CLKCR_CLKEN, 1 << 8   @ bitWidth 1 (Clock enable bit)  
        .equ SDMMC1_CLKCR_CLKDIV_Shift, 0   @ bitWidth 8 (Clock divide factor)  
 
    .equ SDMMC1_ARG, SDMMC1_BASE + 0x8 @ (argument register) 
        .equ SDMMC1_ARG_CMDARG_Shift, 0   @ bitWidth 32 (Command argument)  
 
    .equ SDMMC1_CMD, SDMMC1_BASE + 0xC @ (command register) 
        .equ SDMMC1_CMD_CE_ATACMD, 1 << 14   @ bitWidth 1 (CE-ATA command)  
        .equ SDMMC1_CMD_nIEN, 1 << 13   @ bitWidth 1 (not Interrupt Enable)  
        .equ SDMMC1_CMD_ENCMDcompl, 1 << 12   @ bitWidth 1 (Enable CMD completion)  
        .equ SDMMC1_CMD_SDIOSuspend, 1 << 11   @ bitWidth 1 (SD I/O suspend command)  
        .equ SDMMC1_CMD_CPSMEN, 1 << 10   @ bitWidth 1 (Command path state machine CPSM Enable bit)  
        .equ SDMMC1_CMD_WAITPEND, 1 << 9   @ bitWidth 1 (CPSM Waits for ends of data transfer CmdPend internal signal)  
        .equ SDMMC1_CMD_WAITINT, 1 << 8   @ bitWidth 1 (CPSM waits for interrupt request)  
        .equ SDMMC1_CMD_WAITRESP_Shift, 6   @ bitWidth 2 (Wait for response bits)  
        .equ SDMMC1_CMD_CMDINDEX_Shift, 0   @ bitWidth 6 (Command index)  
 
    .equ SDMMC1_RESPCMD, SDMMC1_BASE + 0x10 @ (command response register) 
        .equ SDMMC1_RESPCMD_RESPCMD_Shift, 0   @ bitWidth 6 (Response command index)  
 
    .equ SDMMC1_RESP1, SDMMC1_BASE + 0x14 @ (response 1..4 register) 
        .equ SDMMC1_RESP1_CARDSTATUS1_Shift, 0   @ bitWidth 32 (see Table 132)  
 
    .equ SDMMC1_RESP2, SDMMC1_BASE + 0x18 @ (response 1..4 register) 
        .equ SDMMC1_RESP2_CARDSTATUS2_Shift, 0   @ bitWidth 32 (see Table 132)  
 
    .equ SDMMC1_RESP3, SDMMC1_BASE + 0x1C @ (response 1..4 register) 
        .equ SDMMC1_RESP3_CARDSTATUS3_Shift, 0   @ bitWidth 32 (see Table 132)  
 
    .equ SDMMC1_RESP4, SDMMC1_BASE + 0x20 @ (response 1..4 register) 
        .equ SDMMC1_RESP4_CARDSTATUS4_Shift, 0   @ bitWidth 32 (see Table 132)  
 
    .equ SDMMC1_DTIMER, SDMMC1_BASE + 0x24 @ (data timer register) 
        .equ SDMMC1_DTIMER_DATATIME_Shift, 0   @ bitWidth 32 (Data timeout period)  
 
    .equ SDMMC1_DLEN, SDMMC1_BASE + 0x28 @ (data length register) 
        .equ SDMMC1_DLEN_DATALENGTH_Shift, 0   @ bitWidth 25 (Data length value)  
 
    .equ SDMMC1_DCTRL, SDMMC1_BASE + 0x2C @ (data control register) 
        .equ SDMMC1_DCTRL_SDIOEN, 1 << 11   @ bitWidth 1 (SD I/O enable functions)  
        .equ SDMMC1_DCTRL_RWMOD, 1 << 10   @ bitWidth 1 (Read wait mode)  
        .equ SDMMC1_DCTRL_RWSTOP, 1 << 9   @ bitWidth 1 (Read wait stop)  
        .equ SDMMC1_DCTRL_RWSTART, 1 << 8   @ bitWidth 1 (Read wait start)  
        .equ SDMMC1_DCTRL_DBLOCKSIZE_Shift, 4   @ bitWidth 4 (Data block size)  
        .equ SDMMC1_DCTRL_DMAEN, 1 << 3   @ bitWidth 1 (DMA enable bit)  
        .equ SDMMC1_DCTRL_DTMODE, 1 << 2   @ bitWidth 1 (Data transfer mode selection 1: Stream or SDIO multibyte data transfer)  
        .equ SDMMC1_DCTRL_DTDIR, 1 << 1   @ bitWidth 1 (Data transfer direction selection)  
        .equ SDMMC1_DCTRL_DTEN, 1 << 0   @ bitWidth 1 (DTEN)  
 
    .equ SDMMC1_DCOUNT, SDMMC1_BASE + 0x30 @ (data counter register) 
        .equ SDMMC1_DCOUNT_DATACOUNT_Shift, 0   @ bitWidth 25 (Data count value)  
 
    .equ SDMMC1_STA, SDMMC1_BASE + 0x34 @ (status register) 
        .equ SDMMC1_STA_CEATAEND, 1 << 23   @ bitWidth 1 (CE-ATA command completion signal received for CMD61)  
        .equ SDMMC1_STA_SDIOIT, 1 << 22   @ bitWidth 1 (SDIO interrupt received)  
        .equ SDMMC1_STA_RXDAVL, 1 << 21   @ bitWidth 1 (Data available in receive FIFO)  
        .equ SDMMC1_STA_TXDAVL, 1 << 20   @ bitWidth 1 (Data available in transmit FIFO)  
        .equ SDMMC1_STA_RXFIFOE, 1 << 19   @ bitWidth 1 (Receive FIFO empty)  
        .equ SDMMC1_STA_TXFIFOE, 1 << 18   @ bitWidth 1 (Transmit FIFO empty)  
        .equ SDMMC1_STA_RXFIFOF, 1 << 17   @ bitWidth 1 (Receive FIFO full)  
        .equ SDMMC1_STA_TXFIFOF, 1 << 16   @ bitWidth 1 (Transmit FIFO full)  
        .equ SDMMC1_STA_RXFIFOHF, 1 << 15   @ bitWidth 1 (Receive FIFO half full: there are at least 8 words in the FIFO)  
        .equ SDMMC1_STA_TXFIFOHE, 1 << 14   @ bitWidth 1 (Transmit FIFO half empty: at least 8 words can be written into the FIFO)  
        .equ SDMMC1_STA_RXACT, 1 << 13   @ bitWidth 1 (Data receive in progress)  
        .equ SDMMC1_STA_TXACT, 1 << 12   @ bitWidth 1 (Data transmit in progress)  
        .equ SDMMC1_STA_CMDACT, 1 << 11   @ bitWidth 1 (Command transfer in progress)  
        .equ SDMMC1_STA_DBCKEND, 1 << 10   @ bitWidth 1 (Data block sent/received CRC check passed)  
        .equ SDMMC1_STA_STBITERR, 1 << 9   @ bitWidth 1 (Start bit not detected on all data signals in wide bus mode)  
        .equ SDMMC1_STA_DATAEND, 1 << 8   @ bitWidth 1 (Data end data counter, SDIDCOUNT, is zero)  
        .equ SDMMC1_STA_CMDSENT, 1 << 7   @ bitWidth 1 (Command sent no response required)  
        .equ SDMMC1_STA_CMDREND, 1 << 6   @ bitWidth 1 (Command response received CRC check passed)  
        .equ SDMMC1_STA_RXOVERR, 1 << 5   @ bitWidth 1 (Received FIFO overrun error)  
        .equ SDMMC1_STA_TXUNDERR, 1 << 4   @ bitWidth 1 (Transmit FIFO underrun error)  
        .equ SDMMC1_STA_DTIMEOUT, 1 << 3   @ bitWidth 1 (Data timeout)  
        .equ SDMMC1_STA_CTIMEOUT, 1 << 2   @ bitWidth 1 (Command response timeout)  
        .equ SDMMC1_STA_DCRCFAIL, 1 << 1   @ bitWidth 1 (Data block sent/received CRC check failed)  
        .equ SDMMC1_STA_CCRCFAIL, 1 << 0   @ bitWidth 1 (Command response received CRC check failed)  
 
    .equ SDMMC1_ICR, SDMMC1_BASE + 0x38 @ (interrupt clear register) 
        .equ SDMMC1_ICR_CEATAENDC, 1 << 23   @ bitWidth 1 (CEATAEND flag clear bit)  
        .equ SDMMC1_ICR_SDIOITC, 1 << 22   @ bitWidth 1 (SDIOIT flag clear bit)  
        .equ SDMMC1_ICR_DBCKENDC, 1 << 10   @ bitWidth 1 (DBCKEND flag clear bit)  
        .equ SDMMC1_ICR_STBITERRC, 1 << 9   @ bitWidth 1 (STBITERR flag clear bit)  
        .equ SDMMC1_ICR_DATAENDC, 1 << 8   @ bitWidth 1 (DATAEND flag clear bit)  
        .equ SDMMC1_ICR_CMDSENTC, 1 << 7   @ bitWidth 1 (CMDSENT flag clear bit)  
        .equ SDMMC1_ICR_CMDRENDC, 1 << 6   @ bitWidth 1 (CMDREND flag clear bit)  
        .equ SDMMC1_ICR_RXOVERRC, 1 << 5   @ bitWidth 1 (RXOVERR flag clear bit)  
        .equ SDMMC1_ICR_TXUNDERRC, 1 << 4   @ bitWidth 1 (TXUNDERR flag clear bit)  
        .equ SDMMC1_ICR_DTIMEOUTC, 1 << 3   @ bitWidth 1 (DTIMEOUT flag clear bit)  
        .equ SDMMC1_ICR_CTIMEOUTC, 1 << 2   @ bitWidth 1 (CTIMEOUT flag clear bit)  
        .equ SDMMC1_ICR_DCRCFAILC, 1 << 1   @ bitWidth 1 (DCRCFAIL flag clear bit)  
        .equ SDMMC1_ICR_CCRCFAILC, 1 << 0   @ bitWidth 1 (CCRCFAIL flag clear bit)  
 
    .equ SDMMC1_MASK, SDMMC1_BASE + 0x3C @ (mask register) 
        .equ SDMMC1_MASK_CEATAENDIE, 1 << 23   @ bitWidth 1 (CE-ATA command completion signal received interrupt enable)  
        .equ SDMMC1_MASK_SDIOITIE, 1 << 22   @ bitWidth 1 (SDIO mode interrupt received interrupt enable)  
        .equ SDMMC1_MASK_RXDAVLIE, 1 << 21   @ bitWidth 1 (Data available in Rx FIFO interrupt enable)  
        .equ SDMMC1_MASK_TXDAVLIE, 1 << 20   @ bitWidth 1 (Data available in Tx FIFO interrupt enable)  
        .equ SDMMC1_MASK_RXFIFOEIE, 1 << 19   @ bitWidth 1 (Rx FIFO empty interrupt enable)  
        .equ SDMMC1_MASK_TXFIFOEIE, 1 << 18   @ bitWidth 1 (Tx FIFO empty interrupt enable)  
        .equ SDMMC1_MASK_RXFIFOFIE, 1 << 17   @ bitWidth 1 (Rx FIFO full interrupt enable)  
        .equ SDMMC1_MASK_TXFIFOFIE, 1 << 16   @ bitWidth 1 (Tx FIFO full interrupt enable)  
        .equ SDMMC1_MASK_RXFIFOHFIE, 1 << 15   @ bitWidth 1 (Rx FIFO half full interrupt enable)  
        .equ SDMMC1_MASK_TXFIFOHEIE, 1 << 14   @ bitWidth 1 (Tx FIFO half empty interrupt enable)  
        .equ SDMMC1_MASK_RXACTIE, 1 << 13   @ bitWidth 1 (Data receive acting interrupt enable)  
        .equ SDMMC1_MASK_TXACTIE, 1 << 12   @ bitWidth 1 (Data transmit acting interrupt enable)  
        .equ SDMMC1_MASK_CMDACTIE, 1 << 11   @ bitWidth 1 (Command acting interrupt enable)  
        .equ SDMMC1_MASK_DBCKENDIE, 1 << 10   @ bitWidth 1 (Data block end interrupt enable)  
        .equ SDMMC1_MASK_STBITERRIE, 1 << 9   @ bitWidth 1 (Start bit error interrupt enable)  
        .equ SDMMC1_MASK_DATAENDIE, 1 << 8   @ bitWidth 1 (Data end interrupt enable)  
        .equ SDMMC1_MASK_CMDSENTIE, 1 << 7   @ bitWidth 1 (Command sent interrupt enable)  
        .equ SDMMC1_MASK_CMDRENDIE, 1 << 6   @ bitWidth 1 (Command response received interrupt enable)  
        .equ SDMMC1_MASK_RXOVERRIE, 1 << 5   @ bitWidth 1 (Rx FIFO overrun error interrupt enable)  
        .equ SDMMC1_MASK_TXUNDERRIE, 1 << 4   @ bitWidth 1 (Tx FIFO underrun error interrupt enable)  
        .equ SDMMC1_MASK_DTIMEOUTIE, 1 << 3   @ bitWidth 1 (Data timeout interrupt enable)  
        .equ SDMMC1_MASK_CTIMEOUTIE, 1 << 2   @ bitWidth 1 (Command timeout interrupt enable)  
        .equ SDMMC1_MASK_DCRCFAILIE, 1 << 1   @ bitWidth 1 (Data CRC fail interrupt enable)  
        .equ SDMMC1_MASK_CCRCFAILIE, 1 << 0   @ bitWidth 1 (Command CRC fail interrupt enable)  
 
    .equ SDMMC1_FIFOCNT, SDMMC1_BASE + 0x48 @ (FIFO counter register) 
        .equ SDMMC1_FIFOCNT_FIFOCOUNT_Shift, 0   @ bitWidth 24 (Remaining number of words to be written to or read from the FIFO)  
 
    .equ SDMMC1_FIFO, SDMMC1_BASE + 0x80 @ (data FIFO register) 
        .equ SDMMC1_FIFO_FIFOData_Shift, 0   @ bitWidth 32 (Receive and transmit FIFO data)  
 

@=========================== LPTIM1 ===========================@
.equ LPTIM1_BASE, 0x40002400 @ (Low power timer) 
    .equ LPTIM1_ISR, LPTIM1_BASE + 0x0 @ (Interrupt and Status Register) 
        .equ LPTIM1_ISR_DOWN, 1 << 6   @ bitWidth 1 (Counter direction change up to down)  
        .equ LPTIM1_ISR_UP, 1 << 5   @ bitWidth 1 (Counter direction change down to up)  
        .equ LPTIM1_ISR_ARROK, 1 << 4   @ bitWidth 1 (Autoreload register update OK)  
        .equ LPTIM1_ISR_CMPOK, 1 << 3   @ bitWidth 1 (Compare register update OK)  
        .equ LPTIM1_ISR_EXTTRIG, 1 << 2   @ bitWidth 1 (External trigger edge event)  
        .equ LPTIM1_ISR_ARRM, 1 << 1   @ bitWidth 1 (Autoreload match)  
        .equ LPTIM1_ISR_CMPM, 1 << 0   @ bitWidth 1 (Compare match)  
 
    .equ LPTIM1_ICR, LPTIM1_BASE + 0x4 @ (Interrupt Clear Register) 
        .equ LPTIM1_ICR_DOWNCF, 1 << 6   @ bitWidth 1 (Direction change to down Clear Flag)  
        .equ LPTIM1_ICR_UPCF, 1 << 5   @ bitWidth 1 (Direction change to UP Clear Flag)  
        .equ LPTIM1_ICR_ARROKCF, 1 << 4   @ bitWidth 1 (Autoreload register update OK Clear Flag)  
        .equ LPTIM1_ICR_CMPOKCF, 1 << 3   @ bitWidth 1 (Compare register update OK Clear Flag)  
        .equ LPTIM1_ICR_EXTTRIGCF, 1 << 2   @ bitWidth 1 (External trigger valid edge Clear Flag)  
        .equ LPTIM1_ICR_ARRMCF, 1 << 1   @ bitWidth 1 (Autoreload match Clear Flag)  
        .equ LPTIM1_ICR_CMPMCF, 1 << 0   @ bitWidth 1 (compare match Clear Flag)  
 
    .equ LPTIM1_IER, LPTIM1_BASE + 0x8 @ (Interrupt Enable Register) 
        .equ LPTIM1_IER_DOWNIE, 1 << 6   @ bitWidth 1 (Direction change to down Interrupt Enable)  
        .equ LPTIM1_IER_UPIE, 1 << 5   @ bitWidth 1 (Direction change to UP Interrupt Enable)  
        .equ LPTIM1_IER_ARROKIE, 1 << 4   @ bitWidth 1 (Autoreload register update OK Interrupt Enable)  
        .equ LPTIM1_IER_CMPOKIE, 1 << 3   @ bitWidth 1 (Compare register update OK Interrupt Enable)  
        .equ LPTIM1_IER_EXTTRIGIE, 1 << 2   @ bitWidth 1 (External trigger valid edge Interrupt Enable)  
        .equ LPTIM1_IER_ARRMIE, 1 << 1   @ bitWidth 1 (Autoreload match Interrupt Enable)  
        .equ LPTIM1_IER_CMPMIE, 1 << 0   @ bitWidth 1 (Compare match Interrupt Enable)  
 
    .equ LPTIM1_CFGR, LPTIM1_BASE + 0xC @ (Configuration Register) 
        .equ LPTIM1_CFGR_ENC, 1 << 24   @ bitWidth 1 (Encoder mode enable)  
        .equ LPTIM1_CFGR_COUNTMODE, 1 << 23   @ bitWidth 1 (counter mode enabled)  
        .equ LPTIM1_CFGR_PRELOAD, 1 << 22   @ bitWidth 1 (Registers update mode)  
        .equ LPTIM1_CFGR_WAVPOL, 1 << 21   @ bitWidth 1 (Waveform shape polarity)  
        .equ LPTIM1_CFGR_WAVE, 1 << 20   @ bitWidth 1 (Waveform shape)  
        .equ LPTIM1_CFGR_TIMOUT, 1 << 19   @ bitWidth 1 (Timeout enable)  
        .equ LPTIM1_CFGR_TRIGEN_Shift, 17   @ bitWidth 2 (Trigger enable and polarity)  
        .equ LPTIM1_CFGR_TRIGSEL_Shift, 13   @ bitWidth 3 (Trigger selector)  
        .equ LPTIM1_CFGR_PRESC_Shift, 9   @ bitWidth 3 (Clock prescaler)  
        .equ LPTIM1_CFGR_TRGFLT_Shift, 6   @ bitWidth 2 (Configurable digital filter for trigger)  
        .equ LPTIM1_CFGR_CKFLT_Shift, 3   @ bitWidth 2 (Configurable digital filter for external clock)  
        .equ LPTIM1_CFGR_CKPOL_Shift, 1   @ bitWidth 2 (Clock Polarity)  
        .equ LPTIM1_CFGR_CKSEL, 1 << 0   @ bitWidth 1 (Clock selector)  
 
    .equ LPTIM1_CR, LPTIM1_BASE + 0x10 @ (Control Register) 
        .equ LPTIM1_CR_CNTSTRT, 1 << 2   @ bitWidth 1 (Timer start in continuous mode)  
        .equ LPTIM1_CR_SNGSTRT, 1 << 1   @ bitWidth 1 (LPTIM start in single mode)  
        .equ LPTIM1_CR_ENABLE, 1 << 0   @ bitWidth 1 (LPTIM Enable)  
 
    .equ LPTIM1_CMP, LPTIM1_BASE + 0x14 @ (Compare Register) 
        .equ LPTIM1_CMP_CMP_Shift, 0   @ bitWidth 16 (Compare value)  
 
    .equ LPTIM1_ARR, LPTIM1_BASE + 0x18 @ (Autoreload Register) 
        .equ LPTIM1_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto reload value)  
 
    .equ LPTIM1_CNT, LPTIM1_BASE + 0x1C @ (Counter Register) 
        .equ LPTIM1_CNT_CNT_Shift, 0   @ bitWidth 16 (Counter value)  
 

@=========================== I2C1 ===========================@
.equ I2C1_BASE, 0x40005400 @ (Inter-integrated circuit) 
    .equ I2C1_CR1, I2C1_BASE + 0x0 @ (Control register 1) 
        .equ I2C1_CR1_PE, 1 << 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C1_CR1_TXIE, 1 << 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C1_CR1_RXIE, 1 << 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C1_CR1_ADDRIE, 1 << 3   @ bitWidth 1 (Address match interrupt enable slave only)  
        .equ I2C1_CR1_NACKIE, 1 << 4   @ bitWidth 1 (Not acknowledge received interrupt enable)  
        .equ I2C1_CR1_STOPIE, 1 << 5   @ bitWidth 1 (STOP detection Interrupt enable)  
        .equ I2C1_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transfer Complete interrupt enable)  
        .equ I2C1_CR1_ERRIE, 1 << 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C1_CR1_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C1_CR1_ANFOFF, 1 << 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C1_CR1_TXDMAEN, 1 << 14   @ bitWidth 1 (DMA transmission requests enable)  
        .equ I2C1_CR1_RXDMAEN, 1 << 15   @ bitWidth 1 (DMA reception requests enable)  
        .equ I2C1_CR1_SBC, 1 << 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C1_CR1_NOSTRETCH, 1 << 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C1_CR1_WUPEN, 1 << 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C1_CR1_GCEN, 1 << 19   @ bitWidth 1 (General call enable)  
        .equ I2C1_CR1_SMBHEN, 1 << 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C1_CR1_SMBDEN, 1 << 21   @ bitWidth 1 (SMBus Device Default address enable)  
        .equ I2C1_CR1_ALERTEN, 1 << 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C1_CR1_PECEN, 1 << 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C1_CR2, I2C1_BASE + 0x4 @ (Control register 2) 
        .equ I2C1_CR2_PECBYTE, 1 << 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C1_CR2_AUTOEND, 1 << 25   @ bitWidth 1 (Automatic end mode master mode)  
        .equ I2C1_CR2_RELOAD, 1 << 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C1_CR2_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C1_CR2_NACK, 1 << 15   @ bitWidth 1 (NACK generation slave mode)  
        .equ I2C1_CR2_STOP, 1 << 14   @ bitWidth 1 (Stop generation master mode)  
        .equ I2C1_CR2_START, 1 << 13   @ bitWidth 1 (Start generation)  
        .equ I2C1_CR2_HEAD10R, 1 << 12   @ bitWidth 1 (10-bit address header only read direction master receiver mode)  
        .equ I2C1_CR2_ADD10, 1 << 11   @ bitWidth 1 (10-bit addressing mode master mode)  
        .equ I2C1_CR2_RD_WRN, 1 << 10   @ bitWidth 1 (Transfer direction master mode)  
        .equ I2C1_CR2_SADD_Shift, 0   @ bitWidth 10 (Slave address bit master mode)  
 
    .equ I2C1_OAR1, I2C1_BASE + 0x8 @ (Own address register 1) 
        .equ I2C1_OAR1_OA1_Shift, 0   @ bitWidth 10 (Interface address)  
        .equ I2C1_OAR1_OA1MODE, 1 << 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C1_OAR1_OA1EN, 1 << 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C1_OAR2, I2C1_BASE + 0xC @ (Own address register 2) 
        .equ I2C1_OAR2_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C1_OAR2_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C1_OAR2_OA2EN, 1 << 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C1_TIMINGR, I2C1_BASE + 0x10 @ (Timing register) 
        .equ I2C1_TIMINGR_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master mode)  
        .equ I2C1_TIMINGR_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master mode)  
        .equ I2C1_TIMINGR_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C1_TIMINGR_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C1_TIMINGR_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C1_TIMEOUTR, I2C1_BASE + 0x14 @ (Status register 1) 
        .equ I2C1_TIMEOUTR_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C1_TIMEOUTR_TIDLE, 1 << 12   @ bitWidth 1 (Idle clock timeout detection)  
        .equ I2C1_TIMEOUTR_TIMOUTEN, 1 << 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C1_TIMEOUTR_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C1_TIMEOUTR_TEXTEN, 1 << 31   @ bitWidth 1 (Extended clock timeout enable)  
 
    .equ I2C1_ISR, I2C1_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C1_ISR_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave mode)  
        .equ I2C1_ISR_DIR, 1 << 16   @ bitWidth 1 (Transfer direction Slave mode)  
        .equ I2C1_ISR_BUSY, 1 << 15   @ bitWidth 1 (Bus busy)  
        .equ I2C1_ISR_ALERT, 1 << 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C1_ISR_TIMEOUT, 1 << 12   @ bitWidth 1 (Timeout or t_low detection flag)  
        .equ I2C1_ISR_PECERR, 1 << 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C1_ISR_OVR, 1 << 10   @ bitWidth 1 (Overrun/Underrun slave mode)  
        .equ I2C1_ISR_ARLO, 1 << 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C1_ISR_BERR, 1 << 8   @ bitWidth 1 (Bus error)  
        .equ I2C1_ISR_TCR, 1 << 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C1_ISR_TC, 1 << 6   @ bitWidth 1 (Transfer Complete master mode)  
        .equ I2C1_ISR_STOPF, 1 << 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C1_ISR_NACKF, 1 << 4   @ bitWidth 1 (Not acknowledge received flag)  
        .equ I2C1_ISR_ADDR, 1 << 3   @ bitWidth 1 (Address matched slave mode)  
        .equ I2C1_ISR_RXNE, 1 << 2   @ bitWidth 1 (Receive data register not empty receivers)  
        .equ I2C1_ISR_TXIS, 1 << 1   @ bitWidth 1 (Transmit interrupt status transmitters)  
        .equ I2C1_ISR_TXE, 1 << 0   @ bitWidth 1 (Transmit data register empty transmitters)  
 
    .equ I2C1_ICR, I2C1_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C1_ICR_ALERTCF, 1 << 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C1_ICR_TIMOUTCF, 1 << 12   @ bitWidth 1 (Timeout detection flag clear)  
        .equ I2C1_ICR_PECCF, 1 << 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C1_ICR_OVRCF, 1 << 10   @ bitWidth 1 (Overrun/Underrun flag clear)  
        .equ I2C1_ICR_ARLOCF, 1 << 9   @ bitWidth 1 (Arbitration lost flag clear)  
        .equ I2C1_ICR_BERRCF, 1 << 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C1_ICR_STOPCF, 1 << 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C1_ICR_NACKCF, 1 << 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C1_ICR_ADDRCF, 1 << 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C1_PECR, I2C1_BASE + 0x20 @ (PEC register) 
        .equ I2C1_PECR_PEC_Shift, 0   @ bitWidth 8 (Packet error checking register)  
 
    .equ I2C1_RXDR, I2C1_BASE + 0x24 @ (Receive data register) 
        .equ I2C1_RXDR_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C1_TXDR, I2C1_BASE + 0x28 @ (Transmit data register) 
        .equ I2C1_TXDR_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== I2C2 ===========================@
.equ I2C2_BASE, 0x40005800 @ (Inter-integrated circuit) 
    .equ I2C2_CR1, I2C2_BASE + 0x0 @ (Control register 1) 
        .equ I2C2_CR1_PE, 1 << 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C2_CR1_TXIE, 1 << 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C2_CR1_RXIE, 1 << 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C2_CR1_ADDRIE, 1 << 3   @ bitWidth 1 (Address match interrupt enable slave only)  
        .equ I2C2_CR1_NACKIE, 1 << 4   @ bitWidth 1 (Not acknowledge received interrupt enable)  
        .equ I2C2_CR1_STOPIE, 1 << 5   @ bitWidth 1 (STOP detection Interrupt enable)  
        .equ I2C2_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transfer Complete interrupt enable)  
        .equ I2C2_CR1_ERRIE, 1 << 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C2_CR1_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C2_CR1_ANFOFF, 1 << 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C2_CR1_TXDMAEN, 1 << 14   @ bitWidth 1 (DMA transmission requests enable)  
        .equ I2C2_CR1_RXDMAEN, 1 << 15   @ bitWidth 1 (DMA reception requests enable)  
        .equ I2C2_CR1_SBC, 1 << 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C2_CR1_NOSTRETCH, 1 << 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C2_CR1_WUPEN, 1 << 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C2_CR1_GCEN, 1 << 19   @ bitWidth 1 (General call enable)  
        .equ I2C2_CR1_SMBHEN, 1 << 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C2_CR1_SMBDEN, 1 << 21   @ bitWidth 1 (SMBus Device Default address enable)  
        .equ I2C2_CR1_ALERTEN, 1 << 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C2_CR1_PECEN, 1 << 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C2_CR2, I2C2_BASE + 0x4 @ (Control register 2) 
        .equ I2C2_CR2_PECBYTE, 1 << 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C2_CR2_AUTOEND, 1 << 25   @ bitWidth 1 (Automatic end mode master mode)  
        .equ I2C2_CR2_RELOAD, 1 << 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C2_CR2_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C2_CR2_NACK, 1 << 15   @ bitWidth 1 (NACK generation slave mode)  
        .equ I2C2_CR2_STOP, 1 << 14   @ bitWidth 1 (Stop generation master mode)  
        .equ I2C2_CR2_START, 1 << 13   @ bitWidth 1 (Start generation)  
        .equ I2C2_CR2_HEAD10R, 1 << 12   @ bitWidth 1 (10-bit address header only read direction master receiver mode)  
        .equ I2C2_CR2_ADD10, 1 << 11   @ bitWidth 1 (10-bit addressing mode master mode)  
        .equ I2C2_CR2_RD_WRN, 1 << 10   @ bitWidth 1 (Transfer direction master mode)  
        .equ I2C2_CR2_SADD_Shift, 0   @ bitWidth 10 (Slave address bit master mode)  
 
    .equ I2C2_OAR1, I2C2_BASE + 0x8 @ (Own address register 1) 
        .equ I2C2_OAR1_OA1_Shift, 0   @ bitWidth 10 (Interface address)  
        .equ I2C2_OAR1_OA1MODE, 1 << 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C2_OAR1_OA1EN, 1 << 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C2_OAR2, I2C2_BASE + 0xC @ (Own address register 2) 
        .equ I2C2_OAR2_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C2_OAR2_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C2_OAR2_OA2EN, 1 << 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C2_TIMINGR, I2C2_BASE + 0x10 @ (Timing register) 
        .equ I2C2_TIMINGR_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master mode)  
        .equ I2C2_TIMINGR_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master mode)  
        .equ I2C2_TIMINGR_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C2_TIMINGR_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C2_TIMINGR_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C2_TIMEOUTR, I2C2_BASE + 0x14 @ (Status register 1) 
        .equ I2C2_TIMEOUTR_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C2_TIMEOUTR_TIDLE, 1 << 12   @ bitWidth 1 (Idle clock timeout detection)  
        .equ I2C2_TIMEOUTR_TIMOUTEN, 1 << 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C2_TIMEOUTR_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C2_TIMEOUTR_TEXTEN, 1 << 31   @ bitWidth 1 (Extended clock timeout enable)  
 
    .equ I2C2_ISR, I2C2_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C2_ISR_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave mode)  
        .equ I2C2_ISR_DIR, 1 << 16   @ bitWidth 1 (Transfer direction Slave mode)  
        .equ I2C2_ISR_BUSY, 1 << 15   @ bitWidth 1 (Bus busy)  
        .equ I2C2_ISR_ALERT, 1 << 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C2_ISR_TIMEOUT, 1 << 12   @ bitWidth 1 (Timeout or t_low detection flag)  
        .equ I2C2_ISR_PECERR, 1 << 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C2_ISR_OVR, 1 << 10   @ bitWidth 1 (Overrun/Underrun slave mode)  
        .equ I2C2_ISR_ARLO, 1 << 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C2_ISR_BERR, 1 << 8   @ bitWidth 1 (Bus error)  
        .equ I2C2_ISR_TCR, 1 << 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C2_ISR_TC, 1 << 6   @ bitWidth 1 (Transfer Complete master mode)  
        .equ I2C2_ISR_STOPF, 1 << 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C2_ISR_NACKF, 1 << 4   @ bitWidth 1 (Not acknowledge received flag)  
        .equ I2C2_ISR_ADDR, 1 << 3   @ bitWidth 1 (Address matched slave mode)  
        .equ I2C2_ISR_RXNE, 1 << 2   @ bitWidth 1 (Receive data register not empty receivers)  
        .equ I2C2_ISR_TXIS, 1 << 1   @ bitWidth 1 (Transmit interrupt status transmitters)  
        .equ I2C2_ISR_TXE, 1 << 0   @ bitWidth 1 (Transmit data register empty transmitters)  
 
    .equ I2C2_ICR, I2C2_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C2_ICR_ALERTCF, 1 << 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C2_ICR_TIMOUTCF, 1 << 12   @ bitWidth 1 (Timeout detection flag clear)  
        .equ I2C2_ICR_PECCF, 1 << 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C2_ICR_OVRCF, 1 << 10   @ bitWidth 1 (Overrun/Underrun flag clear)  
        .equ I2C2_ICR_ARLOCF, 1 << 9   @ bitWidth 1 (Arbitration lost flag clear)  
        .equ I2C2_ICR_BERRCF, 1 << 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C2_ICR_STOPCF, 1 << 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C2_ICR_NACKCF, 1 << 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C2_ICR_ADDRCF, 1 << 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C2_PECR, I2C2_BASE + 0x20 @ (PEC register) 
        .equ I2C2_PECR_PEC_Shift, 0   @ bitWidth 8 (Packet error checking register)  
 
    .equ I2C2_RXDR, I2C2_BASE + 0x24 @ (Receive data register) 
        .equ I2C2_RXDR_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C2_TXDR, I2C2_BASE + 0x28 @ (Transmit data register) 
        .equ I2C2_TXDR_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== I2C3 ===========================@
.equ I2C3_BASE, 0x40005C00 @ (Inter-integrated circuit) 
    .equ I2C3_CR1, I2C3_BASE + 0x0 @ (Control register 1) 
        .equ I2C3_CR1_PE, 1 << 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C3_CR1_TXIE, 1 << 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C3_CR1_RXIE, 1 << 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C3_CR1_ADDRIE, 1 << 3   @ bitWidth 1 (Address match interrupt enable slave only)  
        .equ I2C3_CR1_NACKIE, 1 << 4   @ bitWidth 1 (Not acknowledge received interrupt enable)  
        .equ I2C3_CR1_STOPIE, 1 << 5   @ bitWidth 1 (STOP detection Interrupt enable)  
        .equ I2C3_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transfer Complete interrupt enable)  
        .equ I2C3_CR1_ERRIE, 1 << 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C3_CR1_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C3_CR1_ANFOFF, 1 << 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C3_CR1_TXDMAEN, 1 << 14   @ bitWidth 1 (DMA transmission requests enable)  
        .equ I2C3_CR1_RXDMAEN, 1 << 15   @ bitWidth 1 (DMA reception requests enable)  
        .equ I2C3_CR1_SBC, 1 << 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C3_CR1_NOSTRETCH, 1 << 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C3_CR1_WUPEN, 1 << 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C3_CR1_GCEN, 1 << 19   @ bitWidth 1 (General call enable)  
        .equ I2C3_CR1_SMBHEN, 1 << 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C3_CR1_SMBDEN, 1 << 21   @ bitWidth 1 (SMBus Device Default address enable)  
        .equ I2C3_CR1_ALERTEN, 1 << 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C3_CR1_PECEN, 1 << 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C3_CR2, I2C3_BASE + 0x4 @ (Control register 2) 
        .equ I2C3_CR2_PECBYTE, 1 << 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C3_CR2_AUTOEND, 1 << 25   @ bitWidth 1 (Automatic end mode master mode)  
        .equ I2C3_CR2_RELOAD, 1 << 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C3_CR2_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C3_CR2_NACK, 1 << 15   @ bitWidth 1 (NACK generation slave mode)  
        .equ I2C3_CR2_STOP, 1 << 14   @ bitWidth 1 (Stop generation master mode)  
        .equ I2C3_CR2_START, 1 << 13   @ bitWidth 1 (Start generation)  
        .equ I2C3_CR2_HEAD10R, 1 << 12   @ bitWidth 1 (10-bit address header only read direction master receiver mode)  
        .equ I2C3_CR2_ADD10, 1 << 11   @ bitWidth 1 (10-bit addressing mode master mode)  
        .equ I2C3_CR2_RD_WRN, 1 << 10   @ bitWidth 1 (Transfer direction master mode)  
        .equ I2C3_CR2_SADD_Shift, 0   @ bitWidth 10 (Slave address bit master mode)  
 
    .equ I2C3_OAR1, I2C3_BASE + 0x8 @ (Own address register 1) 
        .equ I2C3_OAR1_OA1_Shift, 0   @ bitWidth 10 (Interface address)  
        .equ I2C3_OAR1_OA1MODE, 1 << 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C3_OAR1_OA1EN, 1 << 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C3_OAR2, I2C3_BASE + 0xC @ (Own address register 2) 
        .equ I2C3_OAR2_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C3_OAR2_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C3_OAR2_OA2EN, 1 << 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C3_TIMINGR, I2C3_BASE + 0x10 @ (Timing register) 
        .equ I2C3_TIMINGR_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master mode)  
        .equ I2C3_TIMINGR_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master mode)  
        .equ I2C3_TIMINGR_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C3_TIMINGR_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C3_TIMINGR_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C3_TIMEOUTR, I2C3_BASE + 0x14 @ (Status register 1) 
        .equ I2C3_TIMEOUTR_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C3_TIMEOUTR_TIDLE, 1 << 12   @ bitWidth 1 (Idle clock timeout detection)  
        .equ I2C3_TIMEOUTR_TIMOUTEN, 1 << 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C3_TIMEOUTR_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C3_TIMEOUTR_TEXTEN, 1 << 31   @ bitWidth 1 (Extended clock timeout enable)  
 
    .equ I2C3_ISR, I2C3_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C3_ISR_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave mode)  
        .equ I2C3_ISR_DIR, 1 << 16   @ bitWidth 1 (Transfer direction Slave mode)  
        .equ I2C3_ISR_BUSY, 1 << 15   @ bitWidth 1 (Bus busy)  
        .equ I2C3_ISR_ALERT, 1 << 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C3_ISR_TIMEOUT, 1 << 12   @ bitWidth 1 (Timeout or t_low detection flag)  
        .equ I2C3_ISR_PECERR, 1 << 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C3_ISR_OVR, 1 << 10   @ bitWidth 1 (Overrun/Underrun slave mode)  
        .equ I2C3_ISR_ARLO, 1 << 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C3_ISR_BERR, 1 << 8   @ bitWidth 1 (Bus error)  
        .equ I2C3_ISR_TCR, 1 << 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C3_ISR_TC, 1 << 6   @ bitWidth 1 (Transfer Complete master mode)  
        .equ I2C3_ISR_STOPF, 1 << 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C3_ISR_NACKF, 1 << 4   @ bitWidth 1 (Not acknowledge received flag)  
        .equ I2C3_ISR_ADDR, 1 << 3   @ bitWidth 1 (Address matched slave mode)  
        .equ I2C3_ISR_RXNE, 1 << 2   @ bitWidth 1 (Receive data register not empty receivers)  
        .equ I2C3_ISR_TXIS, 1 << 1   @ bitWidth 1 (Transmit interrupt status transmitters)  
        .equ I2C3_ISR_TXE, 1 << 0   @ bitWidth 1 (Transmit data register empty transmitters)  
 
    .equ I2C3_ICR, I2C3_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C3_ICR_ALERTCF, 1 << 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C3_ICR_TIMOUTCF, 1 << 12   @ bitWidth 1 (Timeout detection flag clear)  
        .equ I2C3_ICR_PECCF, 1 << 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C3_ICR_OVRCF, 1 << 10   @ bitWidth 1 (Overrun/Underrun flag clear)  
        .equ I2C3_ICR_ARLOCF, 1 << 9   @ bitWidth 1 (Arbitration lost flag clear)  
        .equ I2C3_ICR_BERRCF, 1 << 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C3_ICR_STOPCF, 1 << 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C3_ICR_NACKCF, 1 << 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C3_ICR_ADDRCF, 1 << 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C3_PECR, I2C3_BASE + 0x20 @ (PEC register) 
        .equ I2C3_PECR_PEC_Shift, 0   @ bitWidth 8 (Packet error checking register)  
 
    .equ I2C3_RXDR, I2C3_BASE + 0x24 @ (Receive data register) 
        .equ I2C3_RXDR_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C3_TXDR, I2C3_BASE + 0x28 @ (Transmit data register) 
        .equ I2C3_TXDR_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== I2C4 ===========================@
.equ I2C4_BASE, 0x40006000 @ (Inter-integrated circuit) 
    .equ I2C4_CR1, I2C4_BASE + 0x0 @ (Control register 1) 
        .equ I2C4_CR1_PE, 1 << 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C4_CR1_TXIE, 1 << 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C4_CR1_RXIE, 1 << 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C4_CR1_ADDRIE, 1 << 3   @ bitWidth 1 (Address match interrupt enable slave only)  
        .equ I2C4_CR1_NACKIE, 1 << 4   @ bitWidth 1 (Not acknowledge received interrupt enable)  
        .equ I2C4_CR1_STOPIE, 1 << 5   @ bitWidth 1 (STOP detection Interrupt enable)  
        .equ I2C4_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transfer Complete interrupt enable)  
        .equ I2C4_CR1_ERRIE, 1 << 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C4_CR1_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C4_CR1_ANFOFF, 1 << 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C4_CR1_TXDMAEN, 1 << 14   @ bitWidth 1 (DMA transmission requests enable)  
        .equ I2C4_CR1_RXDMAEN, 1 << 15   @ bitWidth 1 (DMA reception requests enable)  
        .equ I2C4_CR1_SBC, 1 << 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C4_CR1_NOSTRETCH, 1 << 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C4_CR1_WUPEN, 1 << 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C4_CR1_GCEN, 1 << 19   @ bitWidth 1 (General call enable)  
        .equ I2C4_CR1_SMBHEN, 1 << 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C4_CR1_SMBDEN, 1 << 21   @ bitWidth 1 (SMBus Device Default address enable)  
        .equ I2C4_CR1_ALERTEN, 1 << 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C4_CR1_PECEN, 1 << 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C4_CR2, I2C4_BASE + 0x4 @ (Control register 2) 
        .equ I2C4_CR2_PECBYTE, 1 << 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C4_CR2_AUTOEND, 1 << 25   @ bitWidth 1 (Automatic end mode master mode)  
        .equ I2C4_CR2_RELOAD, 1 << 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C4_CR2_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C4_CR2_NACK, 1 << 15   @ bitWidth 1 (NACK generation slave mode)  
        .equ I2C4_CR2_STOP, 1 << 14   @ bitWidth 1 (Stop generation master mode)  
        .equ I2C4_CR2_START, 1 << 13   @ bitWidth 1 (Start generation)  
        .equ I2C4_CR2_HEAD10R, 1 << 12   @ bitWidth 1 (10-bit address header only read direction master receiver mode)  
        .equ I2C4_CR2_ADD10, 1 << 11   @ bitWidth 1 (10-bit addressing mode master mode)  
        .equ I2C4_CR2_RD_WRN, 1 << 10   @ bitWidth 1 (Transfer direction master mode)  
        .equ I2C4_CR2_SADD_Shift, 0   @ bitWidth 10 (Slave address bit master mode)  
 
    .equ I2C4_OAR1, I2C4_BASE + 0x8 @ (Own address register 1) 
        .equ I2C4_OAR1_OA1_Shift, 0   @ bitWidth 10 (Interface address)  
        .equ I2C4_OAR1_OA1MODE, 1 << 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C4_OAR1_OA1EN, 1 << 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C4_OAR2, I2C4_BASE + 0xC @ (Own address register 2) 
        .equ I2C4_OAR2_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C4_OAR2_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C4_OAR2_OA2EN, 1 << 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C4_TIMINGR, I2C4_BASE + 0x10 @ (Timing register) 
        .equ I2C4_TIMINGR_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master mode)  
        .equ I2C4_TIMINGR_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master mode)  
        .equ I2C4_TIMINGR_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C4_TIMINGR_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C4_TIMINGR_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C4_TIMEOUTR, I2C4_BASE + 0x14 @ (Status register 1) 
        .equ I2C4_TIMEOUTR_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C4_TIMEOUTR_TIDLE, 1 << 12   @ bitWidth 1 (Idle clock timeout detection)  
        .equ I2C4_TIMEOUTR_TIMOUTEN, 1 << 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C4_TIMEOUTR_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C4_TIMEOUTR_TEXTEN, 1 << 31   @ bitWidth 1 (Extended clock timeout enable)  
 
    .equ I2C4_ISR, I2C4_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C4_ISR_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave mode)  
        .equ I2C4_ISR_DIR, 1 << 16   @ bitWidth 1 (Transfer direction Slave mode)  
        .equ I2C4_ISR_BUSY, 1 << 15   @ bitWidth 1 (Bus busy)  
        .equ I2C4_ISR_ALERT, 1 << 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C4_ISR_TIMEOUT, 1 << 12   @ bitWidth 1 (Timeout or t_low detection flag)  
        .equ I2C4_ISR_PECERR, 1 << 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C4_ISR_OVR, 1 << 10   @ bitWidth 1 (Overrun/Underrun slave mode)  
        .equ I2C4_ISR_ARLO, 1 << 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C4_ISR_BERR, 1 << 8   @ bitWidth 1 (Bus error)  
        .equ I2C4_ISR_TCR, 1 << 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C4_ISR_TC, 1 << 6   @ bitWidth 1 (Transfer Complete master mode)  
        .equ I2C4_ISR_STOPF, 1 << 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C4_ISR_NACKF, 1 << 4   @ bitWidth 1 (Not acknowledge received flag)  
        .equ I2C4_ISR_ADDR, 1 << 3   @ bitWidth 1 (Address matched slave mode)  
        .equ I2C4_ISR_RXNE, 1 << 2   @ bitWidth 1 (Receive data register not empty receivers)  
        .equ I2C4_ISR_TXIS, 1 << 1   @ bitWidth 1 (Transmit interrupt status transmitters)  
        .equ I2C4_ISR_TXE, 1 << 0   @ bitWidth 1 (Transmit data register empty transmitters)  
 
    .equ I2C4_ICR, I2C4_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C4_ICR_ALERTCF, 1 << 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C4_ICR_TIMOUTCF, 1 << 12   @ bitWidth 1 (Timeout detection flag clear)  
        .equ I2C4_ICR_PECCF, 1 << 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C4_ICR_OVRCF, 1 << 10   @ bitWidth 1 (Overrun/Underrun flag clear)  
        .equ I2C4_ICR_ARLOCF, 1 << 9   @ bitWidth 1 (Arbitration lost flag clear)  
        .equ I2C4_ICR_BERRCF, 1 << 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C4_ICR_STOPCF, 1 << 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C4_ICR_NACKCF, 1 << 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C4_ICR_ADDRCF, 1 << 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C4_PECR, I2C4_BASE + 0x20 @ (PEC register) 
        .equ I2C4_PECR_PEC_Shift, 0   @ bitWidth 8 (Packet error checking register)  
 
    .equ I2C4_RXDR, I2C4_BASE + 0x24 @ (Receive data register) 
        .equ I2C4_RXDR_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C4_TXDR, I2C4_BASE + 0x28 @ (Transmit data register) 
        .equ I2C4_TXDR_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== RTC ===========================@
.equ RTC_BASE, 0x40002800 @ (Real-time clock) 
    .equ RTC_TR, RTC_BASE + 0x0 @ (time register) 
        .equ RTC_TR_PM, 1 << 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_TR_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_TR_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_TR_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_TR_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_TR_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_TR_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_DR, RTC_BASE + 0x4 @ (date register) 
        .equ RTC_DR_YT_Shift, 20   @ bitWidth 4 (Year tens in BCD format)  
        .equ RTC_DR_YU_Shift, 16   @ bitWidth 4 (Year units in BCD format)  
        .equ RTC_DR_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_DR_MT, 1 << 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_DR_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_DR_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DR_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_CR, RTC_BASE + 0x8 @ (control register) 
        .equ RTC_CR_WCKSEL_Shift, 0   @ bitWidth 3 (Wakeup clock selection)  
        .equ RTC_CR_TSEDGE, 1 << 3   @ bitWidth 1 (Time-stamp event active edge)  
        .equ RTC_CR_REFCKON, 1 << 4   @ bitWidth 1 (Reference clock detection enable 50 or 60 Hz)  
        .equ RTC_CR_BYPSHAD, 1 << 5   @ bitWidth 1 (Bypass the shadow registers)  
        .equ RTC_CR_FMT, 1 << 6   @ bitWidth 1 (Hour format)  
        .equ RTC_CR_ALRAE, 1 << 8   @ bitWidth 1 (Alarm A enable)  
        .equ RTC_CR_ALRBE, 1 << 9   @ bitWidth 1 (Alarm B enable)  
        .equ RTC_CR_WUTE, 1 << 10   @ bitWidth 1 (Wakeup timer enable)  
        .equ RTC_CR_TSE, 1 << 11   @ bitWidth 1 (Time stamp enable)  
        .equ RTC_CR_ALRAIE, 1 << 12   @ bitWidth 1 (Alarm A interrupt enable)  
        .equ RTC_CR_ALRBIE, 1 << 13   @ bitWidth 1 (Alarm B interrupt enable)  
        .equ RTC_CR_WUTIE, 1 << 14   @ bitWidth 1 (Wakeup timer interrupt enable)  
        .equ RTC_CR_TSIE, 1 << 15   @ bitWidth 1 (Time-stamp interrupt enable)  
        .equ RTC_CR_ADD1H, 1 << 16   @ bitWidth 1 (Add 1 hour summer time change)  
        .equ RTC_CR_SUB1H, 1 << 17   @ bitWidth 1 (Subtract 1 hour winter time change)  
        .equ RTC_CR_BKP, 1 << 18   @ bitWidth 1 (Backup)  
        .equ RTC_CR_COSEL, 1 << 19   @ bitWidth 1 (Calibration output selection)  
        .equ RTC_CR_POL, 1 << 20   @ bitWidth 1 (Output polarity)  
        .equ RTC_CR_OSEL_Shift, 21   @ bitWidth 2 (Output selection)  
        .equ RTC_CR_COE, 1 << 23   @ bitWidth 1 (Calibration output enable)  
        .equ RTC_CR_ITSE, 1 << 24   @ bitWidth 1 (timestamp on internal event enable)  
 
    .equ RTC_ISR, RTC_BASE + 0xC @ (initialization and status register) 
        .equ RTC_ISR_ALRAWF, 1 << 0   @ bitWidth 1 (Alarm A write flag)  
        .equ RTC_ISR_ALRBWF, 1 << 1   @ bitWidth 1 (Alarm B write flag)  
        .equ RTC_ISR_WUTWF, 1 << 2   @ bitWidth 1 (Wakeup timer write flag)  
        .equ RTC_ISR_SHPF, 1 << 3   @ bitWidth 1 (Shift operation pending)  
        .equ RTC_ISR_INITS, 1 << 4   @ bitWidth 1 (Initialization status flag)  
        .equ RTC_ISR_RSF, 1 << 5   @ bitWidth 1 (Registers synchronization flag)  
        .equ RTC_ISR_INITF, 1 << 6   @ bitWidth 1 (Initialization flag)  
        .equ RTC_ISR_INIT, 1 << 7   @ bitWidth 1 (Initialization mode)  
        .equ RTC_ISR_ALRAF, 1 << 8   @ bitWidth 1 (Alarm A flag)  
        .equ RTC_ISR_ALRBF, 1 << 9   @ bitWidth 1 (Alarm B flag)  
        .equ RTC_ISR_WUTF, 1 << 10   @ bitWidth 1 (Wakeup timer flag)  
        .equ RTC_ISR_TSF, 1 << 11   @ bitWidth 1 (Time-stamp flag)  
        .equ RTC_ISR_TSOVF, 1 << 12   @ bitWidth 1 (Time-stamp overflow flag)  
        .equ RTC_ISR_TAMP1F, 1 << 13   @ bitWidth 1 (Tamper detection flag)  
        .equ RTC_ISR_TAMP2F, 1 << 14   @ bitWidth 1 (RTC_TAMP2 detection flag)  
        .equ RTC_ISR_TAMP3F, 1 << 15   @ bitWidth 1 (RTC_TAMP3 detection flag)  
        .equ RTC_ISR_RECALPF, 1 << 16   @ bitWidth 1 (Recalibration pending Flag)  
 
    .equ RTC_PRER, RTC_BASE + 0x10 @ (prescaler register) 
        .equ RTC_PRER_PREDIV_A_Shift, 16   @ bitWidth 7 (Asynchronous prescaler factor)  
        .equ RTC_PRER_PREDIV_S_Shift, 0   @ bitWidth 15 (Synchronous prescaler factor)  
 
    .equ RTC_WUTR, RTC_BASE + 0x14 @ (wakeup timer register) 
        .equ RTC_WUTR_WUT_Shift, 0   @ bitWidth 16 (Wakeup auto-reload value bits)  
 
    .equ RTC_ALRMAR, RTC_BASE + 0x1C @ (alarm A register) 
        .equ RTC_ALRMAR_MSK4, 1 << 31   @ bitWidth 1 (Alarm A date mask)  
        .equ RTC_ALRMAR_WDSEL, 1 << 30   @ bitWidth 1 (Week day selection)  
        .equ RTC_ALRMAR_DT_Shift, 28   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_ALRMAR_DU_Shift, 24   @ bitWidth 4 (Date units or day in BCD format)  
        .equ RTC_ALRMAR_MSK3, 1 << 23   @ bitWidth 1 (Alarm A hours mask)  
        .equ RTC_ALRMAR_PM, 1 << 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_ALRMAR_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_ALRMAR_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_ALRMAR_MSK2, 1 << 15   @ bitWidth 1 (Alarm A minutes mask)  
        .equ RTC_ALRMAR_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_ALRMAR_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_ALRMAR_MSK1, 1 << 7   @ bitWidth 1 (Alarm A seconds mask)  
        .equ RTC_ALRMAR_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_ALRMAR_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_ALRMBR, RTC_BASE + 0x20 @ (alarm B register) 
        .equ RTC_ALRMBR_MSK4, 1 << 31   @ bitWidth 1 (Alarm B date mask)  
        .equ RTC_ALRMBR_WDSEL, 1 << 30   @ bitWidth 1 (Week day selection)  
        .equ RTC_ALRMBR_DT_Shift, 28   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_ALRMBR_DU_Shift, 24   @ bitWidth 4 (Date units or day in BCD format)  
        .equ RTC_ALRMBR_MSK3, 1 << 23   @ bitWidth 1 (Alarm B hours mask)  
        .equ RTC_ALRMBR_PM, 1 << 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_ALRMBR_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_ALRMBR_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_ALRMBR_MSK2, 1 << 15   @ bitWidth 1 (Alarm B minutes mask)  
        .equ RTC_ALRMBR_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_ALRMBR_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_ALRMBR_MSK1, 1 << 7   @ bitWidth 1 (Alarm B seconds mask)  
        .equ RTC_ALRMBR_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_ALRMBR_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_WPR, RTC_BASE + 0x24 @ (write protection register) 
        .equ RTC_WPR_KEY_Shift, 0   @ bitWidth 8 (Write protection key)  
 
    .equ RTC_SSR, RTC_BASE + 0x28 @ (sub second register) 
        .equ RTC_SSR_SS_Shift, 0   @ bitWidth 16 (Sub second value)  
 
    .equ RTC_SHIFTR, RTC_BASE + 0x2C @ (shift control register) 
        .equ RTC_SHIFTR_ADD1S, 1 << 31   @ bitWidth 1 (Add one second)  
        .equ RTC_SHIFTR_SUBFS_Shift, 0   @ bitWidth 15 (Subtract a fraction of a second)  
 
    .equ RTC_TSTR, RTC_BASE + 0x30 @ (time stamp time register) 
        .equ RTC_TSTR_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
        .equ RTC_TSTR_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_TSTR_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_TSTR_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_TSTR_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_TSTR_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_TSTR_PM, 1 << 22   @ bitWidth 1 (AM/PM notation)  
 
    .equ RTC_TSDR, RTC_BASE + 0x34 @ (time stamp date register) 
        .equ RTC_TSDR_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_TSDR_MT, 1 << 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_TSDR_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_TSDR_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_TSDR_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_TSSSR, RTC_BASE + 0x38 @ (timestamp sub second register) 
        .equ RTC_TSSSR_SS_Shift, 0   @ bitWidth 16 (Sub second value)  
 
    .equ RTC_CALR, RTC_BASE + 0x3C @ (calibration register) 
        .equ RTC_CALR_CALP, 1 << 15   @ bitWidth 1 (Increase frequency of RTC by 488.5 ppm)  
        .equ RTC_CALR_CALW8, 1 << 14   @ bitWidth 1 (Use an 8-second calibration cycle period)  
        .equ RTC_CALR_CALW16, 1 << 13   @ bitWidth 1 (Use a 16-second calibration cycle period)  
        .equ RTC_CALR_CALM_Shift, 0   @ bitWidth 9 (Calibration minus)  
 
    .equ RTC_TAMPCR, RTC_BASE + 0x40 @ (tamper configuration register) 
        .equ RTC_TAMPCR_TAMP1E, 1 << 0   @ bitWidth 1 (Tamper 1 detection enable)  
        .equ RTC_TAMPCR_TAMP1TRG, 1 << 1   @ bitWidth 1 (Active level for tamper 1)  
        .equ RTC_TAMPCR_TAMPIE, 1 << 2   @ bitWidth 1 (Tamper interrupt enable)  
        .equ RTC_TAMPCR_TAMP2E, 1 << 3   @ bitWidth 1 (Tamper 2 detection enable)  
        .equ RTC_TAMPCR_TAMP2TRG, 1 << 4   @ bitWidth 1 (Active level for tamper 2)  
        .equ RTC_TAMPCR_TAMP3E, 1 << 5   @ bitWidth 1 (Tamper 3 detection enable)  
        .equ RTC_TAMPCR_TAMP3TRG, 1 << 6   @ bitWidth 1 (Active level for tamper 3)  
        .equ RTC_TAMPCR_TAMPTS, 1 << 7   @ bitWidth 1 (Activate timestamp on tamper detection event)  
        .equ RTC_TAMPCR_TAMPFREQ_Shift, 8   @ bitWidth 3 (Tamper sampling frequency)  
        .equ RTC_TAMPCR_TAMPFLT_Shift, 11   @ bitWidth 2 (Tamper filter count)  
        .equ RTC_TAMPCR_TAMPPRCH_Shift, 13   @ bitWidth 2 (Tamper precharge duration)  
        .equ RTC_TAMPCR_TAMPPUDIS, 1 << 15   @ bitWidth 1 (TAMPER pull-up disable)  
        .equ RTC_TAMPCR_TAMP1IE, 1 << 16   @ bitWidth 1 (Tamper 1 interrupt enable)  
        .equ RTC_TAMPCR_TAMP1NOERASE, 1 << 17   @ bitWidth 1 (Tamper 1 no erase)  
        .equ RTC_TAMPCR_TAMP1MF, 1 << 18   @ bitWidth 1 (Tamper 1 mask flag)  
        .equ RTC_TAMPCR_TAMP2IE, 1 << 19   @ bitWidth 1 (Tamper 2 interrupt enable)  
        .equ RTC_TAMPCR_TAMP2NOERASE, 1 << 20   @ bitWidth 1 (Tamper 2 no erase)  
        .equ RTC_TAMPCR_TAMP2MF, 1 << 21   @ bitWidth 1 (Tamper 2 mask flag)  
        .equ RTC_TAMPCR_TAMP3IE, 1 << 22   @ bitWidth 1 (Tamper 3 interrupt enable)  
        .equ RTC_TAMPCR_TAMP3NOERASE, 1 << 23   @ bitWidth 1 (Tamper 3 no erase)  
        .equ RTC_TAMPCR_TAMP3MF, 1 << 24   @ bitWidth 1 (Tamper 3 mask flag)  
 
    .equ RTC_ALRMASSR, RTC_BASE + 0x44 @ (alarm A sub second register) 
        .equ RTC_ALRMASSR_MASKSS_Shift, 24   @ bitWidth 4 (Mask the most-significant bits starting at this bit)  
        .equ RTC_ALRMASSR_SS_Shift, 0   @ bitWidth 15 (Sub seconds value)  
 
    .equ RTC_ALRMBSSR, RTC_BASE + 0x48 @ (alarm B sub second register) 
        .equ RTC_ALRMBSSR_MASKSS_Shift, 24   @ bitWidth 4 (Mask the most-significant bits starting at this bit)  
        .equ RTC_ALRMBSSR_SS_Shift, 0   @ bitWidth 15 (Sub seconds value)  
 
    .equ RTC_OR, RTC_BASE + 0x4C @ (option register) 
        .equ RTC_OR_RTC_ALARM_TYPE, 1 << 0   @ bitWidth 1 (RTC_ALARM on PC13 output type)  
        .equ RTC_OR_RTC_OUT_RMP, 1 << 1   @ bitWidth 1 (RTC_OUT remap)  
 
    .equ RTC_BKP0R, RTC_BASE + 0x50 @ (backup register) 
        .equ RTC_BKP0R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP1R, RTC_BASE + 0x54 @ (backup register) 
        .equ RTC_BKP1R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP2R, RTC_BASE + 0x58 @ (backup register) 
        .equ RTC_BKP2R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP3R, RTC_BASE + 0x5C @ (backup register) 
        .equ RTC_BKP3R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP4R, RTC_BASE + 0x60 @ (backup register) 
        .equ RTC_BKP4R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP5R, RTC_BASE + 0x64 @ (backup register) 
        .equ RTC_BKP5R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP6R, RTC_BASE + 0x68 @ (backup register) 
        .equ RTC_BKP6R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP7R, RTC_BASE + 0x6C @ (backup register) 
        .equ RTC_BKP7R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP8R, RTC_BASE + 0x70 @ (backup register) 
        .equ RTC_BKP8R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP9R, RTC_BASE + 0x74 @ (backup register) 
        .equ RTC_BKP9R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP10R, RTC_BASE + 0x78 @ (backup register) 
        .equ RTC_BKP10R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP11R, RTC_BASE + 0x7C @ (backup register) 
        .equ RTC_BKP11R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP12R, RTC_BASE + 0x80 @ (backup register) 
        .equ RTC_BKP12R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP13R, RTC_BASE + 0x84 @ (backup register) 
        .equ RTC_BKP13R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP14R, RTC_BASE + 0x88 @ (backup register) 
        .equ RTC_BKP14R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP15R, RTC_BASE + 0x8C @ (backup register) 
        .equ RTC_BKP15R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP16R, RTC_BASE + 0x90 @ (backup register) 
        .equ RTC_BKP16R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP17R, RTC_BASE + 0x94 @ (backup register) 
        .equ RTC_BKP17R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP18R, RTC_BASE + 0x98 @ (backup register) 
        .equ RTC_BKP18R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP19R, RTC_BASE + 0x9C @ (backup register) 
        .equ RTC_BKP19R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP20R, RTC_BASE + 0xA0 @ (backup register) 
        .equ RTC_BKP20R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP21R, RTC_BASE + 0xA4 @ (backup register) 
        .equ RTC_BKP21R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP22R, RTC_BASE + 0xA8 @ (backup register) 
        .equ RTC_BKP22R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP23R, RTC_BASE + 0xAC @ (backup register) 
        .equ RTC_BKP23R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP24R, RTC_BASE + 0xB0 @ (backup register) 
        .equ RTC_BKP24R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP25R, RTC_BASE + 0xB4 @ (backup register) 
        .equ RTC_BKP25R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP26R, RTC_BASE + 0xB8 @ (backup register) 
        .equ RTC_BKP26R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP27R, RTC_BASE + 0xBC @ (backup register) 
        .equ RTC_BKP27R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP28R, RTC_BASE + 0xC0 @ (backup register) 
        .equ RTC_BKP28R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP29R, RTC_BASE + 0xC4 @ (backup register) 
        .equ RTC_BKP29R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP30R, RTC_BASE + 0xC8 @ (backup register) 
        .equ RTC_BKP30R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP31R, RTC_BASE + 0xCC @ (backup register) 
        .equ RTC_BKP31R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 

@=========================== USART6 ===========================@
.equ USART6_BASE, 0x40011400 @ (Universal synchronous asynchronous receiver transmitter) 
    .equ USART6_CR1, USART6_BASE + 0x0 @ (Control register 1) 
        .equ USART6_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ USART6_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt enable)  
        .equ USART6_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt enable)  
        .equ USART6_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion time)  
        .equ USART6_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ USART6_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ USART6_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ USART6_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ USART6_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion time)  
        .equ USART6_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ USART6_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ USART6_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ USART6_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ USART6_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART6_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt enable)  
        .equ USART6_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ USART6_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ USART6_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ USART6_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ USART6_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ USART6_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART6_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ USART6_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt enable)  
        .equ USART6_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART6_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART6_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART6_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ USART6_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ USART6_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ USART6_CR2, USART6_BASE + 0x4 @ (Control register 2) 
        .equ USART6_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ USART6_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ USART6_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ USART6_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ USART6_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ USART6_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ USART6_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ USART6_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ USART6_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level inversion)  
        .equ USART6_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level inversion)  
        .equ USART6_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ USART6_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART6_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART6_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ USART6_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ USART6_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ USART6_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART6_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt enable)  
        .equ USART6_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ USART6_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address Detection)  
 
    .equ USART6_CR3, USART6_BASE + 0x8 @ (Control register 3) 
        .equ USART6_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt enable)  
        .equ USART6_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag selection)  
        .equ USART6_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ USART6_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity selection)  
        .equ USART6_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ USART6_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception Error)  
        .equ USART6_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ USART6_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method enable)  
        .equ USART6_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART6_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ USART6_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ USART6_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART6_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART6_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART6_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART6_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART6_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ USART6_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ USART6_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART6_BRR, USART6_BASE + 0xC @ (Baud rate register) 
        .equ USART6_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ USART6_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ USART6_GTPR, USART6_BASE + 0x10 @ (Guard time and prescaler register) 
        .equ USART6_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART6_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ USART6_RTOR, USART6_BASE + 0x14 @ (Receiver timeout register) 
        .equ USART6_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ USART6_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ USART6_RQR, USART6_BASE + 0x18 @ (Request register) 
        .equ USART6_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush request)  
        .equ USART6_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ USART6_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ USART6_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ USART6_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ USART6_ISR, USART6_BASE + 0x1C @ (Interrupt & status register) 
        .equ USART6_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ USART6_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ USART6_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ USART6_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ USART6_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ USART6_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ USART6_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ USART6_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ USART6_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ USART6_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ USART6_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ USART6_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ USART6_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ USART6_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ USART6_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ USART6_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ USART6_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ USART6_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ USART6_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ USART6_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ USART6_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ USART6_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ USART6_ICR, USART6_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ USART6_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear flag)  
        .equ USART6_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ USART6_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ USART6_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear flag)  
        .equ USART6_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ USART6_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear flag)  
        .equ USART6_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear flag)  
        .equ USART6_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear flag)  
        .equ USART6_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ USART6_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ USART6_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ USART6_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ USART6_RDR, USART6_BASE + 0x24 @ (Receive data register) 
        .equ USART6_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ USART6_TDR, USART6_BASE + 0x28 @ (Transmit data register) 
        .equ USART6_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== USART1 ===========================@
.equ USART1_BASE, 0x40011000 @ (Universal synchronous asynchronous receiver transmitter) 
    .equ USART1_CR1, USART1_BASE + 0x0 @ (Control register 1) 
        .equ USART1_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ USART1_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt enable)  
        .equ USART1_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt enable)  
        .equ USART1_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion time)  
        .equ USART1_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ USART1_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ USART1_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ USART1_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ USART1_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion time)  
        .equ USART1_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ USART1_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ USART1_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ USART1_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ USART1_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART1_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt enable)  
        .equ USART1_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ USART1_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ USART1_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ USART1_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ USART1_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ USART1_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART1_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ USART1_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt enable)  
        .equ USART1_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART1_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART1_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART1_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ USART1_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ USART1_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ USART1_CR2, USART1_BASE + 0x4 @ (Control register 2) 
        .equ USART1_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ USART1_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ USART1_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ USART1_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ USART1_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ USART1_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ USART1_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ USART1_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ USART1_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level inversion)  
        .equ USART1_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level inversion)  
        .equ USART1_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ USART1_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART1_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART1_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ USART1_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ USART1_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ USART1_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART1_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt enable)  
        .equ USART1_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ USART1_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address Detection)  
 
    .equ USART1_CR3, USART1_BASE + 0x8 @ (Control register 3) 
        .equ USART1_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt enable)  
        .equ USART1_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag selection)  
        .equ USART1_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ USART1_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity selection)  
        .equ USART1_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ USART1_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception Error)  
        .equ USART1_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ USART1_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method enable)  
        .equ USART1_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART1_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ USART1_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ USART1_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART1_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART1_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART1_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART1_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART1_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ USART1_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ USART1_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART1_BRR, USART1_BASE + 0xC @ (Baud rate register) 
        .equ USART1_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ USART1_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ USART1_GTPR, USART1_BASE + 0x10 @ (Guard time and prescaler register) 
        .equ USART1_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART1_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ USART1_RTOR, USART1_BASE + 0x14 @ (Receiver timeout register) 
        .equ USART1_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ USART1_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ USART1_RQR, USART1_BASE + 0x18 @ (Request register) 
        .equ USART1_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush request)  
        .equ USART1_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ USART1_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ USART1_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ USART1_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ USART1_ISR, USART1_BASE + 0x1C @ (Interrupt & status register) 
        .equ USART1_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ USART1_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ USART1_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ USART1_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ USART1_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ USART1_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ USART1_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ USART1_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ USART1_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ USART1_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ USART1_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ USART1_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ USART1_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ USART1_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ USART1_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ USART1_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ USART1_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ USART1_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ USART1_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ USART1_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ USART1_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ USART1_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ USART1_ICR, USART1_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ USART1_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear flag)  
        .equ USART1_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ USART1_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ USART1_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear flag)  
        .equ USART1_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ USART1_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear flag)  
        .equ USART1_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear flag)  
        .equ USART1_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear flag)  
        .equ USART1_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ USART1_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ USART1_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ USART1_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ USART1_RDR, USART1_BASE + 0x24 @ (Receive data register) 
        .equ USART1_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ USART1_TDR, USART1_BASE + 0x28 @ (Transmit data register) 
        .equ USART1_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== USART3 ===========================@
.equ USART3_BASE, 0x40004800 @ (Universal synchronous asynchronous receiver transmitter) 
    .equ USART3_CR1, USART3_BASE + 0x0 @ (Control register 1) 
        .equ USART3_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ USART3_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt enable)  
        .equ USART3_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt enable)  
        .equ USART3_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion time)  
        .equ USART3_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ USART3_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ USART3_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ USART3_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ USART3_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion time)  
        .equ USART3_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ USART3_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ USART3_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ USART3_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ USART3_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART3_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt enable)  
        .equ USART3_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ USART3_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ USART3_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ USART3_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ USART3_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ USART3_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART3_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ USART3_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt enable)  
        .equ USART3_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART3_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART3_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART3_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ USART3_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ USART3_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ USART3_CR2, USART3_BASE + 0x4 @ (Control register 2) 
        .equ USART3_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ USART3_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ USART3_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ USART3_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ USART3_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ USART3_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ USART3_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ USART3_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ USART3_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level inversion)  
        .equ USART3_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level inversion)  
        .equ USART3_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ USART3_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART3_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART3_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ USART3_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ USART3_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ USART3_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART3_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt enable)  
        .equ USART3_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ USART3_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address Detection)  
 
    .equ USART3_CR3, USART3_BASE + 0x8 @ (Control register 3) 
        .equ USART3_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt enable)  
        .equ USART3_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag selection)  
        .equ USART3_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ USART3_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity selection)  
        .equ USART3_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ USART3_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception Error)  
        .equ USART3_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ USART3_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method enable)  
        .equ USART3_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART3_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ USART3_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ USART3_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART3_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART3_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART3_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART3_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART3_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ USART3_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ USART3_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART3_BRR, USART3_BASE + 0xC @ (Baud rate register) 
        .equ USART3_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ USART3_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ USART3_GTPR, USART3_BASE + 0x10 @ (Guard time and prescaler register) 
        .equ USART3_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART3_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ USART3_RTOR, USART3_BASE + 0x14 @ (Receiver timeout register) 
        .equ USART3_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ USART3_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ USART3_RQR, USART3_BASE + 0x18 @ (Request register) 
        .equ USART3_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush request)  
        .equ USART3_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ USART3_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ USART3_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ USART3_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ USART3_ISR, USART3_BASE + 0x1C @ (Interrupt & status register) 
        .equ USART3_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ USART3_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ USART3_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ USART3_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ USART3_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ USART3_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ USART3_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ USART3_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ USART3_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ USART3_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ USART3_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ USART3_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ USART3_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ USART3_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ USART3_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ USART3_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ USART3_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ USART3_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ USART3_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ USART3_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ USART3_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ USART3_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ USART3_ICR, USART3_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ USART3_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear flag)  
        .equ USART3_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ USART3_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ USART3_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear flag)  
        .equ USART3_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ USART3_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear flag)  
        .equ USART3_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear flag)  
        .equ USART3_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear flag)  
        .equ USART3_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ USART3_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ USART3_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ USART3_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ USART3_RDR, USART3_BASE + 0x24 @ (Receive data register) 
        .equ USART3_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ USART3_TDR, USART3_BASE + 0x28 @ (Transmit data register) 
        .equ USART3_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== USART2 ===========================@
.equ USART2_BASE, 0x40004400 @ (Universal synchronous asynchronous receiver transmitter) 
    .equ USART2_CR1, USART2_BASE + 0x0 @ (Control register 1) 
        .equ USART2_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ USART2_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt enable)  
        .equ USART2_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt enable)  
        .equ USART2_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion time)  
        .equ USART2_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ USART2_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ USART2_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ USART2_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ USART2_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion time)  
        .equ USART2_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ USART2_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ USART2_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ USART2_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ USART2_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART2_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt enable)  
        .equ USART2_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ USART2_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ USART2_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ USART2_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ USART2_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ USART2_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART2_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ USART2_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt enable)  
        .equ USART2_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART2_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART2_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART2_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ USART2_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ USART2_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ USART2_CR2, USART2_BASE + 0x4 @ (Control register 2) 
        .equ USART2_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ USART2_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ USART2_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ USART2_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ USART2_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ USART2_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ USART2_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ USART2_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ USART2_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level inversion)  
        .equ USART2_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level inversion)  
        .equ USART2_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ USART2_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART2_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART2_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ USART2_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ USART2_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ USART2_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART2_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt enable)  
        .equ USART2_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ USART2_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address Detection)  
 
    .equ USART2_CR3, USART2_BASE + 0x8 @ (Control register 3) 
        .equ USART2_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt enable)  
        .equ USART2_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag selection)  
        .equ USART2_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ USART2_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity selection)  
        .equ USART2_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ USART2_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception Error)  
        .equ USART2_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ USART2_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method enable)  
        .equ USART2_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART2_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ USART2_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ USART2_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART2_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART2_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART2_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART2_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART2_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ USART2_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ USART2_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART2_BRR, USART2_BASE + 0xC @ (Baud rate register) 
        .equ USART2_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ USART2_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ USART2_GTPR, USART2_BASE + 0x10 @ (Guard time and prescaler register) 
        .equ USART2_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART2_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ USART2_RTOR, USART2_BASE + 0x14 @ (Receiver timeout register) 
        .equ USART2_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ USART2_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ USART2_RQR, USART2_BASE + 0x18 @ (Request register) 
        .equ USART2_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush request)  
        .equ USART2_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ USART2_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ USART2_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ USART2_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ USART2_ISR, USART2_BASE + 0x1C @ (Interrupt & status register) 
        .equ USART2_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ USART2_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ USART2_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ USART2_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ USART2_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ USART2_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ USART2_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ USART2_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ USART2_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ USART2_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ USART2_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ USART2_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ USART2_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ USART2_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ USART2_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ USART2_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ USART2_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ USART2_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ USART2_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ USART2_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ USART2_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ USART2_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ USART2_ICR, USART2_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ USART2_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear flag)  
        .equ USART2_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ USART2_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ USART2_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear flag)  
        .equ USART2_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ USART2_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear flag)  
        .equ USART2_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear flag)  
        .equ USART2_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear flag)  
        .equ USART2_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ USART2_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ USART2_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ USART2_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ USART2_RDR, USART2_BASE + 0x24 @ (Receive data register) 
        .equ USART2_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ USART2_TDR, USART2_BASE + 0x28 @ (Transmit data register) 
        .equ USART2_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== UART5 ===========================@
.equ UART5_BASE, 0x40005000 @ (Universal synchronous asynchronous receiver transmitter) 
    .equ UART5_CR1, UART5_BASE + 0x0 @ (Control register 1) 
        .equ UART5_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ UART5_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt enable)  
        .equ UART5_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt enable)  
        .equ UART5_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion time)  
        .equ UART5_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ UART5_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ UART5_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ UART5_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ UART5_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion time)  
        .equ UART5_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ UART5_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ UART5_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ UART5_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ UART5_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ UART5_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt enable)  
        .equ UART5_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ UART5_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ UART5_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ UART5_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ UART5_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ UART5_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ UART5_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ UART5_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt enable)  
        .equ UART5_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ UART5_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ UART5_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ UART5_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ UART5_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ UART5_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ UART5_CR2, UART5_BASE + 0x4 @ (Control register 2) 
        .equ UART5_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ UART5_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ UART5_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ UART5_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ UART5_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ UART5_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ UART5_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ UART5_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ UART5_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level inversion)  
        .equ UART5_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level inversion)  
        .equ UART5_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ UART5_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ UART5_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ UART5_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ UART5_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ UART5_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ UART5_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ UART5_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt enable)  
        .equ UART5_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ UART5_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address Detection)  
 
    .equ UART5_CR3, UART5_BASE + 0x8 @ (Control register 3) 
        .equ UART5_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt enable)  
        .equ UART5_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag selection)  
        .equ UART5_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ UART5_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity selection)  
        .equ UART5_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ UART5_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception Error)  
        .equ UART5_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ UART5_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method enable)  
        .equ UART5_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ UART5_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ UART5_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ UART5_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ UART5_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ UART5_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ UART5_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ UART5_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ UART5_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ UART5_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ UART5_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ UART5_BRR, UART5_BASE + 0xC @ (Baud rate register) 
        .equ UART5_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ UART5_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ UART5_GTPR, UART5_BASE + 0x10 @ (Guard time and prescaler register) 
        .equ UART5_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ UART5_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ UART5_RTOR, UART5_BASE + 0x14 @ (Receiver timeout register) 
        .equ UART5_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ UART5_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ UART5_RQR, UART5_BASE + 0x18 @ (Request register) 
        .equ UART5_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush request)  
        .equ UART5_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ UART5_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ UART5_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ UART5_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ UART5_ISR, UART5_BASE + 0x1C @ (Interrupt & status register) 
        .equ UART5_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ UART5_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ UART5_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ UART5_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ UART5_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ UART5_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ UART5_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ UART5_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ UART5_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ UART5_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ UART5_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ UART5_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ UART5_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ UART5_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ UART5_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ UART5_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ UART5_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ UART5_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ UART5_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ UART5_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ UART5_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ UART5_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ UART5_ICR, UART5_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ UART5_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear flag)  
        .equ UART5_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ UART5_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ UART5_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear flag)  
        .equ UART5_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ UART5_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear flag)  
        .equ UART5_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear flag)  
        .equ UART5_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear flag)  
        .equ UART5_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ UART5_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ UART5_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ UART5_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ UART5_RDR, UART5_BASE + 0x24 @ (Receive data register) 
        .equ UART5_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ UART5_TDR, UART5_BASE + 0x28 @ (Transmit data register) 
        .equ UART5_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== UART4 ===========================@
.equ UART4_BASE, 0x40004C00 @ (Universal synchronous asynchronous receiver transmitter) 
    .equ UART4_CR1, UART4_BASE + 0x0 @ (Control register 1) 
        .equ UART4_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ UART4_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt enable)  
        .equ UART4_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt enable)  
        .equ UART4_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion time)  
        .equ UART4_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ UART4_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ UART4_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ UART4_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ UART4_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion time)  
        .equ UART4_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ UART4_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ UART4_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ UART4_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ UART4_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ UART4_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt enable)  
        .equ UART4_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ UART4_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ UART4_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ UART4_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ UART4_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ UART4_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ UART4_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ UART4_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt enable)  
        .equ UART4_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ UART4_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ UART4_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ UART4_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ UART4_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ UART4_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ UART4_CR2, UART4_BASE + 0x4 @ (Control register 2) 
        .equ UART4_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ UART4_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ UART4_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ UART4_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ UART4_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ UART4_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ UART4_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ UART4_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ UART4_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level inversion)  
        .equ UART4_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level inversion)  
        .equ UART4_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ UART4_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ UART4_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ UART4_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ UART4_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ UART4_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ UART4_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ UART4_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt enable)  
        .equ UART4_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ UART4_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address Detection)  
 
    .equ UART4_CR3, UART4_BASE + 0x8 @ (Control register 3) 
        .equ UART4_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt enable)  
        .equ UART4_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag selection)  
        .equ UART4_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ UART4_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity selection)  
        .equ UART4_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ UART4_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception Error)  
        .equ UART4_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ UART4_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method enable)  
        .equ UART4_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ UART4_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ UART4_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ UART4_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ UART4_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ UART4_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ UART4_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ UART4_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ UART4_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ UART4_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ UART4_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ UART4_BRR, UART4_BASE + 0xC @ (Baud rate register) 
        .equ UART4_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ UART4_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ UART4_GTPR, UART4_BASE + 0x10 @ (Guard time and prescaler register) 
        .equ UART4_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ UART4_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ UART4_RTOR, UART4_BASE + 0x14 @ (Receiver timeout register) 
        .equ UART4_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ UART4_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ UART4_RQR, UART4_BASE + 0x18 @ (Request register) 
        .equ UART4_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush request)  
        .equ UART4_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ UART4_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ UART4_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ UART4_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ UART4_ISR, UART4_BASE + 0x1C @ (Interrupt & status register) 
        .equ UART4_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ UART4_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ UART4_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ UART4_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ UART4_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ UART4_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ UART4_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ UART4_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ UART4_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ UART4_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ UART4_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ UART4_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ UART4_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ UART4_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ UART4_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ UART4_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ UART4_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ UART4_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ UART4_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ UART4_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ UART4_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ UART4_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ UART4_ICR, UART4_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ UART4_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear flag)  
        .equ UART4_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ UART4_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ UART4_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear flag)  
        .equ UART4_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ UART4_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear flag)  
        .equ UART4_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear flag)  
        .equ UART4_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear flag)  
        .equ UART4_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ UART4_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ UART4_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ UART4_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ UART4_RDR, UART4_BASE + 0x24 @ (Receive data register) 
        .equ UART4_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ UART4_TDR, UART4_BASE + 0x28 @ (Transmit data register) 
        .equ UART4_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== UART8 ===========================@
.equ UART8_BASE, 0x40007C00 @ (Universal synchronous asynchronous receiver transmitter) 
    .equ UART8_CR1, UART8_BASE + 0x0 @ (Control register 1) 
        .equ UART8_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ UART8_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt enable)  
        .equ UART8_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt enable)  
        .equ UART8_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion time)  
        .equ UART8_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ UART8_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ UART8_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ UART8_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ UART8_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion time)  
        .equ UART8_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ UART8_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ UART8_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ UART8_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ UART8_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ UART8_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt enable)  
        .equ UART8_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ UART8_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ UART8_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ UART8_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ UART8_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ UART8_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ UART8_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ UART8_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt enable)  
        .equ UART8_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ UART8_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ UART8_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ UART8_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ UART8_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ UART8_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ UART8_CR2, UART8_BASE + 0x4 @ (Control register 2) 
        .equ UART8_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ UART8_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ UART8_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ UART8_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ UART8_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ UART8_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ UART8_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ UART8_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ UART8_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level inversion)  
        .equ UART8_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level inversion)  
        .equ UART8_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ UART8_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ UART8_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ UART8_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ UART8_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ UART8_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ UART8_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ UART8_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt enable)  
        .equ UART8_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ UART8_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address Detection)  
 
    .equ UART8_CR3, UART8_BASE + 0x8 @ (Control register 3) 
        .equ UART8_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt enable)  
        .equ UART8_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag selection)  
        .equ UART8_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ UART8_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity selection)  
        .equ UART8_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ UART8_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception Error)  
        .equ UART8_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ UART8_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method enable)  
        .equ UART8_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ UART8_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ UART8_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ UART8_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ UART8_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ UART8_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ UART8_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ UART8_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ UART8_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ UART8_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ UART8_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ UART8_BRR, UART8_BASE + 0xC @ (Baud rate register) 
        .equ UART8_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ UART8_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ UART8_GTPR, UART8_BASE + 0x10 @ (Guard time and prescaler register) 
        .equ UART8_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ UART8_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ UART8_RTOR, UART8_BASE + 0x14 @ (Receiver timeout register) 
        .equ UART8_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ UART8_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ UART8_RQR, UART8_BASE + 0x18 @ (Request register) 
        .equ UART8_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush request)  
        .equ UART8_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ UART8_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ UART8_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ UART8_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ UART8_ISR, UART8_BASE + 0x1C @ (Interrupt & status register) 
        .equ UART8_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ UART8_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ UART8_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ UART8_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ UART8_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ UART8_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ UART8_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ UART8_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ UART8_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ UART8_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ UART8_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ UART8_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ UART8_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ UART8_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ UART8_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ UART8_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ UART8_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ UART8_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ UART8_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ UART8_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ UART8_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ UART8_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ UART8_ICR, UART8_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ UART8_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear flag)  
        .equ UART8_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ UART8_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ UART8_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear flag)  
        .equ UART8_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ UART8_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear flag)  
        .equ UART8_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear flag)  
        .equ UART8_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear flag)  
        .equ UART8_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ UART8_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ UART8_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ UART8_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ UART8_RDR, UART8_BASE + 0x24 @ (Receive data register) 
        .equ UART8_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ UART8_TDR, UART8_BASE + 0x28 @ (Transmit data register) 
        .equ UART8_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== UART7 ===========================@
.equ UART7_BASE, 0x40007800 @ (Universal synchronous asynchronous receiver transmitter) 
    .equ UART7_CR1, UART7_BASE + 0x0 @ (Control register 1) 
        .equ UART7_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ UART7_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt enable)  
        .equ UART7_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt enable)  
        .equ UART7_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion time)  
        .equ UART7_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ UART7_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ UART7_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ UART7_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ UART7_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion time)  
        .equ UART7_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ UART7_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ UART7_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ UART7_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ UART7_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ UART7_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt enable)  
        .equ UART7_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ UART7_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ UART7_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ UART7_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ UART7_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ UART7_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ UART7_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ UART7_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt enable)  
        .equ UART7_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ UART7_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ UART7_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ UART7_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ UART7_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ UART7_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ UART7_CR2, UART7_BASE + 0x4 @ (Control register 2) 
        .equ UART7_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ UART7_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ UART7_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ UART7_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ UART7_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ UART7_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ UART7_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ UART7_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ UART7_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level inversion)  
        .equ UART7_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level inversion)  
        .equ UART7_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ UART7_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ UART7_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ UART7_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ UART7_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ UART7_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ UART7_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ UART7_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt enable)  
        .equ UART7_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ UART7_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address Detection)  
 
    .equ UART7_CR3, UART7_BASE + 0x8 @ (Control register 3) 
        .equ UART7_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt enable)  
        .equ UART7_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag selection)  
        .equ UART7_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ UART7_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity selection)  
        .equ UART7_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ UART7_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception Error)  
        .equ UART7_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ UART7_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method enable)  
        .equ UART7_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ UART7_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ UART7_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ UART7_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ UART7_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ UART7_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ UART7_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ UART7_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ UART7_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ UART7_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ UART7_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ UART7_BRR, UART7_BASE + 0xC @ (Baud rate register) 
        .equ UART7_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ UART7_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ UART7_GTPR, UART7_BASE + 0x10 @ (Guard time and prescaler register) 
        .equ UART7_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ UART7_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ UART7_RTOR, UART7_BASE + 0x14 @ (Receiver timeout register) 
        .equ UART7_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ UART7_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ UART7_RQR, UART7_BASE + 0x18 @ (Request register) 
        .equ UART7_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush request)  
        .equ UART7_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ UART7_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ UART7_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ UART7_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ UART7_ISR, UART7_BASE + 0x1C @ (Interrupt & status register) 
        .equ UART7_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ UART7_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ UART7_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ UART7_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ UART7_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ UART7_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ UART7_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ UART7_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ UART7_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ UART7_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ UART7_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ UART7_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ UART7_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ UART7_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ UART7_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ UART7_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ UART7_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ UART7_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ UART7_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ UART7_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ UART7_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ UART7_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ UART7_ICR, UART7_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ UART7_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear flag)  
        .equ UART7_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ UART7_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ UART7_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear flag)  
        .equ UART7_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ UART7_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear flag)  
        .equ UART7_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear flag)  
        .equ UART7_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear flag)  
        .equ UART7_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ UART7_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ UART7_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ UART7_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ UART7_RDR, UART7_BASE + 0x24 @ (Receive data register) 
        .equ UART7_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ UART7_TDR, UART7_BASE + 0x28 @ (Transmit data register) 
        .equ UART7_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== OTG_FS_GLOBAL ===========================@
.equ OTG_FS_GLOBAL_BASE, 0x50000000 @ (USB on the go full speed) 
    .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL, OTG_FS_GLOBAL_BASE + 0x0 @ (OTG_FS control and status register OTG_FS_GOTGCTL) 
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQSCS, 1 << 0   @ bitWidth 1 (Session request success)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQ, 1 << 1   @ bitWidth 1 (Session request)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HNGSCS, 1 << 8   @ bitWidth 1 (Host negotiation success)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HNPRQ, 1 << 9   @ bitWidth 1 (HNP request)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HSHNPEN, 1 << 10   @ bitWidth 1 (Host set HNP enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_DHNPEN, 1 << 11   @ bitWidth 1 (Device HNP enabled)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_CIDSTS, 1 << 16   @ bitWidth 1 (Connector ID status)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_DBCT, 1 << 17   @ bitWidth 1 (Long/short debounce time)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_ASVLD, 1 << 18   @ bitWidth 1 (A-session valid)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BSVLD, 1 << 19   @ bitWidth 1 (B-session valid)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_VBVALOEN, 1 << 2   @ bitWidth 1 (VBUS valid override enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_VBVALOVAL, 1 << 3   @ bitWidth 1 (VBUS valid override value)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_AVALOEN, 1 << 4   @ bitWidth 1 (A-peripheral session valid override enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_AVALOVAL, 1 << 5   @ bitWidth 1 (A-peripheral session valid override value)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BVALOEN, 1 << 6   @ bitWidth 1 (B-peripheral session valid override enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BVALOVAL, 1 << 7   @ bitWidth 1 (B-peripheral session valid override value)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_EHEN, 1 << 12   @ bitWidth 1 (Embedded host enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_OTGVER, 1 << 20   @ bitWidth 1 (OTG version)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GOTGINT, OTG_FS_GLOBAL_BASE + 0x4 @ (OTG_FS interrupt register OTG_FS_GOTGINT) 
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGINT_SEDET, 1 << 2   @ bitWidth 1 (Session end detected)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGINT_SRSSCHG, 1 << 8   @ bitWidth 1 (Session request success status change)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGINT_HNSSCHG, 1 << 9   @ bitWidth 1 (Host negotiation success status change)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGINT_HNGDET, 1 << 17   @ bitWidth 1 (Host negotiation detected)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGINT_ADTOCHG, 1 << 18   @ bitWidth 1 (A-device timeout change)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGINT_DBCDNE, 1 << 19   @ bitWidth 1 (Debounce done)  
        .equ OTG_FS_GLOBAL_OTG_FS_GOTGINT_IDCHNG, 1 << 20   @ bitWidth 1 (ID input pin changed)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GAHBCFG, OTG_FS_GLOBAL_BASE + 0x8 @ (OTG_FS AHB configuration register OTG_FS_GAHBCFG) 
        .equ OTG_FS_GLOBAL_OTG_FS_GAHBCFG_GINT, 1 << 0   @ bitWidth 1 (Global interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GAHBCFG_TXFELVL, 1 << 7   @ bitWidth 1 (TxFIFO empty level)  
        .equ OTG_FS_GLOBAL_OTG_FS_GAHBCFG_PTXFELVL, 1 << 8   @ bitWidth 1 (Periodic TxFIFO empty level)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GUSBCFG, OTG_FS_GLOBAL_BASE + 0xC @ (OTG_FS USB configuration register OTG_FS_GUSBCFG) 
        .equ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_TOCAL_Shift, 0   @ bitWidth 3 (FS timeout calibration)  
        .equ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_PHYSEL, 1 << 6   @ bitWidth 1 (Full Speed serial transceiver select)  
        .equ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_SRPCAP, 1 << 8   @ bitWidth 1 (SRP-capable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_HNPCAP, 1 << 9   @ bitWidth 1 (HNP-capable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_TRDT_Shift, 10   @ bitWidth 4 (USB turnaround time)  
        .equ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_FHMOD, 1 << 29   @ bitWidth 1 (Force host mode)  
        .equ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_FDMOD, 1 << 30   @ bitWidth 1 (Force device mode)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GRSTCTL, OTG_FS_GLOBAL_BASE + 0x10 @ (OTG_FS reset register OTG_FS_GRSTCTL) 
        .equ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_CSRST, 1 << 0   @ bitWidth 1 (Core soft reset)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_HSRST, 1 << 1   @ bitWidth 1 (HCLK soft reset)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_FCRST, 1 << 2   @ bitWidth 1 (Host frame counter reset)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_RXFFLSH, 1 << 4   @ bitWidth 1 (RxFIFO flush)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_TXFFLSH, 1 << 5   @ bitWidth 1 (TxFIFO flush)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_TXFNUM_Shift, 6   @ bitWidth 5 (TxFIFO number)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_AHBIDL, 1 << 31   @ bitWidth 1 (AHB master idle)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS, OTG_FS_GLOBAL_BASE + 0x14 @ (OTG_FS core interrupt register OTG_FS_GINTSTS) 
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_CMOD, 1 << 0   @ bitWidth 1 (Current mode of operation)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_MMIS, 1 << 1   @ bitWidth 1 (Mode mismatch interrupt)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_OTGINT, 1 << 2   @ bitWidth 1 (OTG interrupt)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_SOF, 1 << 3   @ bitWidth 1 (Start of frame)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_RXFLVL, 1 << 4   @ bitWidth 1 (RxFIFO non-empty)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_NPTXFE, 1 << 5   @ bitWidth 1 (Non-periodic TxFIFO empty)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_GINAKEFF, 1 << 6   @ bitWidth 1 (Global IN non-periodic NAK effective)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_GOUTNAKEFF, 1 << 7   @ bitWidth 1 (Global OUT NAK effective)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_ESUSP, 1 << 10   @ bitWidth 1 (Early suspend)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_USBSUSP, 1 << 11   @ bitWidth 1 (USB suspend)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_USBRST, 1 << 12   @ bitWidth 1 (USB reset)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_ENUMDNE, 1 << 13   @ bitWidth 1 (Enumeration done)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_ISOODRP, 1 << 14   @ bitWidth 1 (Isochronous OUT packet dropped interrupt)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_EOPF, 1 << 15   @ bitWidth 1 (End of periodic frame interrupt)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_IEPINT, 1 << 18   @ bitWidth 1 (IN endpoint interrupt)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_OEPINT, 1 << 19   @ bitWidth 1 (OUT endpoint interrupt)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_IISOIXFR, 1 << 20   @ bitWidth 1 (Incomplete isochronous IN transfer)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_IPXFR_INCOMPISOOUT, 1 << 21   @ bitWidth 1 (Incomplete periodic transferHost mode/Incomplete isochronous OUT transferDevice mode)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_HPRTINT, 1 << 24   @ bitWidth 1 (Host port interrupt)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_HCINT, 1 << 25   @ bitWidth 1 (Host channels interrupt)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_PTXFE, 1 << 26   @ bitWidth 1 (Periodic TxFIFO empty)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_CIDSCHG, 1 << 28   @ bitWidth 1 (Connector ID status change)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_DISCINT, 1 << 29   @ bitWidth 1 (Disconnect detected interrupt)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_SRQINT, 1 << 30   @ bitWidth 1 (Session request/new session detected interrupt)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_WKUPINT, 1 << 31   @ bitWidth 1 (Resume/remote wakeup detected interrupt)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTSTS_RSTDET, 1 << 23   @ bitWidth 1 (Reset detected interrupt)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK, OTG_FS_GLOBAL_BASE + 0x18 @ (OTG_FS interrupt mask register OTG_FS_GINTMSK) 
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_MMISM, 1 << 1   @ bitWidth 1 (Mode mismatch interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_OTGINT, 1 << 2   @ bitWidth 1 (OTG interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_SOFM, 1 << 3   @ bitWidth 1 (Start of frame mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_RXFLVLM, 1 << 4   @ bitWidth 1 (Receive FIFO non-empty mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_NPTXFEM, 1 << 5   @ bitWidth 1 (Non-periodic TxFIFO empty mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_GINAKEFFM, 1 << 6   @ bitWidth 1 (Global non-periodic IN NAK effective mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_GONAKEFFM, 1 << 7   @ bitWidth 1 (Global OUT NAK effective mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_ESUSPM, 1 << 10   @ bitWidth 1 (Early suspend mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_USBSUSPM, 1 << 11   @ bitWidth 1 (USB suspend mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_USBRST, 1 << 12   @ bitWidth 1 (USB reset mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_ENUMDNEM, 1 << 13   @ bitWidth 1 (Enumeration done mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_ISOODRPM, 1 << 14   @ bitWidth 1 (Isochronous OUT packet dropped interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_EOPFM, 1 << 15   @ bitWidth 1 (End of periodic frame interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_IEPINT, 1 << 18   @ bitWidth 1 (IN endpoints interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_OEPINT, 1 << 19   @ bitWidth 1 (OUT endpoints interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_IISOIXFRM, 1 << 20   @ bitWidth 1 (Incomplete isochronous IN transfer mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_IPXFRM_IISOOXFRM, 1 << 21   @ bitWidth 1 (Incomplete periodic transfer maskHost mode/Incomplete isochronous OUT transfer maskDevice mode)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_PRTIM, 1 << 24   @ bitWidth 1 (Host port interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_HCIM, 1 << 25   @ bitWidth 1 (Host channels interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_PTXFEM, 1 << 26   @ bitWidth 1 (Periodic TxFIFO empty mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_CIDSCHGM, 1 << 28   @ bitWidth 1 (Connector ID status change mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_DISCINT, 1 << 29   @ bitWidth 1 (Disconnect detected interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_SRQIM, 1 << 30   @ bitWidth 1 (Session request/new session detected interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_WUIM, 1 << 31   @ bitWidth 1 (Resume/remote wakeup detected interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_RSTDETM, 1 << 23   @ bitWidth 1 (Reset detected interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GINTMSK_LPMIN, 1 << 27   @ bitWidth 1 (LPM interrupt mask)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device, OTG_FS_GLOBAL_BASE + 0x1C @ (OTG_FS Receive status debug readDevice mode) 
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_EPNUM_Shift, 0   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_FRMNUM_Shift, 21   @ bitWidth 4 (Frame number)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host, OTG_FS_GLOBAL_BASE + 0x1C @ (OTG_FS Receive status debug readHost mode) 
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_CHNUM_Shift, 0   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GRXFSIZ, OTG_FS_GLOBAL_BASE + 0x24 @ (OTG_FS Receive FIFO size register OTG_FS_GRXFSIZ) 
        .equ OTG_FS_GLOBAL_OTG_FS_GRXFSIZ_RXFD_Shift, 0   @ bitWidth 16 (RxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device, OTG_FS_GLOBAL_BASE + 0x28 @ (OTG_FS Endpoint 0 Transmit FIFO size) 
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device_TX0FSA_Shift, 0   @ bitWidth 16 (Endpoint 0 transmit RAM start address)  
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device_TX0FD_Shift, 16   @ bitWidth 16 (Endpoint 0 TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host, OTG_FS_GLOBAL_BASE + 0x28 @ (OTG_FS Host non-periodic transmit FIFO size register) 
        .equ OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host_NPTXFSA_Shift, 0   @ bitWidth 16 (Non-periodic transmit RAM start address)  
        .equ OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host_NPTXFD_Shift, 16   @ bitWidth 16 (Non-periodic TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_HNPTXSTS, OTG_FS_GLOBAL_BASE + 0x2C @ (OTG_FS non-periodic transmit FIFO/queue status register OTG_FS_GNPTXSTS) 
        .equ OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTXFSAV_Shift, 0   @ bitWidth 16 (Non-periodic TxFIFO space available)  
        .equ OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTQXSAV_Shift, 16   @ bitWidth 8 (Non-periodic transmit request queue space available)  
        .equ OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTXQTOP_Shift, 24   @ bitWidth 7 (Top of the non-periodic transmit request queue)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GCCFG, OTG_FS_GLOBAL_BASE + 0x38 @ (OTG_FS general core configuration register OTG_FS_GCCFG) 
        .equ OTG_FS_GLOBAL_OTG_FS_GCCFG_PWRDWN, 1 << 16   @ bitWidth 1 (Power down)  
        .equ OTG_FS_GLOBAL_OTG_FS_GCCFG_BCDEN, 1 << 17   @ bitWidth 1 (Battery charging detector BCD enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GCCFG_DCDEN, 1 << 18   @ bitWidth 1 (Data contact detection DCD mode enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GCCFG_PDEN, 1 << 19   @ bitWidth 1 (Primary detection PD mode enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GCCFG_SDEN, 1 << 20   @ bitWidth 1 (Secondary detection SD mode enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GCCFG_VBDEN, 1 << 21   @ bitWidth 1 (USB VBUS detection enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GCCFG_DCDET, 1 << 0   @ bitWidth 1 (Data contact detection DCD status)  
        .equ OTG_FS_GLOBAL_OTG_FS_GCCFG_PDET, 1 << 1   @ bitWidth 1 (Primary detection PD status)  
        .equ OTG_FS_GLOBAL_OTG_FS_GCCFG_SDET, 1 << 2   @ bitWidth 1 (Secondary detection SD status)  
        .equ OTG_FS_GLOBAL_OTG_FS_GCCFG_PS2DET, 1 << 3   @ bitWidth 1 (DM pull-up detection status)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_CID, OTG_FS_GLOBAL_BASE + 0x3C @ (core ID register) 
        .equ OTG_FS_GLOBAL_OTG_FS_CID_PRODUCT_ID_Shift, 0   @ bitWidth 32 (Product ID field)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ, OTG_FS_GLOBAL_BASE + 0x100 @ (OTG_FS Host periodic transmit FIFO size register OTG_FS_HPTXFSIZ) 
        .equ OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ_PTXSA_Shift, 0   @ bitWidth 16 (Host periodic TxFIFO start address)  
        .equ OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ_PTXFSIZ_Shift, 16   @ bitWidth 16 (Host periodic TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF1, OTG_FS_GLOBAL_BASE + 0x104 @ (OTG_FS device IN endpoint transmit FIFO size register OTG_FS_DIEPTXF1) 
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF1_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFO2 transmit RAM start address)  
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF1_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF2, OTG_FS_GLOBAL_BASE + 0x108 @ (OTG_FS device IN endpoint transmit FIFO size register OTG_FS_DIEPTXF2) 
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF2_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFO3 transmit RAM start address)  
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF2_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF3, OTG_FS_GLOBAL_BASE + 0x10C @ (OTG_FS device IN endpoint transmit FIFO size register OTG_FS_DIEPTXF3) 
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF3_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFO4 transmit RAM start address)  
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF3_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device, OTG_FS_GLOBAL_BASE + 0x20 @ (OTG status read and pop register Device mode) 
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_EPNUM_Shift, 0   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_FRMNUM_Shift, 21   @ bitWidth 4 (Frame number)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host, OTG_FS_GLOBAL_BASE + 0x20 @ (OTG status read and pop register Host mode) 
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_CHNUM_Shift, 0   @ bitWidth 4 (Channel number)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GI2CCTL, OTG_FS_GLOBAL_BASE + 0x30 @ (OTG I2C access register) 
        .equ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_RWDATA_Shift, 0   @ bitWidth 8 (I2C Read/Write Data)  
        .equ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_REGADDR_Shift, 8   @ bitWidth 8 (I2C Register Address)  
        .equ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_ADDR_Shift, 16   @ bitWidth 7 (I2C Address)  
        .equ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CEN, 1 << 23   @ bitWidth 1 (I2C Enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_ACK, 1 << 24   @ bitWidth 1 (I2C ACK)  
        .equ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CDEVADR_Shift, 26   @ bitWidth 2 (I2C Device Address)  
        .equ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CDATSE0, 1 << 28   @ bitWidth 1 (I2C DatSe0 USB mode)  
        .equ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_RW, 1 << 30   @ bitWidth 1 (Read/Write Indicator)  
        .equ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_BSYDNE, 1 << 31   @ bitWidth 1 (I2C Busy/Done)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GPWRDN, OTG_FS_GLOBAL_BASE + 0x58 @ (OTG power down register) 
        .equ OTG_FS_GLOBAL_OTG_FS_GPWRDN_ADPMEN, 1 << 0   @ bitWidth 1 (ADP module enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GPWRDN_ADPIF, 1 << 23   @ bitWidth 1 (ADP interrupt flag)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL, OTG_FS_GLOBAL_BASE + 0x60 @ (OTG ADP timer, control and status register) 
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBDSCHG_Shift, 0   @ bitWidth 2 (Probe discharge)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBDELTA_Shift, 2   @ bitWidth 2 (Probe delta)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBPER_Shift, 4   @ bitWidth 2 (Probe period)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_RTIM_Shift, 6   @ bitWidth 11 (Ramp time)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ENAPRB, 1 << 17   @ bitWidth 1 (Enable probe)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ENASNS, 1 << 18   @ bitWidth 1 (Enable sense)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPRST, 1 << 19   @ bitWidth 1 (ADP reset)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPEN, 1 << 20   @ bitWidth 1 (ADP enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPPRBIF, 1 << 21   @ bitWidth 1 (ADP probe interrupt flag)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPSNSIF, 1 << 22   @ bitWidth 1 (ADP sense interrupt flag)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPTOIF, 1 << 23   @ bitWidth 1 (ADP timeout interrupt flag)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPPRBIM, 1 << 24   @ bitWidth 1 (ADP probe interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPSNSIM, 1 << 25   @ bitWidth 1 (ADP sense interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPTOIM, 1 << 26   @ bitWidth 1 (ADP timeout interrupt mask)  
        .equ OTG_FS_GLOBAL_OTG_FS_GADPCTL_AR_Shift, 27   @ bitWidth 2 (Access request)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF4, OTG_FS_GLOBAL_BASE + 0x110 @ (OTG_FS device IN endpoint transmit FIFO size register OTG_FS_DIEPTXF4) 
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF4_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start address)  
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF4_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint Tx FIFO depth)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF5, OTG_FS_GLOBAL_BASE + 0x114 @ (OTG_FS device IN endpoint transmit FIFO size register OTG_FS_DIEPTXF5) 
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF5_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start address)  
        .equ OTG_FS_GLOBAL_OTG_FS_DIEPTXF5_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint Tx FIFO depth)  
 
    .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG, OTG_FS_GLOBAL_BASE + 0x54 @ (OTG core LPM configuration register) 
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMEN, 1 << 0   @ bitWidth 1 (LPM support enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMACK, 1 << 1   @ bitWidth 1 (LPM token acknowledge enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_BESL_Shift, 2   @ bitWidth 4 (Best effort service latency)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_REMWAKE, 1 << 6   @ bitWidth 1 (bRemoteWake value)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1SSEN, 1 << 7   @ bitWidth 1 (L1 Shallow Sleep enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_BESLTHRS_Shift, 8   @ bitWidth 4 (BESL threshold)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1DSEN, 1 << 12   @ bitWidth 1 (L1 deep sleep enable)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRST_Shift, 13   @ bitWidth 2 (LPM response)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_SLPSTS, 1 << 15   @ bitWidth 1 (Port sleep status)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1RSMOK, 1 << 16   @ bitWidth 1 (Sleep State Resume OK)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMCHIDX_Shift, 17   @ bitWidth 4 (LPM Channel Index)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRCNT_Shift, 21   @ bitWidth 3 (LPM retry count)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_SNDLPM, 1 << 24   @ bitWidth 1 (Send LPM transaction)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRCNTSTS_Shift, 25   @ bitWidth 3 (LPM retry count status)  
        .equ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_ENBESL, 1 << 28   @ bitWidth 1 (Enable best effort service latency)  
 

@=========================== OTG_FS_HOST ===========================@
.equ OTG_FS_HOST_BASE, 0x50000400 @ (USB on the go full speed) 
    .equ OTG_FS_HOST_OTG_FS_HCFG, OTG_FS_HOST_BASE + 0x0 @ (OTG_FS host configuration register OTG_FS_HCFG) 
        .equ OTG_FS_HOST_OTG_FS_HCFG_FSLSPCS_Shift, 0   @ bitWidth 2 (FS/LS PHY clock select)  
        .equ OTG_FS_HOST_OTG_FS_HCFG_FSLSS, 1 << 2   @ bitWidth 1 (FS- and LS-only support)  
 
    .equ OTG_FS_HOST_OTG_FS_HFIR, OTG_FS_HOST_BASE + 0x4 @ (OTG_FS Host frame interval register) 
        .equ OTG_FS_HOST_OTG_FS_HFIR_FRIVL_Shift, 0   @ bitWidth 16 (Frame interval)  
 
    .equ OTG_FS_HOST_OTG_FS_HFNUM, OTG_FS_HOST_BASE + 0x8 @ (OTG_FS host frame number/frame time remaining register OTG_FS_HFNUM) 
        .equ OTG_FS_HOST_OTG_FS_HFNUM_FRNUM_Shift, 0   @ bitWidth 16 (Frame number)  
        .equ OTG_FS_HOST_OTG_FS_HFNUM_FTREM_Shift, 16   @ bitWidth 16 (Frame time remaining)  
 
    .equ OTG_FS_HOST_OTG_FS_HPTXSTS, OTG_FS_HOST_BASE + 0x10 @ (OTG_FS_Host periodic transmit FIFO/queue status register OTG_FS_HPTXSTS) 
        .equ OTG_FS_HOST_OTG_FS_HPTXSTS_PTXFSAVL_Shift, 0   @ bitWidth 16 (Periodic transmit data FIFO space available)  
        .equ OTG_FS_HOST_OTG_FS_HPTXSTS_PTXQSAV_Shift, 16   @ bitWidth 8 (Periodic transmit request queue space available)  
        .equ OTG_FS_HOST_OTG_FS_HPTXSTS_PTXQTOP_Shift, 24   @ bitWidth 8 (Top of the periodic transmit request queue)  
 
    .equ OTG_FS_HOST_OTG_FS_HAINT, OTG_FS_HOST_BASE + 0x14 @ (OTG_FS Host all channels interrupt register) 
        .equ OTG_FS_HOST_OTG_FS_HAINT_HAINT_Shift, 0   @ bitWidth 16 (Channel interrupts)  
 
    .equ OTG_FS_HOST_OTG_FS_HAINTMSK, OTG_FS_HOST_BASE + 0x18 @ (OTG_FS host all channels interrupt mask register) 
        .equ OTG_FS_HOST_OTG_FS_HAINTMSK_HAINTM_Shift, 0   @ bitWidth 16 (Channel interrupt mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HPRT, OTG_FS_HOST_BASE + 0x40 @ (OTG_FS host port control and status register OTG_FS_HPRT) 
        .equ OTG_FS_HOST_OTG_FS_HPRT_PCSTS, 1 << 0   @ bitWidth 1 (Port connect status)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_PCDET, 1 << 1   @ bitWidth 1 (Port connect detected)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_PENA, 1 << 2   @ bitWidth 1 (Port enable)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_PENCHNG, 1 << 3   @ bitWidth 1 (Port enable/disable change)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_POCA, 1 << 4   @ bitWidth 1 (Port overcurrent active)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_POCCHNG, 1 << 5   @ bitWidth 1 (Port overcurrent change)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_PRES, 1 << 6   @ bitWidth 1 (Port resume)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_PSUSP, 1 << 7   @ bitWidth 1 (Port suspend)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_PRST, 1 << 8   @ bitWidth 1 (Port reset)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_PLSTS_Shift, 10   @ bitWidth 2 (Port line status)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_PPWR, 1 << 12   @ bitWidth 1 (Port power)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_PTCTL_Shift, 13   @ bitWidth 4 (Port test control)  
        .equ OTG_FS_HOST_OTG_FS_HPRT_PSPD_Shift, 17   @ bitWidth 2 (Port speed)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR0, OTG_FS_HOST_BASE + 0x100 @ (OTG_FS host channel-0 characteristics register OTG_FS_HCCHAR0) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR0_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR0_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR0_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR0_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR0_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR0_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR0_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR0_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR0_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR1, OTG_FS_HOST_BASE + 0x120 @ (OTG_FS host channel-1 characteristics register OTG_FS_HCCHAR1) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR1_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR1_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR1_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR1_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR1_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR1_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR1_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR1_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR1_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR1_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR2, OTG_FS_HOST_BASE + 0x140 @ (OTG_FS host channel-2 characteristics register OTG_FS_HCCHAR2) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR2_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR2_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR2_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR2_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR2_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR2_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR2_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR2_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR2_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR2_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR3, OTG_FS_HOST_BASE + 0x160 @ (OTG_FS host channel-3 characteristics register OTG_FS_HCCHAR3) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR3_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR3_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR3_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR3_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR3_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR3_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR3_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR3_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR3_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR3_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR4, OTG_FS_HOST_BASE + 0x180 @ (OTG_FS host channel-4 characteristics register OTG_FS_HCCHAR4) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR4_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR4_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR4_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR4_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR4_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR4_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR4_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR4_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR4_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR4_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR5, OTG_FS_HOST_BASE + 0x1A0 @ (OTG_FS host channel-5 characteristics register OTG_FS_HCCHAR5) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR5_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR5_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR5_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR5_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR5_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR5_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR5_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR5_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR5_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR5_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR6, OTG_FS_HOST_BASE + 0x1C0 @ (OTG_FS host channel-6 characteristics register OTG_FS_HCCHAR6) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR6_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR6_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR6_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR6_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR6_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR6_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR6_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR6_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR6_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR6_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR7, OTG_FS_HOST_BASE + 0x1E0 @ (OTG_FS host channel-7 characteristics register OTG_FS_HCCHAR7) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR7_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR7_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR7_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR7_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR7_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR7_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR7_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR7_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR7_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR7_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT0, OTG_FS_HOST_BASE + 0x108 @ (OTG_FS host channel-0 interrupt register OTG_FS_HCINT0) 
        .equ OTG_FS_HOST_OTG_FS_HCINT0_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT0_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT0_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT0_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT0_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT0_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT0_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT0_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT0_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT1, OTG_FS_HOST_BASE + 0x128 @ (OTG_FS host channel-1 interrupt register OTG_FS_HCINT1) 
        .equ OTG_FS_HOST_OTG_FS_HCINT1_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT1_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT1_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT1_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT1_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT1_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT1_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT1_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT1_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT2, OTG_FS_HOST_BASE + 0x148 @ (OTG_FS host channel-2 interrupt register OTG_FS_HCINT2) 
        .equ OTG_FS_HOST_OTG_FS_HCINT2_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT2_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT2_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT2_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT2_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT2_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT2_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT2_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT2_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT3, OTG_FS_HOST_BASE + 0x168 @ (OTG_FS host channel-3 interrupt register OTG_FS_HCINT3) 
        .equ OTG_FS_HOST_OTG_FS_HCINT3_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT3_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT3_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT3_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT3_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT3_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT3_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT3_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT3_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT4, OTG_FS_HOST_BASE + 0x188 @ (OTG_FS host channel-4 interrupt register OTG_FS_HCINT4) 
        .equ OTG_FS_HOST_OTG_FS_HCINT4_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT4_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT4_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT4_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT4_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT4_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT4_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT4_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT4_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT5, OTG_FS_HOST_BASE + 0x1A8 @ (OTG_FS host channel-5 interrupt register OTG_FS_HCINT5) 
        .equ OTG_FS_HOST_OTG_FS_HCINT5_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT5_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT5_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT5_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT5_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT5_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT5_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT5_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT5_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT6, OTG_FS_HOST_BASE + 0x1C8 @ (OTG_FS host channel-6 interrupt register OTG_FS_HCINT6) 
        .equ OTG_FS_HOST_OTG_FS_HCINT6_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT6_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT6_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT6_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT6_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT6_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT6_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT6_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT6_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT7, OTG_FS_HOST_BASE + 0x1E8 @ (OTG_FS host channel-7 interrupt register OTG_FS_HCINT7) 
        .equ OTG_FS_HOST_OTG_FS_HCINT7_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT7_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT7_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT7_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT7_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT7_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT7_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT7_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT7_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK0, OTG_FS_HOST_BASE + 0x10C @ (OTG_FS host channel-0 mask register OTG_FS_HCINTMSK0) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK0_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK0_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK0_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK0_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK0_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK0_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK0_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK0_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK0_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK0_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK1, OTG_FS_HOST_BASE + 0x12C @ (OTG_FS host channel-1 mask register OTG_FS_HCINTMSK1) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK1_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK1_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK1_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK1_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK1_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK1_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK1_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK1_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK1_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK1_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK2, OTG_FS_HOST_BASE + 0x14C @ (OTG_FS host channel-2 mask register OTG_FS_HCINTMSK2) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK2_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK2_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK2_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK2_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK2_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK2_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK2_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK2_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK2_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK2_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK3, OTG_FS_HOST_BASE + 0x16C @ (OTG_FS host channel-3 mask register OTG_FS_HCINTMSK3) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK3_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK3_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK3_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK3_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK3_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK3_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK3_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK3_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK3_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK3_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK4, OTG_FS_HOST_BASE + 0x18C @ (OTG_FS host channel-4 mask register OTG_FS_HCINTMSK4) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK4_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK4_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK4_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK4_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK4_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK4_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK4_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK4_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK4_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK4_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK5, OTG_FS_HOST_BASE + 0x1AC @ (OTG_FS host channel-5 mask register OTG_FS_HCINTMSK5) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK5_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK5_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK5_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK5_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK5_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK5_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK5_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK5_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK5_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK5_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK6, OTG_FS_HOST_BASE + 0x1CC @ (OTG_FS host channel-6 mask register OTG_FS_HCINTMSK6) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK6_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK6_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK6_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK6_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK6_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK6_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK6_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK6_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK6_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK6_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK7, OTG_FS_HOST_BASE + 0x1EC @ (OTG_FS host channel-7 mask register OTG_FS_HCINTMSK7) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK7_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK7_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK7_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK7_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK7_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK7_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK7_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK7_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK7_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK7_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ0, OTG_FS_HOST_BASE + 0x110 @ (OTG_FS host channel-0 transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ0_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ0_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ1, OTG_FS_HOST_BASE + 0x130 @ (OTG_FS host channel-1 transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ1_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ2, OTG_FS_HOST_BASE + 0x150 @ (OTG_FS host channel-2 transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ2_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ3, OTG_FS_HOST_BASE + 0x170 @ (OTG_FS host channel-3 transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ3_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ4, OTG_FS_HOST_BASE + 0x190 @ (OTG_FS host channel-x transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ4_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ4_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ4_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ5, OTG_FS_HOST_BASE + 0x1B0 @ (OTG_FS host channel-5 transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ5_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ5_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ5_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ6, OTG_FS_HOST_BASE + 0x1D0 @ (OTG_FS host channel-6 transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ6_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ6_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ6_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ7, OTG_FS_HOST_BASE + 0x1F0 @ (OTG_FS host channel-7 transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ7_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ7_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ7_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR8, OTG_FS_HOST_BASE + 0x1F4 @ (OTG_FS host channel-8 characteristics register) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR8_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR8_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR8_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR8_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR8_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR8_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR8_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR8_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR8_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR8_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT8, OTG_FS_HOST_BASE + 0x1F8 @ (OTG_FS host channel-8 interrupt register) 
        .equ OTG_FS_HOST_OTG_FS_HCINT8_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT8_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT8_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT8_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT8_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT8_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT8_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT8_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT8_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK8, OTG_FS_HOST_BASE + 0x1FC @ (OTG_FS host channel-8 mask register) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK8_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK8_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK8_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK8_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK8_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK8_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK8_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK8_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK8_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK8_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ8, OTG_FS_HOST_BASE + 0x200 @ (OTG_FS host channel-8 transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ8_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ8_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ8_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR9, OTG_FS_HOST_BASE + 0x204 @ (OTG_FS host channel-9 characteristics register) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR9_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR9_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR9_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR9_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR9_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR9_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR9_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR9_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR9_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR9_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT9, OTG_FS_HOST_BASE + 0x208 @ (OTG_FS host channel-9 interrupt register) 
        .equ OTG_FS_HOST_OTG_FS_HCINT9_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT9_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT9_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT9_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT9_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT9_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT9_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT9_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT9_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK9, OTG_FS_HOST_BASE + 0x20C @ (OTG_FS host channel-9 mask register) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK9_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK9_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK9_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK9_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK9_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK9_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK9_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK9_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK9_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK9_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ9, OTG_FS_HOST_BASE + 0x210 @ (OTG_FS host channel-9 transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ9_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ9_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ9_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR10, OTG_FS_HOST_BASE + 0x214 @ (OTG_FS host channel-10 characteristics register) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR10_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR10_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR10_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR10_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR10_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR10_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR10_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR10_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR10_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR10_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT10, OTG_FS_HOST_BASE + 0x218 @ (OTG_FS host channel-10 interrupt register) 
        .equ OTG_FS_HOST_OTG_FS_HCINT10_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT10_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT10_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT10_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT10_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT10_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT10_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT10_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT10_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK10, OTG_FS_HOST_BASE + 0x21C @ (OTG_FS host channel-10 mask register) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK10_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK10_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK10_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK10_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK10_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK10_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK10_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK10_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK10_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK10_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ10, OTG_FS_HOST_BASE + 0x220 @ (OTG_FS host channel-10 transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ10_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ10_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ10_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_OTG_FS_HCCHAR11, OTG_FS_HOST_BASE + 0x224 @ (OTG_FS host channel-11 characteristics register) 
        .equ OTG_FS_HOST_OTG_FS_HCCHAR11_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR11_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR11_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR11_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR11_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR11_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR11_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR11_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR11_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_OTG_FS_HCCHAR11_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINT11, OTG_FS_HOST_BASE + 0x228 @ (OTG_FS host channel-11 interrupt register) 
        .equ OTG_FS_HOST_OTG_FS_HCINT11_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_OTG_FS_HCINT11_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_OTG_FS_HCINT11_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT11_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT11_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_FS_HOST_OTG_FS_HCINT11_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT11_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_OTG_FS_HCINT11_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_OTG_FS_HCINT11_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_OTG_FS_HCINTMSK11, OTG_FS_HOST_BASE + 0x22C @ (OTG_FS host channel-11 mask register) 
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK11_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK11_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK11_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK11_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK11_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK11_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK11_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK11_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK11_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_OTG_FS_HCINTMSK11_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_OTG_FS_HCTSIZ11, OTG_FS_HOST_BASE + 0x230 @ (OTG_FS host channel-11 transfer size register) 
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ11_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ11_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_OTG_FS_HCTSIZ11_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 

@=========================== OTG_FS_DEVICE ===========================@
.equ OTG_FS_DEVICE_BASE, 0x50000800 @ (USB on the go full speed) 
    .equ OTG_FS_DEVICE_OTG_FS_DCFG, OTG_FS_DEVICE_BASE + 0x0 @ (OTG_FS device configuration register OTG_FS_DCFG) 
        .equ OTG_FS_DEVICE_OTG_FS_DCFG_DSPD_Shift, 0   @ bitWidth 2 (Device speed)  
        .equ OTG_FS_DEVICE_OTG_FS_DCFG_NZLSOHSK, 1 << 2   @ bitWidth 1 (Non-zero-length status OUT handshake)  
        .equ OTG_FS_DEVICE_OTG_FS_DCFG_DAD_Shift, 4   @ bitWidth 7 (Device address)  
        .equ OTG_FS_DEVICE_OTG_FS_DCFG_PFIVL_Shift, 11   @ bitWidth 2 (Periodic frame interval)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DCTL, OTG_FS_DEVICE_BASE + 0x4 @ (OTG_FS device control register OTG_FS_DCTL) 
        .equ OTG_FS_DEVICE_OTG_FS_DCTL_RWUSIG, 1 << 0   @ bitWidth 1 (Remote wakeup signaling)  
        .equ OTG_FS_DEVICE_OTG_FS_DCTL_SDIS, 1 << 1   @ bitWidth 1 (Soft disconnect)  
        .equ OTG_FS_DEVICE_OTG_FS_DCTL_GINSTS, 1 << 2   @ bitWidth 1 (Global IN NAK status)  
        .equ OTG_FS_DEVICE_OTG_FS_DCTL_GONSTS, 1 << 3   @ bitWidth 1 (Global OUT NAK status)  
        .equ OTG_FS_DEVICE_OTG_FS_DCTL_TCTL_Shift, 4   @ bitWidth 3 (Test control)  
        .equ OTG_FS_DEVICE_OTG_FS_DCTL_SGINAK, 1 << 7   @ bitWidth 1 (Set global IN NAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DCTL_CGINAK, 1 << 8   @ bitWidth 1 (Clear global IN NAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DCTL_SGONAK, 1 << 9   @ bitWidth 1 (Set global OUT NAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DCTL_CGONAK, 1 << 10   @ bitWidth 1 (Clear global OUT NAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DCTL_POPRGDNE, 1 << 11   @ bitWidth 1 (Power-on programming done)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DSTS, OTG_FS_DEVICE_BASE + 0x8 @ (OTG_FS device status register OTG_FS_DSTS) 
        .equ OTG_FS_DEVICE_OTG_FS_DSTS_SUSPSTS, 1 << 0   @ bitWidth 1 (Suspend status)  
        .equ OTG_FS_DEVICE_OTG_FS_DSTS_ENUMSPD_Shift, 1   @ bitWidth 2 (Enumerated speed)  
        .equ OTG_FS_DEVICE_OTG_FS_DSTS_EERR, 1 << 3   @ bitWidth 1 (Erratic error)  
        .equ OTG_FS_DEVICE_OTG_FS_DSTS_FNSOF_Shift, 8   @ bitWidth 14 (Frame number of the received SOF)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPMSK, OTG_FS_DEVICE_BASE + 0x10 @ (OTG_FS device IN endpoint common interrupt mask register OTG_FS_DIEPMSK) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPMSK_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt mask)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPMSK_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt mask)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPMSK_TOM, 1 << 3   @ bitWidth 1 (Timeout condition mask Non-isochronous endpoints)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPMSK_ITTXFEMSK, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO empty mask)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPMSK_INEPNMM, 1 << 5   @ bitWidth 1 (IN token received with EP mismatch mask)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPMSK_INEPNEM, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective mask)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPMSK, OTG_FS_DEVICE_BASE + 0x14 @ (OTG_FS device OUT endpoint common interrupt mask register OTG_FS_DOEPMSK) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPMSK_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt mask)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPMSK_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt mask)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPMSK_STUPM, 1 << 3   @ bitWidth 1 (SETUP phase done mask)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPMSK_OTEPDM, 1 << 4   @ bitWidth 1 (OUT token received when endpoint disabled mask)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DAINT, OTG_FS_DEVICE_BASE + 0x18 @ (OTG_FS device all endpoints interrupt register OTG_FS_DAINT) 
        .equ OTG_FS_DEVICE_OTG_FS_DAINT_IEPINT_Shift, 0   @ bitWidth 16 (IN endpoint interrupt bits)  
        .equ OTG_FS_DEVICE_OTG_FS_DAINT_OEPINT_Shift, 16   @ bitWidth 16 (OUT endpoint interrupt bits)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DAINTMSK, OTG_FS_DEVICE_BASE + 0x1C @ (OTG_FS all endpoints interrupt mask register OTG_FS_DAINTMSK) 
        .equ OTG_FS_DEVICE_OTG_FS_DAINTMSK_IEPM_Shift, 0   @ bitWidth 16 (IN EP interrupt mask bits)  
        .equ OTG_FS_DEVICE_OTG_FS_DAINTMSK_OEPINT_Shift, 16   @ bitWidth 16 (OUT endpoint interrupt bits)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DVBUSDIS, OTG_FS_DEVICE_BASE + 0x28 @ (OTG_FS device VBUS discharge time register) 
        .equ OTG_FS_DEVICE_OTG_FS_DVBUSDIS_VBUSDT_Shift, 0   @ bitWidth 16 (Device VBUS discharge time)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DVBUSPULSE, OTG_FS_DEVICE_BASE + 0x2C @ (OTG_FS device VBUS pulsing time register) 
        .equ OTG_FS_DEVICE_OTG_FS_DVBUSPULSE_DVBUSP_Shift, 0   @ bitWidth 12 (Device VBUS pulsing time)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK, OTG_FS_DEVICE_BASE + 0x34 @ (OTG_FS device IN endpoint FIFO empty interrupt mask register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK_INEPTXFEM_Shift, 0   @ bitWidth 16 (IN EP Tx FIFO empty interrupt mask bits)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL0, OTG_FS_DEVICE_BASE + 0x100 @ (OTG_FS device control IN endpoint 0 control register OTG_FS_DIEPCTL0) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_MPSIZ_Shift, 0   @ bitWidth 2 (Maximum packet size)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_STALL, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1, OTG_FS_DEVICE_BASE + 0x120 @ (OTG device endpoint-1 control register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SODDFRM_SD1PID, 1 << 29   @ bitWidth 1 (SODDFRM/SD1PID)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_TXFNUM_Shift, 22   @ bitWidth 4 (TXFNUM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2, OTG_FS_DEVICE_BASE + 0x140 @ (OTG device endpoint-2 control register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_TXFNUM_Shift, 22   @ bitWidth 4 (TXFNUM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3, OTG_FS_DEVICE_BASE + 0x160 @ (OTG device endpoint-3 control register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_TXFNUM_Shift, 22   @ bitWidth 4 (TXFNUM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL0, OTG_FS_DEVICE_BASE + 0x300 @ (device endpoint-0 control register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_MPSIZ_Shift, 0   @ bitWidth 2 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1, OTG_FS_DEVICE_BASE + 0x320 @ (device endpoint-1 control register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2, OTG_FS_DEVICE_BASE + 0x340 @ (device endpoint-2 control register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3, OTG_FS_DEVICE_BASE + 0x360 @ (device endpoint-3 control register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPINT0, OTG_FS_DEVICE_BASE + 0x108 @ (device endpoint-x interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT0_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT0_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT0_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT0_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT0_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT0_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPINT1, OTG_FS_DEVICE_BASE + 0x128 @ (device endpoint-1 interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT1_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT1_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT1_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT1_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT1_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT1_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPINT2, OTG_FS_DEVICE_BASE + 0x148 @ (device endpoint-2 interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT2_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT2_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT2_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT2_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT2_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT2_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPINT3, OTG_FS_DEVICE_BASE + 0x168 @ (device endpoint-3 interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT3_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT3_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT3_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT3_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT3_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT3_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPINT0, OTG_FS_DEVICE_BASE + 0x308 @ (device endpoint-0 interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT0_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT0_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT0_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT0_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT0_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPINT1, OTG_FS_DEVICE_BASE + 0x328 @ (device endpoint-1 interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT1_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT1_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT1_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT1_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT1_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPINT2, OTG_FS_DEVICE_BASE + 0x348 @ (device endpoint-2 interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT2_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT2_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT2_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT2_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT2_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPINT3, OTG_FS_DEVICE_BASE + 0x368 @ (device endpoint-3 interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT3_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT3_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT3_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT3_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT3_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0, OTG_FS_DEVICE_BASE + 0x110 @ (device endpoint-0 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0_PKTCNT_Shift, 19   @ bitWidth 2 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 7 (Transfer size)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0, OTG_FS_DEVICE_BASE + 0x310 @ (device OUT endpoint-0 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_STUPCNT_Shift, 29   @ bitWidth 2 (SETUP packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_PKTCNT, 1 << 19   @ bitWidth 1 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 7 (Transfer size)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1, OTG_FS_DEVICE_BASE + 0x130 @ (device endpoint-1 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2, OTG_FS_DEVICE_BASE + 0x150 @ (device endpoint-2 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3, OTG_FS_DEVICE_BASE + 0x170 @ (device endpoint-3 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS0, OTG_FS_DEVICE_BASE + 0x118 @ (OTG_FS device IN endpoint transmit FIFO status register) 
        .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS0_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space available)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS1, OTG_FS_DEVICE_BASE + 0x138 @ (OTG_FS device IN endpoint transmit FIFO status register) 
        .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS1_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space available)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS2, OTG_FS_DEVICE_BASE + 0x158 @ (OTG_FS device IN endpoint transmit FIFO status register) 
        .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS2_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space available)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS3, OTG_FS_DEVICE_BASE + 0x178 @ (OTG_FS device IN endpoint transmit FIFO status register) 
        .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS3_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space available)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1, OTG_FS_DEVICE_BASE + 0x330 @ (device OUT endpoint-1 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2, OTG_FS_DEVICE_BASE + 0x350 @ (device OUT endpoint-2 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3, OTG_FS_DEVICE_BASE + 0x370 @ (device OUT endpoint-3 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4, OTG_FS_DEVICE_BASE + 0x180 @ (OTG device endpoint-4 control register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_TXFNUM_Shift, 22   @ bitWidth 4 (TXFNUM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPINT4, OTG_FS_DEVICE_BASE + 0x188 @ (device endpoint-4 interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT4_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT4_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT4_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT4_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT4_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT4_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4, OTG_FS_DEVICE_BASE + 0x194 @ (device endpoint-4 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS4, OTG_FS_DEVICE_BASE + 0x19C @ (OTG_FS device IN endpoint transmit FIFO status register) 
        .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS4_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space available)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5, OTG_FS_DEVICE_BASE + 0x1A0 @ (OTG device endpoint-5 control register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_TXFNUM_Shift, 22   @ bitWidth 4 (TXFNUM)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPINT5, OTG_FS_DEVICE_BASE + 0x1A8 @ (device endpoint-5 interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT5_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT5_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT5_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT5_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT5_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPINT5_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55, OTG_FS_DEVICE_BASE + 0x1B0 @ (device endpoint-5 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS55, OTG_FS_DEVICE_BASE + 0x1B8 @ (OTG_FS device IN endpoint transmit FIFO status register) 
        .equ OTG_FS_DEVICE_OTG_FS_DTXFSTS55_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space available)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4, OTG_FS_DEVICE_BASE + 0x378 @ (device endpoint-4 control register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPINT4, OTG_FS_DEVICE_BASE + 0x380 @ (device endpoint-4 interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT4_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT4_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT4_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT4_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT4_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4, OTG_FS_DEVICE_BASE + 0x388 @ (device OUT endpoint-4 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5, OTG_FS_DEVICE_BASE + 0x390 @ (device endpoint-5 control register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPINT5, OTG_FS_DEVICE_BASE + 0x398 @ (device endpoint-5 interrupt register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT5_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT5_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT5_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT5_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPINT5_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5, OTG_FS_DEVICE_BASE + 0x3A0 @ (device OUT endpoint-5 transfer size register) 
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 

@=========================== OTG_FS_PWRCLK ===========================@
.equ OTG_FS_PWRCLK_BASE, 0x50000E00 @ (USB on the go full speed) 
    .equ OTG_FS_PWRCLK_OTG_FS_PCGCCTL, OTG_FS_PWRCLK_BASE + 0x0 @ (OTG_FS power and clock gating control register OTG_FS_PCGCCTL) 
        .equ OTG_FS_PWRCLK_OTG_FS_PCGCCTL_STPPCLK, 1 << 0   @ bitWidth 1 (Stop PHY clock)  
        .equ OTG_FS_PWRCLK_OTG_FS_PCGCCTL_GATEHCLK, 1 << 1   @ bitWidth 1 (Gate HCLK)  
        .equ OTG_FS_PWRCLK_OTG_FS_PCGCCTL_PHYSUSP, 1 << 4   @ bitWidth 1 (PHY Suspended)  
 

@=========================== OTG_HS_GLOBAL ===========================@
.equ OTG_HS_GLOBAL_BASE, 0x40040000 @ (USB on the go high speed) 
    .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL, OTG_HS_GLOBAL_BASE + 0x0 @ (OTG_HS control and status register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQSCS, 1 << 0   @ bitWidth 1 (Session request success)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQ, 1 << 1   @ bitWidth 1 (Session request)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNGSCS, 1 << 8   @ bitWidth 1 (Host negotiation success)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNPRQ, 1 << 9   @ bitWidth 1 (HNP request)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HSHNPEN, 1 << 10   @ bitWidth 1 (Host set HNP enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DHNPEN, 1 << 11   @ bitWidth 1 (Device HNP enabled)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_CIDSTS, 1 << 16   @ bitWidth 1 (Connector ID status)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DBCT, 1 << 17   @ bitWidth 1 (Long/short debounce time)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_ASVLD, 1 << 18   @ bitWidth 1 (A-session valid)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_BSVLD, 1 << 19   @ bitWidth 1 (B-session valid)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_EHEN, 1 << 12   @ bitWidth 1 (Embedded host enable)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT, OTG_HS_GLOBAL_BASE + 0x4 @ (OTG_HS interrupt register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_SEDET, 1 << 2   @ bitWidth 1 (Session end detected)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_SRSSCHG, 1 << 8   @ bitWidth 1 (Session request success status change)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNSSCHG, 1 << 9   @ bitWidth 1 (Host negotiation success status change)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNGDET, 1 << 17   @ bitWidth 1 (Host negotiation detected)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_ADTOCHG, 1 << 18   @ bitWidth 1 (A-device timeout change)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_DBCDNE, 1 << 19   @ bitWidth 1 (Debounce done)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_IDCHNG, 1 << 20   @ bitWidth 1 (ID input pin changed)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG, OTG_HS_GLOBAL_BASE + 0x8 @ (OTG_HS AHB configuration register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_GINT, 1 << 0   @ bitWidth 1 (Global interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_HBSTLEN_Shift, 1   @ bitWidth 4 (Burst length/type)  
        .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_DMAEN, 1 << 5   @ bitWidth 1 (DMA enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_TXFELVL, 1 << 7   @ bitWidth 1 (TxFIFO empty level)  
        .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_PTXFELVL, 1 << 8   @ bitWidth 1 (Periodic TxFIFO empty level)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG, OTG_HS_GLOBAL_BASE + 0xC @ (OTG_HS USB configuration register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TOCAL_Shift, 0   @ bitWidth 3 (FS timeout calibration)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYSEL, 1 << 6   @ bitWidth 1 (USB 2.0 high-speed ULPI PHY or USB 1.1 full-speed serial transceiver select)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_SRPCAP, 1 << 8   @ bitWidth 1 (SRP-capable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_HNPCAP, 1 << 9   @ bitWidth 1 (HNP-capable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TRDT_Shift, 10   @ bitWidth 4 (USB turnaround time)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYLPCS, 1 << 15   @ bitWidth 1 (PHY Low-power clock select)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIFSLS, 1 << 17   @ bitWidth 1 (ULPI FS/LS select)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIAR, 1 << 18   @ bitWidth 1 (ULPI Auto-resume)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPICSM, 1 << 19   @ bitWidth 1 (ULPI Clock SuspendM)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSD, 1 << 20   @ bitWidth 1 (ULPI External VBUS Drive)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSI, 1 << 21   @ bitWidth 1 (ULPI external VBUS indicator)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TSDPS, 1 << 22   @ bitWidth 1 (TermSel DLine pulsing selection)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PCCI, 1 << 23   @ bitWidth 1 (Indicator complement)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PTCI, 1 << 24   @ bitWidth 1 (Indicator pass through)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIIPD, 1 << 25   @ bitWidth 1 (ULPI interface protect disable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FHMOD, 1 << 29   @ bitWidth 1 (Forced host mode)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FDMOD, 1 << 30   @ bitWidth 1 (Forced peripheral mode)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL, OTG_HS_GLOBAL_BASE + 0x10 @ (OTG_HS reset register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_CSRST, 1 << 0   @ bitWidth 1 (Core soft reset)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_HSRST, 1 << 1   @ bitWidth 1 (HCLK soft reset)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_FCRST, 1 << 2   @ bitWidth 1 (Host frame counter reset)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_RXFFLSH, 1 << 4   @ bitWidth 1 (RxFIFO flush)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFFLSH, 1 << 5   @ bitWidth 1 (TxFIFO flush)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFNUM_Shift, 6   @ bitWidth 5 (TxFIFO number)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_AHBIDL, 1 << 31   @ bitWidth 1 (AHB master idle)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_DMAREQ, 1 << 30   @ bitWidth 1 (DMA request signal enabled for USB OTG HS)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS, OTG_HS_GLOBAL_BASE + 0x14 @ (OTG_HS core interrupt register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_CMOD, 1 << 0   @ bitWidth 1 (Current mode of operation)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_MMIS, 1 << 1   @ bitWidth 1 (Mode mismatch interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_OTGINT, 1 << 2   @ bitWidth 1 (OTG interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_SOF, 1 << 3   @ bitWidth 1 (Start of frame)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_RXFLVL, 1 << 4   @ bitWidth 1 (RxFIFO nonempty)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_NPTXFE, 1 << 5   @ bitWidth 1 (Nonperiodic TxFIFO empty)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_GINAKEFF, 1 << 6   @ bitWidth 1 (Global IN nonperiodic NAK effective)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_BOUTNAKEFF, 1 << 7   @ bitWidth 1 (Global OUT NAK effective)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ESUSP, 1 << 10   @ bitWidth 1 (Early suspend)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBSUSP, 1 << 11   @ bitWidth 1 (USB suspend)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBRST, 1 << 12   @ bitWidth 1 (USB reset)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ENUMDNE, 1 << 13   @ bitWidth 1 (Enumeration done)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ISOODRP, 1 << 14   @ bitWidth 1 (Isochronous OUT packet dropped interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_EOPF, 1 << 15   @ bitWidth 1 (End of periodic frame interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_IEPINT, 1 << 18   @ bitWidth 1 (IN endpoint interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_OEPINT, 1 << 19   @ bitWidth 1 (OUT endpoint interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_IISOIXFR, 1 << 20   @ bitWidth 1 (Incomplete isochronous IN transfer)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_PXFR_INCOMPISOOUT, 1 << 21   @ bitWidth 1 (Incomplete periodic transfer)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_DATAFSUSP, 1 << 22   @ bitWidth 1 (Data fetch suspended)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_HPRTINT, 1 << 24   @ bitWidth 1 (Host port interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_HCINT, 1 << 25   @ bitWidth 1 (Host channels interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_PTXFE, 1 << 26   @ bitWidth 1 (Periodic TxFIFO empty)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_CIDSCHG, 1 << 28   @ bitWidth 1 (Connector ID status change)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_DISCINT, 1 << 29   @ bitWidth 1 (Disconnect detected interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_SRQINT, 1 << 30   @ bitWidth 1 (Session request/new session detected interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_WKUINT, 1 << 31   @ bitWidth 1 (Resume/remote wakeup detected interrupt)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK, OTG_HS_GLOBAL_BASE + 0x18 @ (OTG_HS interrupt mask register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_MMISM, 1 << 1   @ bitWidth 1 (Mode mismatch interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_OTGINT, 1 << 2   @ bitWidth 1 (OTG interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_SOFM, 1 << 3   @ bitWidth 1 (Start of frame mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_RXFLVLM, 1 << 4   @ bitWidth 1 (Receive FIFO nonempty mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_NPTXFEM, 1 << 5   @ bitWidth 1 (Nonperiodic TxFIFO empty mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_GINAKEFFM, 1 << 6   @ bitWidth 1 (Global nonperiodic IN NAK effective mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_GONAKEFFM, 1 << 7   @ bitWidth 1 (Global OUT NAK effective mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ESUSPM, 1 << 10   @ bitWidth 1 (Early suspend mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBSUSPM, 1 << 11   @ bitWidth 1 (USB suspend mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBRST, 1 << 12   @ bitWidth 1 (USB reset mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ENUMDNEM, 1 << 13   @ bitWidth 1 (Enumeration done mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ISOODRPM, 1 << 14   @ bitWidth 1 (Isochronous OUT packet dropped interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_EOPFM, 1 << 15   @ bitWidth 1 (End of periodic frame interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_IEPINT, 1 << 18   @ bitWidth 1 (IN endpoints interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_OEPINT, 1 << 19   @ bitWidth 1 (OUT endpoints interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_IISOIXFRM, 1 << 20   @ bitWidth 1 (Incomplete isochronous IN transfer mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PXFRM_IISOOXFRM, 1 << 21   @ bitWidth 1 (Incomplete periodic transfer mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_FSUSPM, 1 << 22   @ bitWidth 1 (Data fetch suspended mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PRTIM, 1 << 24   @ bitWidth 1 (Host port interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_HCIM, 1 << 25   @ bitWidth 1 (Host channels interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PTXFEM, 1 << 26   @ bitWidth 1 (Periodic TxFIFO empty mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_CIDSCHGM, 1 << 28   @ bitWidth 1 (Connector ID status change mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_DISCINT, 1 << 29   @ bitWidth 1 (Disconnect detected interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_SRQIM, 1 << 30   @ bitWidth 1 (Session request/new session detected interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_WUIM, 1 << 31   @ bitWidth 1 (Resume/remote wakeup detected interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_RSTDE, 1 << 23   @ bitWidth 1 (Reset detected interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_LPMINTM, 1 << 27   @ bitWidth 1 (LPM interrupt mask)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host, OTG_HS_GLOBAL_BASE + 0x1C @ (OTG_HS Receive status debug read register host mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_CHNUM_Shift, 0   @ bitWidth 4 (Channel number)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host, OTG_HS_GLOBAL_BASE + 0x20 @ (OTG_HS status read and pop register host mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_CHNUM_Shift, 0   @ bitWidth 4 (Channel number)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRXFSIZ, OTG_HS_GLOBAL_BASE + 0x24 @ (OTG_HS Receive FIFO size register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_RXFD_Shift, 0   @ bitWidth 16 (RxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host, OTG_HS_GLOBAL_BASE + 0x28 @ (OTG_HS nonperiodic transmit FIFO size register host mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFSA_Shift, 0   @ bitWidth 16 (Nonperiodic transmit RAM start address)  
        .equ OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFD_Shift, 16   @ bitWidth 16 (Nonperiodic TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device, OTG_HS_GLOBAL_BASE + 0x28 @ (Endpoint 0 transmit FIFO size peripheral mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FSA_Shift, 0   @ bitWidth 16 (Endpoint 0 transmit RAM start address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FD_Shift, 16   @ bitWidth 16 (Endpoint 0 TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS, OTG_HS_GLOBAL_BASE + 0x2C @ (OTG_HS nonperiodic transmit FIFO/queue status register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXFSAV_Shift, 0   @ bitWidth 16 (Nonperiodic TxFIFO space available)  
        .equ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTQXSAV_Shift, 16   @ bitWidth 8 (Nonperiodic transmit request queue space available)  
        .equ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXQTOP_Shift, 24   @ bitWidth 7 (Top of the nonperiodic transmit request queue)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GCCFG, OTG_HS_GLOBAL_BASE + 0x38 @ (OTG_HS general core configuration register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_PWRDWN, 1 << 16   @ bitWidth 1 (Power down)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_BCDEN, 1 << 17   @ bitWidth 1 (Battery charging detector BCD enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDEN, 1 << 18   @ bitWidth 1 (Data contact detection DCD mode enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_PDEN, 1 << 19   @ bitWidth 1 (Primary detection PD mode enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_SDEN, 1 << 20   @ bitWidth 1 (Secondary detection SD mode enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_VBDEN, 1 << 21   @ bitWidth 1 (USB VBUS detection enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDET, 1 << 0   @ bitWidth 1 (Data contact detection DCD status)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_PDET, 1 << 1   @ bitWidth 1 (Primary detection PD status)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_SDET, 1 << 2   @ bitWidth 1 (Secondary detection SD status)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_PS2DET, 1 << 3   @ bitWidth 1 (DM pull-up detection status)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_CID, OTG_HS_GLOBAL_BASE + 0x3C @ (OTG_HS core ID register) 
        .equ OTG_HS_GLOBAL_OTG_HS_CID_PRODUCT_ID_Shift, 0   @ bitWidth 32 (Product ID field)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ, OTG_HS_GLOBAL_BASE + 0x100 @ (OTG_HS Host periodic transmit FIFO size register) 
        .equ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXSA_Shift, 0   @ bitWidth 16 (Host periodic TxFIFO start address)  
        .equ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXFD_Shift, 16   @ bitWidth 16 (Host periodic TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1, OTG_HS_GLOBAL_BASE + 0x104 @ (OTG_HS device IN endpoint transmit FIFO size register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2, OTG_HS_GLOBAL_BASE + 0x108 @ (OTG_HS device IN endpoint transmit FIFO size register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3, OTG_HS_GLOBAL_BASE + 0x11C @ (OTG_HS device IN endpoint transmit FIFO size register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4, OTG_HS_GLOBAL_BASE + 0x120 @ (OTG_HS device IN endpoint transmit FIFO size register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5, OTG_HS_GLOBAL_BASE + 0x124 @ (OTG_HS device IN endpoint transmit FIFO size register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6, OTG_HS_GLOBAL_BASE + 0x128 @ (OTG_HS device IN endpoint transmit FIFO size register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7, OTG_HS_GLOBAL_BASE + 0x12C @ (OTG_HS device IN endpoint transmit FIFO size register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device, OTG_HS_GLOBAL_BASE + 0x1C @ (OTG_HS Receive status debug read register peripheral mode mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_EPNUM_Shift, 0   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_FRMNUM_Shift, 21   @ bitWidth 4 (Frame number)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device, OTG_HS_GLOBAL_BASE + 0x20 @ (OTG_HS status read and pop register peripheral mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_EPNUM_Shift, 0   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_FRMNUM_Shift, 21   @ bitWidth 4 (Frame number)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG, OTG_HS_GLOBAL_BASE + 0x54 @ (OTG core LPM configuration register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMEN, 1 << 0   @ bitWidth 1 (LPM support enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMACK, 1 << 1   @ bitWidth 1 (LPM token acknowledge enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESL_Shift, 2   @ bitWidth 4 (Best effort service latency)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_REMWAKE, 1 << 6   @ bitWidth 1 (bRemoteWake value)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1SSEN, 1 << 7   @ bitWidth 1 (L1 Shallow Sleep enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESLTHRS_Shift, 8   @ bitWidth 4 (BESL threshold)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1DSEN, 1 << 12   @ bitWidth 1 (L1 deep sleep enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRST_Shift, 13   @ bitWidth 2 (LPM response)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SLPSTS, 1 << 15   @ bitWidth 1 (Port sleep status)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1RSMOK, 1 << 16   @ bitWidth 1 (Sleep State Resume OK)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMCHIDX_Shift, 17   @ bitWidth 4 (LPM Channel Index)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNT_Shift, 21   @ bitWidth 3 (LPM retry count)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SNDLPM, 1 << 24   @ bitWidth 1 (Send LPM transaction)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNTSTS_Shift, 25   @ bitWidth 3 (LPM retry count status)  
        .equ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_ENBESL, 1 << 28   @ bitWidth 1 (Enable best effort service latency)  
 

@=========================== OTG_HS_HOST ===========================@
.equ OTG_HS_HOST_BASE, 0x40040400 @ (USB on the go high speed) 
    .equ OTG_HS_HOST_OTG_HS_HCFG, OTG_HS_HOST_BASE + 0x0 @ (OTG_HS host configuration register) 
        .equ OTG_HS_HOST_OTG_HS_HCFG_FSLSPCS_Shift, 0   @ bitWidth 2 (FS/LS PHY clock select)  
        .equ OTG_HS_HOST_OTG_HS_HCFG_FSLSS, 1 << 2   @ bitWidth 1 (FS- and LS-only support)  
 
    .equ OTG_HS_HOST_OTG_HS_HFIR, OTG_HS_HOST_BASE + 0x4 @ (OTG_HS Host frame interval register) 
        .equ OTG_HS_HOST_OTG_HS_HFIR_FRIVL_Shift, 0   @ bitWidth 16 (Frame interval)  
 
    .equ OTG_HS_HOST_OTG_HS_HFNUM, OTG_HS_HOST_BASE + 0x8 @ (OTG_HS host frame number/frame time remaining register) 
        .equ OTG_HS_HOST_OTG_HS_HFNUM_FRNUM_Shift, 0   @ bitWidth 16 (Frame number)  
        .equ OTG_HS_HOST_OTG_HS_HFNUM_FTREM_Shift, 16   @ bitWidth 16 (Frame time remaining)  
 
    .equ OTG_HS_HOST_OTG_HS_HPTXSTS, OTG_HS_HOST_BASE + 0x10 @ (OTG_HS_Host periodic transmit FIFO/queue status register) 
        .equ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXFSAVL_Shift, 0   @ bitWidth 16 (Periodic transmit data FIFO space available)  
        .equ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQSAV_Shift, 16   @ bitWidth 8 (Periodic transmit request queue space available)  
        .equ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQTOP_Shift, 24   @ bitWidth 8 (Top of the periodic transmit request queue)  
 
    .equ OTG_HS_HOST_OTG_HS_HAINT, OTG_HS_HOST_BASE + 0x14 @ (OTG_HS Host all channels interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HAINT_HAINT_Shift, 0   @ bitWidth 16 (Channel interrupts)  
 
    .equ OTG_HS_HOST_OTG_HS_HAINTMSK, OTG_HS_HOST_BASE + 0x18 @ (OTG_HS host all channels interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HAINTMSK_HAINTM_Shift, 0   @ bitWidth 16 (Channel interrupt mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HPRT, OTG_HS_HOST_BASE + 0x40 @ (OTG_HS host port control and status register) 
        .equ OTG_HS_HOST_OTG_HS_HPRT_PCSTS, 1 << 0   @ bitWidth 1 (Port connect status)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PCDET, 1 << 1   @ bitWidth 1 (Port connect detected)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PENA, 1 << 2   @ bitWidth 1 (Port enable)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PENCHNG, 1 << 3   @ bitWidth 1 (Port enable/disable change)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_POCA, 1 << 4   @ bitWidth 1 (Port overcurrent active)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_POCCHNG, 1 << 5   @ bitWidth 1 (Port overcurrent change)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PRES, 1 << 6   @ bitWidth 1 (Port resume)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PSUSP, 1 << 7   @ bitWidth 1 (Port suspend)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PRST, 1 << 8   @ bitWidth 1 (Port reset)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PLSTS_Shift, 10   @ bitWidth 2 (Port line status)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PPWR, 1 << 12   @ bitWidth 1 (Port power)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PTCTL_Shift, 13   @ bitWidth 4 (Port test control)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PSPD_Shift, 17   @ bitWidth 2 (Port speed)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR0, OTG_HS_HOST_BASE + 0x100 @ (OTG_HS host channel-0 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR1, OTG_HS_HOST_BASE + 0x120 @ (OTG_HS host channel-1 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR2, OTG_HS_HOST_BASE + 0x140 @ (OTG_HS host channel-2 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR3, OTG_HS_HOST_BASE + 0x160 @ (OTG_HS host channel-3 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR4, OTG_HS_HOST_BASE + 0x180 @ (OTG_HS host channel-4 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR5, OTG_HS_HOST_BASE + 0x1A0 @ (OTG_HS host channel-5 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR6, OTG_HS_HOST_BASE + 0x1C0 @ (OTG_HS host channel-6 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR7, OTG_HS_HOST_BASE + 0x1E0 @ (OTG_HS host channel-7 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR8, OTG_HS_HOST_BASE + 0x200 @ (OTG_HS host channel-8 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR9, OTG_HS_HOST_BASE + 0x220 @ (OTG_HS host channel-9 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR10, OTG_HS_HOST_BASE + 0x240 @ (OTG_HS host channel-10 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR11, OTG_HS_HOST_BASE + 0x260 @ (OTG_HS host channel-11 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT0, OTG_HS_HOST_BASE + 0x104 @ (OTG_HS host channel-0 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT0_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT0_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT0_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT0_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT0_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT1, OTG_HS_HOST_BASE + 0x124 @ (OTG_HS host channel-1 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT1_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT1_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT1_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT1_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT1_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT2, OTG_HS_HOST_BASE + 0x144 @ (OTG_HS host channel-2 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT2_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT2_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT2_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT2_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT2_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT3, OTG_HS_HOST_BASE + 0x164 @ (OTG_HS host channel-3 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT3_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT3_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT3_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT3_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT3_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT4, OTG_HS_HOST_BASE + 0x184 @ (OTG_HS host channel-4 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT4_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT4_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT4_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT4_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT4_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT5, OTG_HS_HOST_BASE + 0x1A4 @ (OTG_HS host channel-5 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT5_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT5_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT5_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT5_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT5_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT6, OTG_HS_HOST_BASE + 0x1C4 @ (OTG_HS host channel-6 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT6_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT6_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT6_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT6_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT6_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT7, OTG_HS_HOST_BASE + 0x1E4 @ (OTG_HS host channel-7 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT7_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT7_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT7_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT7_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT7_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT8, OTG_HS_HOST_BASE + 0x204 @ (OTG_HS host channel-8 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT8_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT8_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT8_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT8_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT8_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT9, OTG_HS_HOST_BASE + 0x224 @ (OTG_HS host channel-9 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT9_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT9_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT9_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT9_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT9_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT10, OTG_HS_HOST_BASE + 0x244 @ (OTG_HS host channel-10 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT10_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT10_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT10_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT10_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT10_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT11, OTG_HS_HOST_BASE + 0x264 @ (OTG_HS host channel-11 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT11_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT11_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT11_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT11_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT11_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT0, OTG_HS_HOST_BASE + 0x108 @ (OTG_HS host channel-11 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT0_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT1, OTG_HS_HOST_BASE + 0x128 @ (OTG_HS host channel-1 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT1_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT2, OTG_HS_HOST_BASE + 0x148 @ (OTG_HS host channel-2 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT2_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT3, OTG_HS_HOST_BASE + 0x168 @ (OTG_HS host channel-3 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT3_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT4, OTG_HS_HOST_BASE + 0x188 @ (OTG_HS host channel-4 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT4_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT5, OTG_HS_HOST_BASE + 0x1A8 @ (OTG_HS host channel-5 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT5_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT6, OTG_HS_HOST_BASE + 0x1C8 @ (OTG_HS host channel-6 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT6_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT7, OTG_HS_HOST_BASE + 0x1E8 @ (OTG_HS host channel-7 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT7_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT8, OTG_HS_HOST_BASE + 0x208 @ (OTG_HS host channel-8 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT8_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT9, OTG_HS_HOST_BASE + 0x228 @ (OTG_HS host channel-9 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT9_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT10, OTG_HS_HOST_BASE + 0x248 @ (OTG_HS host channel-10 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT10_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT11, OTG_HS_HOST_BASE + 0x268 @ (OTG_HS host channel-11 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT11_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK0, OTG_HS_HOST_BASE + 0x10C @ (OTG_HS host channel-11 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK1, OTG_HS_HOST_BASE + 0x12C @ (OTG_HS host channel-1 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK2, OTG_HS_HOST_BASE + 0x14C @ (OTG_HS host channel-2 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK3, OTG_HS_HOST_BASE + 0x16C @ (OTG_HS host channel-3 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK4, OTG_HS_HOST_BASE + 0x18C @ (OTG_HS host channel-4 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK5, OTG_HS_HOST_BASE + 0x1AC @ (OTG_HS host channel-5 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK6, OTG_HS_HOST_BASE + 0x1CC @ (OTG_HS host channel-6 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK7, OTG_HS_HOST_BASE + 0x1EC @ (OTG_HS host channel-7 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK8, OTG_HS_HOST_BASE + 0x20C @ (OTG_HS host channel-8 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK9, OTG_HS_HOST_BASE + 0x22C @ (OTG_HS host channel-9 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK10, OTG_HS_HOST_BASE + 0x24C @ (OTG_HS host channel-10 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK11, OTG_HS_HOST_BASE + 0x26C @ (OTG_HS host channel-11 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_NYET, 1 << 6   @ bitWidth 1 (response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ0, OTG_HS_HOST_BASE + 0x110 @ (OTG_HS host channel-11 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ0_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ0_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ1, OTG_HS_HOST_BASE + 0x130 @ (OTG_HS host channel-1 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ1_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ2, OTG_HS_HOST_BASE + 0x150 @ (OTG_HS host channel-2 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ2_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ3, OTG_HS_HOST_BASE + 0x170 @ (OTG_HS host channel-3 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ3_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ4, OTG_HS_HOST_BASE + 0x190 @ (OTG_HS host channel-4 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ4_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ4_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ4_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ5, OTG_HS_HOST_BASE + 0x1B0 @ (OTG_HS host channel-5 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ5_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ5_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ5_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ6, OTG_HS_HOST_BASE + 0x1D0 @ (OTG_HS host channel-6 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ6_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ6_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ6_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ7, OTG_HS_HOST_BASE + 0x1F0 @ (OTG_HS host channel-7 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ7_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ7_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ7_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ8, OTG_HS_HOST_BASE + 0x210 @ (OTG_HS host channel-8 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ8_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ8_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ8_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ9, OTG_HS_HOST_BASE + 0x230 @ (OTG_HS host channel-9 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ9_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ9_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ9_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ10, OTG_HS_HOST_BASE + 0x250 @ (OTG_HS host channel-10 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ10_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ10_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ10_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ11, OTG_HS_HOST_BASE + 0x270 @ (OTG_HS host channel-11 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ11_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ11_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ11_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA0, OTG_HS_HOST_BASE + 0x114 @ (OTG_HS host channel-0 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA0_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA1, OTG_HS_HOST_BASE + 0x134 @ (OTG_HS host channel-1 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA1_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA2, OTG_HS_HOST_BASE + 0x154 @ (OTG_HS host channel-2 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA2_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA3, OTG_HS_HOST_BASE + 0x174 @ (OTG_HS host channel-3 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA3_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA4, OTG_HS_HOST_BASE + 0x194 @ (OTG_HS host channel-4 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA4_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA5, OTG_HS_HOST_BASE + 0x1B4 @ (OTG_HS host channel-5 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA5_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA6, OTG_HS_HOST_BASE + 0x1D4 @ (OTG_HS host channel-6 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA6_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA7, OTG_HS_HOST_BASE + 0x1F4 @ (OTG_HS host channel-7 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA7_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA8, OTG_HS_HOST_BASE + 0x214 @ (OTG_HS host channel-8 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA8_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA9, OTG_HS_HOST_BASE + 0x234 @ (OTG_HS host channel-9 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA9_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA10, OTG_HS_HOST_BASE + 0x254 @ (OTG_HS host channel-10 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA10_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA11, OTG_HS_HOST_BASE + 0x274 @ (OTG_HS host channel-11 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA11_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR12, OTG_HS_HOST_BASE + 0x278 @ (OTG_HS host channel-12 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR12_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR12_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR12_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR12_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR12_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR12_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR12_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR12_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR12_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR12_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT12, OTG_HS_HOST_BASE + 0x27C @ (OTG_HS host channel-12 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT12_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT12_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT12_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT12_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT12_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT12, OTG_HS_HOST_BASE + 0x280 @ (OTG_HS host channel-12 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT12_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT12_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT12_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT12_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT12_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT12_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT12_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT12_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT12_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT12_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT12_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK12, OTG_HS_HOST_BASE + 0x284 @ (OTG_HS host channel-12 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK12_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK12_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK12_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK12_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK12_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK12_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK12_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK12_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK12_BBERRM, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK12_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK12_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ12, OTG_HS_HOST_BASE + 0x288 @ (OTG_HS host channel-12 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ12_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ12_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ12_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA12, OTG_HS_HOST_BASE + 0x28C @ (OTG_HS host channel-12 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA12_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR13, OTG_HS_HOST_BASE + 0x290 @ (OTG_HS host channel-13 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR13_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR13_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR13_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR13_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR13_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR13_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR13_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR13_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR13_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR13_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT13, OTG_HS_HOST_BASE + 0x294 @ (OTG_HS host channel-13 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT13_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT13_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT13_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT13_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT13_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT13, OTG_HS_HOST_BASE + 0x298 @ (OTG_HS host channel-13 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT13_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT13_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT13_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT13_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT13_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT13_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT13_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT13_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT13_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT13_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT13_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK13, OTG_HS_HOST_BASE + 0x29C @ (OTG_HS host channel-13 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK13_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK13_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK13_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK13_STALLM, 1 << 3   @ bitWidth 1 (STALLM response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK13_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK13_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK13_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK13_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK13_BBERRM, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK13_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK13_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ13, OTG_HS_HOST_BASE + 0x2A0 @ (OTG_HS host channel-13 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ13_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ13_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ13_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA13, OTG_HS_HOST_BASE + 0x2A4 @ (OTG_HS host channel-13 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA13_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR14, OTG_HS_HOST_BASE + 0x2A8 @ (OTG_HS host channel-14 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR14_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR14_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR14_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR14_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR14_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR14_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR14_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR14_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR14_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR14_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT14, OTG_HS_HOST_BASE + 0x2AC @ (OTG_HS host channel-14 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT14_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT14_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT14_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT14_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT14_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT14, OTG_HS_HOST_BASE + 0x2B0 @ (OTG_HS host channel-14 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT14_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT14_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT14_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT14_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT14_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT14_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT14_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT14_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT14_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT14_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT14_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK14, OTG_HS_HOST_BASE + 0x2B4 @ (OTG_HS host channel-14 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK14_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK14_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK14_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK14_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK14_NAKM, 1 << 4   @ bitWidth 1 (NAKM response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK14_ACKM, 1 << 5   @ bitWidth 1 (ACKM response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK14_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK14_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK14_BBERRM, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK14_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK14_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ14, OTG_HS_HOST_BASE + 0x2B8 @ (OTG_HS host channel-14 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ14_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ14_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ14_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA14, OTG_HS_HOST_BASE + 0x2BC @ (OTG_HS host channel-14 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA14_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR15, OTG_HS_HOST_BASE + 0x2C0 @ (OTG_HS host channel-15 characteristics register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR15_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR15_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR15_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR15_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR15_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR15_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR15_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR15_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR15_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR15_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT15, OTG_HS_HOST_BASE + 0x2C4 @ (OTG_HS host channel-15 split control register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT15_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT15_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT15_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT15_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT15_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT15, OTG_HS_HOST_BASE + 0x2C8 @ (OTG_HS host channel-15 interrupt register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT15_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT15_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT15_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT15_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT15_NAK, 1 << 4   @ bitWidth 1 (NAK response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT15_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT15_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT15_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT15_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT15_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT15_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK15, OTG_HS_HOST_BASE + 0x2CC @ (OTG_HS host channel-15 interrupt mask register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK15_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK15_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK15_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK15_STALL, 1 << 3   @ bitWidth 1 (STALL response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK15_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK15_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK15_NYET, 1 << 6   @ bitWidth 1 (Response received interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK15_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK15_BBERRM, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK15_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK15_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ15, OTG_HS_HOST_BASE + 0x2D0 @ (OTG_HS host channel-15 transfer size register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ15_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ15_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ15_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA15, OTG_HS_HOST_BASE + 0x2D4 @ (OTG_HS host channel-15 DMA address register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA15_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 

@=========================== OTG_HS_DEVICE ===========================@
.equ OTG_HS_DEVICE_BASE, 0x40040800 @ (USB on the go high speed) 
    .equ OTG_HS_DEVICE_OTG_HS_DCFG, OTG_HS_DEVICE_BASE + 0x0 @ (OTG_HS device configuration register) 
        .equ OTG_HS_DEVICE_OTG_HS_DCFG_DSPD_Shift, 0   @ bitWidth 2 (Device speed)  
        .equ OTG_HS_DEVICE_OTG_HS_DCFG_NZLSOHSK, 1 << 2   @ bitWidth 1 (Nonzero-length status OUT handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DCFG_DAD_Shift, 4   @ bitWidth 7 (Device address)  
        .equ OTG_HS_DEVICE_OTG_HS_DCFG_PFIVL_Shift, 11   @ bitWidth 2 (Periodic microframe interval)  
        .equ OTG_HS_DEVICE_OTG_HS_DCFG_PERSCHIVL_Shift, 24   @ bitWidth 2 (Periodic scheduling interval)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DCTL, OTG_HS_DEVICE_BASE + 0x4 @ (OTG_HS device control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_RWUSIG, 1 << 0   @ bitWidth 1 (Remote wakeup signaling)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_SDIS, 1 << 1   @ bitWidth 1 (Soft disconnect)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_GINSTS, 1 << 2   @ bitWidth 1 (Global IN NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_GONSTS, 1 << 3   @ bitWidth 1 (Global OUT NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_TCTL_Shift, 4   @ bitWidth 3 (Test control)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_SGINAK, 1 << 7   @ bitWidth 1 (Set global IN NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_CGINAK, 1 << 8   @ bitWidth 1 (Clear global IN NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_SGONAK, 1 << 9   @ bitWidth 1 (Set global OUT NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_CGONAK, 1 << 10   @ bitWidth 1 (Clear global OUT NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_POPRGDNE, 1 << 11   @ bitWidth 1 (Power-on programming done)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DSTS, OTG_HS_DEVICE_BASE + 0x8 @ (OTG_HS device status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DSTS_SUSPSTS, 1 << 0   @ bitWidth 1 (Suspend status)  
        .equ OTG_HS_DEVICE_OTG_HS_DSTS_ENUMSPD_Shift, 1   @ bitWidth 2 (Enumerated speed)  
        .equ OTG_HS_DEVICE_OTG_HS_DSTS_EERR, 1 << 3   @ bitWidth 1 (Erratic error)  
        .equ OTG_HS_DEVICE_OTG_HS_DSTS_FNSOF_Shift, 8   @ bitWidth 14 (Frame number of the received SOF)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK, OTG_HS_DEVICE_BASE + 0x10 @ (OTG_HS device IN endpoint common interrupt mask register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_TOM, 1 << 3   @ bitWidth 1 (Timeout condition mask nonisochronous endpoints)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_ITTXFEMSK, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO empty mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNMM, 1 << 5   @ bitWidth 1 (IN token received with EP mismatch mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNEM, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_TXFURM, 1 << 8   @ bitWidth 1 (FIFO underrun mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_BIM, 1 << 9   @ bitWidth 1 (BNA interrupt mask)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK, OTG_HS_DEVICE_BASE + 0x14 @ (OTG_HS device OUT endpoint common interrupt mask register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_STUPM, 1 << 3   @ bitWidth 1 (SETUP phase done mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_OTEPDM, 1 << 4   @ bitWidth 1 (OUT token received when endpoint disabled mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets received mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_OPEM, 1 << 8   @ bitWidth 1 (OUT packet error mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_BOIM, 1 << 9   @ bitWidth 1 (BNA interrupt mask)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DAINT, OTG_HS_DEVICE_BASE + 0x18 @ (OTG_HS device all endpoints interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DAINT_IEPINT_Shift, 0   @ bitWidth 16 (IN endpoint interrupt bits)  
        .equ OTG_HS_DEVICE_OTG_HS_DAINT_OEPINT_Shift, 16   @ bitWidth 16 (OUT endpoint interrupt bits)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DAINTMSK, OTG_HS_DEVICE_BASE + 0x1C @ (OTG_HS all endpoints interrupt mask register) 
        .equ OTG_HS_DEVICE_OTG_HS_DAINTMSK_IEPM_Shift, 0   @ bitWidth 16 (IN EP interrupt mask bits)  
        .equ OTG_HS_DEVICE_OTG_HS_DAINTMSK_OEPM_Shift, 16   @ bitWidth 16 (OUT EP interrupt mask bits)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DVBUSDIS, OTG_HS_DEVICE_BASE + 0x28 @ (OTG_HS device VBUS discharge time register) 
        .equ OTG_HS_DEVICE_OTG_HS_DVBUSDIS_VBUSDT_Shift, 0   @ bitWidth 16 (Device VBUS discharge time)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DVBUSPULSE, OTG_HS_DEVICE_BASE + 0x2C @ (OTG_HS device VBUS pulsing time register) 
        .equ OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_DVBUSP_Shift, 0   @ bitWidth 12 (Device VBUS pulsing time)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL, OTG_HS_DEVICE_BASE + 0x30 @ (OTG_HS Device threshold control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_NONISOTHREN, 1 << 0   @ bitWidth 1 (Nonisochronous IN endpoints threshold enable)  
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_ISOTHREN, 1 << 1   @ bitWidth 1 (ISO IN endpoint threshold enable)  
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_TXTHRLEN_Shift, 2   @ bitWidth 9 (Transmit threshold length)  
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHREN, 1 << 16   @ bitWidth 1 (Receive threshold enable)  
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHRLEN_Shift, 17   @ bitWidth 9 (Receive threshold length)  
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_ARPEN, 1 << 27   @ bitWidth 1 (Arbiter parking enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK, OTG_HS_DEVICE_BASE + 0x34 @ (OTG_HS device IN endpoint FIFO empty interrupt mask register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_INEPTXFEM_Shift, 0   @ bitWidth 16 (IN EP Tx FIFO empty interrupt mask bits)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DEACHINT, OTG_HS_DEVICE_BASE + 0x38 @ (OTG_HS device each endpoint interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DEACHINT_IEP1INT, 1 << 1   @ bitWidth 1 (IN endpoint 1interrupt bit)  
        .equ OTG_HS_DEVICE_OTG_HS_DEACHINT_OEP1INT, 1 << 17   @ bitWidth 1 (OUT endpoint 1 interrupt bit)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK, OTG_HS_DEVICE_BASE + 0x3C @ (OTG_HS device each endpoint interrupt register mask) 
        .equ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_IEP1INTM, 1 << 1   @ bitWidth 1 (IN Endpoint 1 interrupt mask bit)  
        .equ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_OEP1INTM, 1 << 17   @ bitWidth 1 (OUT Endpoint 1 interrupt mask bit)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0, OTG_HS_DEVICE_BASE + 0x100 @ (OTG device endpoint-0 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1, OTG_HS_DEVICE_BASE + 0x120 @ (OTG device endpoint-1 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2, OTG_HS_DEVICE_BASE + 0x140 @ (OTG device endpoint-2 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3, OTG_HS_DEVICE_BASE + 0x160 @ (OTG device endpoint-3 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4, OTG_HS_DEVICE_BASE + 0x180 @ (OTG device endpoint-4 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5, OTG_HS_DEVICE_BASE + 0x1A0 @ (OTG device endpoint-5 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6, OTG_HS_DEVICE_BASE + 0x1C0 @ (OTG device endpoint-6 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7, OTG_HS_DEVICE_BASE + 0x1E0 @ (OTG device endpoint-7 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0, OTG_HS_DEVICE_BASE + 0x108 @ (OTG device endpoint-0 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_BNA, 1 << 9   @ bitWidth 1 (Buffer not available interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1, OTG_HS_DEVICE_BASE + 0x128 @ (OTG device endpoint-1 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_BNA, 1 << 9   @ bitWidth 1 (Buffer not available interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2, OTG_HS_DEVICE_BASE + 0x148 @ (OTG device endpoint-2 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_BNA, 1 << 9   @ bitWidth 1 (Buffer not available interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3, OTG_HS_DEVICE_BASE + 0x168 @ (OTG device endpoint-3 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_BNA, 1 << 9   @ bitWidth 1 (Buffer not available interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4, OTG_HS_DEVICE_BASE + 0x188 @ (OTG device endpoint-4 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_BNA, 1 << 9   @ bitWidth 1 (Buffer not available interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5, OTG_HS_DEVICE_BASE + 0x1A8 @ (OTG device endpoint-5 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_BNA, 1 << 9   @ bitWidth 1 (Buffer not available interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6, OTG_HS_DEVICE_BASE + 0x1C8 @ (OTG device endpoint-6 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_BNA, 1 << 9   @ bitWidth 1 (Buffer not available interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7, OTG_HS_DEVICE_BASE + 0x1E8 @ (OTG device endpoint-7 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_BNA, 1 << 9   @ bitWidth 1 (Buffer not available interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0, OTG_HS_DEVICE_BASE + 0x110 @ (OTG_HS device IN endpoint 0 transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 7 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_PKTCNT_Shift, 19   @ bitWidth 2 (Packet count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA1, OTG_HS_DEVICE_BASE + 0x114 @ (OTG_HS device endpoint-1 DMA address register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA1_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA2, OTG_HS_DEVICE_BASE + 0x134 @ (OTG_HS device endpoint-2 DMA address register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA2_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA3, OTG_HS_DEVICE_BASE + 0x154 @ (OTG_HS device endpoint-3 DMA address register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA3_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA4, OTG_HS_DEVICE_BASE + 0x174 @ (OTG_HS device endpoint-4 DMA address register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA4_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA5, OTG_HS_DEVICE_BASE + 0x194 @ (OTG_HS device endpoint-5 DMA address register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA5_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS0, OTG_HS_DEVICE_BASE + 0x118 @ (OTG_HS device IN endpoint transmit FIFO status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS0_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS1, OTG_HS_DEVICE_BASE + 0x138 @ (OTG_HS device IN endpoint transmit FIFO status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS1_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS2, OTG_HS_DEVICE_BASE + 0x158 @ (OTG_HS device IN endpoint transmit FIFO status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS2_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS3, OTG_HS_DEVICE_BASE + 0x178 @ (OTG_HS device IN endpoint transmit FIFO status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS3_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS4, OTG_HS_DEVICE_BASE + 0x198 @ (OTG_HS device IN endpoint transmit FIFO status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS4_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS5, OTG_HS_DEVICE_BASE + 0x1B8 @ (OTG_HS device IN endpoint transmit FIFO status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS5_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1, OTG_HS_DEVICE_BASE + 0x130 @ (OTG_HS device endpoint transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2, OTG_HS_DEVICE_BASE + 0x150 @ (OTG_HS device endpoint transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3, OTG_HS_DEVICE_BASE + 0x170 @ (OTG_HS device endpoint transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4, OTG_HS_DEVICE_BASE + 0x190 @ (OTG_HS device endpoint transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5, OTG_HS_DEVICE_BASE + 0x1B0 @ (OTG_HS device endpoint transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0, OTG_HS_DEVICE_BASE + 0x300 @ (OTG_HS device control OUT endpoint 0 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_MPSIZ_Shift, 0   @ bitWidth 2 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1, OTG_HS_DEVICE_BASE + 0x320 @ (OTG device endpoint-1 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even odd frame/Endpoint data PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID/Set even frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2, OTG_HS_DEVICE_BASE + 0x340 @ (OTG device endpoint-2 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even odd frame/Endpoint data PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID/Set even frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3, OTG_HS_DEVICE_BASE + 0x360 @ (OTG device endpoint-3 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even odd frame/Endpoint data PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID/Set even frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0, OTG_HS_DEVICE_BASE + 0x308 @ (OTG_HS device endpoint-0 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1, OTG_HS_DEVICE_BASE + 0x328 @ (OTG_HS device endpoint-1 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2, OTG_HS_DEVICE_BASE + 0x348 @ (OTG_HS device endpoint-2 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3, OTG_HS_DEVICE_BASE + 0x368 @ (OTG_HS device endpoint-3 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4, OTG_HS_DEVICE_BASE + 0x388 @ (OTG_HS device endpoint-4 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5, OTG_HS_DEVICE_BASE + 0x3A8 @ (OTG_HS device endpoint-5 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6, OTG_HS_DEVICE_BASE + 0x3C8 @ (OTG_HS device endpoint-6 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7, OTG_HS_DEVICE_BASE + 0x3E8 @ (OTG_HS device endpoint-7 interrupt register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0, OTG_HS_DEVICE_BASE + 0x310 @ (OTG_HS device endpoint-0 transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 7 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_PKTCNT, 1 << 19   @ bitWidth 1 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_STUPCNT_Shift, 29   @ bitWidth 2 (SETUP packet count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1, OTG_HS_DEVICE_BASE + 0x330 @ (OTG_HS device endpoint-1 transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2, OTG_HS_DEVICE_BASE + 0x350 @ (OTG_HS device endpoint-2 transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3, OTG_HS_DEVICE_BASE + 0x370 @ (OTG_HS device endpoint-3 transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4, OTG_HS_DEVICE_BASE + 0x390 @ (OTG_HS device endpoint-4 transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6, OTG_HS_DEVICE_BASE + 0x1A0 @ (OTG_HS device endpoint transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS6, OTG_HS_DEVICE_BASE + 0x1A4 @ (OTG_HS device IN endpoint transmit FIFO status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS6_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7, OTG_HS_DEVICE_BASE + 0x1A8 @ (OTG_HS device endpoint transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS7, OTG_HS_DEVICE_BASE + 0x1AC @ (OTG_HS device IN endpoint transmit FIFO status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS7_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4, OTG_HS_DEVICE_BASE + 0x380 @ (OTG device endpoint-4 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even odd frame/Endpoint data PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID/Set even frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5, OTG_HS_DEVICE_BASE + 0x3A0 @ (OTG device endpoint-5 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even odd frame/Endpoint data PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID/Set even frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6, OTG_HS_DEVICE_BASE + 0x3C0 @ (OTG device endpoint-6 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even odd frame/Endpoint data PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID/Set even frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7, OTG_HS_DEVICE_BASE + 0x3E0 @ (OTG device endpoint-7 control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even odd frame/Endpoint data PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID/Set even frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5, OTG_HS_DEVICE_BASE + 0x3B0 @ (OTG_HS device endpoint-5 transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6, OTG_HS_DEVICE_BASE + 0x3D0 @ (OTG_HS device endpoint-6 transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7, OTG_HS_DEVICE_BASE + 0x3F0 @ (OTG_HS device endpoint-7 transfer size register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet count)  
 

@=========================== OTG_HS_PWRCLK ===========================@
.equ OTG_HS_PWRCLK_BASE, 0x40040E00 @ (USB on the go high speed) 
    .equ OTG_HS_PWRCLK_OTG_HS_PCGCR, OTG_HS_PWRCLK_BASE + 0x0 @ (Power and clock gating control register) 
        .equ OTG_HS_PWRCLK_OTG_HS_PCGCR_STPPCLK, 1 << 0   @ bitWidth 1 (Stop PHY clock)  
        .equ OTG_HS_PWRCLK_OTG_HS_PCGCR_GATEHCLK, 1 << 1   @ bitWidth 1 (Gate HCLK)  
        .equ OTG_HS_PWRCLK_OTG_HS_PCGCR_PHYSUSP, 1 << 4   @ bitWidth 1 (PHY suspended)  
 

@=========================== NVIC ===========================@
.equ NVIC_BASE, 0xE000E100 @ (Nested Vectored Interrupt Controller) 
    .equ NVIC_ISER0, NVIC_BASE + 0x0 @ (Interrupt Set-Enable Register) 
        .equ NVIC_ISER0_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ISER1, NVIC_BASE + 0x4 @ (Interrupt Set-Enable Register) 
        .equ NVIC_ISER1_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ISER2, NVIC_BASE + 0x8 @ (Interrupt Set-Enable Register) 
        .equ NVIC_ISER2_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ICER0, NVIC_BASE + 0x80 @ (Interrupt Clear-Enable Register) 
        .equ NVIC_ICER0_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ICER1, NVIC_BASE + 0x84 @ (Interrupt Clear-Enable Register) 
        .equ NVIC_ICER1_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ICER2, NVIC_BASE + 0x88 @ (Interrupt Clear-Enable Register) 
        .equ NVIC_ICER2_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ISPR0, NVIC_BASE + 0x100 @ (Interrupt Set-Pending Register) 
        .equ NVIC_ISPR0_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ISPR1, NVIC_BASE + 0x104 @ (Interrupt Set-Pending Register) 
        .equ NVIC_ISPR1_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ISPR2, NVIC_BASE + 0x108 @ (Interrupt Set-Pending Register) 
        .equ NVIC_ISPR2_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ICPR0, NVIC_BASE + 0x180 @ (Interrupt Clear-Pending Register) 
        .equ NVIC_ICPR0_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_ICPR1, NVIC_BASE + 0x184 @ (Interrupt Clear-Pending Register) 
        .equ NVIC_ICPR1_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_ICPR2, NVIC_BASE + 0x188 @ (Interrupt Clear-Pending Register) 
        .equ NVIC_ICPR2_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_IABR0, NVIC_BASE + 0x200 @ (Interrupt Active Bit Register) 
        .equ NVIC_IABR0_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IABR1, NVIC_BASE + 0x204 @ (Interrupt Active Bit Register) 
        .equ NVIC_IABR1_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IABR2, NVIC_BASE + 0x208 @ (Interrupt Active Bit Register) 
        .equ NVIC_IABR2_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IPR0, NVIC_BASE + 0x300 @ (Interrupt Priority Register) 
        .equ NVIC_IPR0_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR0_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR0_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR0_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR1, NVIC_BASE + 0x304 @ (Interrupt Priority Register) 
        .equ NVIC_IPR1_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR1_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR1_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR1_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR2, NVIC_BASE + 0x308 @ (Interrupt Priority Register) 
        .equ NVIC_IPR2_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR2_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR2_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR2_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR3, NVIC_BASE + 0x30C @ (Interrupt Priority Register) 
        .equ NVIC_IPR3_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR3_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR3_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR3_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR4, NVIC_BASE + 0x310 @ (Interrupt Priority Register) 
        .equ NVIC_IPR4_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR4_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR4_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR4_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR5, NVIC_BASE + 0x314 @ (Interrupt Priority Register) 
        .equ NVIC_IPR5_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR5_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR5_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR5_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR6, NVIC_BASE + 0x318 @ (Interrupt Priority Register) 
        .equ NVIC_IPR6_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR6_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR6_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR6_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR7, NVIC_BASE + 0x31C @ (Interrupt Priority Register) 
        .equ NVIC_IPR7_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR7_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR7_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR7_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR8, NVIC_BASE + 0x320 @ (Interrupt Priority Register) 
        .equ NVIC_IPR8_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR8_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR8_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR8_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR9, NVIC_BASE + 0x324 @ (Interrupt Priority Register) 
        .equ NVIC_IPR9_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR9_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR9_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR9_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR10, NVIC_BASE + 0x328 @ (Interrupt Priority Register) 
        .equ NVIC_IPR10_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR10_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR10_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR10_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR11, NVIC_BASE + 0x32C @ (Interrupt Priority Register) 
        .equ NVIC_IPR11_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR11_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR11_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR11_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR12, NVIC_BASE + 0x330 @ (Interrupt Priority Register) 
        .equ NVIC_IPR12_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR12_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR12_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR12_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR13, NVIC_BASE + 0x334 @ (Interrupt Priority Register) 
        .equ NVIC_IPR13_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR13_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR13_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR13_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR14, NVIC_BASE + 0x338 @ (Interrupt Priority Register) 
        .equ NVIC_IPR14_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR14_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR14_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR14_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR15, NVIC_BASE + 0x33C @ (Interrupt Priority Register) 
        .equ NVIC_IPR15_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR15_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR15_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR15_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR16, NVIC_BASE + 0x340 @ (Interrupt Priority Register) 
        .equ NVIC_IPR16_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR16_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR16_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR16_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR17, NVIC_BASE + 0x344 @ (Interrupt Priority Register) 
        .equ NVIC_IPR17_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR17_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR17_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR17_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR18, NVIC_BASE + 0x348 @ (Interrupt Priority Register) 
        .equ NVIC_IPR18_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR18_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR18_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR18_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR19, NVIC_BASE + 0x34C @ (Interrupt Priority Register) 
        .equ NVIC_IPR19_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR19_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR19_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR19_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR20, NVIC_BASE + 0x350 @ (Interrupt Priority Register) 
        .equ NVIC_IPR20_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR20_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR20_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR20_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR21, NVIC_BASE + 0x354 @ (Interrupt Priority Register) 
        .equ NVIC_IPR21_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR21_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR21_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR21_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR22, NVIC_BASE + 0x358 @ (Interrupt Priority Register) 
        .equ NVIC_IPR22_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR22_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR22_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR22_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR23, NVIC_BASE + 0x35C @ (Interrupt Priority Register) 
        .equ NVIC_IPR23_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR23_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR23_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR23_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR24, NVIC_BASE + 0x360 @ (Interrupt Priority Register) 
        .equ NVIC_IPR24_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR24_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR24_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR24_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR25, NVIC_BASE + 0x364 @ (Interrupt Priority Register) 
        .equ NVIC_IPR25_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR25_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR25_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR25_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 

@=========================== MPU ===========================@
.equ MPU_BASE, 0xE000ED90 @ (Memory protection unit) 
    .equ MPU_MPU_TYPER, MPU_BASE + 0x0 @ (MPU type register) 
        .equ MPU_MPU_TYPER_SEPARATE, 1 << 0   @ bitWidth 1 (Separate flag)  
        .equ MPU_MPU_TYPER_DREGION_Shift, 8   @ bitWidth 8 (Number of MPU data regions)  
        .equ MPU_MPU_TYPER_IREGION_Shift, 16   @ bitWidth 8 (Number of MPU instruction regions)  
 
    .equ MPU_MPU_CTRL, MPU_BASE + 0x4 @ (MPU control register) 
        .equ MPU_MPU_CTRL_ENABLE, 1 << 0   @ bitWidth 1 (Enables the MPU)  
        .equ MPU_MPU_CTRL_HFNMIENA, 1 << 1   @ bitWidth 1 (Enables the operation of MPU during hard fault)  
        .equ MPU_MPU_CTRL_PRIVDEFENA, 1 << 2   @ bitWidth 1 (Enable priviliged software access to default memory map)  
 
    .equ MPU_MPU_RNR, MPU_BASE + 0x8 @ (MPU region number register) 
        .equ MPU_MPU_RNR_REGION_Shift, 0   @ bitWidth 8 (MPU region)  
 
    .equ MPU_MPU_RBAR, MPU_BASE + 0xC @ (MPU region base address register) 
        .equ MPU_MPU_RBAR_REGION_Shift, 0   @ bitWidth 4 (MPU region field)  
        .equ MPU_MPU_RBAR_VALID, 1 << 4   @ bitWidth 1 (MPU region number valid)  
        .equ MPU_MPU_RBAR_ADDR_Shift, 5   @ bitWidth 27 (Region base address field)  
 
    .equ MPU_MPU_RASR, MPU_BASE + 0x10 @ (MPU region attribute and size register) 
        .equ MPU_MPU_RASR_ENABLE, 1 << 0   @ bitWidth 1 (Region enable bit.)  
        .equ MPU_MPU_RASR_SIZE_Shift, 1   @ bitWidth 5 (Size of the MPU protection region)  
        .equ MPU_MPU_RASR_SRD_Shift, 8   @ bitWidth 8 (Subregion disable bits)  
        .equ MPU_MPU_RASR_B, 1 << 16   @ bitWidth 1 (memory attribute)  
        .equ MPU_MPU_RASR_C, 1 << 17   @ bitWidth 1 (memory attribute)  
        .equ MPU_MPU_RASR_S, 1 << 18   @ bitWidth 1 (Shareable memory attribute)  
        .equ MPU_MPU_RASR_TEX_Shift, 19   @ bitWidth 3 (memory attribute)  
        .equ MPU_MPU_RASR_AP_Shift, 24   @ bitWidth 3 (Access permission)  
        .equ MPU_MPU_RASR_XN, 1 << 28   @ bitWidth 1 (Instruction access disable bit)  
 

@=========================== STK ===========================@
.equ STK_BASE, 0xE000E010 @ (SysTick timer) 
    .equ STK_CSR, STK_BASE + 0x0 @ (SysTick control and status register) 
        .equ STK_CSR_ENABLE, 1 << 0   @ bitWidth 1 (Counter enable)  
        .equ STK_CSR_TICKINT, 1 << 1   @ bitWidth 1 (SysTick exception request enable)  
        .equ STK_CSR_CLKSOURCE, 1 << 2   @ bitWidth 1 (Clock source selection)  
        .equ STK_CSR_COUNTFLAG, 1 << 16   @ bitWidth 1 (COUNTFLAG)  
 
    .equ STK_RVR, STK_BASE + 0x4 @ (SysTick reload value register) 
        .equ STK_RVR_RELOAD_Shift, 0   @ bitWidth 24 (RELOAD value)  
 
    .equ STK_CVR, STK_BASE + 0x8 @ (SysTick current value register) 
        .equ STK_CVR_CURRENT_Shift, 0   @ bitWidth 24 (Current counter value)  
 
    .equ STK_CALIB, STK_BASE + 0xC @ (SysTick calibration value register) 
        .equ STK_CALIB_TENMS_Shift, 0   @ bitWidth 24 (Calibration value)  
        .equ STK_CALIB_SKEW, 1 << 30   @ bitWidth 1 (SKEW flag: Indicates whether the TENMS value is exact)  
        .equ STK_CALIB_NOREF, 1 << 31   @ bitWidth 1 (NOREF flag. Reads as zero)  
 

@=========================== NVIC_STIR ===========================@
.equ NVIC_STIR_BASE, 0xE000EF00 @ (Nested vectored interrupt controller) 
    .equ NVIC_STIR_STIR, NVIC_STIR_BASE + 0x0 @ (Software trigger interrupt register) 
        .equ NVIC_STIR_STIR_INTID_Shift, 0   @ bitWidth 9 (Software generated interrupt ID)  
 

@=========================== FPU_CPACR ===========================@
.equ FPU_CPACR_BASE, 0xE000ED88 @ (Floating point unit CPACR) 
    .equ FPU_CPACR_CPACR, FPU_CPACR_BASE + 0x0 @ (Coprocessor access control register) 
        .equ FPU_CPACR_CPACR_CP_Shift, 20   @ bitWidth 4 (CP)  
 

@=========================== SCB_ACTRL ===========================@
.equ SCB_ACTRL_BASE, 0xE000E008 @ (System control block ACTLR) 
    .equ SCB_ACTRL_ACTRL, SCB_ACTRL_BASE + 0x0 @ (Auxiliary control register) 
        .equ SCB_ACTRL_ACTRL_DISFOLD, 1 << 2   @ bitWidth 1 (DISFOLD)  
        .equ SCB_ACTRL_ACTRL_FPEXCODIS, 1 << 10   @ bitWidth 1 (FPEXCODIS)  
        .equ SCB_ACTRL_ACTRL_DISRAMODE, 1 << 11   @ bitWidth 1 (DISRAMODE)  
        .equ SCB_ACTRL_ACTRL_DISITMATBFLUSH, 1 << 12   @ bitWidth 1 (DISITMATBFLUSH)  
 

@=========================== FPU ===========================@
.equ FPU_BASE, 0xE000EF34 @ (Floting point unit) 
    .equ FPU_FPCCR, FPU_BASE + 0x0 @ (Floating-point context control register) 
        .equ FPU_FPCCR_LSPACT, 1 << 0   @ bitWidth 1 (LSPACT)  
        .equ FPU_FPCCR_USER, 1 << 1   @ bitWidth 1 (USER)  
        .equ FPU_FPCCR_THREAD, 1 << 3   @ bitWidth 1 (THREAD)  
        .equ FPU_FPCCR_HFRDY, 1 << 4   @ bitWidth 1 (HFRDY)  
        .equ FPU_FPCCR_MMRDY, 1 << 5   @ bitWidth 1 (MMRDY)  
        .equ FPU_FPCCR_BFRDY, 1 << 6   @ bitWidth 1 (BFRDY)  
        .equ FPU_FPCCR_MONRDY, 1 << 8   @ bitWidth 1 (MONRDY)  
        .equ FPU_FPCCR_LSPEN, 1 << 30   @ bitWidth 1 (LSPEN)  
        .equ FPU_FPCCR_ASPEN, 1 << 31   @ bitWidth 1 (ASPEN)  
 
    .equ FPU_FPCAR, FPU_BASE + 0x4 @ (Floating-point context address register) 
        .equ FPU_FPCAR_ADDRESS_Shift, 3   @ bitWidth 29 (Location of unpopulated floating-point)  
 
    .equ FPU_FPSCR, FPU_BASE + 0x8 @ (Floating-point status control register) 
        .equ FPU_FPSCR_IOC, 1 << 0   @ bitWidth 1 (Invalid operation cumulative exception bit)  
        .equ FPU_FPSCR_DZC, 1 << 1   @ bitWidth 1 (Division by zero cumulative exception bit.)  
        .equ FPU_FPSCR_OFC, 1 << 2   @ bitWidth 1 (Overflow cumulative exception bit)  
        .equ FPU_FPSCR_UFC, 1 << 3   @ bitWidth 1 (Underflow cumulative exception bit)  
        .equ FPU_FPSCR_IXC, 1 << 4   @ bitWidth 1 (Inexact cumulative exception bit)  
        .equ FPU_FPSCR_IDC, 1 << 7   @ bitWidth 1 (Input denormal cumulative exception bit.)  
        .equ FPU_FPSCR_RMode_Shift, 22   @ bitWidth 2 (Rounding Mode control field)  
        .equ FPU_FPSCR_FZ, 1 << 24   @ bitWidth 1 (Flush-to-zero mode control bit:)  
        .equ FPU_FPSCR_DN, 1 << 25   @ bitWidth 1 (Default NaN mode control bit)  
        .equ FPU_FPSCR_AHP, 1 << 26   @ bitWidth 1 (Alternative half-precision control bit)  
        .equ FPU_FPSCR_V, 1 << 28   @ bitWidth 1 (Overflow condition code flag)  
        .equ FPU_FPSCR_C, 1 << 29   @ bitWidth 1 (Carry condition code flag)  
        .equ FPU_FPSCR_Z, 1 << 30   @ bitWidth 1 (Zero condition code flag)  
        .equ FPU_FPSCR_N, 1 << 31   @ bitWidth 1 (Negative condition code flag)  
 

@=========================== SCB ===========================@
.equ SCB_BASE, 0xE000ED00 @ (System control block) 
    .equ SCB_CPUID, SCB_BASE + 0x0 @ (CPUID base register) 
        .equ SCB_CPUID_Revision_Shift, 0   @ bitWidth 4 (Revision number)  
        .equ SCB_CPUID_PartNo_Shift, 4   @ bitWidth 12 (Part number of the processor)  
        .equ SCB_CPUID_Constant_Shift, 16   @ bitWidth 4 (Reads as 0xF)  
        .equ SCB_CPUID_Variant_Shift, 20   @ bitWidth 4 (Variant number)  
        .equ SCB_CPUID_Implementer_Shift, 24   @ bitWidth 8 (Implementer code)  
 
    .equ SCB_ICSR, SCB_BASE + 0x4 @ (Interrupt control and state register) 
        .equ SCB_ICSR_VECTACTIVE_Shift, 0   @ bitWidth 9 (Active vector)  
        .equ SCB_ICSR_RETTOBASE, 1 << 11   @ bitWidth 1 (Return to base level)  
        .equ SCB_ICSR_VECTPENDING_Shift, 12   @ bitWidth 7 (Pending vector)  
        .equ SCB_ICSR_ISRPENDING, 1 << 22   @ bitWidth 1 (Interrupt pending flag)  
        .equ SCB_ICSR_PENDSTCLR, 1 << 25   @ bitWidth 1 (SysTick exception clear-pending bit)  
        .equ SCB_ICSR_PENDSTSET, 1 << 26   @ bitWidth 1 (SysTick exception set-pending bit)  
        .equ SCB_ICSR_PENDSVCLR, 1 << 27   @ bitWidth 1 (PendSV clear-pending bit)  
        .equ SCB_ICSR_PENDSVSET, 1 << 28   @ bitWidth 1 (PendSV set-pending bit)  
        .equ SCB_ICSR_NMIPENDSET, 1 << 31   @ bitWidth 1 (NMI set-pending bit.)  
 
    .equ SCB_VTOR, SCB_BASE + 0x8 @ (Vector table offset register) 
        .equ SCB_VTOR_TBLOFF_Shift, 9   @ bitWidth 21 (Vector table base offset field)  
 
    .equ SCB_AIRCR, SCB_BASE + 0xC @ (Application interrupt and reset control register) 
        .equ SCB_AIRCR_VECTRESET, 1 << 0   @ bitWidth 1 (VECTRESET)  
        .equ SCB_AIRCR_VECTCLRACTIVE, 1 << 1   @ bitWidth 1 (VECTCLRACTIVE)  
        .equ SCB_AIRCR_SYSRESETREQ, 1 << 2   @ bitWidth 1 (SYSRESETREQ)  
        .equ SCB_AIRCR_PRIGROUP_Shift, 8   @ bitWidth 3 (PRIGROUP)  
        .equ SCB_AIRCR_ENDIANESS, 1 << 15   @ bitWidth 1 (ENDIANESS)  
        .equ SCB_AIRCR_VECTKEYSTAT_Shift, 16   @ bitWidth 16 (Register key)  
 
    .equ SCB_SCR, SCB_BASE + 0x10 @ (System control register) 
        .equ SCB_SCR_SLEEPONEXIT, 1 << 1   @ bitWidth 1 (SLEEPONEXIT)  
        .equ SCB_SCR_SLEEPDEEP, 1 << 2   @ bitWidth 1 (SLEEPDEEP)  
        .equ SCB_SCR_SEVEONPEND, 1 << 4   @ bitWidth 1 (Send Event on Pending bit)  
 
    .equ SCB_CCR, SCB_BASE + 0x14 @ (Configuration and control register) 
        .equ SCB_CCR_NONBASETHRDENA, 1 << 0   @ bitWidth 1 (Configures how the processor enters Thread mode)  
        .equ SCB_CCR_USERSETMPEND, 1 << 1   @ bitWidth 1 (USERSETMPEND)  
        .equ SCB_CCR_UNALIGN__TRP, 1 << 3   @ bitWidth 1 (UNALIGN_ TRP)  
        .equ SCB_CCR_DIV_0_TRP, 1 << 4   @ bitWidth 1 (DIV_0_TRP)  
        .equ SCB_CCR_BFHFNMIGN, 1 << 8   @ bitWidth 1 (BFHFNMIGN)  
        .equ SCB_CCR_STKALIGN, 1 << 9   @ bitWidth 1 (STKALIGN)  
        .equ SCB_CCR_DC, 1 << 16   @ bitWidth 1 (DC)  
        .equ SCB_CCR_IC, 1 << 17   @ bitWidth 1 (IC)  
        .equ SCB_CCR_BP, 1 << 18   @ bitWidth 1 (BP)  
 
    .equ SCB_SHPR1, SCB_BASE + 0x18 @ (System handler priority registers) 
        .equ SCB_SHPR1_PRI_4_Shift, 0   @ bitWidth 8 (Priority of system handler 4)  
        .equ SCB_SHPR1_PRI_5_Shift, 8   @ bitWidth 8 (Priority of system handler 5)  
        .equ SCB_SHPR1_PRI_6_Shift, 16   @ bitWidth 8 (Priority of system handler 6)  
 
    .equ SCB_SHPR2, SCB_BASE + 0x1C @ (System handler priority registers) 
        .equ SCB_SHPR2_PRI_11_Shift, 24   @ bitWidth 8 (Priority of system handler 11)  
 
    .equ SCB_SHPR3, SCB_BASE + 0x20 @ (System handler priority registers) 
        .equ SCB_SHPR3_PRI_14_Shift, 16   @ bitWidth 8 (Priority of system handler 14)  
        .equ SCB_SHPR3_PRI_15_Shift, 24   @ bitWidth 8 (Priority of system handler 15)  
 
    .equ SCB_SHCRS, SCB_BASE + 0x24 @ (System handler control and state register) 
        .equ SCB_SHCRS_MEMFAULTACT, 1 << 0   @ bitWidth 1 (Memory management fault exception active bit)  
        .equ SCB_SHCRS_BUSFAULTACT, 1 << 1   @ bitWidth 1 (Bus fault exception active bit)  
        .equ SCB_SHCRS_USGFAULTACT, 1 << 3   @ bitWidth 1 (Usage fault exception active bit)  
        .equ SCB_SHCRS_SVCALLACT, 1 << 7   @ bitWidth 1 (SVC call active bit)  
        .equ SCB_SHCRS_MONITORACT, 1 << 8   @ bitWidth 1 (Debug monitor active bit)  
        .equ SCB_SHCRS_PENDSVACT, 1 << 10   @ bitWidth 1 (PendSV exception active bit)  
        .equ SCB_SHCRS_SYSTICKACT, 1 << 11   @ bitWidth 1 (SysTick exception active bit)  
        .equ SCB_SHCRS_USGFAULTPENDED, 1 << 12   @ bitWidth 1 (Usage fault exception pending bit)  
        .equ SCB_SHCRS_MEMFAULTPENDED, 1 << 13   @ bitWidth 1 (Memory management fault exception pending bit)  
        .equ SCB_SHCRS_BUSFAULTPENDED, 1 << 14   @ bitWidth 1 (Bus fault exception pending bit)  
        .equ SCB_SHCRS_SVCALLPENDED, 1 << 15   @ bitWidth 1 (SVC call pending bit)  
        .equ SCB_SHCRS_MEMFAULTENA, 1 << 16   @ bitWidth 1 (Memory management fault enable bit)  
        .equ SCB_SHCRS_BUSFAULTENA, 1 << 17   @ bitWidth 1 (Bus fault enable bit)  
        .equ SCB_SHCRS_USGFAULTENA, 1 << 18   @ bitWidth 1 (Usage fault enable bit)  
 
    .equ SCB_CFSR_UFSR_BFSR_MMFSR, SCB_BASE + 0x28 @ (Configurable fault status register) 
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_IACCVIOL, 1 << 0   @ bitWidth 1 (IACCVIOL)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_DACCVIOL, 1 << 1   @ bitWidth 1 (DACCVIOL)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_MUNSTKERR, 1 << 3   @ bitWidth 1 (MUNSTKERR)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_MSTKERR, 1 << 4   @ bitWidth 1 (MSTKERR)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_MLSPERR, 1 << 5   @ bitWidth 1 (MLSPERR)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_MMARVALID, 1 << 7   @ bitWidth 1 (MMARVALID)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_IBUSERR, 1 << 8   @ bitWidth 1 (Instruction bus error)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_PRECISERR, 1 << 9   @ bitWidth 1 (Precise data bus error)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_IMPRECISERR, 1 << 10   @ bitWidth 1 (Imprecise data bus error)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_UNSTKERR, 1 << 11   @ bitWidth 1 (Bus fault on unstacking for a return from exception)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_STKERR, 1 << 12   @ bitWidth 1 (Bus fault on stacking for exception entry)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_LSPERR, 1 << 13   @ bitWidth 1 (Bus fault on floating-point lazy state preservation)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_BFARVALID, 1 << 15   @ bitWidth 1 (Bus Fault Address Register BFAR valid flag)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_UNDEFINSTR, 1 << 16   @ bitWidth 1 (Undefined instruction usage fault)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_INVSTATE, 1 << 17   @ bitWidth 1 (Invalid state usage fault)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_INVPC, 1 << 18   @ bitWidth 1 (Invalid PC load usage fault)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_NOCP, 1 << 19   @ bitWidth 1 (No coprocessor usage fault.)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_UNALIGNED, 1 << 24   @ bitWidth 1 (Unaligned access usage fault)  
        .equ SCB_CFSR_UFSR_BFSR_MMFSR_DIVBYZERO, 1 << 25   @ bitWidth 1 (Divide by zero usage fault)  
 
    .equ SCB_HFSR, SCB_BASE + 0x2C @ (Hard fault status register) 
        .equ SCB_HFSR_VECTTBL, 1 << 1   @ bitWidth 1 (Vector table hard fault)  
        .equ SCB_HFSR_FORCED, 1 << 30   @ bitWidth 1 (Forced hard fault)  
        .equ SCB_HFSR_DEBUG_VT, 1 << 31   @ bitWidth 1 (Reserved for Debug use)  
 
    .equ SCB_MMFAR, SCB_BASE + 0x34 @ (Memory management fault address register) 
        .equ SCB_MMFAR_ADDRESS_Shift, 0   @ bitWidth 32 (Memory management fault address)  
 
    .equ SCB_BFAR, SCB_BASE + 0x38 @ (Bus fault address register) 
        .equ SCB_BFAR_ADDRESS_Shift, 0   @ bitWidth 32 (Bus fault address)  
 

@=========================== PF ===========================@
.equ PF_BASE, 0xE000ED78 @ (Processor features) 
    .equ PF_CLIDR, PF_BASE + 0x0 @ (Cache Level ID register) 
        .equ PF_CLIDR_CL1_Shift, 0   @ bitWidth 3 (CL1)  
        .equ PF_CLIDR_CL2_Shift, 3   @ bitWidth 3 (CL2)  
        .equ PF_CLIDR_CL3_Shift, 6   @ bitWidth 3 (CL3)  
        .equ PF_CLIDR_CL4_Shift, 9   @ bitWidth 3 (CL4)  
        .equ PF_CLIDR_CL5_Shift, 12   @ bitWidth 3 (CL5)  
        .equ PF_CLIDR_CL6_Shift, 15   @ bitWidth 3 (CL6)  
        .equ PF_CLIDR_CL7_Shift, 18   @ bitWidth 3 (CL7)  
        .equ PF_CLIDR_LoUIS_Shift, 21   @ bitWidth 3 (LoUIS)  
        .equ PF_CLIDR_LoC_Shift, 24   @ bitWidth 3 (LoC)  
        .equ PF_CLIDR_LoU_Shift, 27   @ bitWidth 3 (LoU)  
 
    .equ PF_CTR, PF_BASE + 0x4 @ (Cache Type register) 
        .equ PF_CTR__IminLine_Shift, 0   @ bitWidth 4 (IminLine)  
        .equ PF_CTR_DMinLine_Shift, 16   @ bitWidth 4 (DMinLine)  
        .equ PF_CTR_ERG_Shift, 20   @ bitWidth 4 (ERG)  
        .equ PF_CTR_CWG_Shift, 24   @ bitWidth 4 (CWG)  
        .equ PF_CTR_Format_Shift, 29   @ bitWidth 3 (Format)  
 
    .equ PF_CCSIDR, PF_BASE + 0x8 @ (Cache Size ID register) 
        .equ PF_CCSIDR_LineSize_Shift, 0   @ bitWidth 3 (LineSize)  
        .equ PF_CCSIDR_Associativity_Shift, 3   @ bitWidth 10 (Associativity)  
        .equ PF_CCSIDR_NumSets_Shift, 13   @ bitWidth 15 (NumSets)  
        .equ PF_CCSIDR_WA, 1 << 28   @ bitWidth 1 (WA)  
        .equ PF_CCSIDR_RA, 1 << 29   @ bitWidth 1 (RA)  
        .equ PF_CCSIDR_WB, 1 << 30   @ bitWidth 1 (WB)  
        .equ PF_CCSIDR_WT, 1 << 31   @ bitWidth 1 (WT)  
 

@=========================== AC ===========================@
.equ AC_BASE, 0xE000EF90 @ (Access control) 
    .equ AC_ITCMCR, AC_BASE + 0x0 @ (Instruction and Data Tightly-Coupled Memory Control Registers) 
        .equ AC_ITCMCR_EN, 1 << 0   @ bitWidth 1 (EN)  
        .equ AC_ITCMCR_RMW, 1 << 1   @ bitWidth 1 (RMW)  
        .equ AC_ITCMCR_RETEN, 1 << 2   @ bitWidth 1 (RETEN)  
        .equ AC_ITCMCR_SZ_Shift, 3   @ bitWidth 4 (SZ)  
 
    .equ AC_DTCMCR, AC_BASE + 0x4 @ (Instruction and Data Tightly-Coupled Memory Control Registers) 
        .equ AC_DTCMCR_EN, 1 << 0   @ bitWidth 1 (EN)  
        .equ AC_DTCMCR_RMW, 1 << 1   @ bitWidth 1 (RMW)  
        .equ AC_DTCMCR_RETEN, 1 << 2   @ bitWidth 1 (RETEN)  
        .equ AC_DTCMCR_SZ_Shift, 3   @ bitWidth 4 (SZ)  
 
    .equ AC_AHBPCR, AC_BASE + 0x8 @ (AHBP Control register) 
        .equ AC_AHBPCR_EN, 1 << 0   @ bitWidth 1 (EN)  
        .equ AC_AHBPCR_SZ_Shift, 1   @ bitWidth 3 (SZ)  
 
    .equ AC_CACR, AC_BASE + 0xC @ (Auxiliary Cache Control register) 
        .equ AC_CACR_SIWT, 1 << 0   @ bitWidth 1 (SIWT)  
        .equ AC_CACR_ECCEN, 1 << 1   @ bitWidth 1 (ECCEN)  
        .equ AC_CACR_FORCEWT, 1 << 2   @ bitWidth 1 (FORCEWT)  
 
    .equ AC_AHBSCR, AC_BASE + 0x10 @ (AHB Slave Control register) 
        .equ AC_AHBSCR_CTL_Shift, 0   @ bitWidth 2 (CTL)  
        .equ AC_AHBSCR_TPRI_Shift, 2   @ bitWidth 9 (TPRI)  
        .equ AC_AHBSCR_INITCOUNT_Shift, 11   @ bitWidth 5 (INITCOUNT)  
 
    .equ AC_ABFSR, AC_BASE + 0x18 @ (Auxiliary Bus Fault Status register) 
        .equ AC_ABFSR_ITCM, 1 << 0   @ bitWidth 1 (ITCM)  
        .equ AC_ABFSR_DTCM, 1 << 1   @ bitWidth 1 (DTCM)  
        .equ AC_ABFSR_AHBP, 1 << 2   @ bitWidth 1 (AHBP)  
        .equ AC_ABFSR_AXIM, 1 << 3   @ bitWidth 1 (AXIM)  
        .equ AC_ABFSR_EPPB, 1 << 4   @ bitWidth 1 (EPPB)  
        .equ AC_ABFSR_AXIMTYPE_Shift, 8   @ bitWidth 2 (AXIMTYPE)  
 
