\ RNG_CR (read-write) Reset:0x00000000
: RNG_CR_IE ( -- x addr ) 3 bit RNG_CR ; \ RNG_CR_IE, Interrupt enable
: RNG_CR_RNGEN ( -- x addr ) 2 bit RNG_CR ; \ RNG_CR_RNGEN, Random number generator enable

\ RNG_SR (multiple-access)  Reset:0x00000000
: RNG_SR_SEIS? ( -- 1|0 ) 6 bit RNG_SR bit@ ; \ RNG_SR_SEIS, Seed error interrupt status
: RNG_SR_CEIS? ( -- 1|0 ) 5 bit RNG_SR bit@ ; \ RNG_SR_CEIS, Clock error interrupt status
: RNG_SR_SECS? ( -- 1|0 ) 2 bit RNG_SR bit@ ; \ RNG_SR_SECS, Seed error current status
: RNG_SR_CECS? ( -- 1|0 ) 1 bit RNG_SR bit@ ; \ RNG_SR_CECS, Clock error current status
: RNG_SR_DRDY ( -- x addr ) 0 bit RNG_SR ; \ RNG_SR_DRDY, Data ready

\ RNG_DR (read-only) Reset:0x00000000
: RNG_DR_RNDATA? ( --  x ) RNG_DR @ ; \ RNG_DR_RNDATA, Random data

\ HASH_CR (multiple-access)  Reset:0x00000000
: HASH_CR_INIT ( -- x addr ) 2 bit HASH_CR ; \ HASH_CR_INIT, Initialize message digest calculation
: HASH_CR_DMAE ( -- x addr ) 3 bit HASH_CR ; \ HASH_CR_DMAE, DMA enable
: HASH_CR_DATATYPE ( %bb -- x addr ) 4 lshift HASH_CR ; \ HASH_CR_DATATYPE, Data type selection
: HASH_CR_MODE ( -- x addr ) 6 bit HASH_CR ; \ HASH_CR_MODE, Mode selection
: HASH_CR_ALGO0 ( -- x addr ) 7 bit HASH_CR ; \ HASH_CR_ALGO0, Algorithm selection
: HASH_CR_NBW ( %bbbb -- x addr ) 8 lshift HASH_CR ; \ HASH_CR_NBW, Number of words already pushed
: HASH_CR_DINNE ( -- x addr ) 12 bit HASH_CR ; \ HASH_CR_DINNE, DIN not empty
: HASH_CR_MDMAT ( -- x addr ) 13 bit HASH_CR ; \ HASH_CR_MDMAT, Multiple DMA Transfers
: HASH_CR_LKEY ( -- x addr ) 16 bit HASH_CR ; \ HASH_CR_LKEY, Long key selection
: HASH_CR_ALGO1 ( -- x addr ) 18 bit HASH_CR ; \ HASH_CR_ALGO1, ALGO

\ HASH_DIN (read-write) Reset:0x00000000
: HASH_DIN_DATAIN ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_DIN ; \ HASH_DIN_DATAIN, Data input

\ HASH_STR (multiple-access)  Reset:0x00000000
: HASH_STR_DCAL ( -- x addr ) 8 bit HASH_STR ; \ HASH_STR_DCAL, Digest calculation
: HASH_STR_NBLW ( %bbbbb -- x addr ) HASH_STR ; \ HASH_STR_NBLW, Number of valid bits in the last word of the message

\ HASH_HR0 (read-only) Reset:0x00000000
: HASH_HR0_H0? ( --  x ) HASH_HR0 @ ; \ HASH_HR0_H0, H0

\ HASH_HR1 (read-only) Reset:0x00000000
: HASH_HR1_H1? ( --  x ) HASH_HR1 @ ; \ HASH_HR1_H1, H1

\ HASH_HR2 (read-only) Reset:0x00000000
: HASH_HR2_H2? ( --  x ) HASH_HR2 @ ; \ HASH_HR2_H2, H2

\ HASH_HR3 (read-only) Reset:0x00000000
: HASH_HR3_H3? ( --  x ) HASH_HR3 @ ; \ HASH_HR3_H3, H3

\ HASH_HR4 (read-only) Reset:0x00000000
: HASH_HR4_H4? ( --  x ) HASH_HR4 @ ; \ HASH_HR4_H4, H4

\ HASH_IMR (read-write) Reset:0x00000000
: HASH_IMR_DCIE ( -- x addr ) 1 bit HASH_IMR ; \ HASH_IMR_DCIE, Digest calculation completion interrupt enable
: HASH_IMR_DINIE ( -- x addr ) 0 bit HASH_IMR ; \ HASH_IMR_DINIE, Data input interrupt enable

\ HASH_SR (multiple-access)  Reset:0x00000001
: HASH_SR_BUSY ( -- x addr ) 3 bit HASH_SR ; \ HASH_SR_BUSY, Busy bit
: HASH_SR_DMAS ( -- x addr ) 2 bit HASH_SR ; \ HASH_SR_DMAS, DMA Status
: HASH_SR_DCIS? ( -- 1|0 ) 1 bit HASH_SR bit@ ; \ HASH_SR_DCIS, Digest calculation completion interrupt status
: HASH_SR_DINIS? ( -- 1|0 ) 0 bit HASH_SR bit@ ; \ HASH_SR_DINIS, Data input interrupt status

\ HASH_CSR0 (read-write) Reset:0x00000000
: HASH_CSR0_CSR0 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR0 ; \ HASH_CSR0_CSR0, CSR0

\ HASH_CSR1 (read-write) Reset:0x00000000
: HASH_CSR1_CSR1 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR1 ; \ HASH_CSR1_CSR1, CSR1

\ HASH_CSR2 (read-write) Reset:0x00000000
: HASH_CSR2_CSR2 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR2 ; \ HASH_CSR2_CSR2, CSR2

\ HASH_CSR3 (read-write) Reset:0x00000000
: HASH_CSR3_CSR3 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR3 ; \ HASH_CSR3_CSR3, CSR3

\ HASH_CSR4 (read-write) Reset:0x00000000
: HASH_CSR4_CSR4 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR4 ; \ HASH_CSR4_CSR4, CSR4

\ HASH_CSR5 (read-write) Reset:0x00000000
: HASH_CSR5_CSR5 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR5 ; \ HASH_CSR5_CSR5, CSR5

\ HASH_CSR6 (read-write) Reset:0x00000000
: HASH_CSR6_CSR6 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR6 ; \ HASH_CSR6_CSR6, CSR6

\ HASH_CSR7 (read-write) Reset:0x00000000
: HASH_CSR7_CSR7 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR7 ; \ HASH_CSR7_CSR7, CSR7

\ HASH_CSR8 (read-write) Reset:0x00000000
: HASH_CSR8_CSR8 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR8 ; \ HASH_CSR8_CSR8, CSR8

\ HASH_CSR9 (read-write) Reset:0x00000000
: HASH_CSR9_CSR9 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR9 ; \ HASH_CSR9_CSR9, CSR9

\ HASH_CSR10 (read-write) Reset:0x00000000
: HASH_CSR10_CSR10 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR10 ; \ HASH_CSR10_CSR10, CSR10

\ HASH_CSR11 (read-write) Reset:0x00000000
: HASH_CSR11_CSR11 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR11 ; \ HASH_CSR11_CSR11, CSR11

\ HASH_CSR12 (read-write) Reset:0x00000000
: HASH_CSR12_CSR12 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR12 ; \ HASH_CSR12_CSR12, CSR12

\ HASH_CSR13 (read-write) Reset:0x00000000
: HASH_CSR13_CSR13 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR13 ; \ HASH_CSR13_CSR13, CSR13

\ HASH_CSR14 (read-write) Reset:0x00000000
: HASH_CSR14_CSR14 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR14 ; \ HASH_CSR14_CSR14, CSR14

\ HASH_CSR15 (read-write) Reset:0x00000000
: HASH_CSR15_CSR15 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR15 ; \ HASH_CSR15_CSR15, CSR15

\ HASH_CSR16 (read-write) Reset:0x00000000
: HASH_CSR16_CSR16 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR16 ; \ HASH_CSR16_CSR16, CSR16

\ HASH_CSR17 (read-write) Reset:0x00000000
: HASH_CSR17_CSR17 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR17 ; \ HASH_CSR17_CSR17, CSR17

\ HASH_CSR18 (read-write) Reset:0x00000000
: HASH_CSR18_CSR18 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR18 ; \ HASH_CSR18_CSR18, CSR18

\ HASH_CSR19 (read-write) Reset:0x00000000
: HASH_CSR19_CSR19 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR19 ; \ HASH_CSR19_CSR19, CSR19

\ HASH_CSR20 (read-write) Reset:0x00000000
: HASH_CSR20_CSR20 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR20 ; \ HASH_CSR20_CSR20, CSR20

\ HASH_CSR21 (read-write) Reset:0x00000000
: HASH_CSR21_CSR21 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR21 ; \ HASH_CSR21_CSR21, CSR21

\ HASH_CSR22 (read-write) Reset:0x00000000
: HASH_CSR22_CSR22 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR22 ; \ HASH_CSR22_CSR22, CSR22

\ HASH_CSR23 (read-write) Reset:0x00000000
: HASH_CSR23_CSR23 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR23 ; \ HASH_CSR23_CSR23, CSR23

\ HASH_CSR24 (read-write) Reset:0x00000000
: HASH_CSR24_CSR24 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR24 ; \ HASH_CSR24_CSR24, CSR24

\ HASH_CSR25 (read-write) Reset:0x00000000
: HASH_CSR25_CSR25 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR25 ; \ HASH_CSR25_CSR25, CSR25

\ HASH_CSR26 (read-write) Reset:0x00000000
: HASH_CSR26_CSR26 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR26 ; \ HASH_CSR26_CSR26, CSR26

\ HASH_CSR27 (read-write) Reset:0x00000000
: HASH_CSR27_CSR27 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR27 ; \ HASH_CSR27_CSR27, CSR27

\ HASH_CSR28 (read-write) Reset:0x00000000
: HASH_CSR28_CSR28 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR28 ; \ HASH_CSR28_CSR28, CSR28

\ HASH_CSR29 (read-write) Reset:0x00000000
: HASH_CSR29_CSR29 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR29 ; \ HASH_CSR29_CSR29, CSR29

\ HASH_CSR30 (read-write) Reset:0x00000000
: HASH_CSR30_CSR30 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR30 ; \ HASH_CSR30_CSR30, CSR30

\ HASH_CSR31 (read-write) Reset:0x00000000
: HASH_CSR31_CSR31 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR31 ; \ HASH_CSR31_CSR31, CSR31

\ HASH_CSR32 (read-write) Reset:0x00000000
: HASH_CSR32_CSR32 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR32 ; \ HASH_CSR32_CSR32, CSR32

\ HASH_CSR33 (read-write) Reset:0x00000000
: HASH_CSR33_CSR33 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR33 ; \ HASH_CSR33_CSR33, CSR33

\ HASH_CSR34 (read-write) Reset:0x00000000
: HASH_CSR34_CSR34 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR34 ; \ HASH_CSR34_CSR34, CSR34

\ HASH_CSR35 (read-write) Reset:0x00000000
: HASH_CSR35_CSR35 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR35 ; \ HASH_CSR35_CSR35, CSR35

\ HASH_CSR36 (read-write) Reset:0x00000000
: HASH_CSR36_CSR36 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR36 ; \ HASH_CSR36_CSR36, CSR36

\ HASH_CSR37 (read-write) Reset:0x00000000
: HASH_CSR37_CSR37 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR37 ; \ HASH_CSR37_CSR37, CSR37

\ HASH_CSR38 (read-write) Reset:0x00000000
: HASH_CSR38_CSR38 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR38 ; \ HASH_CSR38_CSR38, CSR38

\ HASH_CSR39 (read-write) Reset:0x00000000
: HASH_CSR39_CSR39 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR39 ; \ HASH_CSR39_CSR39, CSR39

\ HASH_CSR40 (read-write) Reset:0x00000000
: HASH_CSR40_CSR40 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR40 ; \ HASH_CSR40_CSR40, CSR40

\ HASH_CSR41 (read-write) Reset:0x00000000
: HASH_CSR41_CSR41 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR41 ; \ HASH_CSR41_CSR41, CSR41

\ HASH_CSR42 (read-write) Reset:0x00000000
: HASH_CSR42_CSR42 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR42 ; \ HASH_CSR42_CSR42, CSR42

\ HASH_CSR43 (read-write) Reset:0x00000000
: HASH_CSR43_CSR43 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR43 ; \ HASH_CSR43_CSR43, CSR43

\ HASH_CSR44 (read-write) Reset:0x00000000
: HASH_CSR44_CSR44 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR44 ; \ HASH_CSR44_CSR44, CSR44

\ HASH_CSR45 (read-write) Reset:0x00000000
: HASH_CSR45_CSR45 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR45 ; \ HASH_CSR45_CSR45, CSR45

\ HASH_CSR46 (read-write) Reset:0x00000000
: HASH_CSR46_CSR46 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR46 ; \ HASH_CSR46_CSR46, CSR46

\ HASH_CSR47 (read-write) Reset:0x00000000
: HASH_CSR47_CSR47 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR47 ; \ HASH_CSR47_CSR47, CSR47

\ HASH_CSR48 (read-write) Reset:0x00000000
: HASH_CSR48_CSR48 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR48 ; \ HASH_CSR48_CSR48, CSR48

\ HASH_CSR49 (read-write) Reset:0x00000000
: HASH_CSR49_CSR49 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR49 ; \ HASH_CSR49_CSR49, CSR49

\ HASH_CSR50 (read-write) Reset:0x00000000
: HASH_CSR50_CSR50 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR50 ; \ HASH_CSR50_CSR50, CSR50

\ HASH_CSR51 (read-write) Reset:0x00000000
: HASH_CSR51_CSR51 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR51 ; \ HASH_CSR51_CSR51, CSR51

\ HASH_CSR52 (read-write) Reset:0x00000000
: HASH_CSR52_CSR52 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR52 ; \ HASH_CSR52_CSR52, CSR52

\ HASH_CSR53 (read-write) Reset:0x00000000
: HASH_CSR53_CSR53 ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) HASH_CSR53 ; \ HASH_CSR53_CSR53, CSR53

\ HASH_HASH_HR0 (read-only) Reset:0x00000000
: HASH_HASH_HR0_H0? ( --  x ) HASH_HASH_HR0 @ ; \ HASH_HASH_HR0_H0, H0

\ HASH_HASH_HR1 (read-only) Reset:0x00000000
: HASH_HASH_HR1_H1? ( --  x ) HASH_HASH_HR1 @ ; \ HASH_HASH_HR1_H1, H1

\ HASH_HASH_HR2 (read-only) Reset:0x00000000
: HASH_HASH_HR2_H2? ( --  x ) HASH_HASH_HR2 @ ; \ HASH_HASH_HR2_H2, H2

\ HASH_HASH_HR3 (read-only) Reset:0x00000000
: HASH_HASH_HR3_H3? ( --  x ) HASH_HASH_HR3 @ ; \ HASH_HASH_HR3_H3, H3

\ HASH_HASH_HR4 (read-only) Reset:0x00000000
: HASH_HASH_HR4_H4? ( --  x ) HASH_HASH_HR4 @ ; \ HASH_HASH_HR4_H4, H4

\ HASH_HASH_HR5 (read-only) Reset:0x00000000
: HASH_HASH_HR5_H5? ( --  x ) HASH_HASH_HR5 @ ; \ HASH_HASH_HR5_H5, H5

\ HASH_HASH_HR6 (read-only) Reset:0x00000000
: HASH_HASH_HR6_H6? ( --  x ) HASH_HASH_HR6 @ ; \ HASH_HASH_HR6_H6, H6

\ HASH_HASH_HR7 (read-only) Reset:0x00000000
: HASH_HASH_HR7_H7? ( --  x ) HASH_HASH_HR7 @ ; \ HASH_HASH_HR7_H7, H7

\ CRYP_CR (multiple-access)  Reset:0x00000000
: CRYP_CR_ALGODIR ( -- x addr ) 2 bit CRYP_CR ; \ CRYP_CR_ALGODIR, Algorithm direction
: CRYP_CR_ALGOMODE0 ( %bbb -- x addr ) 3 lshift CRYP_CR ; \ CRYP_CR_ALGOMODE0, Algorithm mode
: CRYP_CR_DATATYPE ( %bb -- x addr ) 6 lshift CRYP_CR ; \ CRYP_CR_DATATYPE, Data type selection
: CRYP_CR_KEYSIZE ( %bb -- x addr ) 8 lshift CRYP_CR ; \ CRYP_CR_KEYSIZE, Key size selection AES mode only
: CRYP_CR_FFLUSH ( -- x addr ) 14 bit CRYP_CR ; \ CRYP_CR_FFLUSH, FIFO flush
: CRYP_CR_CRYPEN ( -- x addr ) 15 bit CRYP_CR ; \ CRYP_CR_CRYPEN, Cryptographic processor enable
: CRYP_CR_GCM_CCMPH ( %bb -- x addr ) 16 lshift CRYP_CR ; \ CRYP_CR_GCM_CCMPH, GCM_CCMPH
: CRYP_CR_ALGOMODE3 ( -- x addr ) 19 bit CRYP_CR ; \ CRYP_CR_ALGOMODE3, ALGOMODE

\ CRYP_SR (read-only) Reset:0x00000003
: CRYP_SR_BUSY? ( --  1|0 ) 4 bit CRYP_SR bit@ ; \ CRYP_SR_BUSY, Busy bit
: CRYP_SR_OFFU? ( --  1|0 ) 3 bit CRYP_SR bit@ ; \ CRYP_SR_OFFU, Output FIFO full
: CRYP_SR_OFNE? ( --  1|0 ) 2 bit CRYP_SR bit@ ; \ CRYP_SR_OFNE, Output FIFO not empty
: CRYP_SR_IFNF? ( --  1|0 ) 1 bit CRYP_SR bit@ ; \ CRYP_SR_IFNF, Input FIFO not full
: CRYP_SR_IFEM? ( --  1|0 ) 0 bit CRYP_SR bit@ ; \ CRYP_SR_IFEM, Input FIFO empty

\ CRYP_DIN (read-write) Reset:0x00000000
: CRYP_DIN_DATAIN ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_DIN ; \ CRYP_DIN_DATAIN, Data input

\ CRYP_DOUT (read-only) Reset:0x00000000
: CRYP_DOUT_DATAOUT? ( --  x ) CRYP_DOUT @ ; \ CRYP_DOUT_DATAOUT, Data output

\ CRYP_DMACR (read-write) Reset:0x00000000
: CRYP_DMACR_DOEN ( -- x addr ) 1 bit CRYP_DMACR ; \ CRYP_DMACR_DOEN, DMA output enable
: CRYP_DMACR_DIEN ( -- x addr ) 0 bit CRYP_DMACR ; \ CRYP_DMACR_DIEN, DMA input enable

\ CRYP_IMSCR (read-write) Reset:0x00000000
: CRYP_IMSCR_OUTIM ( -- x addr ) 1 bit CRYP_IMSCR ; \ CRYP_IMSCR_OUTIM, Output FIFO service interrupt mask
: CRYP_IMSCR_INIM ( -- x addr ) 0 bit CRYP_IMSCR ; \ CRYP_IMSCR_INIM, Input FIFO service interrupt mask

\ CRYP_RISR (read-only) Reset:0x00000001
: CRYP_RISR_OUTRIS? ( --  1|0 ) 1 bit CRYP_RISR bit@ ; \ CRYP_RISR_OUTRIS, Output FIFO service raw interrupt status
: CRYP_RISR_INRIS? ( --  1|0 ) 0 bit CRYP_RISR bit@ ; \ CRYP_RISR_INRIS, Input FIFO service raw interrupt status

\ CRYP_MISR (read-only) Reset:0x00000000
: CRYP_MISR_OUTMIS? ( --  1|0 ) 1 bit CRYP_MISR bit@ ; \ CRYP_MISR_OUTMIS, Output FIFO service masked interrupt status
: CRYP_MISR_INMIS? ( --  1|0 ) 0 bit CRYP_MISR bit@ ; \ CRYP_MISR_INMIS, Input FIFO service masked interrupt status

\ CRYP_K0LR (write-only) Reset:0x00000000
: CRYP_K0LR_b224 ( -- x addr ) 0 bit CRYP_K0LR ; \ CRYP_K0LR_b224, b224
: CRYP_K0LR_b225 ( -- x addr ) 1 bit CRYP_K0LR ; \ CRYP_K0LR_b225, b225
: CRYP_K0LR_b226 ( -- x addr ) 2 bit CRYP_K0LR ; \ CRYP_K0LR_b226, b226
: CRYP_K0LR_b227 ( -- x addr ) 3 bit CRYP_K0LR ; \ CRYP_K0LR_b227, b227
: CRYP_K0LR_b228 ( -- x addr ) 4 bit CRYP_K0LR ; \ CRYP_K0LR_b228, b228
: CRYP_K0LR_b229 ( -- x addr ) 5 bit CRYP_K0LR ; \ CRYP_K0LR_b229, b229
: CRYP_K0LR_b230 ( -- x addr ) 6 bit CRYP_K0LR ; \ CRYP_K0LR_b230, b230
: CRYP_K0LR_b231 ( -- x addr ) 7 bit CRYP_K0LR ; \ CRYP_K0LR_b231, b231
: CRYP_K0LR_b232 ( -- x addr ) 8 bit CRYP_K0LR ; \ CRYP_K0LR_b232, b232
: CRYP_K0LR_b233 ( -- x addr ) 9 bit CRYP_K0LR ; \ CRYP_K0LR_b233, b233
: CRYP_K0LR_b234 ( -- x addr ) 10 bit CRYP_K0LR ; \ CRYP_K0LR_b234, b234
: CRYP_K0LR_b235 ( -- x addr ) 11 bit CRYP_K0LR ; \ CRYP_K0LR_b235, b235
: CRYP_K0LR_b236 ( -- x addr ) 12 bit CRYP_K0LR ; \ CRYP_K0LR_b236, b236
: CRYP_K0LR_b237 ( -- x addr ) 13 bit CRYP_K0LR ; \ CRYP_K0LR_b237, b237
: CRYP_K0LR_b238 ( -- x addr ) 14 bit CRYP_K0LR ; \ CRYP_K0LR_b238, b238
: CRYP_K0LR_b239 ( -- x addr ) 15 bit CRYP_K0LR ; \ CRYP_K0LR_b239, b239
: CRYP_K0LR_b240 ( -- x addr ) 16 bit CRYP_K0LR ; \ CRYP_K0LR_b240, b240
: CRYP_K0LR_b241 ( -- x addr ) 17 bit CRYP_K0LR ; \ CRYP_K0LR_b241, b241
: CRYP_K0LR_b242 ( -- x addr ) 18 bit CRYP_K0LR ; \ CRYP_K0LR_b242, b242
: CRYP_K0LR_b243 ( -- x addr ) 19 bit CRYP_K0LR ; \ CRYP_K0LR_b243, b243
: CRYP_K0LR_b244 ( -- x addr ) 20 bit CRYP_K0LR ; \ CRYP_K0LR_b244, b244
: CRYP_K0LR_b245 ( -- x addr ) 21 bit CRYP_K0LR ; \ CRYP_K0LR_b245, b245
: CRYP_K0LR_b246 ( -- x addr ) 22 bit CRYP_K0LR ; \ CRYP_K0LR_b246, b246
: CRYP_K0LR_b247 ( -- x addr ) 23 bit CRYP_K0LR ; \ CRYP_K0LR_b247, b247
: CRYP_K0LR_b248 ( -- x addr ) 24 bit CRYP_K0LR ; \ CRYP_K0LR_b248, b248
: CRYP_K0LR_b249 ( -- x addr ) 25 bit CRYP_K0LR ; \ CRYP_K0LR_b249, b249
: CRYP_K0LR_b250 ( -- x addr ) 26 bit CRYP_K0LR ; \ CRYP_K0LR_b250, b250
: CRYP_K0LR_b251 ( -- x addr ) 27 bit CRYP_K0LR ; \ CRYP_K0LR_b251, b251
: CRYP_K0LR_b252 ( -- x addr ) 28 bit CRYP_K0LR ; \ CRYP_K0LR_b252, b252
: CRYP_K0LR_b253 ( -- x addr ) 29 bit CRYP_K0LR ; \ CRYP_K0LR_b253, b253
: CRYP_K0LR_b254 ( -- x addr ) 30 bit CRYP_K0LR ; \ CRYP_K0LR_b254, b254
: CRYP_K0LR_b255 ( -- x addr ) 31 bit CRYP_K0LR ; \ CRYP_K0LR_b255, b255

\ CRYP_K0RR (write-only) Reset:0x00000000
: CRYP_K0RR_b192 ( -- x addr ) 0 bit CRYP_K0RR ; \ CRYP_K0RR_b192, b192
: CRYP_K0RR_b193 ( -- x addr ) 1 bit CRYP_K0RR ; \ CRYP_K0RR_b193, b193
: CRYP_K0RR_b194 ( -- x addr ) 2 bit CRYP_K0RR ; \ CRYP_K0RR_b194, b194
: CRYP_K0RR_b195 ( -- x addr ) 3 bit CRYP_K0RR ; \ CRYP_K0RR_b195, b195
: CRYP_K0RR_b196 ( -- x addr ) 4 bit CRYP_K0RR ; \ CRYP_K0RR_b196, b196
: CRYP_K0RR_b197 ( -- x addr ) 5 bit CRYP_K0RR ; \ CRYP_K0RR_b197, b197
: CRYP_K0RR_b198 ( -- x addr ) 6 bit CRYP_K0RR ; \ CRYP_K0RR_b198, b198
: CRYP_K0RR_b199 ( -- x addr ) 7 bit CRYP_K0RR ; \ CRYP_K0RR_b199, b199
: CRYP_K0RR_b200 ( -- x addr ) 8 bit CRYP_K0RR ; \ CRYP_K0RR_b200, b200
: CRYP_K0RR_b201 ( -- x addr ) 9 bit CRYP_K0RR ; \ CRYP_K0RR_b201, b201
: CRYP_K0RR_b202 ( -- x addr ) 10 bit CRYP_K0RR ; \ CRYP_K0RR_b202, b202
: CRYP_K0RR_b203 ( -- x addr ) 11 bit CRYP_K0RR ; \ CRYP_K0RR_b203, b203
: CRYP_K0RR_b204 ( -- x addr ) 12 bit CRYP_K0RR ; \ CRYP_K0RR_b204, b204
: CRYP_K0RR_b205 ( -- x addr ) 13 bit CRYP_K0RR ; \ CRYP_K0RR_b205, b205
: CRYP_K0RR_b206 ( -- x addr ) 14 bit CRYP_K0RR ; \ CRYP_K0RR_b206, b206
: CRYP_K0RR_b207 ( -- x addr ) 15 bit CRYP_K0RR ; \ CRYP_K0RR_b207, b207
: CRYP_K0RR_b208 ( -- x addr ) 16 bit CRYP_K0RR ; \ CRYP_K0RR_b208, b208
: CRYP_K0RR_b209 ( -- x addr ) 17 bit CRYP_K0RR ; \ CRYP_K0RR_b209, b209
: CRYP_K0RR_b210 ( -- x addr ) 18 bit CRYP_K0RR ; \ CRYP_K0RR_b210, b210
: CRYP_K0RR_b211 ( -- x addr ) 19 bit CRYP_K0RR ; \ CRYP_K0RR_b211, b211
: CRYP_K0RR_b212 ( -- x addr ) 20 bit CRYP_K0RR ; \ CRYP_K0RR_b212, b212
: CRYP_K0RR_b213 ( -- x addr ) 21 bit CRYP_K0RR ; \ CRYP_K0RR_b213, b213
: CRYP_K0RR_b214 ( -- x addr ) 22 bit CRYP_K0RR ; \ CRYP_K0RR_b214, b214
: CRYP_K0RR_b215 ( -- x addr ) 23 bit CRYP_K0RR ; \ CRYP_K0RR_b215, b215
: CRYP_K0RR_b216 ( -- x addr ) 24 bit CRYP_K0RR ; \ CRYP_K0RR_b216, b216
: CRYP_K0RR_b217 ( -- x addr ) 25 bit CRYP_K0RR ; \ CRYP_K0RR_b217, b217
: CRYP_K0RR_b218 ( -- x addr ) 26 bit CRYP_K0RR ; \ CRYP_K0RR_b218, b218
: CRYP_K0RR_b219 ( -- x addr ) 27 bit CRYP_K0RR ; \ CRYP_K0RR_b219, b219
: CRYP_K0RR_b220 ( -- x addr ) 28 bit CRYP_K0RR ; \ CRYP_K0RR_b220, b220
: CRYP_K0RR_b221 ( -- x addr ) 29 bit CRYP_K0RR ; \ CRYP_K0RR_b221, b221
: CRYP_K0RR_b222 ( -- x addr ) 30 bit CRYP_K0RR ; \ CRYP_K0RR_b222, b222
: CRYP_K0RR_b223 ( -- x addr ) 31 bit CRYP_K0RR ; \ CRYP_K0RR_b223, b223

\ CRYP_K1LR (write-only) Reset:0x00000000
: CRYP_K1LR_b160 ( -- x addr ) 0 bit CRYP_K1LR ; \ CRYP_K1LR_b160, b160
: CRYP_K1LR_b161 ( -- x addr ) 1 bit CRYP_K1LR ; \ CRYP_K1LR_b161, b161
: CRYP_K1LR_b162 ( -- x addr ) 2 bit CRYP_K1LR ; \ CRYP_K1LR_b162, b162
: CRYP_K1LR_b163 ( -- x addr ) 3 bit CRYP_K1LR ; \ CRYP_K1LR_b163, b163
: CRYP_K1LR_b164 ( -- x addr ) 4 bit CRYP_K1LR ; \ CRYP_K1LR_b164, b164
: CRYP_K1LR_b165 ( -- x addr ) 5 bit CRYP_K1LR ; \ CRYP_K1LR_b165, b165
: CRYP_K1LR_b166 ( -- x addr ) 6 bit CRYP_K1LR ; \ CRYP_K1LR_b166, b166
: CRYP_K1LR_b167 ( -- x addr ) 7 bit CRYP_K1LR ; \ CRYP_K1LR_b167, b167
: CRYP_K1LR_b168 ( -- x addr ) 8 bit CRYP_K1LR ; \ CRYP_K1LR_b168, b168
: CRYP_K1LR_b169 ( -- x addr ) 9 bit CRYP_K1LR ; \ CRYP_K1LR_b169, b169
: CRYP_K1LR_b170 ( -- x addr ) 10 bit CRYP_K1LR ; \ CRYP_K1LR_b170, b170
: CRYP_K1LR_b171 ( -- x addr ) 11 bit CRYP_K1LR ; \ CRYP_K1LR_b171, b171
: CRYP_K1LR_b172 ( -- x addr ) 12 bit CRYP_K1LR ; \ CRYP_K1LR_b172, b172
: CRYP_K1LR_b173 ( -- x addr ) 13 bit CRYP_K1LR ; \ CRYP_K1LR_b173, b173
: CRYP_K1LR_b174 ( -- x addr ) 14 bit CRYP_K1LR ; \ CRYP_K1LR_b174, b174
: CRYP_K1LR_b175 ( -- x addr ) 15 bit CRYP_K1LR ; \ CRYP_K1LR_b175, b175
: CRYP_K1LR_b176 ( -- x addr ) 16 bit CRYP_K1LR ; \ CRYP_K1LR_b176, b176
: CRYP_K1LR_b177 ( -- x addr ) 17 bit CRYP_K1LR ; \ CRYP_K1LR_b177, b177
: CRYP_K1LR_b178 ( -- x addr ) 18 bit CRYP_K1LR ; \ CRYP_K1LR_b178, b178
: CRYP_K1LR_b179 ( -- x addr ) 19 bit CRYP_K1LR ; \ CRYP_K1LR_b179, b179
: CRYP_K1LR_b180 ( -- x addr ) 20 bit CRYP_K1LR ; \ CRYP_K1LR_b180, b180
: CRYP_K1LR_b181 ( -- x addr ) 21 bit CRYP_K1LR ; \ CRYP_K1LR_b181, b181
: CRYP_K1LR_b182 ( -- x addr ) 22 bit CRYP_K1LR ; \ CRYP_K1LR_b182, b182
: CRYP_K1LR_b183 ( -- x addr ) 23 bit CRYP_K1LR ; \ CRYP_K1LR_b183, b183
: CRYP_K1LR_b184 ( -- x addr ) 24 bit CRYP_K1LR ; \ CRYP_K1LR_b184, b184
: CRYP_K1LR_b185 ( -- x addr ) 25 bit CRYP_K1LR ; \ CRYP_K1LR_b185, b185
: CRYP_K1LR_b186 ( -- x addr ) 26 bit CRYP_K1LR ; \ CRYP_K1LR_b186, b186
: CRYP_K1LR_b187 ( -- x addr ) 27 bit CRYP_K1LR ; \ CRYP_K1LR_b187, b187
: CRYP_K1LR_b188 ( -- x addr ) 28 bit CRYP_K1LR ; \ CRYP_K1LR_b188, b188
: CRYP_K1LR_b189 ( -- x addr ) 29 bit CRYP_K1LR ; \ CRYP_K1LR_b189, b189
: CRYP_K1LR_b190 ( -- x addr ) 30 bit CRYP_K1LR ; \ CRYP_K1LR_b190, b190
: CRYP_K1LR_b191 ( -- x addr ) 31 bit CRYP_K1LR ; \ CRYP_K1LR_b191, b191

\ CRYP_K1RR (write-only) Reset:0x00000000
: CRYP_K1RR_b128 ( -- x addr ) 0 bit CRYP_K1RR ; \ CRYP_K1RR_b128, b128
: CRYP_K1RR_b129 ( -- x addr ) 1 bit CRYP_K1RR ; \ CRYP_K1RR_b129, b129
: CRYP_K1RR_b130 ( -- x addr ) 2 bit CRYP_K1RR ; \ CRYP_K1RR_b130, b130
: CRYP_K1RR_b131 ( -- x addr ) 3 bit CRYP_K1RR ; \ CRYP_K1RR_b131, b131
: CRYP_K1RR_b132 ( -- x addr ) 4 bit CRYP_K1RR ; \ CRYP_K1RR_b132, b132
: CRYP_K1RR_b133 ( -- x addr ) 5 bit CRYP_K1RR ; \ CRYP_K1RR_b133, b133
: CRYP_K1RR_b134 ( -- x addr ) 6 bit CRYP_K1RR ; \ CRYP_K1RR_b134, b134
: CRYP_K1RR_b135 ( -- x addr ) 7 bit CRYP_K1RR ; \ CRYP_K1RR_b135, b135
: CRYP_K1RR_b136 ( -- x addr ) 8 bit CRYP_K1RR ; \ CRYP_K1RR_b136, b136
: CRYP_K1RR_b137 ( -- x addr ) 9 bit CRYP_K1RR ; \ CRYP_K1RR_b137, b137
: CRYP_K1RR_b138 ( -- x addr ) 10 bit CRYP_K1RR ; \ CRYP_K1RR_b138, b138
: CRYP_K1RR_b139 ( -- x addr ) 11 bit CRYP_K1RR ; \ CRYP_K1RR_b139, b139
: CRYP_K1RR_b140 ( -- x addr ) 12 bit CRYP_K1RR ; \ CRYP_K1RR_b140, b140
: CRYP_K1RR_b141 ( -- x addr ) 13 bit CRYP_K1RR ; \ CRYP_K1RR_b141, b141
: CRYP_K1RR_b142 ( -- x addr ) 14 bit CRYP_K1RR ; \ CRYP_K1RR_b142, b142
: CRYP_K1RR_b143 ( -- x addr ) 15 bit CRYP_K1RR ; \ CRYP_K1RR_b143, b143
: CRYP_K1RR_b144 ( -- x addr ) 16 bit CRYP_K1RR ; \ CRYP_K1RR_b144, b144
: CRYP_K1RR_b145 ( -- x addr ) 17 bit CRYP_K1RR ; \ CRYP_K1RR_b145, b145
: CRYP_K1RR_b146 ( -- x addr ) 18 bit CRYP_K1RR ; \ CRYP_K1RR_b146, b146
: CRYP_K1RR_b147 ( -- x addr ) 19 bit CRYP_K1RR ; \ CRYP_K1RR_b147, b147
: CRYP_K1RR_b148 ( -- x addr ) 20 bit CRYP_K1RR ; \ CRYP_K1RR_b148, b148
: CRYP_K1RR_b149 ( -- x addr ) 21 bit CRYP_K1RR ; \ CRYP_K1RR_b149, b149
: CRYP_K1RR_b150 ( -- x addr ) 22 bit CRYP_K1RR ; \ CRYP_K1RR_b150, b150
: CRYP_K1RR_b151 ( -- x addr ) 23 bit CRYP_K1RR ; \ CRYP_K1RR_b151, b151
: CRYP_K1RR_b152 ( -- x addr ) 24 bit CRYP_K1RR ; \ CRYP_K1RR_b152, b152
: CRYP_K1RR_b153 ( -- x addr ) 25 bit CRYP_K1RR ; \ CRYP_K1RR_b153, b153
: CRYP_K1RR_b154 ( -- x addr ) 26 bit CRYP_K1RR ; \ CRYP_K1RR_b154, b154
: CRYP_K1RR_b155 ( -- x addr ) 27 bit CRYP_K1RR ; \ CRYP_K1RR_b155, b155
: CRYP_K1RR_b156 ( -- x addr ) 28 bit CRYP_K1RR ; \ CRYP_K1RR_b156, b156
: CRYP_K1RR_b157 ( -- x addr ) 29 bit CRYP_K1RR ; \ CRYP_K1RR_b157, b157
: CRYP_K1RR_b158 ( -- x addr ) 30 bit CRYP_K1RR ; \ CRYP_K1RR_b158, b158
: CRYP_K1RR_b159 ( -- x addr ) 31 bit CRYP_K1RR ; \ CRYP_K1RR_b159, b159

\ CRYP_K2LR (write-only) Reset:0x00000000
: CRYP_K2LR_b96 ( -- x addr ) 0 bit CRYP_K2LR ; \ CRYP_K2LR_b96, b96
: CRYP_K2LR_b97 ( -- x addr ) 1 bit CRYP_K2LR ; \ CRYP_K2LR_b97, b97
: CRYP_K2LR_b98 ( -- x addr ) 2 bit CRYP_K2LR ; \ CRYP_K2LR_b98, b98
: CRYP_K2LR_b99 ( -- x addr ) 3 bit CRYP_K2LR ; \ CRYP_K2LR_b99, b99
: CRYP_K2LR_b100 ( -- x addr ) 4 bit CRYP_K2LR ; \ CRYP_K2LR_b100, b100
: CRYP_K2LR_b101 ( -- x addr ) 5 bit CRYP_K2LR ; \ CRYP_K2LR_b101, b101
: CRYP_K2LR_b102 ( -- x addr ) 6 bit CRYP_K2LR ; \ CRYP_K2LR_b102, b102
: CRYP_K2LR_b103 ( -- x addr ) 7 bit CRYP_K2LR ; \ CRYP_K2LR_b103, b103
: CRYP_K2LR_b104 ( -- x addr ) 8 bit CRYP_K2LR ; \ CRYP_K2LR_b104, b104
: CRYP_K2LR_b105 ( -- x addr ) 9 bit CRYP_K2LR ; \ CRYP_K2LR_b105, b105
: CRYP_K2LR_b106 ( -- x addr ) 10 bit CRYP_K2LR ; \ CRYP_K2LR_b106, b106
: CRYP_K2LR_b107 ( -- x addr ) 11 bit CRYP_K2LR ; \ CRYP_K2LR_b107, b107
: CRYP_K2LR_b108 ( -- x addr ) 12 bit CRYP_K2LR ; \ CRYP_K2LR_b108, b108
: CRYP_K2LR_b109 ( -- x addr ) 13 bit CRYP_K2LR ; \ CRYP_K2LR_b109, b109
: CRYP_K2LR_b110 ( -- x addr ) 14 bit CRYP_K2LR ; \ CRYP_K2LR_b110, b110
: CRYP_K2LR_b111 ( -- x addr ) 15 bit CRYP_K2LR ; \ CRYP_K2LR_b111, b111
: CRYP_K2LR_b112 ( -- x addr ) 16 bit CRYP_K2LR ; \ CRYP_K2LR_b112, b112
: CRYP_K2LR_b113 ( -- x addr ) 17 bit CRYP_K2LR ; \ CRYP_K2LR_b113, b113
: CRYP_K2LR_b114 ( -- x addr ) 18 bit CRYP_K2LR ; \ CRYP_K2LR_b114, b114
: CRYP_K2LR_b115 ( -- x addr ) 19 bit CRYP_K2LR ; \ CRYP_K2LR_b115, b115
: CRYP_K2LR_b116 ( -- x addr ) 20 bit CRYP_K2LR ; \ CRYP_K2LR_b116, b116
: CRYP_K2LR_b117 ( -- x addr ) 21 bit CRYP_K2LR ; \ CRYP_K2LR_b117, b117
: CRYP_K2LR_b118 ( -- x addr ) 22 bit CRYP_K2LR ; \ CRYP_K2LR_b118, b118
: CRYP_K2LR_b119 ( -- x addr ) 23 bit CRYP_K2LR ; \ CRYP_K2LR_b119, b119
: CRYP_K2LR_b120 ( -- x addr ) 24 bit CRYP_K2LR ; \ CRYP_K2LR_b120, b120
: CRYP_K2LR_b121 ( -- x addr ) 25 bit CRYP_K2LR ; \ CRYP_K2LR_b121, b121
: CRYP_K2LR_b122 ( -- x addr ) 26 bit CRYP_K2LR ; \ CRYP_K2LR_b122, b122
: CRYP_K2LR_b123 ( -- x addr ) 27 bit CRYP_K2LR ; \ CRYP_K2LR_b123, b123
: CRYP_K2LR_b124 ( -- x addr ) 28 bit CRYP_K2LR ; \ CRYP_K2LR_b124, b124
: CRYP_K2LR_b125 ( -- x addr ) 29 bit CRYP_K2LR ; \ CRYP_K2LR_b125, b125
: CRYP_K2LR_b126 ( -- x addr ) 30 bit CRYP_K2LR ; \ CRYP_K2LR_b126, b126
: CRYP_K2LR_b127 ( -- x addr ) 31 bit CRYP_K2LR ; \ CRYP_K2LR_b127, b127

\ CRYP_K2RR (write-only) Reset:0x00000000
: CRYP_K2RR_b64 ( -- x addr ) 0 bit CRYP_K2RR ; \ CRYP_K2RR_b64, b64
: CRYP_K2RR_b65 ( -- x addr ) 1 bit CRYP_K2RR ; \ CRYP_K2RR_b65, b65
: CRYP_K2RR_b66 ( -- x addr ) 2 bit CRYP_K2RR ; \ CRYP_K2RR_b66, b66
: CRYP_K2RR_b67 ( -- x addr ) 3 bit CRYP_K2RR ; \ CRYP_K2RR_b67, b67
: CRYP_K2RR_b68 ( -- x addr ) 4 bit CRYP_K2RR ; \ CRYP_K2RR_b68, b68
: CRYP_K2RR_b69 ( -- x addr ) 5 bit CRYP_K2RR ; \ CRYP_K2RR_b69, b69
: CRYP_K2RR_b70 ( -- x addr ) 6 bit CRYP_K2RR ; \ CRYP_K2RR_b70, b70
: CRYP_K2RR_b71 ( -- x addr ) 7 bit CRYP_K2RR ; \ CRYP_K2RR_b71, b71
: CRYP_K2RR_b72 ( -- x addr ) 8 bit CRYP_K2RR ; \ CRYP_K2RR_b72, b72
: CRYP_K2RR_b73 ( -- x addr ) 9 bit CRYP_K2RR ; \ CRYP_K2RR_b73, b73
: CRYP_K2RR_b74 ( -- x addr ) 10 bit CRYP_K2RR ; \ CRYP_K2RR_b74, b74
: CRYP_K2RR_b75 ( -- x addr ) 11 bit CRYP_K2RR ; \ CRYP_K2RR_b75, b75
: CRYP_K2RR_b76 ( -- x addr ) 12 bit CRYP_K2RR ; \ CRYP_K2RR_b76, b76
: CRYP_K2RR_b77 ( -- x addr ) 13 bit CRYP_K2RR ; \ CRYP_K2RR_b77, b77
: CRYP_K2RR_b78 ( -- x addr ) 14 bit CRYP_K2RR ; \ CRYP_K2RR_b78, b78
: CRYP_K2RR_b79 ( -- x addr ) 15 bit CRYP_K2RR ; \ CRYP_K2RR_b79, b79
: CRYP_K2RR_b80 ( -- x addr ) 16 bit CRYP_K2RR ; \ CRYP_K2RR_b80, b80
: CRYP_K2RR_b81 ( -- x addr ) 17 bit CRYP_K2RR ; \ CRYP_K2RR_b81, b81
: CRYP_K2RR_b82 ( -- x addr ) 18 bit CRYP_K2RR ; \ CRYP_K2RR_b82, b82
: CRYP_K2RR_b83 ( -- x addr ) 19 bit CRYP_K2RR ; \ CRYP_K2RR_b83, b83
: CRYP_K2RR_b84 ( -- x addr ) 20 bit CRYP_K2RR ; \ CRYP_K2RR_b84, b84
: CRYP_K2RR_b85 ( -- x addr ) 21 bit CRYP_K2RR ; \ CRYP_K2RR_b85, b85
: CRYP_K2RR_b86 ( -- x addr ) 22 bit CRYP_K2RR ; \ CRYP_K2RR_b86, b86
: CRYP_K2RR_b87 ( -- x addr ) 23 bit CRYP_K2RR ; \ CRYP_K2RR_b87, b87
: CRYP_K2RR_b88 ( -- x addr ) 24 bit CRYP_K2RR ; \ CRYP_K2RR_b88, b88
: CRYP_K2RR_b89 ( -- x addr ) 25 bit CRYP_K2RR ; \ CRYP_K2RR_b89, b89
: CRYP_K2RR_b90 ( -- x addr ) 26 bit CRYP_K2RR ; \ CRYP_K2RR_b90, b90
: CRYP_K2RR_b91 ( -- x addr ) 27 bit CRYP_K2RR ; \ CRYP_K2RR_b91, b91
: CRYP_K2RR_b92 ( -- x addr ) 28 bit CRYP_K2RR ; \ CRYP_K2RR_b92, b92
: CRYP_K2RR_b93 ( -- x addr ) 29 bit CRYP_K2RR ; \ CRYP_K2RR_b93, b93
: CRYP_K2RR_b94 ( -- x addr ) 30 bit CRYP_K2RR ; \ CRYP_K2RR_b94, b94
: CRYP_K2RR_b95 ( -- x addr ) 31 bit CRYP_K2RR ; \ CRYP_K2RR_b95, b95

\ CRYP_K3LR (write-only) Reset:0x00000000
: CRYP_K3LR_b32 ( -- x addr ) 0 bit CRYP_K3LR ; \ CRYP_K3LR_b32, b32
: CRYP_K3LR_b33 ( -- x addr ) 1 bit CRYP_K3LR ; \ CRYP_K3LR_b33, b33
: CRYP_K3LR_b34 ( -- x addr ) 2 bit CRYP_K3LR ; \ CRYP_K3LR_b34, b34
: CRYP_K3LR_b35 ( -- x addr ) 3 bit CRYP_K3LR ; \ CRYP_K3LR_b35, b35
: CRYP_K3LR_b36 ( -- x addr ) 4 bit CRYP_K3LR ; \ CRYP_K3LR_b36, b36
: CRYP_K3LR_b37 ( -- x addr ) 5 bit CRYP_K3LR ; \ CRYP_K3LR_b37, b37
: CRYP_K3LR_b38 ( -- x addr ) 6 bit CRYP_K3LR ; \ CRYP_K3LR_b38, b38
: CRYP_K3LR_b39 ( -- x addr ) 7 bit CRYP_K3LR ; \ CRYP_K3LR_b39, b39
: CRYP_K3LR_b40 ( -- x addr ) 8 bit CRYP_K3LR ; \ CRYP_K3LR_b40, b40
: CRYP_K3LR_b41 ( -- x addr ) 9 bit CRYP_K3LR ; \ CRYP_K3LR_b41, b41
: CRYP_K3LR_b42 ( -- x addr ) 10 bit CRYP_K3LR ; \ CRYP_K3LR_b42, b42
: CRYP_K3LR_b43 ( -- x addr ) 11 bit CRYP_K3LR ; \ CRYP_K3LR_b43, b43
: CRYP_K3LR_b44 ( -- x addr ) 12 bit CRYP_K3LR ; \ CRYP_K3LR_b44, b44
: CRYP_K3LR_b45 ( -- x addr ) 13 bit CRYP_K3LR ; \ CRYP_K3LR_b45, b45
: CRYP_K3LR_b46 ( -- x addr ) 14 bit CRYP_K3LR ; \ CRYP_K3LR_b46, b46
: CRYP_K3LR_b47 ( -- x addr ) 15 bit CRYP_K3LR ; \ CRYP_K3LR_b47, b47
: CRYP_K3LR_b48 ( -- x addr ) 16 bit CRYP_K3LR ; \ CRYP_K3LR_b48, b48
: CRYP_K3LR_b49 ( -- x addr ) 17 bit CRYP_K3LR ; \ CRYP_K3LR_b49, b49
: CRYP_K3LR_b50 ( -- x addr ) 18 bit CRYP_K3LR ; \ CRYP_K3LR_b50, b50
: CRYP_K3LR_b51 ( -- x addr ) 19 bit CRYP_K3LR ; \ CRYP_K3LR_b51, b51
: CRYP_K3LR_b52 ( -- x addr ) 20 bit CRYP_K3LR ; \ CRYP_K3LR_b52, b52
: CRYP_K3LR_b53 ( -- x addr ) 21 bit CRYP_K3LR ; \ CRYP_K3LR_b53, b53
: CRYP_K3LR_b54 ( -- x addr ) 22 bit CRYP_K3LR ; \ CRYP_K3LR_b54, b54
: CRYP_K3LR_b55 ( -- x addr ) 23 bit CRYP_K3LR ; \ CRYP_K3LR_b55, b55
: CRYP_K3LR_b56 ( -- x addr ) 24 bit CRYP_K3LR ; \ CRYP_K3LR_b56, b56
: CRYP_K3LR_b57 ( -- x addr ) 25 bit CRYP_K3LR ; \ CRYP_K3LR_b57, b57
: CRYP_K3LR_b58 ( -- x addr ) 26 bit CRYP_K3LR ; \ CRYP_K3LR_b58, b58
: CRYP_K3LR_b59 ( -- x addr ) 27 bit CRYP_K3LR ; \ CRYP_K3LR_b59, b59
: CRYP_K3LR_b60 ( -- x addr ) 28 bit CRYP_K3LR ; \ CRYP_K3LR_b60, b60
: CRYP_K3LR_b61 ( -- x addr ) 29 bit CRYP_K3LR ; \ CRYP_K3LR_b61, b61
: CRYP_K3LR_b62 ( -- x addr ) 30 bit CRYP_K3LR ; \ CRYP_K3LR_b62, b62
: CRYP_K3LR_b63 ( -- x addr ) 31 bit CRYP_K3LR ; \ CRYP_K3LR_b63, b63

\ CRYP_K3RR (write-only) Reset:0x00000000
: CRYP_K3RR_b0 ( -- x addr ) 0 bit CRYP_K3RR ; \ CRYP_K3RR_b0, b0
: CRYP_K3RR_b1 ( -- x addr ) 1 bit CRYP_K3RR ; \ CRYP_K3RR_b1, b1
: CRYP_K3RR_b2 ( -- x addr ) 2 bit CRYP_K3RR ; \ CRYP_K3RR_b2, b2
: CRYP_K3RR_b3 ( -- x addr ) 3 bit CRYP_K3RR ; \ CRYP_K3RR_b3, b3
: CRYP_K3RR_b4 ( -- x addr ) 4 bit CRYP_K3RR ; \ CRYP_K3RR_b4, b4
: CRYP_K3RR_b5 ( -- x addr ) 5 bit CRYP_K3RR ; \ CRYP_K3RR_b5, b5
: CRYP_K3RR_b6 ( -- x addr ) 6 bit CRYP_K3RR ; \ CRYP_K3RR_b6, b6
: CRYP_K3RR_b7 ( -- x addr ) 7 bit CRYP_K3RR ; \ CRYP_K3RR_b7, b7
: CRYP_K3RR_b8 ( -- x addr ) 8 bit CRYP_K3RR ; \ CRYP_K3RR_b8, b8
: CRYP_K3RR_b9 ( -- x addr ) 9 bit CRYP_K3RR ; \ CRYP_K3RR_b9, b9
: CRYP_K3RR_b10 ( -- x addr ) 10 bit CRYP_K3RR ; \ CRYP_K3RR_b10, b10
: CRYP_K3RR_b11 ( -- x addr ) 11 bit CRYP_K3RR ; \ CRYP_K3RR_b11, b11
: CRYP_K3RR_b12 ( -- x addr ) 12 bit CRYP_K3RR ; \ CRYP_K3RR_b12, b12
: CRYP_K3RR_b13 ( -- x addr ) 13 bit CRYP_K3RR ; \ CRYP_K3RR_b13, b13
: CRYP_K3RR_b14 ( -- x addr ) 14 bit CRYP_K3RR ; \ CRYP_K3RR_b14, b14
: CRYP_K3RR_b15 ( -- x addr ) 15 bit CRYP_K3RR ; \ CRYP_K3RR_b15, b15
: CRYP_K3RR_b16 ( -- x addr ) 16 bit CRYP_K3RR ; \ CRYP_K3RR_b16, b16
: CRYP_K3RR_b17 ( -- x addr ) 17 bit CRYP_K3RR ; \ CRYP_K3RR_b17, b17
: CRYP_K3RR_b18 ( -- x addr ) 18 bit CRYP_K3RR ; \ CRYP_K3RR_b18, b18
: CRYP_K3RR_b19 ( -- x addr ) 19 bit CRYP_K3RR ; \ CRYP_K3RR_b19, b19
: CRYP_K3RR_b20 ( -- x addr ) 20 bit CRYP_K3RR ; \ CRYP_K3RR_b20, b20
: CRYP_K3RR_b21 ( -- x addr ) 21 bit CRYP_K3RR ; \ CRYP_K3RR_b21, b21
: CRYP_K3RR_b22 ( -- x addr ) 22 bit CRYP_K3RR ; \ CRYP_K3RR_b22, b22
: CRYP_K3RR_b23 ( -- x addr ) 23 bit CRYP_K3RR ; \ CRYP_K3RR_b23, b23
: CRYP_K3RR_b24 ( -- x addr ) 24 bit CRYP_K3RR ; \ CRYP_K3RR_b24, b24
: CRYP_K3RR_b25 ( -- x addr ) 25 bit CRYP_K3RR ; \ CRYP_K3RR_b25, b25
: CRYP_K3RR_b26 ( -- x addr ) 26 bit CRYP_K3RR ; \ CRYP_K3RR_b26, b26
: CRYP_K3RR_b27 ( -- x addr ) 27 bit CRYP_K3RR ; \ CRYP_K3RR_b27, b27
: CRYP_K3RR_b28 ( -- x addr ) 28 bit CRYP_K3RR ; \ CRYP_K3RR_b28, b28
: CRYP_K3RR_b29 ( -- x addr ) 29 bit CRYP_K3RR ; \ CRYP_K3RR_b29, b29
: CRYP_K3RR_b30 ( -- x addr ) 30 bit CRYP_K3RR ; \ CRYP_K3RR_b30, b30
: CRYP_K3RR_b31 ( -- x addr ) 31 bit CRYP_K3RR ; \ CRYP_K3RR_b31, b31

\ CRYP_IV0LR (read-write) Reset:0x00000000
: CRYP_IV0LR_IV31 ( -- x addr ) 0 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV31, IV31
: CRYP_IV0LR_IV30 ( -- x addr ) 1 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV30, IV30
: CRYP_IV0LR_IV29 ( -- x addr ) 2 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV29, IV29
: CRYP_IV0LR_IV28 ( -- x addr ) 3 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV28, IV28
: CRYP_IV0LR_IV27 ( -- x addr ) 4 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV27, IV27
: CRYP_IV0LR_IV26 ( -- x addr ) 5 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV26, IV26
: CRYP_IV0LR_IV25 ( -- x addr ) 6 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV25, IV25
: CRYP_IV0LR_IV24 ( -- x addr ) 7 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV24, IV24
: CRYP_IV0LR_IV23 ( -- x addr ) 8 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV23, IV23
: CRYP_IV0LR_IV22 ( -- x addr ) 9 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV22, IV22
: CRYP_IV0LR_IV21 ( -- x addr ) 10 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV21, IV21
: CRYP_IV0LR_IV20 ( -- x addr ) 11 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV20, IV20
: CRYP_IV0LR_IV19 ( -- x addr ) 12 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV19, IV19
: CRYP_IV0LR_IV18 ( -- x addr ) 13 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV18, IV18
: CRYP_IV0LR_IV17 ( -- x addr ) 14 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV17, IV17
: CRYP_IV0LR_IV16 ( -- x addr ) 15 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV16, IV16
: CRYP_IV0LR_IV15 ( -- x addr ) 16 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV15, IV15
: CRYP_IV0LR_IV14 ( -- x addr ) 17 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV14, IV14
: CRYP_IV0LR_IV13 ( -- x addr ) 18 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV13, IV13
: CRYP_IV0LR_IV12 ( -- x addr ) 19 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV12, IV12
: CRYP_IV0LR_IV11 ( -- x addr ) 20 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV11, IV11
: CRYP_IV0LR_IV10 ( -- x addr ) 21 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV10, IV10
: CRYP_IV0LR_IV9 ( -- x addr ) 22 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV9, IV9
: CRYP_IV0LR_IV8 ( -- x addr ) 23 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV8, IV8
: CRYP_IV0LR_IV7 ( -- x addr ) 24 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV7, IV7
: CRYP_IV0LR_IV6 ( -- x addr ) 25 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV6, IV6
: CRYP_IV0LR_IV5 ( -- x addr ) 26 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV5, IV5
: CRYP_IV0LR_IV4 ( -- x addr ) 27 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV4, IV4
: CRYP_IV0LR_IV3 ( -- x addr ) 28 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV3, IV3
: CRYP_IV0LR_IV2 ( -- x addr ) 29 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV2, IV2
: CRYP_IV0LR_IV1 ( -- x addr ) 30 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV1, IV1
: CRYP_IV0LR_IV0 ( -- x addr ) 31 bit CRYP_IV0LR ; \ CRYP_IV0LR_IV0, IV0

\ CRYP_IV0RR (read-write) Reset:0x00000000
: CRYP_IV0RR_IV63 ( -- x addr ) 0 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV63, IV63
: CRYP_IV0RR_IV62 ( -- x addr ) 1 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV62, IV62
: CRYP_IV0RR_IV61 ( -- x addr ) 2 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV61, IV61
: CRYP_IV0RR_IV60 ( -- x addr ) 3 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV60, IV60
: CRYP_IV0RR_IV59 ( -- x addr ) 4 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV59, IV59
: CRYP_IV0RR_IV58 ( -- x addr ) 5 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV58, IV58
: CRYP_IV0RR_IV57 ( -- x addr ) 6 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV57, IV57
: CRYP_IV0RR_IV56 ( -- x addr ) 7 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV56, IV56
: CRYP_IV0RR_IV55 ( -- x addr ) 8 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV55, IV55
: CRYP_IV0RR_IV54 ( -- x addr ) 9 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV54, IV54
: CRYP_IV0RR_IV53 ( -- x addr ) 10 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV53, IV53
: CRYP_IV0RR_IV52 ( -- x addr ) 11 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV52, IV52
: CRYP_IV0RR_IV51 ( -- x addr ) 12 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV51, IV51
: CRYP_IV0RR_IV50 ( -- x addr ) 13 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV50, IV50
: CRYP_IV0RR_IV49 ( -- x addr ) 14 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV49, IV49
: CRYP_IV0RR_IV48 ( -- x addr ) 15 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV48, IV48
: CRYP_IV0RR_IV47 ( -- x addr ) 16 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV47, IV47
: CRYP_IV0RR_IV46 ( -- x addr ) 17 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV46, IV46
: CRYP_IV0RR_IV45 ( -- x addr ) 18 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV45, IV45
: CRYP_IV0RR_IV44 ( -- x addr ) 19 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV44, IV44
: CRYP_IV0RR_IV43 ( -- x addr ) 20 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV43, IV43
: CRYP_IV0RR_IV42 ( -- x addr ) 21 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV42, IV42
: CRYP_IV0RR_IV41 ( -- x addr ) 22 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV41, IV41
: CRYP_IV0RR_IV40 ( -- x addr ) 23 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV40, IV40
: CRYP_IV0RR_IV39 ( -- x addr ) 24 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV39, IV39
: CRYP_IV0RR_IV38 ( -- x addr ) 25 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV38, IV38
: CRYP_IV0RR_IV37 ( -- x addr ) 26 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV37, IV37
: CRYP_IV0RR_IV36 ( -- x addr ) 27 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV36, IV36
: CRYP_IV0RR_IV35 ( -- x addr ) 28 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV35, IV35
: CRYP_IV0RR_IV34 ( -- x addr ) 29 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV34, IV34
: CRYP_IV0RR_IV33 ( -- x addr ) 30 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV33, IV33
: CRYP_IV0RR_IV32 ( -- x addr ) 31 bit CRYP_IV0RR ; \ CRYP_IV0RR_IV32, IV32

\ CRYP_IV1LR (read-write) Reset:0x00000000
: CRYP_IV1LR_IV95 ( -- x addr ) 0 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV95, IV95
: CRYP_IV1LR_IV94 ( -- x addr ) 1 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV94, IV94
: CRYP_IV1LR_IV93 ( -- x addr ) 2 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV93, IV93
: CRYP_IV1LR_IV92 ( -- x addr ) 3 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV92, IV92
: CRYP_IV1LR_IV91 ( -- x addr ) 4 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV91, IV91
: CRYP_IV1LR_IV90 ( -- x addr ) 5 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV90, IV90
: CRYP_IV1LR_IV89 ( -- x addr ) 6 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV89, IV89
: CRYP_IV1LR_IV88 ( -- x addr ) 7 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV88, IV88
: CRYP_IV1LR_IV87 ( -- x addr ) 8 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV87, IV87
: CRYP_IV1LR_IV86 ( -- x addr ) 9 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV86, IV86
: CRYP_IV1LR_IV85 ( -- x addr ) 10 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV85, IV85
: CRYP_IV1LR_IV84 ( -- x addr ) 11 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV84, IV84
: CRYP_IV1LR_IV83 ( -- x addr ) 12 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV83, IV83
: CRYP_IV1LR_IV82 ( -- x addr ) 13 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV82, IV82
: CRYP_IV1LR_IV81 ( -- x addr ) 14 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV81, IV81
: CRYP_IV1LR_IV80 ( -- x addr ) 15 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV80, IV80
: CRYP_IV1LR_IV79 ( -- x addr ) 16 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV79, IV79
: CRYP_IV1LR_IV78 ( -- x addr ) 17 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV78, IV78
: CRYP_IV1LR_IV77 ( -- x addr ) 18 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV77, IV77
: CRYP_IV1LR_IV76 ( -- x addr ) 19 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV76, IV76
: CRYP_IV1LR_IV75 ( -- x addr ) 20 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV75, IV75
: CRYP_IV1LR_IV74 ( -- x addr ) 21 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV74, IV74
: CRYP_IV1LR_IV73 ( -- x addr ) 22 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV73, IV73
: CRYP_IV1LR_IV72 ( -- x addr ) 23 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV72, IV72
: CRYP_IV1LR_IV71 ( -- x addr ) 24 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV71, IV71
: CRYP_IV1LR_IV70 ( -- x addr ) 25 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV70, IV70
: CRYP_IV1LR_IV69 ( -- x addr ) 26 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV69, IV69
: CRYP_IV1LR_IV68 ( -- x addr ) 27 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV68, IV68
: CRYP_IV1LR_IV67 ( -- x addr ) 28 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV67, IV67
: CRYP_IV1LR_IV66 ( -- x addr ) 29 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV66, IV66
: CRYP_IV1LR_IV65 ( -- x addr ) 30 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV65, IV65
: CRYP_IV1LR_IV64 ( -- x addr ) 31 bit CRYP_IV1LR ; \ CRYP_IV1LR_IV64, IV64

\ CRYP_IV1RR (read-write) Reset:0x00000000
: CRYP_IV1RR_IV127 ( -- x addr ) 0 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV127, IV127
: CRYP_IV1RR_IV126 ( -- x addr ) 1 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV126, IV126
: CRYP_IV1RR_IV125 ( -- x addr ) 2 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV125, IV125
: CRYP_IV1RR_IV124 ( -- x addr ) 3 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV124, IV124
: CRYP_IV1RR_IV123 ( -- x addr ) 4 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV123, IV123
: CRYP_IV1RR_IV122 ( -- x addr ) 5 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV122, IV122
: CRYP_IV1RR_IV121 ( -- x addr ) 6 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV121, IV121
: CRYP_IV1RR_IV120 ( -- x addr ) 7 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV120, IV120
: CRYP_IV1RR_IV119 ( -- x addr ) 8 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV119, IV119
: CRYP_IV1RR_IV118 ( -- x addr ) 9 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV118, IV118
: CRYP_IV1RR_IV117 ( -- x addr ) 10 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV117, IV117
: CRYP_IV1RR_IV116 ( -- x addr ) 11 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV116, IV116
: CRYP_IV1RR_IV115 ( -- x addr ) 12 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV115, IV115
: CRYP_IV1RR_IV114 ( -- x addr ) 13 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV114, IV114
: CRYP_IV1RR_IV113 ( -- x addr ) 14 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV113, IV113
: CRYP_IV1RR_IV112 ( -- x addr ) 15 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV112, IV112
: CRYP_IV1RR_IV111 ( -- x addr ) 16 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV111, IV111
: CRYP_IV1RR_IV110 ( -- x addr ) 17 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV110, IV110
: CRYP_IV1RR_IV109 ( -- x addr ) 18 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV109, IV109
: CRYP_IV1RR_IV108 ( -- x addr ) 19 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV108, IV108
: CRYP_IV1RR_IV107 ( -- x addr ) 20 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV107, IV107
: CRYP_IV1RR_IV106 ( -- x addr ) 21 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV106, IV106
: CRYP_IV1RR_IV105 ( -- x addr ) 22 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV105, IV105
: CRYP_IV1RR_IV104 ( -- x addr ) 23 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV104, IV104
: CRYP_IV1RR_IV103 ( -- x addr ) 24 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV103, IV103
: CRYP_IV1RR_IV102 ( -- x addr ) 25 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV102, IV102
: CRYP_IV1RR_IV101 ( -- x addr ) 26 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV101, IV101
: CRYP_IV1RR_IV100 ( -- x addr ) 27 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV100, IV100
: CRYP_IV1RR_IV99 ( -- x addr ) 28 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV99, IV99
: CRYP_IV1RR_IV98 ( -- x addr ) 29 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV98, IV98
: CRYP_IV1RR_IV97 ( -- x addr ) 30 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV97, IV97
: CRYP_IV1RR_IV96 ( -- x addr ) 31 bit CRYP_IV1RR ; \ CRYP_IV1RR_IV96, IV96

\ CRYP_CSGCMCCM0R (read-write) Reset:0x00000000
: CRYP_CSGCMCCM0R_CSGCMCCM0R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCMCCM0R ; \ CRYP_CSGCMCCM0R_CSGCMCCM0R, CSGCMCCM0R

\ CRYP_CSGCMCCM1R (read-write) Reset:0x00000000
: CRYP_CSGCMCCM1R_CSGCMCCM1R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCMCCM1R ; \ CRYP_CSGCMCCM1R_CSGCMCCM1R, CSGCMCCM1R

\ CRYP_CSGCMCCM2R (read-write) Reset:0x00000000
: CRYP_CSGCMCCM2R_CSGCMCCM2R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCMCCM2R ; \ CRYP_CSGCMCCM2R_CSGCMCCM2R, CSGCMCCM2R

\ CRYP_CSGCMCCM3R (read-write) Reset:0x00000000
: CRYP_CSGCMCCM3R_CSGCMCCM3R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCMCCM3R ; \ CRYP_CSGCMCCM3R_CSGCMCCM3R, CSGCMCCM3R

\ CRYP_CSGCMCCM4R (read-write) Reset:0x00000000
: CRYP_CSGCMCCM4R_CSGCMCCM4R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCMCCM4R ; \ CRYP_CSGCMCCM4R_CSGCMCCM4R, CSGCMCCM4R

\ CRYP_CSGCMCCM5R (read-write) Reset:0x00000000
: CRYP_CSGCMCCM5R_CSGCMCCM5R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCMCCM5R ; \ CRYP_CSGCMCCM5R_CSGCMCCM5R, CSGCMCCM5R

\ CRYP_CSGCMCCM6R (read-write) Reset:0x00000000
: CRYP_CSGCMCCM6R_CSGCMCCM6R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCMCCM6R ; \ CRYP_CSGCMCCM6R_CSGCMCCM6R, CSGCMCCM6R

\ CRYP_CSGCMCCM7R (read-write) Reset:0x00000000
: CRYP_CSGCMCCM7R_CSGCMCCM7R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCMCCM7R ; \ CRYP_CSGCMCCM7R_CSGCMCCM7R, CSGCMCCM7R

\ CRYP_CSGCM0R (read-write) Reset:0x00000000
: CRYP_CSGCM0R_CSGCM0R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCM0R ; \ CRYP_CSGCM0R_CSGCM0R, CSGCM0R

\ CRYP_CSGCM1R (read-write) Reset:0x00000000
: CRYP_CSGCM1R_CSGCM1R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCM1R ; \ CRYP_CSGCM1R_CSGCM1R, CSGCM1R

\ CRYP_CSGCM2R (read-write) Reset:0x00000000
: CRYP_CSGCM2R_CSGCM2R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCM2R ; \ CRYP_CSGCM2R_CSGCM2R, CSGCM2R

\ CRYP_CSGCM3R (read-write) Reset:0x00000000
: CRYP_CSGCM3R_CSGCM3R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCM3R ; \ CRYP_CSGCM3R_CSGCM3R, CSGCM3R

\ CRYP_CSGCM4R (read-write) Reset:0x00000000
: CRYP_CSGCM4R_CSGCM4R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCM4R ; \ CRYP_CSGCM4R_CSGCM4R, CSGCM4R

\ CRYP_CSGCM5R (read-write) Reset:0x00000000
: CRYP_CSGCM5R_CSGCM5R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCM5R ; \ CRYP_CSGCM5R_CSGCM5R, CSGCM5R

\ CRYP_CSGCM6R (read-write) Reset:0x00000000
: CRYP_CSGCM6R_CSGCM6R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCM6R ; \ CRYP_CSGCM6R_CSGCM6R, CSGCM6R

\ CRYP_CSGCM7R (read-write) Reset:0x00000000
: CRYP_CSGCM7R_CSGCM7R ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRYP_CSGCM7R ; \ CRYP_CSGCM7R_CSGCM7R, CSGCM7R

\ DCMI_CR (read-write) Reset:0x0000
: DCMI_CR_ENABLE ( -- x addr ) 14 bit DCMI_CR ; \ DCMI_CR_ENABLE, DCMI enable
: DCMI_CR_EDM ( %bb -- x addr ) 10 lshift DCMI_CR ; \ DCMI_CR_EDM, Extended data mode
: DCMI_CR_FCRC ( %bb -- x addr ) 8 lshift DCMI_CR ; \ DCMI_CR_FCRC, Frame capture rate control
: DCMI_CR_VSPOL ( -- x addr ) 7 bit DCMI_CR ; \ DCMI_CR_VSPOL, Vertical synchronization polarity
: DCMI_CR_HSPOL ( -- x addr ) 6 bit DCMI_CR ; \ DCMI_CR_HSPOL, Horizontal synchronization polarity
: DCMI_CR_PCKPOL ( -- x addr ) 5 bit DCMI_CR ; \ DCMI_CR_PCKPOL, Pixel clock polarity
: DCMI_CR_ESS ( -- x addr ) 4 bit DCMI_CR ; \ DCMI_CR_ESS, Embedded synchronization select
: DCMI_CR_JPEG ( -- x addr ) 3 bit DCMI_CR ; \ DCMI_CR_JPEG, JPEG format
: DCMI_CR_CROP ( -- x addr ) 2 bit DCMI_CR ; \ DCMI_CR_CROP, Crop feature
: DCMI_CR_CM ( -- x addr ) 1 bit DCMI_CR ; \ DCMI_CR_CM, Capture mode
: DCMI_CR_CAPTURE ( -- x addr ) 0 bit DCMI_CR ; \ DCMI_CR_CAPTURE, Capture enable

\ DCMI_SR (read-only) Reset:0x0000
: DCMI_SR_FNE? ( --  1|0 ) 2 bit DCMI_SR bit@ ; \ DCMI_SR_FNE, FIFO not empty
: DCMI_SR_VSYNC? ( --  1|0 ) 1 bit DCMI_SR bit@ ; \ DCMI_SR_VSYNC, VSYNC
: DCMI_SR_HSYNC? ( --  1|0 ) 0 bit DCMI_SR bit@ ; \ DCMI_SR_HSYNC, HSYNC

\ DCMI_RIS (read-only) Reset:0x0000
: DCMI_RIS_LINE_RIS? ( --  1|0 ) 4 bit DCMI_RIS bit@ ; \ DCMI_RIS_LINE_RIS, Line raw interrupt status
: DCMI_RIS_VSYNC_RIS? ( --  1|0 ) 3 bit DCMI_RIS bit@ ; \ DCMI_RIS_VSYNC_RIS, VSYNC raw interrupt status
: DCMI_RIS_ERR_RIS? ( --  1|0 ) 2 bit DCMI_RIS bit@ ; \ DCMI_RIS_ERR_RIS, Synchronization error raw interrupt status
: DCMI_RIS_OVR_RIS? ( --  1|0 ) 1 bit DCMI_RIS bit@ ; \ DCMI_RIS_OVR_RIS, Overrun raw interrupt status
: DCMI_RIS_FRAME_RIS? ( --  1|0 ) 0 bit DCMI_RIS bit@ ; \ DCMI_RIS_FRAME_RIS, Capture complete raw interrupt status

\ DCMI_IER (read-write) Reset:0x0000
: DCMI_IER_LINE_IE ( -- x addr ) 4 bit DCMI_IER ; \ DCMI_IER_LINE_IE, Line interrupt enable
: DCMI_IER_VSYNC_IE ( -- x addr ) 3 bit DCMI_IER ; \ DCMI_IER_VSYNC_IE, VSYNC interrupt enable
: DCMI_IER_ERR_IE ( -- x addr ) 2 bit DCMI_IER ; \ DCMI_IER_ERR_IE, Synchronization error interrupt enable
: DCMI_IER_OVR_IE ( -- x addr ) 1 bit DCMI_IER ; \ DCMI_IER_OVR_IE, Overrun interrupt enable
: DCMI_IER_FRAME_IE ( -- x addr ) 0 bit DCMI_IER ; \ DCMI_IER_FRAME_IE, Capture complete interrupt enable

\ DCMI_MIS (read-only) Reset:0x0000
: DCMI_MIS_LINE_MIS? ( --  1|0 ) 4 bit DCMI_MIS bit@ ; \ DCMI_MIS_LINE_MIS, Line masked interrupt status
: DCMI_MIS_VSYNC_MIS? ( --  1|0 ) 3 bit DCMI_MIS bit@ ; \ DCMI_MIS_VSYNC_MIS, VSYNC masked interrupt status
: DCMI_MIS_ERR_MIS? ( --  1|0 ) 2 bit DCMI_MIS bit@ ; \ DCMI_MIS_ERR_MIS, Synchronization error masked interrupt status
: DCMI_MIS_OVR_MIS? ( --  1|0 ) 1 bit DCMI_MIS bit@ ; \ DCMI_MIS_OVR_MIS, Overrun masked interrupt status
: DCMI_MIS_FRAME_MIS? ( --  1|0 ) 0 bit DCMI_MIS bit@ ; \ DCMI_MIS_FRAME_MIS, Capture complete masked interrupt status

\ DCMI_ICR (write-only) Reset:0x0000
: DCMI_ICR_LINE_ISC ( -- x addr ) 4 bit DCMI_ICR ; \ DCMI_ICR_LINE_ISC, line interrupt status clear
: DCMI_ICR_VSYNC_ISC ( -- x addr ) 3 bit DCMI_ICR ; \ DCMI_ICR_VSYNC_ISC, Vertical synch interrupt status clear
: DCMI_ICR_ERR_ISC ( -- x addr ) 2 bit DCMI_ICR ; \ DCMI_ICR_ERR_ISC, Synchronization error interrupt status clear
: DCMI_ICR_OVR_ISC ( -- x addr ) 1 bit DCMI_ICR ; \ DCMI_ICR_OVR_ISC, Overrun interrupt status clear
: DCMI_ICR_FRAME_ISC ( -- x addr ) 0 bit DCMI_ICR ; \ DCMI_ICR_FRAME_ISC, Capture complete interrupt status clear

\ DCMI_ESCR (read-write) Reset:0x0000
: DCMI_ESCR_FEC ( %bbbbbbbb -- x addr ) 24 lshift DCMI_ESCR ; \ DCMI_ESCR_FEC, Frame end delimiter code
: DCMI_ESCR_LEC ( %bbbbbbbb -- x addr ) 16 lshift DCMI_ESCR ; \ DCMI_ESCR_LEC, Line end delimiter code
: DCMI_ESCR_LSC ( %bbbbbbbb -- x addr ) 8 lshift DCMI_ESCR ; \ DCMI_ESCR_LSC, Line start delimiter code
: DCMI_ESCR_FSC ( %bbbbbbbb -- x addr ) DCMI_ESCR ; \ DCMI_ESCR_FSC, Frame start delimiter code

\ DCMI_ESUR (read-write) Reset:0x0000
: DCMI_ESUR_FEU ( %bbbbbbbb -- x addr ) 24 lshift DCMI_ESUR ; \ DCMI_ESUR_FEU, Frame end delimiter unmask
: DCMI_ESUR_LEU ( %bbbbbbbb -- x addr ) 16 lshift DCMI_ESUR ; \ DCMI_ESUR_LEU, Line end delimiter unmask
: DCMI_ESUR_LSU ( %bbbbbbbb -- x addr ) 8 lshift DCMI_ESUR ; \ DCMI_ESUR_LSU, Line start delimiter unmask
: DCMI_ESUR_FSU ( %bbbbbbbb -- x addr ) DCMI_ESUR ; \ DCMI_ESUR_FSU, Frame start delimiter unmask

\ DCMI_CWSTRT (read-write) Reset:0x0000
: DCMI_CWSTRT_VST x addr ) 16 lshift DCMI_CWSTRT ; \ DCMI_CWSTRT_VST, Vertical start line count
: DCMI_CWSTRT_HOFFCNT ( %bbbbbbbbbbbbbb -- x addr ) DCMI_CWSTRT ; \ DCMI_CWSTRT_HOFFCNT, Horizontal offset count

\ DCMI_CWSIZE (read-write) Reset:0x0000
: DCMI_CWSIZE_VLINE ( %bbbbbbbbbbbbbb -- x addr ) 16 lshift DCMI_CWSIZE ; \ DCMI_CWSIZE_VLINE, Vertical line count
: DCMI_CWSIZE_CAPCNT ( %bbbbbbbbbbbbbb -- x addr ) DCMI_CWSIZE ; \ DCMI_CWSIZE_CAPCNT, Capture count

\ DCMI_DR (read-only) Reset:0x0000
: DCMI_DR_Byte3? ( --  x ) 24 lshift DCMI_DR @ ; \ DCMI_DR_Byte3, Data byte 3
: DCMI_DR_Byte2? ( --  x ) 16 lshift DCMI_DR @ ; \ DCMI_DR_Byte2, Data byte 2
: DCMI_DR_Byte1? ( --  x ) 8 lshift DCMI_DR @ ; \ DCMI_DR_Byte1, Data byte 1
: DCMI_DR_Byte0? ( --  x ) DCMI_DR @ ; \ DCMI_DR_Byte0, Data byte 0

\ FMC_BCR1 (read-write) Reset:0x000030D0
: FMC_BCR1_CCLKEN ( -- x addr ) 20 bit FMC_BCR1 ; \ FMC_BCR1_CCLKEN, CCLKEN
: FMC_BCR1_CBURSTRW ( -- x addr ) 19 bit FMC_BCR1 ; \ FMC_BCR1_CBURSTRW, CBURSTRW
: FMC_BCR1_ASYNCWAIT ( -- x addr ) 15 bit FMC_BCR1 ; \ FMC_BCR1_ASYNCWAIT, ASYNCWAIT
: FMC_BCR1_EXTMOD ( -- x addr ) 14 bit FMC_BCR1 ; \ FMC_BCR1_EXTMOD, EXTMOD
: FMC_BCR1_WAITEN ( -- x addr ) 13 bit FMC_BCR1 ; \ FMC_BCR1_WAITEN, WAITEN
: FMC_BCR1_WREN ( -- x addr ) 12 bit FMC_BCR1 ; \ FMC_BCR1_WREN, WREN
: FMC_BCR1_WAITCFG ( -- x addr ) 11 bit FMC_BCR1 ; \ FMC_BCR1_WAITCFG, WAITCFG
: FMC_BCR1_WAITPOL ( -- x addr ) 9 bit FMC_BCR1 ; \ FMC_BCR1_WAITPOL, WAITPOL
: FMC_BCR1_BURSTEN ( -- x addr ) 8 bit FMC_BCR1 ; \ FMC_BCR1_BURSTEN, BURSTEN
: FMC_BCR1_FACCEN ( -- x addr ) 6 bit FMC_BCR1 ; \ FMC_BCR1_FACCEN, FACCEN
: FMC_BCR1_MWID ( %bb -- x addr ) 4 lshift FMC_BCR1 ; \ FMC_BCR1_MWID, MWID
: FMC_BCR1_MTYP ( %bb -- x addr ) 2 lshift FMC_BCR1 ; \ FMC_BCR1_MTYP, MTYP
: FMC_BCR1_MUXEN ( -- x addr ) 1 bit FMC_BCR1 ; \ FMC_BCR1_MUXEN, MUXEN
: FMC_BCR1_MBKEN ( -- x addr ) 0 bit FMC_BCR1 ; \ FMC_BCR1_MBKEN, MBKEN

\ FMC_BTR1 (read-write) Reset:0xFFFFFFFF
: FMC_BTR1_ACCMOD ( %bb -- x addr ) 28 lshift FMC_BTR1 ; \ FMC_BTR1_ACCMOD, ACCMOD
: FMC_BTR1_DATLAT ( %bbbb -- x addr ) 24 lshift FMC_BTR1 ; \ FMC_BTR1_DATLAT, DATLAT
: FMC_BTR1_CLKDIV ( %bbbb -- x addr ) 20 lshift FMC_BTR1 ; \ FMC_BTR1_CLKDIV, CLKDIV
: FMC_BTR1_BUSTURN ( %bbbb -- x addr ) 16 lshift FMC_BTR1 ; \ FMC_BTR1_BUSTURN, BUSTURN
: FMC_BTR1_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FMC_BTR1 ; \ FMC_BTR1_DATAST, DATAST
: FMC_BTR1_ADDHLD ( %bbbb -- x addr ) 4 lshift FMC_BTR1 ; \ FMC_BTR1_ADDHLD, ADDHLD
: FMC_BTR1_ADDSET ( %bbbb -- x addr ) FMC_BTR1 ; \ FMC_BTR1_ADDSET, ADDSET

\ FMC_BCR2 (read-write) Reset:0x000030D0
: FMC_BCR2_CBURSTRW ( -- x addr ) 19 bit FMC_BCR2 ; \ FMC_BCR2_CBURSTRW, CBURSTRW
: FMC_BCR2_ASYNCWAIT ( -- x addr ) 15 bit FMC_BCR2 ; \ FMC_BCR2_ASYNCWAIT, ASYNCWAIT
: FMC_BCR2_EXTMOD ( -- x addr ) 14 bit FMC_BCR2 ; \ FMC_BCR2_EXTMOD, EXTMOD
: FMC_BCR2_WAITEN ( -- x addr ) 13 bit FMC_BCR2 ; \ FMC_BCR2_WAITEN, WAITEN
: FMC_BCR2_WREN ( -- x addr ) 12 bit FMC_BCR2 ; \ FMC_BCR2_WREN, WREN
: FMC_BCR2_WAITCFG ( -- x addr ) 11 bit FMC_BCR2 ; \ FMC_BCR2_WAITCFG, WAITCFG
: FMC_BCR2_WRAPMOD ( -- x addr ) 10 bit FMC_BCR2 ; \ FMC_BCR2_WRAPMOD, WRAPMOD
: FMC_BCR2_WAITPOL ( -- x addr ) 9 bit FMC_BCR2 ; \ FMC_BCR2_WAITPOL, WAITPOL
: FMC_BCR2_BURSTEN ( -- x addr ) 8 bit FMC_BCR2 ; \ FMC_BCR2_BURSTEN, BURSTEN
: FMC_BCR2_FACCEN ( -- x addr ) 6 bit FMC_BCR2 ; \ FMC_BCR2_FACCEN, FACCEN
: FMC_BCR2_MWID ( %bb -- x addr ) 4 lshift FMC_BCR2 ; \ FMC_BCR2_MWID, MWID
: FMC_BCR2_MTYP ( %bb -- x addr ) 2 lshift FMC_BCR2 ; \ FMC_BCR2_MTYP, MTYP
: FMC_BCR2_MUXEN ( -- x addr ) 1 bit FMC_BCR2 ; \ FMC_BCR2_MUXEN, MUXEN
: FMC_BCR2_MBKEN ( -- x addr ) 0 bit FMC_BCR2 ; \ FMC_BCR2_MBKEN, MBKEN

\ FMC_BTR2 (read-write) Reset:0xFFFFFFFF
: FMC_BTR2_ACCMOD ( %bb -- x addr ) 28 lshift FMC_BTR2 ; \ FMC_BTR2_ACCMOD, ACCMOD
: FMC_BTR2_DATLAT ( %bbbb -- x addr ) 24 lshift FMC_BTR2 ; \ FMC_BTR2_DATLAT, DATLAT
: FMC_BTR2_CLKDIV ( %bbbb -- x addr ) 20 lshift FMC_BTR2 ; \ FMC_BTR2_CLKDIV, CLKDIV
: FMC_BTR2_BUSTURN ( %bbbb -- x addr ) 16 lshift FMC_BTR2 ; \ FMC_BTR2_BUSTURN, BUSTURN
: FMC_BTR2_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FMC_BTR2 ; \ FMC_BTR2_DATAST, DATAST
: FMC_BTR2_ADDHLD ( %bbbb -- x addr ) 4 lshift FMC_BTR2 ; \ FMC_BTR2_ADDHLD, ADDHLD
: FMC_BTR2_ADDSET ( %bbbb -- x addr ) FMC_BTR2 ; \ FMC_BTR2_ADDSET, ADDSET

\ FMC_BCR3 (read-write) Reset:0x000030D0
: FMC_BCR3_CBURSTRW ( -- x addr ) 19 bit FMC_BCR3 ; \ FMC_BCR3_CBURSTRW, CBURSTRW
: FMC_BCR3_ASYNCWAIT ( -- x addr ) 15 bit FMC_BCR3 ; \ FMC_BCR3_ASYNCWAIT, ASYNCWAIT
: FMC_BCR3_EXTMOD ( -- x addr ) 14 bit FMC_BCR3 ; \ FMC_BCR3_EXTMOD, EXTMOD
: FMC_BCR3_WAITEN ( -- x addr ) 13 bit FMC_BCR3 ; \ FMC_BCR3_WAITEN, WAITEN
: FMC_BCR3_WREN ( -- x addr ) 12 bit FMC_BCR3 ; \ FMC_BCR3_WREN, WREN
: FMC_BCR3_WAITCFG ( -- x addr ) 11 bit FMC_BCR3 ; \ FMC_BCR3_WAITCFG, WAITCFG
: FMC_BCR3_WRAPMOD ( -- x addr ) 10 bit FMC_BCR3 ; \ FMC_BCR3_WRAPMOD, WRAPMOD
: FMC_BCR3_WAITPOL ( -- x addr ) 9 bit FMC_BCR3 ; \ FMC_BCR3_WAITPOL, WAITPOL
: FMC_BCR3_BURSTEN ( -- x addr ) 8 bit FMC_BCR3 ; \ FMC_BCR3_BURSTEN, BURSTEN
: FMC_BCR3_FACCEN ( -- x addr ) 6 bit FMC_BCR3 ; \ FMC_BCR3_FACCEN, FACCEN
: FMC_BCR3_MWID ( %bb -- x addr ) 4 lshift FMC_BCR3 ; \ FMC_BCR3_MWID, MWID
: FMC_BCR3_MTYP ( %bb -- x addr ) 2 lshift FMC_BCR3 ; \ FMC_BCR3_MTYP, MTYP
: FMC_BCR3_MUXEN ( -- x addr ) 1 bit FMC_BCR3 ; \ FMC_BCR3_MUXEN, MUXEN
: FMC_BCR3_MBKEN ( -- x addr ) 0 bit FMC_BCR3 ; \ FMC_BCR3_MBKEN, MBKEN

\ FMC_BTR3 (read-write) Reset:0xFFFFFFFF
: FMC_BTR3_ACCMOD ( %bb -- x addr ) 28 lshift FMC_BTR3 ; \ FMC_BTR3_ACCMOD, ACCMOD
: FMC_BTR3_DATLAT ( %bbbb -- x addr ) 24 lshift FMC_BTR3 ; \ FMC_BTR3_DATLAT, DATLAT
: FMC_BTR3_CLKDIV ( %bbbb -- x addr ) 20 lshift FMC_BTR3 ; \ FMC_BTR3_CLKDIV, CLKDIV
: FMC_BTR3_BUSTURN ( %bbbb -- x addr ) 16 lshift FMC_BTR3 ; \ FMC_BTR3_BUSTURN, BUSTURN
: FMC_BTR3_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FMC_BTR3 ; \ FMC_BTR3_DATAST, DATAST
: FMC_BTR3_ADDHLD ( %bbbb -- x addr ) 4 lshift FMC_BTR3 ; \ FMC_BTR3_ADDHLD, ADDHLD
: FMC_BTR3_ADDSET ( %bbbb -- x addr ) FMC_BTR3 ; \ FMC_BTR3_ADDSET, ADDSET

\ FMC_BCR4 (read-write) Reset:0x000030D0
: FMC_BCR4_CBURSTRW ( -- x addr ) 19 bit FMC_BCR4 ; \ FMC_BCR4_CBURSTRW, CBURSTRW
: FMC_BCR4_ASYNCWAIT ( -- x addr ) 15 bit FMC_BCR4 ; \ FMC_BCR4_ASYNCWAIT, ASYNCWAIT
: FMC_BCR4_EXTMOD ( -- x addr ) 14 bit FMC_BCR4 ; \ FMC_BCR4_EXTMOD, EXTMOD
: FMC_BCR4_WAITEN ( -- x addr ) 13 bit FMC_BCR4 ; \ FMC_BCR4_WAITEN, WAITEN
: FMC_BCR4_WREN ( -- x addr ) 12 bit FMC_BCR4 ; \ FMC_BCR4_WREN, WREN
: FMC_BCR4_WAITCFG ( -- x addr ) 11 bit FMC_BCR4 ; \ FMC_BCR4_WAITCFG, WAITCFG
: FMC_BCR4_WRAPMOD ( -- x addr ) 10 bit FMC_BCR4 ; \ FMC_BCR4_WRAPMOD, WRAPMOD
: FMC_BCR4_WAITPOL ( -- x addr ) 9 bit FMC_BCR4 ; \ FMC_BCR4_WAITPOL, WAITPOL
: FMC_BCR4_BURSTEN ( -- x addr ) 8 bit FMC_BCR4 ; \ FMC_BCR4_BURSTEN, BURSTEN
: FMC_BCR4_FACCEN ( -- x addr ) 6 bit FMC_BCR4 ; \ FMC_BCR4_FACCEN, FACCEN
: FMC_BCR4_MWID ( %bb -- x addr ) 4 lshift FMC_BCR4 ; \ FMC_BCR4_MWID, MWID
: FMC_BCR4_MTYP ( %bb -- x addr ) 2 lshift FMC_BCR4 ; \ FMC_BCR4_MTYP, MTYP
: FMC_BCR4_MUXEN ( -- x addr ) 1 bit FMC_BCR4 ; \ FMC_BCR4_MUXEN, MUXEN
: FMC_BCR4_MBKEN ( -- x addr ) 0 bit FMC_BCR4 ; \ FMC_BCR4_MBKEN, MBKEN

\ FMC_BTR4 (read-write) Reset:0xFFFFFFFF
: FMC_BTR4_ACCMOD ( %bb -- x addr ) 28 lshift FMC_BTR4 ; \ FMC_BTR4_ACCMOD, ACCMOD
: FMC_BTR4_DATLAT ( %bbbb -- x addr ) 24 lshift FMC_BTR4 ; \ FMC_BTR4_DATLAT, DATLAT
: FMC_BTR4_CLKDIV ( %bbbb -- x addr ) 20 lshift FMC_BTR4 ; \ FMC_BTR4_CLKDIV, CLKDIV
: FMC_BTR4_BUSTURN ( %bbbb -- x addr ) 16 lshift FMC_BTR4 ; \ FMC_BTR4_BUSTURN, BUSTURN
: FMC_BTR4_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FMC_BTR4 ; \ FMC_BTR4_DATAST, DATAST
: FMC_BTR4_ADDHLD ( %bbbb -- x addr ) 4 lshift FMC_BTR4 ; \ FMC_BTR4_ADDHLD, ADDHLD
: FMC_BTR4_ADDSET ( %bbbb -- x addr ) FMC_BTR4 ; \ FMC_BTR4_ADDSET, ADDSET

\ FMC_PCR (read-write) Reset:0x00000018
: FMC_PCR_ECCPS ( %bbb -- x addr ) 17 lshift FMC_PCR ; \ FMC_PCR_ECCPS, ECCPS
: FMC_PCR_TAR ( %bbbb -- x addr ) 13 lshift FMC_PCR ; \ FMC_PCR_TAR, TAR
: FMC_PCR_TCLR ( %bbbb -- x addr ) 9 lshift FMC_PCR ; \ FMC_PCR_TCLR, TCLR
: FMC_PCR_ECCEN ( -- x addr ) 6 bit FMC_PCR ; \ FMC_PCR_ECCEN, ECCEN
: FMC_PCR_PWID ( %bb -- x addr ) 4 lshift FMC_PCR ; \ FMC_PCR_PWID, PWID
: FMC_PCR_PTYP ( -- x addr ) 3 bit FMC_PCR ; \ FMC_PCR_PTYP, PTYP
: FMC_PCR_PBKEN ( -- x addr ) 2 bit FMC_PCR ; \ FMC_PCR_PBKEN, PBKEN
: FMC_PCR_PWAITEN ( -- x addr ) 1 bit FMC_PCR ; \ FMC_PCR_PWAITEN, PWAITEN

\ FMC_SR (multiple-access)  Reset:0x00000040
: FMC_SR_FEMPT ( -- x addr ) 6 bit FMC_SR ; \ FMC_SR_FEMPT, FEMPT
: FMC_SR_IFEN ( -- x addr ) 5 bit FMC_SR ; \ FMC_SR_IFEN, IFEN
: FMC_SR_ILEN ( -- x addr ) 4 bit FMC_SR ; \ FMC_SR_ILEN, ILEN
: FMC_SR_IREN ( -- x addr ) 3 bit FMC_SR ; \ FMC_SR_IREN, IREN
: FMC_SR_IFS ( -- x addr ) 2 bit FMC_SR ; \ FMC_SR_IFS, IFS
: FMC_SR_ILS ( -- x addr ) 1 bit FMC_SR ; \ FMC_SR_ILS, ILS
: FMC_SR_IRS ( -- x addr ) 0 bit FMC_SR ; \ FMC_SR_IRS, IRS

\ FMC_PMEM (read-write) Reset:0xFCFCFCFC
: FMC_PMEM_MEMHIZx ( %bbbbbbbb -- x addr ) 24 lshift FMC_PMEM ; \ FMC_PMEM_MEMHIZx, MEMHIZx
: FMC_PMEM_MEMHOLDx ( %bbbbbbbb -- x addr ) 16 lshift FMC_PMEM ; \ FMC_PMEM_MEMHOLDx, MEMHOLDx
: FMC_PMEM_MEMWAITx ( %bbbbbbbb -- x addr ) 8 lshift FMC_PMEM ; \ FMC_PMEM_MEMWAITx, MEMWAITx
: FMC_PMEM_MEMSETx ( %bbbbbbbb -- x addr ) FMC_PMEM ; \ FMC_PMEM_MEMSETx, MEMSETx

\ FMC_PATT (read-write) Reset:0xFCFCFCFC
: FMC_PATT_ATTHIZx ( %bbbbbbbb -- x addr ) 24 lshift FMC_PATT ; \ FMC_PATT_ATTHIZx, ATTHIZx
: FMC_PATT_ATTHOLDx ( %bbbbbbbb -- x addr ) 16 lshift FMC_PATT ; \ FMC_PATT_ATTHOLDx, ATTHOLDx
: FMC_PATT_ATTWAITx ( %bbbbbbbb -- x addr ) 8 lshift FMC_PATT ; \ FMC_PATT_ATTWAITx, ATTWAITx
: FMC_PATT_ATTSETx ( %bbbbbbbb -- x addr ) FMC_PATT ; \ FMC_PATT_ATTSETx, ATTSETx

\ FMC_ECCR (read-only) Reset:0x00000000
: FMC_ECCR_ECCx? ( --  x ) FMC_ECCR @ ; \ FMC_ECCR_ECCx, ECCx

\ FMC_BWTR1 (read-write) Reset:0x0FFFFFFF
: FMC_BWTR1_ACCMOD ( %bb -- x addr ) 28 lshift FMC_BWTR1 ; \ FMC_BWTR1_ACCMOD, ACCMOD
: FMC_BWTR1_DATLAT ( %bbbb -- x addr ) 24 lshift FMC_BWTR1 ; \ FMC_BWTR1_DATLAT, DATLAT
: FMC_BWTR1_CLKDIV ( %bbbb -- x addr ) 20 lshift FMC_BWTR1 ; \ FMC_BWTR1_CLKDIV, CLKDIV
: FMC_BWTR1_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FMC_BWTR1 ; \ FMC_BWTR1_DATAST, DATAST
: FMC_BWTR1_ADDHLD ( %bbbb -- x addr ) 4 lshift FMC_BWTR1 ; \ FMC_BWTR1_ADDHLD, ADDHLD
: FMC_BWTR1_ADDSET ( %bbbb -- x addr ) FMC_BWTR1 ; \ FMC_BWTR1_ADDSET, ADDSET

\ FMC_BWTR2 (read-write) Reset:0x0FFFFFFF
: FMC_BWTR2_ACCMOD ( %bb -- x addr ) 28 lshift FMC_BWTR2 ; \ FMC_BWTR2_ACCMOD, ACCMOD
: FMC_BWTR2_DATLAT ( %bbbb -- x addr ) 24 lshift FMC_BWTR2 ; \ FMC_BWTR2_DATLAT, DATLAT
: FMC_BWTR2_CLKDIV ( %bbbb -- x addr ) 20 lshift FMC_BWTR2 ; \ FMC_BWTR2_CLKDIV, CLKDIV
: FMC_BWTR2_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FMC_BWTR2 ; \ FMC_BWTR2_DATAST, DATAST
: FMC_BWTR2_ADDHLD ( %bbbb -- x addr ) 4 lshift FMC_BWTR2 ; \ FMC_BWTR2_ADDHLD, ADDHLD
: FMC_BWTR2_ADDSET ( %bbbb -- x addr ) FMC_BWTR2 ; \ FMC_BWTR2_ADDSET, ADDSET

\ FMC_BWTR3 (read-write) Reset:0x0FFFFFFF
: FMC_BWTR3_ACCMOD ( %bb -- x addr ) 28 lshift FMC_BWTR3 ; \ FMC_BWTR3_ACCMOD, ACCMOD
: FMC_BWTR3_DATLAT ( %bbbb -- x addr ) 24 lshift FMC_BWTR3 ; \ FMC_BWTR3_DATLAT, DATLAT
: FMC_BWTR3_CLKDIV ( %bbbb -- x addr ) 20 lshift FMC_BWTR3 ; \ FMC_BWTR3_CLKDIV, CLKDIV
: FMC_BWTR3_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FMC_BWTR3 ; \ FMC_BWTR3_DATAST, DATAST
: FMC_BWTR3_ADDHLD ( %bbbb -- x addr ) 4 lshift FMC_BWTR3 ; \ FMC_BWTR3_ADDHLD, ADDHLD
: FMC_BWTR3_ADDSET ( %bbbb -- x addr ) FMC_BWTR3 ; \ FMC_BWTR3_ADDSET, ADDSET

\ FMC_BWTR4 (read-write) Reset:0x0FFFFFFF
: FMC_BWTR4_ACCMOD ( %bb -- x addr ) 28 lshift FMC_BWTR4 ; \ FMC_BWTR4_ACCMOD, ACCMOD
: FMC_BWTR4_DATLAT ( %bbbb -- x addr ) 24 lshift FMC_BWTR4 ; \ FMC_BWTR4_DATLAT, DATLAT
: FMC_BWTR4_CLKDIV ( %bbbb -- x addr ) 20 lshift FMC_BWTR4 ; \ FMC_BWTR4_CLKDIV, CLKDIV
: FMC_BWTR4_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FMC_BWTR4 ; \ FMC_BWTR4_DATAST, DATAST
: FMC_BWTR4_ADDHLD ( %bbbb -- x addr ) 4 lshift FMC_BWTR4 ; \ FMC_BWTR4_ADDHLD, ADDHLD
: FMC_BWTR4_ADDSET ( %bbbb -- x addr ) FMC_BWTR4 ; \ FMC_BWTR4_ADDSET, ADDSET

\ FMC_SDCR1 (read-write) Reset:0x000002D0
: FMC_SDCR1_NC ( %bb -- x addr ) FMC_SDCR1 ; \ FMC_SDCR1_NC, Number of column address bits
: FMC_SDCR1_NR ( %bb -- x addr ) 2 lshift FMC_SDCR1 ; \ FMC_SDCR1_NR, Number of row address bits
: FMC_SDCR1_MWID ( %bb -- x addr ) 4 lshift FMC_SDCR1 ; \ FMC_SDCR1_MWID, Memory data bus width
: FMC_SDCR1_NB ( -- x addr ) 6 bit FMC_SDCR1 ; \ FMC_SDCR1_NB, Number of internal banks
: FMC_SDCR1_CAS ( %bb -- x addr ) 7 lshift FMC_SDCR1 ; \ FMC_SDCR1_CAS, CAS latency
: FMC_SDCR1_WP ( -- x addr ) 9 bit FMC_SDCR1 ; \ FMC_SDCR1_WP, Write protection
: FMC_SDCR1_SDCLK ( %bb -- x addr ) 10 lshift FMC_SDCR1 ; \ FMC_SDCR1_SDCLK, SDRAM clock configuration
: FMC_SDCR1_RBURST ( -- x addr ) 12 bit FMC_SDCR1 ; \ FMC_SDCR1_RBURST, Burst read
: FMC_SDCR1_RPIPE ( %bb -- x addr ) 13 lshift FMC_SDCR1 ; \ FMC_SDCR1_RPIPE, Read pipe

\ FMC_SDCR2 (read-write) Reset:0x000002D0
: FMC_SDCR2_NC ( %bb -- x addr ) FMC_SDCR2 ; \ FMC_SDCR2_NC, Number of column address bits
: FMC_SDCR2_NR ( %bb -- x addr ) 2 lshift FMC_SDCR2 ; \ FMC_SDCR2_NR, Number of row address bits
: FMC_SDCR2_MWID ( %bb -- x addr ) 4 lshift FMC_SDCR2 ; \ FMC_SDCR2_MWID, Memory data bus width
: FMC_SDCR2_NB ( -- x addr ) 6 bit FMC_SDCR2 ; \ FMC_SDCR2_NB, Number of internal banks
: FMC_SDCR2_CAS ( %bb -- x addr ) 7 lshift FMC_SDCR2 ; \ FMC_SDCR2_CAS, CAS latency
: FMC_SDCR2_WP ( -- x addr ) 9 bit FMC_SDCR2 ; \ FMC_SDCR2_WP, Write protection
: FMC_SDCR2_SDCLK ( %bb -- x addr ) 10 lshift FMC_SDCR2 ; \ FMC_SDCR2_SDCLK, SDRAM clock configuration
: FMC_SDCR2_RBURST ( -- x addr ) 12 bit FMC_SDCR2 ; \ FMC_SDCR2_RBURST, Burst read
: FMC_SDCR2_RPIPE ( %bb -- x addr ) 13 lshift FMC_SDCR2 ; \ FMC_SDCR2_RPIPE, Read pipe

\ FMC_SDTR1 (read-write) Reset:0x0FFFFFFF
: FMC_SDTR1_TMRD ( %bbbb -- x addr ) FMC_SDTR1 ; \ FMC_SDTR1_TMRD, Load Mode Register to Active
: FMC_SDTR1_TXSR ( %bbbb -- x addr ) 4 lshift FMC_SDTR1 ; \ FMC_SDTR1_TXSR, Exit self-refresh delay
: FMC_SDTR1_TRAS ( %bbbb -- x addr ) 8 lshift FMC_SDTR1 ; \ FMC_SDTR1_TRAS, Self refresh time
: FMC_SDTR1_TRC ( %bbbb -- x addr ) 12 lshift FMC_SDTR1 ; \ FMC_SDTR1_TRC, Row cycle delay
: FMC_SDTR1_TWR ( %bbbb -- x addr ) 16 lshift FMC_SDTR1 ; \ FMC_SDTR1_TWR, Recovery delay
: FMC_SDTR1_TRP ( %bbbb -- x addr ) 20 lshift FMC_SDTR1 ; \ FMC_SDTR1_TRP, Row precharge delay
: FMC_SDTR1_TRCD ( %bbbb -- x addr ) 24 lshift FMC_SDTR1 ; \ FMC_SDTR1_TRCD, Row to column delay

\ FMC_SDTR2 (read-write) Reset:0x0FFFFFFF
: FMC_SDTR2_TMRD ( %bbbb -- x addr ) FMC_SDTR2 ; \ FMC_SDTR2_TMRD, Load Mode Register to Active
: FMC_SDTR2_TXSR ( %bbbb -- x addr ) 4 lshift FMC_SDTR2 ; \ FMC_SDTR2_TXSR, Exit self-refresh delay
: FMC_SDTR2_TRAS ( %bbbb -- x addr ) 8 lshift FMC_SDTR2 ; \ FMC_SDTR2_TRAS, Self refresh time
: FMC_SDTR2_TRC ( %bbbb -- x addr ) 12 lshift FMC_SDTR2 ; \ FMC_SDTR2_TRC, Row cycle delay
: FMC_SDTR2_TWR ( %bbbb -- x addr ) 16 lshift FMC_SDTR2 ; \ FMC_SDTR2_TWR, Recovery delay
: FMC_SDTR2_TRP ( %bbbb -- x addr ) 20 lshift FMC_SDTR2 ; \ FMC_SDTR2_TRP, Row precharge delay
: FMC_SDTR2_TRCD ( %bbbb -- x addr ) 24 lshift FMC_SDTR2 ; \ FMC_SDTR2_TRCD, Row to column delay

\ FMC_SDCMR (multiple-access)  Reset:0x00000000
: FMC_SDCMR_MODE ( %bbb -- x addr ) FMC_SDCMR ; \ FMC_SDCMR_MODE, Command mode
: FMC_SDCMR_CTB2 ( -- x addr ) 3 bit FMC_SDCMR ; \ FMC_SDCMR_CTB2, Command target bank 2
: FMC_SDCMR_CTB1 ( -- x addr ) 4 bit FMC_SDCMR ; \ FMC_SDCMR_CTB1, Command target bank 1
: FMC_SDCMR_NRFS ( %bbbb -- x addr ) 5 lshift FMC_SDCMR ; \ FMC_SDCMR_NRFS, Number of Auto-refresh
: FMC_SDCMR_MRD x addr ) 9 lshift FMC_SDCMR ; \ FMC_SDCMR_MRD, Mode Register definition

\ FMC_SDRTR (multiple-access)  Reset:0x00000000
: FMC_SDRTR_CRE? ( -- 1|0 ) 0 bit FMC_SDRTR bit@ ; \ FMC_SDRTR_CRE, Clear Refresh error flag
: FMC_SDRTR_COUNT x addr ) 1 lshift FMC_SDRTR ; \ FMC_SDRTR_COUNT, Refresh Timer Count
: FMC_SDRTR_REIE ( -- x addr ) 14 bit FMC_SDRTR ; \ FMC_SDRTR_REIE, RES Interrupt Enable

\ FMC_SDSR (read-only) Reset:0x00000000
: FMC_SDSR_RE? ( --  1|0 ) 0 bit FMC_SDSR bit@ ; \ FMC_SDSR_RE, Refresh error flag
: FMC_SDSR_MODES1? ( --  x ) 1 lshift FMC_SDSR @ ; \ FMC_SDSR_MODES1, Status Mode for Bank 1
: FMC_SDSR_MODES2? ( --  x ) 3 lshift FMC_SDSR @ ; \ FMC_SDSR_MODES2, Status Mode for Bank 2
: FMC_SDSR_BUSY? ( --  1|0 ) 5 bit FMC_SDSR bit@ ; \ FMC_SDSR_BUSY, Busy status

\ DBG_DBGMCU_IDCODE (read-only) Reset:0x10006411
: DBG_DBGMCU_IDCODE_DEV_ID? ( --  x ) DBG_DBGMCU_IDCODE @ ; \ DBG_DBGMCU_IDCODE_DEV_ID, DEV_ID
: DBG_DBGMCU_IDCODE_REV_ID? ( --  x ) 16 lshift DBG_DBGMCU_IDCODE @ ; \ DBG_DBGMCU_IDCODE_REV_ID, REV_ID

\ DBG_DBGMCU_CR (read-write) Reset:0x00000000
: DBG_DBGMCU_CR_DBG_SLEEP ( -- x addr ) 0 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_DBG_SLEEP, DBG_SLEEP
: DBG_DBGMCU_CR_DBG_STOP ( -- x addr ) 1 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_DBG_STOP, DBG_STOP
: DBG_DBGMCU_CR_DBG_STANDBY ( -- x addr ) 2 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_DBG_STANDBY, DBG_STANDBY
: DBG_DBGMCU_CR_TRACE_IOEN ( -- x addr ) 5 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_TRACE_IOEN, TRACE_IOEN
: DBG_DBGMCU_CR_TRACE_MODE ( %bb -- x addr ) 6 lshift DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_TRACE_MODE, TRACE_MODE

\ DBG_DBGMCU_APB1_FZ (read-write) Reset:0x00000000
: DBG_DBGMCU_APB1_FZ_DBG_TIM2_STOP ( -- x addr ) 0 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM2_STOP, DBG_TIM2_STOP
: DBG_DBGMCU_APB1_FZ_DBG_TIM3_STOP ( -- x addr ) 1 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM3_STOP, DBG_TIM3 _STOP
: DBG_DBGMCU_APB1_FZ_DBG_TIM4_STOP ( -- x addr ) 2 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM4_STOP, DBG_TIM4_STOP
: DBG_DBGMCU_APB1_FZ_DBG_TIM5_STOP ( -- x addr ) 3 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM5_STOP, DBG_TIM5_STOP
: DBG_DBGMCU_APB1_FZ_DBG_TIM6_STOP ( -- x addr ) 4 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM6_STOP, DBG_TIM6_STOP
: DBG_DBGMCU_APB1_FZ_DBG_TIM7_STOP ( -- x addr ) 5 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM7_STOP, DBG_TIM7_STOP
: DBG_DBGMCU_APB1_FZ_DBG_TIM12_STOP ( -- x addr ) 6 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM12_STOP, DBG_TIM12_STOP
: DBG_DBGMCU_APB1_FZ_DBG_TIM13_STOP ( -- x addr ) 7 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM13_STOP, DBG_TIM13_STOP
: DBG_DBGMCU_APB1_FZ_DBG_TIM14_STOP ( -- x addr ) 8 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM14_STOP, DBG_TIM14_STOP
: DBG_DBGMCU_APB1_FZ_DBG_WWDG_STOP ( -- x addr ) 11 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_WWDG_STOP, DBG_WWDG_STOP
: DBG_DBGMCU_APB1_FZ_DBG_IWDEG_STOP ( -- x addr ) 12 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_IWDEG_STOP, DBG_IWDEG_STOP
: DBG_DBGMCU_APB1_FZ_DBG_J2C1_SMBUS_TIMEOUT ( -- x addr ) 21 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_J2C1_SMBUS_TIMEOUT, DBG_J2C1_SMBUS_TIMEOUT
: DBG_DBGMCU_APB1_FZ_DBG_J2C2_SMBUS_TIMEOUT ( -- x addr ) 22 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_J2C2_SMBUS_TIMEOUT, DBG_J2C2_SMBUS_TIMEOUT
: DBG_DBGMCU_APB1_FZ_DBG_J2C3SMBUS_TIMEOUT ( -- x addr ) 23 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_J2C3SMBUS_TIMEOUT, DBG_J2C3SMBUS_TIMEOUT
: DBG_DBGMCU_APB1_FZ_DBG_CAN1_STOP ( -- x addr ) 25 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_CAN1_STOP, DBG_CAN1_STOP
: DBG_DBGMCU_APB1_FZ_DBG_CAN2_STOP ( -- x addr ) 26 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_CAN2_STOP, DBG_CAN2_STOP

\ DBG_DBGMCU_APB2_FZ (read-write) Reset:0x00000000
: DBG_DBGMCU_APB2_FZ_DBG_TIM1_STOP ( -- x addr ) 0 bit DBG_DBGMCU_APB2_FZ ; \ DBG_DBGMCU_APB2_FZ_DBG_TIM1_STOP, TIM1 counter stopped when core is halted
: DBG_DBGMCU_APB2_FZ_DBG_TIM8_STOP ( -- x addr ) 1 bit DBG_DBGMCU_APB2_FZ ; \ DBG_DBGMCU_APB2_FZ_DBG_TIM8_STOP, TIM8 counter stopped when core is halted
: DBG_DBGMCU_APB2_FZ_DBG_TIM9_STOP ( -- x addr ) 16 bit DBG_DBGMCU_APB2_FZ ; \ DBG_DBGMCU_APB2_FZ_DBG_TIM9_STOP, TIM9 counter stopped when core is halted
: DBG_DBGMCU_APB2_FZ_DBG_TIM10_STOP ( -- x addr ) 17 bit DBG_DBGMCU_APB2_FZ ; \ DBG_DBGMCU_APB2_FZ_DBG_TIM10_STOP, TIM10 counter stopped when core is halted
: DBG_DBGMCU_APB2_FZ_DBG_TIM11_STOP ( -- x addr ) 18 bit DBG_DBGMCU_APB2_FZ ; \ DBG_DBGMCU_APB2_FZ_DBG_TIM11_STOP, TIM11 counter stopped when core is halted

\ DMA2_LISR (read-only) Reset:0x00000000
: DMA2_LISR_TCIF3? ( --  1|0 ) 27 bit DMA2_LISR bit@ ; \ DMA2_LISR_TCIF3, Stream x transfer complete interrupt flag x = 3..0
: DMA2_LISR_HTIF3? ( --  1|0 ) 26 bit DMA2_LISR bit@ ; \ DMA2_LISR_HTIF3, Stream x half transfer interrupt flag x=3..0
: DMA2_LISR_TEIF3? ( --  1|0 ) 25 bit DMA2_LISR bit@ ; \ DMA2_LISR_TEIF3, Stream x transfer error interrupt flag x=3..0
: DMA2_LISR_DMEIF3? ( --  1|0 ) 24 bit DMA2_LISR bit@ ; \ DMA2_LISR_DMEIF3, Stream x direct mode error interrupt flag x=3..0
: DMA2_LISR_FEIF3? ( --  1|0 ) 22 bit DMA2_LISR bit@ ; \ DMA2_LISR_FEIF3, Stream x FIFO error interrupt flag x=3..0
: DMA2_LISR_TCIF2? ( --  1|0 ) 21 bit DMA2_LISR bit@ ; \ DMA2_LISR_TCIF2, Stream x transfer complete interrupt flag x = 3..0
: DMA2_LISR_HTIF2? ( --  1|0 ) 20 bit DMA2_LISR bit@ ; \ DMA2_LISR_HTIF2, Stream x half transfer interrupt flag x=3..0
: DMA2_LISR_TEIF2? ( --  1|0 ) 19 bit DMA2_LISR bit@ ; \ DMA2_LISR_TEIF2, Stream x transfer error interrupt flag x=3..0
: DMA2_LISR_DMEIF2? ( --  1|0 ) 18 bit DMA2_LISR bit@ ; \ DMA2_LISR_DMEIF2, Stream x direct mode error interrupt flag x=3..0
: DMA2_LISR_FEIF2? ( --  1|0 ) 16 bit DMA2_LISR bit@ ; \ DMA2_LISR_FEIF2, Stream x FIFO error interrupt flag x=3..0
: DMA2_LISR_TCIF1? ( --  1|0 ) 11 bit DMA2_LISR bit@ ; \ DMA2_LISR_TCIF1, Stream x transfer complete interrupt flag x = 3..0
: DMA2_LISR_HTIF1? ( --  1|0 ) 10 bit DMA2_LISR bit@ ; \ DMA2_LISR_HTIF1, Stream x half transfer interrupt flag x=3..0
: DMA2_LISR_TEIF1? ( --  1|0 ) 9 bit DMA2_LISR bit@ ; \ DMA2_LISR_TEIF1, Stream x transfer error interrupt flag x=3..0
: DMA2_LISR_DMEIF1? ( --  1|0 ) 8 bit DMA2_LISR bit@ ; \ DMA2_LISR_DMEIF1, Stream x direct mode error interrupt flag x=3..0
: DMA2_LISR_FEIF1? ( --  1|0 ) 6 bit DMA2_LISR bit@ ; \ DMA2_LISR_FEIF1, Stream x FIFO error interrupt flag x=3..0
: DMA2_LISR_TCIF0? ( --  1|0 ) 5 bit DMA2_LISR bit@ ; \ DMA2_LISR_TCIF0, Stream x transfer complete interrupt flag x = 3..0
: DMA2_LISR_HTIF0? ( --  1|0 ) 4 bit DMA2_LISR bit@ ; \ DMA2_LISR_HTIF0, Stream x half transfer interrupt flag x=3..0
: DMA2_LISR_TEIF0? ( --  1|0 ) 3 bit DMA2_LISR bit@ ; \ DMA2_LISR_TEIF0, Stream x transfer error interrupt flag x=3..0
: DMA2_LISR_DMEIF0? ( --  1|0 ) 2 bit DMA2_LISR bit@ ; \ DMA2_LISR_DMEIF0, Stream x direct mode error interrupt flag x=3..0
: DMA2_LISR_FEIF0? ( --  1|0 ) 0 bit DMA2_LISR bit@ ; \ DMA2_LISR_FEIF0, Stream x FIFO error interrupt flag x=3..0

\ DMA2_HISR (read-only) Reset:0x00000000
: DMA2_HISR_TCIF7? ( --  1|0 ) 27 bit DMA2_HISR bit@ ; \ DMA2_HISR_TCIF7, Stream x transfer complete interrupt flag x=7..4
: DMA2_HISR_HTIF7? ( --  1|0 ) 26 bit DMA2_HISR bit@ ; \ DMA2_HISR_HTIF7, Stream x half transfer interrupt flag x=7..4
: DMA2_HISR_TEIF7? ( --  1|0 ) 25 bit DMA2_HISR bit@ ; \ DMA2_HISR_TEIF7, Stream x transfer error interrupt flag x=7..4
: DMA2_HISR_DMEIF7? ( --  1|0 ) 24 bit DMA2_HISR bit@ ; \ DMA2_HISR_DMEIF7, Stream x direct mode error interrupt flag x=7..4
: DMA2_HISR_FEIF7? ( --  1|0 ) 22 bit DMA2_HISR bit@ ; \ DMA2_HISR_FEIF7, Stream x FIFO error interrupt flag x=7..4
: DMA2_HISR_TCIF6? ( --  1|0 ) 21 bit DMA2_HISR bit@ ; \ DMA2_HISR_TCIF6, Stream x transfer complete interrupt flag x=7..4
: DMA2_HISR_HTIF6? ( --  1|0 ) 20 bit DMA2_HISR bit@ ; \ DMA2_HISR_HTIF6, Stream x half transfer interrupt flag x=7..4
: DMA2_HISR_TEIF6? ( --  1|0 ) 19 bit DMA2_HISR bit@ ; \ DMA2_HISR_TEIF6, Stream x transfer error interrupt flag x=7..4
: DMA2_HISR_DMEIF6? ( --  1|0 ) 18 bit DMA2_HISR bit@ ; \ DMA2_HISR_DMEIF6, Stream x direct mode error interrupt flag x=7..4
: DMA2_HISR_FEIF6? ( --  1|0 ) 16 bit DMA2_HISR bit@ ; \ DMA2_HISR_FEIF6, Stream x FIFO error interrupt flag x=7..4
: DMA2_HISR_TCIF5? ( --  1|0 ) 11 bit DMA2_HISR bit@ ; \ DMA2_HISR_TCIF5, Stream x transfer complete interrupt flag x=7..4
: DMA2_HISR_HTIF5? ( --  1|0 ) 10 bit DMA2_HISR bit@ ; \ DMA2_HISR_HTIF5, Stream x half transfer interrupt flag x=7..4
: DMA2_HISR_TEIF5? ( --  1|0 ) 9 bit DMA2_HISR bit@ ; \ DMA2_HISR_TEIF5, Stream x transfer error interrupt flag x=7..4
: DMA2_HISR_DMEIF5? ( --  1|0 ) 8 bit DMA2_HISR bit@ ; \ DMA2_HISR_DMEIF5, Stream x direct mode error interrupt flag x=7..4
: DMA2_HISR_FEIF5? ( --  1|0 ) 6 bit DMA2_HISR bit@ ; \ DMA2_HISR_FEIF5, Stream x FIFO error interrupt flag x=7..4
: DMA2_HISR_TCIF4? ( --  1|0 ) 5 bit DMA2_HISR bit@ ; \ DMA2_HISR_TCIF4, Stream x transfer complete interrupt flag x=7..4
: DMA2_HISR_HTIF4? ( --  1|0 ) 4 bit DMA2_HISR bit@ ; \ DMA2_HISR_HTIF4, Stream x half transfer interrupt flag x=7..4
: DMA2_HISR_TEIF4? ( --  1|0 ) 3 bit DMA2_HISR bit@ ; \ DMA2_HISR_TEIF4, Stream x transfer error interrupt flag x=7..4
: DMA2_HISR_DMEIF4? ( --  1|0 ) 2 bit DMA2_HISR bit@ ; \ DMA2_HISR_DMEIF4, Stream x direct mode error interrupt flag x=7..4
: DMA2_HISR_FEIF4? ( --  1|0 ) 0 bit DMA2_HISR bit@ ; \ DMA2_HISR_FEIF4, Stream x FIFO error interrupt flag x=7..4

\ DMA2_LIFCR (read-write) Reset:0x00000000
: DMA2_LIFCR_CTCIF3 ( -- x addr ) 27 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTCIF3, Stream x clear transfer complete interrupt flag x = 3..0
: DMA2_LIFCR_CHTIF3 ( -- x addr ) 26 bit DMA2_LIFCR ; \ DMA2_LIFCR_CHTIF3, Stream x clear half transfer interrupt flag x = 3..0
: DMA2_LIFCR_CTEIF3 ( -- x addr ) 25 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTEIF3, Stream x clear transfer error interrupt flag x = 3..0
: DMA2_LIFCR_CDMEIF3 ( -- x addr ) 24 bit DMA2_LIFCR ; \ DMA2_LIFCR_CDMEIF3, Stream x clear direct mode error interrupt flag x = 3..0
: DMA2_LIFCR_CFEIF3 ( -- x addr ) 22 bit DMA2_LIFCR ; \ DMA2_LIFCR_CFEIF3, Stream x clear FIFO error interrupt flag x = 3..0
: DMA2_LIFCR_CTCIF2 ( -- x addr ) 21 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTCIF2, Stream x clear transfer complete interrupt flag x = 3..0
: DMA2_LIFCR_CHTIF2 ( -- x addr ) 20 bit DMA2_LIFCR ; \ DMA2_LIFCR_CHTIF2, Stream x clear half transfer interrupt flag x = 3..0
: DMA2_LIFCR_CTEIF2 ( -- x addr ) 19 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTEIF2, Stream x clear transfer error interrupt flag x = 3..0
: DMA2_LIFCR_CDMEIF2 ( -- x addr ) 18 bit DMA2_LIFCR ; \ DMA2_LIFCR_CDMEIF2, Stream x clear direct mode error interrupt flag x = 3..0
: DMA2_LIFCR_CFEIF2 ( -- x addr ) 16 bit DMA2_LIFCR ; \ DMA2_LIFCR_CFEIF2, Stream x clear FIFO error interrupt flag x = 3..0
: DMA2_LIFCR_CTCIF1 ( -- x addr ) 11 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTCIF1, Stream x clear transfer complete interrupt flag x = 3..0
: DMA2_LIFCR_CHTIF1 ( -- x addr ) 10 bit DMA2_LIFCR ; \ DMA2_LIFCR_CHTIF1, Stream x clear half transfer interrupt flag x = 3..0
: DMA2_LIFCR_CTEIF1 ( -- x addr ) 9 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTEIF1, Stream x clear transfer error interrupt flag x = 3..0
: DMA2_LIFCR_CDMEIF1 ( -- x addr ) 8 bit DMA2_LIFCR ; \ DMA2_LIFCR_CDMEIF1, Stream x clear direct mode error interrupt flag x = 3..0
: DMA2_LIFCR_CFEIF1 ( -- x addr ) 6 bit DMA2_LIFCR ; \ DMA2_LIFCR_CFEIF1, Stream x clear FIFO error interrupt flag x = 3..0
: DMA2_LIFCR_CTCIF0 ( -- x addr ) 5 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTCIF0, Stream x clear transfer complete interrupt flag x = 3..0
: DMA2_LIFCR_CHTIF0 ( -- x addr ) 4 bit DMA2_LIFCR ; \ DMA2_LIFCR_CHTIF0, Stream x clear half transfer interrupt flag x = 3..0
: DMA2_LIFCR_CTEIF0 ( -- x addr ) 3 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTEIF0, Stream x clear transfer error interrupt flag x = 3..0
: DMA2_LIFCR_CDMEIF0 ( -- x addr ) 2 bit DMA2_LIFCR ; \ DMA2_LIFCR_CDMEIF0, Stream x clear direct mode error interrupt flag x = 3..0
: DMA2_LIFCR_CFEIF0 ( -- x addr ) 0 bit DMA2_LIFCR ; \ DMA2_LIFCR_CFEIF0, Stream x clear FIFO error interrupt flag x = 3..0

\ DMA2_HIFCR (read-write) Reset:0x00000000
: DMA2_HIFCR_CTCIF7 ( -- x addr ) 27 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTCIF7, Stream x clear transfer complete interrupt flag x = 7..4
: DMA2_HIFCR_CHTIF7 ( -- x addr ) 26 bit DMA2_HIFCR ; \ DMA2_HIFCR_CHTIF7, Stream x clear half transfer interrupt flag x = 7..4
: DMA2_HIFCR_CTEIF7 ( -- x addr ) 25 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTEIF7, Stream x clear transfer error interrupt flag x = 7..4
: DMA2_HIFCR_CDMEIF7 ( -- x addr ) 24 bit DMA2_HIFCR ; \ DMA2_HIFCR_CDMEIF7, Stream x clear direct mode error interrupt flag x = 7..4
: DMA2_HIFCR_CFEIF7 ( -- x addr ) 22 bit DMA2_HIFCR ; \ DMA2_HIFCR_CFEIF7, Stream x clear FIFO error interrupt flag x = 7..4
: DMA2_HIFCR_CTCIF6 ( -- x addr ) 21 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTCIF6, Stream x clear transfer complete interrupt flag x = 7..4
: DMA2_HIFCR_CHTIF6 ( -- x addr ) 20 bit DMA2_HIFCR ; \ DMA2_HIFCR_CHTIF6, Stream x clear half transfer interrupt flag x = 7..4
: DMA2_HIFCR_CTEIF6 ( -- x addr ) 19 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTEIF6, Stream x clear transfer error interrupt flag x = 7..4
: DMA2_HIFCR_CDMEIF6 ( -- x addr ) 18 bit DMA2_HIFCR ; \ DMA2_HIFCR_CDMEIF6, Stream x clear direct mode error interrupt flag x = 7..4
: DMA2_HIFCR_CFEIF6 ( -- x addr ) 16 bit DMA2_HIFCR ; \ DMA2_HIFCR_CFEIF6, Stream x clear FIFO error interrupt flag x = 7..4
: DMA2_HIFCR_CTCIF5 ( -- x addr ) 11 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTCIF5, Stream x clear transfer complete interrupt flag x = 7..4
: DMA2_HIFCR_CHTIF5 ( -- x addr ) 10 bit DMA2_HIFCR ; \ DMA2_HIFCR_CHTIF5, Stream x clear half transfer interrupt flag x = 7..4
: DMA2_HIFCR_CTEIF5 ( -- x addr ) 9 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTEIF5, Stream x clear transfer error interrupt flag x = 7..4
: DMA2_HIFCR_CDMEIF5 ( -- x addr ) 8 bit DMA2_HIFCR ; \ DMA2_HIFCR_CDMEIF5, Stream x clear direct mode error interrupt flag x = 7..4
: DMA2_HIFCR_CFEIF5 ( -- x addr ) 6 bit DMA2_HIFCR ; \ DMA2_HIFCR_CFEIF5, Stream x clear FIFO error interrupt flag x = 7..4
: DMA2_HIFCR_CTCIF4 ( -- x addr ) 5 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTCIF4, Stream x clear transfer complete interrupt flag x = 7..4
: DMA2_HIFCR_CHTIF4 ( -- x addr ) 4 bit DMA2_HIFCR ; \ DMA2_HIFCR_CHTIF4, Stream x clear half transfer interrupt flag x = 7..4
: DMA2_HIFCR_CTEIF4 ( -- x addr ) 3 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTEIF4, Stream x clear transfer error interrupt flag x = 7..4
: DMA2_HIFCR_CDMEIF4 ( -- x addr ) 2 bit DMA2_HIFCR ; \ DMA2_HIFCR_CDMEIF4, Stream x clear direct mode error interrupt flag x = 7..4
: DMA2_HIFCR_CFEIF4 ( -- x addr ) 0 bit DMA2_HIFCR ; \ DMA2_HIFCR_CFEIF4, Stream x clear FIFO error interrupt flag x = 7..4

\ DMA2_S0CR (read-write) Reset:0x00000000
: DMA2_S0CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S0CR ; \ DMA2_S0CR_CHSEL, Channel selection
: DMA2_S0CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S0CR ; \ DMA2_S0CR_MBURST, Memory burst transfer configuration
: DMA2_S0CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S0CR ; \ DMA2_S0CR_PBURST, Peripheral burst transfer configuration
: DMA2_S0CR_CT ( -- x addr ) 19 bit DMA2_S0CR ; \ DMA2_S0CR_CT, Current target only in double buffer mode
: DMA2_S0CR_DBM ( -- x addr ) 18 bit DMA2_S0CR ; \ DMA2_S0CR_DBM, Double buffer mode
: DMA2_S0CR_PL ( %bb -- x addr ) 16 lshift DMA2_S0CR ; \ DMA2_S0CR_PL, Priority level
: DMA2_S0CR_PINCOS ( -- x addr ) 15 bit DMA2_S0CR ; \ DMA2_S0CR_PINCOS, Peripheral increment offset size
: DMA2_S0CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S0CR ; \ DMA2_S0CR_MSIZE, Memory data size
: DMA2_S0CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S0CR ; \ DMA2_S0CR_PSIZE, Peripheral data size
: DMA2_S0CR_MINC ( -- x addr ) 10 bit DMA2_S0CR ; \ DMA2_S0CR_MINC, Memory increment mode
: DMA2_S0CR_PINC ( -- x addr ) 9 bit DMA2_S0CR ; \ DMA2_S0CR_PINC, Peripheral increment mode
: DMA2_S0CR_CIRC ( -- x addr ) 8 bit DMA2_S0CR ; \ DMA2_S0CR_CIRC, Circular mode
: DMA2_S0CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S0CR ; \ DMA2_S0CR_DIR, Data transfer direction
: DMA2_S0CR_PFCTRL ( -- x addr ) 5 bit DMA2_S0CR ; \ DMA2_S0CR_PFCTRL, Peripheral flow controller
: DMA2_S0CR_TCIE ( -- x addr ) 4 bit DMA2_S0CR ; \ DMA2_S0CR_TCIE, Transfer complete interrupt enable
: DMA2_S0CR_HTIE ( -- x addr ) 3 bit DMA2_S0CR ; \ DMA2_S0CR_HTIE, Half transfer interrupt enable
: DMA2_S0CR_TEIE ( -- x addr ) 2 bit DMA2_S0CR ; \ DMA2_S0CR_TEIE, Transfer error interrupt enable
: DMA2_S0CR_DMEIE ( -- x addr ) 1 bit DMA2_S0CR ; \ DMA2_S0CR_DMEIE, Direct mode error interrupt enable
: DMA2_S0CR_EN ( -- x addr ) 0 bit DMA2_S0CR ; \ DMA2_S0CR_EN, Stream enable / flag stream ready when read low

\ DMA2_S0NDTR (read-write) Reset:0x00000000
: DMA2_S0NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S0NDTR ; \ DMA2_S0NDTR_NDT, Number of data items to transfer

\ DMA2_S0PAR (read-write) Reset:0x00000000
: DMA2_S0PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S0PAR ; \ DMA2_S0PAR_PA, Peripheral address

\ DMA2_S0M0AR (read-write) Reset:0x00000000
: DMA2_S0M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S0M0AR ; \ DMA2_S0M0AR_M0A, Memory 0 address

\ DMA2_S0M1AR (read-write) Reset:0x00000000
: DMA2_S0M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S0M1AR ; \ DMA2_S0M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA2_S0FCR (multiple-access)  Reset:0x00000021
: DMA2_S0FCR_FEIE ( -- x addr ) 7 bit DMA2_S0FCR ; \ DMA2_S0FCR_FEIE, FIFO error interrupt enable
: DMA2_S0FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S0FCR bit@ ; \ DMA2_S0FCR_FS, FIFO status
: DMA2_S0FCR_DMDIS ( -- x addr ) 2 bit DMA2_S0FCR ; \ DMA2_S0FCR_DMDIS, Direct mode disable
: DMA2_S0FCR_FTH ( %bb -- x addr ) DMA2_S0FCR ; \ DMA2_S0FCR_FTH, FIFO threshold selection

\ DMA2_S1CR (read-write) Reset:0x00000000
: DMA2_S1CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S1CR ; \ DMA2_S1CR_CHSEL, Channel selection
: DMA2_S1CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S1CR ; \ DMA2_S1CR_MBURST, Memory burst transfer configuration
: DMA2_S1CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S1CR ; \ DMA2_S1CR_PBURST, Peripheral burst transfer configuration
: DMA2_S1CR_ACK ( -- x addr ) 20 bit DMA2_S1CR ; \ DMA2_S1CR_ACK, ACK
: DMA2_S1CR_CT ( -- x addr ) 19 bit DMA2_S1CR ; \ DMA2_S1CR_CT, Current target only in double buffer mode
: DMA2_S1CR_DBM ( -- x addr ) 18 bit DMA2_S1CR ; \ DMA2_S1CR_DBM, Double buffer mode
: DMA2_S1CR_PL ( %bb -- x addr ) 16 lshift DMA2_S1CR ; \ DMA2_S1CR_PL, Priority level
: DMA2_S1CR_PINCOS ( -- x addr ) 15 bit DMA2_S1CR ; \ DMA2_S1CR_PINCOS, Peripheral increment offset size
: DMA2_S1CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S1CR ; \ DMA2_S1CR_MSIZE, Memory data size
: DMA2_S1CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S1CR ; \ DMA2_S1CR_PSIZE, Peripheral data size
: DMA2_S1CR_MINC ( -- x addr ) 10 bit DMA2_S1CR ; \ DMA2_S1CR_MINC, Memory increment mode
: DMA2_S1CR_PINC ( -- x addr ) 9 bit DMA2_S1CR ; \ DMA2_S1CR_PINC, Peripheral increment mode
: DMA2_S1CR_CIRC ( -- x addr ) 8 bit DMA2_S1CR ; \ DMA2_S1CR_CIRC, Circular mode
: DMA2_S1CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S1CR ; \ DMA2_S1CR_DIR, Data transfer direction
: DMA2_S1CR_PFCTRL ( -- x addr ) 5 bit DMA2_S1CR ; \ DMA2_S1CR_PFCTRL, Peripheral flow controller
: DMA2_S1CR_TCIE ( -- x addr ) 4 bit DMA2_S1CR ; \ DMA2_S1CR_TCIE, Transfer complete interrupt enable
: DMA2_S1CR_HTIE ( -- x addr ) 3 bit DMA2_S1CR ; \ DMA2_S1CR_HTIE, Half transfer interrupt enable
: DMA2_S1CR_TEIE ( -- x addr ) 2 bit DMA2_S1CR ; \ DMA2_S1CR_TEIE, Transfer error interrupt enable
: DMA2_S1CR_DMEIE ( -- x addr ) 1 bit DMA2_S1CR ; \ DMA2_S1CR_DMEIE, Direct mode error interrupt enable
: DMA2_S1CR_EN ( -- x addr ) 0 bit DMA2_S1CR ; \ DMA2_S1CR_EN, Stream enable / flag stream ready when read low

\ DMA2_S1NDTR (read-write) Reset:0x00000000
: DMA2_S1NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S1NDTR ; \ DMA2_S1NDTR_NDT, Number of data items to transfer

\ DMA2_S1PAR (read-write) Reset:0x00000000
: DMA2_S1PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S1PAR ; \ DMA2_S1PAR_PA, Peripheral address

\ DMA2_S1M0AR (read-write) Reset:0x00000000
: DMA2_S1M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S1M0AR ; \ DMA2_S1M0AR_M0A, Memory 0 address

\ DMA2_S1M1AR (read-write) Reset:0x00000000
: DMA2_S1M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S1M1AR ; \ DMA2_S1M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA2_S1FCR (multiple-access)  Reset:0x00000021
: DMA2_S1FCR_FEIE ( -- x addr ) 7 bit DMA2_S1FCR ; \ DMA2_S1FCR_FEIE, FIFO error interrupt enable
: DMA2_S1FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S1FCR bit@ ; \ DMA2_S1FCR_FS, FIFO status
: DMA2_S1FCR_DMDIS ( -- x addr ) 2 bit DMA2_S1FCR ; \ DMA2_S1FCR_DMDIS, Direct mode disable
: DMA2_S1FCR_FTH ( %bb -- x addr ) DMA2_S1FCR ; \ DMA2_S1FCR_FTH, FIFO threshold selection

\ DMA2_S2CR (read-write) Reset:0x00000000
: DMA2_S2CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S2CR ; \ DMA2_S2CR_CHSEL, Channel selection
: DMA2_S2CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S2CR ; \ DMA2_S2CR_MBURST, Memory burst transfer configuration
: DMA2_S2CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S2CR ; \ DMA2_S2CR_PBURST, Peripheral burst transfer configuration
: DMA2_S2CR_ACK ( -- x addr ) 20 bit DMA2_S2CR ; \ DMA2_S2CR_ACK, ACK
: DMA2_S2CR_CT ( -- x addr ) 19 bit DMA2_S2CR ; \ DMA2_S2CR_CT, Current target only in double buffer mode
: DMA2_S2CR_DBM ( -- x addr ) 18 bit DMA2_S2CR ; \ DMA2_S2CR_DBM, Double buffer mode
: DMA2_S2CR_PL ( %bb -- x addr ) 16 lshift DMA2_S2CR ; \ DMA2_S2CR_PL, Priority level
: DMA2_S2CR_PINCOS ( -- x addr ) 15 bit DMA2_S2CR ; \ DMA2_S2CR_PINCOS, Peripheral increment offset size
: DMA2_S2CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S2CR ; \ DMA2_S2CR_MSIZE, Memory data size
: DMA2_S2CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S2CR ; \ DMA2_S2CR_PSIZE, Peripheral data size
: DMA2_S2CR_MINC ( -- x addr ) 10 bit DMA2_S2CR ; \ DMA2_S2CR_MINC, Memory increment mode
: DMA2_S2CR_PINC ( -- x addr ) 9 bit DMA2_S2CR ; \ DMA2_S2CR_PINC, Peripheral increment mode
: DMA2_S2CR_CIRC ( -- x addr ) 8 bit DMA2_S2CR ; \ DMA2_S2CR_CIRC, Circular mode
: DMA2_S2CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S2CR ; \ DMA2_S2CR_DIR, Data transfer direction
: DMA2_S2CR_PFCTRL ( -- x addr ) 5 bit DMA2_S2CR ; \ DMA2_S2CR_PFCTRL, Peripheral flow controller
: DMA2_S2CR_TCIE ( -- x addr ) 4 bit DMA2_S2CR ; \ DMA2_S2CR_TCIE, Transfer complete interrupt enable
: DMA2_S2CR_HTIE ( -- x addr ) 3 bit DMA2_S2CR ; \ DMA2_S2CR_HTIE, Half transfer interrupt enable
: DMA2_S2CR_TEIE ( -- x addr ) 2 bit DMA2_S2CR ; \ DMA2_S2CR_TEIE, Transfer error interrupt enable
: DMA2_S2CR_DMEIE ( -- x addr ) 1 bit DMA2_S2CR ; \ DMA2_S2CR_DMEIE, Direct mode error interrupt enable
: DMA2_S2CR_EN ( -- x addr ) 0 bit DMA2_S2CR ; \ DMA2_S2CR_EN, Stream enable / flag stream ready when read low

\ DMA2_S2NDTR (read-write) Reset:0x00000000
: DMA2_S2NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S2NDTR ; \ DMA2_S2NDTR_NDT, Number of data items to transfer

\ DMA2_S2PAR (read-write) Reset:0x00000000
: DMA2_S2PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S2PAR ; \ DMA2_S2PAR_PA, Peripheral address

\ DMA2_S2M0AR (read-write) Reset:0x00000000
: DMA2_S2M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S2M0AR ; \ DMA2_S2M0AR_M0A, Memory 0 address

\ DMA2_S2M1AR (read-write) Reset:0x00000000
: DMA2_S2M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S2M1AR ; \ DMA2_S2M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA2_S2FCR (multiple-access)  Reset:0x00000021
: DMA2_S2FCR_FEIE ( -- x addr ) 7 bit DMA2_S2FCR ; \ DMA2_S2FCR_FEIE, FIFO error interrupt enable
: DMA2_S2FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S2FCR bit@ ; \ DMA2_S2FCR_FS, FIFO status
: DMA2_S2FCR_DMDIS ( -- x addr ) 2 bit DMA2_S2FCR ; \ DMA2_S2FCR_DMDIS, Direct mode disable
: DMA2_S2FCR_FTH ( %bb -- x addr ) DMA2_S2FCR ; \ DMA2_S2FCR_FTH, FIFO threshold selection

\ DMA2_S3CR (read-write) Reset:0x00000000
: DMA2_S3CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S3CR ; \ DMA2_S3CR_CHSEL, Channel selection
: DMA2_S3CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S3CR ; \ DMA2_S3CR_MBURST, Memory burst transfer configuration
: DMA2_S3CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S3CR ; \ DMA2_S3CR_PBURST, Peripheral burst transfer configuration
: DMA2_S3CR_ACK ( -- x addr ) 20 bit DMA2_S3CR ; \ DMA2_S3CR_ACK, ACK
: DMA2_S3CR_CT ( -- x addr ) 19 bit DMA2_S3CR ; \ DMA2_S3CR_CT, Current target only in double buffer mode
: DMA2_S3CR_DBM ( -- x addr ) 18 bit DMA2_S3CR ; \ DMA2_S3CR_DBM, Double buffer mode
: DMA2_S3CR_PL ( %bb -- x addr ) 16 lshift DMA2_S3CR ; \ DMA2_S3CR_PL, Priority level
: DMA2_S3CR_PINCOS ( -- x addr ) 15 bit DMA2_S3CR ; \ DMA2_S3CR_PINCOS, Peripheral increment offset size
: DMA2_S3CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S3CR ; \ DMA2_S3CR_MSIZE, Memory data size
: DMA2_S3CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S3CR ; \ DMA2_S3CR_PSIZE, Peripheral data size
: DMA2_S3CR_MINC ( -- x addr ) 10 bit DMA2_S3CR ; \ DMA2_S3CR_MINC, Memory increment mode
: DMA2_S3CR_PINC ( -- x addr ) 9 bit DMA2_S3CR ; \ DMA2_S3CR_PINC, Peripheral increment mode
: DMA2_S3CR_CIRC ( -- x addr ) 8 bit DMA2_S3CR ; \ DMA2_S3CR_CIRC, Circular mode
: DMA2_S3CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S3CR ; \ DMA2_S3CR_DIR, Data transfer direction
: DMA2_S3CR_PFCTRL ( -- x addr ) 5 bit DMA2_S3CR ; \ DMA2_S3CR_PFCTRL, Peripheral flow controller
: DMA2_S3CR_TCIE ( -- x addr ) 4 bit DMA2_S3CR ; \ DMA2_S3CR_TCIE, Transfer complete interrupt enable
: DMA2_S3CR_HTIE ( -- x addr ) 3 bit DMA2_S3CR ; \ DMA2_S3CR_HTIE, Half transfer interrupt enable
: DMA2_S3CR_TEIE ( -- x addr ) 2 bit DMA2_S3CR ; \ DMA2_S3CR_TEIE, Transfer error interrupt enable
: DMA2_S3CR_DMEIE ( -- x addr ) 1 bit DMA2_S3CR ; \ DMA2_S3CR_DMEIE, Direct mode error interrupt enable
: DMA2_S3CR_EN ( -- x addr ) 0 bit DMA2_S3CR ; \ DMA2_S3CR_EN, Stream enable / flag stream ready when read low

\ DMA2_S3NDTR (read-write) Reset:0x00000000
: DMA2_S3NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S3NDTR ; \ DMA2_S3NDTR_NDT, Number of data items to transfer

\ DMA2_S3PAR (read-write) Reset:0x00000000
: DMA2_S3PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S3PAR ; \ DMA2_S3PAR_PA, Peripheral address

\ DMA2_S3M0AR (read-write) Reset:0x00000000
: DMA2_S3M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S3M0AR ; \ DMA2_S3M0AR_M0A, Memory 0 address

\ DMA2_S3M1AR (read-write) Reset:0x00000000
: DMA2_S3M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S3M1AR ; \ DMA2_S3M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA2_S3FCR (multiple-access)  Reset:0x00000021
: DMA2_S3FCR_FEIE ( -- x addr ) 7 bit DMA2_S3FCR ; \ DMA2_S3FCR_FEIE, FIFO error interrupt enable
: DMA2_S3FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S3FCR bit@ ; \ DMA2_S3FCR_FS, FIFO status
: DMA2_S3FCR_DMDIS ( -- x addr ) 2 bit DMA2_S3FCR ; \ DMA2_S3FCR_DMDIS, Direct mode disable
: DMA2_S3FCR_FTH ( %bb -- x addr ) DMA2_S3FCR ; \ DMA2_S3FCR_FTH, FIFO threshold selection

\ DMA2_S4CR (read-write) Reset:0x00000000
: DMA2_S4CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S4CR ; \ DMA2_S4CR_CHSEL, Channel selection
: DMA2_S4CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S4CR ; \ DMA2_S4CR_MBURST, Memory burst transfer configuration
: DMA2_S4CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S4CR ; \ DMA2_S4CR_PBURST, Peripheral burst transfer configuration
: DMA2_S4CR_ACK ( -- x addr ) 20 bit DMA2_S4CR ; \ DMA2_S4CR_ACK, ACK
: DMA2_S4CR_CT ( -- x addr ) 19 bit DMA2_S4CR ; \ DMA2_S4CR_CT, Current target only in double buffer mode
: DMA2_S4CR_DBM ( -- x addr ) 18 bit DMA2_S4CR ; \ DMA2_S4CR_DBM, Double buffer mode
: DMA2_S4CR_PL ( %bb -- x addr ) 16 lshift DMA2_S4CR ; \ DMA2_S4CR_PL, Priority level
: DMA2_S4CR_PINCOS ( -- x addr ) 15 bit DMA2_S4CR ; \ DMA2_S4CR_PINCOS, Peripheral increment offset size
: DMA2_S4CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S4CR ; \ DMA2_S4CR_MSIZE, Memory data size
: DMA2_S4CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S4CR ; \ DMA2_S4CR_PSIZE, Peripheral data size
: DMA2_S4CR_MINC ( -- x addr ) 10 bit DMA2_S4CR ; \ DMA2_S4CR_MINC, Memory increment mode
: DMA2_S4CR_PINC ( -- x addr ) 9 bit DMA2_S4CR ; \ DMA2_S4CR_PINC, Peripheral increment mode
: DMA2_S4CR_CIRC ( -- x addr ) 8 bit DMA2_S4CR ; \ DMA2_S4CR_CIRC, Circular mode
: DMA2_S4CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S4CR ; \ DMA2_S4CR_DIR, Data transfer direction
: DMA2_S4CR_PFCTRL ( -- x addr ) 5 bit DMA2_S4CR ; \ DMA2_S4CR_PFCTRL, Peripheral flow controller
: DMA2_S4CR_TCIE ( -- x addr ) 4 bit DMA2_S4CR ; \ DMA2_S4CR_TCIE, Transfer complete interrupt enable
: DMA2_S4CR_HTIE ( -- x addr ) 3 bit DMA2_S4CR ; \ DMA2_S4CR_HTIE, Half transfer interrupt enable
: DMA2_S4CR_TEIE ( -- x addr ) 2 bit DMA2_S4CR ; \ DMA2_S4CR_TEIE, Transfer error interrupt enable
: DMA2_S4CR_DMEIE ( -- x addr ) 1 bit DMA2_S4CR ; \ DMA2_S4CR_DMEIE, Direct mode error interrupt enable
: DMA2_S4CR_EN ( -- x addr ) 0 bit DMA2_S4CR ; \ DMA2_S4CR_EN, Stream enable / flag stream ready when read low

\ DMA2_S4NDTR (read-write) Reset:0x00000000
: DMA2_S4NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S4NDTR ; \ DMA2_S4NDTR_NDT, Number of data items to transfer

\ DMA2_S4PAR (read-write) Reset:0x00000000
: DMA2_S4PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S4PAR ; \ DMA2_S4PAR_PA, Peripheral address

\ DMA2_S4M0AR (read-write) Reset:0x00000000
: DMA2_S4M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S4M0AR ; \ DMA2_S4M0AR_M0A, Memory 0 address

\ DMA2_S4M1AR (read-write) Reset:0x00000000
: DMA2_S4M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S4M1AR ; \ DMA2_S4M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA2_S4FCR (multiple-access)  Reset:0x00000021
: DMA2_S4FCR_FEIE ( -- x addr ) 7 bit DMA2_S4FCR ; \ DMA2_S4FCR_FEIE, FIFO error interrupt enable
: DMA2_S4FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S4FCR bit@ ; \ DMA2_S4FCR_FS, FIFO status
: DMA2_S4FCR_DMDIS ( -- x addr ) 2 bit DMA2_S4FCR ; \ DMA2_S4FCR_DMDIS, Direct mode disable
: DMA2_S4FCR_FTH ( %bb -- x addr ) DMA2_S4FCR ; \ DMA2_S4FCR_FTH, FIFO threshold selection

\ DMA2_S5CR (read-write) Reset:0x00000000
: DMA2_S5CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S5CR ; \ DMA2_S5CR_CHSEL, Channel selection
: DMA2_S5CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S5CR ; \ DMA2_S5CR_MBURST, Memory burst transfer configuration
: DMA2_S5CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S5CR ; \ DMA2_S5CR_PBURST, Peripheral burst transfer configuration
: DMA2_S5CR_ACK ( -- x addr ) 20 bit DMA2_S5CR ; \ DMA2_S5CR_ACK, ACK
: DMA2_S5CR_CT ( -- x addr ) 19 bit DMA2_S5CR ; \ DMA2_S5CR_CT, Current target only in double buffer mode
: DMA2_S5CR_DBM ( -- x addr ) 18 bit DMA2_S5CR ; \ DMA2_S5CR_DBM, Double buffer mode
: DMA2_S5CR_PL ( %bb -- x addr ) 16 lshift DMA2_S5CR ; \ DMA2_S5CR_PL, Priority level
: DMA2_S5CR_PINCOS ( -- x addr ) 15 bit DMA2_S5CR ; \ DMA2_S5CR_PINCOS, Peripheral increment offset size
: DMA2_S5CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S5CR ; \ DMA2_S5CR_MSIZE, Memory data size
: DMA2_S5CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S5CR ; \ DMA2_S5CR_PSIZE, Peripheral data size
: DMA2_S5CR_MINC ( -- x addr ) 10 bit DMA2_S5CR ; \ DMA2_S5CR_MINC, Memory increment mode
: DMA2_S5CR_PINC ( -- x addr ) 9 bit DMA2_S5CR ; \ DMA2_S5CR_PINC, Peripheral increment mode
: DMA2_S5CR_CIRC ( -- x addr ) 8 bit DMA2_S5CR ; \ DMA2_S5CR_CIRC, Circular mode
: DMA2_S5CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S5CR ; \ DMA2_S5CR_DIR, Data transfer direction
: DMA2_S5CR_PFCTRL ( -- x addr ) 5 bit DMA2_S5CR ; \ DMA2_S5CR_PFCTRL, Peripheral flow controller
: DMA2_S5CR_TCIE ( -- x addr ) 4 bit DMA2_S5CR ; \ DMA2_S5CR_TCIE, Transfer complete interrupt enable
: DMA2_S5CR_HTIE ( -- x addr ) 3 bit DMA2_S5CR ; \ DMA2_S5CR_HTIE, Half transfer interrupt enable
: DMA2_S5CR_TEIE ( -- x addr ) 2 bit DMA2_S5CR ; \ DMA2_S5CR_TEIE, Transfer error interrupt enable
: DMA2_S5CR_DMEIE ( -- x addr ) 1 bit DMA2_S5CR ; \ DMA2_S5CR_DMEIE, Direct mode error interrupt enable
: DMA2_S5CR_EN ( -- x addr ) 0 bit DMA2_S5CR ; \ DMA2_S5CR_EN, Stream enable / flag stream ready when read low

\ DMA2_S5NDTR (read-write) Reset:0x00000000
: DMA2_S5NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S5NDTR ; \ DMA2_S5NDTR_NDT, Number of data items to transfer

\ DMA2_S5PAR (read-write) Reset:0x00000000
: DMA2_S5PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S5PAR ; \ DMA2_S5PAR_PA, Peripheral address

\ DMA2_S5M0AR (read-write) Reset:0x00000000
: DMA2_S5M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S5M0AR ; \ DMA2_S5M0AR_M0A, Memory 0 address

\ DMA2_S5M1AR (read-write) Reset:0x00000000
: DMA2_S5M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S5M1AR ; \ DMA2_S5M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA2_S5FCR (multiple-access)  Reset:0x00000021
: DMA2_S5FCR_FEIE ( -- x addr ) 7 bit DMA2_S5FCR ; \ DMA2_S5FCR_FEIE, FIFO error interrupt enable
: DMA2_S5FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S5FCR bit@ ; \ DMA2_S5FCR_FS, FIFO status
: DMA2_S5FCR_DMDIS ( -- x addr ) 2 bit DMA2_S5FCR ; \ DMA2_S5FCR_DMDIS, Direct mode disable
: DMA2_S5FCR_FTH ( %bb -- x addr ) DMA2_S5FCR ; \ DMA2_S5FCR_FTH, FIFO threshold selection

\ DMA2_S6CR (read-write) Reset:0x00000000
: DMA2_S6CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S6CR ; \ DMA2_S6CR_CHSEL, Channel selection
: DMA2_S6CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S6CR ; \ DMA2_S6CR_MBURST, Memory burst transfer configuration
: DMA2_S6CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S6CR ; \ DMA2_S6CR_PBURST, Peripheral burst transfer configuration
: DMA2_S6CR_ACK ( -- x addr ) 20 bit DMA2_S6CR ; \ DMA2_S6CR_ACK, ACK
: DMA2_S6CR_CT ( -- x addr ) 19 bit DMA2_S6CR ; \ DMA2_S6CR_CT, Current target only in double buffer mode
: DMA2_S6CR_DBM ( -- x addr ) 18 bit DMA2_S6CR ; \ DMA2_S6CR_DBM, Double buffer mode
: DMA2_S6CR_PL ( %bb -- x addr ) 16 lshift DMA2_S6CR ; \ DMA2_S6CR_PL, Priority level
: DMA2_S6CR_PINCOS ( -- x addr ) 15 bit DMA2_S6CR ; \ DMA2_S6CR_PINCOS, Peripheral increment offset size
: DMA2_S6CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S6CR ; \ DMA2_S6CR_MSIZE, Memory data size
: DMA2_S6CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S6CR ; \ DMA2_S6CR_PSIZE, Peripheral data size
: DMA2_S6CR_MINC ( -- x addr ) 10 bit DMA2_S6CR ; \ DMA2_S6CR_MINC, Memory increment mode
: DMA2_S6CR_PINC ( -- x addr ) 9 bit DMA2_S6CR ; \ DMA2_S6CR_PINC, Peripheral increment mode
: DMA2_S6CR_CIRC ( -- x addr ) 8 bit DMA2_S6CR ; \ DMA2_S6CR_CIRC, Circular mode
: DMA2_S6CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S6CR ; \ DMA2_S6CR_DIR, Data transfer direction
: DMA2_S6CR_PFCTRL ( -- x addr ) 5 bit DMA2_S6CR ; \ DMA2_S6CR_PFCTRL, Peripheral flow controller
: DMA2_S6CR_TCIE ( -- x addr ) 4 bit DMA2_S6CR ; \ DMA2_S6CR_TCIE, Transfer complete interrupt enable
: DMA2_S6CR_HTIE ( -- x addr ) 3 bit DMA2_S6CR ; \ DMA2_S6CR_HTIE, Half transfer interrupt enable
: DMA2_S6CR_TEIE ( -- x addr ) 2 bit DMA2_S6CR ; \ DMA2_S6CR_TEIE, Transfer error interrupt enable
: DMA2_S6CR_DMEIE ( -- x addr ) 1 bit DMA2_S6CR ; \ DMA2_S6CR_DMEIE, Direct mode error interrupt enable
: DMA2_S6CR_EN ( -- x addr ) 0 bit DMA2_S6CR ; \ DMA2_S6CR_EN, Stream enable / flag stream ready when read low

\ DMA2_S6NDTR (read-write) Reset:0x00000000
: DMA2_S6NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S6NDTR ; \ DMA2_S6NDTR_NDT, Number of data items to transfer

\ DMA2_S6PAR (read-write) Reset:0x00000000
: DMA2_S6PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S6PAR ; \ DMA2_S6PAR_PA, Peripheral address

\ DMA2_S6M0AR (read-write) Reset:0x00000000
: DMA2_S6M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S6M0AR ; \ DMA2_S6M0AR_M0A, Memory 0 address

\ DMA2_S6M1AR (read-write) Reset:0x00000000
: DMA2_S6M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S6M1AR ; \ DMA2_S6M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA2_S6FCR (multiple-access)  Reset:0x00000021
: DMA2_S6FCR_FEIE ( -- x addr ) 7 bit DMA2_S6FCR ; \ DMA2_S6FCR_FEIE, FIFO error interrupt enable
: DMA2_S6FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S6FCR bit@ ; \ DMA2_S6FCR_FS, FIFO status
: DMA2_S6FCR_DMDIS ( -- x addr ) 2 bit DMA2_S6FCR ; \ DMA2_S6FCR_DMDIS, Direct mode disable
: DMA2_S6FCR_FTH ( %bb -- x addr ) DMA2_S6FCR ; \ DMA2_S6FCR_FTH, FIFO threshold selection

\ DMA2_S7CR (read-write) Reset:0x00000000
: DMA2_S7CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S7CR ; \ DMA2_S7CR_CHSEL, Channel selection
: DMA2_S7CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S7CR ; \ DMA2_S7CR_MBURST, Memory burst transfer configuration
: DMA2_S7CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S7CR ; \ DMA2_S7CR_PBURST, Peripheral burst transfer configuration
: DMA2_S7CR_ACK ( -- x addr ) 20 bit DMA2_S7CR ; \ DMA2_S7CR_ACK, ACK
: DMA2_S7CR_CT ( -- x addr ) 19 bit DMA2_S7CR ; \ DMA2_S7CR_CT, Current target only in double buffer mode
: DMA2_S7CR_DBM ( -- x addr ) 18 bit DMA2_S7CR ; \ DMA2_S7CR_DBM, Double buffer mode
: DMA2_S7CR_PL ( %bb -- x addr ) 16 lshift DMA2_S7CR ; \ DMA2_S7CR_PL, Priority level
: DMA2_S7CR_PINCOS ( -- x addr ) 15 bit DMA2_S7CR ; \ DMA2_S7CR_PINCOS, Peripheral increment offset size
: DMA2_S7CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S7CR ; \ DMA2_S7CR_MSIZE, Memory data size
: DMA2_S7CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S7CR ; \ DMA2_S7CR_PSIZE, Peripheral data size
: DMA2_S7CR_MINC ( -- x addr ) 10 bit DMA2_S7CR ; \ DMA2_S7CR_MINC, Memory increment mode
: DMA2_S7CR_PINC ( -- x addr ) 9 bit DMA2_S7CR ; \ DMA2_S7CR_PINC, Peripheral increment mode
: DMA2_S7CR_CIRC ( -- x addr ) 8 bit DMA2_S7CR ; \ DMA2_S7CR_CIRC, Circular mode
: DMA2_S7CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S7CR ; \ DMA2_S7CR_DIR, Data transfer direction
: DMA2_S7CR_PFCTRL ( -- x addr ) 5 bit DMA2_S7CR ; \ DMA2_S7CR_PFCTRL, Peripheral flow controller
: DMA2_S7CR_TCIE ( -- x addr ) 4 bit DMA2_S7CR ; \ DMA2_S7CR_TCIE, Transfer complete interrupt enable
: DMA2_S7CR_HTIE ( -- x addr ) 3 bit DMA2_S7CR ; \ DMA2_S7CR_HTIE, Half transfer interrupt enable
: DMA2_S7CR_TEIE ( -- x addr ) 2 bit DMA2_S7CR ; \ DMA2_S7CR_TEIE, Transfer error interrupt enable
: DMA2_S7CR_DMEIE ( -- x addr ) 1 bit DMA2_S7CR ; \ DMA2_S7CR_DMEIE, Direct mode error interrupt enable
: DMA2_S7CR_EN ( -- x addr ) 0 bit DMA2_S7CR ; \ DMA2_S7CR_EN, Stream enable / flag stream ready when read low

\ DMA2_S7NDTR (read-write) Reset:0x00000000
: DMA2_S7NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S7NDTR ; \ DMA2_S7NDTR_NDT, Number of data items to transfer

\ DMA2_S7PAR (read-write) Reset:0x00000000
: DMA2_S7PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S7PAR ; \ DMA2_S7PAR_PA, Peripheral address

\ DMA2_S7M0AR (read-write) Reset:0x00000000
: DMA2_S7M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S7M0AR ; \ DMA2_S7M0AR_M0A, Memory 0 address

\ DMA2_S7M1AR (read-write) Reset:0x00000000
: DMA2_S7M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S7M1AR ; \ DMA2_S7M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA2_S7FCR (multiple-access)  Reset:0x00000021
: DMA2_S7FCR_FEIE ( -- x addr ) 7 bit DMA2_S7FCR ; \ DMA2_S7FCR_FEIE, FIFO error interrupt enable
: DMA2_S7FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S7FCR bit@ ; \ DMA2_S7FCR_FS, FIFO status
: DMA2_S7FCR_DMDIS ( -- x addr ) 2 bit DMA2_S7FCR ; \ DMA2_S7FCR_DMDIS, Direct mode disable
: DMA2_S7FCR_FTH ( %bb -- x addr ) DMA2_S7FCR ; \ DMA2_S7FCR_FTH, FIFO threshold selection

\ DMA1_LISR (read-only) Reset:0x00000000
: DMA1_LISR_TCIF3? ( --  1|0 ) 27 bit DMA1_LISR bit@ ; \ DMA1_LISR_TCIF3, Stream x transfer complete interrupt flag x = 3..0
: DMA1_LISR_HTIF3? ( --  1|0 ) 26 bit DMA1_LISR bit@ ; \ DMA1_LISR_HTIF3, Stream x half transfer interrupt flag x=3..0
: DMA1_LISR_TEIF3? ( --  1|0 ) 25 bit DMA1_LISR bit@ ; \ DMA1_LISR_TEIF3, Stream x transfer error interrupt flag x=3..0
: DMA1_LISR_DMEIF3? ( --  1|0 ) 24 bit DMA1_LISR bit@ ; \ DMA1_LISR_DMEIF3, Stream x direct mode error interrupt flag x=3..0
: DMA1_LISR_FEIF3? ( --  1|0 ) 22 bit DMA1_LISR bit@ ; \ DMA1_LISR_FEIF3, Stream x FIFO error interrupt flag x=3..0
: DMA1_LISR_TCIF2? ( --  1|0 ) 21 bit DMA1_LISR bit@ ; \ DMA1_LISR_TCIF2, Stream x transfer complete interrupt flag x = 3..0
: DMA1_LISR_HTIF2? ( --  1|0 ) 20 bit DMA1_LISR bit@ ; \ DMA1_LISR_HTIF2, Stream x half transfer interrupt flag x=3..0
: DMA1_LISR_TEIF2? ( --  1|0 ) 19 bit DMA1_LISR bit@ ; \ DMA1_LISR_TEIF2, Stream x transfer error interrupt flag x=3..0
: DMA1_LISR_DMEIF2? ( --  1|0 ) 18 bit DMA1_LISR bit@ ; \ DMA1_LISR_DMEIF2, Stream x direct mode error interrupt flag x=3..0
: DMA1_LISR_FEIF2? ( --  1|0 ) 16 bit DMA1_LISR bit@ ; \ DMA1_LISR_FEIF2, Stream x FIFO error interrupt flag x=3..0
: DMA1_LISR_TCIF1? ( --  1|0 ) 11 bit DMA1_LISR bit@ ; \ DMA1_LISR_TCIF1, Stream x transfer complete interrupt flag x = 3..0
: DMA1_LISR_HTIF1? ( --  1|0 ) 10 bit DMA1_LISR bit@ ; \ DMA1_LISR_HTIF1, Stream x half transfer interrupt flag x=3..0
: DMA1_LISR_TEIF1? ( --  1|0 ) 9 bit DMA1_LISR bit@ ; \ DMA1_LISR_TEIF1, Stream x transfer error interrupt flag x=3..0
: DMA1_LISR_DMEIF1? ( --  1|0 ) 8 bit DMA1_LISR bit@ ; \ DMA1_LISR_DMEIF1, Stream x direct mode error interrupt flag x=3..0
: DMA1_LISR_FEIF1? ( --  1|0 ) 6 bit DMA1_LISR bit@ ; \ DMA1_LISR_FEIF1, Stream x FIFO error interrupt flag x=3..0
: DMA1_LISR_TCIF0? ( --  1|0 ) 5 bit DMA1_LISR bit@ ; \ DMA1_LISR_TCIF0, Stream x transfer complete interrupt flag x = 3..0
: DMA1_LISR_HTIF0? ( --  1|0 ) 4 bit DMA1_LISR bit@ ; \ DMA1_LISR_HTIF0, Stream x half transfer interrupt flag x=3..0
: DMA1_LISR_TEIF0? ( --  1|0 ) 3 bit DMA1_LISR bit@ ; \ DMA1_LISR_TEIF0, Stream x transfer error interrupt flag x=3..0
: DMA1_LISR_DMEIF0? ( --  1|0 ) 2 bit DMA1_LISR bit@ ; \ DMA1_LISR_DMEIF0, Stream x direct mode error interrupt flag x=3..0
: DMA1_LISR_FEIF0? ( --  1|0 ) 0 bit DMA1_LISR bit@ ; \ DMA1_LISR_FEIF0, Stream x FIFO error interrupt flag x=3..0

\ DMA1_HISR (read-only) Reset:0x00000000
: DMA1_HISR_TCIF7? ( --  1|0 ) 27 bit DMA1_HISR bit@ ; \ DMA1_HISR_TCIF7, Stream x transfer complete interrupt flag x=7..4
: DMA1_HISR_HTIF7? ( --  1|0 ) 26 bit DMA1_HISR bit@ ; \ DMA1_HISR_HTIF7, Stream x half transfer interrupt flag x=7..4
: DMA1_HISR_TEIF7? ( --  1|0 ) 25 bit DMA1_HISR bit@ ; \ DMA1_HISR_TEIF7, Stream x transfer error interrupt flag x=7..4
: DMA1_HISR_DMEIF7? ( --  1|0 ) 24 bit DMA1_HISR bit@ ; \ DMA1_HISR_DMEIF7, Stream x direct mode error interrupt flag x=7..4
: DMA1_HISR_FEIF7? ( --  1|0 ) 22 bit DMA1_HISR bit@ ; \ DMA1_HISR_FEIF7, Stream x FIFO error interrupt flag x=7..4
: DMA1_HISR_TCIF6? ( --  1|0 ) 21 bit DMA1_HISR bit@ ; \ DMA1_HISR_TCIF6, Stream x transfer complete interrupt flag x=7..4
: DMA1_HISR_HTIF6? ( --  1|0 ) 20 bit DMA1_HISR bit@ ; \ DMA1_HISR_HTIF6, Stream x half transfer interrupt flag x=7..4
: DMA1_HISR_TEIF6? ( --  1|0 ) 19 bit DMA1_HISR bit@ ; \ DMA1_HISR_TEIF6, Stream x transfer error interrupt flag x=7..4
: DMA1_HISR_DMEIF6? ( --  1|0 ) 18 bit DMA1_HISR bit@ ; \ DMA1_HISR_DMEIF6, Stream x direct mode error interrupt flag x=7..4
: DMA1_HISR_FEIF6? ( --  1|0 ) 16 bit DMA1_HISR bit@ ; \ DMA1_HISR_FEIF6, Stream x FIFO error interrupt flag x=7..4
: DMA1_HISR_TCIF5? ( --  1|0 ) 11 bit DMA1_HISR bit@ ; \ DMA1_HISR_TCIF5, Stream x transfer complete interrupt flag x=7..4
: DMA1_HISR_HTIF5? ( --  1|0 ) 10 bit DMA1_HISR bit@ ; \ DMA1_HISR_HTIF5, Stream x half transfer interrupt flag x=7..4
: DMA1_HISR_TEIF5? ( --  1|0 ) 9 bit DMA1_HISR bit@ ; \ DMA1_HISR_TEIF5, Stream x transfer error interrupt flag x=7..4
: DMA1_HISR_DMEIF5? ( --  1|0 ) 8 bit DMA1_HISR bit@ ; \ DMA1_HISR_DMEIF5, Stream x direct mode error interrupt flag x=7..4
: DMA1_HISR_FEIF5? ( --  1|0 ) 6 bit DMA1_HISR bit@ ; \ DMA1_HISR_FEIF5, Stream x FIFO error interrupt flag x=7..4
: DMA1_HISR_TCIF4? ( --  1|0 ) 5 bit DMA1_HISR bit@ ; \ DMA1_HISR_TCIF4, Stream x transfer complete interrupt flag x=7..4
: DMA1_HISR_HTIF4? ( --  1|0 ) 4 bit DMA1_HISR bit@ ; \ DMA1_HISR_HTIF4, Stream x half transfer interrupt flag x=7..4
: DMA1_HISR_TEIF4? ( --  1|0 ) 3 bit DMA1_HISR bit@ ; \ DMA1_HISR_TEIF4, Stream x transfer error interrupt flag x=7..4
: DMA1_HISR_DMEIF4? ( --  1|0 ) 2 bit DMA1_HISR bit@ ; \ DMA1_HISR_DMEIF4, Stream x direct mode error interrupt flag x=7..4
: DMA1_HISR_FEIF4? ( --  1|0 ) 0 bit DMA1_HISR bit@ ; \ DMA1_HISR_FEIF4, Stream x FIFO error interrupt flag x=7..4

\ DMA1_LIFCR (read-write) Reset:0x00000000
: DMA1_LIFCR_CTCIF3 ( -- x addr ) 27 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTCIF3, Stream x clear transfer complete interrupt flag x = 3..0
: DMA1_LIFCR_CHTIF3 ( -- x addr ) 26 bit DMA1_LIFCR ; \ DMA1_LIFCR_CHTIF3, Stream x clear half transfer interrupt flag x = 3..0
: DMA1_LIFCR_CTEIF3 ( -- x addr ) 25 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTEIF3, Stream x clear transfer error interrupt flag x = 3..0
: DMA1_LIFCR_CDMEIF3 ( -- x addr ) 24 bit DMA1_LIFCR ; \ DMA1_LIFCR_CDMEIF3, Stream x clear direct mode error interrupt flag x = 3..0
: DMA1_LIFCR_CFEIF3 ( -- x addr ) 22 bit DMA1_LIFCR ; \ DMA1_LIFCR_CFEIF3, Stream x clear FIFO error interrupt flag x = 3..0
: DMA1_LIFCR_CTCIF2 ( -- x addr ) 21 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTCIF2, Stream x clear transfer complete interrupt flag x = 3..0
: DMA1_LIFCR_CHTIF2 ( -- x addr ) 20 bit DMA1_LIFCR ; \ DMA1_LIFCR_CHTIF2, Stream x clear half transfer interrupt flag x = 3..0
: DMA1_LIFCR_CTEIF2 ( -- x addr ) 19 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTEIF2, Stream x clear transfer error interrupt flag x = 3..0
: DMA1_LIFCR_CDMEIF2 ( -- x addr ) 18 bit DMA1_LIFCR ; \ DMA1_LIFCR_CDMEIF2, Stream x clear direct mode error interrupt flag x = 3..0
: DMA1_LIFCR_CFEIF2 ( -- x addr ) 16 bit DMA1_LIFCR ; \ DMA1_LIFCR_CFEIF2, Stream x clear FIFO error interrupt flag x = 3..0
: DMA1_LIFCR_CTCIF1 ( -- x addr ) 11 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTCIF1, Stream x clear transfer complete interrupt flag x = 3..0
: DMA1_LIFCR_CHTIF1 ( -- x addr ) 10 bit DMA1_LIFCR ; \ DMA1_LIFCR_CHTIF1, Stream x clear half transfer interrupt flag x = 3..0
: DMA1_LIFCR_CTEIF1 ( -- x addr ) 9 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTEIF1, Stream x clear transfer error interrupt flag x = 3..0
: DMA1_LIFCR_CDMEIF1 ( -- x addr ) 8 bit DMA1_LIFCR ; \ DMA1_LIFCR_CDMEIF1, Stream x clear direct mode error interrupt flag x = 3..0
: DMA1_LIFCR_CFEIF1 ( -- x addr ) 6 bit DMA1_LIFCR ; \ DMA1_LIFCR_CFEIF1, Stream x clear FIFO error interrupt flag x = 3..0
: DMA1_LIFCR_CTCIF0 ( -- x addr ) 5 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTCIF0, Stream x clear transfer complete interrupt flag x = 3..0
: DMA1_LIFCR_CHTIF0 ( -- x addr ) 4 bit DMA1_LIFCR ; \ DMA1_LIFCR_CHTIF0, Stream x clear half transfer interrupt flag x = 3..0
: DMA1_LIFCR_CTEIF0 ( -- x addr ) 3 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTEIF0, Stream x clear transfer error interrupt flag x = 3..0
: DMA1_LIFCR_CDMEIF0 ( -- x addr ) 2 bit DMA1_LIFCR ; \ DMA1_LIFCR_CDMEIF0, Stream x clear direct mode error interrupt flag x = 3..0
: DMA1_LIFCR_CFEIF0 ( -- x addr ) 0 bit DMA1_LIFCR ; \ DMA1_LIFCR_CFEIF0, Stream x clear FIFO error interrupt flag x = 3..0

\ DMA1_HIFCR (read-write) Reset:0x00000000
: DMA1_HIFCR_CTCIF7 ( -- x addr ) 27 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTCIF7, Stream x clear transfer complete interrupt flag x = 7..4
: DMA1_HIFCR_CHTIF7 ( -- x addr ) 26 bit DMA1_HIFCR ; \ DMA1_HIFCR_CHTIF7, Stream x clear half transfer interrupt flag x = 7..4
: DMA1_HIFCR_CTEIF7 ( -- x addr ) 25 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTEIF7, Stream x clear transfer error interrupt flag x = 7..4
: DMA1_HIFCR_CDMEIF7 ( -- x addr ) 24 bit DMA1_HIFCR ; \ DMA1_HIFCR_CDMEIF7, Stream x clear direct mode error interrupt flag x = 7..4
: DMA1_HIFCR_CFEIF7 ( -- x addr ) 22 bit DMA1_HIFCR ; \ DMA1_HIFCR_CFEIF7, Stream x clear FIFO error interrupt flag x = 7..4
: DMA1_HIFCR_CTCIF6 ( -- x addr ) 21 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTCIF6, Stream x clear transfer complete interrupt flag x = 7..4
: DMA1_HIFCR_CHTIF6 ( -- x addr ) 20 bit DMA1_HIFCR ; \ DMA1_HIFCR_CHTIF6, Stream x clear half transfer interrupt flag x = 7..4
: DMA1_HIFCR_CTEIF6 ( -- x addr ) 19 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTEIF6, Stream x clear transfer error interrupt flag x = 7..4
: DMA1_HIFCR_CDMEIF6 ( -- x addr ) 18 bit DMA1_HIFCR ; \ DMA1_HIFCR_CDMEIF6, Stream x clear direct mode error interrupt flag x = 7..4
: DMA1_HIFCR_CFEIF6 ( -- x addr ) 16 bit DMA1_HIFCR ; \ DMA1_HIFCR_CFEIF6, Stream x clear FIFO error interrupt flag x = 7..4
: DMA1_HIFCR_CTCIF5 ( -- x addr ) 11 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTCIF5, Stream x clear transfer complete interrupt flag x = 7..4
: DMA1_HIFCR_CHTIF5 ( -- x addr ) 10 bit DMA1_HIFCR ; \ DMA1_HIFCR_CHTIF5, Stream x clear half transfer interrupt flag x = 7..4
: DMA1_HIFCR_CTEIF5 ( -- x addr ) 9 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTEIF5, Stream x clear transfer error interrupt flag x = 7..4
: DMA1_HIFCR_CDMEIF5 ( -- x addr ) 8 bit DMA1_HIFCR ; \ DMA1_HIFCR_CDMEIF5, Stream x clear direct mode error interrupt flag x = 7..4
: DMA1_HIFCR_CFEIF5 ( -- x addr ) 6 bit DMA1_HIFCR ; \ DMA1_HIFCR_CFEIF5, Stream x clear FIFO error interrupt flag x = 7..4
: DMA1_HIFCR_CTCIF4 ( -- x addr ) 5 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTCIF4, Stream x clear transfer complete interrupt flag x = 7..4
: DMA1_HIFCR_CHTIF4 ( -- x addr ) 4 bit DMA1_HIFCR ; \ DMA1_HIFCR_CHTIF4, Stream x clear half transfer interrupt flag x = 7..4
: DMA1_HIFCR_CTEIF4 ( -- x addr ) 3 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTEIF4, Stream x clear transfer error interrupt flag x = 7..4
: DMA1_HIFCR_CDMEIF4 ( -- x addr ) 2 bit DMA1_HIFCR ; \ DMA1_HIFCR_CDMEIF4, Stream x clear direct mode error interrupt flag x = 7..4
: DMA1_HIFCR_CFEIF4 ( -- x addr ) 0 bit DMA1_HIFCR ; \ DMA1_HIFCR_CFEIF4, Stream x clear FIFO error interrupt flag x = 7..4

\ DMA1_S0CR (read-write) Reset:0x00000000
: DMA1_S0CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S0CR ; \ DMA1_S0CR_CHSEL, Channel selection
: DMA1_S0CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S0CR ; \ DMA1_S0CR_MBURST, Memory burst transfer configuration
: DMA1_S0CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S0CR ; \ DMA1_S0CR_PBURST, Peripheral burst transfer configuration
: DMA1_S0CR_CT ( -- x addr ) 19 bit DMA1_S0CR ; \ DMA1_S0CR_CT, Current target only in double buffer mode
: DMA1_S0CR_DBM ( -- x addr ) 18 bit DMA1_S0CR ; \ DMA1_S0CR_DBM, Double buffer mode
: DMA1_S0CR_PL ( %bb -- x addr ) 16 lshift DMA1_S0CR ; \ DMA1_S0CR_PL, Priority level
: DMA1_S0CR_PINCOS ( -- x addr ) 15 bit DMA1_S0CR ; \ DMA1_S0CR_PINCOS, Peripheral increment offset size
: DMA1_S0CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S0CR ; \ DMA1_S0CR_MSIZE, Memory data size
: DMA1_S0CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S0CR ; \ DMA1_S0CR_PSIZE, Peripheral data size
: DMA1_S0CR_MINC ( -- x addr ) 10 bit DMA1_S0CR ; \ DMA1_S0CR_MINC, Memory increment mode
: DMA1_S0CR_PINC ( -- x addr ) 9 bit DMA1_S0CR ; \ DMA1_S0CR_PINC, Peripheral increment mode
: DMA1_S0CR_CIRC ( -- x addr ) 8 bit DMA1_S0CR ; \ DMA1_S0CR_CIRC, Circular mode
: DMA1_S0CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S0CR ; \ DMA1_S0CR_DIR, Data transfer direction
: DMA1_S0CR_PFCTRL ( -- x addr ) 5 bit DMA1_S0CR ; \ DMA1_S0CR_PFCTRL, Peripheral flow controller
: DMA1_S0CR_TCIE ( -- x addr ) 4 bit DMA1_S0CR ; \ DMA1_S0CR_TCIE, Transfer complete interrupt enable
: DMA1_S0CR_HTIE ( -- x addr ) 3 bit DMA1_S0CR ; \ DMA1_S0CR_HTIE, Half transfer interrupt enable
: DMA1_S0CR_TEIE ( -- x addr ) 2 bit DMA1_S0CR ; \ DMA1_S0CR_TEIE, Transfer error interrupt enable
: DMA1_S0CR_DMEIE ( -- x addr ) 1 bit DMA1_S0CR ; \ DMA1_S0CR_DMEIE, Direct mode error interrupt enable
: DMA1_S0CR_EN ( -- x addr ) 0 bit DMA1_S0CR ; \ DMA1_S0CR_EN, Stream enable / flag stream ready when read low

\ DMA1_S0NDTR (read-write) Reset:0x00000000
: DMA1_S0NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S0NDTR ; \ DMA1_S0NDTR_NDT, Number of data items to transfer

\ DMA1_S0PAR (read-write) Reset:0x00000000
: DMA1_S0PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S0PAR ; \ DMA1_S0PAR_PA, Peripheral address

\ DMA1_S0M0AR (read-write) Reset:0x00000000
: DMA1_S0M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S0M0AR ; \ DMA1_S0M0AR_M0A, Memory 0 address

\ DMA1_S0M1AR (read-write) Reset:0x00000000
: DMA1_S0M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S0M1AR ; \ DMA1_S0M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA1_S0FCR (multiple-access)  Reset:0x00000021
: DMA1_S0FCR_FEIE ( -- x addr ) 7 bit DMA1_S0FCR ; \ DMA1_S0FCR_FEIE, FIFO error interrupt enable
: DMA1_S0FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S0FCR bit@ ; \ DMA1_S0FCR_FS, FIFO status
: DMA1_S0FCR_DMDIS ( -- x addr ) 2 bit DMA1_S0FCR ; \ DMA1_S0FCR_DMDIS, Direct mode disable
: DMA1_S0FCR_FTH ( %bb -- x addr ) DMA1_S0FCR ; \ DMA1_S0FCR_FTH, FIFO threshold selection

\ DMA1_S1CR (read-write) Reset:0x00000000
: DMA1_S1CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S1CR ; \ DMA1_S1CR_CHSEL, Channel selection
: DMA1_S1CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S1CR ; \ DMA1_S1CR_MBURST, Memory burst transfer configuration
: DMA1_S1CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S1CR ; \ DMA1_S1CR_PBURST, Peripheral burst transfer configuration
: DMA1_S1CR_ACK ( -- x addr ) 20 bit DMA1_S1CR ; \ DMA1_S1CR_ACK, ACK
: DMA1_S1CR_CT ( -- x addr ) 19 bit DMA1_S1CR ; \ DMA1_S1CR_CT, Current target only in double buffer mode
: DMA1_S1CR_DBM ( -- x addr ) 18 bit DMA1_S1CR ; \ DMA1_S1CR_DBM, Double buffer mode
: DMA1_S1CR_PL ( %bb -- x addr ) 16 lshift DMA1_S1CR ; \ DMA1_S1CR_PL, Priority level
: DMA1_S1CR_PINCOS ( -- x addr ) 15 bit DMA1_S1CR ; \ DMA1_S1CR_PINCOS, Peripheral increment offset size
: DMA1_S1CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S1CR ; \ DMA1_S1CR_MSIZE, Memory data size
: DMA1_S1CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S1CR ; \ DMA1_S1CR_PSIZE, Peripheral data size
: DMA1_S1CR_MINC ( -- x addr ) 10 bit DMA1_S1CR ; \ DMA1_S1CR_MINC, Memory increment mode
: DMA1_S1CR_PINC ( -- x addr ) 9 bit DMA1_S1CR ; \ DMA1_S1CR_PINC, Peripheral increment mode
: DMA1_S1CR_CIRC ( -- x addr ) 8 bit DMA1_S1CR ; \ DMA1_S1CR_CIRC, Circular mode
: DMA1_S1CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S1CR ; \ DMA1_S1CR_DIR, Data transfer direction
: DMA1_S1CR_PFCTRL ( -- x addr ) 5 bit DMA1_S1CR ; \ DMA1_S1CR_PFCTRL, Peripheral flow controller
: DMA1_S1CR_TCIE ( -- x addr ) 4 bit DMA1_S1CR ; \ DMA1_S1CR_TCIE, Transfer complete interrupt enable
: DMA1_S1CR_HTIE ( -- x addr ) 3 bit DMA1_S1CR ; \ DMA1_S1CR_HTIE, Half transfer interrupt enable
: DMA1_S1CR_TEIE ( -- x addr ) 2 bit DMA1_S1CR ; \ DMA1_S1CR_TEIE, Transfer error interrupt enable
: DMA1_S1CR_DMEIE ( -- x addr ) 1 bit DMA1_S1CR ; \ DMA1_S1CR_DMEIE, Direct mode error interrupt enable
: DMA1_S1CR_EN ( -- x addr ) 0 bit DMA1_S1CR ; \ DMA1_S1CR_EN, Stream enable / flag stream ready when read low

\ DMA1_S1NDTR (read-write) Reset:0x00000000
: DMA1_S1NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S1NDTR ; \ DMA1_S1NDTR_NDT, Number of data items to transfer

\ DMA1_S1PAR (read-write) Reset:0x00000000
: DMA1_S1PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S1PAR ; \ DMA1_S1PAR_PA, Peripheral address

\ DMA1_S1M0AR (read-write) Reset:0x00000000
: DMA1_S1M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S1M0AR ; \ DMA1_S1M0AR_M0A, Memory 0 address

\ DMA1_S1M1AR (read-write) Reset:0x00000000
: DMA1_S1M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S1M1AR ; \ DMA1_S1M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA1_S1FCR (multiple-access)  Reset:0x00000021
: DMA1_S1FCR_FEIE ( -- x addr ) 7 bit DMA1_S1FCR ; \ DMA1_S1FCR_FEIE, FIFO error interrupt enable
: DMA1_S1FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S1FCR bit@ ; \ DMA1_S1FCR_FS, FIFO status
: DMA1_S1FCR_DMDIS ( -- x addr ) 2 bit DMA1_S1FCR ; \ DMA1_S1FCR_DMDIS, Direct mode disable
: DMA1_S1FCR_FTH ( %bb -- x addr ) DMA1_S1FCR ; \ DMA1_S1FCR_FTH, FIFO threshold selection

\ DMA1_S2CR (read-write) Reset:0x00000000
: DMA1_S2CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S2CR ; \ DMA1_S2CR_CHSEL, Channel selection
: DMA1_S2CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S2CR ; \ DMA1_S2CR_MBURST, Memory burst transfer configuration
: DMA1_S2CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S2CR ; \ DMA1_S2CR_PBURST, Peripheral burst transfer configuration
: DMA1_S2CR_ACK ( -- x addr ) 20 bit DMA1_S2CR ; \ DMA1_S2CR_ACK, ACK
: DMA1_S2CR_CT ( -- x addr ) 19 bit DMA1_S2CR ; \ DMA1_S2CR_CT, Current target only in double buffer mode
: DMA1_S2CR_DBM ( -- x addr ) 18 bit DMA1_S2CR ; \ DMA1_S2CR_DBM, Double buffer mode
: DMA1_S2CR_PL ( %bb -- x addr ) 16 lshift DMA1_S2CR ; \ DMA1_S2CR_PL, Priority level
: DMA1_S2CR_PINCOS ( -- x addr ) 15 bit DMA1_S2CR ; \ DMA1_S2CR_PINCOS, Peripheral increment offset size
: DMA1_S2CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S2CR ; \ DMA1_S2CR_MSIZE, Memory data size
: DMA1_S2CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S2CR ; \ DMA1_S2CR_PSIZE, Peripheral data size
: DMA1_S2CR_MINC ( -- x addr ) 10 bit DMA1_S2CR ; \ DMA1_S2CR_MINC, Memory increment mode
: DMA1_S2CR_PINC ( -- x addr ) 9 bit DMA1_S2CR ; \ DMA1_S2CR_PINC, Peripheral increment mode
: DMA1_S2CR_CIRC ( -- x addr ) 8 bit DMA1_S2CR ; \ DMA1_S2CR_CIRC, Circular mode
: DMA1_S2CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S2CR ; \ DMA1_S2CR_DIR, Data transfer direction
: DMA1_S2CR_PFCTRL ( -- x addr ) 5 bit DMA1_S2CR ; \ DMA1_S2CR_PFCTRL, Peripheral flow controller
: DMA1_S2CR_TCIE ( -- x addr ) 4 bit DMA1_S2CR ; \ DMA1_S2CR_TCIE, Transfer complete interrupt enable
: DMA1_S2CR_HTIE ( -- x addr ) 3 bit DMA1_S2CR ; \ DMA1_S2CR_HTIE, Half transfer interrupt enable
: DMA1_S2CR_TEIE ( -- x addr ) 2 bit DMA1_S2CR ; \ DMA1_S2CR_TEIE, Transfer error interrupt enable
: DMA1_S2CR_DMEIE ( -- x addr ) 1 bit DMA1_S2CR ; \ DMA1_S2CR_DMEIE, Direct mode error interrupt enable
: DMA1_S2CR_EN ( -- x addr ) 0 bit DMA1_S2CR ; \ DMA1_S2CR_EN, Stream enable / flag stream ready when read low

\ DMA1_S2NDTR (read-write) Reset:0x00000000
: DMA1_S2NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S2NDTR ; \ DMA1_S2NDTR_NDT, Number of data items to transfer

\ DMA1_S2PAR (read-write) Reset:0x00000000
: DMA1_S2PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S2PAR ; \ DMA1_S2PAR_PA, Peripheral address

\ DMA1_S2M0AR (read-write) Reset:0x00000000
: DMA1_S2M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S2M0AR ; \ DMA1_S2M0AR_M0A, Memory 0 address

\ DMA1_S2M1AR (read-write) Reset:0x00000000
: DMA1_S2M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S2M1AR ; \ DMA1_S2M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA1_S2FCR (multiple-access)  Reset:0x00000021
: DMA1_S2FCR_FEIE ( -- x addr ) 7 bit DMA1_S2FCR ; \ DMA1_S2FCR_FEIE, FIFO error interrupt enable
: DMA1_S2FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S2FCR bit@ ; \ DMA1_S2FCR_FS, FIFO status
: DMA1_S2FCR_DMDIS ( -- x addr ) 2 bit DMA1_S2FCR ; \ DMA1_S2FCR_DMDIS, Direct mode disable
: DMA1_S2FCR_FTH ( %bb -- x addr ) DMA1_S2FCR ; \ DMA1_S2FCR_FTH, FIFO threshold selection

\ DMA1_S3CR (read-write) Reset:0x00000000
: DMA1_S3CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S3CR ; \ DMA1_S3CR_CHSEL, Channel selection
: DMA1_S3CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S3CR ; \ DMA1_S3CR_MBURST, Memory burst transfer configuration
: DMA1_S3CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S3CR ; \ DMA1_S3CR_PBURST, Peripheral burst transfer configuration
: DMA1_S3CR_ACK ( -- x addr ) 20 bit DMA1_S3CR ; \ DMA1_S3CR_ACK, ACK
: DMA1_S3CR_CT ( -- x addr ) 19 bit DMA1_S3CR ; \ DMA1_S3CR_CT, Current target only in double buffer mode
: DMA1_S3CR_DBM ( -- x addr ) 18 bit DMA1_S3CR ; \ DMA1_S3CR_DBM, Double buffer mode
: DMA1_S3CR_PL ( %bb -- x addr ) 16 lshift DMA1_S3CR ; \ DMA1_S3CR_PL, Priority level
: DMA1_S3CR_PINCOS ( -- x addr ) 15 bit DMA1_S3CR ; \ DMA1_S3CR_PINCOS, Peripheral increment offset size
: DMA1_S3CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S3CR ; \ DMA1_S3CR_MSIZE, Memory data size
: DMA1_S3CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S3CR ; \ DMA1_S3CR_PSIZE, Peripheral data size
: DMA1_S3CR_MINC ( -- x addr ) 10 bit DMA1_S3CR ; \ DMA1_S3CR_MINC, Memory increment mode
: DMA1_S3CR_PINC ( -- x addr ) 9 bit DMA1_S3CR ; \ DMA1_S3CR_PINC, Peripheral increment mode
: DMA1_S3CR_CIRC ( -- x addr ) 8 bit DMA1_S3CR ; \ DMA1_S3CR_CIRC, Circular mode
: DMA1_S3CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S3CR ; \ DMA1_S3CR_DIR, Data transfer direction
: DMA1_S3CR_PFCTRL ( -- x addr ) 5 bit DMA1_S3CR ; \ DMA1_S3CR_PFCTRL, Peripheral flow controller
: DMA1_S3CR_TCIE ( -- x addr ) 4 bit DMA1_S3CR ; \ DMA1_S3CR_TCIE, Transfer complete interrupt enable
: DMA1_S3CR_HTIE ( -- x addr ) 3 bit DMA1_S3CR ; \ DMA1_S3CR_HTIE, Half transfer interrupt enable
: DMA1_S3CR_TEIE ( -- x addr ) 2 bit DMA1_S3CR ; \ DMA1_S3CR_TEIE, Transfer error interrupt enable
: DMA1_S3CR_DMEIE ( -- x addr ) 1 bit DMA1_S3CR ; \ DMA1_S3CR_DMEIE, Direct mode error interrupt enable
: DMA1_S3CR_EN ( -- x addr ) 0 bit DMA1_S3CR ; \ DMA1_S3CR_EN, Stream enable / flag stream ready when read low

\ DMA1_S3NDTR (read-write) Reset:0x00000000
: DMA1_S3NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S3NDTR ; \ DMA1_S3NDTR_NDT, Number of data items to transfer

\ DMA1_S3PAR (read-write) Reset:0x00000000
: DMA1_S3PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S3PAR ; \ DMA1_S3PAR_PA, Peripheral address

\ DMA1_S3M0AR (read-write) Reset:0x00000000
: DMA1_S3M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S3M0AR ; \ DMA1_S3M0AR_M0A, Memory 0 address

\ DMA1_S3M1AR (read-write) Reset:0x00000000
: DMA1_S3M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S3M1AR ; \ DMA1_S3M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA1_S3FCR (multiple-access)  Reset:0x00000021
: DMA1_S3FCR_FEIE ( -- x addr ) 7 bit DMA1_S3FCR ; \ DMA1_S3FCR_FEIE, FIFO error interrupt enable
: DMA1_S3FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S3FCR bit@ ; \ DMA1_S3FCR_FS, FIFO status
: DMA1_S3FCR_DMDIS ( -- x addr ) 2 bit DMA1_S3FCR ; \ DMA1_S3FCR_DMDIS, Direct mode disable
: DMA1_S3FCR_FTH ( %bb -- x addr ) DMA1_S3FCR ; \ DMA1_S3FCR_FTH, FIFO threshold selection

\ DMA1_S4CR (read-write) Reset:0x00000000
: DMA1_S4CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S4CR ; \ DMA1_S4CR_CHSEL, Channel selection
: DMA1_S4CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S4CR ; \ DMA1_S4CR_MBURST, Memory burst transfer configuration
: DMA1_S4CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S4CR ; \ DMA1_S4CR_PBURST, Peripheral burst transfer configuration
: DMA1_S4CR_ACK ( -- x addr ) 20 bit DMA1_S4CR ; \ DMA1_S4CR_ACK, ACK
: DMA1_S4CR_CT ( -- x addr ) 19 bit DMA1_S4CR ; \ DMA1_S4CR_CT, Current target only in double buffer mode
: DMA1_S4CR_DBM ( -- x addr ) 18 bit DMA1_S4CR ; \ DMA1_S4CR_DBM, Double buffer mode
: DMA1_S4CR_PL ( %bb -- x addr ) 16 lshift DMA1_S4CR ; \ DMA1_S4CR_PL, Priority level
: DMA1_S4CR_PINCOS ( -- x addr ) 15 bit DMA1_S4CR ; \ DMA1_S4CR_PINCOS, Peripheral increment offset size
: DMA1_S4CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S4CR ; \ DMA1_S4CR_MSIZE, Memory data size
: DMA1_S4CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S4CR ; \ DMA1_S4CR_PSIZE, Peripheral data size
: DMA1_S4CR_MINC ( -- x addr ) 10 bit DMA1_S4CR ; \ DMA1_S4CR_MINC, Memory increment mode
: DMA1_S4CR_PINC ( -- x addr ) 9 bit DMA1_S4CR ; \ DMA1_S4CR_PINC, Peripheral increment mode
: DMA1_S4CR_CIRC ( -- x addr ) 8 bit DMA1_S4CR ; \ DMA1_S4CR_CIRC, Circular mode
: DMA1_S4CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S4CR ; \ DMA1_S4CR_DIR, Data transfer direction
: DMA1_S4CR_PFCTRL ( -- x addr ) 5 bit DMA1_S4CR ; \ DMA1_S4CR_PFCTRL, Peripheral flow controller
: DMA1_S4CR_TCIE ( -- x addr ) 4 bit DMA1_S4CR ; \ DMA1_S4CR_TCIE, Transfer complete interrupt enable
: DMA1_S4CR_HTIE ( -- x addr ) 3 bit DMA1_S4CR ; \ DMA1_S4CR_HTIE, Half transfer interrupt enable
: DMA1_S4CR_TEIE ( -- x addr ) 2 bit DMA1_S4CR ; \ DMA1_S4CR_TEIE, Transfer error interrupt enable
: DMA1_S4CR_DMEIE ( -- x addr ) 1 bit DMA1_S4CR ; \ DMA1_S4CR_DMEIE, Direct mode error interrupt enable
: DMA1_S4CR_EN ( -- x addr ) 0 bit DMA1_S4CR ; \ DMA1_S4CR_EN, Stream enable / flag stream ready when read low

\ DMA1_S4NDTR (read-write) Reset:0x00000000
: DMA1_S4NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S4NDTR ; \ DMA1_S4NDTR_NDT, Number of data items to transfer

\ DMA1_S4PAR (read-write) Reset:0x00000000
: DMA1_S4PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S4PAR ; \ DMA1_S4PAR_PA, Peripheral address

\ DMA1_S4M0AR (read-write) Reset:0x00000000
: DMA1_S4M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S4M0AR ; \ DMA1_S4M0AR_M0A, Memory 0 address

\ DMA1_S4M1AR (read-write) Reset:0x00000000
: DMA1_S4M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S4M1AR ; \ DMA1_S4M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA1_S4FCR (multiple-access)  Reset:0x00000021
: DMA1_S4FCR_FEIE ( -- x addr ) 7 bit DMA1_S4FCR ; \ DMA1_S4FCR_FEIE, FIFO error interrupt enable
: DMA1_S4FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S4FCR bit@ ; \ DMA1_S4FCR_FS, FIFO status
: DMA1_S4FCR_DMDIS ( -- x addr ) 2 bit DMA1_S4FCR ; \ DMA1_S4FCR_DMDIS, Direct mode disable
: DMA1_S4FCR_FTH ( %bb -- x addr ) DMA1_S4FCR ; \ DMA1_S4FCR_FTH, FIFO threshold selection

\ DMA1_S5CR (read-write) Reset:0x00000000
: DMA1_S5CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S5CR ; \ DMA1_S5CR_CHSEL, Channel selection
: DMA1_S5CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S5CR ; \ DMA1_S5CR_MBURST, Memory burst transfer configuration
: DMA1_S5CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S5CR ; \ DMA1_S5CR_PBURST, Peripheral burst transfer configuration
: DMA1_S5CR_ACK ( -- x addr ) 20 bit DMA1_S5CR ; \ DMA1_S5CR_ACK, ACK
: DMA1_S5CR_CT ( -- x addr ) 19 bit DMA1_S5CR ; \ DMA1_S5CR_CT, Current target only in double buffer mode
: DMA1_S5CR_DBM ( -- x addr ) 18 bit DMA1_S5CR ; \ DMA1_S5CR_DBM, Double buffer mode
: DMA1_S5CR_PL ( %bb -- x addr ) 16 lshift DMA1_S5CR ; \ DMA1_S5CR_PL, Priority level
: DMA1_S5CR_PINCOS ( -- x addr ) 15 bit DMA1_S5CR ; \ DMA1_S5CR_PINCOS, Peripheral increment offset size
: DMA1_S5CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S5CR ; \ DMA1_S5CR_MSIZE, Memory data size
: DMA1_S5CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S5CR ; \ DMA1_S5CR_PSIZE, Peripheral data size
: DMA1_S5CR_MINC ( -- x addr ) 10 bit DMA1_S5CR ; \ DMA1_S5CR_MINC, Memory increment mode
: DMA1_S5CR_PINC ( -- x addr ) 9 bit DMA1_S5CR ; \ DMA1_S5CR_PINC, Peripheral increment mode
: DMA1_S5CR_CIRC ( -- x addr ) 8 bit DMA1_S5CR ; \ DMA1_S5CR_CIRC, Circular mode
: DMA1_S5CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S5CR ; \ DMA1_S5CR_DIR, Data transfer direction
: DMA1_S5CR_PFCTRL ( -- x addr ) 5 bit DMA1_S5CR ; \ DMA1_S5CR_PFCTRL, Peripheral flow controller
: DMA1_S5CR_TCIE ( -- x addr ) 4 bit DMA1_S5CR ; \ DMA1_S5CR_TCIE, Transfer complete interrupt enable
: DMA1_S5CR_HTIE ( -- x addr ) 3 bit DMA1_S5CR ; \ DMA1_S5CR_HTIE, Half transfer interrupt enable
: DMA1_S5CR_TEIE ( -- x addr ) 2 bit DMA1_S5CR ; \ DMA1_S5CR_TEIE, Transfer error interrupt enable
: DMA1_S5CR_DMEIE ( -- x addr ) 1 bit DMA1_S5CR ; \ DMA1_S5CR_DMEIE, Direct mode error interrupt enable
: DMA1_S5CR_EN ( -- x addr ) 0 bit DMA1_S5CR ; \ DMA1_S5CR_EN, Stream enable / flag stream ready when read low

\ DMA1_S5NDTR (read-write) Reset:0x00000000
: DMA1_S5NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S5NDTR ; \ DMA1_S5NDTR_NDT, Number of data items to transfer

\ DMA1_S5PAR (read-write) Reset:0x00000000
: DMA1_S5PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S5PAR ; \ DMA1_S5PAR_PA, Peripheral address

\ DMA1_S5M0AR (read-write) Reset:0x00000000
: DMA1_S5M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S5M0AR ; \ DMA1_S5M0AR_M0A, Memory 0 address

\ DMA1_S5M1AR (read-write) Reset:0x00000000
: DMA1_S5M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S5M1AR ; \ DMA1_S5M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA1_S5FCR (multiple-access)  Reset:0x00000021
: DMA1_S5FCR_FEIE ( -- x addr ) 7 bit DMA1_S5FCR ; \ DMA1_S5FCR_FEIE, FIFO error interrupt enable
: DMA1_S5FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S5FCR bit@ ; \ DMA1_S5FCR_FS, FIFO status
: DMA1_S5FCR_DMDIS ( -- x addr ) 2 bit DMA1_S5FCR ; \ DMA1_S5FCR_DMDIS, Direct mode disable
: DMA1_S5FCR_FTH ( %bb -- x addr ) DMA1_S5FCR ; \ DMA1_S5FCR_FTH, FIFO threshold selection

\ DMA1_S6CR (read-write) Reset:0x00000000
: DMA1_S6CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S6CR ; \ DMA1_S6CR_CHSEL, Channel selection
: DMA1_S6CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S6CR ; \ DMA1_S6CR_MBURST, Memory burst transfer configuration
: DMA1_S6CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S6CR ; \ DMA1_S6CR_PBURST, Peripheral burst transfer configuration
: DMA1_S6CR_ACK ( -- x addr ) 20 bit DMA1_S6CR ; \ DMA1_S6CR_ACK, ACK
: DMA1_S6CR_CT ( -- x addr ) 19 bit DMA1_S6CR ; \ DMA1_S6CR_CT, Current target only in double buffer mode
: DMA1_S6CR_DBM ( -- x addr ) 18 bit DMA1_S6CR ; \ DMA1_S6CR_DBM, Double buffer mode
: DMA1_S6CR_PL ( %bb -- x addr ) 16 lshift DMA1_S6CR ; \ DMA1_S6CR_PL, Priority level
: DMA1_S6CR_PINCOS ( -- x addr ) 15 bit DMA1_S6CR ; \ DMA1_S6CR_PINCOS, Peripheral increment offset size
: DMA1_S6CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S6CR ; \ DMA1_S6CR_MSIZE, Memory data size
: DMA1_S6CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S6CR ; \ DMA1_S6CR_PSIZE, Peripheral data size
: DMA1_S6CR_MINC ( -- x addr ) 10 bit DMA1_S6CR ; \ DMA1_S6CR_MINC, Memory increment mode
: DMA1_S6CR_PINC ( -- x addr ) 9 bit DMA1_S6CR ; \ DMA1_S6CR_PINC, Peripheral increment mode
: DMA1_S6CR_CIRC ( -- x addr ) 8 bit DMA1_S6CR ; \ DMA1_S6CR_CIRC, Circular mode
: DMA1_S6CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S6CR ; \ DMA1_S6CR_DIR, Data transfer direction
: DMA1_S6CR_PFCTRL ( -- x addr ) 5 bit DMA1_S6CR ; \ DMA1_S6CR_PFCTRL, Peripheral flow controller
: DMA1_S6CR_TCIE ( -- x addr ) 4 bit DMA1_S6CR ; \ DMA1_S6CR_TCIE, Transfer complete interrupt enable
: DMA1_S6CR_HTIE ( -- x addr ) 3 bit DMA1_S6CR ; \ DMA1_S6CR_HTIE, Half transfer interrupt enable
: DMA1_S6CR_TEIE ( -- x addr ) 2 bit DMA1_S6CR ; \ DMA1_S6CR_TEIE, Transfer error interrupt enable
: DMA1_S6CR_DMEIE ( -- x addr ) 1 bit DMA1_S6CR ; \ DMA1_S6CR_DMEIE, Direct mode error interrupt enable
: DMA1_S6CR_EN ( -- x addr ) 0 bit DMA1_S6CR ; \ DMA1_S6CR_EN, Stream enable / flag stream ready when read low

\ DMA1_S6NDTR (read-write) Reset:0x00000000
: DMA1_S6NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S6NDTR ; \ DMA1_S6NDTR_NDT, Number of data items to transfer

\ DMA1_S6PAR (read-write) Reset:0x00000000
: DMA1_S6PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S6PAR ; \ DMA1_S6PAR_PA, Peripheral address

\ DMA1_S6M0AR (read-write) Reset:0x00000000
: DMA1_S6M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S6M0AR ; \ DMA1_S6M0AR_M0A, Memory 0 address

\ DMA1_S6M1AR (read-write) Reset:0x00000000
: DMA1_S6M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S6M1AR ; \ DMA1_S6M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA1_S6FCR (multiple-access)  Reset:0x00000021
: DMA1_S6FCR_FEIE ( -- x addr ) 7 bit DMA1_S6FCR ; \ DMA1_S6FCR_FEIE, FIFO error interrupt enable
: DMA1_S6FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S6FCR bit@ ; \ DMA1_S6FCR_FS, FIFO status
: DMA1_S6FCR_DMDIS ( -- x addr ) 2 bit DMA1_S6FCR ; \ DMA1_S6FCR_DMDIS, Direct mode disable
: DMA1_S6FCR_FTH ( %bb -- x addr ) DMA1_S6FCR ; \ DMA1_S6FCR_FTH, FIFO threshold selection

\ DMA1_S7CR (read-write) Reset:0x00000000
: DMA1_S7CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S7CR ; \ DMA1_S7CR_CHSEL, Channel selection
: DMA1_S7CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S7CR ; \ DMA1_S7CR_MBURST, Memory burst transfer configuration
: DMA1_S7CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S7CR ; \ DMA1_S7CR_PBURST, Peripheral burst transfer configuration
: DMA1_S7CR_ACK ( -- x addr ) 20 bit DMA1_S7CR ; \ DMA1_S7CR_ACK, ACK
: DMA1_S7CR_CT ( -- x addr ) 19 bit DMA1_S7CR ; \ DMA1_S7CR_CT, Current target only in double buffer mode
: DMA1_S7CR_DBM ( -- x addr ) 18 bit DMA1_S7CR ; \ DMA1_S7CR_DBM, Double buffer mode
: DMA1_S7CR_PL ( %bb -- x addr ) 16 lshift DMA1_S7CR ; \ DMA1_S7CR_PL, Priority level
: DMA1_S7CR_PINCOS ( -- x addr ) 15 bit DMA1_S7CR ; \ DMA1_S7CR_PINCOS, Peripheral increment offset size
: DMA1_S7CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S7CR ; \ DMA1_S7CR_MSIZE, Memory data size
: DMA1_S7CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S7CR ; \ DMA1_S7CR_PSIZE, Peripheral data size
: DMA1_S7CR_MINC ( -- x addr ) 10 bit DMA1_S7CR ; \ DMA1_S7CR_MINC, Memory increment mode
: DMA1_S7CR_PINC ( -- x addr ) 9 bit DMA1_S7CR ; \ DMA1_S7CR_PINC, Peripheral increment mode
: DMA1_S7CR_CIRC ( -- x addr ) 8 bit DMA1_S7CR ; \ DMA1_S7CR_CIRC, Circular mode
: DMA1_S7CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S7CR ; \ DMA1_S7CR_DIR, Data transfer direction
: DMA1_S7CR_PFCTRL ( -- x addr ) 5 bit DMA1_S7CR ; \ DMA1_S7CR_PFCTRL, Peripheral flow controller
: DMA1_S7CR_TCIE ( -- x addr ) 4 bit DMA1_S7CR ; \ DMA1_S7CR_TCIE, Transfer complete interrupt enable
: DMA1_S7CR_HTIE ( -- x addr ) 3 bit DMA1_S7CR ; \ DMA1_S7CR_HTIE, Half transfer interrupt enable
: DMA1_S7CR_TEIE ( -- x addr ) 2 bit DMA1_S7CR ; \ DMA1_S7CR_TEIE, Transfer error interrupt enable
: DMA1_S7CR_DMEIE ( -- x addr ) 1 bit DMA1_S7CR ; \ DMA1_S7CR_DMEIE, Direct mode error interrupt enable
: DMA1_S7CR_EN ( -- x addr ) 0 bit DMA1_S7CR ; \ DMA1_S7CR_EN, Stream enable / flag stream ready when read low

\ DMA1_S7NDTR (read-write) Reset:0x00000000
: DMA1_S7NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S7NDTR ; \ DMA1_S7NDTR_NDT, Number of data items to transfer

\ DMA1_S7PAR (read-write) Reset:0x00000000
: DMA1_S7PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S7PAR ; \ DMA1_S7PAR_PA, Peripheral address

\ DMA1_S7M0AR (read-write) Reset:0x00000000
: DMA1_S7M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S7M0AR ; \ DMA1_S7M0AR_M0A, Memory 0 address

\ DMA1_S7M1AR (read-write) Reset:0x00000000
: DMA1_S7M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S7M1AR ; \ DMA1_S7M1AR_M1A, Memory 1 address used in case of Double buffer mode

\ DMA1_S7FCR (multiple-access)  Reset:0x00000021
: DMA1_S7FCR_FEIE ( -- x addr ) 7 bit DMA1_S7FCR ; \ DMA1_S7FCR_FEIE, FIFO error interrupt enable
: DMA1_S7FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S7FCR bit@ ; \ DMA1_S7FCR_FS, FIFO status
: DMA1_S7FCR_DMDIS ( -- x addr ) 2 bit DMA1_S7FCR ; \ DMA1_S7FCR_DMDIS, Direct mode disable
: DMA1_S7FCR_FTH ( %bb -- x addr ) DMA1_S7FCR ; \ DMA1_S7FCR_FTH, FIFO threshold selection

\ RCC_CR (multiple-access)  Reset:0x00000083
: RCC_CR_PLLI2SRDY? ( -- 1|0 ) 27 bit RCC_CR bit@ ; \ RCC_CR_PLLI2SRDY, PLLI2S clock ready flag
: RCC_CR_PLLI2SON ( -- x addr ) 26 bit RCC_CR ; \ RCC_CR_PLLI2SON, PLLI2S enable
: RCC_CR_PLLRDY? ( -- 1|0 ) 25 bit RCC_CR bit@ ; \ RCC_CR_PLLRDY, Main PLL PLL clock ready flag
: RCC_CR_PLLON ( -- x addr ) 24 bit RCC_CR ; \ RCC_CR_PLLON, Main PLL PLL enable
: RCC_CR_CSSON ( -- x addr ) 19 bit RCC_CR ; \ RCC_CR_CSSON, Clock security system enable
: RCC_CR_HSEBYP ( -- x addr ) 18 bit RCC_CR ; \ RCC_CR_HSEBYP, HSE clock bypass
: RCC_CR_HSERDY? ( -- 1|0 ) 17 bit RCC_CR bit@ ; \ RCC_CR_HSERDY, HSE clock ready flag
: RCC_CR_HSEON ( -- x addr ) 16 bit RCC_CR ; \ RCC_CR_HSEON, HSE clock enable
: RCC_CR_HSICAL ( %bbbbbbbb -- x addr ) 8 lshift RCC_CR ; \ RCC_CR_HSICAL, Internal high-speed clock calibration
: RCC_CR_HSITRIM ( %bbbbb -- x addr ) 3 lshift RCC_CR ; \ RCC_CR_HSITRIM, Internal high-speed clock trimming
: RCC_CR_HSIRDY? ( -- 1|0 ) 1 bit RCC_CR bit@ ; \ RCC_CR_HSIRDY, Internal high-speed clock ready flag
: RCC_CR_HSION ( -- x addr ) 0 bit RCC_CR ; \ RCC_CR_HSION, Internal high-speed clock enable

\ RCC_PLLCFGR (read-write) Reset:0x24003010
: RCC_PLLCFGR_PLLQ3 ( -- x addr ) 27 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLQ3, Main PLL PLL division factor for USB OTG FS, SDIO and random number generator clocks
: RCC_PLLCFGR_PLLQ2 ( -- x addr ) 26 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLQ2, Main PLL PLL division factor for USB OTG FS, SDIO and random number generator clocks
: RCC_PLLCFGR_PLLQ1 ( -- x addr ) 25 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLQ1, Main PLL PLL division factor for USB OTG FS, SDIO and random number generator clocks
: RCC_PLLCFGR_PLLQ0 ( -- x addr ) 24 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLQ0, Main PLL PLL division factor for USB OTG FS, SDIO and random number generator clocks
: RCC_PLLCFGR_PLLSRC ( -- x addr ) 22 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLSRC, Main PLLPLL and audio PLL PLLI2S entry clock source
: RCC_PLLCFGR_PLLP1 ( -- x addr ) 17 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLP1, Main PLL PLL division factor for main system clock
: RCC_PLLCFGR_PLLP0 ( -- x addr ) 16 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLP0, Main PLL PLL division factor for main system clock
: RCC_PLLCFGR_PLLN8 ( -- x addr ) 14 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN8, Main PLL PLL multiplication factor for VCO
: RCC_PLLCFGR_PLLN7 ( -- x addr ) 13 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN7, Main PLL PLL multiplication factor for VCO
: RCC_PLLCFGR_PLLN6 ( -- x addr ) 12 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN6, Main PLL PLL multiplication factor for VCO
: RCC_PLLCFGR_PLLN5 ( -- x addr ) 11 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN5, Main PLL PLL multiplication factor for VCO
: RCC_PLLCFGR_PLLN4 ( -- x addr ) 10 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN4, Main PLL PLL multiplication factor for VCO
: RCC_PLLCFGR_PLLN3 ( -- x addr ) 9 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN3, Main PLL PLL multiplication factor for VCO
: RCC_PLLCFGR_PLLN2 ( -- x addr ) 8 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN2, Main PLL PLL multiplication factor for VCO
: RCC_PLLCFGR_PLLN1 ( -- x addr ) 7 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN1, Main PLL PLL multiplication factor for VCO
: RCC_PLLCFGR_PLLN0 ( -- x addr ) 6 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN0, Main PLL PLL multiplication factor for VCO
: RCC_PLLCFGR_PLLM5 ( -- x addr ) 5 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM5, Division factor for the main PLL PLL and audio PLL PLLI2S input clock
: RCC_PLLCFGR_PLLM4 ( -- x addr ) 4 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM4, Division factor for the main PLL PLL and audio PLL PLLI2S input clock
: RCC_PLLCFGR_PLLM3 ( -- x addr ) 3 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM3, Division factor for the main PLL PLL and audio PLL PLLI2S input clock
: RCC_PLLCFGR_PLLM2 ( -- x addr ) 2 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM2, Division factor for the main PLL PLL and audio PLL PLLI2S input clock
: RCC_PLLCFGR_PLLM1 ( -- x addr ) 1 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM1, Division factor for the main PLL PLL and audio PLL PLLI2S input clock
: RCC_PLLCFGR_PLLM0 ( -- x addr ) 0 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM0, Division factor for the main PLL PLL and audio PLL PLLI2S input clock

\ RCC_CFGR (multiple-access)  Reset:0x00000000
: RCC_CFGR_MCO2 ( %bb -- x addr ) 30 lshift RCC_CFGR ; \ RCC_CFGR_MCO2, Microcontroller clock output 2
: RCC_CFGR_MCO2PRE ( %bbb -- x addr ) 27 lshift RCC_CFGR ; \ RCC_CFGR_MCO2PRE, MCO2 prescaler
: RCC_CFGR_MCO1PRE ( %bbb -- x addr ) 24 lshift RCC_CFGR ; \ RCC_CFGR_MCO1PRE, MCO1 prescaler
: RCC_CFGR_I2SSRC ( -- x addr ) 23 bit RCC_CFGR ; \ RCC_CFGR_I2SSRC, I2S clock selection
: RCC_CFGR_MCO1 ( %bb -- x addr ) 21 lshift RCC_CFGR ; \ RCC_CFGR_MCO1, Microcontroller clock output 1
: RCC_CFGR_RTCPRE ( %bbbbb -- x addr ) 16 lshift RCC_CFGR ; \ RCC_CFGR_RTCPRE, HSE division factor for RTC clock
: RCC_CFGR_PPRE2 ( %bbb -- x addr ) 13 lshift RCC_CFGR ; \ RCC_CFGR_PPRE2, APB high-speed prescaler APB2
: RCC_CFGR_PPRE1 ( %bbb -- x addr ) 10 lshift RCC_CFGR ; \ RCC_CFGR_PPRE1, APB Low speed prescaler APB1
: RCC_CFGR_HPRE ( %bbbb -- x addr ) 4 lshift RCC_CFGR ; \ RCC_CFGR_HPRE, AHB prescaler
: RCC_CFGR_SWS1? ( -- 1|0 ) 3 bit RCC_CFGR bit@ ; \ RCC_CFGR_SWS1, System clock switch status
: RCC_CFGR_SWS0? ( -- 1|0 ) 2 bit RCC_CFGR bit@ ; \ RCC_CFGR_SWS0, System clock switch status
: RCC_CFGR_SW1 ( -- x addr ) 1 bit RCC_CFGR ; \ RCC_CFGR_SW1, System clock switch
: RCC_CFGR_SW0 ( -- x addr ) 0 bit RCC_CFGR ; \ RCC_CFGR_SW0, System clock switch

\ RCC_CIR (multiple-access)  Reset:0x00000000
: RCC_CIR_CSSC ( -- x addr ) 23 bit RCC_CIR ; \ RCC_CIR_CSSC, Clock security system interrupt clear
: RCC_CIR_PLLSAIRDYC ( -- x addr ) 22 bit RCC_CIR ; \ RCC_CIR_PLLSAIRDYC, PLLSAI Ready Interrupt Clear
: RCC_CIR_PLLI2SRDYC ( -- x addr ) 21 bit RCC_CIR ; \ RCC_CIR_PLLI2SRDYC, PLLI2S ready interrupt clear
: RCC_CIR_PLLRDYC ( -- x addr ) 20 bit RCC_CIR ; \ RCC_CIR_PLLRDYC, Main PLLPLL ready interrupt clear
: RCC_CIR_HSERDYC ( -- x addr ) 19 bit RCC_CIR ; \ RCC_CIR_HSERDYC, HSE ready interrupt clear
: RCC_CIR_HSIRDYC ( -- x addr ) 18 bit RCC_CIR ; \ RCC_CIR_HSIRDYC, HSI ready interrupt clear
: RCC_CIR_LSERDYC ( -- x addr ) 17 bit RCC_CIR ; \ RCC_CIR_LSERDYC, LSE ready interrupt clear
: RCC_CIR_LSIRDYC ( -- x addr ) 16 bit RCC_CIR ; \ RCC_CIR_LSIRDYC, LSI ready interrupt clear
: RCC_CIR_PLLSAIRDYIE ( -- x addr ) 14 bit RCC_CIR ; \ RCC_CIR_PLLSAIRDYIE, PLLSAI Ready Interrupt Enable
: RCC_CIR_PLLI2SRDYIE ( -- x addr ) 13 bit RCC_CIR ; \ RCC_CIR_PLLI2SRDYIE, PLLI2S ready interrupt enable
: RCC_CIR_PLLRDYIE ( -- x addr ) 12 bit RCC_CIR ; \ RCC_CIR_PLLRDYIE, Main PLL PLL ready interrupt enable
: RCC_CIR_HSERDYIE ( -- x addr ) 11 bit RCC_CIR ; \ RCC_CIR_HSERDYIE, HSE ready interrupt enable
: RCC_CIR_HSIRDYIE ( -- x addr ) 10 bit RCC_CIR ; \ RCC_CIR_HSIRDYIE, HSI ready interrupt enable
: RCC_CIR_LSERDYIE ( -- x addr ) 9 bit RCC_CIR ; \ RCC_CIR_LSERDYIE, LSE ready interrupt enable
: RCC_CIR_LSIRDYIE ( -- x addr ) 8 bit RCC_CIR ; \ RCC_CIR_LSIRDYIE, LSI ready interrupt enable
: RCC_CIR_CSSF? ( -- 1|0 ) 7 bit RCC_CIR bit@ ; \ RCC_CIR_CSSF, Clock security system interrupt flag
: RCC_CIR_PLLSAIRDYF? ( -- 1|0 ) 6 bit RCC_CIR bit@ ; \ RCC_CIR_PLLSAIRDYF, PLLSAI ready interrupt flag
: RCC_CIR_PLLI2SRDYF? ( -- 1|0 ) 5 bit RCC_CIR bit@ ; \ RCC_CIR_PLLI2SRDYF, PLLI2S ready interrupt flag
: RCC_CIR_PLLRDYF? ( -- 1|0 ) 4 bit RCC_CIR bit@ ; \ RCC_CIR_PLLRDYF, Main PLL PLL ready interrupt flag
: RCC_CIR_HSERDYF? ( -- 1|0 ) 3 bit RCC_CIR bit@ ; \ RCC_CIR_HSERDYF, HSE ready interrupt flag
: RCC_CIR_HSIRDYF? ( -- 1|0 ) 2 bit RCC_CIR bit@ ; \ RCC_CIR_HSIRDYF, HSI ready interrupt flag
: RCC_CIR_LSERDYF? ( -- 1|0 ) 1 bit RCC_CIR bit@ ; \ RCC_CIR_LSERDYF, LSE ready interrupt flag
: RCC_CIR_LSIRDYF? ( -- 1|0 ) 0 bit RCC_CIR bit@ ; \ RCC_CIR_LSIRDYF, LSI ready interrupt flag

\ RCC_AHB1RSTR (read-write) Reset:0x00000000
: RCC_AHB1RSTR_OTGHSRST ( -- x addr ) 29 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_OTGHSRST, USB OTG HS module reset
: RCC_AHB1RSTR_ETHMACRST ( -- x addr ) 25 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_ETHMACRST, Ethernet MAC reset
: RCC_AHB1RSTR_DMA2DRST ( -- x addr ) 23 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_DMA2DRST, DMA2D reset
: RCC_AHB1RSTR_DMA2RST ( -- x addr ) 22 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_DMA2RST, DMA2 reset
: RCC_AHB1RSTR_DMA1RST ( -- x addr ) 21 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_DMA1RST, DMA2 reset
: RCC_AHB1RSTR_CRCRST ( -- x addr ) 12 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_CRCRST, CRC reset
: RCC_AHB1RSTR_GPIOKRST ( -- x addr ) 10 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOKRST, IO port K reset
: RCC_AHB1RSTR_GPIOJRST ( -- x addr ) 9 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOJRST, IO port J reset
: RCC_AHB1RSTR_GPIOIRST ( -- x addr ) 8 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOIRST, IO port I reset
: RCC_AHB1RSTR_GPIOHRST ( -- x addr ) 7 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOHRST, IO port H reset
: RCC_AHB1RSTR_GPIOGRST ( -- x addr ) 6 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOGRST, IO port G reset
: RCC_AHB1RSTR_GPIOFRST ( -- x addr ) 5 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOFRST, IO port F reset
: RCC_AHB1RSTR_GPIOERST ( -- x addr ) 4 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOERST, IO port E reset
: RCC_AHB1RSTR_GPIODRST ( -- x addr ) 3 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIODRST, IO port D reset
: RCC_AHB1RSTR_GPIOCRST ( -- x addr ) 2 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOCRST, IO port C reset
: RCC_AHB1RSTR_GPIOBRST ( -- x addr ) 1 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOBRST, IO port B reset
: RCC_AHB1RSTR_GPIOARST ( -- x addr ) 0 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOARST, IO port A reset

\ RCC_AHB2RSTR (read-write) Reset:0x00000000
: RCC_AHB2RSTR_OTGFSRST ( -- x addr ) 7 bit RCC_AHB2RSTR ; \ RCC_AHB2RSTR_OTGFSRST, USB OTG FS module reset
: RCC_AHB2RSTR_RNGRST ( -- x addr ) 6 bit RCC_AHB2RSTR ; \ RCC_AHB2RSTR_RNGRST, Random number generator module reset
: RCC_AHB2RSTR_HSAHRST ( -- x addr ) 5 bit RCC_AHB2RSTR ; \ RCC_AHB2RSTR_HSAHRST, Hash module reset
: RCC_AHB2RSTR_CRYPRST ( -- x addr ) 4 bit RCC_AHB2RSTR ; \ RCC_AHB2RSTR_CRYPRST, Cryptographic module reset
: RCC_AHB2RSTR_DCMIRST ( -- x addr ) 0 bit RCC_AHB2RSTR ; \ RCC_AHB2RSTR_DCMIRST, Camera interface reset

\ RCC_AHB3RSTR (read-write) Reset:0x00000000
: RCC_AHB3RSTR_FMCRST ( -- x addr ) 0 bit RCC_AHB3RSTR ; \ RCC_AHB3RSTR_FMCRST, Flexible memory controller module reset
: RCC_AHB3RSTR_QSPIRST ( -- x addr ) 1 bit RCC_AHB3RSTR ; \ RCC_AHB3RSTR_QSPIRST, Quad SPI memory controller reset

\ RCC_APB1RSTR (read-write) Reset:0x00000000
: RCC_APB1RSTR_TIM2RST ( -- x addr ) 0 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM2RST, TIM2 reset
: RCC_APB1RSTR_TIM3RST ( -- x addr ) 1 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM3RST, TIM3 reset
: RCC_APB1RSTR_TIM4RST ( -- x addr ) 2 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM4RST, TIM4 reset
: RCC_APB1RSTR_TIM5RST ( -- x addr ) 3 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM5RST, TIM5 reset
: RCC_APB1RSTR_TIM6RST ( -- x addr ) 4 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM6RST, TIM6 reset
: RCC_APB1RSTR_TIM7RST ( -- x addr ) 5 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM7RST, TIM7 reset
: RCC_APB1RSTR_TIM12RST ( -- x addr ) 6 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM12RST, TIM12 reset
: RCC_APB1RSTR_TIM13RST ( -- x addr ) 7 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM13RST, TIM13 reset
: RCC_APB1RSTR_TIM14RST ( -- x addr ) 8 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM14RST, TIM14 reset
: RCC_APB1RSTR_WWDGRST ( -- x addr ) 11 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_WWDGRST, Window watchdog reset
: RCC_APB1RSTR_SPI2RST ( -- x addr ) 14 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_SPI2RST, SPI 2 reset
: RCC_APB1RSTR_SPI3RST ( -- x addr ) 15 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_SPI3RST, SPI 3 reset
: RCC_APB1RSTR_UART2RST ( -- x addr ) 17 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_UART2RST, USART 2 reset
: RCC_APB1RSTR_UART3RST ( -- x addr ) 18 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_UART3RST, USART 3 reset
: RCC_APB1RSTR_UART4RST ( -- x addr ) 19 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_UART4RST, USART 4 reset
: RCC_APB1RSTR_UART5RST ( -- x addr ) 20 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_UART5RST, USART 5 reset
: RCC_APB1RSTR_I2C1RST ( -- x addr ) 21 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_I2C1RST, I2C 1 reset
: RCC_APB1RSTR_I2C2RST ( -- x addr ) 22 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_I2C2RST, I2C 2 reset
: RCC_APB1RSTR_I2C3RST ( -- x addr ) 23 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_I2C3RST, I2C3 reset
: RCC_APB1RSTR_CAN1RST ( -- x addr ) 25 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_CAN1RST, CAN1 reset
: RCC_APB1RSTR_CAN2RST ( -- x addr ) 26 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_CAN2RST, CAN2 reset
: RCC_APB1RSTR_PWRRST ( -- x addr ) 28 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_PWRRST, Power interface reset
: RCC_APB1RSTR_DACRST ( -- x addr ) 29 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_DACRST, DAC reset
: RCC_APB1RSTR_UART7RST ( -- x addr ) 30 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_UART7RST, UART7 reset
: RCC_APB1RSTR_UART8RST ( -- x addr ) 31 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_UART8RST, UART8 reset
: RCC_APB1RSTR_SPDIFRXRST ( -- x addr ) 16 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_SPDIFRXRST, SPDIF-RX reset
: RCC_APB1RSTR_CECRST ( -- x addr ) 27 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_CECRST, HDMI-CEC reset
: RCC_APB1RSTR_LPTIM1RST ( -- x addr ) 9 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_LPTIM1RST, Low power timer 1 reset
: RCC_APB1RSTR_I2C4RST ( -- x addr ) 24 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_I2C4RST, I2C 4 reset

\ RCC_APB2RSTR (read-write) Reset:0x00000000
: RCC_APB2RSTR_TIM1RST ( -- x addr ) 0 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_TIM1RST, TIM1 reset
: RCC_APB2RSTR_TIM8RST ( -- x addr ) 1 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_TIM8RST, TIM8 reset
: RCC_APB2RSTR_USART1RST ( -- x addr ) 4 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_USART1RST, USART1 reset
: RCC_APB2RSTR_USART6RST ( -- x addr ) 5 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_USART6RST, USART6 reset
: RCC_APB2RSTR_ADCRST ( -- x addr ) 8 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_ADCRST, ADC interface reset common to all ADCs
: RCC_APB2RSTR_SPI1RST ( -- x addr ) 12 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_SPI1RST, SPI 1 reset
: RCC_APB2RSTR_SPI4RST ( -- x addr ) 13 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_SPI4RST, SPI4 reset
: RCC_APB2RSTR_SYSCFGRST ( -- x addr ) 14 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_SYSCFGRST, System configuration controller reset
: RCC_APB2RSTR_TIM9RST ( -- x addr ) 16 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_TIM9RST, TIM9 reset
: RCC_APB2RSTR_TIM10RST ( -- x addr ) 17 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_TIM10RST, TIM10 reset
: RCC_APB2RSTR_TIM11RST ( -- x addr ) 18 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_TIM11RST, TIM11 reset
: RCC_APB2RSTR_SPI5RST ( -- x addr ) 20 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_SPI5RST, SPI5 reset
: RCC_APB2RSTR_SPI6RST ( -- x addr ) 21 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_SPI6RST, SPI6 reset
: RCC_APB2RSTR_SAI1RST ( -- x addr ) 22 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_SAI1RST, SAI1 reset
: RCC_APB2RSTR_LTDCRST ( -- x addr ) 26 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_LTDCRST, LTDC reset
: RCC_APB2RSTR_SAI2RST ( -- x addr ) 23 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_SAI2RST, SAI2 reset
: RCC_APB2RSTR_SDMMC1RST ( -- x addr ) 11 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_SDMMC1RST, SDMMC1 reset

\ RCC_AHB1ENR (read-write) Reset:0x00100000
: RCC_AHB1ENR_OTGHSULPIEN ( -- x addr ) 30 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_OTGHSULPIEN, USB OTG HSULPI clock enable
: RCC_AHB1ENR_OTGHSEN ( -- x addr ) 29 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_OTGHSEN, USB OTG HS clock enable
: RCC_AHB1ENR_ETHMACPTPEN ( -- x addr ) 28 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_ETHMACPTPEN, Ethernet PTP clock enable
: RCC_AHB1ENR_ETHMACRXEN ( -- x addr ) 27 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_ETHMACRXEN, Ethernet Reception clock enable
: RCC_AHB1ENR_ETHMACTXEN ( -- x addr ) 26 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_ETHMACTXEN, Ethernet Transmission clock enable
: RCC_AHB1ENR_ETHMACEN ( -- x addr ) 25 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_ETHMACEN, Ethernet MAC clock enable
: RCC_AHB1ENR_DMA2DEN ( -- x addr ) 23 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_DMA2DEN, DMA2D clock enable
: RCC_AHB1ENR_DMA2EN ( -- x addr ) 22 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_DMA2EN, DMA2 clock enable
: RCC_AHB1ENR_DMA1EN ( -- x addr ) 21 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_DMA1EN, DMA1 clock enable
: RCC_AHB1ENR_CCMDATARAMEN ( -- x addr ) 20 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_CCMDATARAMEN, CCM data RAM clock enable
: RCC_AHB1ENR_BKPSRAMEN ( -- x addr ) 18 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_BKPSRAMEN, Backup SRAM interface clock enable
: RCC_AHB1ENR_CRCEN ( -- x addr ) 12 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_CRCEN, CRC clock enable
: RCC_AHB1ENR_GPIOKEN ( -- x addr ) 10 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOKEN, IO port K clock enable
: RCC_AHB1ENR_GPIOJEN ( -- x addr ) 9 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOJEN, IO port J clock enable
: RCC_AHB1ENR_GPIOIEN ( -- x addr ) 8 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOIEN, IO port I clock enable
: RCC_AHB1ENR_GPIOHEN ( -- x addr ) 7 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOHEN, IO port H clock enable
: RCC_AHB1ENR_GPIOGEN ( -- x addr ) 6 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOGEN, IO port G clock enable
: RCC_AHB1ENR_GPIOFEN ( -- x addr ) 5 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOFEN, IO port F clock enable
: RCC_AHB1ENR_GPIOEEN ( -- x addr ) 4 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOEEN, IO port E clock enable
: RCC_AHB1ENR_GPIODEN ( -- x addr ) 3 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIODEN, IO port D clock enable
: RCC_AHB1ENR_GPIOCEN ( -- x addr ) 2 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOCEN, IO port C clock enable
: RCC_AHB1ENR_GPIOBEN ( -- x addr ) 1 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOBEN, IO port B clock enable
: RCC_AHB1ENR_GPIOAEN ( -- x addr ) 0 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOAEN, IO port A clock enable

\ RCC_AHB2ENR (read-write) Reset:0x00000000
: RCC_AHB2ENR_OTGFSEN ( -- x addr ) 7 bit RCC_AHB2ENR ; \ RCC_AHB2ENR_OTGFSEN, USB OTG FS clock enable
: RCC_AHB2ENR_RNGEN ( -- x addr ) 6 bit RCC_AHB2ENR ; \ RCC_AHB2ENR_RNGEN, Random number generator clock enable
: RCC_AHB2ENR_HASHEN ( -- x addr ) 5 bit RCC_AHB2ENR ; \ RCC_AHB2ENR_HASHEN, Hash modules clock enable
: RCC_AHB2ENR_CRYPEN ( -- x addr ) 4 bit RCC_AHB2ENR ; \ RCC_AHB2ENR_CRYPEN, Cryptographic modules clock enable
: RCC_AHB2ENR_DCMIEN ( -- x addr ) 0 bit RCC_AHB2ENR ; \ RCC_AHB2ENR_DCMIEN, Camera interface enable

\ RCC_AHB3ENR (read-write) Reset:0x00000000
: RCC_AHB3ENR_FMCEN ( -- x addr ) 0 bit RCC_AHB3ENR ; \ RCC_AHB3ENR_FMCEN, Flexible memory controller module clock enable
: RCC_AHB3ENR_QSPIEN ( -- x addr ) 1 bit RCC_AHB3ENR ; \ RCC_AHB3ENR_QSPIEN, Quad SPI memory controller clock enable

\ RCC_APB1ENR (read-write) Reset:0x00000000
: RCC_APB1ENR_TIM2EN ( -- x addr ) 0 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM2EN, TIM2 clock enable
: RCC_APB1ENR_TIM3EN ( -- x addr ) 1 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM3EN, TIM3 clock enable
: RCC_APB1ENR_TIM4EN ( -- x addr ) 2 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM4EN, TIM4 clock enable
: RCC_APB1ENR_TIM5EN ( -- x addr ) 3 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM5EN, TIM5 clock enable
: RCC_APB1ENR_TIM6EN ( -- x addr ) 4 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM6EN, TIM6 clock enable
: RCC_APB1ENR_TIM7EN ( -- x addr ) 5 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM7EN, TIM7 clock enable
: RCC_APB1ENR_TIM12EN ( -- x addr ) 6 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM12EN, TIM12 clock enable
: RCC_APB1ENR_TIM13EN ( -- x addr ) 7 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM13EN, TIM13 clock enable
: RCC_APB1ENR_TIM14EN ( -- x addr ) 8 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM14EN, TIM14 clock enable
: RCC_APB1ENR_WWDGEN ( -- x addr ) 11 bit RCC_APB1ENR ; \ RCC_APB1ENR_WWDGEN, Window watchdog clock enable
: RCC_APB1ENR_SPI2EN ( -- x addr ) 14 bit RCC_APB1ENR ; \ RCC_APB1ENR_SPI2EN, SPI2 clock enable
: RCC_APB1ENR_SPI3EN ( -- x addr ) 15 bit RCC_APB1ENR ; \ RCC_APB1ENR_SPI3EN, SPI3 clock enable
: RCC_APB1ENR_USART2EN ( -- x addr ) 17 bit RCC_APB1ENR ; \ RCC_APB1ENR_USART2EN, USART 2 clock enable
: RCC_APB1ENR_USART3EN ( -- x addr ) 18 bit RCC_APB1ENR ; \ RCC_APB1ENR_USART3EN, USART3 clock enable
: RCC_APB1ENR_UART4EN ( -- x addr ) 19 bit RCC_APB1ENR ; \ RCC_APB1ENR_UART4EN, UART4 clock enable
: RCC_APB1ENR_UART5EN ( -- x addr ) 20 bit RCC_APB1ENR ; \ RCC_APB1ENR_UART5EN, UART5 clock enable
: RCC_APB1ENR_I2C1EN ( -- x addr ) 21 bit RCC_APB1ENR ; \ RCC_APB1ENR_I2C1EN, I2C1 clock enable
: RCC_APB1ENR_I2C2EN ( -- x addr ) 22 bit RCC_APB1ENR ; \ RCC_APB1ENR_I2C2EN, I2C2 clock enable
: RCC_APB1ENR_I2C3EN ( -- x addr ) 23 bit RCC_APB1ENR ; \ RCC_APB1ENR_I2C3EN, I2C3 clock enable
: RCC_APB1ENR_CAN1EN ( -- x addr ) 25 bit RCC_APB1ENR ; \ RCC_APB1ENR_CAN1EN, CAN 1 clock enable
: RCC_APB1ENR_CAN2EN ( -- x addr ) 26 bit RCC_APB1ENR ; \ RCC_APB1ENR_CAN2EN, CAN 2 clock enable
: RCC_APB1ENR_PWREN ( -- x addr ) 28 bit RCC_APB1ENR ; \ RCC_APB1ENR_PWREN, Power interface clock enable
: RCC_APB1ENR_DACEN ( -- x addr ) 29 bit RCC_APB1ENR ; \ RCC_APB1ENR_DACEN, DAC interface clock enable
: RCC_APB1ENR_UART7ENR ( -- x addr ) 30 bit RCC_APB1ENR ; \ RCC_APB1ENR_UART7ENR, UART7 clock enable
: RCC_APB1ENR_UART8ENR ( -- x addr ) 31 bit RCC_APB1ENR ; \ RCC_APB1ENR_UART8ENR, UART8 clock enable
: RCC_APB1ENR_SPDIFRXEN ( -- x addr ) 16 bit RCC_APB1ENR ; \ RCC_APB1ENR_SPDIFRXEN, SPDIF-RX clock enable
: RCC_APB1ENR_CECEN ( -- x addr ) 27 bit RCC_APB1ENR ; \ RCC_APB1ENR_CECEN, HDMI-CEN clock enable
: RCC_APB1ENR_LPTMI1EN ( -- x addr ) 9 bit RCC_APB1ENR ; \ RCC_APB1ENR_LPTMI1EN, Low power timer 1 clock enable
: RCC_APB1ENR_I2C4EN ( -- x addr ) 24 bit RCC_APB1ENR ; \ RCC_APB1ENR_I2C4EN, I2C4 clock enable

\ RCC_APB2ENR (read-write) Reset:0x00000000
: RCC_APB2ENR_TIM1EN ( -- x addr ) 0 bit RCC_APB2ENR ; \ RCC_APB2ENR_TIM1EN, TIM1 clock enable
: RCC_APB2ENR_TIM8EN ( -- x addr ) 1 bit RCC_APB2ENR ; \ RCC_APB2ENR_TIM8EN, TIM8 clock enable
: RCC_APB2ENR_USART1EN ( -- x addr ) 4 bit RCC_APB2ENR ; \ RCC_APB2ENR_USART1EN, USART1 clock enable
: RCC_APB2ENR_USART6EN ( -- x addr ) 5 bit RCC_APB2ENR ; \ RCC_APB2ENR_USART6EN, USART6 clock enable
: RCC_APB2ENR_ADC1EN ( -- x addr ) 8 bit RCC_APB2ENR ; \ RCC_APB2ENR_ADC1EN, ADC1 clock enable
: RCC_APB2ENR_ADC2EN ( -- x addr ) 9 bit RCC_APB2ENR ; \ RCC_APB2ENR_ADC2EN, ADC2 clock enable
: RCC_APB2ENR_ADC3EN ( -- x addr ) 10 bit RCC_APB2ENR ; \ RCC_APB2ENR_ADC3EN, ADC3 clock enable
: RCC_APB2ENR_SPI1EN ( -- x addr ) 12 bit RCC_APB2ENR ; \ RCC_APB2ENR_SPI1EN, SPI1 clock enable
: RCC_APB2ENR_SPI4ENR ( -- x addr ) 13 bit RCC_APB2ENR ; \ RCC_APB2ENR_SPI4ENR, SPI4 clock enable
: RCC_APB2ENR_SYSCFGEN ( -- x addr ) 14 bit RCC_APB2ENR ; \ RCC_APB2ENR_SYSCFGEN, System configuration controller clock enable
: RCC_APB2ENR_TIM9EN ( -- x addr ) 16 bit RCC_APB2ENR ; \ RCC_APB2ENR_TIM9EN, TIM9 clock enable
: RCC_APB2ENR_TIM10EN ( -- x addr ) 17 bit RCC_APB2ENR ; \ RCC_APB2ENR_TIM10EN, TIM10 clock enable
: RCC_APB2ENR_TIM11EN ( -- x addr ) 18 bit RCC_APB2ENR ; \ RCC_APB2ENR_TIM11EN, TIM11 clock enable
: RCC_APB2ENR_SPI5ENR ( -- x addr ) 20 bit RCC_APB2ENR ; \ RCC_APB2ENR_SPI5ENR, SPI5 clock enable
: RCC_APB2ENR_SPI6ENR ( -- x addr ) 21 bit RCC_APB2ENR ; \ RCC_APB2ENR_SPI6ENR, SPI6 clock enable
: RCC_APB2ENR_SAI1EN ( -- x addr ) 22 bit RCC_APB2ENR ; \ RCC_APB2ENR_SAI1EN, SAI1 clock enable
: RCC_APB2ENR_LTDCEN ( -- x addr ) 26 bit RCC_APB2ENR ; \ RCC_APB2ENR_LTDCEN, LTDC clock enable
: RCC_APB2ENR_SAI2EN ( -- x addr ) 23 bit RCC_APB2ENR ; \ RCC_APB2ENR_SAI2EN, SAI2 clock enable
: RCC_APB2ENR_SDMMC1EN ( -- x addr ) 11 bit RCC_APB2ENR ; \ RCC_APB2ENR_SDMMC1EN, SDMMC1 clock enable

\ RCC_AHB1LPENR (read-write) Reset:0x7E6791FF
: RCC_AHB1LPENR_GPIOALPEN ( -- x addr ) 0 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOALPEN, IO port A clock enable during sleep mode
: RCC_AHB1LPENR_GPIOBLPEN ( -- x addr ) 1 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOBLPEN, IO port B clock enable during Sleep mode
: RCC_AHB1LPENR_GPIOCLPEN ( -- x addr ) 2 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOCLPEN, IO port C clock enable during Sleep mode
: RCC_AHB1LPENR_GPIODLPEN ( -- x addr ) 3 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIODLPEN, IO port D clock enable during Sleep mode
: RCC_AHB1LPENR_GPIOELPEN ( -- x addr ) 4 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOELPEN, IO port E clock enable during Sleep mode
: RCC_AHB1LPENR_GPIOFLPEN ( -- x addr ) 5 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOFLPEN, IO port F clock enable during Sleep mode
: RCC_AHB1LPENR_GPIOGLPEN ( -- x addr ) 6 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOGLPEN, IO port G clock enable during Sleep mode
: RCC_AHB1LPENR_GPIOHLPEN ( -- x addr ) 7 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOHLPEN, IO port H clock enable during Sleep mode
: RCC_AHB1LPENR_GPIOILPEN ( -- x addr ) 8 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOILPEN, IO port I clock enable during Sleep mode
: RCC_AHB1LPENR_GPIOJLPEN ( -- x addr ) 9 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOJLPEN, IO port J clock enable during Sleep mode
: RCC_AHB1LPENR_GPIOKLPEN ( -- x addr ) 10 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOKLPEN, IO port K clock enable during Sleep mode
: RCC_AHB1LPENR_CRCLPEN ( -- x addr ) 12 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_CRCLPEN, CRC clock enable during Sleep mode
: RCC_AHB1LPENR_FLITFLPEN ( -- x addr ) 15 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_FLITFLPEN, Flash interface clock enable during Sleep mode
: RCC_AHB1LPENR_SRAM1LPEN ( -- x addr ) 16 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_SRAM1LPEN, SRAM 1interface clock enable during Sleep mode
: RCC_AHB1LPENR_SRAM2LPEN ( -- x addr ) 17 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_SRAM2LPEN, SRAM 2 interface clock enable during Sleep mode
: RCC_AHB1LPENR_BKPSRAMLPEN ( -- x addr ) 18 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_BKPSRAMLPEN, Backup SRAM interface clock enable during Sleep mode
: RCC_AHB1LPENR_SRAM3LPEN ( -- x addr ) 19 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_SRAM3LPEN, SRAM 3 interface clock enable during Sleep mode
: RCC_AHB1LPENR_DMA1LPEN ( -- x addr ) 21 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_DMA1LPEN, DMA1 clock enable during Sleep mode
: RCC_AHB1LPENR_DMA2LPEN ( -- x addr ) 22 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_DMA2LPEN, DMA2 clock enable during Sleep mode
: RCC_AHB1LPENR_DMA2DLPEN ( -- x addr ) 23 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_DMA2DLPEN, DMA2D clock enable during Sleep mode
: RCC_AHB1LPENR_ETHMACLPEN ( -- x addr ) 25 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_ETHMACLPEN, Ethernet MAC clock enable during Sleep mode
: RCC_AHB1LPENR_ETHMACTXLPEN ( -- x addr ) 26 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_ETHMACTXLPEN, Ethernet transmission clock enable during Sleep mode
: RCC_AHB1LPENR_ETHMACRXLPEN ( -- x addr ) 27 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_ETHMACRXLPEN, Ethernet reception clock enable during Sleep mode
: RCC_AHB1LPENR_ETHMACPTPLPEN ( -- x addr ) 28 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_ETHMACPTPLPEN, Ethernet PTP clock enable during Sleep mode
: RCC_AHB1LPENR_OTGHSLPEN ( -- x addr ) 29 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_OTGHSLPEN, USB OTG HS clock enable during Sleep mode
: RCC_AHB1LPENR_OTGHSULPILPEN ( -- x addr ) 30 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_OTGHSULPILPEN, USB OTG HS ULPI clock enable during Sleep mode

\ RCC_AHB2LPENR (read-write) Reset:0x000000F1
: RCC_AHB2LPENR_OTGFSLPEN ( -- x addr ) 7 bit RCC_AHB2LPENR ; \ RCC_AHB2LPENR_OTGFSLPEN, USB OTG FS clock enable during Sleep mode
: RCC_AHB2LPENR_RNGLPEN ( -- x addr ) 6 bit RCC_AHB2LPENR ; \ RCC_AHB2LPENR_RNGLPEN, Random number generator clock enable during Sleep mode
: RCC_AHB2LPENR_HASHLPEN ( -- x addr ) 5 bit RCC_AHB2LPENR ; \ RCC_AHB2LPENR_HASHLPEN, Hash modules clock enable during Sleep mode
: RCC_AHB2LPENR_CRYPLPEN ( -- x addr ) 4 bit RCC_AHB2LPENR ; \ RCC_AHB2LPENR_CRYPLPEN, Cryptography modules clock enable during Sleep mode
: RCC_AHB2LPENR_DCMILPEN ( -- x addr ) 0 bit RCC_AHB2LPENR ; \ RCC_AHB2LPENR_DCMILPEN, Camera interface enable during Sleep mode

\ RCC_AHB3LPENR (read-write) Reset:0x00000001
: RCC_AHB3LPENR_FMCLPEN ( -- x addr ) 0 bit RCC_AHB3LPENR ; \ RCC_AHB3LPENR_FMCLPEN, Flexible memory controller module clock enable during Sleep mode
: RCC_AHB3LPENR_QSPILPEN ( -- x addr ) 1 bit RCC_AHB3LPENR ; \ RCC_AHB3LPENR_QSPILPEN, Quand SPI memory controller clock enable during Sleep mode

\ RCC_APB1LPENR (read-write) Reset:0x36FEC9FF
: RCC_APB1LPENR_TIM2LPEN ( -- x addr ) 0 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM2LPEN, TIM2 clock enable during Sleep mode
: RCC_APB1LPENR_TIM3LPEN ( -- x addr ) 1 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM3LPEN, TIM3 clock enable during Sleep mode
: RCC_APB1LPENR_TIM4LPEN ( -- x addr ) 2 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM4LPEN, TIM4 clock enable during Sleep mode
: RCC_APB1LPENR_TIM5LPEN ( -- x addr ) 3 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM5LPEN, TIM5 clock enable during Sleep mode
: RCC_APB1LPENR_TIM6LPEN ( -- x addr ) 4 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM6LPEN, TIM6 clock enable during Sleep mode
: RCC_APB1LPENR_TIM7LPEN ( -- x addr ) 5 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM7LPEN, TIM7 clock enable during Sleep mode
: RCC_APB1LPENR_TIM12LPEN ( -- x addr ) 6 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM12LPEN, TIM12 clock enable during Sleep mode
: RCC_APB1LPENR_TIM13LPEN ( -- x addr ) 7 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM13LPEN, TIM13 clock enable during Sleep mode
: RCC_APB1LPENR_TIM14LPEN ( -- x addr ) 8 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM14LPEN, TIM14 clock enable during Sleep mode
: RCC_APB1LPENR_WWDGLPEN ( -- x addr ) 11 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_WWDGLPEN, Window watchdog clock enable during Sleep mode
: RCC_APB1LPENR_SPI2LPEN ( -- x addr ) 14 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_SPI2LPEN, SPI2 clock enable during Sleep mode
: RCC_APB1LPENR_SPI3LPEN ( -- x addr ) 15 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_SPI3LPEN, SPI3 clock enable during Sleep mode
: RCC_APB1LPENR_USART2LPEN ( -- x addr ) 17 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_USART2LPEN, USART2 clock enable during Sleep mode
: RCC_APB1LPENR_USART3LPEN ( -- x addr ) 18 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_USART3LPEN, USART3 clock enable during Sleep mode
: RCC_APB1LPENR_UART4LPEN ( -- x addr ) 19 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_UART4LPEN, UART4 clock enable during Sleep mode
: RCC_APB1LPENR_UART5LPEN ( -- x addr ) 20 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_UART5LPEN, UART5 clock enable during Sleep mode
: RCC_APB1LPENR_I2C1LPEN ( -- x addr ) 21 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_I2C1LPEN, I2C1 clock enable during Sleep mode
: RCC_APB1LPENR_I2C2LPEN ( -- x addr ) 22 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_I2C2LPEN, I2C2 clock enable during Sleep mode
: RCC_APB1LPENR_I2C3LPEN ( -- x addr ) 23 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_I2C3LPEN, I2C3 clock enable during Sleep mode
: RCC_APB1LPENR_CAN1LPEN ( -- x addr ) 25 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_CAN1LPEN, CAN 1 clock enable during Sleep mode
: RCC_APB1LPENR_CAN2LPEN ( -- x addr ) 26 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_CAN2LPEN, CAN 2 clock enable during Sleep mode
: RCC_APB1LPENR_PWRLPEN ( -- x addr ) 28 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_PWRLPEN, Power interface clock enable during Sleep mode
: RCC_APB1LPENR_DACLPEN ( -- x addr ) 29 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_DACLPEN, DAC interface clock enable during Sleep mode
: RCC_APB1LPENR_UART7LPEN ( -- x addr ) 30 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_UART7LPEN, UART7 clock enable during Sleep mode
: RCC_APB1LPENR_UART8LPEN ( -- x addr ) 31 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_UART8LPEN, UART8 clock enable during Sleep mode
: RCC_APB1LPENR_SPDIFRXLPEN ( -- x addr ) 16 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_SPDIFRXLPEN, SPDIF-RX clock enable during sleep mode
: RCC_APB1LPENR_CECLPEN ( -- x addr ) 27 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_CECLPEN, HDMI-CEN clock enable during Sleep mode
: RCC_APB1LPENR_LPTIM1LPEN ( -- x addr ) 9 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_LPTIM1LPEN, low power timer 1 clock enable during Sleep mode
: RCC_APB1LPENR_I2C4LPEN ( -- x addr ) 24 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_I2C4LPEN, I2C4 clock enable during Sleep mode

\ RCC_APB2LPENR (read-write) Reset:0x00075F33
: RCC_APB2LPENR_TIM1LPEN ( -- x addr ) 0 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_TIM1LPEN, TIM1 clock enable during Sleep mode
: RCC_APB2LPENR_TIM8LPEN ( -- x addr ) 1 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_TIM8LPEN, TIM8 clock enable during Sleep mode
: RCC_APB2LPENR_USART1LPEN ( -- x addr ) 4 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_USART1LPEN, USART1 clock enable during Sleep mode
: RCC_APB2LPENR_USART6LPEN ( -- x addr ) 5 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_USART6LPEN, USART6 clock enable during Sleep mode
: RCC_APB2LPENR_ADC1LPEN ( -- x addr ) 8 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_ADC1LPEN, ADC1 clock enable during Sleep mode
: RCC_APB2LPENR_ADC2LPEN ( -- x addr ) 9 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_ADC2LPEN, ADC2 clock enable during Sleep mode
: RCC_APB2LPENR_ADC3LPEN ( -- x addr ) 10 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_ADC3LPEN, ADC 3 clock enable during Sleep mode
: RCC_APB2LPENR_SPI1LPEN ( -- x addr ) 12 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_SPI1LPEN, SPI 1 clock enable during Sleep mode
: RCC_APB2LPENR_SPI4LPEN ( -- x addr ) 13 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_SPI4LPEN, SPI 4 clock enable during Sleep mode
: RCC_APB2LPENR_SYSCFGLPEN ( -- x addr ) 14 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_SYSCFGLPEN, System configuration controller clock enable during Sleep mode
: RCC_APB2LPENR_TIM9LPEN ( -- x addr ) 16 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_TIM9LPEN, TIM9 clock enable during sleep mode
: RCC_APB2LPENR_TIM10LPEN ( -- x addr ) 17 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_TIM10LPEN, TIM10 clock enable during Sleep mode
: RCC_APB2LPENR_TIM11LPEN ( -- x addr ) 18 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_TIM11LPEN, TIM11 clock enable during Sleep mode
: RCC_APB2LPENR_SPI5LPEN ( -- x addr ) 20 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_SPI5LPEN, SPI 5 clock enable during Sleep mode
: RCC_APB2LPENR_SPI6LPEN ( -- x addr ) 21 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_SPI6LPEN, SPI 6 clock enable during Sleep mode
: RCC_APB2LPENR_SAI1LPEN ( -- x addr ) 22 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_SAI1LPEN, SAI1 clock enable during sleep mode
: RCC_APB2LPENR_LTDCLPEN ( -- x addr ) 26 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_LTDCLPEN, LTDC clock enable during sleep mode
: RCC_APB2LPENR_SAI2LPEN ( -- x addr ) 23 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_SAI2LPEN, SAI2 clock enable during sleep mode
: RCC_APB2LPENR_SDMMC1LPEN ( -- x addr ) 11 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_SDMMC1LPEN, SDMMC1 clock enable during Sleep mode

\ RCC_BDCR (multiple-access)  Reset:0x00000000
: RCC_BDCR_BDRST ( -- x addr ) 16 bit RCC_BDCR ; \ RCC_BDCR_BDRST, Backup domain software reset
: RCC_BDCR_RTCEN ( -- x addr ) 15 bit RCC_BDCR ; \ RCC_BDCR_RTCEN, RTC clock enable
: RCC_BDCR_RTCSEL1 ( -- x addr ) 9 bit RCC_BDCR ; \ RCC_BDCR_RTCSEL1, RTC clock source selection
: RCC_BDCR_RTCSEL0 ( -- x addr ) 8 bit RCC_BDCR ; \ RCC_BDCR_RTCSEL0, RTC clock source selection
: RCC_BDCR_LSEBYP ( -- x addr ) 2 bit RCC_BDCR ; \ RCC_BDCR_LSEBYP, External low-speed oscillator bypass
: RCC_BDCR_LSERDY ( -- x addr ) 1 bit RCC_BDCR ; \ RCC_BDCR_LSERDY, External low-speed oscillator ready
: RCC_BDCR_LSEON ( -- x addr ) 0 bit RCC_BDCR ; \ RCC_BDCR_LSEON, External low-speed oscillator enable

\ RCC_CSR (multiple-access)  Reset:0x0E000000
: RCC_CSR_LPWRRSTF? ( -- 1|0 ) 31 bit RCC_CSR bit@ ; \ RCC_CSR_LPWRRSTF, Low-power reset flag
: RCC_CSR_WWDGRSTF? ( -- 1|0 ) 30 bit RCC_CSR bit@ ; \ RCC_CSR_WWDGRSTF, Window watchdog reset flag
: RCC_CSR_WDGRSTF? ( -- 1|0 ) 29 bit RCC_CSR bit@ ; \ RCC_CSR_WDGRSTF, Independent watchdog reset flag
: RCC_CSR_SFTRSTF? ( -- 1|0 ) 28 bit RCC_CSR bit@ ; \ RCC_CSR_SFTRSTF, Software reset flag
: RCC_CSR_PORRSTF? ( -- 1|0 ) 27 bit RCC_CSR bit@ ; \ RCC_CSR_PORRSTF, POR/PDR reset flag
: RCC_CSR_PADRSTF? ( -- 1|0 ) 26 bit RCC_CSR bit@ ; \ RCC_CSR_PADRSTF, PIN reset flag
: RCC_CSR_BORRSTF? ( -- 1|0 ) 25 bit RCC_CSR bit@ ; \ RCC_CSR_BORRSTF, BOR reset flag
: RCC_CSR_RMVF? ( -- 1|0 ) 24 bit RCC_CSR bit@ ; \ RCC_CSR_RMVF, Remove reset flag
: RCC_CSR_LSIRDY ( -- x addr ) 1 bit RCC_CSR ; \ RCC_CSR_LSIRDY, Internal low-speed oscillator ready
: RCC_CSR_LSION ( -- x addr ) 0 bit RCC_CSR ; \ RCC_CSR_LSION, Internal low-speed oscillator enable

\ RCC_SSCGR (read-write) Reset:0x00000000
: RCC_SSCGR_SSCGEN ( -- x addr ) 31 bit RCC_SSCGR ; \ RCC_SSCGR_SSCGEN, Spread spectrum modulation enable
: RCC_SSCGR_SPREADSEL ( -- x addr ) 30 bit RCC_SSCGR ; \ RCC_SSCGR_SPREADSEL, Spread Select
: RCC_SSCGR_INCSTEP ( %bbbbbbbbbbbbbbb -- x addr ) 13 lshift RCC_SSCGR ; \ RCC_SSCGR_INCSTEP, Incrementation step
: RCC_SSCGR_MODPER x addr ) RCC_SSCGR ; \ RCC_SSCGR_MODPER, Modulation period

\ RCC_PLLI2SCFGR (read-write) Reset:0x20003000
: RCC_PLLI2SCFGR_PLLI2SR ( %bbb -- x addr ) 28 lshift RCC_PLLI2SCFGR ; \ RCC_PLLI2SCFGR_PLLI2SR, PLLI2S division factor for I2S clocks
: RCC_PLLI2SCFGR_PLLI2SQ ( %bbbb -- x addr ) 24 lshift RCC_PLLI2SCFGR ; \ RCC_PLLI2SCFGR_PLLI2SQ, PLLI2S division factor for SAI1 clock
: RCC_PLLI2SCFGR_PLLI2SN ( %bbbbbbbbb -- x addr ) 6 lshift RCC_PLLI2SCFGR ; \ RCC_PLLI2SCFGR_PLLI2SN, PLLI2S multiplication factor for VCO

\ RCC_PLLSAICFGR (read-write) Reset:0x20003000
: RCC_PLLSAICFGR_PLLSAIN ( %bbbbbbbbb -- x addr ) 6 lshift RCC_PLLSAICFGR ; \ RCC_PLLSAICFGR_PLLSAIN, PLLSAI division factor for VCO
: RCC_PLLSAICFGR_PLLSAIP ( %bb -- x addr ) 16 lshift RCC_PLLSAICFGR ; \ RCC_PLLSAICFGR_PLLSAIP, PLLSAI division factor for 48MHz clock
: RCC_PLLSAICFGR_PLLSAIQ ( %bbbb -- x addr ) 24 lshift RCC_PLLSAICFGR ; \ RCC_PLLSAICFGR_PLLSAIQ, PLLSAI division factor for SAI clock
: RCC_PLLSAICFGR_PLLSAIR ( %bbb -- x addr ) 28 lshift RCC_PLLSAICFGR ; \ RCC_PLLSAICFGR_PLLSAIR, PLLSAI division factor for LCD clock

\ RCC_DKCFGR1 (read-write) Reset:0x20003000
: RCC_DKCFGR1_PLLI2SDIV ( %bbbbb -- x addr ) RCC_DKCFGR1 ; \ RCC_DKCFGR1_PLLI2SDIV, PLLI2S division factor for SAI1 clock
: RCC_DKCFGR1_PLLSAIDIVQ ( %bbbbb -- x addr ) 8 lshift RCC_DKCFGR1 ; \ RCC_DKCFGR1_PLLSAIDIVQ, PLLSAI division factor for SAI1 clock
: RCC_DKCFGR1_PLLSAIDIVR ( %bb -- x addr ) 16 lshift RCC_DKCFGR1 ; \ RCC_DKCFGR1_PLLSAIDIVR, division factor for LCD_CLK
: RCC_DKCFGR1_SAI1SEL ( %bb -- x addr ) 20 lshift RCC_DKCFGR1 ; \ RCC_DKCFGR1_SAI1SEL, SAI1 clock source selection
: RCC_DKCFGR1_SAI2SEL ( %bb -- x addr ) 22 lshift RCC_DKCFGR1 ; \ RCC_DKCFGR1_SAI2SEL, SAI2 clock source selection
: RCC_DKCFGR1_TIMPRE ( -- x addr ) 24 bit RCC_DKCFGR1 ; \ RCC_DKCFGR1_TIMPRE, Timers clocks prescalers selection

\ RCC_DKCFGR2 (read-write) Reset:0x20003000
: RCC_DKCFGR2_USART1SEL ( %bb -- x addr ) RCC_DKCFGR2 ; \ RCC_DKCFGR2_USART1SEL, USART 1 clock source selection
: RCC_DKCFGR2_USART2SEL ( %bb -- x addr ) 2 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_USART2SEL, USART 2 clock source selection
: RCC_DKCFGR2_USART3SEL ( %bb -- x addr ) 4 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_USART3SEL, USART 3 clock source selection
: RCC_DKCFGR2_UART4SEL ( %bb -- x addr ) 6 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_UART4SEL, UART 4 clock source selection
: RCC_DKCFGR2_UART5SEL ( %bb -- x addr ) 8 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_UART5SEL, UART 5 clock source selection
: RCC_DKCFGR2_USART6SEL ( %bb -- x addr ) 10 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_USART6SEL, USART 6 clock source selection
: RCC_DKCFGR2_UART7SEL ( %bb -- x addr ) 12 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_UART7SEL, UART 7 clock source selection
: RCC_DKCFGR2_UART8SEL ( %bb -- x addr ) 14 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_UART8SEL, UART 8 clock source selection
: RCC_DKCFGR2_I2C1SEL ( %bb -- x addr ) 16 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_I2C1SEL, I2C1 clock source selection
: RCC_DKCFGR2_I2C2SEL ( %bb -- x addr ) 18 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_I2C2SEL, I2C2 clock source selection
: RCC_DKCFGR2_I2C3SEL ( %bb -- x addr ) 20 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_I2C3SEL, I2C3 clock source selection
: RCC_DKCFGR2_I2C4SEL ( %bb -- x addr ) 22 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_I2C4SEL, I2C4 clock source selection
: RCC_DKCFGR2_LPTIM1SEL ( %bb -- x addr ) 24 lshift RCC_DKCFGR2 ; \ RCC_DKCFGR2_LPTIM1SEL, Low power timer 1 clock source selection
: RCC_DKCFGR2_CECSEL ( -- x addr ) 26 bit RCC_DKCFGR2 ; \ RCC_DKCFGR2_CECSEL, HDMI-CEC clock source selection
: RCC_DKCFGR2_CK48MSEL ( -- x addr ) 27 bit RCC_DKCFGR2 ; \ RCC_DKCFGR2_CK48MSEL, 48MHz clock source selection
: RCC_DKCFGR2_SDMMCSEL ( -- x addr ) 28 bit RCC_DKCFGR2 ; \ RCC_DKCFGR2_SDMMCSEL, SDMMC clock source selection

\ GPIOD_MODER (read-write) Reset:0x00000000
: GPIOD_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER15, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER14, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER13, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER12, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER11, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER10, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER9, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER8, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER7, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER6, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER5, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER4, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER3, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER2, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER1, Port x configuration bits y = 0..15
: GPIOD_MODER_MODER0 ( %bb -- x addr ) GPIOD_MODER ; \ GPIOD_MODER_MODER0, Port x configuration bits y = 0..15

\ GPIOD_OTYPER (read-write) Reset:0x00000000
: GPIOD_OTYPER_OT15 ( -- x addr ) 15 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT15, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT14 ( -- x addr ) 14 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT14, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT13 ( -- x addr ) 13 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT13, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT12 ( -- x addr ) 12 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT12, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT11 ( -- x addr ) 11 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT11, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT10 ( -- x addr ) 10 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT10, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT9 ( -- x addr ) 9 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT9, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT8 ( -- x addr ) 8 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT8, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT7 ( -- x addr ) 7 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT7, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT6 ( -- x addr ) 6 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT6, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT5 ( -- x addr ) 5 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT5, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT4 ( -- x addr ) 4 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT4, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT3 ( -- x addr ) 3 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT3, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT2 ( -- x addr ) 2 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT2, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT1 ( -- x addr ) 1 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT1, Port x configuration bits y = 0..15
: GPIOD_OTYPER_OT0 ( -- x addr ) 0 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT0, Port x configuration bits y = 0..15

\ GPIOD_GPIOB_OSPEEDR (read-write) Reset:0x00000000
: GPIOD_GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y = 0..15
: GPIOD_GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOD_GPIOB_OSPEEDR ; \ GPIOD_GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y = 0..15

\ GPIOD_PUPDR (read-write) Reset:0x00000000
: GPIOD_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR15, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR14, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR13, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR12, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR11, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR10, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR9, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR8, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR7, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR6, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR5, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR4, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR3, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR2, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR1, Port x configuration bits y = 0..15
: GPIOD_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR0, Port x configuration bits y = 0..15

\ GPIOD_IDR (read-only) Reset:0x00000000
: GPIOD_IDR_IDR15? ( --  1|0 ) 15 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR15, Port input data y = 0..15
: GPIOD_IDR_IDR14? ( --  1|0 ) 14 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR14, Port input data y = 0..15
: GPIOD_IDR_IDR13? ( --  1|0 ) 13 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR13, Port input data y = 0..15
: GPIOD_IDR_IDR12? ( --  1|0 ) 12 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR12, Port input data y = 0..15
: GPIOD_IDR_IDR11? ( --  1|0 ) 11 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR11, Port input data y = 0..15
: GPIOD_IDR_IDR10? ( --  1|0 ) 10 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR10, Port input data y = 0..15
: GPIOD_IDR_IDR9? ( --  1|0 ) 9 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR9, Port input data y = 0..15
: GPIOD_IDR_IDR8? ( --  1|0 ) 8 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR8, Port input data y = 0..15
: GPIOD_IDR_IDR7? ( --  1|0 ) 7 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR7, Port input data y = 0..15
: GPIOD_IDR_IDR6? ( --  1|0 ) 6 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR6, Port input data y = 0..15
: GPIOD_IDR_IDR5? ( --  1|0 ) 5 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR5, Port input data y = 0..15
: GPIOD_IDR_IDR4? ( --  1|0 ) 4 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR4, Port input data y = 0..15
: GPIOD_IDR_IDR3? ( --  1|0 ) 3 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR3, Port input data y = 0..15
: GPIOD_IDR_IDR2? ( --  1|0 ) 2 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR2, Port input data y = 0..15
: GPIOD_IDR_IDR1? ( --  1|0 ) 1 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR1, Port input data y = 0..15
: GPIOD_IDR_IDR0? ( --  1|0 ) 0 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR0, Port input data y = 0..15

\ GPIOD_ODR (read-write) Reset:0x00000000
: GPIOD_ODR_ODR15 ( -- x addr ) 15 bit GPIOD_ODR ; \ GPIOD_ODR_ODR15, Port output data y = 0..15
: GPIOD_ODR_ODR14 ( -- x addr ) 14 bit GPIOD_ODR ; \ GPIOD_ODR_ODR14, Port output data y = 0..15
: GPIOD_ODR_ODR13 ( -- x addr ) 13 bit GPIOD_ODR ; \ GPIOD_ODR_ODR13, Port output data y = 0..15
: GPIOD_ODR_ODR12 ( -- x addr ) 12 bit GPIOD_ODR ; \ GPIOD_ODR_ODR12, Port output data y = 0..15
: GPIOD_ODR_ODR11 ( -- x addr ) 11 bit GPIOD_ODR ; \ GPIOD_ODR_ODR11, Port output data y = 0..15
: GPIOD_ODR_ODR10 ( -- x addr ) 10 bit GPIOD_ODR ; \ GPIOD_ODR_ODR10, Port output data y = 0..15
: GPIOD_ODR_ODR9 ( -- x addr ) 9 bit GPIOD_ODR ; \ GPIOD_ODR_ODR9, Port output data y = 0..15
: GPIOD_ODR_ODR8 ( -- x addr ) 8 bit GPIOD_ODR ; \ GPIOD_ODR_ODR8, Port output data y = 0..15
: GPIOD_ODR_ODR7 ( -- x addr ) 7 bit GPIOD_ODR ; \ GPIOD_ODR_ODR7, Port output data y = 0..15
: GPIOD_ODR_ODR6 ( -- x addr ) 6 bit GPIOD_ODR ; \ GPIOD_ODR_ODR6, Port output data y = 0..15
: GPIOD_ODR_ODR5 ( -- x addr ) 5 bit GPIOD_ODR ; \ GPIOD_ODR_ODR5, Port output data y = 0..15
: GPIOD_ODR_ODR4 ( -- x addr ) 4 bit GPIOD_ODR ; \ GPIOD_ODR_ODR4, Port output data y = 0..15
: GPIOD_ODR_ODR3 ( -- x addr ) 3 bit GPIOD_ODR ; \ GPIOD_ODR_ODR3, Port output data y = 0..15
: GPIOD_ODR_ODR2 ( -- x addr ) 2 bit GPIOD_ODR ; \ GPIOD_ODR_ODR2, Port output data y = 0..15
: GPIOD_ODR_ODR1 ( -- x addr ) 1 bit GPIOD_ODR ; \ GPIOD_ODR_ODR1, Port output data y = 0..15
: GPIOD_ODR_ODR0 ( -- x addr ) 0 bit GPIOD_ODR ; \ GPIOD_ODR_ODR0, Port output data y = 0..15

\ GPIOD_BSRR (write-only) Reset:0x00000000
: GPIOD_BSRR_BR15 ( -- ) 31 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR15, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR14 ( -- ) 30 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR14, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR13 ( -- ) 29 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR13, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR12 ( -- ) 28 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR12, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR11 ( -- ) 27 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR11, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR10 ( -- ) 26 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR10, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR9 ( -- ) 25 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR9, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR8 ( -- ) 24 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR8, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR7 ( -- ) 23 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR7, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR6 ( -- ) 22 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR6, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR5 ( -- ) 21 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR5, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR4 ( -- ) 20 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR4, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR3 ( -- ) 19 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR3, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR2 ( -- ) 18 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR2, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR1 ( -- ) 17 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR1, Port x reset bit y y = 0..15
: GPIOD_BSRR_BR0 ( -- ) 16 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR0, Port x set bit y y= 0..15
: GPIOD_BSRR_BS15 ( -- ) 15 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS15, Port x set bit y y= 0..15
: GPIOD_BSRR_BS14 ( -- ) 14 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS14, Port x set bit y y= 0..15
: GPIOD_BSRR_BS13 ( -- ) 13 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS13, Port x set bit y y= 0..15
: GPIOD_BSRR_BS12 ( -- ) 12 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS12, Port x set bit y y= 0..15
: GPIOD_BSRR_BS11 ( -- ) 11 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS11, Port x set bit y y= 0..15
: GPIOD_BSRR_BS10 ( -- ) 10 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS10, Port x set bit y y= 0..15
: GPIOD_BSRR_BS9 ( -- ) 9 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS9, Port x set bit y y= 0..15
: GPIOD_BSRR_BS8 ( -- ) 8 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS8, Port x set bit y y= 0..15
: GPIOD_BSRR_BS7 ( -- ) 7 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS7, Port x set bit y y= 0..15
: GPIOD_BSRR_BS6 ( -- ) 6 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS6, Port x set bit y y= 0..15
: GPIOD_BSRR_BS5 ( -- ) 5 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS5, Port x set bit y y= 0..15
: GPIOD_BSRR_BS4 ( -- ) 4 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS4, Port x set bit y y= 0..15
: GPIOD_BSRR_BS3 ( -- ) 3 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS3, Port x set bit y y= 0..15
: GPIOD_BSRR_BS2 ( -- ) 2 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS2, Port x set bit y y= 0..15
: GPIOD_BSRR_BS1 ( -- ) 1 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS1, Port x set bit y y= 0..15
: GPIOD_BSRR_BS0 ( -- ) 0 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS0, Port x set bit y y= 0..15

\ GPIOD_LCKR (read-write) Reset:0x00000000
: GPIOD_LCKR_LCKK ( -- x addr ) 16 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCKK, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK15 ( -- x addr ) 15 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK15, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK14 ( -- x addr ) 14 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK14, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK13 ( -- x addr ) 13 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK13, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK12 ( -- x addr ) 12 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK12, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK11 ( -- x addr ) 11 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK11, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK10 ( -- x addr ) 10 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK10, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK9 ( -- x addr ) 9 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK9, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK8 ( -- x addr ) 8 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK8, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK7 ( -- x addr ) 7 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK7, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK6 ( -- x addr ) 6 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK6, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK5 ( -- x addr ) 5 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK5, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK4 ( -- x addr ) 4 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK4, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK3 ( -- x addr ) 3 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK3, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK2 ( -- x addr ) 2 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK2, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK1 ( -- x addr ) 1 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK1, Port x lock bit y y= 0..15
: GPIOD_LCKR_LCK0 ( -- x addr ) 0 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK0, Port x lock bit y y= 0..15

\ GPIOD_AFRL (read-write) Reset:0x00000000
: GPIOD_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL7, Alternate function selection for port x bit y y = 0..7
: GPIOD_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL6, Alternate function selection for port x bit y y = 0..7
: GPIOD_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL5, Alternate function selection for port x bit y y = 0..7
: GPIOD_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL4, Alternate function selection for port x bit y y = 0..7
: GPIOD_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL3, Alternate function selection for port x bit y y = 0..7
: GPIOD_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL2, Alternate function selection for port x bit y y = 0..7
: GPIOD_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL1, Alternate function selection for port x bit y y = 0..7
: GPIOD_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOD_AFRL ; \ GPIOD_AFRL_AFRL0, Alternate function selection for port x bit y y = 0..7

\ GPIOD_AFRH (read-write) Reset:0x00000000
: GPIOD_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH15, Alternate function selection for port x bit y y = 8..15
: GPIOD_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH14, Alternate function selection for port x bit y y = 8..15
: GPIOD_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH13, Alternate function selection for port x bit y y = 8..15
: GPIOD_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH12, Alternate function selection for port x bit y y = 8..15
: GPIOD_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH11, Alternate function selection for port x bit y y = 8..15
: GPIOD_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH10, Alternate function selection for port x bit y y = 8..15
: GPIOD_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH9, Alternate function selection for port x bit y y = 8..15
: GPIOD_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOD_AFRH ; \ GPIOD_AFRH_AFRH8, Alternate function selection for port x bit y y = 8..15

\ GPIOD_BRR (read-write) Reset:0x00000000
: GPIOD_BRR_BR0 ( -- x addr ) 0 bit GPIOD_BRR ; \ GPIOD_BRR_BR0, Port D Reset bit 0
: GPIOD_BRR_BR1 ( -- x addr ) 1 bit GPIOD_BRR ; \ GPIOD_BRR_BR1, Port D Reset bit 1
: GPIOD_BRR_BR2 ( -- x addr ) 2 bit GPIOD_BRR ; \ GPIOD_BRR_BR2, Port D Reset bit 2
: GPIOD_BRR_BR3 ( -- x addr ) 3 bit GPIOD_BRR ; \ GPIOD_BRR_BR3, Port D Reset bit 3
: GPIOD_BRR_BR4 ( -- x addr ) 4 bit GPIOD_BRR ; \ GPIOD_BRR_BR4, Port D Reset bit 4
: GPIOD_BRR_BR5 ( -- x addr ) 5 bit GPIOD_BRR ; \ GPIOD_BRR_BR5, Port D Reset bit 5
: GPIOD_BRR_BR6 ( -- x addr ) 6 bit GPIOD_BRR ; \ GPIOD_BRR_BR6, Port D Reset bit 6
: GPIOD_BRR_BR7 ( -- x addr ) 7 bit GPIOD_BRR ; \ GPIOD_BRR_BR7, Port D Reset bit 7
: GPIOD_BRR_BR8 ( -- x addr ) 8 bit GPIOD_BRR ; \ GPIOD_BRR_BR8, Port D Reset bit 8
: GPIOD_BRR_BR9 ( -- x addr ) 9 bit GPIOD_BRR ; \ GPIOD_BRR_BR9, Port D Reset bit 9
: GPIOD_BRR_BR10 ( -- x addr ) 10 bit GPIOD_BRR ; \ GPIOD_BRR_BR10, Port D Reset bit 10
: GPIOD_BRR_BR11 ( -- x addr ) 11 bit GPIOD_BRR ; \ GPIOD_BRR_BR11, Port D Reset bit 11
: GPIOD_BRR_BR12 ( -- x addr ) 12 bit GPIOD_BRR ; \ GPIOD_BRR_BR12, Port D Reset bit 12
: GPIOD_BRR_BR13 ( -- x addr ) 13 bit GPIOD_BRR ; \ GPIOD_BRR_BR13, Port D Reset bit 13
: GPIOD_BRR_BR14 ( -- x addr ) 14 bit GPIOD_BRR ; \ GPIOD_BRR_BR14, Port D Reset bit 14
: GPIOD_BRR_BR15 ( -- x addr ) 15 bit GPIOD_BRR ; \ GPIOD_BRR_BR15, Port D Reset bit 15

\ GPIOC_MODER (read-write) Reset:0x00000000
: GPIOC_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER15, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER14, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER13, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER12, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER11, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER10, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER9, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER8, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER7, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER6, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER5, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER4, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER3, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER2, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER1, Port x configuration bits y = 0..15
: GPIOC_MODER_MODER0 ( %bb -- x addr ) GPIOC_MODER ; \ GPIOC_MODER_MODER0, Port x configuration bits y = 0..15

\ GPIOC_OTYPER (read-write) Reset:0x00000000
: GPIOC_OTYPER_OT15 ( -- x addr ) 15 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT15, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT14 ( -- x addr ) 14 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT14, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT13 ( -- x addr ) 13 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT13, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT12 ( -- x addr ) 12 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT12, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT11 ( -- x addr ) 11 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT11, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT10 ( -- x addr ) 10 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT10, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT9 ( -- x addr ) 9 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT9, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT8 ( -- x addr ) 8 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT8, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT7 ( -- x addr ) 7 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT7, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT6 ( -- x addr ) 6 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT6, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT5 ( -- x addr ) 5 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT5, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT4 ( -- x addr ) 4 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT4, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT3 ( -- x addr ) 3 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT3, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT2 ( -- x addr ) 2 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT2, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT1 ( -- x addr ) 1 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT1, Port x configuration bits y = 0..15
: GPIOC_OTYPER_OT0 ( -- x addr ) 0 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT0, Port x configuration bits y = 0..15

\ GPIOC_GPIOB_OSPEEDR (read-write) Reset:0x00000000
: GPIOC_GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y = 0..15
: GPIOC_GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOC_GPIOB_OSPEEDR ; \ GPIOC_GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y = 0..15

\ GPIOC_PUPDR (read-write) Reset:0x00000000
: GPIOC_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR15, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR14, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR13, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR12, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR11, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR10, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR9, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR8, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR7, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR6, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR5, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR4, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR3, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR2, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR1, Port x configuration bits y = 0..15
: GPIOC_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR0, Port x configuration bits y = 0..15

\ GPIOC_IDR (read-only) Reset:0x00000000
: GPIOC_IDR_IDR15? ( --  1|0 ) 15 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR15, Port input data y = 0..15
: GPIOC_IDR_IDR14? ( --  1|0 ) 14 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR14, Port input data y = 0..15
: GPIOC_IDR_IDR13? ( --  1|0 ) 13 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR13, Port input data y = 0..15
: GPIOC_IDR_IDR12? ( --  1|0 ) 12 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR12, Port input data y = 0..15
: GPIOC_IDR_IDR11? ( --  1|0 ) 11 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR11, Port input data y = 0..15
: GPIOC_IDR_IDR10? ( --  1|0 ) 10 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR10, Port input data y = 0..15
: GPIOC_IDR_IDR9? ( --  1|0 ) 9 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR9, Port input data y = 0..15
: GPIOC_IDR_IDR8? ( --  1|0 ) 8 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR8, Port input data y = 0..15
: GPIOC_IDR_IDR7? ( --  1|0 ) 7 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR7, Port input data y = 0..15
: GPIOC_IDR_IDR6? ( --  1|0 ) 6 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR6, Port input data y = 0..15
: GPIOC_IDR_IDR5? ( --  1|0 ) 5 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR5, Port input data y = 0..15
: GPIOC_IDR_IDR4? ( --  1|0 ) 4 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR4, Port input data y = 0..15
: GPIOC_IDR_IDR3? ( --  1|0 ) 3 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR3, Port input data y = 0..15
: GPIOC_IDR_IDR2? ( --  1|0 ) 2 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR2, Port input data y = 0..15
: GPIOC_IDR_IDR1? ( --  1|0 ) 1 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR1, Port input data y = 0..15
: GPIOC_IDR_IDR0? ( --  1|0 ) 0 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR0, Port input data y = 0..15

\ GPIOC_ODR (read-write) Reset:0x00000000
: GPIOC_ODR_ODR15 ( -- x addr ) 15 bit GPIOC_ODR ; \ GPIOC_ODR_ODR15, Port output data y = 0..15
: GPIOC_ODR_ODR14 ( -- x addr ) 14 bit GPIOC_ODR ; \ GPIOC_ODR_ODR14, Port output data y = 0..15
: GPIOC_ODR_ODR13 ( -- x addr ) 13 bit GPIOC_ODR ; \ GPIOC_ODR_ODR13, Port output data y = 0..15
: GPIOC_ODR_ODR12 ( -- x addr ) 12 bit GPIOC_ODR ; \ GPIOC_ODR_ODR12, Port output data y = 0..15
: GPIOC_ODR_ODR11 ( -- x addr ) 11 bit GPIOC_ODR ; \ GPIOC_ODR_ODR11, Port output data y = 0..15
: GPIOC_ODR_ODR10 ( -- x addr ) 10 bit GPIOC_ODR ; \ GPIOC_ODR_ODR10, Port output data y = 0..15
: GPIOC_ODR_ODR9 ( -- x addr ) 9 bit GPIOC_ODR ; \ GPIOC_ODR_ODR9, Port output data y = 0..15
: GPIOC_ODR_ODR8 ( -- x addr ) 8 bit GPIOC_ODR ; \ GPIOC_ODR_ODR8, Port output data y = 0..15
: GPIOC_ODR_ODR7 ( -- x addr ) 7 bit GPIOC_ODR ; \ GPIOC_ODR_ODR7, Port output data y = 0..15
: GPIOC_ODR_ODR6 ( -- x addr ) 6 bit GPIOC_ODR ; \ GPIOC_ODR_ODR6, Port output data y = 0..15
: GPIOC_ODR_ODR5 ( -- x addr ) 5 bit GPIOC_ODR ; \ GPIOC_ODR_ODR5, Port output data y = 0..15
: GPIOC_ODR_ODR4 ( -- x addr ) 4 bit GPIOC_ODR ; \ GPIOC_ODR_ODR4, Port output data y = 0..15
: GPIOC_ODR_ODR3 ( -- x addr ) 3 bit GPIOC_ODR ; \ GPIOC_ODR_ODR3, Port output data y = 0..15
: GPIOC_ODR_ODR2 ( -- x addr ) 2 bit GPIOC_ODR ; \ GPIOC_ODR_ODR2, Port output data y = 0..15
: GPIOC_ODR_ODR1 ( -- x addr ) 1 bit GPIOC_ODR ; \ GPIOC_ODR_ODR1, Port output data y = 0..15
: GPIOC_ODR_ODR0 ( -- x addr ) 0 bit GPIOC_ODR ; \ GPIOC_ODR_ODR0, Port output data y = 0..15

\ GPIOC_BSRR (write-only) Reset:0x00000000
: GPIOC_BSRR_BR15 ( -- ) 31 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR15, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR14 ( -- ) 30 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR14, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR13 ( -- ) 29 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR13, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR12 ( -- ) 28 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR12, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR11 ( -- ) 27 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR11, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR10 ( -- ) 26 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR10, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR9 ( -- ) 25 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR9, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR8 ( -- ) 24 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR8, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR7 ( -- ) 23 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR7, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR6 ( -- ) 22 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR6, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR5 ( -- ) 21 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR5, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR4 ( -- ) 20 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR4, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR3 ( -- ) 19 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR3, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR2 ( -- ) 18 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR2, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR1 ( -- ) 17 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR1, Port x reset bit y y = 0..15
: GPIOC_BSRR_BR0 ( -- ) 16 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR0, Port x set bit y y= 0..15
: GPIOC_BSRR_BS15 ( -- ) 15 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS15, Port x set bit y y= 0..15
: GPIOC_BSRR_BS14 ( -- ) 14 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS14, Port x set bit y y= 0..15
: GPIOC_BSRR_BS13 ( -- ) 13 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS13, Port x set bit y y= 0..15
: GPIOC_BSRR_BS12 ( -- ) 12 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS12, Port x set bit y y= 0..15
: GPIOC_BSRR_BS11 ( -- ) 11 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS11, Port x set bit y y= 0..15
: GPIOC_BSRR_BS10 ( -- ) 10 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS10, Port x set bit y y= 0..15
: GPIOC_BSRR_BS9 ( -- ) 9 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS9, Port x set bit y y= 0..15
: GPIOC_BSRR_BS8 ( -- ) 8 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS8, Port x set bit y y= 0..15
: GPIOC_BSRR_BS7 ( -- ) 7 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS7, Port x set bit y y= 0..15
: GPIOC_BSRR_BS6 ( -- ) 6 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS6, Port x set bit y y= 0..15
: GPIOC_BSRR_BS5 ( -- ) 5 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS5, Port x set bit y y= 0..15
: GPIOC_BSRR_BS4 ( -- ) 4 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS4, Port x set bit y y= 0..15
: GPIOC_BSRR_BS3 ( -- ) 3 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS3, Port x set bit y y= 0..15
: GPIOC_BSRR_BS2 ( -- ) 2 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS2, Port x set bit y y= 0..15
: GPIOC_BSRR_BS1 ( -- ) 1 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS1, Port x set bit y y= 0..15
: GPIOC_BSRR_BS0 ( -- ) 0 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS0, Port x set bit y y= 0..15

\ GPIOC_LCKR (read-write) Reset:0x00000000
: GPIOC_LCKR_LCKK ( -- x addr ) 16 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCKK, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK15 ( -- x addr ) 15 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK15, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK14 ( -- x addr ) 14 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK14, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK13 ( -- x addr ) 13 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK13, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK12 ( -- x addr ) 12 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK12, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK11 ( -- x addr ) 11 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK11, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK10 ( -- x addr ) 10 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK10, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK9 ( -- x addr ) 9 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK9, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK8 ( -- x addr ) 8 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK8, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK7 ( -- x addr ) 7 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK7, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK6 ( -- x addr ) 6 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK6, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK5 ( -- x addr ) 5 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK5, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK4 ( -- x addr ) 4 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK4, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK3 ( -- x addr ) 3 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK3, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK2 ( -- x addr ) 2 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK2, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK1 ( -- x addr ) 1 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK1, Port x lock bit y y= 0..15
: GPIOC_LCKR_LCK0 ( -- x addr ) 0 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK0, Port x lock bit y y= 0..15

\ GPIOC_AFRL (read-write) Reset:0x00000000
: GPIOC_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL7, Alternate function selection for port x bit y y = 0..7
: GPIOC_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL6, Alternate function selection for port x bit y y = 0..7
: GPIOC_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL5, Alternate function selection for port x bit y y = 0..7
: GPIOC_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL4, Alternate function selection for port x bit y y = 0..7
: GPIOC_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL3, Alternate function selection for port x bit y y = 0..7
: GPIOC_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL2, Alternate function selection for port x bit y y = 0..7
: GPIOC_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL1, Alternate function selection for port x bit y y = 0..7
: GPIOC_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOC_AFRL ; \ GPIOC_AFRL_AFRL0, Alternate function selection for port x bit y y = 0..7

\ GPIOC_AFRH (read-write) Reset:0x00000000
: GPIOC_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH15, Alternate function selection for port x bit y y = 8..15
: GPIOC_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH14, Alternate function selection for port x bit y y = 8..15
: GPIOC_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH13, Alternate function selection for port x bit y y = 8..15
: GPIOC_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH12, Alternate function selection for port x bit y y = 8..15
: GPIOC_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH11, Alternate function selection for port x bit y y = 8..15
: GPIOC_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH10, Alternate function selection for port x bit y y = 8..15
: GPIOC_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH9, Alternate function selection for port x bit y y = 8..15
: GPIOC_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOC_AFRH ; \ GPIOC_AFRH_AFRH8, Alternate function selection for port x bit y y = 8..15

\ GPIOC_BRR (read-write) Reset:0x00000000
: GPIOC_BRR_BR0 ( -- x addr ) 0 bit GPIOC_BRR ; \ GPIOC_BRR_BR0, Port D Reset bit 0
: GPIOC_BRR_BR1 ( -- x addr ) 1 bit GPIOC_BRR ; \ GPIOC_BRR_BR1, Port D Reset bit 1
: GPIOC_BRR_BR2 ( -- x addr ) 2 bit GPIOC_BRR ; \ GPIOC_BRR_BR2, Port D Reset bit 2
: GPIOC_BRR_BR3 ( -- x addr ) 3 bit GPIOC_BRR ; \ GPIOC_BRR_BR3, Port D Reset bit 3
: GPIOC_BRR_BR4 ( -- x addr ) 4 bit GPIOC_BRR ; \ GPIOC_BRR_BR4, Port D Reset bit 4
: GPIOC_BRR_BR5 ( -- x addr ) 5 bit GPIOC_BRR ; \ GPIOC_BRR_BR5, Port D Reset bit 5
: GPIOC_BRR_BR6 ( -- x addr ) 6 bit GPIOC_BRR ; \ GPIOC_BRR_BR6, Port D Reset bit 6
: GPIOC_BRR_BR7 ( -- x addr ) 7 bit GPIOC_BRR ; \ GPIOC_BRR_BR7, Port D Reset bit 7
: GPIOC_BRR_BR8 ( -- x addr ) 8 bit GPIOC_BRR ; \ GPIOC_BRR_BR8, Port D Reset bit 8
: GPIOC_BRR_BR9 ( -- x addr ) 9 bit GPIOC_BRR ; \ GPIOC_BRR_BR9, Port D Reset bit 9
: GPIOC_BRR_BR10 ( -- x addr ) 10 bit GPIOC_BRR ; \ GPIOC_BRR_BR10, Port D Reset bit 10
: GPIOC_BRR_BR11 ( -- x addr ) 11 bit GPIOC_BRR ; \ GPIOC_BRR_BR11, Port D Reset bit 11
: GPIOC_BRR_BR12 ( -- x addr ) 12 bit GPIOC_BRR ; \ GPIOC_BRR_BR12, Port D Reset bit 12
: GPIOC_BRR_BR13 ( -- x addr ) 13 bit GPIOC_BRR ; \ GPIOC_BRR_BR13, Port D Reset bit 13
: GPIOC_BRR_BR14 ( -- x addr ) 14 bit GPIOC_BRR ; \ GPIOC_BRR_BR14, Port D Reset bit 14
: GPIOC_BRR_BR15 ( -- x addr ) 15 bit GPIOC_BRR ; \ GPIOC_BRR_BR15, Port D Reset bit 15

\ GPIOK_MODER (read-write) Reset:0x00000000
: GPIOK_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER15, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER14, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER13, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER12, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER11, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER10, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER9, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER8, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER7, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER6, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER5, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER4, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER3, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER2, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOK_MODER ; \ GPIOK_MODER_MODER1, Port x configuration bits y = 0..15
: GPIOK_MODER_MODER0 ( %bb -- x addr ) GPIOK_MODER ; \ GPIOK_MODER_MODER0, Port x configuration bits y = 0..15

\ GPIOK_OTYPER (read-write) Reset:0x00000000
: GPIOK_OTYPER_OT15 ( -- x addr ) 15 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT15, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT14 ( -- x addr ) 14 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT14, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT13 ( -- x addr ) 13 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT13, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT12 ( -- x addr ) 12 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT12, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT11 ( -- x addr ) 11 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT11, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT10 ( -- x addr ) 10 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT10, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT9 ( -- x addr ) 9 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT9, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT8 ( -- x addr ) 8 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT8, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT7 ( -- x addr ) 7 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT7, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT6 ( -- x addr ) 6 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT6, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT5 ( -- x addr ) 5 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT5, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT4 ( -- x addr ) 4 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT4, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT3 ( -- x addr ) 3 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT3, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT2 ( -- x addr ) 2 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT2, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT1 ( -- x addr ) 1 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT1, Port x configuration bits y = 0..15
: GPIOK_OTYPER_OT0 ( -- x addr ) 0 bit GPIOK_OTYPER ; \ GPIOK_OTYPER_OT0, Port x configuration bits y = 0..15

\ GPIOK_GPIOB_OSPEEDR (read-write) Reset:0x00000000
: GPIOK_GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y = 0..15
: GPIOK_GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOK_GPIOB_OSPEEDR ; \ GPIOK_GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y = 0..15

\ GPIOK_PUPDR (read-write) Reset:0x00000000
: GPIOK_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR15, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR14, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR13, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR12, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR11, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR10, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR9, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR8, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR7, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR6, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR5, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR4, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR3, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR2, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR1, Port x configuration bits y = 0..15
: GPIOK_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOK_PUPDR ; \ GPIOK_PUPDR_PUPDR0, Port x configuration bits y = 0..15

\ GPIOK_IDR (read-only) Reset:0x00000000
: GPIOK_IDR_IDR15? ( --  1|0 ) 15 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR15, Port input data y = 0..15
: GPIOK_IDR_IDR14? ( --  1|0 ) 14 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR14, Port input data y = 0..15
: GPIOK_IDR_IDR13? ( --  1|0 ) 13 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR13, Port input data y = 0..15
: GPIOK_IDR_IDR12? ( --  1|0 ) 12 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR12, Port input data y = 0..15
: GPIOK_IDR_IDR11? ( --  1|0 ) 11 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR11, Port input data y = 0..15
: GPIOK_IDR_IDR10? ( --  1|0 ) 10 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR10, Port input data y = 0..15
: GPIOK_IDR_IDR9? ( --  1|0 ) 9 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR9, Port input data y = 0..15
: GPIOK_IDR_IDR8? ( --  1|0 ) 8 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR8, Port input data y = 0..15
: GPIOK_IDR_IDR7? ( --  1|0 ) 7 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR7, Port input data y = 0..15
: GPIOK_IDR_IDR6? ( --  1|0 ) 6 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR6, Port input data y = 0..15
: GPIOK_IDR_IDR5? ( --  1|0 ) 5 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR5, Port input data y = 0..15
: GPIOK_IDR_IDR4? ( --  1|0 ) 4 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR4, Port input data y = 0..15
: GPIOK_IDR_IDR3? ( --  1|0 ) 3 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR3, Port input data y = 0..15
: GPIOK_IDR_IDR2? ( --  1|0 ) 2 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR2, Port input data y = 0..15
: GPIOK_IDR_IDR1? ( --  1|0 ) 1 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR1, Port input data y = 0..15
: GPIOK_IDR_IDR0? ( --  1|0 ) 0 bit GPIOK_IDR bit@ ; \ GPIOK_IDR_IDR0, Port input data y = 0..15

\ GPIOK_ODR (read-write) Reset:0x00000000
: GPIOK_ODR_ODR15 ( -- x addr ) 15 bit GPIOK_ODR ; \ GPIOK_ODR_ODR15, Port output data y = 0..15
: GPIOK_ODR_ODR14 ( -- x addr ) 14 bit GPIOK_ODR ; \ GPIOK_ODR_ODR14, Port output data y = 0..15
: GPIOK_ODR_ODR13 ( -- x addr ) 13 bit GPIOK_ODR ; \ GPIOK_ODR_ODR13, Port output data y = 0..15
: GPIOK_ODR_ODR12 ( -- x addr ) 12 bit GPIOK_ODR ; \ GPIOK_ODR_ODR12, Port output data y = 0..15
: GPIOK_ODR_ODR11 ( -- x addr ) 11 bit GPIOK_ODR ; \ GPIOK_ODR_ODR11, Port output data y = 0..15
: GPIOK_ODR_ODR10 ( -- x addr ) 10 bit GPIOK_ODR ; \ GPIOK_ODR_ODR10, Port output data y = 0..15
: GPIOK_ODR_ODR9 ( -- x addr ) 9 bit GPIOK_ODR ; \ GPIOK_ODR_ODR9, Port output data y = 0..15
: GPIOK_ODR_ODR8 ( -- x addr ) 8 bit GPIOK_ODR ; \ GPIOK_ODR_ODR8, Port output data y = 0..15
: GPIOK_ODR_ODR7 ( -- x addr ) 7 bit GPIOK_ODR ; \ GPIOK_ODR_ODR7, Port output data y = 0..15
: GPIOK_ODR_ODR6 ( -- x addr ) 6 bit GPIOK_ODR ; \ GPIOK_ODR_ODR6, Port output data y = 0..15
: GPIOK_ODR_ODR5 ( -- x addr ) 5 bit GPIOK_ODR ; \ GPIOK_ODR_ODR5, Port output data y = 0..15
: GPIOK_ODR_ODR4 ( -- x addr ) 4 bit GPIOK_ODR ; \ GPIOK_ODR_ODR4, Port output data y = 0..15
: GPIOK_ODR_ODR3 ( -- x addr ) 3 bit GPIOK_ODR ; \ GPIOK_ODR_ODR3, Port output data y = 0..15
: GPIOK_ODR_ODR2 ( -- x addr ) 2 bit GPIOK_ODR ; \ GPIOK_ODR_ODR2, Port output data y = 0..15
: GPIOK_ODR_ODR1 ( -- x addr ) 1 bit GPIOK_ODR ; \ GPIOK_ODR_ODR1, Port output data y = 0..15
: GPIOK_ODR_ODR0 ( -- x addr ) 0 bit GPIOK_ODR ; \ GPIOK_ODR_ODR0, Port output data y = 0..15

\ GPIOK_BSRR (write-only) Reset:0x00000000
: GPIOK_BSRR_BR15 ( -- ) 31 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR15, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR14 ( -- ) 30 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR14, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR13 ( -- ) 29 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR13, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR12 ( -- ) 28 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR12, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR11 ( -- ) 27 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR11, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR10 ( -- ) 26 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR10, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR9 ( -- ) 25 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR9, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR8 ( -- ) 24 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR8, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR7 ( -- ) 23 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR7, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR6 ( -- ) 22 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR6, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR5 ( -- ) 21 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR5, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR4 ( -- ) 20 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR4, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR3 ( -- ) 19 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR3, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR2 ( -- ) 18 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR2, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR1 ( -- ) 17 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR1, Port x reset bit y y = 0..15
: GPIOK_BSRR_BR0 ( -- ) 16 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BR0, Port x set bit y y= 0..15
: GPIOK_BSRR_BS15 ( -- ) 15 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS15, Port x set bit y y= 0..15
: GPIOK_BSRR_BS14 ( -- ) 14 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS14, Port x set bit y y= 0..15
: GPIOK_BSRR_BS13 ( -- ) 13 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS13, Port x set bit y y= 0..15
: GPIOK_BSRR_BS12 ( -- ) 12 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS12, Port x set bit y y= 0..15
: GPIOK_BSRR_BS11 ( -- ) 11 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS11, Port x set bit y y= 0..15
: GPIOK_BSRR_BS10 ( -- ) 10 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS10, Port x set bit y y= 0..15
: GPIOK_BSRR_BS9 ( -- ) 9 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS9, Port x set bit y y= 0..15
: GPIOK_BSRR_BS8 ( -- ) 8 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS8, Port x set bit y y= 0..15
: GPIOK_BSRR_BS7 ( -- ) 7 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS7, Port x set bit y y= 0..15
: GPIOK_BSRR_BS6 ( -- ) 6 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS6, Port x set bit y y= 0..15
: GPIOK_BSRR_BS5 ( -- ) 5 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS5, Port x set bit y y= 0..15
: GPIOK_BSRR_BS4 ( -- ) 4 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS4, Port x set bit y y= 0..15
: GPIOK_BSRR_BS3 ( -- ) 3 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS3, Port x set bit y y= 0..15
: GPIOK_BSRR_BS2 ( -- ) 2 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS2, Port x set bit y y= 0..15
: GPIOK_BSRR_BS1 ( -- ) 1 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS1, Port x set bit y y= 0..15
: GPIOK_BSRR_BS0 ( -- ) 0 bit GPIOK_BSRR ! ; \ GPIOK_BSRR_BS0, Port x set bit y y= 0..15

\ GPIOK_LCKR (read-write) Reset:0x00000000
: GPIOK_LCKR_LCKK ( -- x addr ) 16 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCKK, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK15 ( -- x addr ) 15 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK15, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK14 ( -- x addr ) 14 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK14, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK13 ( -- x addr ) 13 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK13, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK12 ( -- x addr ) 12 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK12, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK11 ( -- x addr ) 11 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK11, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK10 ( -- x addr ) 10 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK10, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK9 ( -- x addr ) 9 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK9, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK8 ( -- x addr ) 8 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK8, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK7 ( -- x addr ) 7 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK7, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK6 ( -- x addr ) 6 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK6, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK5 ( -- x addr ) 5 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK5, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK4 ( -- x addr ) 4 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK4, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK3 ( -- x addr ) 3 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK3, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK2 ( -- x addr ) 2 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK2, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK1 ( -- x addr ) 1 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK1, Port x lock bit y y= 0..15
: GPIOK_LCKR_LCK0 ( -- x addr ) 0 bit GPIOK_LCKR ; \ GPIOK_LCKR_LCK0, Port x lock bit y y= 0..15

\ GPIOK_AFRL (read-write) Reset:0x00000000
: GPIOK_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOK_AFRL ; \ GPIOK_AFRL_AFRL7, Alternate function selection for port x bit y y = 0..7
: GPIOK_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOK_AFRL ; \ GPIOK_AFRL_AFRL6, Alternate function selection for port x bit y y = 0..7
: GPIOK_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOK_AFRL ; \ GPIOK_AFRL_AFRL5, Alternate function selection for port x bit y y = 0..7
: GPIOK_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOK_AFRL ; \ GPIOK_AFRL_AFRL4, Alternate function selection for port x bit y y = 0..7
: GPIOK_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOK_AFRL ; \ GPIOK_AFRL_AFRL3, Alternate function selection for port x bit y y = 0..7
: GPIOK_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOK_AFRL ; \ GPIOK_AFRL_AFRL2, Alternate function selection for port x bit y y = 0..7
: GPIOK_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOK_AFRL ; \ GPIOK_AFRL_AFRL1, Alternate function selection for port x bit y y = 0..7
: GPIOK_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOK_AFRL ; \ GPIOK_AFRL_AFRL0, Alternate function selection for port x bit y y = 0..7

\ GPIOK_AFRH (read-write) Reset:0x00000000
: GPIOK_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOK_AFRH ; \ GPIOK_AFRH_AFRH15, Alternate function selection for port x bit y y = 8..15
: GPIOK_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOK_AFRH ; \ GPIOK_AFRH_AFRH14, Alternate function selection for port x bit y y = 8..15
: GPIOK_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOK_AFRH ; \ GPIOK_AFRH_AFRH13, Alternate function selection for port x bit y y = 8..15
: GPIOK_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOK_AFRH ; \ GPIOK_AFRH_AFRH12, Alternate function selection for port x bit y y = 8..15
: GPIOK_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOK_AFRH ; \ GPIOK_AFRH_AFRH11, Alternate function selection for port x bit y y = 8..15
: GPIOK_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOK_AFRH ; \ GPIOK_AFRH_AFRH10, Alternate function selection for port x bit y y = 8..15
: GPIOK_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOK_AFRH ; \ GPIOK_AFRH_AFRH9, Alternate function selection for port x bit y y = 8..15
: GPIOK_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOK_AFRH ; \ GPIOK_AFRH_AFRH8, Alternate function selection for port x bit y y = 8..15

\ GPIOK_BRR (read-write) Reset:0x00000000
: GPIOK_BRR_BR0 ( -- x addr ) 0 bit GPIOK_BRR ; \ GPIOK_BRR_BR0, Port D Reset bit 0
: GPIOK_BRR_BR1 ( -- x addr ) 1 bit GPIOK_BRR ; \ GPIOK_BRR_BR1, Port D Reset bit 1
: GPIOK_BRR_BR2 ( -- x addr ) 2 bit GPIOK_BRR ; \ GPIOK_BRR_BR2, Port D Reset bit 2
: GPIOK_BRR_BR3 ( -- x addr ) 3 bit GPIOK_BRR ; \ GPIOK_BRR_BR3, Port D Reset bit 3
: GPIOK_BRR_BR4 ( -- x addr ) 4 bit GPIOK_BRR ; \ GPIOK_BRR_BR4, Port D Reset bit 4
: GPIOK_BRR_BR5 ( -- x addr ) 5 bit GPIOK_BRR ; \ GPIOK_BRR_BR5, Port D Reset bit 5
: GPIOK_BRR_BR6 ( -- x addr ) 6 bit GPIOK_BRR ; \ GPIOK_BRR_BR6, Port D Reset bit 6
: GPIOK_BRR_BR7 ( -- x addr ) 7 bit GPIOK_BRR ; \ GPIOK_BRR_BR7, Port D Reset bit 7
: GPIOK_BRR_BR8 ( -- x addr ) 8 bit GPIOK_BRR ; \ GPIOK_BRR_BR8, Port D Reset bit 8
: GPIOK_BRR_BR9 ( -- x addr ) 9 bit GPIOK_BRR ; \ GPIOK_BRR_BR9, Port D Reset bit 9
: GPIOK_BRR_BR10 ( -- x addr ) 10 bit GPIOK_BRR ; \ GPIOK_BRR_BR10, Port D Reset bit 10
: GPIOK_BRR_BR11 ( -- x addr ) 11 bit GPIOK_BRR ; \ GPIOK_BRR_BR11, Port D Reset bit 11
: GPIOK_BRR_BR12 ( -- x addr ) 12 bit GPIOK_BRR ; \ GPIOK_BRR_BR12, Port D Reset bit 12
: GPIOK_BRR_BR13 ( -- x addr ) 13 bit GPIOK_BRR ; \ GPIOK_BRR_BR13, Port D Reset bit 13
: GPIOK_BRR_BR14 ( -- x addr ) 14 bit GPIOK_BRR ; \ GPIOK_BRR_BR14, Port D Reset bit 14
: GPIOK_BRR_BR15 ( -- x addr ) 15 bit GPIOK_BRR ; \ GPIOK_BRR_BR15, Port D Reset bit 15

\ GPIOJ_MODER (read-write) Reset:0x00000000
: GPIOJ_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER15, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER14, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER13, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER12, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER11, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER10, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER9, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER8, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER7, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER6, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER5, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER4, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER3, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER2, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOJ_MODER ; \ GPIOJ_MODER_MODER1, Port x configuration bits y = 0..15
: GPIOJ_MODER_MODER0 ( %bb -- x addr ) GPIOJ_MODER ; \ GPIOJ_MODER_MODER0, Port x configuration bits y = 0..15

\ GPIOJ_OTYPER (read-write) Reset:0x00000000
: GPIOJ_OTYPER_OT15 ( -- x addr ) 15 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT15, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT14 ( -- x addr ) 14 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT14, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT13 ( -- x addr ) 13 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT13, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT12 ( -- x addr ) 12 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT12, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT11 ( -- x addr ) 11 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT11, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT10 ( -- x addr ) 10 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT10, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT9 ( -- x addr ) 9 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT9, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT8 ( -- x addr ) 8 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT8, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT7 ( -- x addr ) 7 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT7, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT6 ( -- x addr ) 6 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT6, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT5 ( -- x addr ) 5 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT5, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT4 ( -- x addr ) 4 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT4, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT3 ( -- x addr ) 3 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT3, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT2 ( -- x addr ) 2 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT2, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT1 ( -- x addr ) 1 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT1, Port x configuration bits y = 0..15
: GPIOJ_OTYPER_OT0 ( -- x addr ) 0 bit GPIOJ_OTYPER ; \ GPIOJ_OTYPER_OT0, Port x configuration bits y = 0..15

\ GPIOJ_GPIOB_OSPEEDR (read-write) Reset:0x00000000
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y = 0..15
: GPIOJ_GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOJ_GPIOB_OSPEEDR ; \ GPIOJ_GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y = 0..15

\ GPIOJ_PUPDR (read-write) Reset:0x00000000
: GPIOJ_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR15, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR14, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR13, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR12, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR11, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR10, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR9, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR8, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR7, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR6, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR5, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR4, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR3, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR2, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR1, Port x configuration bits y = 0..15
: GPIOJ_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOJ_PUPDR ; \ GPIOJ_PUPDR_PUPDR0, Port x configuration bits y = 0..15

\ GPIOJ_IDR (read-only) Reset:0x00000000
: GPIOJ_IDR_IDR15? ( --  1|0 ) 15 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR15, Port input data y = 0..15
: GPIOJ_IDR_IDR14? ( --  1|0 ) 14 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR14, Port input data y = 0..15
: GPIOJ_IDR_IDR13? ( --  1|0 ) 13 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR13, Port input data y = 0..15
: GPIOJ_IDR_IDR12? ( --  1|0 ) 12 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR12, Port input data y = 0..15
: GPIOJ_IDR_IDR11? ( --  1|0 ) 11 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR11, Port input data y = 0..15
: GPIOJ_IDR_IDR10? ( --  1|0 ) 10 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR10, Port input data y = 0..15
: GPIOJ_IDR_IDR9? ( --  1|0 ) 9 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR9, Port input data y = 0..15
: GPIOJ_IDR_IDR8? ( --  1|0 ) 8 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR8, Port input data y = 0..15
: GPIOJ_IDR_IDR7? ( --  1|0 ) 7 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR7, Port input data y = 0..15
: GPIOJ_IDR_IDR6? ( --  1|0 ) 6 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR6, Port input data y = 0..15
: GPIOJ_IDR_IDR5? ( --  1|0 ) 5 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR5, Port input data y = 0..15
: GPIOJ_IDR_IDR4? ( --  1|0 ) 4 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR4, Port input data y = 0..15
: GPIOJ_IDR_IDR3? ( --  1|0 ) 3 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR3, Port input data y = 0..15
: GPIOJ_IDR_IDR2? ( --  1|0 ) 2 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR2, Port input data y = 0..15
: GPIOJ_IDR_IDR1? ( --  1|0 ) 1 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR1, Port input data y = 0..15
: GPIOJ_IDR_IDR0? ( --  1|0 ) 0 bit GPIOJ_IDR bit@ ; \ GPIOJ_IDR_IDR0, Port input data y = 0..15

\ GPIOJ_ODR (read-write) Reset:0x00000000
: GPIOJ_ODR_ODR15 ( -- x addr ) 15 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR15, Port output data y = 0..15
: GPIOJ_ODR_ODR14 ( -- x addr ) 14 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR14, Port output data y = 0..15
: GPIOJ_ODR_ODR13 ( -- x addr ) 13 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR13, Port output data y = 0..15
: GPIOJ_ODR_ODR12 ( -- x addr ) 12 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR12, Port output data y = 0..15
: GPIOJ_ODR_ODR11 ( -- x addr ) 11 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR11, Port output data y = 0..15
: GPIOJ_ODR_ODR10 ( -- x addr ) 10 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR10, Port output data y = 0..15
: GPIOJ_ODR_ODR9 ( -- x addr ) 9 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR9, Port output data y = 0..15
: GPIOJ_ODR_ODR8 ( -- x addr ) 8 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR8, Port output data y = 0..15
: GPIOJ_ODR_ODR7 ( -- x addr ) 7 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR7, Port output data y = 0..15
: GPIOJ_ODR_ODR6 ( -- x addr ) 6 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR6, Port output data y = 0..15
: GPIOJ_ODR_ODR5 ( -- x addr ) 5 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR5, Port output data y = 0..15
: GPIOJ_ODR_ODR4 ( -- x addr ) 4 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR4, Port output data y = 0..15
: GPIOJ_ODR_ODR3 ( -- x addr ) 3 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR3, Port output data y = 0..15
: GPIOJ_ODR_ODR2 ( -- x addr ) 2 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR2, Port output data y = 0..15
: GPIOJ_ODR_ODR1 ( -- x addr ) 1 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR1, Port output data y = 0..15
: GPIOJ_ODR_ODR0 ( -- x addr ) 0 bit GPIOJ_ODR ; \ GPIOJ_ODR_ODR0, Port output data y = 0..15

\ GPIOJ_BSRR (write-only) Reset:0x00000000
: GPIOJ_BSRR_BR15 ( -- ) 31 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR15, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR14 ( -- ) 30 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR14, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR13 ( -- ) 29 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR13, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR12 ( -- ) 28 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR12, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR11 ( -- ) 27 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR11, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR10 ( -- ) 26 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR10, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR9 ( -- ) 25 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR9, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR8 ( -- ) 24 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR8, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR7 ( -- ) 23 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR7, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR6 ( -- ) 22 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR6, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR5 ( -- ) 21 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR5, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR4 ( -- ) 20 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR4, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR3 ( -- ) 19 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR3, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR2 ( -- ) 18 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR2, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR1 ( -- ) 17 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR1, Port x reset bit y y = 0..15
: GPIOJ_BSRR_BR0 ( -- ) 16 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BR0, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS15 ( -- ) 15 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS15, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS14 ( -- ) 14 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS14, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS13 ( -- ) 13 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS13, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS12 ( -- ) 12 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS12, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS11 ( -- ) 11 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS11, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS10 ( -- ) 10 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS10, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS9 ( -- ) 9 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS9, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS8 ( -- ) 8 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS8, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS7 ( -- ) 7 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS7, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS6 ( -- ) 6 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS6, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS5 ( -- ) 5 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS5, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS4 ( -- ) 4 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS4, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS3 ( -- ) 3 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS3, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS2 ( -- ) 2 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS2, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS1 ( -- ) 1 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS1, Port x set bit y y= 0..15
: GPIOJ_BSRR_BS0 ( -- ) 0 bit GPIOJ_BSRR ! ; \ GPIOJ_BSRR_BS0, Port x set bit y y= 0..15

\ GPIOJ_LCKR (read-write) Reset:0x00000000
: GPIOJ_LCKR_LCKK ( -- x addr ) 16 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCKK, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK15 ( -- x addr ) 15 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK15, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK14 ( -- x addr ) 14 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK14, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK13 ( -- x addr ) 13 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK13, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK12 ( -- x addr ) 12 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK12, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK11 ( -- x addr ) 11 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK11, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK10 ( -- x addr ) 10 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK10, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK9 ( -- x addr ) 9 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK9, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK8 ( -- x addr ) 8 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK8, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK7 ( -- x addr ) 7 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK7, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK6 ( -- x addr ) 6 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK6, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK5 ( -- x addr ) 5 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK5, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK4 ( -- x addr ) 4 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK4, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK3 ( -- x addr ) 3 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK3, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK2 ( -- x addr ) 2 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK2, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK1 ( -- x addr ) 1 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK1, Port x lock bit y y= 0..15
: GPIOJ_LCKR_LCK0 ( -- x addr ) 0 bit GPIOJ_LCKR ; \ GPIOJ_LCKR_LCK0, Port x lock bit y y= 0..15

\ GPIOJ_AFRL (read-write) Reset:0x00000000
: GPIOJ_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOJ_AFRL ; \ GPIOJ_AFRL_AFRL7, Alternate function selection for port x bit y y = 0..7
: GPIOJ_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOJ_AFRL ; \ GPIOJ_AFRL_AFRL6, Alternate function selection for port x bit y y = 0..7
: GPIOJ_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOJ_AFRL ; \ GPIOJ_AFRL_AFRL5, Alternate function selection for port x bit y y = 0..7
: GPIOJ_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOJ_AFRL ; \ GPIOJ_AFRL_AFRL4, Alternate function selection for port x bit y y = 0..7
: GPIOJ_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOJ_AFRL ; \ GPIOJ_AFRL_AFRL3, Alternate function selection for port x bit y y = 0..7
: GPIOJ_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOJ_AFRL ; \ GPIOJ_AFRL_AFRL2, Alternate function selection for port x bit y y = 0..7
: GPIOJ_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOJ_AFRL ; \ GPIOJ_AFRL_AFRL1, Alternate function selection for port x bit y y = 0..7
: GPIOJ_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOJ_AFRL ; \ GPIOJ_AFRL_AFRL0, Alternate function selection for port x bit y y = 0..7

\ GPIOJ_AFRH (read-write) Reset:0x00000000
: GPIOJ_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOJ_AFRH ; \ GPIOJ_AFRH_AFRH15, Alternate function selection for port x bit y y = 8..15
: GPIOJ_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOJ_AFRH ; \ GPIOJ_AFRH_AFRH14, Alternate function selection for port x bit y y = 8..15
: GPIOJ_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOJ_AFRH ; \ GPIOJ_AFRH_AFRH13, Alternate function selection for port x bit y y = 8..15
: GPIOJ_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOJ_AFRH ; \ GPIOJ_AFRH_AFRH12, Alternate function selection for port x bit y y = 8..15
: GPIOJ_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOJ_AFRH ; \ GPIOJ_AFRH_AFRH11, Alternate function selection for port x bit y y = 8..15
: GPIOJ_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOJ_AFRH ; \ GPIOJ_AFRH_AFRH10, Alternate function selection for port x bit y y = 8..15
: GPIOJ_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOJ_AFRH ; \ GPIOJ_AFRH_AFRH9, Alternate function selection for port x bit y y = 8..15
: GPIOJ_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOJ_AFRH ; \ GPIOJ_AFRH_AFRH8, Alternate function selection for port x bit y y = 8..15

\ GPIOJ_BRR (read-write) Reset:0x00000000
: GPIOJ_BRR_BR0 ( -- x addr ) 0 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR0, Port D Reset bit 0
: GPIOJ_BRR_BR1 ( -- x addr ) 1 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR1, Port D Reset bit 1
: GPIOJ_BRR_BR2 ( -- x addr ) 2 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR2, Port D Reset bit 2
: GPIOJ_BRR_BR3 ( -- x addr ) 3 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR3, Port D Reset bit 3
: GPIOJ_BRR_BR4 ( -- x addr ) 4 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR4, Port D Reset bit 4
: GPIOJ_BRR_BR5 ( -- x addr ) 5 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR5, Port D Reset bit 5
: GPIOJ_BRR_BR6 ( -- x addr ) 6 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR6, Port D Reset bit 6
: GPIOJ_BRR_BR7 ( -- x addr ) 7 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR7, Port D Reset bit 7
: GPIOJ_BRR_BR8 ( -- x addr ) 8 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR8, Port D Reset bit 8
: GPIOJ_BRR_BR9 ( -- x addr ) 9 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR9, Port D Reset bit 9
: GPIOJ_BRR_BR10 ( -- x addr ) 10 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR10, Port D Reset bit 10
: GPIOJ_BRR_BR11 ( -- x addr ) 11 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR11, Port D Reset bit 11
: GPIOJ_BRR_BR12 ( -- x addr ) 12 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR12, Port D Reset bit 12
: GPIOJ_BRR_BR13 ( -- x addr ) 13 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR13, Port D Reset bit 13
: GPIOJ_BRR_BR14 ( -- x addr ) 14 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR14, Port D Reset bit 14
: GPIOJ_BRR_BR15 ( -- x addr ) 15 bit GPIOJ_BRR ; \ GPIOJ_BRR_BR15, Port D Reset bit 15

\ GPIOI_MODER (read-write) Reset:0x00000000
: GPIOI_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER15, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER14, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER13, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER12, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER11, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER10, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER9, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER8, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER7, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER6, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER5, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER4, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER3, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER2, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER1, Port x configuration bits y = 0..15
: GPIOI_MODER_MODER0 ( %bb -- x addr ) GPIOI_MODER ; \ GPIOI_MODER_MODER0, Port x configuration bits y = 0..15

\ GPIOI_OTYPER (read-write) Reset:0x00000000
: GPIOI_OTYPER_OT15 ( -- x addr ) 15 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT15, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT14 ( -- x addr ) 14 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT14, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT13 ( -- x addr ) 13 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT13, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT12 ( -- x addr ) 12 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT12, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT11 ( -- x addr ) 11 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT11, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT10 ( -- x addr ) 10 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT10, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT9 ( -- x addr ) 9 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT9, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT8 ( -- x addr ) 8 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT8, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT7 ( -- x addr ) 7 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT7, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT6 ( -- x addr ) 6 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT6, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT5 ( -- x addr ) 5 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT5, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT4 ( -- x addr ) 4 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT4, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT3 ( -- x addr ) 3 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT3, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT2 ( -- x addr ) 2 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT2, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT1 ( -- x addr ) 1 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT1, Port x configuration bits y = 0..15
: GPIOI_OTYPER_OT0 ( -- x addr ) 0 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT0, Port x configuration bits y = 0..15

\ GPIOI_GPIOB_OSPEEDR (read-write) Reset:0x00000000
: GPIOI_GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y = 0..15
: GPIOI_GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOI_GPIOB_OSPEEDR ; \ GPIOI_GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y = 0..15

\ GPIOI_PUPDR (read-write) Reset:0x00000000
: GPIOI_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR15, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR14, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR13, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR12, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR11, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR10, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR9, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR8, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR7, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR6, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR5, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR4, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR3, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR2, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR1, Port x configuration bits y = 0..15
: GPIOI_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR0, Port x configuration bits y = 0..15

\ GPIOI_IDR (read-only) Reset:0x00000000
: GPIOI_IDR_IDR15? ( --  1|0 ) 15 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR15, Port input data y = 0..15
: GPIOI_IDR_IDR14? ( --  1|0 ) 14 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR14, Port input data y = 0..15
: GPIOI_IDR_IDR13? ( --  1|0 ) 13 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR13, Port input data y = 0..15
: GPIOI_IDR_IDR12? ( --  1|0 ) 12 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR12, Port input data y = 0..15
: GPIOI_IDR_IDR11? ( --  1|0 ) 11 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR11, Port input data y = 0..15
: GPIOI_IDR_IDR10? ( --  1|0 ) 10 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR10, Port input data y = 0..15
: GPIOI_IDR_IDR9? ( --  1|0 ) 9 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR9, Port input data y = 0..15
: GPIOI_IDR_IDR8? ( --  1|0 ) 8 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR8, Port input data y = 0..15
: GPIOI_IDR_IDR7? ( --  1|0 ) 7 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR7, Port input data y = 0..15
: GPIOI_IDR_IDR6? ( --  1|0 ) 6 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR6, Port input data y = 0..15
: GPIOI_IDR_IDR5? ( --  1|0 ) 5 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR5, Port input data y = 0..15
: GPIOI_IDR_IDR4? ( --  1|0 ) 4 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR4, Port input data y = 0..15
: GPIOI_IDR_IDR3? ( --  1|0 ) 3 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR3, Port input data y = 0..15
: GPIOI_IDR_IDR2? ( --  1|0 ) 2 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR2, Port input data y = 0..15
: GPIOI_IDR_IDR1? ( --  1|0 ) 1 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR1, Port input data y = 0..15
: GPIOI_IDR_IDR0? ( --  1|0 ) 0 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR0, Port input data y = 0..15

\ GPIOI_ODR (read-write) Reset:0x00000000
: GPIOI_ODR_ODR15 ( -- x addr ) 15 bit GPIOI_ODR ; \ GPIOI_ODR_ODR15, Port output data y = 0..15
: GPIOI_ODR_ODR14 ( -- x addr ) 14 bit GPIOI_ODR ; \ GPIOI_ODR_ODR14, Port output data y = 0..15
: GPIOI_ODR_ODR13 ( -- x addr ) 13 bit GPIOI_ODR ; \ GPIOI_ODR_ODR13, Port output data y = 0..15
: GPIOI_ODR_ODR12 ( -- x addr ) 12 bit GPIOI_ODR ; \ GPIOI_ODR_ODR12, Port output data y = 0..15
: GPIOI_ODR_ODR11 ( -- x addr ) 11 bit GPIOI_ODR ; \ GPIOI_ODR_ODR11, Port output data y = 0..15
: GPIOI_ODR_ODR10 ( -- x addr ) 10 bit GPIOI_ODR ; \ GPIOI_ODR_ODR10, Port output data y = 0..15
: GPIOI_ODR_ODR9 ( -- x addr ) 9 bit GPIOI_ODR ; \ GPIOI_ODR_ODR9, Port output data y = 0..15
: GPIOI_ODR_ODR8 ( -- x addr ) 8 bit GPIOI_ODR ; \ GPIOI_ODR_ODR8, Port output data y = 0..15
: GPIOI_ODR_ODR7 ( -- x addr ) 7 bit GPIOI_ODR ; \ GPIOI_ODR_ODR7, Port output data y = 0..15
: GPIOI_ODR_ODR6 ( -- x addr ) 6 bit GPIOI_ODR ; \ GPIOI_ODR_ODR6, Port output data y = 0..15
: GPIOI_ODR_ODR5 ( -- x addr ) 5 bit GPIOI_ODR ; \ GPIOI_ODR_ODR5, Port output data y = 0..15
: GPIOI_ODR_ODR4 ( -- x addr ) 4 bit GPIOI_ODR ; \ GPIOI_ODR_ODR4, Port output data y = 0..15
: GPIOI_ODR_ODR3 ( -- x addr ) 3 bit GPIOI_ODR ; \ GPIOI_ODR_ODR3, Port output data y = 0..15
: GPIOI_ODR_ODR2 ( -- x addr ) 2 bit GPIOI_ODR ; \ GPIOI_ODR_ODR2, Port output data y = 0..15
: GPIOI_ODR_ODR1 ( -- x addr ) 1 bit GPIOI_ODR ; \ GPIOI_ODR_ODR1, Port output data y = 0..15
: GPIOI_ODR_ODR0 ( -- x addr ) 0 bit GPIOI_ODR ; \ GPIOI_ODR_ODR0, Port output data y = 0..15

\ GPIOI_BSRR (write-only) Reset:0x00000000
: GPIOI_BSRR_BR15 ( -- ) 31 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR15, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR14 ( -- ) 30 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR14, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR13 ( -- ) 29 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR13, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR12 ( -- ) 28 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR12, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR11 ( -- ) 27 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR11, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR10 ( -- ) 26 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR10, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR9 ( -- ) 25 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR9, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR8 ( -- ) 24 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR8, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR7 ( -- ) 23 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR7, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR6 ( -- ) 22 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR6, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR5 ( -- ) 21 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR5, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR4 ( -- ) 20 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR4, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR3 ( -- ) 19 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR3, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR2 ( -- ) 18 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR2, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR1 ( -- ) 17 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR1, Port x reset bit y y = 0..15
: GPIOI_BSRR_BR0 ( -- ) 16 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR0, Port x set bit y y= 0..15
: GPIOI_BSRR_BS15 ( -- ) 15 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS15, Port x set bit y y= 0..15
: GPIOI_BSRR_BS14 ( -- ) 14 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS14, Port x set bit y y= 0..15
: GPIOI_BSRR_BS13 ( -- ) 13 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS13, Port x set bit y y= 0..15
: GPIOI_BSRR_BS12 ( -- ) 12 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS12, Port x set bit y y= 0..15
: GPIOI_BSRR_BS11 ( -- ) 11 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS11, Port x set bit y y= 0..15
: GPIOI_BSRR_BS10 ( -- ) 10 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS10, Port x set bit y y= 0..15
: GPIOI_BSRR_BS9 ( -- ) 9 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS9, Port x set bit y y= 0..15
: GPIOI_BSRR_BS8 ( -- ) 8 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS8, Port x set bit y y= 0..15
: GPIOI_BSRR_BS7 ( -- ) 7 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS7, Port x set bit y y= 0..15
: GPIOI_BSRR_BS6 ( -- ) 6 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS6, Port x set bit y y= 0..15
: GPIOI_BSRR_BS5 ( -- ) 5 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS5, Port x set bit y y= 0..15
: GPIOI_BSRR_BS4 ( -- ) 4 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS4, Port x set bit y y= 0..15
: GPIOI_BSRR_BS3 ( -- ) 3 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS3, Port x set bit y y= 0..15
: GPIOI_BSRR_BS2 ( -- ) 2 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS2, Port x set bit y y= 0..15
: GPIOI_BSRR_BS1 ( -- ) 1 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS1, Port x set bit y y= 0..15
: GPIOI_BSRR_BS0 ( -- ) 0 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS0, Port x set bit y y= 0..15

\ GPIOI_LCKR (read-write) Reset:0x00000000
: GPIOI_LCKR_LCKK ( -- x addr ) 16 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCKK, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK15 ( -- x addr ) 15 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK15, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK14 ( -- x addr ) 14 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK14, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK13 ( -- x addr ) 13 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK13, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK12 ( -- x addr ) 12 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK12, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK11 ( -- x addr ) 11 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK11, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK10 ( -- x addr ) 10 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK10, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK9 ( -- x addr ) 9 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK9, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK8 ( -- x addr ) 8 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK8, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK7 ( -- x addr ) 7 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK7, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK6 ( -- x addr ) 6 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK6, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK5 ( -- x addr ) 5 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK5, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK4 ( -- x addr ) 4 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK4, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK3 ( -- x addr ) 3 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK3, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK2 ( -- x addr ) 2 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK2, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK1 ( -- x addr ) 1 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK1, Port x lock bit y y= 0..15
: GPIOI_LCKR_LCK0 ( -- x addr ) 0 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK0, Port x lock bit y y= 0..15

\ GPIOI_AFRL (read-write) Reset:0x00000000
: GPIOI_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL7, Alternate function selection for port x bit y y = 0..7
: GPIOI_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL6, Alternate function selection for port x bit y y = 0..7
: GPIOI_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL5, Alternate function selection for port x bit y y = 0..7
: GPIOI_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL4, Alternate function selection for port x bit y y = 0..7
: GPIOI_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL3, Alternate function selection for port x bit y y = 0..7
: GPIOI_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL2, Alternate function selection for port x bit y y = 0..7
: GPIOI_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL1, Alternate function selection for port x bit y y = 0..7
: GPIOI_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOI_AFRL ; \ GPIOI_AFRL_AFRL0, Alternate function selection for port x bit y y = 0..7

\ GPIOI_AFRH (read-write) Reset:0x00000000
: GPIOI_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH15, Alternate function selection for port x bit y y = 8..15
: GPIOI_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH14, Alternate function selection for port x bit y y = 8..15
: GPIOI_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH13, Alternate function selection for port x bit y y = 8..15
: GPIOI_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH12, Alternate function selection for port x bit y y = 8..15
: GPIOI_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH11, Alternate function selection for port x bit y y = 8..15
: GPIOI_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH10, Alternate function selection for port x bit y y = 8..15
: GPIOI_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH9, Alternate function selection for port x bit y y = 8..15
: GPIOI_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOI_AFRH ; \ GPIOI_AFRH_AFRH8, Alternate function selection for port x bit y y = 8..15

\ GPIOI_BRR (read-write) Reset:0x00000000
: GPIOI_BRR_BR0 ( -- x addr ) 0 bit GPIOI_BRR ; \ GPIOI_BRR_BR0, Port D Reset bit 0
: GPIOI_BRR_BR1 ( -- x addr ) 1 bit GPIOI_BRR ; \ GPIOI_BRR_BR1, Port D Reset bit 1
: GPIOI_BRR_BR2 ( -- x addr ) 2 bit GPIOI_BRR ; \ GPIOI_BRR_BR2, Port D Reset bit 2
: GPIOI_BRR_BR3 ( -- x addr ) 3 bit GPIOI_BRR ; \ GPIOI_BRR_BR3, Port D Reset bit 3
: GPIOI_BRR_BR4 ( -- x addr ) 4 bit GPIOI_BRR ; \ GPIOI_BRR_BR4, Port D Reset bit 4
: GPIOI_BRR_BR5 ( -- x addr ) 5 bit GPIOI_BRR ; \ GPIOI_BRR_BR5, Port D Reset bit 5
: GPIOI_BRR_BR6 ( -- x addr ) 6 bit GPIOI_BRR ; \ GPIOI_BRR_BR6, Port D Reset bit 6
: GPIOI_BRR_BR7 ( -- x addr ) 7 bit GPIOI_BRR ; \ GPIOI_BRR_BR7, Port D Reset bit 7
: GPIOI_BRR_BR8 ( -- x addr ) 8 bit GPIOI_BRR ; \ GPIOI_BRR_BR8, Port D Reset bit 8
: GPIOI_BRR_BR9 ( -- x addr ) 9 bit GPIOI_BRR ; \ GPIOI_BRR_BR9, Port D Reset bit 9
: GPIOI_BRR_BR10 ( -- x addr ) 10 bit GPIOI_BRR ; \ GPIOI_BRR_BR10, Port D Reset bit 10
: GPIOI_BRR_BR11 ( -- x addr ) 11 bit GPIOI_BRR ; \ GPIOI_BRR_BR11, Port D Reset bit 11
: GPIOI_BRR_BR12 ( -- x addr ) 12 bit GPIOI_BRR ; \ GPIOI_BRR_BR12, Port D Reset bit 12
: GPIOI_BRR_BR13 ( -- x addr ) 13 bit GPIOI_BRR ; \ GPIOI_BRR_BR13, Port D Reset bit 13
: GPIOI_BRR_BR14 ( -- x addr ) 14 bit GPIOI_BRR ; \ GPIOI_BRR_BR14, Port D Reset bit 14
: GPIOI_BRR_BR15 ( -- x addr ) 15 bit GPIOI_BRR ; \ GPIOI_BRR_BR15, Port D Reset bit 15

\ GPIOH_MODER (read-write) Reset:0x00000000
: GPIOH_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER15, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER14, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER13, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER12, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER11, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER10, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER9, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER8, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER7, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER6, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER5, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER4, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER3, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER2, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER1, Port x configuration bits y = 0..15
: GPIOH_MODER_MODER0 ( %bb -- x addr ) GPIOH_MODER ; \ GPIOH_MODER_MODER0, Port x configuration bits y = 0..15

\ GPIOH_OTYPER (read-write) Reset:0x00000000
: GPIOH_OTYPER_OT15 ( -- x addr ) 15 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT15, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT14 ( -- x addr ) 14 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT14, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT13 ( -- x addr ) 13 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT13, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT12 ( -- x addr ) 12 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT12, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT11 ( -- x addr ) 11 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT11, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT10 ( -- x addr ) 10 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT10, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT9 ( -- x addr ) 9 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT9, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT8 ( -- x addr ) 8 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT8, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT7 ( -- x addr ) 7 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT7, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT6 ( -- x addr ) 6 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT6, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT5 ( -- x addr ) 5 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT5, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT4 ( -- x addr ) 4 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT4, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT3 ( -- x addr ) 3 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT3, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT2 ( -- x addr ) 2 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT2, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT1 ( -- x addr ) 1 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT1, Port x configuration bits y = 0..15
: GPIOH_OTYPER_OT0 ( -- x addr ) 0 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT0, Port x configuration bits y = 0..15

\ GPIOH_GPIOB_OSPEEDR (read-write) Reset:0x00000000
: GPIOH_GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y = 0..15
: GPIOH_GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOH_GPIOB_OSPEEDR ; \ GPIOH_GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y = 0..15

\ GPIOH_PUPDR (read-write) Reset:0x00000000
: GPIOH_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR15, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR14, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR13, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR12, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR11, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR10, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR9, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR8, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR7, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR6, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR5, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR4, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR3, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR2, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR1, Port x configuration bits y = 0..15
: GPIOH_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR0, Port x configuration bits y = 0..15

\ GPIOH_IDR (read-only) Reset:0x00000000
: GPIOH_IDR_IDR15? ( --  1|0 ) 15 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR15, Port input data y = 0..15
: GPIOH_IDR_IDR14? ( --  1|0 ) 14 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR14, Port input data y = 0..15
: GPIOH_IDR_IDR13? ( --  1|0 ) 13 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR13, Port input data y = 0..15
: GPIOH_IDR_IDR12? ( --  1|0 ) 12 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR12, Port input data y = 0..15
: GPIOH_IDR_IDR11? ( --  1|0 ) 11 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR11, Port input data y = 0..15
: GPIOH_IDR_IDR10? ( --  1|0 ) 10 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR10, Port input data y = 0..15
: GPIOH_IDR_IDR9? ( --  1|0 ) 9 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR9, Port input data y = 0..15
: GPIOH_IDR_IDR8? ( --  1|0 ) 8 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR8, Port input data y = 0..15
: GPIOH_IDR_IDR7? ( --  1|0 ) 7 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR7, Port input data y = 0..15
: GPIOH_IDR_IDR6? ( --  1|0 ) 6 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR6, Port input data y = 0..15
: GPIOH_IDR_IDR5? ( --  1|0 ) 5 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR5, Port input data y = 0..15
: GPIOH_IDR_IDR4? ( --  1|0 ) 4 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR4, Port input data y = 0..15
: GPIOH_IDR_IDR3? ( --  1|0 ) 3 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR3, Port input data y = 0..15
: GPIOH_IDR_IDR2? ( --  1|0 ) 2 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR2, Port input data y = 0..15
: GPIOH_IDR_IDR1? ( --  1|0 ) 1 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR1, Port input data y = 0..15
: GPIOH_IDR_IDR0? ( --  1|0 ) 0 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR0, Port input data y = 0..15

\ GPIOH_ODR (read-write) Reset:0x00000000
: GPIOH_ODR_ODR15 ( -- x addr ) 15 bit GPIOH_ODR ; \ GPIOH_ODR_ODR15, Port output data y = 0..15
: GPIOH_ODR_ODR14 ( -- x addr ) 14 bit GPIOH_ODR ; \ GPIOH_ODR_ODR14, Port output data y = 0..15
: GPIOH_ODR_ODR13 ( -- x addr ) 13 bit GPIOH_ODR ; \ GPIOH_ODR_ODR13, Port output data y = 0..15
: GPIOH_ODR_ODR12 ( -- x addr ) 12 bit GPIOH_ODR ; \ GPIOH_ODR_ODR12, Port output data y = 0..15
: GPIOH_ODR_ODR11 ( -- x addr ) 11 bit GPIOH_ODR ; \ GPIOH_ODR_ODR11, Port output data y = 0..15
: GPIOH_ODR_ODR10 ( -- x addr ) 10 bit GPIOH_ODR ; \ GPIOH_ODR_ODR10, Port output data y = 0..15
: GPIOH_ODR_ODR9 ( -- x addr ) 9 bit GPIOH_ODR ; \ GPIOH_ODR_ODR9, Port output data y = 0..15
: GPIOH_ODR_ODR8 ( -- x addr ) 8 bit GPIOH_ODR ; \ GPIOH_ODR_ODR8, Port output data y = 0..15
: GPIOH_ODR_ODR7 ( -- x addr ) 7 bit GPIOH_ODR ; \ GPIOH_ODR_ODR7, Port output data y = 0..15
: GPIOH_ODR_ODR6 ( -- x addr ) 6 bit GPIOH_ODR ; \ GPIOH_ODR_ODR6, Port output data y = 0..15
: GPIOH_ODR_ODR5 ( -- x addr ) 5 bit GPIOH_ODR ; \ GPIOH_ODR_ODR5, Port output data y = 0..15
: GPIOH_ODR_ODR4 ( -- x addr ) 4 bit GPIOH_ODR ; \ GPIOH_ODR_ODR4, Port output data y = 0..15
: GPIOH_ODR_ODR3 ( -- x addr ) 3 bit GPIOH_ODR ; \ GPIOH_ODR_ODR3, Port output data y = 0..15
: GPIOH_ODR_ODR2 ( -- x addr ) 2 bit GPIOH_ODR ; \ GPIOH_ODR_ODR2, Port output data y = 0..15
: GPIOH_ODR_ODR1 ( -- x addr ) 1 bit GPIOH_ODR ; \ GPIOH_ODR_ODR1, Port output data y = 0..15
: GPIOH_ODR_ODR0 ( -- x addr ) 0 bit GPIOH_ODR ; \ GPIOH_ODR_ODR0, Port output data y = 0..15

\ GPIOH_BSRR (write-only) Reset:0x00000000
: GPIOH_BSRR_BR15 ( -- ) 31 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR15, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR14 ( -- ) 30 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR14, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR13 ( -- ) 29 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR13, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR12 ( -- ) 28 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR12, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR11 ( -- ) 27 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR11, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR10 ( -- ) 26 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR10, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR9 ( -- ) 25 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR9, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR8 ( -- ) 24 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR8, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR7 ( -- ) 23 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR7, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR6 ( -- ) 22 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR6, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR5 ( -- ) 21 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR5, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR4 ( -- ) 20 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR4, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR3 ( -- ) 19 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR3, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR2 ( -- ) 18 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR2, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR1 ( -- ) 17 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR1, Port x reset bit y y = 0..15
: GPIOH_BSRR_BR0 ( -- ) 16 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR0, Port x set bit y y= 0..15
: GPIOH_BSRR_BS15 ( -- ) 15 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS15, Port x set bit y y= 0..15
: GPIOH_BSRR_BS14 ( -- ) 14 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS14, Port x set bit y y= 0..15
: GPIOH_BSRR_BS13 ( -- ) 13 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS13, Port x set bit y y= 0..15
: GPIOH_BSRR_BS12 ( -- ) 12 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS12, Port x set bit y y= 0..15
: GPIOH_BSRR_BS11 ( -- ) 11 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS11, Port x set bit y y= 0..15
: GPIOH_BSRR_BS10 ( -- ) 10 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS10, Port x set bit y y= 0..15
: GPIOH_BSRR_BS9 ( -- ) 9 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS9, Port x set bit y y= 0..15
: GPIOH_BSRR_BS8 ( -- ) 8 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS8, Port x set bit y y= 0..15
: GPIOH_BSRR_BS7 ( -- ) 7 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS7, Port x set bit y y= 0..15
: GPIOH_BSRR_BS6 ( -- ) 6 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS6, Port x set bit y y= 0..15
: GPIOH_BSRR_BS5 ( -- ) 5 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS5, Port x set bit y y= 0..15
: GPIOH_BSRR_BS4 ( -- ) 4 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS4, Port x set bit y y= 0..15
: GPIOH_BSRR_BS3 ( -- ) 3 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS3, Port x set bit y y= 0..15
: GPIOH_BSRR_BS2 ( -- ) 2 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS2, Port x set bit y y= 0..15
: GPIOH_BSRR_BS1 ( -- ) 1 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS1, Port x set bit y y= 0..15
: GPIOH_BSRR_BS0 ( -- ) 0 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS0, Port x set bit y y= 0..15

\ GPIOH_LCKR (read-write) Reset:0x00000000
: GPIOH_LCKR_LCKK ( -- x addr ) 16 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCKK, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK15 ( -- x addr ) 15 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK15, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK14 ( -- x addr ) 14 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK14, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK13 ( -- x addr ) 13 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK13, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK12 ( -- x addr ) 12 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK12, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK11 ( -- x addr ) 11 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK11, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK10 ( -- x addr ) 10 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK10, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK9 ( -- x addr ) 9 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK9, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK8 ( -- x addr ) 8 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK8, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK7 ( -- x addr ) 7 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK7, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK6 ( -- x addr ) 6 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK6, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK5 ( -- x addr ) 5 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK5, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK4 ( -- x addr ) 4 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK4, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK3 ( -- x addr ) 3 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK3, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK2 ( -- x addr ) 2 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK2, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK1 ( -- x addr ) 1 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK1, Port x lock bit y y= 0..15
: GPIOH_LCKR_LCK0 ( -- x addr ) 0 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK0, Port x lock bit y y= 0..15

\ GPIOH_AFRL (read-write) Reset:0x00000000
: GPIOH_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL7, Alternate function selection for port x bit y y = 0..7
: GPIOH_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL6, Alternate function selection for port x bit y y = 0..7
: GPIOH_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL5, Alternate function selection for port x bit y y = 0..7
: GPIOH_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL4, Alternate function selection for port x bit y y = 0..7
: GPIOH_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL3, Alternate function selection for port x bit y y = 0..7
: GPIOH_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL2, Alternate function selection for port x bit y y = 0..7
: GPIOH_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL1, Alternate function selection for port x bit y y = 0..7
: GPIOH_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOH_AFRL ; \ GPIOH_AFRL_AFRL0, Alternate function selection for port x bit y y = 0..7

\ GPIOH_AFRH (read-write) Reset:0x00000000
: GPIOH_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH15, Alternate function selection for port x bit y y = 8..15
: GPIOH_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH14, Alternate function selection for port x bit y y = 8..15
: GPIOH_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH13, Alternate function selection for port x bit y y = 8..15
: GPIOH_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH12, Alternate function selection for port x bit y y = 8..15
: GPIOH_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH11, Alternate function selection for port x bit y y = 8..15
: GPIOH_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH10, Alternate function selection for port x bit y y = 8..15
: GPIOH_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH9, Alternate function selection for port x bit y y = 8..15
: GPIOH_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOH_AFRH ; \ GPIOH_AFRH_AFRH8, Alternate function selection for port x bit y y = 8..15

\ GPIOH_BRR (read-write) Reset:0x00000000
: GPIOH_BRR_BR0 ( -- x addr ) 0 bit GPIOH_BRR ; \ GPIOH_BRR_BR0, Port D Reset bit 0
: GPIOH_BRR_BR1 ( -- x addr ) 1 bit GPIOH_BRR ; \ GPIOH_BRR_BR1, Port D Reset bit 1
: GPIOH_BRR_BR2 ( -- x addr ) 2 bit GPIOH_BRR ; \ GPIOH_BRR_BR2, Port D Reset bit 2
: GPIOH_BRR_BR3 ( -- x addr ) 3 bit GPIOH_BRR ; \ GPIOH_BRR_BR3, Port D Reset bit 3
: GPIOH_BRR_BR4 ( -- x addr ) 4 bit GPIOH_BRR ; \ GPIOH_BRR_BR4, Port D Reset bit 4
: GPIOH_BRR_BR5 ( -- x addr ) 5 bit GPIOH_BRR ; \ GPIOH_BRR_BR5, Port D Reset bit 5
: GPIOH_BRR_BR6 ( -- x addr ) 6 bit GPIOH_BRR ; \ GPIOH_BRR_BR6, Port D Reset bit 6
: GPIOH_BRR_BR7 ( -- x addr ) 7 bit GPIOH_BRR ; \ GPIOH_BRR_BR7, Port D Reset bit 7
: GPIOH_BRR_BR8 ( -- x addr ) 8 bit GPIOH_BRR ; \ GPIOH_BRR_BR8, Port D Reset bit 8
: GPIOH_BRR_BR9 ( -- x addr ) 9 bit GPIOH_BRR ; \ GPIOH_BRR_BR9, Port D Reset bit 9
: GPIOH_BRR_BR10 ( -- x addr ) 10 bit GPIOH_BRR ; \ GPIOH_BRR_BR10, Port D Reset bit 10
: GPIOH_BRR_BR11 ( -- x addr ) 11 bit GPIOH_BRR ; \ GPIOH_BRR_BR11, Port D Reset bit 11
: GPIOH_BRR_BR12 ( -- x addr ) 12 bit GPIOH_BRR ; \ GPIOH_BRR_BR12, Port D Reset bit 12
: GPIOH_BRR_BR13 ( -- x addr ) 13 bit GPIOH_BRR ; \ GPIOH_BRR_BR13, Port D Reset bit 13
: GPIOH_BRR_BR14 ( -- x addr ) 14 bit GPIOH_BRR ; \ GPIOH_BRR_BR14, Port D Reset bit 14
: GPIOH_BRR_BR15 ( -- x addr ) 15 bit GPIOH_BRR ; \ GPIOH_BRR_BR15, Port D Reset bit 15

\ GPIOG_MODER (read-write) Reset:0x00000000
: GPIOG_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER15, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER14, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER13, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER12, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER11, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER10, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER9, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER8, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER7, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER6, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER5, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER4, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER3, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER2, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER1, Port x configuration bits y = 0..15
: GPIOG_MODER_MODER0 ( %bb -- x addr ) GPIOG_MODER ; \ GPIOG_MODER_MODER0, Port x configuration bits y = 0..15

\ GPIOG_OTYPER (read-write) Reset:0x00000000
: GPIOG_OTYPER_OT15 ( -- x addr ) 15 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT15, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT14 ( -- x addr ) 14 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT14, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT13 ( -- x addr ) 13 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT13, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT12 ( -- x addr ) 12 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT12, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT11 ( -- x addr ) 11 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT11, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT10 ( -- x addr ) 10 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT10, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT9 ( -- x addr ) 9 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT9, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT8 ( -- x addr ) 8 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT8, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT7 ( -- x addr ) 7 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT7, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT6 ( -- x addr ) 6 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT6, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT5 ( -- x addr ) 5 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT5, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT4 ( -- x addr ) 4 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT4, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT3 ( -- x addr ) 3 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT3, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT2 ( -- x addr ) 2 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT2, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT1 ( -- x addr ) 1 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT1, Port x configuration bits y = 0..15
: GPIOG_OTYPER_OT0 ( -- x addr ) 0 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT0, Port x configuration bits y = 0..15

\ GPIOG_GPIOB_OSPEEDR (read-write) Reset:0x00000000
: GPIOG_GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y = 0..15
: GPIOG_GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOG_GPIOB_OSPEEDR ; \ GPIOG_GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y = 0..15

\ GPIOG_PUPDR (read-write) Reset:0x00000000
: GPIOG_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR15, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR14, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR13, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR12, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR11, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR10, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR9, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR8, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR7, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR6, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR5, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR4, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR3, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR2, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR1, Port x configuration bits y = 0..15
: GPIOG_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR0, Port x configuration bits y = 0..15

\ GPIOG_IDR (read-only) Reset:0x00000000
: GPIOG_IDR_IDR15? ( --  1|0 ) 15 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR15, Port input data y = 0..15
: GPIOG_IDR_IDR14? ( --  1|0 ) 14 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR14, Port input data y = 0..15
: GPIOG_IDR_IDR13? ( --  1|0 ) 13 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR13, Port input data y = 0..15
: GPIOG_IDR_IDR12? ( --  1|0 ) 12 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR12, Port input data y = 0..15
: GPIOG_IDR_IDR11? ( --  1|0 ) 11 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR11, Port input data y = 0..15
: GPIOG_IDR_IDR10? ( --  1|0 ) 10 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR10, Port input data y = 0..15
: GPIOG_IDR_IDR9? ( --  1|0 ) 9 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR9, Port input data y = 0..15
: GPIOG_IDR_IDR8? ( --  1|0 ) 8 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR8, Port input data y = 0..15
: GPIOG_IDR_IDR7? ( --  1|0 ) 7 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR7, Port input data y = 0..15
: GPIOG_IDR_IDR6? ( --  1|0 ) 6 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR6, Port input data y = 0..15
: GPIOG_IDR_IDR5? ( --  1|0 ) 5 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR5, Port input data y = 0..15
: GPIOG_IDR_IDR4? ( --  1|0 ) 4 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR4, Port input data y = 0..15
: GPIOG_IDR_IDR3? ( --  1|0 ) 3 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR3, Port input data y = 0..15
: GPIOG_IDR_IDR2? ( --  1|0 ) 2 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR2, Port input data y = 0..15
: GPIOG_IDR_IDR1? ( --  1|0 ) 1 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR1, Port input data y = 0..15
: GPIOG_IDR_IDR0? ( --  1|0 ) 0 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR0, Port input data y = 0..15

\ GPIOG_ODR (read-write) Reset:0x00000000
: GPIOG_ODR_ODR15 ( -- x addr ) 15 bit GPIOG_ODR ; \ GPIOG_ODR_ODR15, Port output data y = 0..15
: GPIOG_ODR_ODR14 ( -- x addr ) 14 bit GPIOG_ODR ; \ GPIOG_ODR_ODR14, Port output data y = 0..15
: GPIOG_ODR_ODR13 ( -- x addr ) 13 bit GPIOG_ODR ; \ GPIOG_ODR_ODR13, Port output data y = 0..15
: GPIOG_ODR_ODR12 ( -- x addr ) 12 bit GPIOG_ODR ; \ GPIOG_ODR_ODR12, Port output data y = 0..15
: GPIOG_ODR_ODR11 ( -- x addr ) 11 bit GPIOG_ODR ; \ GPIOG_ODR_ODR11, Port output data y = 0..15
: GPIOG_ODR_ODR10 ( -- x addr ) 10 bit GPIOG_ODR ; \ GPIOG_ODR_ODR10, Port output data y = 0..15
: GPIOG_ODR_ODR9 ( -- x addr ) 9 bit GPIOG_ODR ; \ GPIOG_ODR_ODR9, Port output data y = 0..15
: GPIOG_ODR_ODR8 ( -- x addr ) 8 bit GPIOG_ODR ; \ GPIOG_ODR_ODR8, Port output data y = 0..15
: GPIOG_ODR_ODR7 ( -- x addr ) 7 bit GPIOG_ODR ; \ GPIOG_ODR_ODR7, Port output data y = 0..15
: GPIOG_ODR_ODR6 ( -- x addr ) 6 bit GPIOG_ODR ; \ GPIOG_ODR_ODR6, Port output data y = 0..15
: GPIOG_ODR_ODR5 ( -- x addr ) 5 bit GPIOG_ODR ; \ GPIOG_ODR_ODR5, Port output data y = 0..15
: GPIOG_ODR_ODR4 ( -- x addr ) 4 bit GPIOG_ODR ; \ GPIOG_ODR_ODR4, Port output data y = 0..15
: GPIOG_ODR_ODR3 ( -- x addr ) 3 bit GPIOG_ODR ; \ GPIOG_ODR_ODR3, Port output data y = 0..15
: GPIOG_ODR_ODR2 ( -- x addr ) 2 bit GPIOG_ODR ; \ GPIOG_ODR_ODR2, Port output data y = 0..15
: GPIOG_ODR_ODR1 ( -- x addr ) 1 bit GPIOG_ODR ; \ GPIOG_ODR_ODR1, Port output data y = 0..15
: GPIOG_ODR_ODR0 ( -- x addr ) 0 bit GPIOG_ODR ; \ GPIOG_ODR_ODR0, Port output data y = 0..15

\ GPIOG_BSRR (write-only) Reset:0x00000000
: GPIOG_BSRR_BR15 ( -- ) 31 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR15, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR14 ( -- ) 30 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR14, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR13 ( -- ) 29 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR13, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR12 ( -- ) 28 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR12, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR11 ( -- ) 27 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR11, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR10 ( -- ) 26 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR10, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR9 ( -- ) 25 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR9, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR8 ( -- ) 24 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR8, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR7 ( -- ) 23 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR7, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR6 ( -- ) 22 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR6, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR5 ( -- ) 21 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR5, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR4 ( -- ) 20 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR4, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR3 ( -- ) 19 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR3, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR2 ( -- ) 18 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR2, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR1 ( -- ) 17 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR1, Port x reset bit y y = 0..15
: GPIOG_BSRR_BR0 ( -- ) 16 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR0, Port x set bit y y= 0..15
: GPIOG_BSRR_BS15 ( -- ) 15 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS15, Port x set bit y y= 0..15
: GPIOG_BSRR_BS14 ( -- ) 14 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS14, Port x set bit y y= 0..15
: GPIOG_BSRR_BS13 ( -- ) 13 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS13, Port x set bit y y= 0..15
: GPIOG_BSRR_BS12 ( -- ) 12 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS12, Port x set bit y y= 0..15
: GPIOG_BSRR_BS11 ( -- ) 11 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS11, Port x set bit y y= 0..15
: GPIOG_BSRR_BS10 ( -- ) 10 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS10, Port x set bit y y= 0..15
: GPIOG_BSRR_BS9 ( -- ) 9 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS9, Port x set bit y y= 0..15
: GPIOG_BSRR_BS8 ( -- ) 8 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS8, Port x set bit y y= 0..15
: GPIOG_BSRR_BS7 ( -- ) 7 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS7, Port x set bit y y= 0..15
: GPIOG_BSRR_BS6 ( -- ) 6 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS6, Port x set bit y y= 0..15
: GPIOG_BSRR_BS5 ( -- ) 5 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS5, Port x set bit y y= 0..15
: GPIOG_BSRR_BS4 ( -- ) 4 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS4, Port x set bit y y= 0..15
: GPIOG_BSRR_BS3 ( -- ) 3 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS3, Port x set bit y y= 0..15
: GPIOG_BSRR_BS2 ( -- ) 2 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS2, Port x set bit y y= 0..15
: GPIOG_BSRR_BS1 ( -- ) 1 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS1, Port x set bit y y= 0..15
: GPIOG_BSRR_BS0 ( -- ) 0 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS0, Port x set bit y y= 0..15

\ GPIOG_LCKR (read-write) Reset:0x00000000
: GPIOG_LCKR_LCKK ( -- x addr ) 16 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCKK, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK15 ( -- x addr ) 15 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK15, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK14 ( -- x addr ) 14 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK14, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK13 ( -- x addr ) 13 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK13, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK12 ( -- x addr ) 12 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK12, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK11 ( -- x addr ) 11 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK11, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK10 ( -- x addr ) 10 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK10, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK9 ( -- x addr ) 9 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK9, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK8 ( -- x addr ) 8 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK8, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK7 ( -- x addr ) 7 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK7, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK6 ( -- x addr ) 6 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK6, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK5 ( -- x addr ) 5 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK5, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK4 ( -- x addr ) 4 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK4, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK3 ( -- x addr ) 3 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK3, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK2 ( -- x addr ) 2 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK2, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK1 ( -- x addr ) 1 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK1, Port x lock bit y y= 0..15
: GPIOG_LCKR_LCK0 ( -- x addr ) 0 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK0, Port x lock bit y y= 0..15

\ GPIOG_AFRL (read-write) Reset:0x00000000
: GPIOG_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL7, Alternate function selection for port x bit y y = 0..7
: GPIOG_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL6, Alternate function selection for port x bit y y = 0..7
: GPIOG_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL5, Alternate function selection for port x bit y y = 0..7
: GPIOG_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL4, Alternate function selection for port x bit y y = 0..7
: GPIOG_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL3, Alternate function selection for port x bit y y = 0..7
: GPIOG_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL2, Alternate function selection for port x bit y y = 0..7
: GPIOG_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL1, Alternate function selection for port x bit y y = 0..7
: GPIOG_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOG_AFRL ; \ GPIOG_AFRL_AFRL0, Alternate function selection for port x bit y y = 0..7

\ GPIOG_AFRH (read-write) Reset:0x00000000
: GPIOG_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH15, Alternate function selection for port x bit y y = 8..15
: GPIOG_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH14, Alternate function selection for port x bit y y = 8..15
: GPIOG_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH13, Alternate function selection for port x bit y y = 8..15
: GPIOG_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH12, Alternate function selection for port x bit y y = 8..15
: GPIOG_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH11, Alternate function selection for port x bit y y = 8..15
: GPIOG_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH10, Alternate function selection for port x bit y y = 8..15
: GPIOG_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH9, Alternate function selection for port x bit y y = 8..15
: GPIOG_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOG_AFRH ; \ GPIOG_AFRH_AFRH8, Alternate function selection for port x bit y y = 8..15

\ GPIOG_BRR (read-write) Reset:0x00000000
: GPIOG_BRR_BR0 ( -- x addr ) 0 bit GPIOG_BRR ; \ GPIOG_BRR_BR0, Port D Reset bit 0
: GPIOG_BRR_BR1 ( -- x addr ) 1 bit GPIOG_BRR ; \ GPIOG_BRR_BR1, Port D Reset bit 1
: GPIOG_BRR_BR2 ( -- x addr ) 2 bit GPIOG_BRR ; \ GPIOG_BRR_BR2, Port D Reset bit 2
: GPIOG_BRR_BR3 ( -- x addr ) 3 bit GPIOG_BRR ; \ GPIOG_BRR_BR3, Port D Reset bit 3
: GPIOG_BRR_BR4 ( -- x addr ) 4 bit GPIOG_BRR ; \ GPIOG_BRR_BR4, Port D Reset bit 4
: GPIOG_BRR_BR5 ( -- x addr ) 5 bit GPIOG_BRR ; \ GPIOG_BRR_BR5, Port D Reset bit 5
: GPIOG_BRR_BR6 ( -- x addr ) 6 bit GPIOG_BRR ; \ GPIOG_BRR_BR6, Port D Reset bit 6
: GPIOG_BRR_BR7 ( -- x addr ) 7 bit GPIOG_BRR ; \ GPIOG_BRR_BR7, Port D Reset bit 7
: GPIOG_BRR_BR8 ( -- x addr ) 8 bit GPIOG_BRR ; \ GPIOG_BRR_BR8, Port D Reset bit 8
: GPIOG_BRR_BR9 ( -- x addr ) 9 bit GPIOG_BRR ; \ GPIOG_BRR_BR9, Port D Reset bit 9
: GPIOG_BRR_BR10 ( -- x addr ) 10 bit GPIOG_BRR ; \ GPIOG_BRR_BR10, Port D Reset bit 10
: GPIOG_BRR_BR11 ( -- x addr ) 11 bit GPIOG_BRR ; \ GPIOG_BRR_BR11, Port D Reset bit 11
: GPIOG_BRR_BR12 ( -- x addr ) 12 bit GPIOG_BRR ; \ GPIOG_BRR_BR12, Port D Reset bit 12
: GPIOG_BRR_BR13 ( -- x addr ) 13 bit GPIOG_BRR ; \ GPIOG_BRR_BR13, Port D Reset bit 13
: GPIOG_BRR_BR14 ( -- x addr ) 14 bit GPIOG_BRR ; \ GPIOG_BRR_BR14, Port D Reset bit 14
: GPIOG_BRR_BR15 ( -- x addr ) 15 bit GPIOG_BRR ; \ GPIOG_BRR_BR15, Port D Reset bit 15

\ GPIOF_MODER (read-write) Reset:0x00000000
: GPIOF_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER15, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER14, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER13, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER12, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER11, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER10, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER9, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER8, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER7, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER6, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER5, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER4, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER3, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER2, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER1, Port x configuration bits y = 0..15
: GPIOF_MODER_MODER0 ( %bb -- x addr ) GPIOF_MODER ; \ GPIOF_MODER_MODER0, Port x configuration bits y = 0..15

\ GPIOF_OTYPER (read-write) Reset:0x00000000
: GPIOF_OTYPER_OT15 ( -- x addr ) 15 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT15, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT14 ( -- x addr ) 14 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT14, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT13 ( -- x addr ) 13 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT13, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT12 ( -- x addr ) 12 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT12, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT11 ( -- x addr ) 11 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT11, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT10 ( -- x addr ) 10 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT10, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT9 ( -- x addr ) 9 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT9, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT8 ( -- x addr ) 8 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT8, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT7 ( -- x addr ) 7 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT7, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT6 ( -- x addr ) 6 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT6, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT5 ( -- x addr ) 5 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT5, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT4 ( -- x addr ) 4 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT4, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT3 ( -- x addr ) 3 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT3, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT2 ( -- x addr ) 2 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT2, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT1 ( -- x addr ) 1 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT1, Port x configuration bits y = 0..15
: GPIOF_OTYPER_OT0 ( -- x addr ) 0 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT0, Port x configuration bits y = 0..15

\ GPIOF_GPIOB_OSPEEDR (read-write) Reset:0x00000000
: GPIOF_GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y = 0..15
: GPIOF_GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOF_GPIOB_OSPEEDR ; \ GPIOF_GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y = 0..15

\ GPIOF_PUPDR (read-write) Reset:0x00000000
: GPIOF_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR15, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR14, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR13, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR12, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR11, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR10, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR9, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR8, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR7, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR6, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR5, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR4, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR3, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR2, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR1, Port x configuration bits y = 0..15
: GPIOF_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR0, Port x configuration bits y = 0..15

\ GPIOF_IDR (read-only) Reset:0x00000000
: GPIOF_IDR_IDR15? ( --  1|0 ) 15 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR15, Port input data y = 0..15
: GPIOF_IDR_IDR14? ( --  1|0 ) 14 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR14, Port input data y = 0..15
: GPIOF_IDR_IDR13? ( --  1|0 ) 13 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR13, Port input data y = 0..15
: GPIOF_IDR_IDR12? ( --  1|0 ) 12 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR12, Port input data y = 0..15
: GPIOF_IDR_IDR11? ( --  1|0 ) 11 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR11, Port input data y = 0..15
: GPIOF_IDR_IDR10? ( --  1|0 ) 10 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR10, Port input data y = 0..15
: GPIOF_IDR_IDR9? ( --  1|0 ) 9 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR9, Port input data y = 0..15
: GPIOF_IDR_IDR8? ( --  1|0 ) 8 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR8, Port input data y = 0..15
: GPIOF_IDR_IDR7? ( --  1|0 ) 7 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR7, Port input data y = 0..15
: GPIOF_IDR_IDR6? ( --  1|0 ) 6 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR6, Port input data y = 0..15
: GPIOF_IDR_IDR5? ( --  1|0 ) 5 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR5, Port input data y = 0..15
: GPIOF_IDR_IDR4? ( --  1|0 ) 4 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR4, Port input data y = 0..15
: GPIOF_IDR_IDR3? ( --  1|0 ) 3 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR3, Port input data y = 0..15
: GPIOF_IDR_IDR2? ( --  1|0 ) 2 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR2, Port input data y = 0..15
: GPIOF_IDR_IDR1? ( --  1|0 ) 1 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR1, Port input data y = 0..15
: GPIOF_IDR_IDR0? ( --  1|0 ) 0 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR0, Port input data y = 0..15

\ GPIOF_ODR (read-write) Reset:0x00000000
: GPIOF_ODR_ODR15 ( -- x addr ) 15 bit GPIOF_ODR ; \ GPIOF_ODR_ODR15, Port output data y = 0..15
: GPIOF_ODR_ODR14 ( -- x addr ) 14 bit GPIOF_ODR ; \ GPIOF_ODR_ODR14, Port output data y = 0..15
: GPIOF_ODR_ODR13 ( -- x addr ) 13 bit GPIOF_ODR ; \ GPIOF_ODR_ODR13, Port output data y = 0..15
: GPIOF_ODR_ODR12 ( -- x addr ) 12 bit GPIOF_ODR ; \ GPIOF_ODR_ODR12, Port output data y = 0..15
: GPIOF_ODR_ODR11 ( -- x addr ) 11 bit GPIOF_ODR ; \ GPIOF_ODR_ODR11, Port output data y = 0..15
: GPIOF_ODR_ODR10 ( -- x addr ) 10 bit GPIOF_ODR ; \ GPIOF_ODR_ODR10, Port output data y = 0..15
: GPIOF_ODR_ODR9 ( -- x addr ) 9 bit GPIOF_ODR ; \ GPIOF_ODR_ODR9, Port output data y = 0..15
: GPIOF_ODR_ODR8 ( -- x addr ) 8 bit GPIOF_ODR ; \ GPIOF_ODR_ODR8, Port output data y = 0..15
: GPIOF_ODR_ODR7 ( -- x addr ) 7 bit GPIOF_ODR ; \ GPIOF_ODR_ODR7, Port output data y = 0..15
: GPIOF_ODR_ODR6 ( -- x addr ) 6 bit GPIOF_ODR ; \ GPIOF_ODR_ODR6, Port output data y = 0..15
: GPIOF_ODR_ODR5 ( -- x addr ) 5 bit GPIOF_ODR ; \ GPIOF_ODR_ODR5, Port output data y = 0..15
: GPIOF_ODR_ODR4 ( -- x addr ) 4 bit GPIOF_ODR ; \ GPIOF_ODR_ODR4, Port output data y = 0..15
: GPIOF_ODR_ODR3 ( -- x addr ) 3 bit GPIOF_ODR ; \ GPIOF_ODR_ODR3, Port output data y = 0..15
: GPIOF_ODR_ODR2 ( -- x addr ) 2 bit GPIOF_ODR ; \ GPIOF_ODR_ODR2, Port output data y = 0..15
: GPIOF_ODR_ODR1 ( -- x addr ) 1 bit GPIOF_ODR ; \ GPIOF_ODR_ODR1, Port output data y = 0..15
: GPIOF_ODR_ODR0 ( -- x addr ) 0 bit GPIOF_ODR ; \ GPIOF_ODR_ODR0, Port output data y = 0..15

\ GPIOF_BSRR (write-only) Reset:0x00000000
: GPIOF_BSRR_BR15 ( -- ) 31 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR15, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR14 ( -- ) 30 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR14, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR13 ( -- ) 29 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR13, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR12 ( -- ) 28 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR12, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR11 ( -- ) 27 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR11, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR10 ( -- ) 26 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR10, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR9 ( -- ) 25 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR9, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR8 ( -- ) 24 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR8, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR7 ( -- ) 23 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR7, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR6 ( -- ) 22 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR6, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR5 ( -- ) 21 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR5, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR4 ( -- ) 20 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR4, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR3 ( -- ) 19 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR3, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR2 ( -- ) 18 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR2, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR1 ( -- ) 17 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR1, Port x reset bit y y = 0..15
: GPIOF_BSRR_BR0 ( -- ) 16 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR0, Port x set bit y y= 0..15
: GPIOF_BSRR_BS15 ( -- ) 15 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS15, Port x set bit y y= 0..15
: GPIOF_BSRR_BS14 ( -- ) 14 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS14, Port x set bit y y= 0..15
: GPIOF_BSRR_BS13 ( -- ) 13 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS13, Port x set bit y y= 0..15
: GPIOF_BSRR_BS12 ( -- ) 12 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS12, Port x set bit y y= 0..15
: GPIOF_BSRR_BS11 ( -- ) 11 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS11, Port x set bit y y= 0..15
: GPIOF_BSRR_BS10 ( -- ) 10 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS10, Port x set bit y y= 0..15
: GPIOF_BSRR_BS9 ( -- ) 9 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS9, Port x set bit y y= 0..15
: GPIOF_BSRR_BS8 ( -- ) 8 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS8, Port x set bit y y= 0..15
: GPIOF_BSRR_BS7 ( -- ) 7 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS7, Port x set bit y y= 0..15
: GPIOF_BSRR_BS6 ( -- ) 6 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS6, Port x set bit y y= 0..15
: GPIOF_BSRR_BS5 ( -- ) 5 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS5, Port x set bit y y= 0..15
: GPIOF_BSRR_BS4 ( -- ) 4 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS4, Port x set bit y y= 0..15
: GPIOF_BSRR_BS3 ( -- ) 3 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS3, Port x set bit y y= 0..15
: GPIOF_BSRR_BS2 ( -- ) 2 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS2, Port x set bit y y= 0..15
: GPIOF_BSRR_BS1 ( -- ) 1 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS1, Port x set bit y y= 0..15
: GPIOF_BSRR_BS0 ( -- ) 0 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS0, Port x set bit y y= 0..15

\ GPIOF_LCKR (read-write) Reset:0x00000000
: GPIOF_LCKR_LCKK ( -- x addr ) 16 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCKK, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK15 ( -- x addr ) 15 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK15, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK14 ( -- x addr ) 14 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK14, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK13 ( -- x addr ) 13 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK13, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK12 ( -- x addr ) 12 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK12, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK11 ( -- x addr ) 11 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK11, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK10 ( -- x addr ) 10 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK10, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK9 ( -- x addr ) 9 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK9, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK8 ( -- x addr ) 8 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK8, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK7 ( -- x addr ) 7 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK7, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK6 ( -- x addr ) 6 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK6, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK5 ( -- x addr ) 5 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK5, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK4 ( -- x addr ) 4 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK4, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK3 ( -- x addr ) 3 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK3, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK2 ( -- x addr ) 2 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK2, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK1 ( -- x addr ) 1 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK1, Port x lock bit y y= 0..15
: GPIOF_LCKR_LCK0 ( -- x addr ) 0 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK0, Port x lock bit y y= 0..15

\ GPIOF_AFRL (read-write) Reset:0x00000000
: GPIOF_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL7, Alternate function selection for port x bit y y = 0..7
: GPIOF_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL6, Alternate function selection for port x bit y y = 0..7
: GPIOF_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL5, Alternate function selection for port x bit y y = 0..7
: GPIOF_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL4, Alternate function selection for port x bit y y = 0..7
: GPIOF_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL3, Alternate function selection for port x bit y y = 0..7
: GPIOF_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL2, Alternate function selection for port x bit y y = 0..7
: GPIOF_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL1, Alternate function selection for port x bit y y = 0..7
: GPIOF_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOF_AFRL ; \ GPIOF_AFRL_AFRL0, Alternate function selection for port x bit y y = 0..7

\ GPIOF_AFRH (read-write) Reset:0x00000000
: GPIOF_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH15, Alternate function selection for port x bit y y = 8..15
: GPIOF_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH14, Alternate function selection for port x bit y y = 8..15
: GPIOF_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH13, Alternate function selection for port x bit y y = 8..15
: GPIOF_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH12, Alternate function selection for port x bit y y = 8..15
: GPIOF_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH11, Alternate function selection for port x bit y y = 8..15
: GPIOF_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH10, Alternate function selection for port x bit y y = 8..15
: GPIOF_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH9, Alternate function selection for port x bit y y = 8..15
: GPIOF_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOF_AFRH ; \ GPIOF_AFRH_AFRH8, Alternate function selection for port x bit y y = 8..15

\ GPIOF_BRR (read-write) Reset:0x00000000
: GPIOF_BRR_BR0 ( -- x addr ) 0 bit GPIOF_BRR ; \ GPIOF_BRR_BR0, Port D Reset bit 0
: GPIOF_BRR_BR1 ( -- x addr ) 1 bit GPIOF_BRR ; \ GPIOF_BRR_BR1, Port D Reset bit 1
: GPIOF_BRR_BR2 ( -- x addr ) 2 bit GPIOF_BRR ; \ GPIOF_BRR_BR2, Port D Reset bit 2
: GPIOF_BRR_BR3 ( -- x addr ) 3 bit GPIOF_BRR ; \ GPIOF_BRR_BR3, Port D Reset bit 3
: GPIOF_BRR_BR4 ( -- x addr ) 4 bit GPIOF_BRR ; \ GPIOF_BRR_BR4, Port D Reset bit 4
: GPIOF_BRR_BR5 ( -- x addr ) 5 bit GPIOF_BRR ; \ GPIOF_BRR_BR5, Port D Reset bit 5
: GPIOF_BRR_BR6 ( -- x addr ) 6 bit GPIOF_BRR ; \ GPIOF_BRR_BR6, Port D Reset bit 6
: GPIOF_BRR_BR7 ( -- x addr ) 7 bit GPIOF_BRR ; \ GPIOF_BRR_BR7, Port D Reset bit 7
: GPIOF_BRR_BR8 ( -- x addr ) 8 bit GPIOF_BRR ; \ GPIOF_BRR_BR8, Port D Reset bit 8
: GPIOF_BRR_BR9 ( -- x addr ) 9 bit GPIOF_BRR ; \ GPIOF_BRR_BR9, Port D Reset bit 9
: GPIOF_BRR_BR10 ( -- x addr ) 10 bit GPIOF_BRR ; \ GPIOF_BRR_BR10, Port D Reset bit 10
: GPIOF_BRR_BR11 ( -- x addr ) 11 bit GPIOF_BRR ; \ GPIOF_BRR_BR11, Port D Reset bit 11
: GPIOF_BRR_BR12 ( -- x addr ) 12 bit GPIOF_BRR ; \ GPIOF_BRR_BR12, Port D Reset bit 12
: GPIOF_BRR_BR13 ( -- x addr ) 13 bit GPIOF_BRR ; \ GPIOF_BRR_BR13, Port D Reset bit 13
: GPIOF_BRR_BR14 ( -- x addr ) 14 bit GPIOF_BRR ; \ GPIOF_BRR_BR14, Port D Reset bit 14
: GPIOF_BRR_BR15 ( -- x addr ) 15 bit GPIOF_BRR ; \ GPIOF_BRR_BR15, Port D Reset bit 15

\ GPIOE_MODER (read-write) Reset:0x00000000
: GPIOE_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER15, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER14, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER13, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER12, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER11, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER10, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER9, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER8, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER7, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER6, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER5, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER4, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER3, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER2, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER1, Port x configuration bits y = 0..15
: GPIOE_MODER_MODER0 ( %bb -- x addr ) GPIOE_MODER ; \ GPIOE_MODER_MODER0, Port x configuration bits y = 0..15

\ GPIOE_OTYPER (read-write) Reset:0x00000000
: GPIOE_OTYPER_OT15 ( -- x addr ) 15 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT15, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT14 ( -- x addr ) 14 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT14, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT13 ( -- x addr ) 13 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT13, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT12 ( -- x addr ) 12 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT12, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT11 ( -- x addr ) 11 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT11, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT10 ( -- x addr ) 10 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT10, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT9 ( -- x addr ) 9 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT9, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT8 ( -- x addr ) 8 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT8, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT7 ( -- x addr ) 7 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT7, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT6 ( -- x addr ) 6 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT6, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT5 ( -- x addr ) 5 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT5, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT4 ( -- x addr ) 4 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT4, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT3 ( -- x addr ) 3 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT3, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT2 ( -- x addr ) 2 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT2, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT1 ( -- x addr ) 1 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT1, Port x configuration bits y = 0..15
: GPIOE_OTYPER_OT0 ( -- x addr ) 0 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT0, Port x configuration bits y = 0..15

\ GPIOE_GPIOB_OSPEEDR (read-write) Reset:0x00000000
: GPIOE_GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y = 0..15
: GPIOE_GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOE_GPIOB_OSPEEDR ; \ GPIOE_GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y = 0..15

\ GPIOE_PUPDR (read-write) Reset:0x00000000
: GPIOE_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR15, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR14, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR13, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR12, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR11, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR10, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR9, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR8, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR7, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR6, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR5, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR4, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR3, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR2, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR1, Port x configuration bits y = 0..15
: GPIOE_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR0, Port x configuration bits y = 0..15

\ GPIOE_IDR (read-only) Reset:0x00000000
: GPIOE_IDR_IDR15? ( --  1|0 ) 15 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR15, Port input data y = 0..15
: GPIOE_IDR_IDR14? ( --  1|0 ) 14 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR14, Port input data y = 0..15
: GPIOE_IDR_IDR13? ( --  1|0 ) 13 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR13, Port input data y = 0..15
: GPIOE_IDR_IDR12? ( --  1|0 ) 12 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR12, Port input data y = 0..15
: GPIOE_IDR_IDR11? ( --  1|0 ) 11 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR11, Port input data y = 0..15
: GPIOE_IDR_IDR10? ( --  1|0 ) 10 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR10, Port input data y = 0..15
: GPIOE_IDR_IDR9? ( --  1|0 ) 9 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR9, Port input data y = 0..15
: GPIOE_IDR_IDR8? ( --  1|0 ) 8 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR8, Port input data y = 0..15
: GPIOE_IDR_IDR7? ( --  1|0 ) 7 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR7, Port input data y = 0..15
: GPIOE_IDR_IDR6? ( --  1|0 ) 6 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR6, Port input data y = 0..15
: GPIOE_IDR_IDR5? ( --  1|0 ) 5 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR5, Port input data y = 0..15
: GPIOE_IDR_IDR4? ( --  1|0 ) 4 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR4, Port input data y = 0..15
: GPIOE_IDR_IDR3? ( --  1|0 ) 3 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR3, Port input data y = 0..15
: GPIOE_IDR_IDR2? ( --  1|0 ) 2 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR2, Port input data y = 0..15
: GPIOE_IDR_IDR1? ( --  1|0 ) 1 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR1, Port input data y = 0..15
: GPIOE_IDR_IDR0? ( --  1|0 ) 0 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR0, Port input data y = 0..15

\ GPIOE_ODR (read-write) Reset:0x00000000
: GPIOE_ODR_ODR15 ( -- x addr ) 15 bit GPIOE_ODR ; \ GPIOE_ODR_ODR15, Port output data y = 0..15
: GPIOE_ODR_ODR14 ( -- x addr ) 14 bit GPIOE_ODR ; \ GPIOE_ODR_ODR14, Port output data y = 0..15
: GPIOE_ODR_ODR13 ( -- x addr ) 13 bit GPIOE_ODR ; \ GPIOE_ODR_ODR13, Port output data y = 0..15
: GPIOE_ODR_ODR12 ( -- x addr ) 12 bit GPIOE_ODR ; \ GPIOE_ODR_ODR12, Port output data y = 0..15
: GPIOE_ODR_ODR11 ( -- x addr ) 11 bit GPIOE_ODR ; \ GPIOE_ODR_ODR11, Port output data y = 0..15
: GPIOE_ODR_ODR10 ( -- x addr ) 10 bit GPIOE_ODR ; \ GPIOE_ODR_ODR10, Port output data y = 0..15
: GPIOE_ODR_ODR9 ( -- x addr ) 9 bit GPIOE_ODR ; \ GPIOE_ODR_ODR9, Port output data y = 0..15
: GPIOE_ODR_ODR8 ( -- x addr ) 8 bit GPIOE_ODR ; \ GPIOE_ODR_ODR8, Port output data y = 0..15
: GPIOE_ODR_ODR7 ( -- x addr ) 7 bit GPIOE_ODR ; \ GPIOE_ODR_ODR7, Port output data y = 0..15
: GPIOE_ODR_ODR6 ( -- x addr ) 6 bit GPIOE_ODR ; \ GPIOE_ODR_ODR6, Port output data y = 0..15
: GPIOE_ODR_ODR5 ( -- x addr ) 5 bit GPIOE_ODR ; \ GPIOE_ODR_ODR5, Port output data y = 0..15
: GPIOE_ODR_ODR4 ( -- x addr ) 4 bit GPIOE_ODR ; \ GPIOE_ODR_ODR4, Port output data y = 0..15
: GPIOE_ODR_ODR3 ( -- x addr ) 3 bit GPIOE_ODR ; \ GPIOE_ODR_ODR3, Port output data y = 0..15
: GPIOE_ODR_ODR2 ( -- x addr ) 2 bit GPIOE_ODR ; \ GPIOE_ODR_ODR2, Port output data y = 0..15
: GPIOE_ODR_ODR1 ( -- x addr ) 1 bit GPIOE_ODR ; \ GPIOE_ODR_ODR1, Port output data y = 0..15
: GPIOE_ODR_ODR0 ( -- x addr ) 0 bit GPIOE_ODR ; \ GPIOE_ODR_ODR0, Port output data y = 0..15

\ GPIOE_BSRR (write-only) Reset:0x00000000
: GPIOE_BSRR_BR15 ( -- ) 31 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR15, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR14 ( -- ) 30 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR14, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR13 ( -- ) 29 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR13, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR12 ( -- ) 28 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR12, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR11 ( -- ) 27 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR11, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR10 ( -- ) 26 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR10, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR9 ( -- ) 25 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR9, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR8 ( -- ) 24 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR8, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR7 ( -- ) 23 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR7, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR6 ( -- ) 22 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR6, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR5 ( -- ) 21 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR5, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR4 ( -- ) 20 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR4, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR3 ( -- ) 19 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR3, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR2 ( -- ) 18 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR2, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR1 ( -- ) 17 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR1, Port x reset bit y y = 0..15
: GPIOE_BSRR_BR0 ( -- ) 16 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR0, Port x set bit y y= 0..15
: GPIOE_BSRR_BS15 ( -- ) 15 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS15, Port x set bit y y= 0..15
: GPIOE_BSRR_BS14 ( -- ) 14 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS14, Port x set bit y y= 0..15
: GPIOE_BSRR_BS13 ( -- ) 13 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS13, Port x set bit y y= 0..15
: GPIOE_BSRR_BS12 ( -- ) 12 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS12, Port x set bit y y= 0..15
: GPIOE_BSRR_BS11 ( -- ) 11 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS11, Port x set bit y y= 0..15
: GPIOE_BSRR_BS10 ( -- ) 10 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS10, Port x set bit y y= 0..15
: GPIOE_BSRR_BS9 ( -- ) 9 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS9, Port x set bit y y= 0..15
: GPIOE_BSRR_BS8 ( -- ) 8 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS8, Port x set bit y y= 0..15
: GPIOE_BSRR_BS7 ( -- ) 7 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS7, Port x set bit y y= 0..15
: GPIOE_BSRR_BS6 ( -- ) 6 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS6, Port x set bit y y= 0..15
: GPIOE_BSRR_BS5 ( -- ) 5 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS5, Port x set bit y y= 0..15
: GPIOE_BSRR_BS4 ( -- ) 4 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS4, Port x set bit y y= 0..15
: GPIOE_BSRR_BS3 ( -- ) 3 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS3, Port x set bit y y= 0..15
: GPIOE_BSRR_BS2 ( -- ) 2 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS2, Port x set bit y y= 0..15
: GPIOE_BSRR_BS1 ( -- ) 1 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS1, Port x set bit y y= 0..15
: GPIOE_BSRR_BS0 ( -- ) 0 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS0, Port x set bit y y= 0..15

\ GPIOE_LCKR (read-write) Reset:0x00000000
: GPIOE_LCKR_LCKK ( -- x addr ) 16 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCKK, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK15 ( -- x addr ) 15 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK15, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK14 ( -- x addr ) 14 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK14, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK13 ( -- x addr ) 13 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK13, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK12 ( -- x addr ) 12 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK12, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK11 ( -- x addr ) 11 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK11, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK10 ( -- x addr ) 10 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK10, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK9 ( -- x addr ) 9 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK9, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK8 ( -- x addr ) 8 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK8, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK7 ( -- x addr ) 7 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK7, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK6 ( -- x addr ) 6 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK6, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK5 ( -- x addr ) 5 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK5, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK4 ( -- x addr ) 4 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK4, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK3 ( -- x addr ) 3 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK3, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK2 ( -- x addr ) 2 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK2, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK1 ( -- x addr ) 1 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK1, Port x lock bit y y= 0..15
: GPIOE_LCKR_LCK0 ( -- x addr ) 0 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK0, Port x lock bit y y= 0..15

\ GPIOE_AFRL (read-write) Reset:0x00000000
: GPIOE_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL7, Alternate function selection for port x bit y y = 0..7
: GPIOE_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL6, Alternate function selection for port x bit y y = 0..7
: GPIOE_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL5, Alternate function selection for port x bit y y = 0..7
: GPIOE_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL4, Alternate function selection for port x bit y y = 0..7
: GPIOE_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL3, Alternate function selection for port x bit y y = 0..7
: GPIOE_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL2, Alternate function selection for port x bit y y = 0..7
: GPIOE_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL1, Alternate function selection for port x bit y y = 0..7
: GPIOE_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOE_AFRL ; \ GPIOE_AFRL_AFRL0, Alternate function selection for port x bit y y = 0..7

\ GPIOE_AFRH (read-write) Reset:0x00000000
: GPIOE_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH15, Alternate function selection for port x bit y y = 8..15
: GPIOE_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH14, Alternate function selection for port x bit y y = 8..15
: GPIOE_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH13, Alternate function selection for port x bit y y = 8..15
: GPIOE_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH12, Alternate function selection for port x bit y y = 8..15
: GPIOE_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH11, Alternate function selection for port x bit y y = 8..15
: GPIOE_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH10, Alternate function selection for port x bit y y = 8..15
: GPIOE_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH9, Alternate function selection for port x bit y y = 8..15
: GPIOE_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOE_AFRH ; \ GPIOE_AFRH_AFRH8, Alternate function selection for port x bit y y = 8..15

\ GPIOE_BRR (read-write) Reset:0x00000000
: GPIOE_BRR_BR0 ( -- x addr ) 0 bit GPIOE_BRR ; \ GPIOE_BRR_BR0, Port D Reset bit 0
: GPIOE_BRR_BR1 ( -- x addr ) 1 bit GPIOE_BRR ; \ GPIOE_BRR_BR1, Port D Reset bit 1
: GPIOE_BRR_BR2 ( -- x addr ) 2 bit GPIOE_BRR ; \ GPIOE_BRR_BR2, Port D Reset bit 2
: GPIOE_BRR_BR3 ( -- x addr ) 3 bit GPIOE_BRR ; \ GPIOE_BRR_BR3, Port D Reset bit 3
: GPIOE_BRR_BR4 ( -- x addr ) 4 bit GPIOE_BRR ; \ GPIOE_BRR_BR4, Port D Reset bit 4
: GPIOE_BRR_BR5 ( -- x addr ) 5 bit GPIOE_BRR ; \ GPIOE_BRR_BR5, Port D Reset bit 5
: GPIOE_BRR_BR6 ( -- x addr ) 6 bit GPIOE_BRR ; \ GPIOE_BRR_BR6, Port D Reset bit 6
: GPIOE_BRR_BR7 ( -- x addr ) 7 bit GPIOE_BRR ; \ GPIOE_BRR_BR7, Port D Reset bit 7
: GPIOE_BRR_BR8 ( -- x addr ) 8 bit GPIOE_BRR ; \ GPIOE_BRR_BR8, Port D Reset bit 8
: GPIOE_BRR_BR9 ( -- x addr ) 9 bit GPIOE_BRR ; \ GPIOE_BRR_BR9, Port D Reset bit 9
: GPIOE_BRR_BR10 ( -- x addr ) 10 bit GPIOE_BRR ; \ GPIOE_BRR_BR10, Port D Reset bit 10
: GPIOE_BRR_BR11 ( -- x addr ) 11 bit GPIOE_BRR ; \ GPIOE_BRR_BR11, Port D Reset bit 11
: GPIOE_BRR_BR12 ( -- x addr ) 12 bit GPIOE_BRR ; \ GPIOE_BRR_BR12, Port D Reset bit 12
: GPIOE_BRR_BR13 ( -- x addr ) 13 bit GPIOE_BRR ; \ GPIOE_BRR_BR13, Port D Reset bit 13
: GPIOE_BRR_BR14 ( -- x addr ) 14 bit GPIOE_BRR ; \ GPIOE_BRR_BR14, Port D Reset bit 14
: GPIOE_BRR_BR15 ( -- x addr ) 15 bit GPIOE_BRR ; \ GPIOE_BRR_BR15, Port D Reset bit 15

\ GPIOB_MODER (read-write) Reset:0x00000280
: GPIOB_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER15, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER14, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER13, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER12, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER11, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER10, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER9, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER8, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER7, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER6, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER5, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER4, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER3, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER2, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER1, Port x configuration bits y = 0..15
: GPIOB_MODER_MODER0 ( %bb -- x addr ) GPIOB_MODER ; \ GPIOB_MODER_MODER0, Port x configuration bits y = 0..15

\ GPIOB_OTYPER (read-write) Reset:0x00000000
: GPIOB_OTYPER_OT15 ( -- x addr ) 15 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT15, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT14 ( -- x addr ) 14 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT14, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT13 ( -- x addr ) 13 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT13, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT12 ( -- x addr ) 12 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT12, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT11 ( -- x addr ) 11 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT11, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT10 ( -- x addr ) 10 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT10, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT9 ( -- x addr ) 9 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT9, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT8 ( -- x addr ) 8 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT8, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT7 ( -- x addr ) 7 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT7, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT6 ( -- x addr ) 6 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT6, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT5 ( -- x addr ) 5 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT5, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT4 ( -- x addr ) 4 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT4, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT3 ( -- x addr ) 3 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT3, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT2 ( -- x addr ) 2 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT2, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT1 ( -- x addr ) 1 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT1, Port x configuration bits y = 0..15
: GPIOB_OTYPER_OT0 ( -- x addr ) 0 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT0, Port x configuration bits y = 0..15

\ GPIOB_GPIOB_OSPEEDR (read-write) Reset:0x000000C0
: GPIOB_GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y = 0..15
: GPIOB_GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOB_GPIOB_OSPEEDR ; \ GPIOB_GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y = 0..15

\ GPIOB_PUPDR (read-write) Reset:0x00000100
: GPIOB_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR15, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR14, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR13, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR12, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR11, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR10, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR9, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR8, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR7, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR6, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR5, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR4, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR3, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR2, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR1, Port x configuration bits y = 0..15
: GPIOB_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR0, Port x configuration bits y = 0..15

\ GPIOB_IDR (read-only) Reset:0x00000000
: GPIOB_IDR_IDR15? ( --  1|0 ) 15 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR15, Port input data y = 0..15
: GPIOB_IDR_IDR14? ( --  1|0 ) 14 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR14, Port input data y = 0..15
: GPIOB_IDR_IDR13? ( --  1|0 ) 13 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR13, Port input data y = 0..15
: GPIOB_IDR_IDR12? ( --  1|0 ) 12 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR12, Port input data y = 0..15
: GPIOB_IDR_IDR11? ( --  1|0 ) 11 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR11, Port input data y = 0..15
: GPIOB_IDR_IDR10? ( --  1|0 ) 10 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR10, Port input data y = 0..15
: GPIOB_IDR_IDR9? ( --  1|0 ) 9 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR9, Port input data y = 0..15
: GPIOB_IDR_IDR8? ( --  1|0 ) 8 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR8, Port input data y = 0..15
: GPIOB_IDR_IDR7? ( --  1|0 ) 7 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR7, Port input data y = 0..15
: GPIOB_IDR_IDR6? ( --  1|0 ) 6 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR6, Port input data y = 0..15
: GPIOB_IDR_IDR5? ( --  1|0 ) 5 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR5, Port input data y = 0..15
: GPIOB_IDR_IDR4? ( --  1|0 ) 4 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR4, Port input data y = 0..15
: GPIOB_IDR_IDR3? ( --  1|0 ) 3 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR3, Port input data y = 0..15
: GPIOB_IDR_IDR2? ( --  1|0 ) 2 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR2, Port input data y = 0..15
: GPIOB_IDR_IDR1? ( --  1|0 ) 1 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR1, Port input data y = 0..15
: GPIOB_IDR_IDR0? ( --  1|0 ) 0 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR0, Port input data y = 0..15

\ GPIOB_ODR (read-write) Reset:0x00000000
: GPIOB_ODR_ODR15 ( -- x addr ) 15 bit GPIOB_ODR ; \ GPIOB_ODR_ODR15, Port output data y = 0..15
: GPIOB_ODR_ODR14 ( -- x addr ) 14 bit GPIOB_ODR ; \ GPIOB_ODR_ODR14, Port output data y = 0..15
: GPIOB_ODR_ODR13 ( -- x addr ) 13 bit GPIOB_ODR ; \ GPIOB_ODR_ODR13, Port output data y = 0..15
: GPIOB_ODR_ODR12 ( -- x addr ) 12 bit GPIOB_ODR ; \ GPIOB_ODR_ODR12, Port output data y = 0..15
: GPIOB_ODR_ODR11 ( -- x addr ) 11 bit GPIOB_ODR ; \ GPIOB_ODR_ODR11, Port output data y = 0..15
: GPIOB_ODR_ODR10 ( -- x addr ) 10 bit GPIOB_ODR ; \ GPIOB_ODR_ODR10, Port output data y = 0..15
: GPIOB_ODR_ODR9 ( -- x addr ) 9 bit GPIOB_ODR ; \ GPIOB_ODR_ODR9, Port output data y = 0..15
: GPIOB_ODR_ODR8 ( -- x addr ) 8 bit GPIOB_ODR ; \ GPIOB_ODR_ODR8, Port output data y = 0..15
: GPIOB_ODR_ODR7 ( -- x addr ) 7 bit GPIOB_ODR ; \ GPIOB_ODR_ODR7, Port output data y = 0..15
: GPIOB_ODR_ODR6 ( -- x addr ) 6 bit GPIOB_ODR ; \ GPIOB_ODR_ODR6, Port output data y = 0..15
: GPIOB_ODR_ODR5 ( -- x addr ) 5 bit GPIOB_ODR ; \ GPIOB_ODR_ODR5, Port output data y = 0..15
: GPIOB_ODR_ODR4 ( -- x addr ) 4 bit GPIOB_ODR ; \ GPIOB_ODR_ODR4, Port output data y = 0..15
: GPIOB_ODR_ODR3 ( -- x addr ) 3 bit GPIOB_ODR ; \ GPIOB_ODR_ODR3, Port output data y = 0..15
: GPIOB_ODR_ODR2 ( -- x addr ) 2 bit GPIOB_ODR ; \ GPIOB_ODR_ODR2, Port output data y = 0..15
: GPIOB_ODR_ODR1 ( -- x addr ) 1 bit GPIOB_ODR ; \ GPIOB_ODR_ODR1, Port output data y = 0..15
: GPIOB_ODR_ODR0 ( -- x addr ) 0 bit GPIOB_ODR ; \ GPIOB_ODR_ODR0, Port output data y = 0..15

\ GPIOB_BSRR (write-only) Reset:0x00000000
: GPIOB_BSRR_BR15 ( -- ) 31 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR15, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR14 ( -- ) 30 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR14, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR13 ( -- ) 29 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR13, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR12 ( -- ) 28 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR12, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR11 ( -- ) 27 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR11, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR10 ( -- ) 26 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR10, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR9 ( -- ) 25 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR9, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR8 ( -- ) 24 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR8, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR7 ( -- ) 23 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR7, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR6 ( -- ) 22 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR6, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR5 ( -- ) 21 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR5, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR4 ( -- ) 20 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR4, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR3 ( -- ) 19 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR3, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR2 ( -- ) 18 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR2, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR1 ( -- ) 17 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR1, Port x reset bit y y = 0..15
: GPIOB_BSRR_BR0 ( -- ) 16 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR0, Port x set bit y y= 0..15
: GPIOB_BSRR_BS15 ( -- ) 15 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS15, Port x set bit y y= 0..15
: GPIOB_BSRR_BS14 ( -- ) 14 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS14, Port x set bit y y= 0..15
: GPIOB_BSRR_BS13 ( -- ) 13 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS13, Port x set bit y y= 0..15
: GPIOB_BSRR_BS12 ( -- ) 12 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS12, Port x set bit y y= 0..15
: GPIOB_BSRR_BS11 ( -- ) 11 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS11, Port x set bit y y= 0..15
: GPIOB_BSRR_BS10 ( -- ) 10 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS10, Port x set bit y y= 0..15
: GPIOB_BSRR_BS9 ( -- ) 9 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS9, Port x set bit y y= 0..15
: GPIOB_BSRR_BS8 ( -- ) 8 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS8, Port x set bit y y= 0..15
: GPIOB_BSRR_BS7 ( -- ) 7 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS7, Port x set bit y y= 0..15
: GPIOB_BSRR_BS6 ( -- ) 6 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS6, Port x set bit y y= 0..15
: GPIOB_BSRR_BS5 ( -- ) 5 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS5, Port x set bit y y= 0..15
: GPIOB_BSRR_BS4 ( -- ) 4 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS4, Port x set bit y y= 0..15
: GPIOB_BSRR_BS3 ( -- ) 3 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS3, Port x set bit y y= 0..15
: GPIOB_BSRR_BS2 ( -- ) 2 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS2, Port x set bit y y= 0..15
: GPIOB_BSRR_BS1 ( -- ) 1 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS1, Port x set bit y y= 0..15
: GPIOB_BSRR_BS0 ( -- ) 0 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS0, Port x set bit y y= 0..15

\ GPIOB_LCKR (read-write) Reset:0x00000000
: GPIOB_LCKR_LCKK ( -- x addr ) 16 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCKK, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK15 ( -- x addr ) 15 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK15, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK14 ( -- x addr ) 14 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK14, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK13 ( -- x addr ) 13 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK13, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK12 ( -- x addr ) 12 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK12, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK11 ( -- x addr ) 11 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK11, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK10 ( -- x addr ) 10 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK10, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK9 ( -- x addr ) 9 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK9, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK8 ( -- x addr ) 8 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK8, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK7 ( -- x addr ) 7 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK7, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK6 ( -- x addr ) 6 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK6, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK5 ( -- x addr ) 5 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK5, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK4 ( -- x addr ) 4 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK4, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK3 ( -- x addr ) 3 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK3, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK2 ( -- x addr ) 2 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK2, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK1 ( -- x addr ) 1 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK1, Port x lock bit y y= 0..15
: GPIOB_LCKR_LCK0 ( -- x addr ) 0 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK0, Port x lock bit y y= 0..15

\ GPIOB_AFRL (read-write) Reset:0x00000000
: GPIOB_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL7, Alternate function selection for port x bit y y = 0..7
: GPIOB_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL6, Alternate function selection for port x bit y y = 0..7
: GPIOB_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL5, Alternate function selection for port x bit y y = 0..7
: GPIOB_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL4, Alternate function selection for port x bit y y = 0..7
: GPIOB_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL3, Alternate function selection for port x bit y y = 0..7
: GPIOB_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL2, Alternate function selection for port x bit y y = 0..7
: GPIOB_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL1, Alternate function selection for port x bit y y = 0..7
: GPIOB_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOB_AFRL ; \ GPIOB_AFRL_AFRL0, Alternate function selection for port x bit y y = 0..7

\ GPIOB_AFRH (read-write) Reset:0x00000000
: GPIOB_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH15, Alternate function selection for port x bit y y = 8..15
: GPIOB_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH14, Alternate function selection for port x bit y y = 8..15
: GPIOB_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH13, Alternate function selection for port x bit y y = 8..15
: GPIOB_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH12, Alternate function selection for port x bit y y = 8..15
: GPIOB_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH11, Alternate function selection for port x bit y y = 8..15
: GPIOB_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH10, Alternate function selection for port x bit y y = 8..15
: GPIOB_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH9, Alternate function selection for port x bit y y = 8..15
: GPIOB_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOB_AFRH ; \ GPIOB_AFRH_AFRH8, Alternate function selection for port x bit y y = 8..15

\ GPIOB_BRR (read-write) Reset:0x00000000
: GPIOB_BRR_BR0 ( -- x addr ) 0 bit GPIOB_BRR ; \ GPIOB_BRR_BR0, Port B Reset bit 0
: GPIOB_BRR_BR1 ( -- x addr ) 1 bit GPIOB_BRR ; \ GPIOB_BRR_BR1, Port B Reset bit 1
: GPIOB_BRR_BR2 ( -- x addr ) 2 bit GPIOB_BRR ; \ GPIOB_BRR_BR2, Port B Reset bit 2
: GPIOB_BRR_BR3 ( -- x addr ) 3 bit GPIOB_BRR ; \ GPIOB_BRR_BR3, Port B Reset bit 3
: GPIOB_BRR_BR4 ( -- x addr ) 4 bit GPIOB_BRR ; \ GPIOB_BRR_BR4, Port B Reset bit 4
: GPIOB_BRR_BR5 ( -- x addr ) 5 bit GPIOB_BRR ; \ GPIOB_BRR_BR5, Port B Reset bit 5
: GPIOB_BRR_BR6 ( -- x addr ) 6 bit GPIOB_BRR ; \ GPIOB_BRR_BR6, Port B Reset bit 6
: GPIOB_BRR_BR7 ( -- x addr ) 7 bit GPIOB_BRR ; \ GPIOB_BRR_BR7, Port B Reset bit 7
: GPIOB_BRR_BR8 ( -- x addr ) 8 bit GPIOB_BRR ; \ GPIOB_BRR_BR8, Port B Reset bit 8
: GPIOB_BRR_BR9 ( -- x addr ) 9 bit GPIOB_BRR ; \ GPIOB_BRR_BR9, Port B Reset bit 9
: GPIOB_BRR_BR10 ( -- x addr ) 10 bit GPIOB_BRR ; \ GPIOB_BRR_BR10, Port B Reset bit 10
: GPIOB_BRR_BR11 ( -- x addr ) 11 bit GPIOB_BRR ; \ GPIOB_BRR_BR11, Port B Reset bit 11
: GPIOB_BRR_BR12 ( -- x addr ) 12 bit GPIOB_BRR ; \ GPIOB_BRR_BR12, Port B Reset bit 12
: GPIOB_BRR_BR13 ( -- x addr ) 13 bit GPIOB_BRR ; \ GPIOB_BRR_BR13, Port B Reset bit 13
: GPIOB_BRR_BR14 ( -- x addr ) 14 bit GPIOB_BRR ; \ GPIOB_BRR_BR14, Port B Reset bit 14
: GPIOB_BRR_BR15 ( -- x addr ) 15 bit GPIOB_BRR ; \ GPIOB_BRR_BR15, Port B Reset bit 15

\ GPIOA_MODER (read-write) Reset:0xA8000000
: GPIOA_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER15, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER14, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER13, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER12, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER11, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER10, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER9, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER8, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER7, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER6, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER5, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER4, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER3, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER2, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER1, Port x configuration bits y = 0..15
: GPIOA_MODER_MODER0 ( %bb -- x addr ) GPIOA_MODER ; \ GPIOA_MODER_MODER0, Port x configuration bits y = 0..15

\ GPIOA_OTYPER (read-write) Reset:0x00000000
: GPIOA_OTYPER_OT15 ( -- x addr ) 15 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT15, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT14 ( -- x addr ) 14 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT14, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT13 ( -- x addr ) 13 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT13, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT12 ( -- x addr ) 12 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT12, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT11 ( -- x addr ) 11 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT11, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT10 ( -- x addr ) 10 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT10, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT9 ( -- x addr ) 9 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT9, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT8 ( -- x addr ) 8 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT8, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT7 ( -- x addr ) 7 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT7, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT6 ( -- x addr ) 6 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT6, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT5 ( -- x addr ) 5 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT5, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT4 ( -- x addr ) 4 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT4, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT3 ( -- x addr ) 3 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT3, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT2 ( -- x addr ) 2 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT2, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT1 ( -- x addr ) 1 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT1, Port x configuration bits y = 0..15
: GPIOA_OTYPER_OT0 ( -- x addr ) 0 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT0, Port x configuration bits y = 0..15

\ GPIOA_GPIOB_OSPEEDR (read-write) Reset:0x00000000
: GPIOA_GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y = 0..15
: GPIOA_GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOA_GPIOB_OSPEEDR ; \ GPIOA_GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y = 0..15

\ GPIOA_PUPDR (read-write) Reset:0x64000000
: GPIOA_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR15, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR14, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR13, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR12, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR11, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR10, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR9, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR8, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR7, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR6, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR5, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR4, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR3, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR2, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR1, Port x configuration bits y = 0..15
: GPIOA_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR0, Port x configuration bits y = 0..15

\ GPIOA_IDR (read-only) Reset:0x00000000
: GPIOA_IDR_IDR15? ( --  1|0 ) 15 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR15, Port input data y = 0..15
: GPIOA_IDR_IDR14? ( --  1|0 ) 14 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR14, Port input data y = 0..15
: GPIOA_IDR_IDR13? ( --  1|0 ) 13 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR13, Port input data y = 0..15
: GPIOA_IDR_IDR12? ( --  1|0 ) 12 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR12, Port input data y = 0..15
: GPIOA_IDR_IDR11? ( --  1|0 ) 11 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR11, Port input data y = 0..15
: GPIOA_IDR_IDR10? ( --  1|0 ) 10 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR10, Port input data y = 0..15
: GPIOA_IDR_IDR9? ( --  1|0 ) 9 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR9, Port input data y = 0..15
: GPIOA_IDR_IDR8? ( --  1|0 ) 8 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR8, Port input data y = 0..15
: GPIOA_IDR_IDR7? ( --  1|0 ) 7 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR7, Port input data y = 0..15
: GPIOA_IDR_IDR6? ( --  1|0 ) 6 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR6, Port input data y = 0..15
: GPIOA_IDR_IDR5? ( --  1|0 ) 5 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR5, Port input data y = 0..15
: GPIOA_IDR_IDR4? ( --  1|0 ) 4 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR4, Port input data y = 0..15
: GPIOA_IDR_IDR3? ( --  1|0 ) 3 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR3, Port input data y = 0..15
: GPIOA_IDR_IDR2? ( --  1|0 ) 2 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR2, Port input data y = 0..15
: GPIOA_IDR_IDR1? ( --  1|0 ) 1 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR1, Port input data y = 0..15
: GPIOA_IDR_IDR0? ( --  1|0 ) 0 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR0, Port input data y = 0..15

\ GPIOA_ODR (read-write) Reset:0x00000000
: GPIOA_ODR_ODR15 ( -- x addr ) 15 bit GPIOA_ODR ; \ GPIOA_ODR_ODR15, Port output data y = 0..15
: GPIOA_ODR_ODR14 ( -- x addr ) 14 bit GPIOA_ODR ; \ GPIOA_ODR_ODR14, Port output data y = 0..15
: GPIOA_ODR_ODR13 ( -- x addr ) 13 bit GPIOA_ODR ; \ GPIOA_ODR_ODR13, Port output data y = 0..15
: GPIOA_ODR_ODR12 ( -- x addr ) 12 bit GPIOA_ODR ; \ GPIOA_ODR_ODR12, Port output data y = 0..15
: GPIOA_ODR_ODR11 ( -- x addr ) 11 bit GPIOA_ODR ; \ GPIOA_ODR_ODR11, Port output data y = 0..15
: GPIOA_ODR_ODR10 ( -- x addr ) 10 bit GPIOA_ODR ; \ GPIOA_ODR_ODR10, Port output data y = 0..15
: GPIOA_ODR_ODR9 ( -- x addr ) 9 bit GPIOA_ODR ; \ GPIOA_ODR_ODR9, Port output data y = 0..15
: GPIOA_ODR_ODR8 ( -- x addr ) 8 bit GPIOA_ODR ; \ GPIOA_ODR_ODR8, Port output data y = 0..15
: GPIOA_ODR_ODR7 ( -- x addr ) 7 bit GPIOA_ODR ; \ GPIOA_ODR_ODR7, Port output data y = 0..15
: GPIOA_ODR_ODR6 ( -- x addr ) 6 bit GPIOA_ODR ; \ GPIOA_ODR_ODR6, Port output data y = 0..15
: GPIOA_ODR_ODR5 ( -- x addr ) 5 bit GPIOA_ODR ; \ GPIOA_ODR_ODR5, Port output data y = 0..15
: GPIOA_ODR_ODR4 ( -- x addr ) 4 bit GPIOA_ODR ; \ GPIOA_ODR_ODR4, Port output data y = 0..15
: GPIOA_ODR_ODR3 ( -- x addr ) 3 bit GPIOA_ODR ; \ GPIOA_ODR_ODR3, Port output data y = 0..15
: GPIOA_ODR_ODR2 ( -- x addr ) 2 bit GPIOA_ODR ; \ GPIOA_ODR_ODR2, Port output data y = 0..15
: GPIOA_ODR_ODR1 ( -- x addr ) 1 bit GPIOA_ODR ; \ GPIOA_ODR_ODR1, Port output data y = 0..15
: GPIOA_ODR_ODR0 ( -- x addr ) 0 bit GPIOA_ODR ; \ GPIOA_ODR_ODR0, Port output data y = 0..15

\ GPIOA_BSRR (write-only) Reset:0x00000000
: GPIOA_BSRR_BR15 ( -- ) 31 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR15, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR14 ( -- ) 30 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR14, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR13 ( -- ) 29 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR13, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR12 ( -- ) 28 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR12, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR11 ( -- ) 27 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR11, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR10 ( -- ) 26 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR10, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR9 ( -- ) 25 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR9, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR8 ( -- ) 24 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR8, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR7 ( -- ) 23 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR7, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR6 ( -- ) 22 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR6, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR5 ( -- ) 21 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR5, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR4 ( -- ) 20 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR4, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR3 ( -- ) 19 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR3, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR2 ( -- ) 18 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR2, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR1 ( -- ) 17 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR1, Port x reset bit y y = 0..15
: GPIOA_BSRR_BR0 ( -- ) 16 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR0, Port x set bit y y= 0..15
: GPIOA_BSRR_BS15 ( -- ) 15 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS15, Port x set bit y y= 0..15
: GPIOA_BSRR_BS14 ( -- ) 14 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS14, Port x set bit y y= 0..15
: GPIOA_BSRR_BS13 ( -- ) 13 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS13, Port x set bit y y= 0..15
: GPIOA_BSRR_BS12 ( -- ) 12 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS12, Port x set bit y y= 0..15
: GPIOA_BSRR_BS11 ( -- ) 11 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS11, Port x set bit y y= 0..15
: GPIOA_BSRR_BS10 ( -- ) 10 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS10, Port x set bit y y= 0..15
: GPIOA_BSRR_BS9 ( -- ) 9 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS9, Port x set bit y y= 0..15
: GPIOA_BSRR_BS8 ( -- ) 8 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS8, Port x set bit y y= 0..15
: GPIOA_BSRR_BS7 ( -- ) 7 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS7, Port x set bit y y= 0..15
: GPIOA_BSRR_BS6 ( -- ) 6 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS6, Port x set bit y y= 0..15
: GPIOA_BSRR_BS5 ( -- ) 5 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS5, Port x set bit y y= 0..15
: GPIOA_BSRR_BS4 ( -- ) 4 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS4, Port x set bit y y= 0..15
: GPIOA_BSRR_BS3 ( -- ) 3 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS3, Port x set bit y y= 0..15
: GPIOA_BSRR_BS2 ( -- ) 2 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS2, Port x set bit y y= 0..15
: GPIOA_BSRR_BS1 ( -- ) 1 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS1, Port x set bit y y= 0..15
: GPIOA_BSRR_BS0 ( -- ) 0 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS0, Port x set bit y y= 0..15

\ GPIOA_LCKR (read-write) Reset:0x00000000
: GPIOA_LCKR_LCKK ( -- x addr ) 16 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCKK, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK15 ( -- x addr ) 15 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK15, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK14 ( -- x addr ) 14 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK14, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK13 ( -- x addr ) 13 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK13, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK12 ( -- x addr ) 12 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK12, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK11 ( -- x addr ) 11 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK11, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK10 ( -- x addr ) 10 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK10, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK9 ( -- x addr ) 9 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK9, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK8 ( -- x addr ) 8 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK8, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK7 ( -- x addr ) 7 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK7, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK6 ( -- x addr ) 6 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK6, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK5 ( -- x addr ) 5 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK5, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK4 ( -- x addr ) 4 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK4, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK3 ( -- x addr ) 3 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK3, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK2 ( -- x addr ) 2 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK2, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK1 ( -- x addr ) 1 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK1, Port x lock bit y y= 0..15
: GPIOA_LCKR_LCK0 ( -- x addr ) 0 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK0, Port x lock bit y y= 0..15

\ GPIOA_AFRL (read-write) Reset:0x00000000
: GPIOA_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL7, Alternate function selection for port x bit y y = 0..7
: GPIOA_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL6, Alternate function selection for port x bit y y = 0..7
: GPIOA_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL5, Alternate function selection for port x bit y y = 0..7
: GPIOA_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL4, Alternate function selection for port x bit y y = 0..7
: GPIOA_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL3, Alternate function selection for port x bit y y = 0..7
: GPIOA_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL2, Alternate function selection for port x bit y y = 0..7
: GPIOA_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL1, Alternate function selection for port x bit y y = 0..7
: GPIOA_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOA_AFRL ; \ GPIOA_AFRL_AFRL0, Alternate function selection for port x bit y y = 0..7

\ GPIOA_AFRH (read-write) Reset:0x00000000
: GPIOA_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH15, Alternate function selection for port x bit y y = 8..15
: GPIOA_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH14, Alternate function selection for port x bit y y = 8..15
: GPIOA_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH13, Alternate function selection for port x bit y y = 8..15
: GPIOA_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH12, Alternate function selection for port x bit y y = 8..15
: GPIOA_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH11, Alternate function selection for port x bit y y = 8..15
: GPIOA_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH10, Alternate function selection for port x bit y y = 8..15
: GPIOA_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH9, Alternate function selection for port x bit y y = 8..15
: GPIOA_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOA_AFRH ; \ GPIOA_AFRH_AFRH8, Alternate function selection for port x bit y y = 8..15

\ GPIOA_BRR (read-write) Reset:0x00000000
: GPIOA_BRR_BR0 ( -- x addr ) 0 bit GPIOA_BRR ; \ GPIOA_BRR_BR0, Port A Reset bit 0
: GPIOA_BRR_BR1 ( -- x addr ) 1 bit GPIOA_BRR ; \ GPIOA_BRR_BR1, Port A Reset bit 1
: GPIOA_BRR_BR2 ( -- x addr ) 2 bit GPIOA_BRR ; \ GPIOA_BRR_BR2, Port A Reset bit 2
: GPIOA_BRR_BR3 ( -- x addr ) 3 bit GPIOA_BRR ; \ GPIOA_BRR_BR3, Port A Reset bit 3
: GPIOA_BRR_BR4 ( -- x addr ) 4 bit GPIOA_BRR ; \ GPIOA_BRR_BR4, Port A Reset bit 4
: GPIOA_BRR_BR5 ( -- x addr ) 5 bit GPIOA_BRR ; \ GPIOA_BRR_BR5, Port A Reset bit 5
: GPIOA_BRR_BR6 ( -- x addr ) 6 bit GPIOA_BRR ; \ GPIOA_BRR_BR6, Port A Reset bit 6
: GPIOA_BRR_BR7 ( -- x addr ) 7 bit GPIOA_BRR ; \ GPIOA_BRR_BR7, Port A Reset bit 7
: GPIOA_BRR_BR8 ( -- x addr ) 8 bit GPIOA_BRR ; \ GPIOA_BRR_BR8, Port A Reset bit 8
: GPIOA_BRR_BR9 ( -- x addr ) 9 bit GPIOA_BRR ; \ GPIOA_BRR_BR9, Port A Reset bit 9
: GPIOA_BRR_BR10 ( -- x addr ) 10 bit GPIOA_BRR ; \ GPIOA_BRR_BR10, Port A Reset bit 10
: GPIOA_BRR_BR11 ( -- x addr ) 11 bit GPIOA_BRR ; \ GPIOA_BRR_BR11, Port A Reset bit 11
: GPIOA_BRR_BR12 ( -- x addr ) 12 bit GPIOA_BRR ; \ GPIOA_BRR_BR12, Port A Reset bit 12
: GPIOA_BRR_BR13 ( -- x addr ) 13 bit GPIOA_BRR ; \ GPIOA_BRR_BR13, Port A Reset bit 13
: GPIOA_BRR_BR14 ( -- x addr ) 14 bit GPIOA_BRR ; \ GPIOA_BRR_BR14, Port A Reset bit 14
: GPIOA_BRR_BR15 ( -- x addr ) 15 bit GPIOA_BRR ; \ GPIOA_BRR_BR15, Port A Reset bit 15

\ SYSCFG_MEMRM (read-write) Reset:0x00000000
: SYSCFG_MEMRM_MEM_MODE ( %bbb -- x addr ) SYSCFG_MEMRM ; \ SYSCFG_MEMRM_MEM_MODE, Memory mapping selection
: SYSCFG_MEMRM_FB_MODE ( -- x addr ) 8 bit SYSCFG_MEMRM ; \ SYSCFG_MEMRM_FB_MODE, Flash bank mode selection
: SYSCFG_MEMRM_SWP_FMC ( %bb -- x addr ) 10 lshift SYSCFG_MEMRM ; \ SYSCFG_MEMRM_SWP_FMC, FMC memory mapping swap

\ SYSCFG_PMC (read-write) Reset:0x00000000
: SYSCFG_PMC_MII_RMII_SEL ( -- x addr ) 23 bit SYSCFG_PMC ; \ SYSCFG_PMC_MII_RMII_SEL, Ethernet PHY interface selection
: SYSCFG_PMC_ADC1DC2 ( -- x addr ) 16 bit SYSCFG_PMC ; \ SYSCFG_PMC_ADC1DC2, ADC1DC2
: SYSCFG_PMC_ADC2DC2 ( -- x addr ) 17 bit SYSCFG_PMC ; \ SYSCFG_PMC_ADC2DC2, ADC2DC2
: SYSCFG_PMC_ADC3DC2 ( -- x addr ) 18 bit SYSCFG_PMC ; \ SYSCFG_PMC_ADC3DC2, ADC3DC2

\ SYSCFG_EXTICR1 (read-write) Reset:0x0000
: SYSCFG_EXTICR1_EXTI3 ( %bbbb -- x addr ) 12 lshift SYSCFG_EXTICR1 ; \ SYSCFG_EXTICR1_EXTI3, EXTI x configuration x = 0 to 3
: SYSCFG_EXTICR1_EXTI2 ( %bbbb -- x addr ) 8 lshift SYSCFG_EXTICR1 ; \ SYSCFG_EXTICR1_EXTI2, EXTI x configuration x = 0 to 3
: SYSCFG_EXTICR1_EXTI1 ( %bbbb -- x addr ) 4 lshift SYSCFG_EXTICR1 ; \ SYSCFG_EXTICR1_EXTI1, EXTI x configuration x = 0 to 3
: SYSCFG_EXTICR1_EXTI0 ( %bbbb -- x addr ) SYSCFG_EXTICR1 ; \ SYSCFG_EXTICR1_EXTI0, EXTI x configuration x = 0 to 3

\ SYSCFG_EXTICR2 (read-write) Reset:0x0000
: SYSCFG_EXTICR2_EXTI7 ( %bbbb -- x addr ) 12 lshift SYSCFG_EXTICR2 ; \ SYSCFG_EXTICR2_EXTI7, EXTI x configuration x = 4 to 7
: SYSCFG_EXTICR2_EXTI6 ( %bbbb -- x addr ) 8 lshift SYSCFG_EXTICR2 ; \ SYSCFG_EXTICR2_EXTI6, EXTI x configuration x = 4 to 7
: SYSCFG_EXTICR2_EXTI5 ( %bbbb -- x addr ) 4 lshift SYSCFG_EXTICR2 ; \ SYSCFG_EXTICR2_EXTI5, EXTI x configuration x = 4 to 7
: SYSCFG_EXTICR2_EXTI4 ( %bbbb -- x addr ) SYSCFG_EXTICR2 ; \ SYSCFG_EXTICR2_EXTI4, EXTI x configuration x = 4 to 7

\ SYSCFG_EXTICR3 (read-write) Reset:0x0000
: SYSCFG_EXTICR3_EXTI11 ( %bbbb -- x addr ) 12 lshift SYSCFG_EXTICR3 ; \ SYSCFG_EXTICR3_EXTI11, EXTI x configuration x = 8 to 11
: SYSCFG_EXTICR3_EXTI10 ( %bbbb -- x addr ) 8 lshift SYSCFG_EXTICR3 ; \ SYSCFG_EXTICR3_EXTI10, EXTI10
: SYSCFG_EXTICR3_EXTI9 ( %bbbb -- x addr ) 4 lshift SYSCFG_EXTICR3 ; \ SYSCFG_EXTICR3_EXTI9, EXTI x configuration x = 8 to 11
: SYSCFG_EXTICR3_EXTI8 ( %bbbb -- x addr ) SYSCFG_EXTICR3 ; \ SYSCFG_EXTICR3_EXTI8, EXTI x configuration x = 8 to 11

\ SYSCFG_EXTICR4 (read-write) Reset:0x0000
: SYSCFG_EXTICR4_EXTI15 ( %bbbb -- x addr ) 12 lshift SYSCFG_EXTICR4 ; \ SYSCFG_EXTICR4_EXTI15, EXTI x configuration x = 12 to 15
: SYSCFG_EXTICR4_EXTI14 ( %bbbb -- x addr ) 8 lshift SYSCFG_EXTICR4 ; \ SYSCFG_EXTICR4_EXTI14, EXTI x configuration x = 12 to 15
: SYSCFG_EXTICR4_EXTI13 ( %bbbb -- x addr ) 4 lshift SYSCFG_EXTICR4 ; \ SYSCFG_EXTICR4_EXTI13, EXTI x configuration x = 12 to 15
: SYSCFG_EXTICR4_EXTI12 ( %bbbb -- x addr ) SYSCFG_EXTICR4 ; \ SYSCFG_EXTICR4_EXTI12, EXTI x configuration x = 12 to 15

\ SYSCFG_CMPCR (read-only) Reset:0x00000000
: SYSCFG_CMPCR_READY? ( --  1|0 ) 8 bit SYSCFG_CMPCR bit@ ; \ SYSCFG_CMPCR_READY, READY
: SYSCFG_CMPCR_CMP_PD? ( --  1|0 ) 0 bit SYSCFG_CMPCR bit@ ; \ SYSCFG_CMPCR_CMP_PD, Compensation cell power-down

\ SPI1_CR1 (read-write) Reset:0x0000
: SPI1_CR1_BIDIMODE ( -- x addr ) 15 bit SPI1_CR1 ; \ SPI1_CR1_BIDIMODE, Bidirectional data mode enable
: SPI1_CR1_BIDIOE ( -- x addr ) 14 bit SPI1_CR1 ; \ SPI1_CR1_BIDIOE, Output enable in bidirectional mode
: SPI1_CR1_CRCEN ( -- x addr ) 13 bit SPI1_CR1 ; \ SPI1_CR1_CRCEN, Hardware CRC calculation enable
: SPI1_CR1_CRCNEXT ( -- x addr ) 12 bit SPI1_CR1 ; \ SPI1_CR1_CRCNEXT, CRC transfer next
: SPI1_CR1_CRCL ( -- x addr ) 11 bit SPI1_CR1 ; \ SPI1_CR1_CRCL, CRC length
: SPI1_CR1_RXONLY ( -- x addr ) 10 bit SPI1_CR1 ; \ SPI1_CR1_RXONLY, Receive only
: SPI1_CR1_SSM ( -- x addr ) 9 bit SPI1_CR1 ; \ SPI1_CR1_SSM, Software slave management
: SPI1_CR1_SSI ( -- x addr ) 8 bit SPI1_CR1 ; \ SPI1_CR1_SSI, Internal slave select
: SPI1_CR1_LSBFIRST ( -- x addr ) 7 bit SPI1_CR1 ; \ SPI1_CR1_LSBFIRST, Frame format
: SPI1_CR1_SPE ( -- x addr ) 6 bit SPI1_CR1 ; \ SPI1_CR1_SPE, SPI enable
: SPI1_CR1_BR ( %bbb -- x addr ) 3 lshift SPI1_CR1 ; \ SPI1_CR1_BR, Baud rate control
: SPI1_CR1_MSTR ( -- x addr ) 2 bit SPI1_CR1 ; \ SPI1_CR1_MSTR, Master selection
: SPI1_CR1_CPOL ( -- x addr ) 1 bit SPI1_CR1 ; \ SPI1_CR1_CPOL, Clock polarity
: SPI1_CR1_CPHA ( -- x addr ) 0 bit SPI1_CR1 ; \ SPI1_CR1_CPHA, Clock phase

\ SPI1_CR2 (read-write) Reset:0x0700
: SPI1_CR2_RXDMAEN ( -- x addr ) 0 bit SPI1_CR2 ; \ SPI1_CR2_RXDMAEN, Rx buffer DMA enable
: SPI1_CR2_TXDMAEN ( -- x addr ) 1 bit SPI1_CR2 ; \ SPI1_CR2_TXDMAEN, Tx buffer DMA enable
: SPI1_CR2_SSOE ( -- x addr ) 2 bit SPI1_CR2 ; \ SPI1_CR2_SSOE, SS output enable
: SPI1_CR2_NSSP ( -- x addr ) 3 bit SPI1_CR2 ; \ SPI1_CR2_NSSP, NSS pulse management
: SPI1_CR2_FRF ( -- x addr ) 4 bit SPI1_CR2 ; \ SPI1_CR2_FRF, Frame format
: SPI1_CR2_ERRIE ( -- x addr ) 5 bit SPI1_CR2 ; \ SPI1_CR2_ERRIE, Error interrupt enable
: SPI1_CR2_RXNEIE ( -- x addr ) 6 bit SPI1_CR2 ; \ SPI1_CR2_RXNEIE, RX buffer not empty interrupt enable
: SPI1_CR2_TXEIE ( -- x addr ) 7 bit SPI1_CR2 ; \ SPI1_CR2_TXEIE, Tx buffer empty interrupt enable
: SPI1_CR2_DS ( %bbbb -- x addr ) 8 lshift SPI1_CR2 ; \ SPI1_CR2_DS, Data size
: SPI1_CR2_FRXTH ( -- x addr ) 12 bit SPI1_CR2 ; \ SPI1_CR2_FRXTH, FIFO reception threshold
: SPI1_CR2_LDMA_RX ( -- x addr ) 13 bit SPI1_CR2 ; \ SPI1_CR2_LDMA_RX, Last DMA transfer for reception
: SPI1_CR2_LDMA_TX ( -- x addr ) 14 bit SPI1_CR2 ; \ SPI1_CR2_LDMA_TX, Last DMA transfer for transmission

\ SPI1_SR (multiple-access)  Reset:0x0002
: SPI1_SR_FRE ( -- x addr ) 8 bit SPI1_SR ; \ SPI1_SR_FRE, Frame format error
: SPI1_SR_BSY? ( -- 1|0 ) 7 bit SPI1_SR bit@ ; \ SPI1_SR_BSY, Busy flag
: SPI1_SR_OVR? ( -- 1|0 ) 6 bit SPI1_SR bit@ ; \ SPI1_SR_OVR, Overrun flag
: SPI1_SR_MODF ( -- x addr ) 5 bit SPI1_SR ; \ SPI1_SR_MODF, Mode fault
: SPI1_SR_CRCERR? ( -- 1|0 ) 4 bit SPI1_SR bit@ ; \ SPI1_SR_CRCERR, CRC error flag
: SPI1_SR_UDR? ( -- 1|0 ) 3 bit SPI1_SR bit@ ; \ SPI1_SR_UDR, Underrun flag
: SPI1_SR_CHSIDE ( -- x addr ) 2 bit SPI1_SR ; \ SPI1_SR_CHSIDE, Channel side
: SPI1_SR_TXE ( -- x addr ) 1 bit SPI1_SR ; \ SPI1_SR_TXE, Transmit buffer empty
: SPI1_SR_RXNE ( -- x addr ) 0 bit SPI1_SR ; \ SPI1_SR_RXNE, Receive buffer not empty
: SPI1_SR_FRLVL ( %bb -- x addr ) 9 lshift SPI1_SR ; \ SPI1_SR_FRLVL, FIFO reception level
: SPI1_SR_FTLVL ( %bb -- x addr ) 11 lshift SPI1_SR ; \ SPI1_SR_FTLVL, FIFO Transmission Level

\ SPI1_DR (read-write) Reset:0x0000
: SPI1_DR_DR ( %bbbbbbbbbbbbbbbb -- x addr ) SPI1_DR ; \ SPI1_DR_DR, Data register

\ SPI1_CRCPR (read-write) Reset:0x0007
: SPI1_CRCPR_CRCPOLY ( %bbbbbbbbbbbbbbbb -- x addr ) SPI1_CRCPR ; \ SPI1_CRCPR_CRCPOLY, CRC polynomial register

\ SPI1_RXCRCR (read-only) Reset:0x0000
: SPI1_RXCRCR_RxCRC? ( --  x ) SPI1_RXCRCR @ ; \ SPI1_RXCRCR_RxCRC, Rx CRC register

\ SPI1_TXCRCR (read-only) Reset:0x0000
: SPI1_TXCRCR_TxCRC? ( --  x ) SPI1_TXCRCR @ ; \ SPI1_TXCRCR_TxCRC, Tx CRC register

\ SPI1_I2SCFGR (read-write) Reset:0x0000
: SPI1_I2SCFGR_I2SMOD ( -- x addr ) 11 bit SPI1_I2SCFGR ; \ SPI1_I2SCFGR_I2SMOD, I2S mode selection
: SPI1_I2SCFGR_I2SE ( -- x addr ) 10 bit SPI1_I2SCFGR ; \ SPI1_I2SCFGR_I2SE, I2S Enable
: SPI1_I2SCFGR_I2SCFG ( %bb -- x addr ) 8 lshift SPI1_I2SCFGR ; \ SPI1_I2SCFGR_I2SCFG, I2S configuration mode
: SPI1_I2SCFGR_PCMSYNC ( -- x addr ) 7 bit SPI1_I2SCFGR ; \ SPI1_I2SCFGR_PCMSYNC, PCM frame synchronization
: SPI1_I2SCFGR_I2SSTD ( %bb -- x addr ) 4 lshift SPI1_I2SCFGR ; \ SPI1_I2SCFGR_I2SSTD, I2S standard selection
: SPI1_I2SCFGR_CKPOL ( -- x addr ) 3 bit SPI1_I2SCFGR ; \ SPI1_I2SCFGR_CKPOL, Steady state clock polarity
: SPI1_I2SCFGR_DATLEN ( %bb -- x addr ) 1 lshift SPI1_I2SCFGR ; \ SPI1_I2SCFGR_DATLEN, Data length to be transferred
: SPI1_I2SCFGR_CHLEN ( -- x addr ) 0 bit SPI1_I2SCFGR ; \ SPI1_I2SCFGR_CHLEN, Channel length number of bits per audio channel
: SPI1_I2SCFGR_ASTRTEN ( -- x addr ) 12 bit SPI1_I2SCFGR ; \ SPI1_I2SCFGR_ASTRTEN, Asynchronous start enable

\ SPI1_I2SPR (read-write) Reset:00000010
: SPI1_I2SPR_MCKOE ( -- x addr ) 9 bit SPI1_I2SPR ; \ SPI1_I2SPR_MCKOE, Master clock output enable
: SPI1_I2SPR_ODD ( -- x addr ) 8 bit SPI1_I2SPR ; \ SPI1_I2SPR_ODD, Odd factor for the prescaler
: SPI1_I2SPR_I2SDIV ( %bbbbbbbb -- x addr ) SPI1_I2SPR ; \ SPI1_I2SPR_I2SDIV, I2S Linear prescaler

\ SPI3_CR1 (read-write) Reset:0x0000
: SPI3_CR1_BIDIMODE ( -- x addr ) 15 bit SPI3_CR1 ; \ SPI3_CR1_BIDIMODE, Bidirectional data mode enable
: SPI3_CR1_BIDIOE ( -- x addr ) 14 bit SPI3_CR1 ; \ SPI3_CR1_BIDIOE, Output enable in bidirectional mode
: SPI3_CR1_CRCEN ( -- x addr ) 13 bit SPI3_CR1 ; \ SPI3_CR1_CRCEN, Hardware CRC calculation enable
: SPI3_CR1_CRCNEXT ( -- x addr ) 12 bit SPI3_CR1 ; \ SPI3_CR1_CRCNEXT, CRC transfer next
: SPI3_CR1_CRCL ( -- x addr ) 11 bit SPI3_CR1 ; \ SPI3_CR1_CRCL, CRC length
: SPI3_CR1_RXONLY ( -- x addr ) 10 bit SPI3_CR1 ; \ SPI3_CR1_RXONLY, Receive only
: SPI3_CR1_SSM ( -- x addr ) 9 bit SPI3_CR1 ; \ SPI3_CR1_SSM, Software slave management
: SPI3_CR1_SSI ( -- x addr ) 8 bit SPI3_CR1 ; \ SPI3_CR1_SSI, Internal slave select
: SPI3_CR1_LSBFIRST ( -- x addr ) 7 bit SPI3_CR1 ; \ SPI3_CR1_LSBFIRST, Frame format
: SPI3_CR1_SPE ( -- x addr ) 6 bit SPI3_CR1 ; \ SPI3_CR1_SPE, SPI enable
: SPI3_CR1_BR ( %bbb -- x addr ) 3 lshift SPI3_CR1 ; \ SPI3_CR1_BR, Baud rate control
: SPI3_CR1_MSTR ( -- x addr ) 2 bit SPI3_CR1 ; \ SPI3_CR1_MSTR, Master selection
: SPI3_CR1_CPOL ( -- x addr ) 1 bit SPI3_CR1 ; \ SPI3_CR1_CPOL, Clock polarity
: SPI3_CR1_CPHA ( -- x addr ) 0 bit SPI3_CR1 ; \ SPI3_CR1_CPHA, Clock phase

\ SPI3_CR2 (read-write) Reset:0x0700
: SPI3_CR2_RXDMAEN ( -- x addr ) 0 bit SPI3_CR2 ; \ SPI3_CR2_RXDMAEN, Rx buffer DMA enable
: SPI3_CR2_TXDMAEN ( -- x addr ) 1 bit SPI3_CR2 ; \ SPI3_CR2_TXDMAEN, Tx buffer DMA enable
: SPI3_CR2_SSOE ( -- x addr ) 2 bit SPI3_CR2 ; \ SPI3_CR2_SSOE, SS output enable
: SPI3_CR2_NSSP ( -- x addr ) 3 bit SPI3_CR2 ; \ SPI3_CR2_NSSP, NSS pulse management
: SPI3_CR2_FRF ( -- x addr ) 4 bit SPI3_CR2 ; \ SPI3_CR2_FRF, Frame format
: SPI3_CR2_ERRIE ( -- x addr ) 5 bit SPI3_CR2 ; \ SPI3_CR2_ERRIE, Error interrupt enable
: SPI3_CR2_RXNEIE ( -- x addr ) 6 bit SPI3_CR2 ; \ SPI3_CR2_RXNEIE, RX buffer not empty interrupt enable
: SPI3_CR2_TXEIE ( -- x addr ) 7 bit SPI3_CR2 ; \ SPI3_CR2_TXEIE, Tx buffer empty interrupt enable
: SPI3_CR2_DS ( %bbbb -- x addr ) 8 lshift SPI3_CR2 ; \ SPI3_CR2_DS, Data size
: SPI3_CR2_FRXTH ( -- x addr ) 12 bit SPI3_CR2 ; \ SPI3_CR2_FRXTH, FIFO reception threshold
: SPI3_CR2_LDMA_RX ( -- x addr ) 13 bit SPI3_CR2 ; \ SPI3_CR2_LDMA_RX, Last DMA transfer for reception
: SPI3_CR2_LDMA_TX ( -- x addr ) 14 bit SPI3_CR2 ; \ SPI3_CR2_LDMA_TX, Last DMA transfer for transmission

\ SPI3_SR (multiple-access)  Reset:0x0002
: SPI3_SR_FRE ( -- x addr ) 8 bit SPI3_SR ; \ SPI3_SR_FRE, Frame format error
: SPI3_SR_BSY? ( -- 1|0 ) 7 bit SPI3_SR bit@ ; \ SPI3_SR_BSY, Busy flag
: SPI3_SR_OVR? ( -- 1|0 ) 6 bit SPI3_SR bit@ ; \ SPI3_SR_OVR, Overrun flag
: SPI3_SR_MODF ( -- x addr ) 5 bit SPI3_SR ; \ SPI3_SR_MODF, Mode fault
: SPI3_SR_CRCERR? ( -- 1|0 ) 4 bit SPI3_SR bit@ ; \ SPI3_SR_CRCERR, CRC error flag
: SPI3_SR_UDR? ( -- 1|0 ) 3 bit SPI3_SR bit@ ; \ SPI3_SR_UDR, Underrun flag
: SPI3_SR_CHSIDE ( -- x addr ) 2 bit SPI3_SR ; \ SPI3_SR_CHSIDE, Channel side
: SPI3_SR_TXE ( -- x addr ) 1 bit SPI3_SR ; \ SPI3_SR_TXE, Transmit buffer empty
: SPI3_SR_RXNE ( -- x addr ) 0 bit SPI3_SR ; \ SPI3_SR_RXNE, Receive buffer not empty
: SPI3_SR_FRLVL ( %bb -- x addr ) 9 lshift SPI3_SR ; \ SPI3_SR_FRLVL, FIFO reception level
: SPI3_SR_FTLVL ( %bb -- x addr ) 11 lshift SPI3_SR ; \ SPI3_SR_FTLVL, FIFO Transmission Level

\ SPI3_DR (read-write) Reset:0x0000
: SPI3_DR_DR ( %bbbbbbbbbbbbbbbb -- x addr ) SPI3_DR ; \ SPI3_DR_DR, Data register

\ SPI3_CRCPR (read-write) Reset:0x0007
: SPI3_CRCPR_CRCPOLY ( %bbbbbbbbbbbbbbbb -- x addr ) SPI3_CRCPR ; \ SPI3_CRCPR_CRCPOLY, CRC polynomial register

\ SPI3_RXCRCR (read-only) Reset:0x0000
: SPI3_RXCRCR_RxCRC? ( --  x ) SPI3_RXCRCR @ ; \ SPI3_RXCRCR_RxCRC, Rx CRC register

\ SPI3_TXCRCR (read-only) Reset:0x0000
: SPI3_TXCRCR_TxCRC? ( --  x ) SPI3_TXCRCR @ ; \ SPI3_TXCRCR_TxCRC, Tx CRC register

\ SPI3_I2SCFGR (read-write) Reset:0x0000
: SPI3_I2SCFGR_I2SMOD ( -- x addr ) 11 bit SPI3_I2SCFGR ; \ SPI3_I2SCFGR_I2SMOD, I2S mode selection
: SPI3_I2SCFGR_I2SE ( -- x addr ) 10 bit SPI3_I2SCFGR ; \ SPI3_I2SCFGR_I2SE, I2S Enable
: SPI3_I2SCFGR_I2SCFG ( %bb -- x addr ) 8 lshift SPI3_I2SCFGR ; \ SPI3_I2SCFGR_I2SCFG, I2S configuration mode
: SPI3_I2SCFGR_PCMSYNC ( -- x addr ) 7 bit SPI3_I2SCFGR ; \ SPI3_I2SCFGR_PCMSYNC, PCM frame synchronization
: SPI3_I2SCFGR_I2SSTD ( %bb -- x addr ) 4 lshift SPI3_I2SCFGR ; \ SPI3_I2SCFGR_I2SSTD, I2S standard selection
: SPI3_I2SCFGR_CKPOL ( -- x addr ) 3 bit SPI3_I2SCFGR ; \ SPI3_I2SCFGR_CKPOL, Steady state clock polarity
: SPI3_I2SCFGR_DATLEN ( %bb -- x addr ) 1 lshift SPI3_I2SCFGR ; \ SPI3_I2SCFGR_DATLEN, Data length to be transferred
: SPI3_I2SCFGR_CHLEN ( -- x addr ) 0 bit SPI3_I2SCFGR ; \ SPI3_I2SCFGR_CHLEN, Channel length number of bits per audio channel
: SPI3_I2SCFGR_ASTRTEN ( -- x addr ) 12 bit SPI3_I2SCFGR ; \ SPI3_I2SCFGR_ASTRTEN, Asynchronous start enable

\ SPI3_I2SPR (read-write) Reset:00000010
: SPI3_I2SPR_MCKOE ( -- x addr ) 9 bit SPI3_I2SPR ; \ SPI3_I2SPR_MCKOE, Master clock output enable
: SPI3_I2SPR_ODD ( -- x addr ) 8 bit SPI3_I2SPR ; \ SPI3_I2SPR_ODD, Odd factor for the prescaler
: SPI3_I2SPR_I2SDIV ( %bbbbbbbb -- x addr ) SPI3_I2SPR ; \ SPI3_I2SPR_I2SDIV, I2S Linear prescaler

\ SPI4_CR1 (read-write) Reset:0x0000
: SPI4_CR1_BIDIMODE ( -- x addr ) 15 bit SPI4_CR1 ; \ SPI4_CR1_BIDIMODE, Bidirectional data mode enable
: SPI4_CR1_BIDIOE ( -- x addr ) 14 bit SPI4_CR1 ; \ SPI4_CR1_BIDIOE, Output enable in bidirectional mode
: SPI4_CR1_CRCEN ( -- x addr ) 13 bit SPI4_CR1 ; \ SPI4_CR1_CRCEN, Hardware CRC calculation enable
: SPI4_CR1_CRCNEXT ( -- x addr ) 12 bit SPI4_CR1 ; \ SPI4_CR1_CRCNEXT, CRC transfer next
: SPI4_CR1_CRCL ( -- x addr ) 11 bit SPI4_CR1 ; \ SPI4_CR1_CRCL, CRC length
: SPI4_CR1_RXONLY ( -- x addr ) 10 bit SPI4_CR1 ; \ SPI4_CR1_RXONLY, Receive only
: SPI4_CR1_SSM ( -- x addr ) 9 bit SPI4_CR1 ; \ SPI4_CR1_SSM, Software slave management
: SPI4_CR1_SSI ( -- x addr ) 8 bit SPI4_CR1 ; \ SPI4_CR1_SSI, Internal slave select
: SPI4_CR1_LSBFIRST ( -- x addr ) 7 bit SPI4_CR1 ; \ SPI4_CR1_LSBFIRST, Frame format
: SPI4_CR1_SPE ( -- x addr ) 6 bit SPI4_CR1 ; \ SPI4_CR1_SPE, SPI enable
: SPI4_CR1_BR ( %bbb -- x addr ) 3 lshift SPI4_CR1 ; \ SPI4_CR1_BR, Baud rate control
: SPI4_CR1_MSTR ( -- x addr ) 2 bit SPI4_CR1 ; \ SPI4_CR1_MSTR, Master selection
: SPI4_CR1_CPOL ( -- x addr ) 1 bit SPI4_CR1 ; \ SPI4_CR1_CPOL, Clock polarity
: SPI4_CR1_CPHA ( -- x addr ) 0 bit SPI4_CR1 ; \ SPI4_CR1_CPHA, Clock phase

\ SPI4_CR2 (read-write) Reset:0x0700
: SPI4_CR2_RXDMAEN ( -- x addr ) 0 bit SPI4_CR2 ; \ SPI4_CR2_RXDMAEN, Rx buffer DMA enable
: SPI4_CR2_TXDMAEN ( -- x addr ) 1 bit SPI4_CR2 ; \ SPI4_CR2_TXDMAEN, Tx buffer DMA enable
: SPI4_CR2_SSOE ( -- x addr ) 2 bit SPI4_CR2 ; \ SPI4_CR2_SSOE, SS output enable
: SPI4_CR2_NSSP ( -- x addr ) 3 bit SPI4_CR2 ; \ SPI4_CR2_NSSP, NSS pulse management
: SPI4_CR2_FRF ( -- x addr ) 4 bit SPI4_CR2 ; \ SPI4_CR2_FRF, Frame format
: SPI4_CR2_ERRIE ( -- x addr ) 5 bit SPI4_CR2 ; \ SPI4_CR2_ERRIE, Error interrupt enable
: SPI4_CR2_RXNEIE ( -- x addr ) 6 bit SPI4_CR2 ; \ SPI4_CR2_RXNEIE, RX buffer not empty interrupt enable
: SPI4_CR2_TXEIE ( -- x addr ) 7 bit SPI4_CR2 ; \ SPI4_CR2_TXEIE, Tx buffer empty interrupt enable
: SPI4_CR2_DS ( %bbbb -- x addr ) 8 lshift SPI4_CR2 ; \ SPI4_CR2_DS, Data size
: SPI4_CR2_FRXTH ( -- x addr ) 12 bit SPI4_CR2 ; \ SPI4_CR2_FRXTH, FIFO reception threshold
: SPI4_CR2_LDMA_RX ( -- x addr ) 13 bit SPI4_CR2 ; \ SPI4_CR2_LDMA_RX, Last DMA transfer for reception
: SPI4_CR2_LDMA_TX ( -- x addr ) 14 bit SPI4_CR2 ; \ SPI4_CR2_LDMA_TX, Last DMA transfer for transmission

\ SPI4_SR (multiple-access)  Reset:0x0002
: SPI4_SR_FRE ( -- x addr ) 8 bit SPI4_SR ; \ SPI4_SR_FRE, Frame format error
: SPI4_SR_BSY? ( -- 1|0 ) 7 bit SPI4_SR bit@ ; \ SPI4_SR_BSY, Busy flag
: SPI4_SR_OVR? ( -- 1|0 ) 6 bit SPI4_SR bit@ ; \ SPI4_SR_OVR, Overrun flag
: SPI4_SR_MODF ( -- x addr ) 5 bit SPI4_SR ; \ SPI4_SR_MODF, Mode fault
: SPI4_SR_CRCERR? ( -- 1|0 ) 4 bit SPI4_SR bit@ ; \ SPI4_SR_CRCERR, CRC error flag
: SPI4_SR_UDR? ( -- 1|0 ) 3 bit SPI4_SR bit@ ; \ SPI4_SR_UDR, Underrun flag
: SPI4_SR_CHSIDE ( -- x addr ) 2 bit SPI4_SR ; \ SPI4_SR_CHSIDE, Channel side
: SPI4_SR_TXE ( -- x addr ) 1 bit SPI4_SR ; \ SPI4_SR_TXE, Transmit buffer empty
: SPI4_SR_RXNE ( -- x addr ) 0 bit SPI4_SR ; \ SPI4_SR_RXNE, Receive buffer not empty
: SPI4_SR_FRLVL ( %bb -- x addr ) 9 lshift SPI4_SR ; \ SPI4_SR_FRLVL, FIFO reception level
: SPI4_SR_FTLVL ( %bb -- x addr ) 11 lshift SPI4_SR ; \ SPI4_SR_FTLVL, FIFO Transmission Level

\ SPI4_DR (read-write) Reset:0x0000
: SPI4_DR_DR ( %bbbbbbbbbbbbbbbb -- x addr ) SPI4_DR ; \ SPI4_DR_DR, Data register

\ SPI4_CRCPR (read-write) Reset:0x0007
: SPI4_CRCPR_CRCPOLY ( %bbbbbbbbbbbbbbbb -- x addr ) SPI4_CRCPR ; \ SPI4_CRCPR_CRCPOLY, CRC polynomial register

\ SPI4_RXCRCR (read-only) Reset:0x0000
: SPI4_RXCRCR_RxCRC? ( --  x ) SPI4_RXCRCR @ ; \ SPI4_RXCRCR_RxCRC, Rx CRC register

\ SPI4_TXCRCR (read-only) Reset:0x0000
: SPI4_TXCRCR_TxCRC? ( --  x ) SPI4_TXCRCR @ ; \ SPI4_TXCRCR_TxCRC, Tx CRC register

\ SPI4_I2SCFGR (read-write) Reset:0x0000
: SPI4_I2SCFGR_I2SMOD ( -- x addr ) 11 bit SPI4_I2SCFGR ; \ SPI4_I2SCFGR_I2SMOD, I2S mode selection
: SPI4_I2SCFGR_I2SE ( -- x addr ) 10 bit SPI4_I2SCFGR ; \ SPI4_I2SCFGR_I2SE, I2S Enable
: SPI4_I2SCFGR_I2SCFG ( %bb -- x addr ) 8 lshift SPI4_I2SCFGR ; \ SPI4_I2SCFGR_I2SCFG, I2S configuration mode
: SPI4_I2SCFGR_PCMSYNC ( -- x addr ) 7 bit SPI4_I2SCFGR ; \ SPI4_I2SCFGR_PCMSYNC, PCM frame synchronization
: SPI4_I2SCFGR_I2SSTD ( %bb -- x addr ) 4 lshift SPI4_I2SCFGR ; \ SPI4_I2SCFGR_I2SSTD, I2S standard selection
: SPI4_I2SCFGR_CKPOL ( -- x addr ) 3 bit SPI4_I2SCFGR ; \ SPI4_I2SCFGR_CKPOL, Steady state clock polarity
: SPI4_I2SCFGR_DATLEN ( %bb -- x addr ) 1 lshift SPI4_I2SCFGR ; \ SPI4_I2SCFGR_DATLEN, Data length to be transferred
: SPI4_I2SCFGR_CHLEN ( -- x addr ) 0 bit SPI4_I2SCFGR ; \ SPI4_I2SCFGR_CHLEN, Channel length number of bits per audio channel
: SPI4_I2SCFGR_ASTRTEN ( -- x addr ) 12 bit SPI4_I2SCFGR ; \ SPI4_I2SCFGR_ASTRTEN, Asynchronous start enable

\ SPI4_I2SPR (read-write) Reset:00000010
: SPI4_I2SPR_MCKOE ( -- x addr ) 9 bit SPI4_I2SPR ; \ SPI4_I2SPR_MCKOE, Master clock output enable
: SPI4_I2SPR_ODD ( -- x addr ) 8 bit SPI4_I2SPR ; \ SPI4_I2SPR_ODD, Odd factor for the prescaler
: SPI4_I2SPR_I2SDIV ( %bbbbbbbb -- x addr ) SPI4_I2SPR ; \ SPI4_I2SPR_I2SDIV, I2S Linear prescaler

\ SPI5_CR1 (read-write) Reset:0x0000
: SPI5_CR1_BIDIMODE ( -- x addr ) 15 bit SPI5_CR1 ; \ SPI5_CR1_BIDIMODE, Bidirectional data mode enable
: SPI5_CR1_BIDIOE ( -- x addr ) 14 bit SPI5_CR1 ; \ SPI5_CR1_BIDIOE, Output enable in bidirectional mode
: SPI5_CR1_CRCEN ( -- x addr ) 13 bit SPI5_CR1 ; \ SPI5_CR1_CRCEN, Hardware CRC calculation enable
: SPI5_CR1_CRCNEXT ( -- x addr ) 12 bit SPI5_CR1 ; \ SPI5_CR1_CRCNEXT, CRC transfer next
: SPI5_CR1_CRCL ( -- x addr ) 11 bit SPI5_CR1 ; \ SPI5_CR1_CRCL, CRC length
: SPI5_CR1_RXONLY ( -- x addr ) 10 bit SPI5_CR1 ; \ SPI5_CR1_RXONLY, Receive only
: SPI5_CR1_SSM ( -- x addr ) 9 bit SPI5_CR1 ; \ SPI5_CR1_SSM, Software slave management
: SPI5_CR1_SSI ( -- x addr ) 8 bit SPI5_CR1 ; \ SPI5_CR1_SSI, Internal slave select
: SPI5_CR1_LSBFIRST ( -- x addr ) 7 bit SPI5_CR1 ; \ SPI5_CR1_LSBFIRST, Frame format
: SPI5_CR1_SPE ( -- x addr ) 6 bit SPI5_CR1 ; \ SPI5_CR1_SPE, SPI enable
: SPI5_CR1_BR ( %bbb -- x addr ) 3 lshift SPI5_CR1 ; \ SPI5_CR1_BR, Baud rate control
: SPI5_CR1_MSTR ( -- x addr ) 2 bit SPI5_CR1 ; \ SPI5_CR1_MSTR, Master selection
: SPI5_CR1_CPOL ( -- x addr ) 1 bit SPI5_CR1 ; \ SPI5_CR1_CPOL, Clock polarity
: SPI5_CR1_CPHA ( -- x addr ) 0 bit SPI5_CR1 ; \ SPI5_CR1_CPHA, Clock phase

\ SPI5_CR2 (read-write) Reset:0x0700
: SPI5_CR2_RXDMAEN ( -- x addr ) 0 bit SPI5_CR2 ; \ SPI5_CR2_RXDMAEN, Rx buffer DMA enable
: SPI5_CR2_TXDMAEN ( -- x addr ) 1 bit SPI5_CR2 ; \ SPI5_CR2_TXDMAEN, Tx buffer DMA enable
: SPI5_CR2_SSOE ( -- x addr ) 2 bit SPI5_CR2 ; \ SPI5_CR2_SSOE, SS output enable
: SPI5_CR2_NSSP ( -- x addr ) 3 bit SPI5_CR2 ; \ SPI5_CR2_NSSP, NSS pulse management
: SPI5_CR2_FRF ( -- x addr ) 4 bit SPI5_CR2 ; \ SPI5_CR2_FRF, Frame format
: SPI5_CR2_ERRIE ( -- x addr ) 5 bit SPI5_CR2 ; \ SPI5_CR2_ERRIE, Error interrupt enable
: SPI5_CR2_RXNEIE ( -- x addr ) 6 bit SPI5_CR2 ; \ SPI5_CR2_RXNEIE, RX buffer not empty interrupt enable
: SPI5_CR2_TXEIE ( -- x addr ) 7 bit SPI5_CR2 ; \ SPI5_CR2_TXEIE, Tx buffer empty interrupt enable
: SPI5_CR2_DS ( %bbbb -- x addr ) 8 lshift SPI5_CR2 ; \ SPI5_CR2_DS, Data size
: SPI5_CR2_FRXTH ( -- x addr ) 12 bit SPI5_CR2 ; \ SPI5_CR2_FRXTH, FIFO reception threshold
: SPI5_CR2_LDMA_RX ( -- x addr ) 13 bit SPI5_CR2 ; \ SPI5_CR2_LDMA_RX, Last DMA transfer for reception
: SPI5_CR2_LDMA_TX ( -- x addr ) 14 bit SPI5_CR2 ; \ SPI5_CR2_LDMA_TX, Last DMA transfer for transmission

\ SPI5_SR (multiple-access)  Reset:0x0002
: SPI5_SR_FRE ( -- x addr ) 8 bit SPI5_SR ; \ SPI5_SR_FRE, Frame format error
: SPI5_SR_BSY? ( -- 1|0 ) 7 bit SPI5_SR bit@ ; \ SPI5_SR_BSY, Busy flag
: SPI5_SR_OVR? ( -- 1|0 ) 6 bit SPI5_SR bit@ ; \ SPI5_SR_OVR, Overrun flag
: SPI5_SR_MODF ( -- x addr ) 5 bit SPI5_SR ; \ SPI5_SR_MODF, Mode fault
: SPI5_SR_CRCERR? ( -- 1|0 ) 4 bit SPI5_SR bit@ ; \ SPI5_SR_CRCERR, CRC error flag
: SPI5_SR_UDR? ( -- 1|0 ) 3 bit SPI5_SR bit@ ; \ SPI5_SR_UDR, Underrun flag
: SPI5_SR_CHSIDE ( -- x addr ) 2 bit SPI5_SR ; \ SPI5_SR_CHSIDE, Channel side
: SPI5_SR_TXE ( -- x addr ) 1 bit SPI5_SR ; \ SPI5_SR_TXE, Transmit buffer empty
: SPI5_SR_RXNE ( -- x addr ) 0 bit SPI5_SR ; \ SPI5_SR_RXNE, Receive buffer not empty
: SPI5_SR_FRLVL ( %bb -- x addr ) 9 lshift SPI5_SR ; \ SPI5_SR_FRLVL, FIFO reception level
: SPI5_SR_FTLVL ( %bb -- x addr ) 11 lshift SPI5_SR ; \ SPI5_SR_FTLVL, FIFO Transmission Level

\ SPI5_DR (read-write) Reset:0x0000
: SPI5_DR_DR ( %bbbbbbbbbbbbbbbb -- x addr ) SPI5_DR ; \ SPI5_DR_DR, Data register

\ SPI5_CRCPR (read-write) Reset:0x0007
: SPI5_CRCPR_CRCPOLY ( %bbbbbbbbbbbbbbbb -- x addr ) SPI5_CRCPR ; \ SPI5_CRCPR_CRCPOLY, CRC polynomial register

\ SPI5_RXCRCR (read-only) Reset:0x0000
: SPI5_RXCRCR_RxCRC? ( --  x ) SPI5_RXCRCR @ ; \ SPI5_RXCRCR_RxCRC, Rx CRC register

\ SPI5_TXCRCR (read-only) Reset:0x0000
: SPI5_TXCRCR_TxCRC? ( --  x ) SPI5_TXCRCR @ ; \ SPI5_TXCRCR_TxCRC, Tx CRC register

\ SPI5_I2SCFGR (read-write) Reset:0x0000
: SPI5_I2SCFGR_I2SMOD ( -- x addr ) 11 bit SPI5_I2SCFGR ; \ SPI5_I2SCFGR_I2SMOD, I2S mode selection
: SPI5_I2SCFGR_I2SE ( -- x addr ) 10 bit SPI5_I2SCFGR ; \ SPI5_I2SCFGR_I2SE, I2S Enable
: SPI5_I2SCFGR_I2SCFG ( %bb -- x addr ) 8 lshift SPI5_I2SCFGR ; \ SPI5_I2SCFGR_I2SCFG, I2S configuration mode
: SPI5_I2SCFGR_PCMSYNC ( -- x addr ) 7 bit SPI5_I2SCFGR ; \ SPI5_I2SCFGR_PCMSYNC, PCM frame synchronization
: SPI5_I2SCFGR_I2SSTD ( %bb -- x addr ) 4 lshift SPI5_I2SCFGR ; \ SPI5_I2SCFGR_I2SSTD, I2S standard selection
: SPI5_I2SCFGR_CKPOL ( -- x addr ) 3 bit SPI5_I2SCFGR ; \ SPI5_I2SCFGR_CKPOL, Steady state clock polarity
: SPI5_I2SCFGR_DATLEN ( %bb -- x addr ) 1 lshift SPI5_I2SCFGR ; \ SPI5_I2SCFGR_DATLEN, Data length to be transferred
: SPI5_I2SCFGR_CHLEN ( -- x addr ) 0 bit SPI5_I2SCFGR ; \ SPI5_I2SCFGR_CHLEN, Channel length number of bits per audio channel
: SPI5_I2SCFGR_ASTRTEN ( -- x addr ) 12 bit SPI5_I2SCFGR ; \ SPI5_I2SCFGR_ASTRTEN, Asynchronous start enable

\ SPI5_I2SPR (read-write) Reset:00000010
: SPI5_I2SPR_MCKOE ( -- x addr ) 9 bit SPI5_I2SPR ; \ SPI5_I2SPR_MCKOE, Master clock output enable
: SPI5_I2SPR_ODD ( -- x addr ) 8 bit SPI5_I2SPR ; \ SPI5_I2SPR_ODD, Odd factor for the prescaler
: SPI5_I2SPR_I2SDIV ( %bbbbbbbb -- x addr ) SPI5_I2SPR ; \ SPI5_I2SPR_I2SDIV, I2S Linear prescaler

\ SPI6_CR1 (read-write) Reset:0x0000
: SPI6_CR1_BIDIMODE ( -- x addr ) 15 bit SPI6_CR1 ; \ SPI6_CR1_BIDIMODE, Bidirectional data mode enable
: SPI6_CR1_BIDIOE ( -- x addr ) 14 bit SPI6_CR1 ; \ SPI6_CR1_BIDIOE, Output enable in bidirectional mode
: SPI6_CR1_CRCEN ( -- x addr ) 13 bit SPI6_CR1 ; \ SPI6_CR1_CRCEN, Hardware CRC calculation enable
: SPI6_CR1_CRCNEXT ( -- x addr ) 12 bit SPI6_CR1 ; \ SPI6_CR1_CRCNEXT, CRC transfer next
: SPI6_CR1_CRCL ( -- x addr ) 11 bit SPI6_CR1 ; \ SPI6_CR1_CRCL, CRC length
: SPI6_CR1_RXONLY ( -- x addr ) 10 bit SPI6_CR1 ; \ SPI6_CR1_RXONLY, Receive only
: SPI6_CR1_SSM ( -- x addr ) 9 bit SPI6_CR1 ; \ SPI6_CR1_SSM, Software slave management
: SPI6_CR1_SSI ( -- x addr ) 8 bit SPI6_CR1 ; \ SPI6_CR1_SSI, Internal slave select
: SPI6_CR1_LSBFIRST ( -- x addr ) 7 bit SPI6_CR1 ; \ SPI6_CR1_LSBFIRST, Frame format
: SPI6_CR1_SPE ( -- x addr ) 6 bit SPI6_CR1 ; \ SPI6_CR1_SPE, SPI enable
: SPI6_CR1_BR ( %bbb -- x addr ) 3 lshift SPI6_CR1 ; \ SPI6_CR1_BR, Baud rate control
: SPI6_CR1_MSTR ( -- x addr ) 2 bit SPI6_CR1 ; \ SPI6_CR1_MSTR, Master selection
: SPI6_CR1_CPOL ( -- x addr ) 1 bit SPI6_CR1 ; \ SPI6_CR1_CPOL, Clock polarity
: SPI6_CR1_CPHA ( -- x addr ) 0 bit SPI6_CR1 ; \ SPI6_CR1_CPHA, Clock phase

\ SPI6_CR2 (read-write) Reset:0x0700
: SPI6_CR2_RXDMAEN ( -- x addr ) 0 bit SPI6_CR2 ; \ SPI6_CR2_RXDMAEN, Rx buffer DMA enable
: SPI6_CR2_TXDMAEN ( -- x addr ) 1 bit SPI6_CR2 ; \ SPI6_CR2_TXDMAEN, Tx buffer DMA enable
: SPI6_CR2_SSOE ( -- x addr ) 2 bit SPI6_CR2 ; \ SPI6_CR2_SSOE, SS output enable
: SPI6_CR2_NSSP ( -- x addr ) 3 bit SPI6_CR2 ; \ SPI6_CR2_NSSP, NSS pulse management
: SPI6_CR2_FRF ( -- x addr ) 4 bit SPI6_CR2 ; \ SPI6_CR2_FRF, Frame format
: SPI6_CR2_ERRIE ( -- x addr ) 5 bit SPI6_CR2 ; \ SPI6_CR2_ERRIE, Error interrupt enable
: SPI6_CR2_RXNEIE ( -- x addr ) 6 bit SPI6_CR2 ; \ SPI6_CR2_RXNEIE, RX buffer not empty interrupt enable
: SPI6_CR2_TXEIE ( -- x addr ) 7 bit SPI6_CR2 ; \ SPI6_CR2_TXEIE, Tx buffer empty interrupt enable
: SPI6_CR2_DS ( %bbbb -- x addr ) 8 lshift SPI6_CR2 ; \ SPI6_CR2_DS, Data size
: SPI6_CR2_FRXTH ( -- x addr ) 12 bit SPI6_CR2 ; \ SPI6_CR2_FRXTH, FIFO reception threshold
: SPI6_CR2_LDMA_RX ( -- x addr ) 13 bit SPI6_CR2 ; \ SPI6_CR2_LDMA_RX, Last DMA transfer for reception
: SPI6_CR2_LDMA_TX ( -- x addr ) 14 bit SPI6_CR2 ; \ SPI6_CR2_LDMA_TX, Last DMA transfer for transmission

\ SPI6_SR (multiple-access)  Reset:0x0002
: SPI6_SR_FRE ( -- x addr ) 8 bit SPI6_SR ; \ SPI6_SR_FRE, Frame format error
: SPI6_SR_BSY? ( -- 1|0 ) 7 bit SPI6_SR bit@ ; \ SPI6_SR_BSY, Busy flag
: SPI6_SR_OVR? ( -- 1|0 ) 6 bit SPI6_SR bit@ ; \ SPI6_SR_OVR, Overrun flag
: SPI6_SR_MODF ( -- x addr ) 5 bit SPI6_SR ; \ SPI6_SR_MODF, Mode fault
: SPI6_SR_CRCERR? ( -- 1|0 ) 4 bit SPI6_SR bit@ ; \ SPI6_SR_CRCERR, CRC error flag
: SPI6_SR_UDR? ( -- 1|0 ) 3 bit SPI6_SR bit@ ; \ SPI6_SR_UDR, Underrun flag
: SPI6_SR_CHSIDE ( -- x addr ) 2 bit SPI6_SR ; \ SPI6_SR_CHSIDE, Channel side
: SPI6_SR_TXE ( -- x addr ) 1 bit SPI6_SR ; \ SPI6_SR_TXE, Transmit buffer empty
: SPI6_SR_RXNE ( -- x addr ) 0 bit SPI6_SR ; \ SPI6_SR_RXNE, Receive buffer not empty
: SPI6_SR_FRLVL ( %bb -- x addr ) 9 lshift SPI6_SR ; \ SPI6_SR_FRLVL, FIFO reception level
: SPI6_SR_FTLVL ( %bb -- x addr ) 11 lshift SPI6_SR ; \ SPI6_SR_FTLVL, FIFO Transmission Level

\ SPI6_DR (read-write) Reset:0x0000
: SPI6_DR_DR ( %bbbbbbbbbbbbbbbb -- x addr ) SPI6_DR ; \ SPI6_DR_DR, Data register

\ SPI6_CRCPR (read-write) Reset:0x0007
: SPI6_CRCPR_CRCPOLY ( %bbbbbbbbbbbbbbbb -- x addr ) SPI6_CRCPR ; \ SPI6_CRCPR_CRCPOLY, CRC polynomial register

\ SPI6_RXCRCR (read-only) Reset:0x0000
: SPI6_RXCRCR_RxCRC? ( --  x ) SPI6_RXCRCR @ ; \ SPI6_RXCRCR_RxCRC, Rx CRC register

\ SPI6_TXCRCR (read-only) Reset:0x0000
: SPI6_TXCRCR_TxCRC? ( --  x ) SPI6_TXCRCR @ ; \ SPI6_TXCRCR_TxCRC, Tx CRC register

\ SPI6_I2SCFGR (read-write) Reset:0x0000
: SPI6_I2SCFGR_I2SMOD ( -- x addr ) 11 bit SPI6_I2SCFGR ; \ SPI6_I2SCFGR_I2SMOD, I2S mode selection
: SPI6_I2SCFGR_I2SE ( -- x addr ) 10 bit SPI6_I2SCFGR ; \ SPI6_I2SCFGR_I2SE, I2S Enable
: SPI6_I2SCFGR_I2SCFG ( %bb -- x addr ) 8 lshift SPI6_I2SCFGR ; \ SPI6_I2SCFGR_I2SCFG, I2S configuration mode
: SPI6_I2SCFGR_PCMSYNC ( -- x addr ) 7 bit SPI6_I2SCFGR ; \ SPI6_I2SCFGR_PCMSYNC, PCM frame synchronization
: SPI6_I2SCFGR_I2SSTD ( %bb -- x addr ) 4 lshift SPI6_I2SCFGR ; \ SPI6_I2SCFGR_I2SSTD, I2S standard selection
: SPI6_I2SCFGR_CKPOL ( -- x addr ) 3 bit SPI6_I2SCFGR ; \ SPI6_I2SCFGR_CKPOL, Steady state clock polarity
: SPI6_I2SCFGR_DATLEN ( %bb -- x addr ) 1 lshift SPI6_I2SCFGR ; \ SPI6_I2SCFGR_DATLEN, Data length to be transferred
: SPI6_I2SCFGR_CHLEN ( -- x addr ) 0 bit SPI6_I2SCFGR ; \ SPI6_I2SCFGR_CHLEN, Channel length number of bits per audio channel
: SPI6_I2SCFGR_ASTRTEN ( -- x addr ) 12 bit SPI6_I2SCFGR ; \ SPI6_I2SCFGR_ASTRTEN, Asynchronous start enable

\ SPI6_I2SPR (read-write) Reset:00000010
: SPI6_I2SPR_MCKOE ( -- x addr ) 9 bit SPI6_I2SPR ; \ SPI6_I2SPR_MCKOE, Master clock output enable
: SPI6_I2SPR_ODD ( -- x addr ) 8 bit SPI6_I2SPR ; \ SPI6_I2SPR_ODD, Odd factor for the prescaler
: SPI6_I2SPR_I2SDIV ( %bbbbbbbb -- x addr ) SPI6_I2SPR ; \ SPI6_I2SPR_I2SDIV, I2S Linear prescaler

\ SPI2_CR1 (read-write) Reset:0x0000
: SPI2_CR1_BIDIMODE ( -- x addr ) 15 bit SPI2_CR1 ; \ SPI2_CR1_BIDIMODE, Bidirectional data mode enable
: SPI2_CR1_BIDIOE ( -- x addr ) 14 bit SPI2_CR1 ; \ SPI2_CR1_BIDIOE, Output enable in bidirectional mode
: SPI2_CR1_CRCEN ( -- x addr ) 13 bit SPI2_CR1 ; \ SPI2_CR1_CRCEN, Hardware CRC calculation enable
: SPI2_CR1_CRCNEXT ( -- x addr ) 12 bit SPI2_CR1 ; \ SPI2_CR1_CRCNEXT, CRC transfer next
: SPI2_CR1_CRCL ( -- x addr ) 11 bit SPI2_CR1 ; \ SPI2_CR1_CRCL, CRC length
: SPI2_CR1_RXONLY ( -- x addr ) 10 bit SPI2_CR1 ; \ SPI2_CR1_RXONLY, Receive only
: SPI2_CR1_SSM ( -- x addr ) 9 bit SPI2_CR1 ; \ SPI2_CR1_SSM, Software slave management
: SPI2_CR1_SSI ( -- x addr ) 8 bit SPI2_CR1 ; \ SPI2_CR1_SSI, Internal slave select
: SPI2_CR1_LSBFIRST ( -- x addr ) 7 bit SPI2_CR1 ; \ SPI2_CR1_LSBFIRST, Frame format
: SPI2_CR1_SPE ( -- x addr ) 6 bit SPI2_CR1 ; \ SPI2_CR1_SPE, SPI enable
: SPI2_CR1_BR ( %bbb -- x addr ) 3 lshift SPI2_CR1 ; \ SPI2_CR1_BR, Baud rate control
: SPI2_CR1_MSTR ( -- x addr ) 2 bit SPI2_CR1 ; \ SPI2_CR1_MSTR, Master selection
: SPI2_CR1_CPOL ( -- x addr ) 1 bit SPI2_CR1 ; \ SPI2_CR1_CPOL, Clock polarity
: SPI2_CR1_CPHA ( -- x addr ) 0 bit SPI2_CR1 ; \ SPI2_CR1_CPHA, Clock phase

\ SPI2_CR2 (read-write) Reset:0x0700
: SPI2_CR2_RXDMAEN ( -- x addr ) 0 bit SPI2_CR2 ; \ SPI2_CR2_RXDMAEN, Rx buffer DMA enable
: SPI2_CR2_TXDMAEN ( -- x addr ) 1 bit SPI2_CR2 ; \ SPI2_CR2_TXDMAEN, Tx buffer DMA enable
: SPI2_CR2_SSOE ( -- x addr ) 2 bit SPI2_CR2 ; \ SPI2_CR2_SSOE, SS output enable
: SPI2_CR2_NSSP ( -- x addr ) 3 bit SPI2_CR2 ; \ SPI2_CR2_NSSP, NSS pulse management
: SPI2_CR2_FRF ( -- x addr ) 4 bit SPI2_CR2 ; \ SPI2_CR2_FRF, Frame format
: SPI2_CR2_ERRIE ( -- x addr ) 5 bit SPI2_CR2 ; \ SPI2_CR2_ERRIE, Error interrupt enable
: SPI2_CR2_RXNEIE ( -- x addr ) 6 bit SPI2_CR2 ; \ SPI2_CR2_RXNEIE, RX buffer not empty interrupt enable
: SPI2_CR2_TXEIE ( -- x addr ) 7 bit SPI2_CR2 ; \ SPI2_CR2_TXEIE, Tx buffer empty interrupt enable
: SPI2_CR2_DS ( %bbbb -- x addr ) 8 lshift SPI2_CR2 ; \ SPI2_CR2_DS, Data size
: SPI2_CR2_FRXTH ( -- x addr ) 12 bit SPI2_CR2 ; \ SPI2_CR2_FRXTH, FIFO reception threshold
: SPI2_CR2_LDMA_RX ( -- x addr ) 13 bit SPI2_CR2 ; \ SPI2_CR2_LDMA_RX, Last DMA transfer for reception
: SPI2_CR2_LDMA_TX ( -- x addr ) 14 bit SPI2_CR2 ; \ SPI2_CR2_LDMA_TX, Last DMA transfer for transmission

\ SPI2_SR (multiple-access)  Reset:0x0002
: SPI2_SR_BSY? ( -- 1|0 ) 7 bit SPI2_SR bit@ ; \ SPI2_SR_BSY, Busy flag
: SPI2_SR_OVR? ( -- 1|0 ) 6 bit SPI2_SR bit@ ; \ SPI2_SR_OVR, Overrun flag
: SPI2_SR_MODF ( -- x addr ) 5 bit SPI2_SR ; \ SPI2_SR_MODF, Mode fault
: SPI2_SR_CRCERR? ( -- 1|0 ) 4 bit SPI2_SR bit@ ; \ SPI2_SR_CRCERR, CRC error flag
: SPI2_SR_UDR? ( -- 1|0 ) 3 bit SPI2_SR bit@ ; \ SPI2_SR_UDR, Underrun flag
: SPI2_SR_CHSIDE ( -- x addr ) 2 bit SPI2_SR ; \ SPI2_SR_CHSIDE, Channel side
: SPI2_SR_TXE ( -- x addr ) 1 bit SPI2_SR ; \ SPI2_SR_TXE, Transmit buffer empty
: SPI2_SR_RXNE ( -- x addr ) 0 bit SPI2_SR ; \ SPI2_SR_RXNE, Receive buffer not empty
: SPI2_SR_FRE ( -- x addr ) 8 bit SPI2_SR ; \ SPI2_SR_FRE, Frame format error
: SPI2_SR_FRLVL ( %bb -- x addr ) 9 lshift SPI2_SR ; \ SPI2_SR_FRLVL, FIFO reception level
: SPI2_SR_FTLVL ( %bb -- x addr ) 11 lshift SPI2_SR ; \ SPI2_SR_FTLVL, FIFO Transmission Level

\ SPI2_DR (read-write) Reset:0x0000
: SPI2_DR_DR ( %bbbbbbbbbbbbbbbb -- x addr ) SPI2_DR ; \ SPI2_DR_DR, Data register

\ SPI2_CRCPR (read-write) Reset:0x0007
: SPI2_CRCPR_CRCPOLY ( %bbbbbbbbbbbbbbbb -- x addr ) SPI2_CRCPR ; \ SPI2_CRCPR_CRCPOLY, CRC polynomial register

\ SPI2_RXCRCR (read-only) Reset:0x0000
: SPI2_RXCRCR_RxCRC? ( --  x ) SPI2_RXCRCR @ ; \ SPI2_RXCRCR_RxCRC, Rx CRC register

\ SPI2_TXCRCR (read-only) Reset:0x0000
: SPI2_TXCRCR_TxCRC? ( --  x ) SPI2_TXCRCR @ ; \ SPI2_TXCRCR_TxCRC, Tx CRC register

\ SPI2_I2SCFGR (read-write) Reset:0x0000
: SPI2_I2SCFGR_I2SMOD ( -- x addr ) 11 bit SPI2_I2SCFGR ; \ SPI2_I2SCFGR_I2SMOD, I2S mode selection
: SPI2_I2SCFGR_I2SE ( -- x addr ) 10 bit SPI2_I2SCFGR ; \ SPI2_I2SCFGR_I2SE, I2S Enable
: SPI2_I2SCFGR_I2SCFG ( %bb -- x addr ) 8 lshift SPI2_I2SCFGR ; \ SPI2_I2SCFGR_I2SCFG, I2S configuration mode
: SPI2_I2SCFGR_PCMSYNC ( -- x addr ) 7 bit SPI2_I2SCFGR ; \ SPI2_I2SCFGR_PCMSYNC, PCM frame synchronization
: SPI2_I2SCFGR_I2SSTD ( %bb -- x addr ) 4 lshift SPI2_I2SCFGR ; \ SPI2_I2SCFGR_I2SSTD, I2S standard selection
: SPI2_I2SCFGR_CKPOL ( -- x addr ) 3 bit SPI2_I2SCFGR ; \ SPI2_I2SCFGR_CKPOL, Steady state clock polarity
: SPI2_I2SCFGR_DATLEN ( %bb -- x addr ) 1 lshift SPI2_I2SCFGR ; \ SPI2_I2SCFGR_DATLEN, Data length to be transferred
: SPI2_I2SCFGR_CHLEN ( -- x addr ) 0 bit SPI2_I2SCFGR ; \ SPI2_I2SCFGR_CHLEN, Channel length number of bits per audio channel
: SPI2_I2SCFGR_ASTRTEN ( -- x addr ) 12 bit SPI2_I2SCFGR ; \ SPI2_I2SCFGR_ASTRTEN, Asynchronous start enable

\ SPI2_I2SPR (read-write) Reset:00000010
: SPI2_I2SPR_MCKOE ( -- x addr ) 9 bit SPI2_I2SPR ; \ SPI2_I2SPR_MCKOE, Master clock output enable
: SPI2_I2SPR_ODD ( -- x addr ) 8 bit SPI2_I2SPR ; \ SPI2_I2SPR_ODD, Odd factor for the prescaler
: SPI2_I2SPR_I2SDIV ( %bbbbbbbb -- x addr ) SPI2_I2SPR ; \ SPI2_I2SPR_I2SDIV, I2S Linear prescaler

\ ADC1_SR (read-write) Reset:0x00000000
: ADC1_SR_OVR ( -- x addr ) 5 bit ADC1_SR ; \ ADC1_SR_OVR, Overrun
: ADC1_SR_STRT ( -- x addr ) 4 bit ADC1_SR ; \ ADC1_SR_STRT, Regular channel start flag
: ADC1_SR_JSTRT ( -- x addr ) 3 bit ADC1_SR ; \ ADC1_SR_JSTRT, Injected channel start flag
: ADC1_SR_JEOC ( -- x addr ) 2 bit ADC1_SR ; \ ADC1_SR_JEOC, Injected channel end of conversion
: ADC1_SR_EOC ( -- x addr ) 1 bit ADC1_SR ; \ ADC1_SR_EOC, Regular channel end of conversion
: ADC1_SR_AWD ( -- x addr ) 0 bit ADC1_SR ; \ ADC1_SR_AWD, Analog watchdog flag

\ ADC1_CR1 (read-write) Reset:0x00000000
: ADC1_CR1_OVRIE ( -- x addr ) 26 bit ADC1_CR1 ; \ ADC1_CR1_OVRIE, Overrun interrupt enable
: ADC1_CR1_RES ( %bb -- x addr ) 24 lshift ADC1_CR1 ; \ ADC1_CR1_RES, Resolution
: ADC1_CR1_AWDEN ( -- x addr ) 23 bit ADC1_CR1 ; \ ADC1_CR1_AWDEN, Analog watchdog enable on regular channels
: ADC1_CR1_JAWDEN ( -- x addr ) 22 bit ADC1_CR1 ; \ ADC1_CR1_JAWDEN, Analog watchdog enable on injected channels
: ADC1_CR1_DISCNUM ( %bbb -- x addr ) 13 lshift ADC1_CR1 ; \ ADC1_CR1_DISCNUM, Discontinuous mode channel count
: ADC1_CR1_JDISCEN ( -- x addr ) 12 bit ADC1_CR1 ; \ ADC1_CR1_JDISCEN, Discontinuous mode on injected channels
: ADC1_CR1_DISCEN ( -- x addr ) 11 bit ADC1_CR1 ; \ ADC1_CR1_DISCEN, Discontinuous mode on regular channels
: ADC1_CR1_JAUTO ( -- x addr ) 10 bit ADC1_CR1 ; \ ADC1_CR1_JAUTO, Automatic injected group conversion
: ADC1_CR1_AWDSGL ( -- x addr ) 9 bit ADC1_CR1 ; \ ADC1_CR1_AWDSGL, Enable the watchdog on a single channel in scan mode
: ADC1_CR1_SCAN ( -- x addr ) 8 bit ADC1_CR1 ; \ ADC1_CR1_SCAN, Scan mode
: ADC1_CR1_JEOCIE ( -- x addr ) 7 bit ADC1_CR1 ; \ ADC1_CR1_JEOCIE, Interrupt enable for injected channels
: ADC1_CR1_AWDIE ( -- x addr ) 6 bit ADC1_CR1 ; \ ADC1_CR1_AWDIE, Analog watchdog interrupt enable
: ADC1_CR1_EOCIE ( -- x addr ) 5 bit ADC1_CR1 ; \ ADC1_CR1_EOCIE, Interrupt enable for EOC
: ADC1_CR1_AWDCH ( %bbbbb -- x addr ) ADC1_CR1 ; \ ADC1_CR1_AWDCH, Analog watchdog channel select bits

\ ADC1_CR2 (read-write) Reset:0x00000000
: ADC1_CR2_SWSTART ( -- x addr ) 30 bit ADC1_CR2 ; \ ADC1_CR2_SWSTART, Start conversion of regular channels
: ADC1_CR2_EXTEN ( %bb -- x addr ) 28 lshift ADC1_CR2 ; \ ADC1_CR2_EXTEN, External trigger enable for regular channels
: ADC1_CR2_EXTSEL ( %bbbb -- x addr ) 24 lshift ADC1_CR2 ; \ ADC1_CR2_EXTSEL, External event select for regular group
: ADC1_CR2_JSWSTART ( -- x addr ) 22 bit ADC1_CR2 ; \ ADC1_CR2_JSWSTART, Start conversion of injected channels
: ADC1_CR2_JEXTEN ( %bb -- x addr ) 20 lshift ADC1_CR2 ; \ ADC1_CR2_JEXTEN, External trigger enable for injected channels
: ADC1_CR2_JEXTSEL ( %bbbb -- x addr ) 16 lshift ADC1_CR2 ; \ ADC1_CR2_JEXTSEL, External event select for injected group
: ADC1_CR2_ALIGN ( -- x addr ) 11 bit ADC1_CR2 ; \ ADC1_CR2_ALIGN, Data alignment
: ADC1_CR2_EOCS ( -- x addr ) 10 bit ADC1_CR2 ; \ ADC1_CR2_EOCS, End of conversion selection
: ADC1_CR2_DDS ( -- x addr ) 9 bit ADC1_CR2 ; \ ADC1_CR2_DDS, DMA disable selection for single ADC mode
: ADC1_CR2_DMA ( -- x addr ) 8 bit ADC1_CR2 ; \ ADC1_CR2_DMA, Direct memory access mode for single ADC mode
: ADC1_CR2_CONT ( -- x addr ) 1 bit ADC1_CR2 ; \ ADC1_CR2_CONT, Continuous conversion
: ADC1_CR2_ADON ( -- x addr ) 0 bit ADC1_CR2 ; \ ADC1_CR2_ADON, A/D Converter ON / OFF

\ ADC1_SMPR1 (read-write) Reset:0x00000000
: ADC1_SMPR1_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC1_SMPR1 ; \ ADC1_SMPR1_SMPx_x, Sample time bits

\ ADC1_SMPR2 (read-write) Reset:0x00000000
: ADC1_SMPR2_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC1_SMPR2 ; \ ADC1_SMPR2_SMPx_x, Sample time bits

\ ADC1_JOFR1 (read-write) Reset:0x00000000
: ADC1_JOFR1_JOFFSET1 ( %bbbbbbbbbbb -- x addr ) ADC1_JOFR1 ; \ ADC1_JOFR1_JOFFSET1, Data offset for injected channel x

\ ADC1_JOFR2 (read-write) Reset:0x00000000
: ADC1_JOFR2_JOFFSET2 ( %bbbbbbbbbbb -- x addr ) ADC1_JOFR2 ; \ ADC1_JOFR2_JOFFSET2, Data offset for injected channel x

\ ADC1_JOFR3 (read-write) Reset:0x00000000
: ADC1_JOFR3_JOFFSET3 ( %bbbbbbbbbbb -- x addr ) ADC1_JOFR3 ; \ ADC1_JOFR3_JOFFSET3, Data offset for injected channel x

\ ADC1_JOFR4 (read-write) Reset:0x00000000
: ADC1_JOFR4_JOFFSET4 ( %bbbbbbbbbbb -- x addr ) ADC1_JOFR4 ; \ ADC1_JOFR4_JOFFSET4, Data offset for injected channel x

\ ADC1_HTR (read-write) Reset:0x00000FFF
: ADC1_HTR_HT ( %bbbbbbbbbbb -- x addr ) ADC1_HTR ; \ ADC1_HTR_HT, Analog watchdog higher threshold

\ ADC1_LTR (read-write) Reset:0x00000000
: ADC1_LTR_LT ( %bbbbbbbbbbb -- x addr ) ADC1_LTR ; \ ADC1_LTR_LT, Analog watchdog lower threshold

\ ADC1_SQR1 (read-write) Reset:0x00000000
: ADC1_SQR1_L ( %bbbb -- x addr ) 20 lshift ADC1_SQR1 ; \ ADC1_SQR1_L, Regular channel sequence length
: ADC1_SQR1_SQ16 ( %bbbbb -- x addr ) 15 lshift ADC1_SQR1 ; \ ADC1_SQR1_SQ16, 16th conversion in regular sequence
: ADC1_SQR1_SQ15 ( %bbbbb -- x addr ) 10 lshift ADC1_SQR1 ; \ ADC1_SQR1_SQ15, 15th conversion in regular sequence
: ADC1_SQR1_SQ14 ( %bbbbb -- x addr ) 5 lshift ADC1_SQR1 ; \ ADC1_SQR1_SQ14, 14th conversion in regular sequence
: ADC1_SQR1_SQ13 ( %bbbbb -- x addr ) ADC1_SQR1 ; \ ADC1_SQR1_SQ13, 13th conversion in regular sequence

\ ADC1_SQR2 (read-write) Reset:0x00000000
: ADC1_SQR2_SQ12 ( %bbbbb -- x addr ) 25 lshift ADC1_SQR2 ; \ ADC1_SQR2_SQ12, 12th conversion in regular sequence
: ADC1_SQR2_SQ11 ( %bbbbb -- x addr ) 20 lshift ADC1_SQR2 ; \ ADC1_SQR2_SQ11, 11th conversion in regular sequence
: ADC1_SQR2_SQ10 ( %bbbbb -- x addr ) 15 lshift ADC1_SQR2 ; \ ADC1_SQR2_SQ10, 10th conversion in regular sequence
: ADC1_SQR2_SQ9 ( %bbbbb -- x addr ) 10 lshift ADC1_SQR2 ; \ ADC1_SQR2_SQ9, 9th conversion in regular sequence
: ADC1_SQR2_SQ8 ( %bbbbb -- x addr ) 5 lshift ADC1_SQR2 ; \ ADC1_SQR2_SQ8, 8th conversion in regular sequence
: ADC1_SQR2_SQ7 ( %bbbbb -- x addr ) ADC1_SQR2 ; \ ADC1_SQR2_SQ7, 7th conversion in regular sequence

\ ADC1_SQR3 (read-write) Reset:0x00000000
: ADC1_SQR3_SQ6 ( %bbbbb -- x addr ) 25 lshift ADC1_SQR3 ; \ ADC1_SQR3_SQ6, 6th conversion in regular sequence
: ADC1_SQR3_SQ5 ( %bbbbb -- x addr ) 20 lshift ADC1_SQR3 ; \ ADC1_SQR3_SQ5, 5th conversion in regular sequence
: ADC1_SQR3_SQ4 ( %bbbbb -- x addr ) 15 lshift ADC1_SQR3 ; \ ADC1_SQR3_SQ4, 4th conversion in regular sequence
: ADC1_SQR3_SQ3 ( %bbbbb -- x addr ) 10 lshift ADC1_SQR3 ; \ ADC1_SQR3_SQ3, 3rd conversion in regular sequence
: ADC1_SQR3_SQ2 ( %bbbbb -- x addr ) 5 lshift ADC1_SQR3 ; \ ADC1_SQR3_SQ2, 2nd conversion in regular sequence
: ADC1_SQR3_SQ1 ( %bbbbb -- x addr ) ADC1_SQR3 ; \ ADC1_SQR3_SQ1, 1st conversion in regular sequence

\ ADC1_JSQR (read-write) Reset:0x00000000
: ADC1_JSQR_JL ( %bb -- x addr ) 20 lshift ADC1_JSQR ; \ ADC1_JSQR_JL, Injected sequence length
: ADC1_JSQR_JSQ4 ( %bbbbb -- x addr ) 15 lshift ADC1_JSQR ; \ ADC1_JSQR_JSQ4, 4th conversion in injected sequence
: ADC1_JSQR_JSQ3 ( %bbbbb -- x addr ) 10 lshift ADC1_JSQR ; \ ADC1_JSQR_JSQ3, 3rd conversion in injected sequence
: ADC1_JSQR_JSQ2 ( %bbbbb -- x addr ) 5 lshift ADC1_JSQR ; \ ADC1_JSQR_JSQ2, 2nd conversion in injected sequence
: ADC1_JSQR_JSQ1 ( %bbbbb -- x addr ) ADC1_JSQR ; \ ADC1_JSQR_JSQ1, 1st conversion in injected sequence

\ ADC1_JDR1 (read-only) Reset:0x00000000
: ADC1_JDR1_JDATA? ( --  x ) ADC1_JDR1 @ ; \ ADC1_JDR1_JDATA, Injected data

\ ADC1_JDR2 (read-only) Reset:0x00000000
: ADC1_JDR2_JDATA? ( --  x ) ADC1_JDR2 @ ; \ ADC1_JDR2_JDATA, Injected data

\ ADC1_JDR3 (read-only) Reset:0x00000000
: ADC1_JDR3_JDATA? ( --  x ) ADC1_JDR3 @ ; \ ADC1_JDR3_JDATA, Injected data

\ ADC1_JDR4 (read-only) Reset:0x00000000
: ADC1_JDR4_JDATA? ( --  x ) ADC1_JDR4 @ ; \ ADC1_JDR4_JDATA, Injected data

\ ADC1_DR (read-only) Reset:0x00000000
: ADC1_DR_DATA? ( --  x ) ADC1_DR @ ; \ ADC1_DR_DATA, Regular data

\ ADC2_SR (read-write) Reset:0x00000000
: ADC2_SR_OVR ( -- x addr ) 5 bit ADC2_SR ; \ ADC2_SR_OVR, Overrun
: ADC2_SR_STRT ( -- x addr ) 4 bit ADC2_SR ; \ ADC2_SR_STRT, Regular channel start flag
: ADC2_SR_JSTRT ( -- x addr ) 3 bit ADC2_SR ; \ ADC2_SR_JSTRT, Injected channel start flag
: ADC2_SR_JEOC ( -- x addr ) 2 bit ADC2_SR ; \ ADC2_SR_JEOC, Injected channel end of conversion
: ADC2_SR_EOC ( -- x addr ) 1 bit ADC2_SR ; \ ADC2_SR_EOC, Regular channel end of conversion
: ADC2_SR_AWD ( -- x addr ) 0 bit ADC2_SR ; \ ADC2_SR_AWD, Analog watchdog flag

\ ADC2_CR1 (read-write) Reset:0x00000000
: ADC2_CR1_OVRIE ( -- x addr ) 26 bit ADC2_CR1 ; \ ADC2_CR1_OVRIE, Overrun interrupt enable
: ADC2_CR1_RES ( %bb -- x addr ) 24 lshift ADC2_CR1 ; \ ADC2_CR1_RES, Resolution
: ADC2_CR1_AWDEN ( -- x addr ) 23 bit ADC2_CR1 ; \ ADC2_CR1_AWDEN, Analog watchdog enable on regular channels
: ADC2_CR1_JAWDEN ( -- x addr ) 22 bit ADC2_CR1 ; \ ADC2_CR1_JAWDEN, Analog watchdog enable on injected channels
: ADC2_CR1_DISCNUM ( %bbb -- x addr ) 13 lshift ADC2_CR1 ; \ ADC2_CR1_DISCNUM, Discontinuous mode channel count
: ADC2_CR1_JDISCEN ( -- x addr ) 12 bit ADC2_CR1 ; \ ADC2_CR1_JDISCEN, Discontinuous mode on injected channels
: ADC2_CR1_DISCEN ( -- x addr ) 11 bit ADC2_CR1 ; \ ADC2_CR1_DISCEN, Discontinuous mode on regular channels
: ADC2_CR1_JAUTO ( -- x addr ) 10 bit ADC2_CR1 ; \ ADC2_CR1_JAUTO, Automatic injected group conversion
: ADC2_CR1_AWDSGL ( -- x addr ) 9 bit ADC2_CR1 ; \ ADC2_CR1_AWDSGL, Enable the watchdog on a single channel in scan mode
: ADC2_CR1_SCAN ( -- x addr ) 8 bit ADC2_CR1 ; \ ADC2_CR1_SCAN, Scan mode
: ADC2_CR1_JEOCIE ( -- x addr ) 7 bit ADC2_CR1 ; \ ADC2_CR1_JEOCIE, Interrupt enable for injected channels
: ADC2_CR1_AWDIE ( -- x addr ) 6 bit ADC2_CR1 ; \ ADC2_CR1_AWDIE, Analog watchdog interrupt enable
: ADC2_CR1_EOCIE ( -- x addr ) 5 bit ADC2_CR1 ; \ ADC2_CR1_EOCIE, Interrupt enable for EOC
: ADC2_CR1_AWDCH ( %bbbbb -- x addr ) ADC2_CR1 ; \ ADC2_CR1_AWDCH, Analog watchdog channel select bits

\ ADC2_CR2 (read-write) Reset:0x00000000
: ADC2_CR2_SWSTART ( -- x addr ) 30 bit ADC2_CR2 ; \ ADC2_CR2_SWSTART, Start conversion of regular channels
: ADC2_CR2_EXTEN ( %bb -- x addr ) 28 lshift ADC2_CR2 ; \ ADC2_CR2_EXTEN, External trigger enable for regular channels
: ADC2_CR2_EXTSEL ( %bbbb -- x addr ) 24 lshift ADC2_CR2 ; \ ADC2_CR2_EXTSEL, External event select for regular group
: ADC2_CR2_JSWSTART ( -- x addr ) 22 bit ADC2_CR2 ; \ ADC2_CR2_JSWSTART, Start conversion of injected channels
: ADC2_CR2_JEXTEN ( %bb -- x addr ) 20 lshift ADC2_CR2 ; \ ADC2_CR2_JEXTEN, External trigger enable for injected channels
: ADC2_CR2_JEXTSEL ( %bbbb -- x addr ) 16 lshift ADC2_CR2 ; \ ADC2_CR2_JEXTSEL, External event select for injected group
: ADC2_CR2_ALIGN ( -- x addr ) 11 bit ADC2_CR2 ; \ ADC2_CR2_ALIGN, Data alignment
: ADC2_CR2_EOCS ( -- x addr ) 10 bit ADC2_CR2 ; \ ADC2_CR2_EOCS, End of conversion selection
: ADC2_CR2_DDS ( -- x addr ) 9 bit ADC2_CR2 ; \ ADC2_CR2_DDS, DMA disable selection for single ADC mode
: ADC2_CR2_DMA ( -- x addr ) 8 bit ADC2_CR2 ; \ ADC2_CR2_DMA, Direct memory access mode for single ADC mode
: ADC2_CR2_CONT ( -- x addr ) 1 bit ADC2_CR2 ; \ ADC2_CR2_CONT, Continuous conversion
: ADC2_CR2_ADON ( -- x addr ) 0 bit ADC2_CR2 ; \ ADC2_CR2_ADON, A/D Converter ON / OFF

\ ADC2_SMPR1 (read-write) Reset:0x00000000
: ADC2_SMPR1_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC2_SMPR1 ; \ ADC2_SMPR1_SMPx_x, Sample time bits

\ ADC2_SMPR2 (read-write) Reset:0x00000000
: ADC2_SMPR2_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC2_SMPR2 ; \ ADC2_SMPR2_SMPx_x, Sample time bits

\ ADC2_JOFR1 (read-write) Reset:0x00000000
: ADC2_JOFR1_JOFFSET1 ( %bbbbbbbbbbb -- x addr ) ADC2_JOFR1 ; \ ADC2_JOFR1_JOFFSET1, Data offset for injected channel x

\ ADC2_JOFR2 (read-write) Reset:0x00000000
: ADC2_JOFR2_JOFFSET2 ( %bbbbbbbbbbb -- x addr ) ADC2_JOFR2 ; \ ADC2_JOFR2_JOFFSET2, Data offset for injected channel x

\ ADC2_JOFR3 (read-write) Reset:0x00000000
: ADC2_JOFR3_JOFFSET3 ( %bbbbbbbbbbb -- x addr ) ADC2_JOFR3 ; \ ADC2_JOFR3_JOFFSET3, Data offset for injected channel x

\ ADC2_JOFR4 (read-write) Reset:0x00000000
: ADC2_JOFR4_JOFFSET4 ( %bbbbbbbbbbb -- x addr ) ADC2_JOFR4 ; \ ADC2_JOFR4_JOFFSET4, Data offset for injected channel x

\ ADC2_HTR (read-write) Reset:0x00000FFF
: ADC2_HTR_HT ( %bbbbbbbbbbb -- x addr ) ADC2_HTR ; \ ADC2_HTR_HT, Analog watchdog higher threshold

\ ADC2_LTR (read-write) Reset:0x00000000
: ADC2_LTR_LT ( %bbbbbbbbbbb -- x addr ) ADC2_LTR ; \ ADC2_LTR_LT, Analog watchdog lower threshold

\ ADC2_SQR1 (read-write) Reset:0x00000000
: ADC2_SQR1_L ( %bbbb -- x addr ) 20 lshift ADC2_SQR1 ; \ ADC2_SQR1_L, Regular channel sequence length
: ADC2_SQR1_SQ16 ( %bbbbb -- x addr ) 15 lshift ADC2_SQR1 ; \ ADC2_SQR1_SQ16, 16th conversion in regular sequence
: ADC2_SQR1_SQ15 ( %bbbbb -- x addr ) 10 lshift ADC2_SQR1 ; \ ADC2_SQR1_SQ15, 15th conversion in regular sequence
: ADC2_SQR1_SQ14 ( %bbbbb -- x addr ) 5 lshift ADC2_SQR1 ; \ ADC2_SQR1_SQ14, 14th conversion in regular sequence
: ADC2_SQR1_SQ13 ( %bbbbb -- x addr ) ADC2_SQR1 ; \ ADC2_SQR1_SQ13, 13th conversion in regular sequence

\ ADC2_SQR2 (read-write) Reset:0x00000000
: ADC2_SQR2_SQ12 ( %bbbbb -- x addr ) 25 lshift ADC2_SQR2 ; \ ADC2_SQR2_SQ12, 12th conversion in regular sequence
: ADC2_SQR2_SQ11 ( %bbbbb -- x addr ) 20 lshift ADC2_SQR2 ; \ ADC2_SQR2_SQ11, 11th conversion in regular sequence
: ADC2_SQR2_SQ10 ( %bbbbb -- x addr ) 15 lshift ADC2_SQR2 ; \ ADC2_SQR2_SQ10, 10th conversion in regular sequence
: ADC2_SQR2_SQ9 ( %bbbbb -- x addr ) 10 lshift ADC2_SQR2 ; \ ADC2_SQR2_SQ9, 9th conversion in regular sequence
: ADC2_SQR2_SQ8 ( %bbbbb -- x addr ) 5 lshift ADC2_SQR2 ; \ ADC2_SQR2_SQ8, 8th conversion in regular sequence
: ADC2_SQR2_SQ7 ( %bbbbb -- x addr ) ADC2_SQR2 ; \ ADC2_SQR2_SQ7, 7th conversion in regular sequence

\ ADC2_SQR3 (read-write) Reset:0x00000000
: ADC2_SQR3_SQ6 ( %bbbbb -- x addr ) 25 lshift ADC2_SQR3 ; \ ADC2_SQR3_SQ6, 6th conversion in regular sequence
: ADC2_SQR3_SQ5 ( %bbbbb -- x addr ) 20 lshift ADC2_SQR3 ; \ ADC2_SQR3_SQ5, 5th conversion in regular sequence
: ADC2_SQR3_SQ4 ( %bbbbb -- x addr ) 15 lshift ADC2_SQR3 ; \ ADC2_SQR3_SQ4, 4th conversion in regular sequence
: ADC2_SQR3_SQ3 ( %bbbbb -- x addr ) 10 lshift ADC2_SQR3 ; \ ADC2_SQR3_SQ3, 3rd conversion in regular sequence
: ADC2_SQR3_SQ2 ( %bbbbb -- x addr ) 5 lshift ADC2_SQR3 ; \ ADC2_SQR3_SQ2, 2nd conversion in regular sequence
: ADC2_SQR3_SQ1 ( %bbbbb -- x addr ) ADC2_SQR3 ; \ ADC2_SQR3_SQ1, 1st conversion in regular sequence

\ ADC2_JSQR (read-write) Reset:0x00000000
: ADC2_JSQR_JL ( %bb -- x addr ) 20 lshift ADC2_JSQR ; \ ADC2_JSQR_JL, Injected sequence length
: ADC2_JSQR_JSQ4 ( %bbbbb -- x addr ) 15 lshift ADC2_JSQR ; \ ADC2_JSQR_JSQ4, 4th conversion in injected sequence
: ADC2_JSQR_JSQ3 ( %bbbbb -- x addr ) 10 lshift ADC2_JSQR ; \ ADC2_JSQR_JSQ3, 3rd conversion in injected sequence
: ADC2_JSQR_JSQ2 ( %bbbbb -- x addr ) 5 lshift ADC2_JSQR ; \ ADC2_JSQR_JSQ2, 2nd conversion in injected sequence
: ADC2_JSQR_JSQ1 ( %bbbbb -- x addr ) ADC2_JSQR ; \ ADC2_JSQR_JSQ1, 1st conversion in injected sequence

\ ADC2_JDR1 (read-only) Reset:0x00000000
: ADC2_JDR1_JDATA? ( --  x ) ADC2_JDR1 @ ; \ ADC2_JDR1_JDATA, Injected data

\ ADC2_JDR2 (read-only) Reset:0x00000000
: ADC2_JDR2_JDATA? ( --  x ) ADC2_JDR2 @ ; \ ADC2_JDR2_JDATA, Injected data

\ ADC2_JDR3 (read-only) Reset:0x00000000
: ADC2_JDR3_JDATA? ( --  x ) ADC2_JDR3 @ ; \ ADC2_JDR3_JDATA, Injected data

\ ADC2_JDR4 (read-only) Reset:0x00000000
: ADC2_JDR4_JDATA? ( --  x ) ADC2_JDR4 @ ; \ ADC2_JDR4_JDATA, Injected data

\ ADC2_DR (read-only) Reset:0x00000000
: ADC2_DR_DATA? ( --  x ) ADC2_DR @ ; \ ADC2_DR_DATA, Regular data

\ ADC3_SR (read-write) Reset:0x00000000
: ADC3_SR_OVR ( -- x addr ) 5 bit ADC3_SR ; \ ADC3_SR_OVR, Overrun
: ADC3_SR_STRT ( -- x addr ) 4 bit ADC3_SR ; \ ADC3_SR_STRT, Regular channel start flag
: ADC3_SR_JSTRT ( -- x addr ) 3 bit ADC3_SR ; \ ADC3_SR_JSTRT, Injected channel start flag
: ADC3_SR_JEOC ( -- x addr ) 2 bit ADC3_SR ; \ ADC3_SR_JEOC, Injected channel end of conversion
: ADC3_SR_EOC ( -- x addr ) 1 bit ADC3_SR ; \ ADC3_SR_EOC, Regular channel end of conversion
: ADC3_SR_AWD ( -- x addr ) 0 bit ADC3_SR ; \ ADC3_SR_AWD, Analog watchdog flag

\ ADC3_CR1 (read-write) Reset:0x00000000
: ADC3_CR1_OVRIE ( -- x addr ) 26 bit ADC3_CR1 ; \ ADC3_CR1_OVRIE, Overrun interrupt enable
: ADC3_CR1_RES ( %bb -- x addr ) 24 lshift ADC3_CR1 ; \ ADC3_CR1_RES, Resolution
: ADC3_CR1_AWDEN ( -- x addr ) 23 bit ADC3_CR1 ; \ ADC3_CR1_AWDEN, Analog watchdog enable on regular channels
: ADC3_CR1_JAWDEN ( -- x addr ) 22 bit ADC3_CR1 ; \ ADC3_CR1_JAWDEN, Analog watchdog enable on injected channels
: ADC3_CR1_DISCNUM ( %bbb -- x addr ) 13 lshift ADC3_CR1 ; \ ADC3_CR1_DISCNUM, Discontinuous mode channel count
: ADC3_CR1_JDISCEN ( -- x addr ) 12 bit ADC3_CR1 ; \ ADC3_CR1_JDISCEN, Discontinuous mode on injected channels
: ADC3_CR1_DISCEN ( -- x addr ) 11 bit ADC3_CR1 ; \ ADC3_CR1_DISCEN, Discontinuous mode on regular channels
: ADC3_CR1_JAUTO ( -- x addr ) 10 bit ADC3_CR1 ; \ ADC3_CR1_JAUTO, Automatic injected group conversion
: ADC3_CR1_AWDSGL ( -- x addr ) 9 bit ADC3_CR1 ; \ ADC3_CR1_AWDSGL, Enable the watchdog on a single channel in scan mode
: ADC3_CR1_SCAN ( -- x addr ) 8 bit ADC3_CR1 ; \ ADC3_CR1_SCAN, Scan mode
: ADC3_CR1_JEOCIE ( -- x addr ) 7 bit ADC3_CR1 ; \ ADC3_CR1_JEOCIE, Interrupt enable for injected channels
: ADC3_CR1_AWDIE ( -- x addr ) 6 bit ADC3_CR1 ; \ ADC3_CR1_AWDIE, Analog watchdog interrupt enable
: ADC3_CR1_EOCIE ( -- x addr ) 5 bit ADC3_CR1 ; \ ADC3_CR1_EOCIE, Interrupt enable for EOC
: ADC3_CR1_AWDCH ( %bbbbb -- x addr ) ADC3_CR1 ; \ ADC3_CR1_AWDCH, Analog watchdog channel select bits

\ ADC3_CR2 (read-write) Reset:0x00000000
: ADC3_CR2_SWSTART ( -- x addr ) 30 bit ADC3_CR2 ; \ ADC3_CR2_SWSTART, Start conversion of regular channels
: ADC3_CR2_EXTEN ( %bb -- x addr ) 28 lshift ADC3_CR2 ; \ ADC3_CR2_EXTEN, External trigger enable for regular channels
: ADC3_CR2_EXTSEL ( %bbbb -- x addr ) 24 lshift ADC3_CR2 ; \ ADC3_CR2_EXTSEL, External event select for regular group
: ADC3_CR2_JSWSTART ( -- x addr ) 22 bit ADC3_CR2 ; \ ADC3_CR2_JSWSTART, Start conversion of injected channels
: ADC3_CR2_JEXTEN ( %bb -- x addr ) 20 lshift ADC3_CR2 ; \ ADC3_CR2_JEXTEN, External trigger enable for injected channels
: ADC3_CR2_JEXTSEL ( %bbbb -- x addr ) 16 lshift ADC3_CR2 ; \ ADC3_CR2_JEXTSEL, External event select for injected group
: ADC3_CR2_ALIGN ( -- x addr ) 11 bit ADC3_CR2 ; \ ADC3_CR2_ALIGN, Data alignment
: ADC3_CR2_EOCS ( -- x addr ) 10 bit ADC3_CR2 ; \ ADC3_CR2_EOCS, End of conversion selection
: ADC3_CR2_DDS ( -- x addr ) 9 bit ADC3_CR2 ; \ ADC3_CR2_DDS, DMA disable selection for single ADC mode
: ADC3_CR2_DMA ( -- x addr ) 8 bit ADC3_CR2 ; \ ADC3_CR2_DMA, Direct memory access mode for single ADC mode
: ADC3_CR2_CONT ( -- x addr ) 1 bit ADC3_CR2 ; \ ADC3_CR2_CONT, Continuous conversion
: ADC3_CR2_ADON ( -- x addr ) 0 bit ADC3_CR2 ; \ ADC3_CR2_ADON, A/D Converter ON / OFF

\ ADC3_SMPR1 (read-write) Reset:0x00000000
: ADC3_SMPR1_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC3_SMPR1 ; \ ADC3_SMPR1_SMPx_x, Sample time bits

\ ADC3_SMPR2 (read-write) Reset:0x00000000
: ADC3_SMPR2_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC3_SMPR2 ; \ ADC3_SMPR2_SMPx_x, Sample time bits

\ ADC3_JOFR1 (read-write) Reset:0x00000000
: ADC3_JOFR1_JOFFSET1 ( %bbbbbbbbbbb -- x addr ) ADC3_JOFR1 ; \ ADC3_JOFR1_JOFFSET1, Data offset for injected channel x

\ ADC3_JOFR2 (read-write) Reset:0x00000000
: ADC3_JOFR2_JOFFSET2 ( %bbbbbbbbbbb -- x addr ) ADC3_JOFR2 ; \ ADC3_JOFR2_JOFFSET2, Data offset for injected channel x

\ ADC3_JOFR3 (read-write) Reset:0x00000000
: ADC3_JOFR3_JOFFSET3 ( %bbbbbbbbbbb -- x addr ) ADC3_JOFR3 ; \ ADC3_JOFR3_JOFFSET3, Data offset for injected channel x

\ ADC3_JOFR4 (read-write) Reset:0x00000000
: ADC3_JOFR4_JOFFSET4 ( %bbbbbbbbbbb -- x addr ) ADC3_JOFR4 ; \ ADC3_JOFR4_JOFFSET4, Data offset for injected channel x

\ ADC3_HTR (read-write) Reset:0x00000FFF
: ADC3_HTR_HT ( %bbbbbbbbbbb -- x addr ) ADC3_HTR ; \ ADC3_HTR_HT, Analog watchdog higher threshold

\ ADC3_LTR (read-write) Reset:0x00000000
: ADC3_LTR_LT ( %bbbbbbbbbbb -- x addr ) ADC3_LTR ; \ ADC3_LTR_LT, Analog watchdog lower threshold

\ ADC3_SQR1 (read-write) Reset:0x00000000
: ADC3_SQR1_L ( %bbbb -- x addr ) 20 lshift ADC3_SQR1 ; \ ADC3_SQR1_L, Regular channel sequence length
: ADC3_SQR1_SQ16 ( %bbbbb -- x addr ) 15 lshift ADC3_SQR1 ; \ ADC3_SQR1_SQ16, 16th conversion in regular sequence
: ADC3_SQR1_SQ15 ( %bbbbb -- x addr ) 10 lshift ADC3_SQR1 ; \ ADC3_SQR1_SQ15, 15th conversion in regular sequence
: ADC3_SQR1_SQ14 ( %bbbbb -- x addr ) 5 lshift ADC3_SQR1 ; \ ADC3_SQR1_SQ14, 14th conversion in regular sequence
: ADC3_SQR1_SQ13 ( %bbbbb -- x addr ) ADC3_SQR1 ; \ ADC3_SQR1_SQ13, 13th conversion in regular sequence

\ ADC3_SQR2 (read-write) Reset:0x00000000
: ADC3_SQR2_SQ12 ( %bbbbb -- x addr ) 25 lshift ADC3_SQR2 ; \ ADC3_SQR2_SQ12, 12th conversion in regular sequence
: ADC3_SQR2_SQ11 ( %bbbbb -- x addr ) 20 lshift ADC3_SQR2 ; \ ADC3_SQR2_SQ11, 11th conversion in regular sequence
: ADC3_SQR2_SQ10 ( %bbbbb -- x addr ) 15 lshift ADC3_SQR2 ; \ ADC3_SQR2_SQ10, 10th conversion in regular sequence
: ADC3_SQR2_SQ9 ( %bbbbb -- x addr ) 10 lshift ADC3_SQR2 ; \ ADC3_SQR2_SQ9, 9th conversion in regular sequence
: ADC3_SQR2_SQ8 ( %bbbbb -- x addr ) 5 lshift ADC3_SQR2 ; \ ADC3_SQR2_SQ8, 8th conversion in regular sequence
: ADC3_SQR2_SQ7 ( %bbbbb -- x addr ) ADC3_SQR2 ; \ ADC3_SQR2_SQ7, 7th conversion in regular sequence

\ ADC3_SQR3 (read-write) Reset:0x00000000
: ADC3_SQR3_SQ6 ( %bbbbb -- x addr ) 25 lshift ADC3_SQR3 ; \ ADC3_SQR3_SQ6, 6th conversion in regular sequence
: ADC3_SQR3_SQ5 ( %bbbbb -- x addr ) 20 lshift ADC3_SQR3 ; \ ADC3_SQR3_SQ5, 5th conversion in regular sequence
: ADC3_SQR3_SQ4 ( %bbbbb -- x addr ) 15 lshift ADC3_SQR3 ; \ ADC3_SQR3_SQ4, 4th conversion in regular sequence
: ADC3_SQR3_SQ3 ( %bbbbb -- x addr ) 10 lshift ADC3_SQR3 ; \ ADC3_SQR3_SQ3, 3rd conversion in regular sequence
: ADC3_SQR3_SQ2 ( %bbbbb -- x addr ) 5 lshift ADC3_SQR3 ; \ ADC3_SQR3_SQ2, 2nd conversion in regular sequence
: ADC3_SQR3_SQ1 ( %bbbbb -- x addr ) ADC3_SQR3 ; \ ADC3_SQR3_SQ1, 1st conversion in regular sequence

\ ADC3_JSQR (read-write) Reset:0x00000000
: ADC3_JSQR_JL ( %bb -- x addr ) 20 lshift ADC3_JSQR ; \ ADC3_JSQR_JL, Injected sequence length
: ADC3_JSQR_JSQ4 ( %bbbbb -- x addr ) 15 lshift ADC3_JSQR ; \ ADC3_JSQR_JSQ4, 4th conversion in injected sequence
: ADC3_JSQR_JSQ3 ( %bbbbb -- x addr ) 10 lshift ADC3_JSQR ; \ ADC3_JSQR_JSQ3, 3rd conversion in injected sequence
: ADC3_JSQR_JSQ2 ( %bbbbb -- x addr ) 5 lshift ADC3_JSQR ; \ ADC3_JSQR_JSQ2, 2nd conversion in injected sequence
: ADC3_JSQR_JSQ1 ( %bbbbb -- x addr ) ADC3_JSQR ; \ ADC3_JSQR_JSQ1, 1st conversion in injected sequence

\ ADC3_JDR1 (read-only) Reset:0x00000000
: ADC3_JDR1_JDATA? ( --  x ) ADC3_JDR1 @ ; \ ADC3_JDR1_JDATA, Injected data

\ ADC3_JDR2 (read-only) Reset:0x00000000
: ADC3_JDR2_JDATA? ( --  x ) ADC3_JDR2 @ ; \ ADC3_JDR2_JDATA, Injected data

\ ADC3_JDR3 (read-only) Reset:0x00000000
: ADC3_JDR3_JDATA? ( --  x ) ADC3_JDR3 @ ; \ ADC3_JDR3_JDATA, Injected data

\ ADC3_JDR4 (read-only) Reset:0x00000000
: ADC3_JDR4_JDATA? ( --  x ) ADC3_JDR4 @ ; \ ADC3_JDR4_JDATA, Injected data

\ ADC3_DR (read-only) Reset:0x00000000
: ADC3_DR_DATA? ( --  x ) ADC3_DR @ ; \ ADC3_DR_DATA, Regular data

\ DAC_CR (read-write) Reset:0x00000000
: DAC_CR_DMAUDRIE2 ( -- x addr ) 29 bit DAC_CR ; \ DAC_CR_DMAUDRIE2, DAC channel2 DMA underrun interrupt enable
: DAC_CR_DMAEN2 ( -- x addr ) 28 bit DAC_CR ; \ DAC_CR_DMAEN2, DAC channel2 DMA enable
: DAC_CR_MAMP2 ( %bbbb -- x addr ) 24 lshift DAC_CR ; \ DAC_CR_MAMP2, DAC channel2 mask/amplitude selector
: DAC_CR_WAVE2 ( %bb -- x addr ) 22 lshift DAC_CR ; \ DAC_CR_WAVE2, DAC channel2 noise/triangle wave generation enable
: DAC_CR_TSEL2 ( %bbb -- x addr ) 19 lshift DAC_CR ; \ DAC_CR_TSEL2, DAC channel2 trigger selection
: DAC_CR_TEN2 ( -- x addr ) 18 bit DAC_CR ; \ DAC_CR_TEN2, DAC channel2 trigger enable
: DAC_CR_BOFF2 ( -- x addr ) 17 bit DAC_CR ; \ DAC_CR_BOFF2, DAC channel2 output buffer disable
: DAC_CR_EN2 ( -- x addr ) 16 bit DAC_CR ; \ DAC_CR_EN2, DAC channel2 enable
: DAC_CR_DMAUDRIE1 ( -- x addr ) 13 bit DAC_CR ; \ DAC_CR_DMAUDRIE1, DAC channel1 DMA Underrun Interrupt enable
: DAC_CR_DMAEN1 ( -- x addr ) 12 bit DAC_CR ; \ DAC_CR_DMAEN1, DAC channel1 DMA enable
: DAC_CR_MAMP1 ( %bbbb -- x addr ) 8 lshift DAC_CR ; \ DAC_CR_MAMP1, DAC channel1 mask/amplitude selector
: DAC_CR_WAVE1 ( %bb -- x addr ) 6 lshift DAC_CR ; \ DAC_CR_WAVE1, DAC channel1 noise/triangle wave generation enable
: DAC_CR_TSEL1 ( %bbb -- x addr ) 3 lshift DAC_CR ; \ DAC_CR_TSEL1, DAC channel1 trigger selection
: DAC_CR_TEN1 ( -- x addr ) 2 bit DAC_CR ; \ DAC_CR_TEN1, DAC channel1 trigger enable
: DAC_CR_BOFF1 ( -- x addr ) 1 bit DAC_CR ; \ DAC_CR_BOFF1, DAC channel1 output buffer disable
: DAC_CR_EN1 ( -- x addr ) 0 bit DAC_CR ; \ DAC_CR_EN1, DAC channel1 enable

\ DAC_SWTRIGR (write-only) Reset:0x00000000
: DAC_SWTRIGR_SWTRIG2 ( -- x addr ) 1 bit DAC_SWTRIGR ; \ DAC_SWTRIGR_SWTRIG2, DAC channel2 software trigger
: DAC_SWTRIGR_SWTRIG1 ( -- x addr ) 0 bit DAC_SWTRIGR ; \ DAC_SWTRIGR_SWTRIG1, DAC channel1 software trigger

\ DAC_DHR12R1 (read-write) Reset:0x00000000
: DAC_DHR12R1_DACC1DHR ( %bbbbbbbbbbb -- x addr ) DAC_DHR12R1 ; \ DAC_DHR12R1_DACC1DHR, DAC channel1 12-bit right-aligned data

\ DAC_DHR12L1 (read-write) Reset:0x00000000
: DAC_DHR12L1_DACC1DHR ( %bbbbbbbbbbb -- x addr ) 4 lshift DAC_DHR12L1 ; \ DAC_DHR12L1_DACC1DHR, DAC channel1 12-bit left-aligned data

\ DAC_DHR8R1 (read-write) Reset:0x00000000
: DAC_DHR8R1_DACC1DHR ( %bbbbbbbb -- x addr ) DAC_DHR8R1 ; \ DAC_DHR8R1_DACC1DHR, DAC channel1 8-bit right-aligned data

\ DAC_DHR12R2 (read-write) Reset:0x00000000
: DAC_DHR12R2_DACC2DHR ( %bbbbbbbbbbb -- x addr ) DAC_DHR12R2 ; \ DAC_DHR12R2_DACC2DHR, DAC channel2 12-bit right-aligned data

\ DAC_DHR12L2 (read-write) Reset:0x00000000
: DAC_DHR12L2_DACC2DHR ( %bbbbbbbbbbb -- x addr ) 4 lshift DAC_DHR12L2 ; \ DAC_DHR12L2_DACC2DHR, DAC channel2 12-bit left-aligned data

\ DAC_DHR8R2 (read-write) Reset:0x00000000
: DAC_DHR8R2_DACC2DHR ( %bbbbbbbb -- x addr ) DAC_DHR8R2 ; \ DAC_DHR8R2_DACC2DHR, DAC channel2 8-bit right-aligned data

\ DAC_DHR12RD (read-write) Reset:0x00000000
: DAC_DHR12RD_DACC2DHR ( %bbbbbbbbbbb -- x addr ) 16 lshift DAC_DHR12RD ; \ DAC_DHR12RD_DACC2DHR, DAC channel2 12-bit right-aligned data
: DAC_DHR12RD_DACC1DHR ( %bbbbbbbbbbb -- x addr ) DAC_DHR12RD ; \ DAC_DHR12RD_DACC1DHR, DAC channel1 12-bit right-aligned data

\ DAC_DHR12LD (read-write) Reset:0x00000000
: DAC_DHR12LD_DACC2DHR ( %bbbbbbbbbbb -- x addr ) 20 lshift DAC_DHR12LD ; \ DAC_DHR12LD_DACC2DHR, DAC channel2 12-bit left-aligned data
: DAC_DHR12LD_DACC1DHR ( %bbbbbbbbbbb -- x addr ) 4 lshift DAC_DHR12LD ; \ DAC_DHR12LD_DACC1DHR, DAC channel1 12-bit left-aligned data

\ DAC_DHR8RD (read-write) Reset:0x00000000
: DAC_DHR8RD_DACC2DHR ( %bbbbbbbb -- x addr ) 8 lshift DAC_DHR8RD ; \ DAC_DHR8RD_DACC2DHR, DAC channel2 8-bit right-aligned data
: DAC_DHR8RD_DACC1DHR ( %bbbbbbbb -- x addr ) DAC_DHR8RD ; \ DAC_DHR8RD_DACC1DHR, DAC channel1 8-bit right-aligned data

\ DAC_DOR1 (read-only) Reset:0x00000000
: DAC_DOR1_DACC1DOR? ( --  x ) DAC_DOR1 @ ; \ DAC_DOR1_DACC1DOR, DAC channel1 data output

\ DAC_DOR2 (read-only) Reset:0x00000000
: DAC_DOR2_DACC2DOR? ( --  x ) DAC_DOR2 @ ; \ DAC_DOR2_DACC2DOR, DAC channel2 data output

\ DAC_SR (read-write) Reset:0x00000000
: DAC_SR_DMAUDR2 ( -- x addr ) 29 bit DAC_SR ; \ DAC_SR_DMAUDR2, DAC channel2 DMA underrun flag
: DAC_SR_DMAUDR1 ( -- x addr ) 13 bit DAC_SR ; \ DAC_SR_DMAUDR1, DAC channel1 DMA underrun flag

\ PWR_CR1 (read-write) Reset:0x0000C000
: PWR_CR1_LPDS ( -- x addr ) 0 bit PWR_CR1 ; \ PWR_CR1_LPDS, Low-power deep sleep
: PWR_CR1_PDDS ( -- x addr ) 1 bit PWR_CR1 ; \ PWR_CR1_PDDS, Power down deepsleep
: PWR_CR1_CSBF ( -- x addr ) 3 bit PWR_CR1 ; \ PWR_CR1_CSBF, Clear standby flag
: PWR_CR1_PVDE ( -- x addr ) 4 bit PWR_CR1 ; \ PWR_CR1_PVDE, Power voltage detector enable
: PWR_CR1_PLS ( %bbb -- x addr ) 5 lshift PWR_CR1 ; \ PWR_CR1_PLS, PVD level selection
: PWR_CR1_DBP ( -- x addr ) 8 bit PWR_CR1 ; \ PWR_CR1_DBP, Disable backup domain write protection
: PWR_CR1_FPDS ( -- x addr ) 9 bit PWR_CR1 ; \ PWR_CR1_FPDS, Flash power down in Stop mode
: PWR_CR1_LPUDS ( -- x addr ) 10 bit PWR_CR1 ; \ PWR_CR1_LPUDS, Low-power regulator in deepsleep under-drive mode
: PWR_CR1_MRUDS ( -- x addr ) 11 bit PWR_CR1 ; \ PWR_CR1_MRUDS, Main regulator in deepsleep under-drive mode
: PWR_CR1_ADCDC1 ( -- x addr ) 13 bit PWR_CR1 ; \ PWR_CR1_ADCDC1, ADCDC1
: PWR_CR1_VOS ( %bb -- x addr ) 14 lshift PWR_CR1 ; \ PWR_CR1_VOS, Regulator voltage scaling output selection
: PWR_CR1_ODEN ( -- x addr ) 16 bit PWR_CR1 ; \ PWR_CR1_ODEN, Over-drive enable
: PWR_CR1_ODSWEN ( -- x addr ) 17 bit PWR_CR1 ; \ PWR_CR1_ODSWEN, Over-drive switching enabled
: PWR_CR1_UDEN ( %bb -- x addr ) 18 lshift PWR_CR1 ; \ PWR_CR1_UDEN, Under-drive enable in stop mode

\ PWR_CSR1 (multiple-access)  Reset:0x00000000
: PWR_CSR1_WUIF? ( -- 1|0 ) 0 bit PWR_CSR1 bit@ ; \ PWR_CSR1_WUIF, Wakeup internal flag
: PWR_CSR1_SBF? ( -- 1|0 ) 1 bit PWR_CSR1 bit@ ; \ PWR_CSR1_SBF, Standby flag
: PWR_CSR1_PVDO ( -- x addr ) 2 bit PWR_CSR1 ; \ PWR_CSR1_PVDO, PVD output
: PWR_CSR1_BRR ( -- x addr ) 3 bit PWR_CSR1 ; \ PWR_CSR1_BRR, Backup regulator ready
: PWR_CSR1_BRE ( -- x addr ) 9 bit PWR_CSR1 ; \ PWR_CSR1_BRE, Backup regulator enable
: PWR_CSR1_VOSRDY ( -- x addr ) 14 bit PWR_CSR1 ; \ PWR_CSR1_VOSRDY, Regulator voltage scaling output selection ready bit
: PWR_CSR1_ODRDY ( -- x addr ) 16 bit PWR_CSR1 ; \ PWR_CSR1_ODRDY, Over-drive mode ready
: PWR_CSR1_ODSWRDY ( -- x addr ) 17 bit PWR_CSR1 ; \ PWR_CSR1_ODSWRDY, Over-drive mode switching ready
: PWR_CSR1_UDRDY? ( %bb -- 1|0 ) 18 lshift PWR_CSR1 bit@ ; \ PWR_CSR1_UDRDY, Under-drive ready flag

\ PWR_CR2 (multiple-access)  Reset:0x00000000
: PWR_CR2_CWUPF1? ( -- 1|0 ) 0 bit PWR_CR2 bit@ ; \ PWR_CR2_CWUPF1, Clear Wakeup Pin flag for PA0
: PWR_CR2_CWUPF2? ( -- 1|0 ) 1 bit PWR_CR2 bit@ ; \ PWR_CR2_CWUPF2, Clear Wakeup Pin flag for PA2
: PWR_CR2_CWUPF3? ( -- 1|0 ) 2 bit PWR_CR2 bit@ ; \ PWR_CR2_CWUPF3, Clear Wakeup Pin flag for PC1
: PWR_CR2_CWUPF4? ( -- 1|0 ) 3 bit PWR_CR2 bit@ ; \ PWR_CR2_CWUPF4, Clear Wakeup Pin flag for PC13
: PWR_CR2_CWUPF5? ( -- 1|0 ) 4 bit PWR_CR2 bit@ ; \ PWR_CR2_CWUPF5, Clear Wakeup Pin flag for PI8
: PWR_CR2_CWUPF6? ( -- 1|0 ) 5 bit PWR_CR2 bit@ ; \ PWR_CR2_CWUPF6, Clear Wakeup Pin flag for PI11
: PWR_CR2_WUPP1 ( -- x addr ) 8 bit PWR_CR2 ; \ PWR_CR2_WUPP1, Wakeup pin polarity bit for PA0
: PWR_CR2_WUPP2 ( -- x addr ) 9 bit PWR_CR2 ; \ PWR_CR2_WUPP2, Wakeup pin polarity bit for PA2
: PWR_CR2_WUPP3 ( -- x addr ) 10 bit PWR_CR2 ; \ PWR_CR2_WUPP3, Wakeup pin polarity bit for PC1
: PWR_CR2_WUPP4 ( -- x addr ) 11 bit PWR_CR2 ; \ PWR_CR2_WUPP4, Wakeup pin polarity bit for PC13
: PWR_CR2_WUPP5 ( -- x addr ) 12 bit PWR_CR2 ; \ PWR_CR2_WUPP5, Wakeup pin polarity bit for PI8
: PWR_CR2_WUPP6 ( -- x addr ) 13 bit PWR_CR2 ; \ PWR_CR2_WUPP6, Wakeup pin polarity bit for PI11

\ PWR_CSR2 (multiple-access)  Reset:0x00000000
: PWR_CSR2_WUPF1? ( -- 1|0 ) 0 bit PWR_CSR2 bit@ ; \ PWR_CSR2_WUPF1, Wakeup Pin flag for PA0
: PWR_CSR2_WUPF2? ( -- 1|0 ) 1 bit PWR_CSR2 bit@ ; \ PWR_CSR2_WUPF2, Wakeup Pin flag for PA2
: PWR_CSR2_WUPF3? ( -- 1|0 ) 2 bit PWR_CSR2 bit@ ; \ PWR_CSR2_WUPF3, Wakeup Pin flag for PC1
: PWR_CSR2_WUPF4? ( -- 1|0 ) 3 bit PWR_CSR2 bit@ ; \ PWR_CSR2_WUPF4, Wakeup Pin flag for PC13
: PWR_CSR2_WUPF5? ( -- 1|0 ) 4 bit PWR_CSR2 bit@ ; \ PWR_CSR2_WUPF5, Wakeup Pin flag for PI8
: PWR_CSR2_WUPF6? ( -- 1|0 ) 5 bit PWR_CSR2 bit@ ; \ PWR_CSR2_WUPF6, Wakeup Pin flag for PI11
: PWR_CSR2_EWUP1 ( -- x addr ) 8 bit PWR_CSR2 ; \ PWR_CSR2_EWUP1, Enable Wakeup pin for PA0
: PWR_CSR2_EWUP2 ( -- x addr ) 9 bit PWR_CSR2 ; \ PWR_CSR2_EWUP2, Enable Wakeup pin for PA2
: PWR_CSR2_EWUP3 ( -- x addr ) 10 bit PWR_CSR2 ; \ PWR_CSR2_EWUP3, Enable Wakeup pin for PC1
: PWR_CSR2_EWUP4 ( -- x addr ) 11 bit PWR_CSR2 ; \ PWR_CSR2_EWUP4, Enable Wakeup pin for PC13
: PWR_CSR2_EWUP5 ( -- x addr ) 12 bit PWR_CSR2 ; \ PWR_CSR2_EWUP5, Enable Wakeup pin for PI8
: PWR_CSR2_EWUP6 ( -- x addr ) 13 bit PWR_CSR2 ; \ PWR_CSR2_EWUP6, Enable Wakeup pin for PI11

\ IWDG_KR (write-only) Reset:0x00000000
: IWDG_KR_KEY ( %bbbbbbbbbbbbbbbb -- x addr ) IWDG_KR ; \ IWDG_KR_KEY, Key value write only, read 0000h

\ IWDG_PR (read-write) Reset:0x00000000
: IWDG_PR_PR ( %bbb -- x addr ) IWDG_PR ; \ IWDG_PR_PR, Prescaler divider

\ IWDG_RLR (read-write) Reset:0x00000FFF
: IWDG_RLR_RL ( %bbbbbbbbbbb -- x addr ) IWDG_RLR ; \ IWDG_RLR_RL, Watchdog counter reload value

\ IWDG_SR (read-only) Reset:0x00000000
: IWDG_SR_RVU? ( --  1|0 ) 1 bit IWDG_SR bit@ ; \ IWDG_SR_RVU, Watchdog counter reload value update
: IWDG_SR_PVU? ( --  1|0 ) 0 bit IWDG_SR bit@ ; \ IWDG_SR_PVU, Watchdog prescaler value update

\ IWDG_WINR (read-write) Reset:0x00000000
: IWDG_WINR_WIN ( %bbbbbbbbbbb -- x addr ) IWDG_WINR ; \ IWDG_WINR_WIN, Watchdog counter window value

\ WWDG_CR (read-write) Reset:0x7F
: WWDG_CR_WDGA ( -- x addr ) 7 bit WWDG_CR ; \ WWDG_CR_WDGA, Activation bit
: WWDG_CR_T ( %bbbbbbb -- x addr ) WWDG_CR ; \ WWDG_CR_T, 7-bit counter MSB to LSB

\ WWDG_CFR (read-write) Reset:0x7F
: WWDG_CFR_EWI ( -- x addr ) 9 bit WWDG_CFR ; \ WWDG_CFR_EWI, Early wakeup interrupt
: WWDG_CFR_WDGTB1 ( -- x addr ) 8 bit WWDG_CFR ; \ WWDG_CFR_WDGTB1, Timer base
: WWDG_CFR_WDGTB0 ( -- x addr ) 7 bit WWDG_CFR ; \ WWDG_CFR_WDGTB0, Timer base
: WWDG_CFR_W ( %bbbbbbb -- x addr ) WWDG_CFR ; \ WWDG_CFR_W, 7-bit window value

\ WWDG_SR (read-write) Reset:0x00
: WWDG_SR_EWIF ( -- x addr ) 0 bit WWDG_SR ; \ WWDG_SR_EWIF, Early wakeup interrupt flag

\ C_ADC_CSR (read-only) Reset:0x00000000
: C_ADC_CSR_OVR3? ( --  1|0 ) 21 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_OVR3, Overrun flag of ADC3
: C_ADC_CSR_STRT3? ( --  1|0 ) 20 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_STRT3, Regular channel Start flag of ADC 3
: C_ADC_CSR_JSTRT3? ( --  1|0 ) 19 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JSTRT3, Injected channel Start flag of ADC 3
: C_ADC_CSR_JEOC3? ( --  1|0 ) 18 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JEOC3, Injected channel end of conversion of ADC 3
: C_ADC_CSR_EOC3? ( --  1|0 ) 17 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_EOC3, End of conversion of ADC 3
: C_ADC_CSR_AWD3? ( --  1|0 ) 16 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_AWD3, Analog watchdog flag of ADC 3
: C_ADC_CSR_OVR2? ( --  1|0 ) 13 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_OVR2, Overrun flag of ADC 2
: C_ADC_CSR_STRT2? ( --  1|0 ) 12 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_STRT2, Regular channel Start flag of ADC 2
: C_ADC_CSR_JSTRT2? ( --  1|0 ) 11 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JSTRT2, Injected channel Start flag of ADC 2
: C_ADC_CSR_JEOC2? ( --  1|0 ) 10 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JEOC2, Injected channel end of conversion of ADC 2
: C_ADC_CSR_EOC2? ( --  1|0 ) 9 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_EOC2, End of conversion of ADC 2
: C_ADC_CSR_AWD2? ( --  1|0 ) 8 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_AWD2, Analog watchdog flag of ADC 2
: C_ADC_CSR_OVR1? ( --  1|0 ) 5 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_OVR1, Overrun flag of ADC 1
: C_ADC_CSR_STRT1? ( --  1|0 ) 4 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_STRT1, Regular channel Start flag of ADC 1
: C_ADC_CSR_JSTRT1? ( --  1|0 ) 3 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JSTRT1, Injected channel Start flag of ADC 1
: C_ADC_CSR_JEOC1? ( --  1|0 ) 2 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JEOC1, Injected channel end of conversion of ADC 1
: C_ADC_CSR_EOC1? ( --  1|0 ) 1 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_EOC1, End of conversion of ADC 1
: C_ADC_CSR_AWD1? ( --  1|0 ) 0 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_AWD1, Analog watchdog flag of ADC 1

\ C_ADC_CCR (read-write) Reset:0x00000000
: C_ADC_CCR_TSVREFE ( -- x addr ) 23 bit C_ADC_CCR ; \ C_ADC_CCR_TSVREFE, Temperature sensor and VREFINT enable
: C_ADC_CCR_VBATE ( -- x addr ) 22 bit C_ADC_CCR ; \ C_ADC_CCR_VBATE, VBAT enable
: C_ADC_CCR_ADCPRE ( %bb -- x addr ) 16 lshift C_ADC_CCR ; \ C_ADC_CCR_ADCPRE, ADC prescaler
: C_ADC_CCR_DMA ( %bb -- x addr ) 14 lshift C_ADC_CCR ; \ C_ADC_CCR_DMA, Direct memory access mode for multi ADC mode
: C_ADC_CCR_DDS ( -- x addr ) 13 bit C_ADC_CCR ; \ C_ADC_CCR_DDS, DMA disable selection for multi-ADC mode
: C_ADC_CCR_DELAY ( %bbbb -- x addr ) 8 lshift C_ADC_CCR ; \ C_ADC_CCR_DELAY, Delay between 2 sampling phases
: C_ADC_CCR_MULT ( %bbbbb -- x addr ) C_ADC_CCR ; \ C_ADC_CCR_MULT, Multi ADC mode selection

\ C_ADC_CDR (read-only) Reset:0x00000000
: C_ADC_CDR_DATA2? ( --  x ) 16 lshift C_ADC_CDR @ ; \ C_ADC_CDR_DATA2, 2nd data item of a pair of regular conversions
: C_ADC_CDR_DATA1? ( --  x ) C_ADC_CDR @ ; \ C_ADC_CDR_DATA1, 1st data item of a pair of regular conversions

\ TIM1_CR1 (read-write) Reset:0x0000
: TIM1_CR1_CKD ( %bb -- x addr ) 8 lshift TIM1_CR1 ; \ TIM1_CR1_CKD, Clock division
: TIM1_CR1_ARPE ( -- x addr ) 7 bit TIM1_CR1 ; \ TIM1_CR1_ARPE, Auto-reload preload enable
: TIM1_CR1_CMS ( %bb -- x addr ) 5 lshift TIM1_CR1 ; \ TIM1_CR1_CMS, Center-aligned mode selection
: TIM1_CR1_DIR ( -- x addr ) 4 bit TIM1_CR1 ; \ TIM1_CR1_DIR, Direction
: TIM1_CR1_OPM ( -- x addr ) 3 bit TIM1_CR1 ; \ TIM1_CR1_OPM, One-pulse mode
: TIM1_CR1_URS ( -- x addr ) 2 bit TIM1_CR1 ; \ TIM1_CR1_URS, Update request source
: TIM1_CR1_UDIS ( -- x addr ) 1 bit TIM1_CR1 ; \ TIM1_CR1_UDIS, Update disable
: TIM1_CR1_CEN ( -- x addr ) 0 bit TIM1_CR1 ; \ TIM1_CR1_CEN, Counter enable

\ TIM1_CR2 (read-write) Reset:0x0000
: TIM1_CR2_OIS4 ( -- x addr ) 14 bit TIM1_CR2 ; \ TIM1_CR2_OIS4, Output Idle state 4
: TIM1_CR2_OIS3N ( -- x addr ) 13 bit TIM1_CR2 ; \ TIM1_CR2_OIS3N, Output Idle state 3
: TIM1_CR2_OIS3 ( -- x addr ) 12 bit TIM1_CR2 ; \ TIM1_CR2_OIS3, Output Idle state 3
: TIM1_CR2_OIS2N ( -- x addr ) 11 bit TIM1_CR2 ; \ TIM1_CR2_OIS2N, Output Idle state 2
: TIM1_CR2_OIS2 ( -- x addr ) 10 bit TIM1_CR2 ; \ TIM1_CR2_OIS2, Output Idle state 2
: TIM1_CR2_OIS1N ( -- x addr ) 9 bit TIM1_CR2 ; \ TIM1_CR2_OIS1N, Output Idle state 1
: TIM1_CR2_OIS1 ( -- x addr ) 8 bit TIM1_CR2 ; \ TIM1_CR2_OIS1, Output Idle state 1
: TIM1_CR2_TI1S ( -- x addr ) 7 bit TIM1_CR2 ; \ TIM1_CR2_TI1S, TI1 selection
: TIM1_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM1_CR2 ; \ TIM1_CR2_MMS, Master mode selection
: TIM1_CR2_CCDS ( -- x addr ) 3 bit TIM1_CR2 ; \ TIM1_CR2_CCDS, Capture/compare DMA selection
: TIM1_CR2_CCUS ( -- x addr ) 2 bit TIM1_CR2 ; \ TIM1_CR2_CCUS, Capture/compare control update selection
: TIM1_CR2_CCPC ( -- x addr ) 0 bit TIM1_CR2 ; \ TIM1_CR2_CCPC, Capture/compare preloaded control

\ TIM1_SMCR (read-write) Reset:0x0000
: TIM1_SMCR_SMS_3 ( -- x addr ) 16 bit TIM1_SMCR ; \ TIM1_SMCR_SMS_3, Slave model selection - bit[3]
: TIM1_SMCR_ETP ( -- x addr ) 15 bit TIM1_SMCR ; \ TIM1_SMCR_ETP, External trigger polarity
: TIM1_SMCR_ECE ( -- x addr ) 14 bit TIM1_SMCR ; \ TIM1_SMCR_ECE, External clock enable
: TIM1_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM1_SMCR ; \ TIM1_SMCR_ETPS, External trigger prescaler
: TIM1_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM1_SMCR ; \ TIM1_SMCR_ETF, External trigger filter
: TIM1_SMCR_MSM ( -- x addr ) 7 bit TIM1_SMCR ; \ TIM1_SMCR_MSM, Master/Slave mode
: TIM1_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM1_SMCR ; \ TIM1_SMCR_TS, Trigger selection
: TIM1_SMCR_SMS ( %bbb -- x addr ) TIM1_SMCR ; \ TIM1_SMCR_SMS, Slave mode selection - bit[2:0]

\ TIM1_DIER (read-write) Reset:0x0000
: TIM1_DIER_TDE ( -- x addr ) 14 bit TIM1_DIER ; \ TIM1_DIER_TDE, Trigger DMA request enable
: TIM1_DIER_COMDE ( -- x addr ) 13 bit TIM1_DIER ; \ TIM1_DIER_COMDE, COM DMA request enable
: TIM1_DIER_CC4DE ( -- x addr ) 12 bit TIM1_DIER ; \ TIM1_DIER_CC4DE, Capture/Compare 4 DMA request enable
: TIM1_DIER_CC3DE ( -- x addr ) 11 bit TIM1_DIER ; \ TIM1_DIER_CC3DE, Capture/Compare 3 DMA request enable
: TIM1_DIER_CC2DE ( -- x addr ) 10 bit TIM1_DIER ; \ TIM1_DIER_CC2DE, Capture/Compare 2 DMA request enable
: TIM1_DIER_CC1DE ( -- x addr ) 9 bit TIM1_DIER ; \ TIM1_DIER_CC1DE, Capture/Compare 1 DMA request enable
: TIM1_DIER_UDE ( -- x addr ) 8 bit TIM1_DIER ; \ TIM1_DIER_UDE, Update DMA request enable
: TIM1_DIER_TIE ( -- x addr ) 6 bit TIM1_DIER ; \ TIM1_DIER_TIE, Trigger interrupt enable
: TIM1_DIER_CC4IE ( -- x addr ) 4 bit TIM1_DIER ; \ TIM1_DIER_CC4IE, Capture/Compare 4 interrupt enable
: TIM1_DIER_CC3IE ( -- x addr ) 3 bit TIM1_DIER ; \ TIM1_DIER_CC3IE, Capture/Compare 3 interrupt enable
: TIM1_DIER_CC2IE ( -- x addr ) 2 bit TIM1_DIER ; \ TIM1_DIER_CC2IE, Capture/Compare 2 interrupt enable
: TIM1_DIER_CC1IE ( -- x addr ) 1 bit TIM1_DIER ; \ TIM1_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM1_DIER_UIE ( -- x addr ) 0 bit TIM1_DIER ; \ TIM1_DIER_UIE, Update interrupt enable
: TIM1_DIER_BIE ( -- x addr ) 7 bit TIM1_DIER ; \ TIM1_DIER_BIE, Break interrupt enable
: TIM1_DIER_COMIE ( -- x addr ) 5 bit TIM1_DIER ; \ TIM1_DIER_COMIE, COM interrupt enable

\ TIM1_SR (read-write) Reset:0x0000
: TIM1_SR_CC4OF ( -- x addr ) 12 bit TIM1_SR ; \ TIM1_SR_CC4OF, Capture/Compare 4 overcapture flag
: TIM1_SR_CC3OF ( -- x addr ) 11 bit TIM1_SR ; \ TIM1_SR_CC3OF, Capture/Compare 3 overcapture flag
: TIM1_SR_CC2OF ( -- x addr ) 10 bit TIM1_SR ; \ TIM1_SR_CC2OF, Capture/compare 2 overcapture flag
: TIM1_SR_CC1OF ( -- x addr ) 9 bit TIM1_SR ; \ TIM1_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM1_SR_BIF ( -- x addr ) 7 bit TIM1_SR ; \ TIM1_SR_BIF, Break interrupt flag
: TIM1_SR_TIF ( -- x addr ) 6 bit TIM1_SR ; \ TIM1_SR_TIF, Trigger interrupt flag
: TIM1_SR_COMIF ( -- x addr ) 5 bit TIM1_SR ; \ TIM1_SR_COMIF, COM interrupt flag
: TIM1_SR_CC4IF ( -- x addr ) 4 bit TIM1_SR ; \ TIM1_SR_CC4IF, Capture/Compare 4 interrupt flag
: TIM1_SR_CC3IF ( -- x addr ) 3 bit TIM1_SR ; \ TIM1_SR_CC3IF, Capture/Compare 3 interrupt flag
: TIM1_SR_CC2IF ( -- x addr ) 2 bit TIM1_SR ; \ TIM1_SR_CC2IF, Capture/Compare 2 interrupt flag
: TIM1_SR_CC1IF ( -- x addr ) 1 bit TIM1_SR ; \ TIM1_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM1_SR_UIF ( -- x addr ) 0 bit TIM1_SR ; \ TIM1_SR_UIF, Update interrupt flag

\ TIM1_EGR (write-only) Reset:0x0000
: TIM1_EGR_BG ( -- x addr ) 7 bit TIM1_EGR ; \ TIM1_EGR_BG, Break generation
: TIM1_EGR_TG ( -- x addr ) 6 bit TIM1_EGR ; \ TIM1_EGR_TG, Trigger generation
: TIM1_EGR_COMG ( -- x addr ) 5 bit TIM1_EGR ; \ TIM1_EGR_COMG, Capture/Compare control update generation
: TIM1_EGR_CC4G ( -- x addr ) 4 bit TIM1_EGR ; \ TIM1_EGR_CC4G, Capture/compare 4 generation
: TIM1_EGR_CC3G ( -- x addr ) 3 bit TIM1_EGR ; \ TIM1_EGR_CC3G, Capture/compare 3 generation
: TIM1_EGR_CC2G ( -- x addr ) 2 bit TIM1_EGR ; \ TIM1_EGR_CC2G, Capture/compare 2 generation
: TIM1_EGR_CC1G ( -- x addr ) 1 bit TIM1_EGR ; \ TIM1_EGR_CC1G, Capture/compare 1 generation
: TIM1_EGR_UG ( -- x addr ) 0 bit TIM1_EGR ; \ TIM1_EGR_UG, Update generation

\ TIM1_CCMR1_Output (read-write) Reset:0x00000000
: TIM1_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC2CE, Output Compare 2 clear enable
: TIM1_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC2M, Output Compare 2 mode
: TIM1_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC2PE, Output Compare 2 preload enable
: TIM1_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC2FE, Output Compare 2 fast enable
: TIM1_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_CC2S, Capture/Compare 2 selection
: TIM1_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC1CE, Output Compare 1 clear enable
: TIM1_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC1M, Output Compare 1 mode
: TIM1_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC1PE, Output Compare 1 preload enable
: TIM1_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC1FE, Output Compare 1 fast enable
: TIM1_CCMR1_Output_CC1S ( %bb -- x addr ) TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_CC1S, Capture/Compare 1 selection

\ TIM1_CCMR1_Input (read-write) Reset:0x00000000
: TIM1_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_IC2F, Input capture 2 filter
: TIM1_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_IC2PCS, Input capture 2 prescaler
: TIM1_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_CC2S, Capture/Compare 2 selection
: TIM1_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_IC1F, Input capture 1 filter
: TIM1_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM1_CCMR1_Input_CC1S ( %bb -- x addr ) TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM1_CCMR2_Output (read-write) Reset:0x00000000
: TIM1_CCMR2_Output_OC4CE ( -- x addr ) 15 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC4CE, Output compare 4 clear enable
: TIM1_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC4M, Output compare 4 mode
: TIM1_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC4PE, Output compare 4 preload enable
: TIM1_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC4FE, Output compare 4 fast enable
: TIM1_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_CC4S, Capture/Compare 4 selection
: TIM1_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC3CE, Output compare 3 clear enable
: TIM1_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC3M, Output compare 3 mode
: TIM1_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC3PE, Output compare 3 preload enable
: TIM1_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC3FE, Output compare 3 fast enable
: TIM1_CCMR2_Output_CC3S ( %bb -- x addr ) TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_CC3S, Capture/Compare 3 selection

\ TIM1_CCMR2_Input (read-write) Reset:0x00000000
: TIM1_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_IC4F, Input capture 4 filter
: TIM1_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_IC4PSC, Input capture 4 prescaler
: TIM1_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_CC4S, Capture/Compare 4 selection
: TIM1_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_IC3F, Input capture 3 filter
: TIM1_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_IC3PSC, Input capture 3 prescaler
: TIM1_CCMR2_Input_CC3S ( %bb -- x addr ) TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_CC3S, Capture/compare 3 selection

\ TIM1_CCER (read-write) Reset:0x0000
: TIM1_CCER_CC4P ( -- x addr ) 13 bit TIM1_CCER ; \ TIM1_CCER_CC4P, Capture/Compare 3 output Polarity
: TIM1_CCER_CC4E ( -- x addr ) 12 bit TIM1_CCER ; \ TIM1_CCER_CC4E, Capture/Compare 4 output enable
: TIM1_CCER_CC3NP ( -- x addr ) 11 bit TIM1_CCER ; \ TIM1_CCER_CC3NP, Capture/Compare 3 output Polarity
: TIM1_CCER_CC3NE ( -- x addr ) 10 bit TIM1_CCER ; \ TIM1_CCER_CC3NE, Capture/Compare 3 complementary output enable
: TIM1_CCER_CC3P ( -- x addr ) 9 bit TIM1_CCER ; \ TIM1_CCER_CC3P, Capture/Compare 3 output Polarity
: TIM1_CCER_CC3E ( -- x addr ) 8 bit TIM1_CCER ; \ TIM1_CCER_CC3E, Capture/Compare 3 output enable
: TIM1_CCER_CC2NP ( -- x addr ) 7 bit TIM1_CCER ; \ TIM1_CCER_CC2NP, Capture/Compare 2 output Polarity
: TIM1_CCER_CC2NE ( -- x addr ) 6 bit TIM1_CCER ; \ TIM1_CCER_CC2NE, Capture/Compare 2 complementary output enable
: TIM1_CCER_CC2P ( -- x addr ) 5 bit TIM1_CCER ; \ TIM1_CCER_CC2P, Capture/Compare 2 output Polarity
: TIM1_CCER_CC2E ( -- x addr ) 4 bit TIM1_CCER ; \ TIM1_CCER_CC2E, Capture/Compare 2 output enable
: TIM1_CCER_CC1NP ( -- x addr ) 3 bit TIM1_CCER ; \ TIM1_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM1_CCER_CC1NE ( -- x addr ) 2 bit TIM1_CCER ; \ TIM1_CCER_CC1NE, Capture/Compare 1 complementary output enable
: TIM1_CCER_CC1P ( -- x addr ) 1 bit TIM1_CCER ; \ TIM1_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM1_CCER_CC1E ( -- x addr ) 0 bit TIM1_CCER ; \ TIM1_CCER_CC1E, Capture/Compare 1 output enable

\ TIM1_CNT (read-write) Reset:0x00000000
: TIM1_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CNT ; \ TIM1_CNT_CNT, counter value

\ TIM1_PSC (read-write) Reset:0x0000
: TIM1_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_PSC ; \ TIM1_PSC_PSC, Prescaler value

\ TIM1_ARR (read-write) Reset:0x00000000
: TIM1_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_ARR ; \ TIM1_ARR_ARR, Auto-reload value

\ TIM1_CCR1 (read-write) Reset:0x00000000
: TIM1_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CCR1 ; \ TIM1_CCR1_CCR1, Capture/Compare 1 value

\ TIM1_CCR2 (read-write) Reset:0x00000000
: TIM1_CCR2_CCR2 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CCR2 ; \ TIM1_CCR2_CCR2, Capture/Compare 2 value

\ TIM1_CCR3 (read-write) Reset:0x00000000
: TIM1_CCR3_CCR3 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CCR3 ; \ TIM1_CCR3_CCR3, Capture/Compare value

\ TIM1_CCR4 (read-write) Reset:0x00000000
: TIM1_CCR4_CCR4 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CCR4 ; \ TIM1_CCR4_CCR4, Capture/Compare value

\ TIM1_DCR (read-write) Reset:0x0000
: TIM1_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM1_DCR ; \ TIM1_DCR_DBL, DMA burst length
: TIM1_DCR_DBA ( %bbbbb -- x addr ) TIM1_DCR ; \ TIM1_DCR_DBA, DMA base address

\ TIM1_DMAR (read-write) Reset:0x0000
: TIM1_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_DMAR ; \ TIM1_DMAR_DMAB, DMA register for burst accesses

\ TIM1_RCR (read-write) Reset:0x0000
: TIM1_RCR_REP ( %bbbbbbbb -- x addr ) TIM1_RCR ; \ TIM1_RCR_REP, Repetition counter value

\ TIM1_BDTR (read-write) Reset:0x0000
: TIM1_BDTR_MOE ( -- x addr ) 15 bit TIM1_BDTR ; \ TIM1_BDTR_MOE, Main output enable
: TIM1_BDTR_AOE ( -- x addr ) 14 bit TIM1_BDTR ; \ TIM1_BDTR_AOE, Automatic output enable
: TIM1_BDTR_BKP ( -- x addr ) 13 bit TIM1_BDTR ; \ TIM1_BDTR_BKP, Break polarity
: TIM1_BDTR_BKE ( -- x addr ) 12 bit TIM1_BDTR ; \ TIM1_BDTR_BKE, Break enable
: TIM1_BDTR_OSSR ( -- x addr ) 11 bit TIM1_BDTR ; \ TIM1_BDTR_OSSR, Off-state selection for Run mode
: TIM1_BDTR_OSSI ( -- x addr ) 10 bit TIM1_BDTR ; \ TIM1_BDTR_OSSI, Off-state selection for Idle mode
: TIM1_BDTR_LOCK ( %bb -- x addr ) 8 lshift TIM1_BDTR ; \ TIM1_BDTR_LOCK, Lock configuration
: TIM1_BDTR_DTG ( %bbbbbbbb -- x addr ) TIM1_BDTR ; \ TIM1_BDTR_DTG, Dead-time generator setup

\ TIM1_CCMR3_Output (read-write) Reset:0x0000
: TIM1_CCMR3_Output_OC5FE ( -- x addr ) 2 bit TIM1_CCMR3_Output ; \ TIM1_CCMR3_Output_OC5FE, Output compare 5 fast enable
: TIM1_CCMR3_Output_OC5PE ( -- x addr ) 3 bit TIM1_CCMR3_Output ; \ TIM1_CCMR3_Output_OC5PE, Output compare 5 preload enable
: TIM1_CCMR3_Output_OC5M ( %bbb -- x addr ) 4 lshift TIM1_CCMR3_Output ; \ TIM1_CCMR3_Output_OC5M, Output compare 5 mode
: TIM1_CCMR3_Output_OC5CE ( -- x addr ) 7 bit TIM1_CCMR3_Output ; \ TIM1_CCMR3_Output_OC5CE, Output compare 5 clear enable
: TIM1_CCMR3_Output_OC6FE ( -- x addr ) 10 bit TIM1_CCMR3_Output ; \ TIM1_CCMR3_Output_OC6FE, Output compare 6 fast enable
: TIM1_CCMR3_Output_OC6PE ( -- x addr ) 11 bit TIM1_CCMR3_Output ; \ TIM1_CCMR3_Output_OC6PE, Output compare 6 preload enable
: TIM1_CCMR3_Output_OC6M ( %bbb -- x addr ) 12 lshift TIM1_CCMR3_Output ; \ TIM1_CCMR3_Output_OC6M, Output compare 6 mode
: TIM1_CCMR3_Output_OC6CE ( -- x addr ) 15 bit TIM1_CCMR3_Output ; \ TIM1_CCMR3_Output_OC6CE, Output compare 6 clear enable
: TIM1_CCMR3_Output_OC5M3 ( -- x addr ) 16 bit TIM1_CCMR3_Output ; \ TIM1_CCMR3_Output_OC5M3, Output Compare 5 mode
: TIM1_CCMR3_Output_OC6M3 ( -- x addr ) 24 bit TIM1_CCMR3_Output ; \ TIM1_CCMR3_Output_OC6M3, Output Compare 6 mode

\ TIM1_CCR5 (read-write) Reset:0x0000
: TIM1_CCR5_CCR5 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CCR5 ; \ TIM1_CCR5_CCR5, Capture/Compare 5 value
: TIM1_CCR5_GC5C1 ( -- x addr ) 29 bit TIM1_CCR5 ; \ TIM1_CCR5_GC5C1, Group Channel 5 and Channel 1
: TIM1_CCR5_GC5C2 ( -- x addr ) 30 bit TIM1_CCR5 ; \ TIM1_CCR5_GC5C2, Group Channel 5 and Channel 2
: TIM1_CCR5_GC5C3 ( -- x addr ) 31 bit TIM1_CCR5 ; \ TIM1_CCR5_GC5C3, Group Channel 5 and Channel 3

\ TIM1_CRR6 (read-write) Reset:0x0000
: TIM1_CRR6_CCR6 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CRR6 ; \ TIM1_CRR6_CCR6, Capture/Compare 6 value

\ TIM8_CR1 (read-write) Reset:0x0000
: TIM8_CR1_CKD ( %bb -- x addr ) 8 lshift TIM8_CR1 ; \ TIM8_CR1_CKD, Clock division
: TIM8_CR1_ARPE ( -- x addr ) 7 bit TIM8_CR1 ; \ TIM8_CR1_ARPE, Auto-reload preload enable
: TIM8_CR1_CMS ( %bb -- x addr ) 5 lshift TIM8_CR1 ; \ TIM8_CR1_CMS, Center-aligned mode selection
: TIM8_CR1_DIR ( -- x addr ) 4 bit TIM8_CR1 ; \ TIM8_CR1_DIR, Direction
: TIM8_CR1_OPM ( -- x addr ) 3 bit TIM8_CR1 ; \ TIM8_CR1_OPM, One-pulse mode
: TIM8_CR1_URS ( -- x addr ) 2 bit TIM8_CR1 ; \ TIM8_CR1_URS, Update request source
: TIM8_CR1_UDIS ( -- x addr ) 1 bit TIM8_CR1 ; \ TIM8_CR1_UDIS, Update disable
: TIM8_CR1_CEN ( -- x addr ) 0 bit TIM8_CR1 ; \ TIM8_CR1_CEN, Counter enable

\ TIM8_CR2 (read-write) Reset:0x0000
: TIM8_CR2_OIS4 ( -- x addr ) 14 bit TIM8_CR2 ; \ TIM8_CR2_OIS4, Output Idle state 4
: TIM8_CR2_OIS3N ( -- x addr ) 13 bit TIM8_CR2 ; \ TIM8_CR2_OIS3N, Output Idle state 3
: TIM8_CR2_OIS3 ( -- x addr ) 12 bit TIM8_CR2 ; \ TIM8_CR2_OIS3, Output Idle state 3
: TIM8_CR2_OIS2N ( -- x addr ) 11 bit TIM8_CR2 ; \ TIM8_CR2_OIS2N, Output Idle state 2
: TIM8_CR2_OIS2 ( -- x addr ) 10 bit TIM8_CR2 ; \ TIM8_CR2_OIS2, Output Idle state 2
: TIM8_CR2_OIS1N ( -- x addr ) 9 bit TIM8_CR2 ; \ TIM8_CR2_OIS1N, Output Idle state 1
: TIM8_CR2_OIS1 ( -- x addr ) 8 bit TIM8_CR2 ; \ TIM8_CR2_OIS1, Output Idle state 1
: TIM8_CR2_TI1S ( -- x addr ) 7 bit TIM8_CR2 ; \ TIM8_CR2_TI1S, TI1 selection
: TIM8_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM8_CR2 ; \ TIM8_CR2_MMS, Master mode selection
: TIM8_CR2_CCDS ( -- x addr ) 3 bit TIM8_CR2 ; \ TIM8_CR2_CCDS, Capture/compare DMA selection
: TIM8_CR2_CCUS ( -- x addr ) 2 bit TIM8_CR2 ; \ TIM8_CR2_CCUS, Capture/compare control update selection
: TIM8_CR2_CCPC ( -- x addr ) 0 bit TIM8_CR2 ; \ TIM8_CR2_CCPC, Capture/compare preloaded control

\ TIM8_SMCR (read-write) Reset:0x0000
: TIM8_SMCR_SMS_3 ( -- x addr ) 16 bit TIM8_SMCR ; \ TIM8_SMCR_SMS_3, Slave model selection - bit[3]
: TIM8_SMCR_ETP ( -- x addr ) 15 bit TIM8_SMCR ; \ TIM8_SMCR_ETP, External trigger polarity
: TIM8_SMCR_ECE ( -- x addr ) 14 bit TIM8_SMCR ; \ TIM8_SMCR_ECE, External clock enable
: TIM8_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM8_SMCR ; \ TIM8_SMCR_ETPS, External trigger prescaler
: TIM8_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM8_SMCR ; \ TIM8_SMCR_ETF, External trigger filter
: TIM8_SMCR_MSM ( -- x addr ) 7 bit TIM8_SMCR ; \ TIM8_SMCR_MSM, Master/Slave mode
: TIM8_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM8_SMCR ; \ TIM8_SMCR_TS, Trigger selection
: TIM8_SMCR_SMS ( %bbb -- x addr ) TIM8_SMCR ; \ TIM8_SMCR_SMS, Slave mode selection - bit[2:0]

\ TIM8_DIER (read-write) Reset:0x0000
: TIM8_DIER_TDE ( -- x addr ) 14 bit TIM8_DIER ; \ TIM8_DIER_TDE, Trigger DMA request enable
: TIM8_DIER_COMDE ( -- x addr ) 13 bit TIM8_DIER ; \ TIM8_DIER_COMDE, COM DMA request enable
: TIM8_DIER_CC4DE ( -- x addr ) 12 bit TIM8_DIER ; \ TIM8_DIER_CC4DE, Capture/Compare 4 DMA request enable
: TIM8_DIER_CC3DE ( -- x addr ) 11 bit TIM8_DIER ; \ TIM8_DIER_CC3DE, Capture/Compare 3 DMA request enable
: TIM8_DIER_CC2DE ( -- x addr ) 10 bit TIM8_DIER ; \ TIM8_DIER_CC2DE, Capture/Compare 2 DMA request enable
: TIM8_DIER_CC1DE ( -- x addr ) 9 bit TIM8_DIER ; \ TIM8_DIER_CC1DE, Capture/Compare 1 DMA request enable
: TIM8_DIER_UDE ( -- x addr ) 8 bit TIM8_DIER ; \ TIM8_DIER_UDE, Update DMA request enable
: TIM8_DIER_TIE ( -- x addr ) 6 bit TIM8_DIER ; \ TIM8_DIER_TIE, Trigger interrupt enable
: TIM8_DIER_CC4IE ( -- x addr ) 4 bit TIM8_DIER ; \ TIM8_DIER_CC4IE, Capture/Compare 4 interrupt enable
: TIM8_DIER_CC3IE ( -- x addr ) 3 bit TIM8_DIER ; \ TIM8_DIER_CC3IE, Capture/Compare 3 interrupt enable
: TIM8_DIER_CC2IE ( -- x addr ) 2 bit TIM8_DIER ; \ TIM8_DIER_CC2IE, Capture/Compare 2 interrupt enable
: TIM8_DIER_CC1IE ( -- x addr ) 1 bit TIM8_DIER ; \ TIM8_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM8_DIER_UIE ( -- x addr ) 0 bit TIM8_DIER ; \ TIM8_DIER_UIE, Update interrupt enable
: TIM8_DIER_BIE ( -- x addr ) 7 bit TIM8_DIER ; \ TIM8_DIER_BIE, Break interrupt enable
: TIM8_DIER_COMIE ( -- x addr ) 5 bit TIM8_DIER ; \ TIM8_DIER_COMIE, COM interrupt enable

\ TIM8_SR (read-write) Reset:0x0000
: TIM8_SR_CC4OF ( -- x addr ) 12 bit TIM8_SR ; \ TIM8_SR_CC4OF, Capture/Compare 4 overcapture flag
: TIM8_SR_CC3OF ( -- x addr ) 11 bit TIM8_SR ; \ TIM8_SR_CC3OF, Capture/Compare 3 overcapture flag
: TIM8_SR_CC2OF ( -- x addr ) 10 bit TIM8_SR ; \ TIM8_SR_CC2OF, Capture/compare 2 overcapture flag
: TIM8_SR_CC1OF ( -- x addr ) 9 bit TIM8_SR ; \ TIM8_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM8_SR_BIF ( -- x addr ) 7 bit TIM8_SR ; \ TIM8_SR_BIF, Break interrupt flag
: TIM8_SR_TIF ( -- x addr ) 6 bit TIM8_SR ; \ TIM8_SR_TIF, Trigger interrupt flag
: TIM8_SR_COMIF ( -- x addr ) 5 bit TIM8_SR ; \ TIM8_SR_COMIF, COM interrupt flag
: TIM8_SR_CC4IF ( -- x addr ) 4 bit TIM8_SR ; \ TIM8_SR_CC4IF, Capture/Compare 4 interrupt flag
: TIM8_SR_CC3IF ( -- x addr ) 3 bit TIM8_SR ; \ TIM8_SR_CC3IF, Capture/Compare 3 interrupt flag
: TIM8_SR_CC2IF ( -- x addr ) 2 bit TIM8_SR ; \ TIM8_SR_CC2IF, Capture/Compare 2 interrupt flag
: TIM8_SR_CC1IF ( -- x addr ) 1 bit TIM8_SR ; \ TIM8_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM8_SR_UIF ( -- x addr ) 0 bit TIM8_SR ; \ TIM8_SR_UIF, Update interrupt flag

\ TIM8_EGR (write-only) Reset:0x0000
: TIM8_EGR_BG ( -- x addr ) 7 bit TIM8_EGR ; \ TIM8_EGR_BG, Break generation
: TIM8_EGR_TG ( -- x addr ) 6 bit TIM8_EGR ; \ TIM8_EGR_TG, Trigger generation
: TIM8_EGR_COMG ( -- x addr ) 5 bit TIM8_EGR ; \ TIM8_EGR_COMG, Capture/Compare control update generation
: TIM8_EGR_CC4G ( -- x addr ) 4 bit TIM8_EGR ; \ TIM8_EGR_CC4G, Capture/compare 4 generation
: TIM8_EGR_CC3G ( -- x addr ) 3 bit TIM8_EGR ; \ TIM8_EGR_CC3G, Capture/compare 3 generation
: TIM8_EGR_CC2G ( -- x addr ) 2 bit TIM8_EGR ; \ TIM8_EGR_CC2G, Capture/compare 2 generation
: TIM8_EGR_CC1G ( -- x addr ) 1 bit TIM8_EGR ; \ TIM8_EGR_CC1G, Capture/compare 1 generation
: TIM8_EGR_UG ( -- x addr ) 0 bit TIM8_EGR ; \ TIM8_EGR_UG, Update generation

\ TIM8_CCMR1_Output (read-write) Reset:0x00000000
: TIM8_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC2CE, Output Compare 2 clear enable
: TIM8_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC2M, Output Compare 2 mode
: TIM8_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC2PE, Output Compare 2 preload enable
: TIM8_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC2FE, Output Compare 2 fast enable
: TIM8_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_CC2S, Capture/Compare 2 selection
: TIM8_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC1CE, Output Compare 1 clear enable
: TIM8_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC1M, Output Compare 1 mode
: TIM8_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC1PE, Output Compare 1 preload enable
: TIM8_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC1FE, Output Compare 1 fast enable
: TIM8_CCMR1_Output_CC1S ( %bb -- x addr ) TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_CC1S, Capture/Compare 1 selection

\ TIM8_CCMR1_Input (read-write) Reset:0x00000000
: TIM8_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_IC2F, Input capture 2 filter
: TIM8_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_IC2PCS, Input capture 2 prescaler
: TIM8_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_CC2S, Capture/Compare 2 selection
: TIM8_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_IC1F, Input capture 1 filter
: TIM8_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM8_CCMR1_Input_CC1S ( %bb -- x addr ) TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM8_CCMR2_Output (read-write) Reset:0x00000000
: TIM8_CCMR2_Output_OC4CE ( -- x addr ) 15 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC4CE, Output compare 4 clear enable
: TIM8_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC4M, Output compare 4 mode
: TIM8_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC4PE, Output compare 4 preload enable
: TIM8_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC4FE, Output compare 4 fast enable
: TIM8_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_CC4S, Capture/Compare 4 selection
: TIM8_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC3CE, Output compare 3 clear enable
: TIM8_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC3M, Output compare 3 mode
: TIM8_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC3PE, Output compare 3 preload enable
: TIM8_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC3FE, Output compare 3 fast enable
: TIM8_CCMR2_Output_CC3S ( %bb -- x addr ) TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_CC3S, Capture/Compare 3 selection

\ TIM8_CCMR2_Input (read-write) Reset:0x00000000
: TIM8_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_IC4F, Input capture 4 filter
: TIM8_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_IC4PSC, Input capture 4 prescaler
: TIM8_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_CC4S, Capture/Compare 4 selection
: TIM8_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_IC3F, Input capture 3 filter
: TIM8_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_IC3PSC, Input capture 3 prescaler
: TIM8_CCMR2_Input_CC3S ( %bb -- x addr ) TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_CC3S, Capture/compare 3 selection

\ TIM8_CCER (read-write) Reset:0x0000
: TIM8_CCER_CC4P ( -- x addr ) 13 bit TIM8_CCER ; \ TIM8_CCER_CC4P, Capture/Compare 3 output Polarity
: TIM8_CCER_CC4E ( -- x addr ) 12 bit TIM8_CCER ; \ TIM8_CCER_CC4E, Capture/Compare 4 output enable
: TIM8_CCER_CC3NP ( -- x addr ) 11 bit TIM8_CCER ; \ TIM8_CCER_CC3NP, Capture/Compare 3 output Polarity
: TIM8_CCER_CC3NE ( -- x addr ) 10 bit TIM8_CCER ; \ TIM8_CCER_CC3NE, Capture/Compare 3 complementary output enable
: TIM8_CCER_CC3P ( -- x addr ) 9 bit TIM8_CCER ; \ TIM8_CCER_CC3P, Capture/Compare 3 output Polarity
: TIM8_CCER_CC3E ( -- x addr ) 8 bit TIM8_CCER ; \ TIM8_CCER_CC3E, Capture/Compare 3 output enable
: TIM8_CCER_CC2NP ( -- x addr ) 7 bit TIM8_CCER ; \ TIM8_CCER_CC2NP, Capture/Compare 2 output Polarity
: TIM8_CCER_CC2NE ( -- x addr ) 6 bit TIM8_CCER ; \ TIM8_CCER_CC2NE, Capture/Compare 2 complementary output enable
: TIM8_CCER_CC2P ( -- x addr ) 5 bit TIM8_CCER ; \ TIM8_CCER_CC2P, Capture/Compare 2 output Polarity
: TIM8_CCER_CC2E ( -- x addr ) 4 bit TIM8_CCER ; \ TIM8_CCER_CC2E, Capture/Compare 2 output enable
: TIM8_CCER_CC1NP ( -- x addr ) 3 bit TIM8_CCER ; \ TIM8_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM8_CCER_CC1NE ( -- x addr ) 2 bit TIM8_CCER ; \ TIM8_CCER_CC1NE, Capture/Compare 1 complementary output enable
: TIM8_CCER_CC1P ( -- x addr ) 1 bit TIM8_CCER ; \ TIM8_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM8_CCER_CC1E ( -- x addr ) 0 bit TIM8_CCER ; \ TIM8_CCER_CC1E, Capture/Compare 1 output enable

\ TIM8_CNT (read-write) Reset:0x00000000
: TIM8_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CNT ; \ TIM8_CNT_CNT, counter value

\ TIM8_PSC (read-write) Reset:0x0000
: TIM8_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_PSC ; \ TIM8_PSC_PSC, Prescaler value

\ TIM8_ARR (read-write) Reset:0x00000000
: TIM8_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_ARR ; \ TIM8_ARR_ARR, Auto-reload value

\ TIM8_CCR1 (read-write) Reset:0x00000000
: TIM8_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CCR1 ; \ TIM8_CCR1_CCR1, Capture/Compare 1 value

\ TIM8_CCR2 (read-write) Reset:0x00000000
: TIM8_CCR2_CCR2 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CCR2 ; \ TIM8_CCR2_CCR2, Capture/Compare 2 value

\ TIM8_CCR3 (read-write) Reset:0x00000000
: TIM8_CCR3_CCR3 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CCR3 ; \ TIM8_CCR3_CCR3, Capture/Compare value

\ TIM8_CCR4 (read-write) Reset:0x00000000
: TIM8_CCR4_CCR4 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CCR4 ; \ TIM8_CCR4_CCR4, Capture/Compare value

\ TIM8_DCR (read-write) Reset:0x0000
: TIM8_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM8_DCR ; \ TIM8_DCR_DBL, DMA burst length
: TIM8_DCR_DBA ( %bbbbb -- x addr ) TIM8_DCR ; \ TIM8_DCR_DBA, DMA base address

\ TIM8_DMAR (read-write) Reset:0x0000
: TIM8_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_DMAR ; \ TIM8_DMAR_DMAB, DMA register for burst accesses

\ TIM8_RCR (read-write) Reset:0x0000
: TIM8_RCR_REP ( %bbbbbbbb -- x addr ) TIM8_RCR ; \ TIM8_RCR_REP, Repetition counter value

\ TIM8_BDTR (read-write) Reset:0x0000
: TIM8_BDTR_MOE ( -- x addr ) 15 bit TIM8_BDTR ; \ TIM8_BDTR_MOE, Main output enable
: TIM8_BDTR_AOE ( -- x addr ) 14 bit TIM8_BDTR ; \ TIM8_BDTR_AOE, Automatic output enable
: TIM8_BDTR_BKP ( -- x addr ) 13 bit TIM8_BDTR ; \ TIM8_BDTR_BKP, Break polarity
: TIM8_BDTR_BKE ( -- x addr ) 12 bit TIM8_BDTR ; \ TIM8_BDTR_BKE, Break enable
: TIM8_BDTR_OSSR ( -- x addr ) 11 bit TIM8_BDTR ; \ TIM8_BDTR_OSSR, Off-state selection for Run mode
: TIM8_BDTR_OSSI ( -- x addr ) 10 bit TIM8_BDTR ; \ TIM8_BDTR_OSSI, Off-state selection for Idle mode
: TIM8_BDTR_LOCK ( %bb -- x addr ) 8 lshift TIM8_BDTR ; \ TIM8_BDTR_LOCK, Lock configuration
: TIM8_BDTR_DTG ( %bbbbbbbb -- x addr ) TIM8_BDTR ; \ TIM8_BDTR_DTG, Dead-time generator setup

\ TIM8_CCMR3_Output (read-write) Reset:0x0000
: TIM8_CCMR3_Output_OC5FE ( -- x addr ) 2 bit TIM8_CCMR3_Output ; \ TIM8_CCMR3_Output_OC5FE, Output compare 5 fast enable
: TIM8_CCMR3_Output_OC5PE ( -- x addr ) 3 bit TIM8_CCMR3_Output ; \ TIM8_CCMR3_Output_OC5PE, Output compare 5 preload enable
: TIM8_CCMR3_Output_OC5M ( %bbb -- x addr ) 4 lshift TIM8_CCMR3_Output ; \ TIM8_CCMR3_Output_OC5M, Output compare 5 mode
: TIM8_CCMR3_Output_OC5CE ( -- x addr ) 7 bit TIM8_CCMR3_Output ; \ TIM8_CCMR3_Output_OC5CE, Output compare 5 clear enable
: TIM8_CCMR3_Output_OC6FE ( -- x addr ) 10 bit TIM8_CCMR3_Output ; \ TIM8_CCMR3_Output_OC6FE, Output compare 6 fast enable
: TIM8_CCMR3_Output_OC6PE ( -- x addr ) 11 bit TIM8_CCMR3_Output ; \ TIM8_CCMR3_Output_OC6PE, Output compare 6 preload enable
: TIM8_CCMR3_Output_OC6M ( %bbb -- x addr ) 12 lshift TIM8_CCMR3_Output ; \ TIM8_CCMR3_Output_OC6M, Output compare 6 mode
: TIM8_CCMR3_Output_OC6CE ( -- x addr ) 15 bit TIM8_CCMR3_Output ; \ TIM8_CCMR3_Output_OC6CE, Output compare 6 clear enable
: TIM8_CCMR3_Output_OC5M3 ( -- x addr ) 16 bit TIM8_CCMR3_Output ; \ TIM8_CCMR3_Output_OC5M3, Output Compare 5 mode
: TIM8_CCMR3_Output_OC6M3 ( -- x addr ) 24 bit TIM8_CCMR3_Output ; \ TIM8_CCMR3_Output_OC6M3, Output Compare 6 mode

\ TIM8_CCR5 (read-write) Reset:0x0000
: TIM8_CCR5_CCR5 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CCR5 ; \ TIM8_CCR5_CCR5, Capture/Compare 5 value
: TIM8_CCR5_GC5C1 ( -- x addr ) 29 bit TIM8_CCR5 ; \ TIM8_CCR5_GC5C1, Group Channel 5 and Channel 1
: TIM8_CCR5_GC5C2 ( -- x addr ) 30 bit TIM8_CCR5 ; \ TIM8_CCR5_GC5C2, Group Channel 5 and Channel 2
: TIM8_CCR5_GC5C3 ( -- x addr ) 31 bit TIM8_CCR5 ; \ TIM8_CCR5_GC5C3, Group Channel 5 and Channel 3

\ TIM8_CRR6 (read-write) Reset:0x0000
: TIM8_CRR6_CCR6 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CRR6 ; \ TIM8_CRR6_CCR6, Capture/Compare 6 value

\ TIM2_CR1 (read-write) Reset:0x0000
: TIM2_CR1_CKD ( %bb -- x addr ) 8 lshift TIM2_CR1 ; \ TIM2_CR1_CKD, Clock division
: TIM2_CR1_ARPE ( -- x addr ) 7 bit TIM2_CR1 ; \ TIM2_CR1_ARPE, Auto-reload preload enable
: TIM2_CR1_CMS ( %bb -- x addr ) 5 lshift TIM2_CR1 ; \ TIM2_CR1_CMS, Center-aligned mode selection
: TIM2_CR1_DIR ( -- x addr ) 4 bit TIM2_CR1 ; \ TIM2_CR1_DIR, Direction
: TIM2_CR1_OPM ( -- x addr ) 3 bit TIM2_CR1 ; \ TIM2_CR1_OPM, One-pulse mode
: TIM2_CR1_URS ( -- x addr ) 2 bit TIM2_CR1 ; \ TIM2_CR1_URS, Update request source
: TIM2_CR1_UDIS ( -- x addr ) 1 bit TIM2_CR1 ; \ TIM2_CR1_UDIS, Update disable
: TIM2_CR1_CEN ( -- x addr ) 0 bit TIM2_CR1 ; \ TIM2_CR1_CEN, Counter enable

\ TIM2_CR2 (read-write) Reset:0x0000
: TIM2_CR2_TI1S ( -- x addr ) 7 bit TIM2_CR2 ; \ TIM2_CR2_TI1S, TI1 selection
: TIM2_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM2_CR2 ; \ TIM2_CR2_MMS, Master mode selection
: TIM2_CR2_CCDS ( -- x addr ) 3 bit TIM2_CR2 ; \ TIM2_CR2_CCDS, Capture/compare DMA selection

\ TIM2_SMCR (read-write) Reset:0x0000
: TIM2_SMCR_SMS ( %bbb -- x addr ) TIM2_SMCR ; \ TIM2_SMCR_SMS, Slave mode selection
: TIM2_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM2_SMCR ; \ TIM2_SMCR_TS, Trigger selection
: TIM2_SMCR_MSM ( -- x addr ) 7 bit TIM2_SMCR ; \ TIM2_SMCR_MSM, Master/Slave mode
: TIM2_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM2_SMCR ; \ TIM2_SMCR_ETF, External trigger filter
: TIM2_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM2_SMCR ; \ TIM2_SMCR_ETPS, External trigger prescaler
: TIM2_SMCR_ECE ( -- x addr ) 14 bit TIM2_SMCR ; \ TIM2_SMCR_ECE, External clock enable
: TIM2_SMCR_ETP ( -- x addr ) 15 bit TIM2_SMCR ; \ TIM2_SMCR_ETP, External trigger polarity
: TIM2_SMCR_SMS_3 ( -- x addr ) 16 bit TIM2_SMCR ; \ TIM2_SMCR_SMS_3, Slave model selection - bit[3]

\ TIM2_DIER (read-write) Reset:0x0000
: TIM2_DIER_TDE ( -- x addr ) 14 bit TIM2_DIER ; \ TIM2_DIER_TDE, Trigger DMA request enable
: TIM2_DIER_CC4DE ( -- x addr ) 12 bit TIM2_DIER ; \ TIM2_DIER_CC4DE, Capture/Compare 4 DMA request enable
: TIM2_DIER_CC3DE ( -- x addr ) 11 bit TIM2_DIER ; \ TIM2_DIER_CC3DE, Capture/Compare 3 DMA request enable
: TIM2_DIER_CC2DE ( -- x addr ) 10 bit TIM2_DIER ; \ TIM2_DIER_CC2DE, Capture/Compare 2 DMA request enable
: TIM2_DIER_CC1DE ( -- x addr ) 9 bit TIM2_DIER ; \ TIM2_DIER_CC1DE, Capture/Compare 1 DMA request enable
: TIM2_DIER_UDE ( -- x addr ) 8 bit TIM2_DIER ; \ TIM2_DIER_UDE, Update DMA request enable
: TIM2_DIER_TIE ( -- x addr ) 6 bit TIM2_DIER ; \ TIM2_DIER_TIE, Trigger interrupt enable
: TIM2_DIER_CC4IE ( -- x addr ) 4 bit TIM2_DIER ; \ TIM2_DIER_CC4IE, Capture/Compare 4 interrupt enable
: TIM2_DIER_CC3IE ( -- x addr ) 3 bit TIM2_DIER ; \ TIM2_DIER_CC3IE, Capture/Compare 3 interrupt enable
: TIM2_DIER_CC2IE ( -- x addr ) 2 bit TIM2_DIER ; \ TIM2_DIER_CC2IE, Capture/Compare 2 interrupt enable
: TIM2_DIER_CC1IE ( -- x addr ) 1 bit TIM2_DIER ; \ TIM2_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM2_DIER_UIE ( -- x addr ) 0 bit TIM2_DIER ; \ TIM2_DIER_UIE, Update interrupt enable

\ TIM2_SR (read-write) Reset:0x0000
: TIM2_SR_CC4OF ( -- x addr ) 12 bit TIM2_SR ; \ TIM2_SR_CC4OF, Capture/Compare 4 overcapture flag
: TIM2_SR_CC3OF ( -- x addr ) 11 bit TIM2_SR ; \ TIM2_SR_CC3OF, Capture/Compare 3 overcapture flag
: TIM2_SR_CC2OF ( -- x addr ) 10 bit TIM2_SR ; \ TIM2_SR_CC2OF, Capture/compare 2 overcapture flag
: TIM2_SR_CC1OF ( -- x addr ) 9 bit TIM2_SR ; \ TIM2_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM2_SR_TIF ( -- x addr ) 6 bit TIM2_SR ; \ TIM2_SR_TIF, Trigger interrupt flag
: TIM2_SR_CC4IF ( -- x addr ) 4 bit TIM2_SR ; \ TIM2_SR_CC4IF, Capture/Compare 4 interrupt flag
: TIM2_SR_CC3IF ( -- x addr ) 3 bit TIM2_SR ; \ TIM2_SR_CC3IF, Capture/Compare 3 interrupt flag
: TIM2_SR_CC2IF ( -- x addr ) 2 bit TIM2_SR ; \ TIM2_SR_CC2IF, Capture/Compare 2 interrupt flag
: TIM2_SR_CC1IF ( -- x addr ) 1 bit TIM2_SR ; \ TIM2_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM2_SR_UIF ( -- x addr ) 0 bit TIM2_SR ; \ TIM2_SR_UIF, Update interrupt flag

\ TIM2_EGR (write-only) Reset:0x0000
: TIM2_EGR_TG ( -- x addr ) 6 bit TIM2_EGR ; \ TIM2_EGR_TG, Trigger generation
: TIM2_EGR_CC4G ( -- x addr ) 4 bit TIM2_EGR ; \ TIM2_EGR_CC4G, Capture/compare 4 generation
: TIM2_EGR_CC3G ( -- x addr ) 3 bit TIM2_EGR ; \ TIM2_EGR_CC3G, Capture/compare 3 generation
: TIM2_EGR_CC2G ( -- x addr ) 2 bit TIM2_EGR ; \ TIM2_EGR_CC2G, Capture/compare 2 generation
: TIM2_EGR_CC1G ( -- x addr ) 1 bit TIM2_EGR ; \ TIM2_EGR_CC1G, Capture/compare 1 generation
: TIM2_EGR_UG ( -- x addr ) 0 bit TIM2_EGR ; \ TIM2_EGR_UG, Update generation

\ TIM2_CCMR1_Output (read-write) Reset:0x00000000
: TIM2_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC2CE, OC2CE
: TIM2_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC2M, OC2M
: TIM2_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC2PE, OC2PE
: TIM2_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC2FE, OC2FE
: TIM2_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_CC2S, CC2S
: TIM2_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC1CE, OC1CE
: TIM2_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC1M, OC1M
: TIM2_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC1PE, OC1PE
: TIM2_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC1FE, OC1FE
: TIM2_CCMR1_Output_CC1S ( %bb -- x addr ) TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_CC1S, CC1S

\ TIM2_CCMR1_Input (read-write) Reset:0x00000000
: TIM2_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_IC2F, Input capture 2 filter
: TIM2_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_IC2PCS, Input capture 2 prescaler
: TIM2_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_CC2S, Capture/Compare 2 selection
: TIM2_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_IC1F, Input capture 1 filter
: TIM2_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM2_CCMR1_Input_CC1S ( %bb -- x addr ) TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM2_CCMR2_Output (read-write) Reset:0x00000000
: TIM2_CCMR2_Output_O24CE ( -- x addr ) 15 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_O24CE, O24CE
: TIM2_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC4M, OC4M
: TIM2_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC4PE, OC4PE
: TIM2_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC4FE, OC4FE
: TIM2_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_CC4S, CC4S
: TIM2_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC3CE, OC3CE
: TIM2_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC3M, OC3M
: TIM2_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC3PE, OC3PE
: TIM2_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC3FE, OC3FE
: TIM2_CCMR2_Output_CC3S ( %bb -- x addr ) TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_CC3S, CC3S

\ TIM2_CCMR2_Input (read-write) Reset:0x00000000
: TIM2_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_IC4F, Input capture 4 filter
: TIM2_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_IC4PSC, Input capture 4 prescaler
: TIM2_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_CC4S, Capture/Compare 4 selection
: TIM2_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_IC3F, Input capture 3 filter
: TIM2_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_IC3PSC, Input capture 3 prescaler
: TIM2_CCMR2_Input_CC3S ( %bb -- x addr ) TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_CC3S, Capture/compare 3 selection

\ TIM2_CCER (read-write) Reset:0x0000
: TIM2_CCER_CC4NP ( -- x addr ) 15 bit TIM2_CCER ; \ TIM2_CCER_CC4NP, Capture/Compare 4 output Polarity
: TIM2_CCER_CC4P ( -- x addr ) 13 bit TIM2_CCER ; \ TIM2_CCER_CC4P, Capture/Compare 3 output Polarity
: TIM2_CCER_CC4E ( -- x addr ) 12 bit TIM2_CCER ; \ TIM2_CCER_CC4E, Capture/Compare 4 output enable
: TIM2_CCER_CC3NP ( -- x addr ) 11 bit TIM2_CCER ; \ TIM2_CCER_CC3NP, Capture/Compare 3 output Polarity
: TIM2_CCER_CC3P ( -- x addr ) 9 bit TIM2_CCER ; \ TIM2_CCER_CC3P, Capture/Compare 3 output Polarity
: TIM2_CCER_CC3E ( -- x addr ) 8 bit TIM2_CCER ; \ TIM2_CCER_CC3E, Capture/Compare 3 output enable
: TIM2_CCER_CC2NP ( -- x addr ) 7 bit TIM2_CCER ; \ TIM2_CCER_CC2NP, Capture/Compare 2 output Polarity
: TIM2_CCER_CC2P ( -- x addr ) 5 bit TIM2_CCER ; \ TIM2_CCER_CC2P, Capture/Compare 2 output Polarity
: TIM2_CCER_CC2E ( -- x addr ) 4 bit TIM2_CCER ; \ TIM2_CCER_CC2E, Capture/Compare 2 output enable
: TIM2_CCER_CC1NP ( -- x addr ) 3 bit TIM2_CCER ; \ TIM2_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM2_CCER_CC1P ( -- x addr ) 1 bit TIM2_CCER ; \ TIM2_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM2_CCER_CC1E ( -- x addr ) 0 bit TIM2_CCER ; \ TIM2_CCER_CC1E, Capture/Compare 1 output enable

\ TIM2_CNT (read-write) Reset:0x00000000
: TIM2_CNT_CNT_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_CNT ; \ TIM2_CNT_CNT_H, High counter value
: TIM2_CNT_CNT_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_CNT ; \ TIM2_CNT_CNT_L, Low counter value

\ TIM2_PSC (read-write) Reset:0x0000
: TIM2_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_PSC ; \ TIM2_PSC_PSC, Prescaler value

\ TIM2_ARR (read-write) Reset:0x00000000
: TIM2_ARR_ARR_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_ARR ; \ TIM2_ARR_ARR_H, High Auto-reload value
: TIM2_ARR_ARR_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_ARR ; \ TIM2_ARR_ARR_L, Low Auto-reload value

\ TIM2_CCR1 (read-write) Reset:0x00000000
: TIM2_CCR1_CCR1_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_CCR1 ; \ TIM2_CCR1_CCR1_H, High Capture/Compare 1 value
: TIM2_CCR1_CCR1_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_CCR1 ; \ TIM2_CCR1_CCR1_L, Low Capture/Compare 1 value

\ TIM2_CCR2 (read-write) Reset:0x00000000
: TIM2_CCR2_CCR2_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_CCR2 ; \ TIM2_CCR2_CCR2_H, High Capture/Compare 2 value
: TIM2_CCR2_CCR2_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_CCR2 ; \ TIM2_CCR2_CCR2_L, Low Capture/Compare 2 value

\ TIM2_CCR3 (read-write) Reset:0x00000000
: TIM2_CCR3_CCR3_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_CCR3 ; \ TIM2_CCR3_CCR3_H, High Capture/Compare value
: TIM2_CCR3_CCR3_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_CCR3 ; \ TIM2_CCR3_CCR3_L, Low Capture/Compare value

\ TIM2_CCR4 (read-write) Reset:0x00000000
: TIM2_CCR4_CCR4_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_CCR4 ; \ TIM2_CCR4_CCR4_H, High Capture/Compare value
: TIM2_CCR4_CCR4_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_CCR4 ; \ TIM2_CCR4_CCR4_L, Low Capture/Compare value

\ TIM2_DCR (read-write) Reset:0x0000
: TIM2_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM2_DCR ; \ TIM2_DCR_DBL, DMA burst length
: TIM2_DCR_DBA ( %bbbbb -- x addr ) TIM2_DCR ; \ TIM2_DCR_DBA, DMA base address

\ TIM2_DMAR (read-write) Reset:0x0000
: TIM2_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_DMAR ; \ TIM2_DMAR_DMAB, DMA register for burst accesses

\ TIM2_OR1 (read-write) Reset:0x0000
: TIM2_OR1_TI4_RMP ( %bb -- x addr ) 2 lshift TIM2_OR1 ; \ TIM2_OR1_TI4_RMP, Input Capture 4 remap
: TIM2_OR1_ETR1_RMP ( -- x addr ) 1 bit TIM2_OR1 ; \ TIM2_OR1_ETR1_RMP, External trigger remap
: TIM2_OR1_ITR1_RMP ( -- x addr ) 0 bit TIM2_OR1 ; \ TIM2_OR1_ITR1_RMP, Internal trigger 1 remap

\ TIM2_OR2 (read-write) Reset:0x0000
: TIM2_OR2_ETRSEL ( %bbb -- x addr ) 14 lshift TIM2_OR2 ; \ TIM2_OR2_ETRSEL, ETR source selection

\ TIM3_CR1 (read-write) Reset:0x0000
: TIM3_CR1_CKD ( %bb -- x addr ) 8 lshift TIM3_CR1 ; \ TIM3_CR1_CKD, Clock division
: TIM3_CR1_ARPE ( -- x addr ) 7 bit TIM3_CR1 ; \ TIM3_CR1_ARPE, Auto-reload preload enable
: TIM3_CR1_CMS ( %bb -- x addr ) 5 lshift TIM3_CR1 ; \ TIM3_CR1_CMS, Center-aligned mode selection
: TIM3_CR1_DIR ( -- x addr ) 4 bit TIM3_CR1 ; \ TIM3_CR1_DIR, Direction
: TIM3_CR1_OPM ( -- x addr ) 3 bit TIM3_CR1 ; \ TIM3_CR1_OPM, One-pulse mode
: TIM3_CR1_URS ( -- x addr ) 2 bit TIM3_CR1 ; \ TIM3_CR1_URS, Update request source
: TIM3_CR1_UDIS ( -- x addr ) 1 bit TIM3_CR1 ; \ TIM3_CR1_UDIS, Update disable
: TIM3_CR1_CEN ( -- x addr ) 0 bit TIM3_CR1 ; \ TIM3_CR1_CEN, Counter enable

\ TIM3_CR2 (read-write) Reset:0x0000
: TIM3_CR2_TI1S ( -- x addr ) 7 bit TIM3_CR2 ; \ TIM3_CR2_TI1S, TI1 selection
: TIM3_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM3_CR2 ; \ TIM3_CR2_MMS, Master mode selection
: TIM3_CR2_CCDS ( -- x addr ) 3 bit TIM3_CR2 ; \ TIM3_CR2_CCDS, Capture/compare DMA selection

\ TIM3_SMCR (read-write) Reset:0x0000
: TIM3_SMCR_SMS ( %bbb -- x addr ) TIM3_SMCR ; \ TIM3_SMCR_SMS, Slave mode selection
: TIM3_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM3_SMCR ; \ TIM3_SMCR_TS, Trigger selection
: TIM3_SMCR_MSM ( -- x addr ) 7 bit TIM3_SMCR ; \ TIM3_SMCR_MSM, Master/Slave mode
: TIM3_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM3_SMCR ; \ TIM3_SMCR_ETF, External trigger filter
: TIM3_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM3_SMCR ; \ TIM3_SMCR_ETPS, External trigger prescaler
: TIM3_SMCR_ECE ( -- x addr ) 14 bit TIM3_SMCR ; \ TIM3_SMCR_ECE, External clock enable
: TIM3_SMCR_ETP ( -- x addr ) 15 bit TIM3_SMCR ; \ TIM3_SMCR_ETP, External trigger polarity
: TIM3_SMCR_SMS_3 ( -- x addr ) 16 bit TIM3_SMCR ; \ TIM3_SMCR_SMS_3, Slave model selection - bit[3]

\ TIM3_DIER (read-write) Reset:0x0000
: TIM3_DIER_TDE ( -- x addr ) 14 bit TIM3_DIER ; \ TIM3_DIER_TDE, Trigger DMA request enable
: TIM3_DIER_CC4DE ( -- x addr ) 12 bit TIM3_DIER ; \ TIM3_DIER_CC4DE, Capture/Compare 4 DMA request enable
: TIM3_DIER_CC3DE ( -- x addr ) 11 bit TIM3_DIER ; \ TIM3_DIER_CC3DE, Capture/Compare 3 DMA request enable
: TIM3_DIER_CC2DE ( -- x addr ) 10 bit TIM3_DIER ; \ TIM3_DIER_CC2DE, Capture/Compare 2 DMA request enable
: TIM3_DIER_CC1DE ( -- x addr ) 9 bit TIM3_DIER ; \ TIM3_DIER_CC1DE, Capture/Compare 1 DMA request enable
: TIM3_DIER_UDE ( -- x addr ) 8 bit TIM3_DIER ; \ TIM3_DIER_UDE, Update DMA request enable
: TIM3_DIER_TIE ( -- x addr ) 6 bit TIM3_DIER ; \ TIM3_DIER_TIE, Trigger interrupt enable
: TIM3_DIER_CC4IE ( -- x addr ) 4 bit TIM3_DIER ; \ TIM3_DIER_CC4IE, Capture/Compare 4 interrupt enable
: TIM3_DIER_CC3IE ( -- x addr ) 3 bit TIM3_DIER ; \ TIM3_DIER_CC3IE, Capture/Compare 3 interrupt enable
: TIM3_DIER_CC2IE ( -- x addr ) 2 bit TIM3_DIER ; \ TIM3_DIER_CC2IE, Capture/Compare 2 interrupt enable
: TIM3_DIER_CC1IE ( -- x addr ) 1 bit TIM3_DIER ; \ TIM3_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM3_DIER_UIE ( -- x addr ) 0 bit TIM3_DIER ; \ TIM3_DIER_UIE, Update interrupt enable

\ TIM3_SR (read-write) Reset:0x0000
: TIM3_SR_CC4OF ( -- x addr ) 12 bit TIM3_SR ; \ TIM3_SR_CC4OF, Capture/Compare 4 overcapture flag
: TIM3_SR_CC3OF ( -- x addr ) 11 bit TIM3_SR ; \ TIM3_SR_CC3OF, Capture/Compare 3 overcapture flag
: TIM3_SR_CC2OF ( -- x addr ) 10 bit TIM3_SR ; \ TIM3_SR_CC2OF, Capture/compare 2 overcapture flag
: TIM3_SR_CC1OF ( -- x addr ) 9 bit TIM3_SR ; \ TIM3_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM3_SR_TIF ( -- x addr ) 6 bit TIM3_SR ; \ TIM3_SR_TIF, Trigger interrupt flag
: TIM3_SR_CC4IF ( -- x addr ) 4 bit TIM3_SR ; \ TIM3_SR_CC4IF, Capture/Compare 4 interrupt flag
: TIM3_SR_CC3IF ( -- x addr ) 3 bit TIM3_SR ; \ TIM3_SR_CC3IF, Capture/Compare 3 interrupt flag
: TIM3_SR_CC2IF ( -- x addr ) 2 bit TIM3_SR ; \ TIM3_SR_CC2IF, Capture/Compare 2 interrupt flag
: TIM3_SR_CC1IF ( -- x addr ) 1 bit TIM3_SR ; \ TIM3_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM3_SR_UIF ( -- x addr ) 0 bit TIM3_SR ; \ TIM3_SR_UIF, Update interrupt flag

\ TIM3_EGR (write-only) Reset:0x0000
: TIM3_EGR_TG ( -- x addr ) 6 bit TIM3_EGR ; \ TIM3_EGR_TG, Trigger generation
: TIM3_EGR_CC4G ( -- x addr ) 4 bit TIM3_EGR ; \ TIM3_EGR_CC4G, Capture/compare 4 generation
: TIM3_EGR_CC3G ( -- x addr ) 3 bit TIM3_EGR ; \ TIM3_EGR_CC3G, Capture/compare 3 generation
: TIM3_EGR_CC2G ( -- x addr ) 2 bit TIM3_EGR ; \ TIM3_EGR_CC2G, Capture/compare 2 generation
: TIM3_EGR_CC1G ( -- x addr ) 1 bit TIM3_EGR ; \ TIM3_EGR_CC1G, Capture/compare 1 generation
: TIM3_EGR_UG ( -- x addr ) 0 bit TIM3_EGR ; \ TIM3_EGR_UG, Update generation

\ TIM3_CCMR1_Output (read-write) Reset:0x00000000
: TIM3_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC2CE, OC2CE
: TIM3_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC2M, OC2M
: TIM3_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC2PE, OC2PE
: TIM3_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC2FE, OC2FE
: TIM3_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_CC2S, CC2S
: TIM3_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC1CE, OC1CE
: TIM3_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC1M, OC1M
: TIM3_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC1PE, OC1PE
: TIM3_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC1FE, OC1FE
: TIM3_CCMR1_Output_CC1S ( %bb -- x addr ) TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_CC1S, CC1S

\ TIM3_CCMR1_Input (read-write) Reset:0x00000000
: TIM3_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_IC2F, Input capture 2 filter
: TIM3_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_IC2PCS, Input capture 2 prescaler
: TIM3_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_CC2S, Capture/Compare 2 selection
: TIM3_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_IC1F, Input capture 1 filter
: TIM3_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM3_CCMR1_Input_CC1S ( %bb -- x addr ) TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM3_CCMR2_Output (read-write) Reset:0x00000000
: TIM3_CCMR2_Output_O24CE ( -- x addr ) 15 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_O24CE, O24CE
: TIM3_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC4M, OC4M
: TIM3_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC4PE, OC4PE
: TIM3_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC4FE, OC4FE
: TIM3_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_CC4S, CC4S
: TIM3_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC3CE, OC3CE
: TIM3_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC3M, OC3M
: TIM3_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC3PE, OC3PE
: TIM3_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC3FE, OC3FE
: TIM3_CCMR2_Output_CC3S ( %bb -- x addr ) TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_CC3S, CC3S

\ TIM3_CCMR2_Input (read-write) Reset:0x00000000
: TIM3_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_IC4F, Input capture 4 filter
: TIM3_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_IC4PSC, Input capture 4 prescaler
: TIM3_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_CC4S, Capture/Compare 4 selection
: TIM3_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_IC3F, Input capture 3 filter
: TIM3_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_IC3PSC, Input capture 3 prescaler
: TIM3_CCMR2_Input_CC3S ( %bb -- x addr ) TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_CC3S, Capture/compare 3 selection

\ TIM3_CCER (read-write) Reset:0x0000
: TIM3_CCER_CC4NP ( -- x addr ) 15 bit TIM3_CCER ; \ TIM3_CCER_CC4NP, Capture/Compare 4 output Polarity
: TIM3_CCER_CC4P ( -- x addr ) 13 bit TIM3_CCER ; \ TIM3_CCER_CC4P, Capture/Compare 3 output Polarity
: TIM3_CCER_CC4E ( -- x addr ) 12 bit TIM3_CCER ; \ TIM3_CCER_CC4E, Capture/Compare 4 output enable
: TIM3_CCER_CC3NP ( -- x addr ) 11 bit TIM3_CCER ; \ TIM3_CCER_CC3NP, Capture/Compare 3 output Polarity
: TIM3_CCER_CC3P ( -- x addr ) 9 bit TIM3_CCER ; \ TIM3_CCER_CC3P, Capture/Compare 3 output Polarity
: TIM3_CCER_CC3E ( -- x addr ) 8 bit TIM3_CCER ; \ TIM3_CCER_CC3E, Capture/Compare 3 output enable
: TIM3_CCER_CC2NP ( -- x addr ) 7 bit TIM3_CCER ; \ TIM3_CCER_CC2NP, Capture/Compare 2 output Polarity
: TIM3_CCER_CC2P ( -- x addr ) 5 bit TIM3_CCER ; \ TIM3_CCER_CC2P, Capture/Compare 2 output Polarity
: TIM3_CCER_CC2E ( -- x addr ) 4 bit TIM3_CCER ; \ TIM3_CCER_CC2E, Capture/Compare 2 output enable
: TIM3_CCER_CC1NP ( -- x addr ) 3 bit TIM3_CCER ; \ TIM3_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM3_CCER_CC1P ( -- x addr ) 1 bit TIM3_CCER ; \ TIM3_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM3_CCER_CC1E ( -- x addr ) 0 bit TIM3_CCER ; \ TIM3_CCER_CC1E, Capture/Compare 1 output enable

\ TIM3_CNT (read-write) Reset:0x00000000
: TIM3_CNT_CNT_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_CNT ; \ TIM3_CNT_CNT_H, High counter value
: TIM3_CNT_CNT_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_CNT ; \ TIM3_CNT_CNT_L, Low counter value

\ TIM3_PSC (read-write) Reset:0x0000
: TIM3_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_PSC ; \ TIM3_PSC_PSC, Prescaler value

\ TIM3_ARR (read-write) Reset:0x00000000
: TIM3_ARR_ARR_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_ARR ; \ TIM3_ARR_ARR_H, High Auto-reload value
: TIM3_ARR_ARR_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_ARR ; \ TIM3_ARR_ARR_L, Low Auto-reload value

\ TIM3_CCR1 (read-write) Reset:0x00000000
: TIM3_CCR1_CCR1_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_CCR1 ; \ TIM3_CCR1_CCR1_H, High Capture/Compare 1 value
: TIM3_CCR1_CCR1_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_CCR1 ; \ TIM3_CCR1_CCR1_L, Low Capture/Compare 1 value

\ TIM3_CCR2 (read-write) Reset:0x00000000
: TIM3_CCR2_CCR2_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_CCR2 ; \ TIM3_CCR2_CCR2_H, High Capture/Compare 2 value
: TIM3_CCR2_CCR2_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_CCR2 ; \ TIM3_CCR2_CCR2_L, Low Capture/Compare 2 value

\ TIM3_CCR3 (read-write) Reset:0x00000000
: TIM3_CCR3_CCR3_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_CCR3 ; \ TIM3_CCR3_CCR3_H, High Capture/Compare value
: TIM3_CCR3_CCR3_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_CCR3 ; \ TIM3_CCR3_CCR3_L, Low Capture/Compare value

\ TIM3_CCR4 (read-write) Reset:0x00000000
: TIM3_CCR4_CCR4_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_CCR4 ; \ TIM3_CCR4_CCR4_H, High Capture/Compare value
: TIM3_CCR4_CCR4_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_CCR4 ; \ TIM3_CCR4_CCR4_L, Low Capture/Compare value

\ TIM3_DCR (read-write) Reset:0x0000
: TIM3_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM3_DCR ; \ TIM3_DCR_DBL, DMA burst length
: TIM3_DCR_DBA ( %bbbbb -- x addr ) TIM3_DCR ; \ TIM3_DCR_DBA, DMA base address

\ TIM3_DMAR (read-write) Reset:0x0000
: TIM3_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_DMAR ; \ TIM3_DMAR_DMAB, DMA register for burst accesses

\ TIM3_OR1 (read-write) Reset:0x0000
: TIM3_OR1_TI1_RMP ( %bb -- x addr ) TIM3_OR1 ; \ TIM3_OR1_TI1_RMP, Input Capture 1 remap

\ TIM3_OR2 (read-write) Reset:0x0000
: TIM3_OR2_ETRSEL ( %bbb -- x addr ) 14 lshift TIM3_OR2 ; \ TIM3_OR2_ETRSEL, ETR source selection

\ TIM4_CR1 (read-write) Reset:0x0000
: TIM4_CR1_CKD ( %bb -- x addr ) 8 lshift TIM4_CR1 ; \ TIM4_CR1_CKD, Clock division
: TIM4_CR1_ARPE ( -- x addr ) 7 bit TIM4_CR1 ; \ TIM4_CR1_ARPE, Auto-reload preload enable
: TIM4_CR1_CMS ( %bb -- x addr ) 5 lshift TIM4_CR1 ; \ TIM4_CR1_CMS, Center-aligned mode selection
: TIM4_CR1_DIR ( -- x addr ) 4 bit TIM4_CR1 ; \ TIM4_CR1_DIR, Direction
: TIM4_CR1_OPM ( -- x addr ) 3 bit TIM4_CR1 ; \ TIM4_CR1_OPM, One-pulse mode
: TIM4_CR1_URS ( -- x addr ) 2 bit TIM4_CR1 ; \ TIM4_CR1_URS, Update request source
: TIM4_CR1_UDIS ( -- x addr ) 1 bit TIM4_CR1 ; \ TIM4_CR1_UDIS, Update disable
: TIM4_CR1_CEN ( -- x addr ) 0 bit TIM4_CR1 ; \ TIM4_CR1_CEN, Counter enable

\ TIM4_CR2 (read-write) Reset:0x0000
: TIM4_CR2_TI1S ( -- x addr ) 7 bit TIM4_CR2 ; \ TIM4_CR2_TI1S, TI1 selection
: TIM4_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM4_CR2 ; \ TIM4_CR2_MMS, Master mode selection
: TIM4_CR2_CCDS ( -- x addr ) 3 bit TIM4_CR2 ; \ TIM4_CR2_CCDS, Capture/compare DMA selection

\ TIM4_SMCR (read-write) Reset:0x0000
: TIM4_SMCR_SMS ( %bbb -- x addr ) TIM4_SMCR ; \ TIM4_SMCR_SMS, Slave mode selection
: TIM4_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM4_SMCR ; \ TIM4_SMCR_TS, Trigger selection
: TIM4_SMCR_MSM ( -- x addr ) 7 bit TIM4_SMCR ; \ TIM4_SMCR_MSM, Master/Slave mode
: TIM4_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM4_SMCR ; \ TIM4_SMCR_ETF, External trigger filter
: TIM4_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM4_SMCR ; \ TIM4_SMCR_ETPS, External trigger prescaler
: TIM4_SMCR_ECE ( -- x addr ) 14 bit TIM4_SMCR ; \ TIM4_SMCR_ECE, External clock enable
: TIM4_SMCR_ETP ( -- x addr ) 15 bit TIM4_SMCR ; \ TIM4_SMCR_ETP, External trigger polarity
: TIM4_SMCR_SMS_3 ( -- x addr ) 16 bit TIM4_SMCR ; \ TIM4_SMCR_SMS_3, Slave model selection - bit[3]

\ TIM4_DIER (read-write) Reset:0x0000
: TIM4_DIER_TDE ( -- x addr ) 14 bit TIM4_DIER ; \ TIM4_DIER_TDE, Trigger DMA request enable
: TIM4_DIER_CC4DE ( -- x addr ) 12 bit TIM4_DIER ; \ TIM4_DIER_CC4DE, Capture/Compare 4 DMA request enable
: TIM4_DIER_CC3DE ( -- x addr ) 11 bit TIM4_DIER ; \ TIM4_DIER_CC3DE, Capture/Compare 3 DMA request enable
: TIM4_DIER_CC2DE ( -- x addr ) 10 bit TIM4_DIER ; \ TIM4_DIER_CC2DE, Capture/Compare 2 DMA request enable
: TIM4_DIER_CC1DE ( -- x addr ) 9 bit TIM4_DIER ; \ TIM4_DIER_CC1DE, Capture/Compare 1 DMA request enable
: TIM4_DIER_UDE ( -- x addr ) 8 bit TIM4_DIER ; \ TIM4_DIER_UDE, Update DMA request enable
: TIM4_DIER_TIE ( -- x addr ) 6 bit TIM4_DIER ; \ TIM4_DIER_TIE, Trigger interrupt enable
: TIM4_DIER_CC4IE ( -- x addr ) 4 bit TIM4_DIER ; \ TIM4_DIER_CC4IE, Capture/Compare 4 interrupt enable
: TIM4_DIER_CC3IE ( -- x addr ) 3 bit TIM4_DIER ; \ TIM4_DIER_CC3IE, Capture/Compare 3 interrupt enable
: TIM4_DIER_CC2IE ( -- x addr ) 2 bit TIM4_DIER ; \ TIM4_DIER_CC2IE, Capture/Compare 2 interrupt enable
: TIM4_DIER_CC1IE ( -- x addr ) 1 bit TIM4_DIER ; \ TIM4_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM4_DIER_UIE ( -- x addr ) 0 bit TIM4_DIER ; \ TIM4_DIER_UIE, Update interrupt enable

\ TIM4_SR (read-write) Reset:0x0000
: TIM4_SR_CC4OF ( -- x addr ) 12 bit TIM4_SR ; \ TIM4_SR_CC4OF, Capture/Compare 4 overcapture flag
: TIM4_SR_CC3OF ( -- x addr ) 11 bit TIM4_SR ; \ TIM4_SR_CC3OF, Capture/Compare 3 overcapture flag
: TIM4_SR_CC2OF ( -- x addr ) 10 bit TIM4_SR ; \ TIM4_SR_CC2OF, Capture/compare 2 overcapture flag
: TIM4_SR_CC1OF ( -- x addr ) 9 bit TIM4_SR ; \ TIM4_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM4_SR_TIF ( -- x addr ) 6 bit TIM4_SR ; \ TIM4_SR_TIF, Trigger interrupt flag
: TIM4_SR_CC4IF ( -- x addr ) 4 bit TIM4_SR ; \ TIM4_SR_CC4IF, Capture/Compare 4 interrupt flag
: TIM4_SR_CC3IF ( -- x addr ) 3 bit TIM4_SR ; \ TIM4_SR_CC3IF, Capture/Compare 3 interrupt flag
: TIM4_SR_CC2IF ( -- x addr ) 2 bit TIM4_SR ; \ TIM4_SR_CC2IF, Capture/Compare 2 interrupt flag
: TIM4_SR_CC1IF ( -- x addr ) 1 bit TIM4_SR ; \ TIM4_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM4_SR_UIF ( -- x addr ) 0 bit TIM4_SR ; \ TIM4_SR_UIF, Update interrupt flag

\ TIM4_EGR (write-only) Reset:0x0000
: TIM4_EGR_TG ( -- x addr ) 6 bit TIM4_EGR ; \ TIM4_EGR_TG, Trigger generation
: TIM4_EGR_CC4G ( -- x addr ) 4 bit TIM4_EGR ; \ TIM4_EGR_CC4G, Capture/compare 4 generation
: TIM4_EGR_CC3G ( -- x addr ) 3 bit TIM4_EGR ; \ TIM4_EGR_CC3G, Capture/compare 3 generation
: TIM4_EGR_CC2G ( -- x addr ) 2 bit TIM4_EGR ; \ TIM4_EGR_CC2G, Capture/compare 2 generation
: TIM4_EGR_CC1G ( -- x addr ) 1 bit TIM4_EGR ; \ TIM4_EGR_CC1G, Capture/compare 1 generation
: TIM4_EGR_UG ( -- x addr ) 0 bit TIM4_EGR ; \ TIM4_EGR_UG, Update generation

\ TIM4_CCMR1_Output (read-write) Reset:0x00000000
: TIM4_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC2CE, OC2CE
: TIM4_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC2M, OC2M
: TIM4_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC2PE, OC2PE
: TIM4_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC2FE, OC2FE
: TIM4_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_CC2S, CC2S
: TIM4_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC1CE, OC1CE
: TIM4_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC1M, OC1M
: TIM4_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC1PE, OC1PE
: TIM4_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC1FE, OC1FE
: TIM4_CCMR1_Output_CC1S ( %bb -- x addr ) TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_CC1S, CC1S

\ TIM4_CCMR1_Input (read-write) Reset:0x00000000
: TIM4_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_IC2F, Input capture 2 filter
: TIM4_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_IC2PCS, Input capture 2 prescaler
: TIM4_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_CC2S, Capture/Compare 2 selection
: TIM4_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_IC1F, Input capture 1 filter
: TIM4_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM4_CCMR1_Input_CC1S ( %bb -- x addr ) TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM4_CCMR2_Output (read-write) Reset:0x00000000
: TIM4_CCMR2_Output_O24CE ( -- x addr ) 15 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_O24CE, O24CE
: TIM4_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC4M, OC4M
: TIM4_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC4PE, OC4PE
: TIM4_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC4FE, OC4FE
: TIM4_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_CC4S, CC4S
: TIM4_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC3CE, OC3CE
: TIM4_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC3M, OC3M
: TIM4_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC3PE, OC3PE
: TIM4_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC3FE, OC3FE
: TIM4_CCMR2_Output_CC3S ( %bb -- x addr ) TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_CC3S, CC3S

\ TIM4_CCMR2_Input (read-write) Reset:0x00000000
: TIM4_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_IC4F, Input capture 4 filter
: TIM4_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_IC4PSC, Input capture 4 prescaler
: TIM4_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_CC4S, Capture/Compare 4 selection
: TIM4_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_IC3F, Input capture 3 filter
: TIM4_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_IC3PSC, Input capture 3 prescaler
: TIM4_CCMR2_Input_CC3S ( %bb -- x addr ) TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_CC3S, Capture/compare 3 selection

\ TIM4_CCER (read-write) Reset:0x0000
: TIM4_CCER_CC4NP ( -- x addr ) 15 bit TIM4_CCER ; \ TIM4_CCER_CC4NP, Capture/Compare 4 output Polarity
: TIM4_CCER_CC4P ( -- x addr ) 13 bit TIM4_CCER ; \ TIM4_CCER_CC4P, Capture/Compare 3 output Polarity
: TIM4_CCER_CC4E ( -- x addr ) 12 bit TIM4_CCER ; \ TIM4_CCER_CC4E, Capture/Compare 4 output enable
: TIM4_CCER_CC3NP ( -- x addr ) 11 bit TIM4_CCER ; \ TIM4_CCER_CC3NP, Capture/Compare 3 output Polarity
: TIM4_CCER_CC3P ( -- x addr ) 9 bit TIM4_CCER ; \ TIM4_CCER_CC3P, Capture/Compare 3 output Polarity
: TIM4_CCER_CC3E ( -- x addr ) 8 bit TIM4_CCER ; \ TIM4_CCER_CC3E, Capture/Compare 3 output enable
: TIM4_CCER_CC2NP ( -- x addr ) 7 bit TIM4_CCER ; \ TIM4_CCER_CC2NP, Capture/Compare 2 output Polarity
: TIM4_CCER_CC2P ( -- x addr ) 5 bit TIM4_CCER ; \ TIM4_CCER_CC2P, Capture/Compare 2 output Polarity
: TIM4_CCER_CC2E ( -- x addr ) 4 bit TIM4_CCER ; \ TIM4_CCER_CC2E, Capture/Compare 2 output enable
: TIM4_CCER_CC1NP ( -- x addr ) 3 bit TIM4_CCER ; \ TIM4_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM4_CCER_CC1P ( -- x addr ) 1 bit TIM4_CCER ; \ TIM4_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM4_CCER_CC1E ( -- x addr ) 0 bit TIM4_CCER ; \ TIM4_CCER_CC1E, Capture/Compare 1 output enable

\ TIM4_CNT (read-write) Reset:0x00000000
: TIM4_CNT_CNT_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_CNT ; \ TIM4_CNT_CNT_H, High counter value
: TIM4_CNT_CNT_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_CNT ; \ TIM4_CNT_CNT_L, Low counter value

\ TIM4_PSC (read-write) Reset:0x0000
: TIM4_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_PSC ; \ TIM4_PSC_PSC, Prescaler value

\ TIM4_ARR (read-write) Reset:0x00000000
: TIM4_ARR_ARR_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_ARR ; \ TIM4_ARR_ARR_H, High Auto-reload value
: TIM4_ARR_ARR_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_ARR ; \ TIM4_ARR_ARR_L, Low Auto-reload value

\ TIM4_CCR1 (read-write) Reset:0x00000000
: TIM4_CCR1_CCR1_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_CCR1 ; \ TIM4_CCR1_CCR1_H, High Capture/Compare 1 value
: TIM4_CCR1_CCR1_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_CCR1 ; \ TIM4_CCR1_CCR1_L, Low Capture/Compare 1 value

\ TIM4_CCR2 (read-write) Reset:0x00000000
: TIM4_CCR2_CCR2_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_CCR2 ; \ TIM4_CCR2_CCR2_H, High Capture/Compare 2 value
: TIM4_CCR2_CCR2_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_CCR2 ; \ TIM4_CCR2_CCR2_L, Low Capture/Compare 2 value

\ TIM4_CCR3 (read-write) Reset:0x00000000
: TIM4_CCR3_CCR3_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_CCR3 ; \ TIM4_CCR3_CCR3_H, High Capture/Compare value
: TIM4_CCR3_CCR3_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_CCR3 ; \ TIM4_CCR3_CCR3_L, Low Capture/Compare value

\ TIM4_CCR4 (read-write) Reset:0x00000000
: TIM4_CCR4_CCR4_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_CCR4 ; \ TIM4_CCR4_CCR4_H, High Capture/Compare value
: TIM4_CCR4_CCR4_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_CCR4 ; \ TIM4_CCR4_CCR4_L, Low Capture/Compare value

\ TIM4_DCR (read-write) Reset:0x0000
: TIM4_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM4_DCR ; \ TIM4_DCR_DBL, DMA burst length
: TIM4_DCR_DBA ( %bbbbb -- x addr ) TIM4_DCR ; \ TIM4_DCR_DBA, DMA base address

\ TIM4_DMAR (read-write) Reset:0x0000
: TIM4_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_DMAR ; \ TIM4_DMAR_DMAB, DMA register for burst accesses

\ TIM5_CR1 (read-write) Reset:0x0000
: TIM5_CR1_CKD ( %bb -- x addr ) 8 lshift TIM5_CR1 ; \ TIM5_CR1_CKD, Clock division
: TIM5_CR1_ARPE ( -- x addr ) 7 bit TIM5_CR1 ; \ TIM5_CR1_ARPE, Auto-reload preload enable
: TIM5_CR1_CMS ( %bb -- x addr ) 5 lshift TIM5_CR1 ; \ TIM5_CR1_CMS, Center-aligned mode selection
: TIM5_CR1_DIR ( -- x addr ) 4 bit TIM5_CR1 ; \ TIM5_CR1_DIR, Direction
: TIM5_CR1_OPM ( -- x addr ) 3 bit TIM5_CR1 ; \ TIM5_CR1_OPM, One-pulse mode
: TIM5_CR1_URS ( -- x addr ) 2 bit TIM5_CR1 ; \ TIM5_CR1_URS, Update request source
: TIM5_CR1_UDIS ( -- x addr ) 1 bit TIM5_CR1 ; \ TIM5_CR1_UDIS, Update disable
: TIM5_CR1_CEN ( -- x addr ) 0 bit TIM5_CR1 ; \ TIM5_CR1_CEN, Counter enable

\ TIM5_CR2 (read-write) Reset:0x0000
: TIM5_CR2_TI1S ( -- x addr ) 7 bit TIM5_CR2 ; \ TIM5_CR2_TI1S, TI1 selection
: TIM5_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM5_CR2 ; \ TIM5_CR2_MMS, Master mode selection
: TIM5_CR2_CCDS ( -- x addr ) 3 bit TIM5_CR2 ; \ TIM5_CR2_CCDS, Capture/compare DMA selection

\ TIM5_SMCR (read-write) Reset:0x0000
: TIM5_SMCR_SMS ( %bbb -- x addr ) TIM5_SMCR ; \ TIM5_SMCR_SMS, Slave mode selection
: TIM5_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM5_SMCR ; \ TIM5_SMCR_TS, Trigger selection
: TIM5_SMCR_MSM ( -- x addr ) 7 bit TIM5_SMCR ; \ TIM5_SMCR_MSM, Master/Slave mode
: TIM5_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM5_SMCR ; \ TIM5_SMCR_ETF, External trigger filter
: TIM5_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM5_SMCR ; \ TIM5_SMCR_ETPS, External trigger prescaler
: TIM5_SMCR_ECE ( -- x addr ) 14 bit TIM5_SMCR ; \ TIM5_SMCR_ECE, External clock enable
: TIM5_SMCR_ETP ( -- x addr ) 15 bit TIM5_SMCR ; \ TIM5_SMCR_ETP, External trigger polarity
: TIM5_SMCR_SMS_3 ( -- x addr ) 16 bit TIM5_SMCR ; \ TIM5_SMCR_SMS_3, Slave model selection - bit[3]

\ TIM5_DIER (read-write) Reset:0x0000
: TIM5_DIER_TDE ( -- x addr ) 14 bit TIM5_DIER ; \ TIM5_DIER_TDE, Trigger DMA request enable
: TIM5_DIER_CC4DE ( -- x addr ) 12 bit TIM5_DIER ; \ TIM5_DIER_CC4DE, Capture/Compare 4 DMA request enable
: TIM5_DIER_CC3DE ( -- x addr ) 11 bit TIM5_DIER ; \ TIM5_DIER_CC3DE, Capture/Compare 3 DMA request enable
: TIM5_DIER_CC2DE ( -- x addr ) 10 bit TIM5_DIER ; \ TIM5_DIER_CC2DE, Capture/Compare 2 DMA request enable
: TIM5_DIER_CC1DE ( -- x addr ) 9 bit TIM5_DIER ; \ TIM5_DIER_CC1DE, Capture/Compare 1 DMA request enable
: TIM5_DIER_UDE ( -- x addr ) 8 bit TIM5_DIER ; \ TIM5_DIER_UDE, Update DMA request enable
: TIM5_DIER_TIE ( -- x addr ) 6 bit TIM5_DIER ; \ TIM5_DIER_TIE, Trigger interrupt enable
: TIM5_DIER_CC4IE ( -- x addr ) 4 bit TIM5_DIER ; \ TIM5_DIER_CC4IE, Capture/Compare 4 interrupt enable
: TIM5_DIER_CC3IE ( -- x addr ) 3 bit TIM5_DIER ; \ TIM5_DIER_CC3IE, Capture/Compare 3 interrupt enable
: TIM5_DIER_CC2IE ( -- x addr ) 2 bit TIM5_DIER ; \ TIM5_DIER_CC2IE, Capture/Compare 2 interrupt enable
: TIM5_DIER_CC1IE ( -- x addr ) 1 bit TIM5_DIER ; \ TIM5_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM5_DIER_UIE ( -- x addr ) 0 bit TIM5_DIER ; \ TIM5_DIER_UIE, Update interrupt enable

\ TIM5_SR (read-write) Reset:0x0000
: TIM5_SR_CC4OF ( -- x addr ) 12 bit TIM5_SR ; \ TIM5_SR_CC4OF, Capture/Compare 4 overcapture flag
: TIM5_SR_CC3OF ( -- x addr ) 11 bit TIM5_SR ; \ TIM5_SR_CC3OF, Capture/Compare 3 overcapture flag
: TIM5_SR_CC2OF ( -- x addr ) 10 bit TIM5_SR ; \ TIM5_SR_CC2OF, Capture/compare 2 overcapture flag
: TIM5_SR_CC1OF ( -- x addr ) 9 bit TIM5_SR ; \ TIM5_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM5_SR_TIF ( -- x addr ) 6 bit TIM5_SR ; \ TIM5_SR_TIF, Trigger interrupt flag
: TIM5_SR_CC4IF ( -- x addr ) 4 bit TIM5_SR ; \ TIM5_SR_CC4IF, Capture/Compare 4 interrupt flag
: TIM5_SR_CC3IF ( -- x addr ) 3 bit TIM5_SR ; \ TIM5_SR_CC3IF, Capture/Compare 3 interrupt flag
: TIM5_SR_CC2IF ( -- x addr ) 2 bit TIM5_SR ; \ TIM5_SR_CC2IF, Capture/Compare 2 interrupt flag
: TIM5_SR_CC1IF ( -- x addr ) 1 bit TIM5_SR ; \ TIM5_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM5_SR_UIF ( -- x addr ) 0 bit TIM5_SR ; \ TIM5_SR_UIF, Update interrupt flag

\ TIM5_EGR (write-only) Reset:0x0000
: TIM5_EGR_TG ( -- x addr ) 6 bit TIM5_EGR ; \ TIM5_EGR_TG, Trigger generation
: TIM5_EGR_CC4G ( -- x addr ) 4 bit TIM5_EGR ; \ TIM5_EGR_CC4G, Capture/compare 4 generation
: TIM5_EGR_CC3G ( -- x addr ) 3 bit TIM5_EGR ; \ TIM5_EGR_CC3G, Capture/compare 3 generation
: TIM5_EGR_CC2G ( -- x addr ) 2 bit TIM5_EGR ; \ TIM5_EGR_CC2G, Capture/compare 2 generation
: TIM5_EGR_CC1G ( -- x addr ) 1 bit TIM5_EGR ; \ TIM5_EGR_CC1G, Capture/compare 1 generation
: TIM5_EGR_UG ( -- x addr ) 0 bit TIM5_EGR ; \ TIM5_EGR_UG, Update generation

\ TIM5_CCMR1_Output (read-write) Reset:0x00000000
: TIM5_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC2CE, OC2CE
: TIM5_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC2M, OC2M
: TIM5_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC2PE, OC2PE
: TIM5_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC2FE, OC2FE
: TIM5_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_CC2S, CC2S
: TIM5_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC1CE, OC1CE
: TIM5_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC1M, OC1M
: TIM5_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC1PE, OC1PE
: TIM5_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC1FE, OC1FE
: TIM5_CCMR1_Output_CC1S ( %bb -- x addr ) TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_CC1S, CC1S

\ TIM5_CCMR1_Input (read-write) Reset:0x00000000
: TIM5_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_IC2F, Input capture 2 filter
: TIM5_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_IC2PCS, Input capture 2 prescaler
: TIM5_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_CC2S, Capture/Compare 2 selection
: TIM5_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_IC1F, Input capture 1 filter
: TIM5_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM5_CCMR1_Input_CC1S ( %bb -- x addr ) TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM5_CCMR2_Output (read-write) Reset:0x00000000
: TIM5_CCMR2_Output_O24CE ( -- x addr ) 15 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_O24CE, O24CE
: TIM5_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC4M, OC4M
: TIM5_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC4PE, OC4PE
: TIM5_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC4FE, OC4FE
: TIM5_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_CC4S, CC4S
: TIM5_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC3CE, OC3CE
: TIM5_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC3M, OC3M
: TIM5_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC3PE, OC3PE
: TIM5_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC3FE, OC3FE
: TIM5_CCMR2_Output_CC3S ( %bb -- x addr ) TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_CC3S, CC3S

\ TIM5_CCMR2_Input (read-write) Reset:0x00000000
: TIM5_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_IC4F, Input capture 4 filter
: TIM5_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_IC4PSC, Input capture 4 prescaler
: TIM5_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_CC4S, Capture/Compare 4 selection
: TIM5_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_IC3F, Input capture 3 filter
: TIM5_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_IC3PSC, Input capture 3 prescaler
: TIM5_CCMR2_Input_CC3S ( %bb -- x addr ) TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_CC3S, Capture/compare 3 selection

\ TIM5_CCER (read-write) Reset:0x0000
: TIM5_CCER_CC4NP ( -- x addr ) 15 bit TIM5_CCER ; \ TIM5_CCER_CC4NP, Capture/Compare 4 output Polarity
: TIM5_CCER_CC4P ( -- x addr ) 13 bit TIM5_CCER ; \ TIM5_CCER_CC4P, Capture/Compare 3 output Polarity
: TIM5_CCER_CC4E ( -- x addr ) 12 bit TIM5_CCER ; \ TIM5_CCER_CC4E, Capture/Compare 4 output enable
: TIM5_CCER_CC3NP ( -- x addr ) 11 bit TIM5_CCER ; \ TIM5_CCER_CC3NP, Capture/Compare 3 output Polarity
: TIM5_CCER_CC3P ( -- x addr ) 9 bit TIM5_CCER ; \ TIM5_CCER_CC3P, Capture/Compare 3 output Polarity
: TIM5_CCER_CC3E ( -- x addr ) 8 bit TIM5_CCER ; \ TIM5_CCER_CC3E, Capture/Compare 3 output enable
: TIM5_CCER_CC2NP ( -- x addr ) 7 bit TIM5_CCER ; \ TIM5_CCER_CC2NP, Capture/Compare 2 output Polarity
: TIM5_CCER_CC2P ( -- x addr ) 5 bit TIM5_CCER ; \ TIM5_CCER_CC2P, Capture/Compare 2 output Polarity
: TIM5_CCER_CC2E ( -- x addr ) 4 bit TIM5_CCER ; \ TIM5_CCER_CC2E, Capture/Compare 2 output enable
: TIM5_CCER_CC1NP ( -- x addr ) 3 bit TIM5_CCER ; \ TIM5_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM5_CCER_CC1P ( -- x addr ) 1 bit TIM5_CCER ; \ TIM5_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM5_CCER_CC1E ( -- x addr ) 0 bit TIM5_CCER ; \ TIM5_CCER_CC1E, Capture/Compare 1 output enable

\ TIM5_CNT (read-write) Reset:0x00000000
: TIM5_CNT_CNT_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_CNT ; \ TIM5_CNT_CNT_H, High counter value
: TIM5_CNT_CNT_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_CNT ; \ TIM5_CNT_CNT_L, Low counter value

\ TIM5_PSC (read-write) Reset:0x0000
: TIM5_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_PSC ; \ TIM5_PSC_PSC, Prescaler value

\ TIM5_ARR (read-write) Reset:0x00000000
: TIM5_ARR_ARR_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_ARR ; \ TIM5_ARR_ARR_H, High Auto-reload value
: TIM5_ARR_ARR_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_ARR ; \ TIM5_ARR_ARR_L, Low Auto-reload value

\ TIM5_CCR1 (read-write) Reset:0x00000000
: TIM5_CCR1_CCR1_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_CCR1 ; \ TIM5_CCR1_CCR1_H, High Capture/Compare 1 value
: TIM5_CCR1_CCR1_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_CCR1 ; \ TIM5_CCR1_CCR1_L, Low Capture/Compare 1 value

\ TIM5_CCR2 (read-write) Reset:0x00000000
: TIM5_CCR2_CCR2_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_CCR2 ; \ TIM5_CCR2_CCR2_H, High Capture/Compare 2 value
: TIM5_CCR2_CCR2_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_CCR2 ; \ TIM5_CCR2_CCR2_L, Low Capture/Compare 2 value

\ TIM5_CCR3 (read-write) Reset:0x00000000
: TIM5_CCR3_CCR3_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_CCR3 ; \ TIM5_CCR3_CCR3_H, High Capture/Compare value
: TIM5_CCR3_CCR3_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_CCR3 ; \ TIM5_CCR3_CCR3_L, Low Capture/Compare value

\ TIM5_CCR4 (read-write) Reset:0x00000000
: TIM5_CCR4_CCR4_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_CCR4 ; \ TIM5_CCR4_CCR4_H, High Capture/Compare value
: TIM5_CCR4_CCR4_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_CCR4 ; \ TIM5_CCR4_CCR4_L, Low Capture/Compare value

\ TIM5_DCR (read-write) Reset:0x0000
: TIM5_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM5_DCR ; \ TIM5_DCR_DBL, DMA burst length
: TIM5_DCR_DBA ( %bbbbb -- x addr ) TIM5_DCR ; \ TIM5_DCR_DBA, DMA base address

\ TIM5_DMAR (read-write) Reset:0x0000
: TIM5_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_DMAR ; \ TIM5_DMAR_DMAB, DMA register for burst accesses

\ TIM9_CR1 (read-write) Reset:0x0000
: TIM9_CR1_CKD ( %bb -- x addr ) 8 lshift TIM9_CR1 ; \ TIM9_CR1_CKD, Clock division
: TIM9_CR1_ARPE ( -- x addr ) 7 bit TIM9_CR1 ; \ TIM9_CR1_ARPE, Auto-reload preload enable
: TIM9_CR1_OPM ( -- x addr ) 3 bit TIM9_CR1 ; \ TIM9_CR1_OPM, One-pulse mode
: TIM9_CR1_URS ( -- x addr ) 2 bit TIM9_CR1 ; \ TIM9_CR1_URS, Update request source
: TIM9_CR1_UDIS ( -- x addr ) 1 bit TIM9_CR1 ; \ TIM9_CR1_UDIS, Update disable
: TIM9_CR1_CEN ( -- x addr ) 0 bit TIM9_CR1 ; \ TIM9_CR1_CEN, Counter enable

\ TIM9_SMCR (read-write) Reset:0x0000
: TIM9_SMCR_MSM ( -- x addr ) 7 bit TIM9_SMCR ; \ TIM9_SMCR_MSM, Master/Slave mode
: TIM9_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM9_SMCR ; \ TIM9_SMCR_TS, Trigger selection
: TIM9_SMCR_SMS ( %bbb -- x addr ) TIM9_SMCR ; \ TIM9_SMCR_SMS, Slave mode selection

\ TIM9_DIER (read-write) Reset:0x0000
: TIM9_DIER_TIE ( -- x addr ) 6 bit TIM9_DIER ; \ TIM9_DIER_TIE, Trigger interrupt enable
: TIM9_DIER_CC2IE ( -- x addr ) 2 bit TIM9_DIER ; \ TIM9_DIER_CC2IE, Capture/Compare 2 interrupt enable
: TIM9_DIER_CC1IE ( -- x addr ) 1 bit TIM9_DIER ; \ TIM9_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM9_DIER_UIE ( -- x addr ) 0 bit TIM9_DIER ; \ TIM9_DIER_UIE, Update interrupt enable

\ TIM9_SR (read-write) Reset:0x0000
: TIM9_SR_CC2OF ( -- x addr ) 10 bit TIM9_SR ; \ TIM9_SR_CC2OF, Capture/compare 2 overcapture flag
: TIM9_SR_CC1OF ( -- x addr ) 9 bit TIM9_SR ; \ TIM9_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM9_SR_TIF ( -- x addr ) 6 bit TIM9_SR ; \ TIM9_SR_TIF, Trigger interrupt flag
: TIM9_SR_CC2IF ( -- x addr ) 2 bit TIM9_SR ; \ TIM9_SR_CC2IF, Capture/Compare 2 interrupt flag
: TIM9_SR_CC1IF ( -- x addr ) 1 bit TIM9_SR ; \ TIM9_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM9_SR_UIF ( -- x addr ) 0 bit TIM9_SR ; \ TIM9_SR_UIF, Update interrupt flag

\ TIM9_EGR (write-only) Reset:0x0000
: TIM9_EGR_TG ( -- x addr ) 6 bit TIM9_EGR ; \ TIM9_EGR_TG, Trigger generation
: TIM9_EGR_CC2G ( -- x addr ) 2 bit TIM9_EGR ; \ TIM9_EGR_CC2G, Capture/compare 2 generation
: TIM9_EGR_CC1G ( -- x addr ) 1 bit TIM9_EGR ; \ TIM9_EGR_CC1G, Capture/compare 1 generation
: TIM9_EGR_UG ( -- x addr ) 0 bit TIM9_EGR ; \ TIM9_EGR_UG, Update generation

\ TIM9_CCMR1_Output (read-write) Reset:0x00000000
: TIM9_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC2M, Output Compare 2 mode
: TIM9_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC2PE, Output Compare 2 preload enable
: TIM9_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC2FE, Output Compare 2 fast enable
: TIM9_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_CC2S, Capture/Compare 2 selection
: TIM9_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC1M, Output Compare 1 mode
: TIM9_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC1PE, Output Compare 1 preload enable
: TIM9_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC1FE, Output Compare 1 fast enable
: TIM9_CCMR1_Output_CC1S ( %bb -- x addr ) TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_CC1S, Capture/Compare 1 selection

\ TIM9_CCMR1_Input (read-write) Reset:0x00000000
: TIM9_CCMR1_Input_IC2F ( %bbb -- x addr ) 12 lshift TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_IC2F, Input capture 2 filter
: TIM9_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_IC2PCS, Input capture 2 prescaler
: TIM9_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_CC2S, Capture/Compare 2 selection
: TIM9_CCMR1_Input_IC1F ( %bbb -- x addr ) 4 lshift TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_IC1F, Input capture 1 filter
: TIM9_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM9_CCMR1_Input_CC1S ( %bb -- x addr ) TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM9_CCER (read-write) Reset:0x0000
: TIM9_CCER_CC2NP ( -- x addr ) 7 bit TIM9_CCER ; \ TIM9_CCER_CC2NP, Capture/Compare 2 output Polarity
: TIM9_CCER_CC2P ( -- x addr ) 5 bit TIM9_CCER ; \ TIM9_CCER_CC2P, Capture/Compare 2 output Polarity
: TIM9_CCER_CC2E ( -- x addr ) 4 bit TIM9_CCER ; \ TIM9_CCER_CC2E, Capture/Compare 2 output enable
: TIM9_CCER_CC1NP ( -- x addr ) 3 bit TIM9_CCER ; \ TIM9_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM9_CCER_CC1P ( -- x addr ) 1 bit TIM9_CCER ; \ TIM9_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM9_CCER_CC1E ( -- x addr ) 0 bit TIM9_CCER ; \ TIM9_CCER_CC1E, Capture/Compare 1 output enable

\ TIM9_CNT (read-write) Reset:0x00000000
: TIM9_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM9_CNT ; \ TIM9_CNT_CNT, counter value

\ TIM9_PSC (read-write) Reset:0x0000
: TIM9_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM9_PSC ; \ TIM9_PSC_PSC, Prescaler value

\ TIM9_ARR (read-write) Reset:0x00000000
: TIM9_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM9_ARR ; \ TIM9_ARR_ARR, Auto-reload value

\ TIM9_CCR1 (read-write) Reset:0x00000000
: TIM9_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM9_CCR1 ; \ TIM9_CCR1_CCR1, Capture/Compare 1 value

\ TIM9_CCR2 (read-write) Reset:0x00000000
: TIM9_CCR2_CCR2 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM9_CCR2 ; \ TIM9_CCR2_CCR2, Capture/Compare 2 value

\ TIM12_CR1 (read-write) Reset:0x0000
: TIM12_CR1_CKD ( %bb -- x addr ) 8 lshift TIM12_CR1 ; \ TIM12_CR1_CKD, Clock division
: TIM12_CR1_ARPE ( -- x addr ) 7 bit TIM12_CR1 ; \ TIM12_CR1_ARPE, Auto-reload preload enable
: TIM12_CR1_OPM ( -- x addr ) 3 bit TIM12_CR1 ; \ TIM12_CR1_OPM, One-pulse mode
: TIM12_CR1_URS ( -- x addr ) 2 bit TIM12_CR1 ; \ TIM12_CR1_URS, Update request source
: TIM12_CR1_UDIS ( -- x addr ) 1 bit TIM12_CR1 ; \ TIM12_CR1_UDIS, Update disable
: TIM12_CR1_CEN ( -- x addr ) 0 bit TIM12_CR1 ; \ TIM12_CR1_CEN, Counter enable

\ TIM12_SMCR (read-write) Reset:0x0000
: TIM12_SMCR_MSM ( -- x addr ) 7 bit TIM12_SMCR ; \ TIM12_SMCR_MSM, Master/Slave mode
: TIM12_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM12_SMCR ; \ TIM12_SMCR_TS, Trigger selection
: TIM12_SMCR_SMS ( %bbb -- x addr ) TIM12_SMCR ; \ TIM12_SMCR_SMS, Slave mode selection

\ TIM12_DIER (read-write) Reset:0x0000
: TIM12_DIER_TIE ( -- x addr ) 6 bit TIM12_DIER ; \ TIM12_DIER_TIE, Trigger interrupt enable
: TIM12_DIER_CC2IE ( -- x addr ) 2 bit TIM12_DIER ; \ TIM12_DIER_CC2IE, Capture/Compare 2 interrupt enable
: TIM12_DIER_CC1IE ( -- x addr ) 1 bit TIM12_DIER ; \ TIM12_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM12_DIER_UIE ( -- x addr ) 0 bit TIM12_DIER ; \ TIM12_DIER_UIE, Update interrupt enable

\ TIM12_SR (read-write) Reset:0x0000
: TIM12_SR_CC2OF ( -- x addr ) 10 bit TIM12_SR ; \ TIM12_SR_CC2OF, Capture/compare 2 overcapture flag
: TIM12_SR_CC1OF ( -- x addr ) 9 bit TIM12_SR ; \ TIM12_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM12_SR_TIF ( -- x addr ) 6 bit TIM12_SR ; \ TIM12_SR_TIF, Trigger interrupt flag
: TIM12_SR_CC2IF ( -- x addr ) 2 bit TIM12_SR ; \ TIM12_SR_CC2IF, Capture/Compare 2 interrupt flag
: TIM12_SR_CC1IF ( -- x addr ) 1 bit TIM12_SR ; \ TIM12_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM12_SR_UIF ( -- x addr ) 0 bit TIM12_SR ; \ TIM12_SR_UIF, Update interrupt flag

\ TIM12_EGR (write-only) Reset:0x0000
: TIM12_EGR_TG ( -- x addr ) 6 bit TIM12_EGR ; \ TIM12_EGR_TG, Trigger generation
: TIM12_EGR_CC2G ( -- x addr ) 2 bit TIM12_EGR ; \ TIM12_EGR_CC2G, Capture/compare 2 generation
: TIM12_EGR_CC1G ( -- x addr ) 1 bit TIM12_EGR ; \ TIM12_EGR_CC1G, Capture/compare 1 generation
: TIM12_EGR_UG ( -- x addr ) 0 bit TIM12_EGR ; \ TIM12_EGR_UG, Update generation

\ TIM12_CCMR1_Output (read-write) Reset:0x00000000
: TIM12_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC2M, Output Compare 2 mode
: TIM12_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC2PE, Output Compare 2 preload enable
: TIM12_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC2FE, Output Compare 2 fast enable
: TIM12_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_CC2S, Capture/Compare 2 selection
: TIM12_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC1M, Output Compare 1 mode
: TIM12_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC1PE, Output Compare 1 preload enable
: TIM12_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC1FE, Output Compare 1 fast enable
: TIM12_CCMR1_Output_CC1S ( %bb -- x addr ) TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_CC1S, Capture/Compare 1 selection

\ TIM12_CCMR1_Input (read-write) Reset:0x00000000
: TIM12_CCMR1_Input_IC2F ( %bbb -- x addr ) 12 lshift TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_IC2F, Input capture 2 filter
: TIM12_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_IC2PCS, Input capture 2 prescaler
: TIM12_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_CC2S, Capture/Compare 2 selection
: TIM12_CCMR1_Input_IC1F ( %bbb -- x addr ) 4 lshift TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_IC1F, Input capture 1 filter
: TIM12_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM12_CCMR1_Input_CC1S ( %bb -- x addr ) TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM12_CCER (read-write) Reset:0x0000
: TIM12_CCER_CC2NP ( -- x addr ) 7 bit TIM12_CCER ; \ TIM12_CCER_CC2NP, Capture/Compare 2 output Polarity
: TIM12_CCER_CC2P ( -- x addr ) 5 bit TIM12_CCER ; \ TIM12_CCER_CC2P, Capture/Compare 2 output Polarity
: TIM12_CCER_CC2E ( -- x addr ) 4 bit TIM12_CCER ; \ TIM12_CCER_CC2E, Capture/Compare 2 output enable
: TIM12_CCER_CC1NP ( -- x addr ) 3 bit TIM12_CCER ; \ TIM12_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM12_CCER_CC1P ( -- x addr ) 1 bit TIM12_CCER ; \ TIM12_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM12_CCER_CC1E ( -- x addr ) 0 bit TIM12_CCER ; \ TIM12_CCER_CC1E, Capture/Compare 1 output enable

\ TIM12_CNT (read-write) Reset:0x00000000
: TIM12_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM12_CNT ; \ TIM12_CNT_CNT, counter value

\ TIM12_PSC (read-write) Reset:0x0000
: TIM12_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM12_PSC ; \ TIM12_PSC_PSC, Prescaler value

\ TIM12_ARR (read-write) Reset:0x00000000
: TIM12_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM12_ARR ; \ TIM12_ARR_ARR, Auto-reload value

\ TIM12_CCR1 (read-write) Reset:0x00000000
: TIM12_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM12_CCR1 ; \ TIM12_CCR1_CCR1, Capture/Compare 1 value

\ TIM12_CCR2 (read-write) Reset:0x00000000
: TIM12_CCR2_CCR2 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM12_CCR2 ; \ TIM12_CCR2_CCR2, Capture/Compare 2 value

\ TIM10_CR1 (read-write) Reset:0x0000
: TIM10_CR1_CKD ( %bb -- x addr ) 8 lshift TIM10_CR1 ; \ TIM10_CR1_CKD, Clock division
: TIM10_CR1_ARPE ( -- x addr ) 7 bit TIM10_CR1 ; \ TIM10_CR1_ARPE, Auto-reload preload enable
: TIM10_CR1_URS ( -- x addr ) 2 bit TIM10_CR1 ; \ TIM10_CR1_URS, Update request source
: TIM10_CR1_UDIS ( -- x addr ) 1 bit TIM10_CR1 ; \ TIM10_CR1_UDIS, Update disable
: TIM10_CR1_CEN ( -- x addr ) 0 bit TIM10_CR1 ; \ TIM10_CR1_CEN, Counter enable

\ TIM10_DIER (read-write) Reset:0x0000
: TIM10_DIER_CC1IE ( -- x addr ) 1 bit TIM10_DIER ; \ TIM10_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM10_DIER_UIE ( -- x addr ) 0 bit TIM10_DIER ; \ TIM10_DIER_UIE, Update interrupt enable

\ TIM10_SR (read-write) Reset:0x0000
: TIM10_SR_CC1OF ( -- x addr ) 9 bit TIM10_SR ; \ TIM10_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM10_SR_CC1IF ( -- x addr ) 1 bit TIM10_SR ; \ TIM10_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM10_SR_UIF ( -- x addr ) 0 bit TIM10_SR ; \ TIM10_SR_UIF, Update interrupt flag

\ TIM10_EGR (write-only) Reset:0x0000
: TIM10_EGR_CC1G ( -- x addr ) 1 bit TIM10_EGR ; \ TIM10_EGR_CC1G, Capture/compare 1 generation
: TIM10_EGR_UG ( -- x addr ) 0 bit TIM10_EGR ; \ TIM10_EGR_UG, Update generation

\ TIM10_CCMR1_Output (read-write) Reset:0x00000000
: TIM10_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM10_CCMR1_Output ; \ TIM10_CCMR1_Output_OC1M, Output Compare 1 mode
: TIM10_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM10_CCMR1_Output ; \ TIM10_CCMR1_Output_OC1PE, Output Compare 1 preload enable
: TIM10_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM10_CCMR1_Output ; \ TIM10_CCMR1_Output_OC1FE, Output Compare 1 fast enable
: TIM10_CCMR1_Output_CC1S ( %bb -- x addr ) TIM10_CCMR1_Output ; \ TIM10_CCMR1_Output_CC1S, Capture/Compare 1 selection

\ TIM10_CCMR1_Input (read-write) Reset:0x00000000
: TIM10_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM10_CCMR1_Input ; \ TIM10_CCMR1_Input_IC1F, Input capture 1 filter
: TIM10_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM10_CCMR1_Input ; \ TIM10_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM10_CCMR1_Input_CC1S ( %bb -- x addr ) TIM10_CCMR1_Input ; \ TIM10_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM10_CCER (read-write) Reset:0x0000
: TIM10_CCER_CC1NP ( -- x addr ) 3 bit TIM10_CCER ; \ TIM10_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM10_CCER_CC1P ( -- x addr ) 1 bit TIM10_CCER ; \ TIM10_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM10_CCER_CC1E ( -- x addr ) 0 bit TIM10_CCER ; \ TIM10_CCER_CC1E, Capture/Compare 1 output enable

\ TIM10_CNT (read-write) Reset:0x00000000
: TIM10_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM10_CNT ; \ TIM10_CNT_CNT, counter value

\ TIM10_PSC (read-write) Reset:0x0000
: TIM10_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM10_PSC ; \ TIM10_PSC_PSC, Prescaler value

\ TIM10_ARR (read-write) Reset:0x00000000
: TIM10_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM10_ARR ; \ TIM10_ARR_ARR, Auto-reload value

\ TIM10_CCR1 (read-write) Reset:0x00000000
: TIM10_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM10_CCR1 ; \ TIM10_CCR1_CCR1, Capture/Compare 1 value

\ TIM10_SMCR (read-write) Reset:0x00000000
: TIM10_SMCR_SMS3 ( -- x addr ) 16 bit TIM10_SMCR ; \ TIM10_SMCR_SMS3, Slave mode selection
: TIM10_SMCR_ETP ( -- x addr ) 15 bit TIM10_SMCR ; \ TIM10_SMCR_ETP, External trigger polarity
: TIM10_SMCR_ECE ( -- x addr ) 14 bit TIM10_SMCR ; \ TIM10_SMCR_ECE, External clock enable
: TIM10_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM10_SMCR ; \ TIM10_SMCR_ETPS, External trigger prescaler
: TIM10_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM10_SMCR ; \ TIM10_SMCR_ETF, External trigger filter
: TIM10_SMCR_MSM ( -- x addr ) 7 bit TIM10_SMCR ; \ TIM10_SMCR_MSM, Master/slave mode
: TIM10_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM10_SMCR ; \ TIM10_SMCR_TS, Trigger selection
: TIM10_SMCR_SMS ( %bbb -- x addr ) TIM10_SMCR ; \ TIM10_SMCR_SMS, Slave mode selection

\ TIM10_OR (read-write) Reset:0x00000000
: TIM10_OR_TI1_RMP ( %bb -- x addr ) TIM10_OR ; \ TIM10_OR_TI1_RMP, TIM11 Input 1 remapping capability

\ TIM11_CR1 (read-write) Reset:0x0000
: TIM11_CR1_CKD ( %bb -- x addr ) 8 lshift TIM11_CR1 ; \ TIM11_CR1_CKD, Clock division
: TIM11_CR1_ARPE ( -- x addr ) 7 bit TIM11_CR1 ; \ TIM11_CR1_ARPE, Auto-reload preload enable
: TIM11_CR1_URS ( -- x addr ) 2 bit TIM11_CR1 ; \ TIM11_CR1_URS, Update request source
: TIM11_CR1_UDIS ( -- x addr ) 1 bit TIM11_CR1 ; \ TIM11_CR1_UDIS, Update disable
: TIM11_CR1_CEN ( -- x addr ) 0 bit TIM11_CR1 ; \ TIM11_CR1_CEN, Counter enable

\ TIM11_DIER (read-write) Reset:0x0000
: TIM11_DIER_CC1IE ( -- x addr ) 1 bit TIM11_DIER ; \ TIM11_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM11_DIER_UIE ( -- x addr ) 0 bit TIM11_DIER ; \ TIM11_DIER_UIE, Update interrupt enable

\ TIM11_SR (read-write) Reset:0x0000
: TIM11_SR_CC1OF ( -- x addr ) 9 bit TIM11_SR ; \ TIM11_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM11_SR_CC1IF ( -- x addr ) 1 bit TIM11_SR ; \ TIM11_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM11_SR_UIF ( -- x addr ) 0 bit TIM11_SR ; \ TIM11_SR_UIF, Update interrupt flag

\ TIM11_EGR (write-only) Reset:0x0000
: TIM11_EGR_CC1G ( -- x addr ) 1 bit TIM11_EGR ; \ TIM11_EGR_CC1G, Capture/compare 1 generation
: TIM11_EGR_UG ( -- x addr ) 0 bit TIM11_EGR ; \ TIM11_EGR_UG, Update generation

\ TIM11_CCMR1_Output (read-write) Reset:0x00000000
: TIM11_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM11_CCMR1_Output ; \ TIM11_CCMR1_Output_OC1M, Output Compare 1 mode
: TIM11_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM11_CCMR1_Output ; \ TIM11_CCMR1_Output_OC1PE, Output Compare 1 preload enable
: TIM11_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM11_CCMR1_Output ; \ TIM11_CCMR1_Output_OC1FE, Output Compare 1 fast enable
: TIM11_CCMR1_Output_CC1S ( %bb -- x addr ) TIM11_CCMR1_Output ; \ TIM11_CCMR1_Output_CC1S, Capture/Compare 1 selection

\ TIM11_CCMR1_Input (read-write) Reset:0x00000000
: TIM11_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM11_CCMR1_Input ; \ TIM11_CCMR1_Input_IC1F, Input capture 1 filter
: TIM11_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM11_CCMR1_Input ; \ TIM11_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM11_CCMR1_Input_CC1S ( %bb -- x addr ) TIM11_CCMR1_Input ; \ TIM11_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM11_CCER (read-write) Reset:0x0000
: TIM11_CCER_CC1NP ( -- x addr ) 3 bit TIM11_CCER ; \ TIM11_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM11_CCER_CC1P ( -- x addr ) 1 bit TIM11_CCER ; \ TIM11_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM11_CCER_CC1E ( -- x addr ) 0 bit TIM11_CCER ; \ TIM11_CCER_CC1E, Capture/Compare 1 output enable

\ TIM11_CNT (read-write) Reset:0x00000000
: TIM11_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM11_CNT ; \ TIM11_CNT_CNT, counter value

\ TIM11_PSC (read-write) Reset:0x0000
: TIM11_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM11_PSC ; \ TIM11_PSC_PSC, Prescaler value

\ TIM11_ARR (read-write) Reset:0x00000000
: TIM11_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM11_ARR ; \ TIM11_ARR_ARR, Auto-reload value

\ TIM11_CCR1 (read-write) Reset:0x00000000
: TIM11_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM11_CCR1 ; \ TIM11_CCR1_CCR1, Capture/Compare 1 value

\ TIM11_SMCR (read-write) Reset:0x00000000
: TIM11_SMCR_SMS3 ( -- x addr ) 16 bit TIM11_SMCR ; \ TIM11_SMCR_SMS3, Slave mode selection
: TIM11_SMCR_ETP ( -- x addr ) 15 bit TIM11_SMCR ; \ TIM11_SMCR_ETP, External trigger polarity
: TIM11_SMCR_ECE ( -- x addr ) 14 bit TIM11_SMCR ; \ TIM11_SMCR_ECE, External clock enable
: TIM11_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM11_SMCR ; \ TIM11_SMCR_ETPS, External trigger prescaler
: TIM11_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM11_SMCR ; \ TIM11_SMCR_ETF, External trigger filter
: TIM11_SMCR_MSM ( -- x addr ) 7 bit TIM11_SMCR ; \ TIM11_SMCR_MSM, Master/slave mode
: TIM11_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM11_SMCR ; \ TIM11_SMCR_TS, Trigger selection
: TIM11_SMCR_SMS ( %bbb -- x addr ) TIM11_SMCR ; \ TIM11_SMCR_SMS, Slave mode selection

\ TIM11_OR (read-write) Reset:0x00000000
: TIM11_OR_TI1_RMP ( %bb -- x addr ) TIM11_OR ; \ TIM11_OR_TI1_RMP, TIM11 Input 1 remapping capability

\ TIM13_CR1 (read-write) Reset:0x0000
: TIM13_CR1_CKD ( %bb -- x addr ) 8 lshift TIM13_CR1 ; \ TIM13_CR1_CKD, Clock division
: TIM13_CR1_ARPE ( -- x addr ) 7 bit TIM13_CR1 ; \ TIM13_CR1_ARPE, Auto-reload preload enable
: TIM13_CR1_URS ( -- x addr ) 2 bit TIM13_CR1 ; \ TIM13_CR1_URS, Update request source
: TIM13_CR1_UDIS ( -- x addr ) 1 bit TIM13_CR1 ; \ TIM13_CR1_UDIS, Update disable
: TIM13_CR1_CEN ( -- x addr ) 0 bit TIM13_CR1 ; \ TIM13_CR1_CEN, Counter enable

\ TIM13_DIER (read-write) Reset:0x0000
: TIM13_DIER_CC1IE ( -- x addr ) 1 bit TIM13_DIER ; \ TIM13_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM13_DIER_UIE ( -- x addr ) 0 bit TIM13_DIER ; \ TIM13_DIER_UIE, Update interrupt enable

\ TIM13_SR (read-write) Reset:0x0000
: TIM13_SR_CC1OF ( -- x addr ) 9 bit TIM13_SR ; \ TIM13_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM13_SR_CC1IF ( -- x addr ) 1 bit TIM13_SR ; \ TIM13_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM13_SR_UIF ( -- x addr ) 0 bit TIM13_SR ; \ TIM13_SR_UIF, Update interrupt flag

\ TIM13_EGR (write-only) Reset:0x0000
: TIM13_EGR_CC1G ( -- x addr ) 1 bit TIM13_EGR ; \ TIM13_EGR_CC1G, Capture/compare 1 generation
: TIM13_EGR_UG ( -- x addr ) 0 bit TIM13_EGR ; \ TIM13_EGR_UG, Update generation

\ TIM13_CCMR1_Output (read-write) Reset:0x00000000
: TIM13_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM13_CCMR1_Output ; \ TIM13_CCMR1_Output_OC1M, Output Compare 1 mode
: TIM13_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM13_CCMR1_Output ; \ TIM13_CCMR1_Output_OC1PE, Output Compare 1 preload enable
: TIM13_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM13_CCMR1_Output ; \ TIM13_CCMR1_Output_OC1FE, Output Compare 1 fast enable
: TIM13_CCMR1_Output_CC1S ( %bb -- x addr ) TIM13_CCMR1_Output ; \ TIM13_CCMR1_Output_CC1S, Capture/Compare 1 selection

\ TIM13_CCMR1_Input (read-write) Reset:0x00000000
: TIM13_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM13_CCMR1_Input ; \ TIM13_CCMR1_Input_IC1F, Input capture 1 filter
: TIM13_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM13_CCMR1_Input ; \ TIM13_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM13_CCMR1_Input_CC1S ( %bb -- x addr ) TIM13_CCMR1_Input ; \ TIM13_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM13_CCER (read-write) Reset:0x0000
: TIM13_CCER_CC1NP ( -- x addr ) 3 bit TIM13_CCER ; \ TIM13_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM13_CCER_CC1P ( -- x addr ) 1 bit TIM13_CCER ; \ TIM13_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM13_CCER_CC1E ( -- x addr ) 0 bit TIM13_CCER ; \ TIM13_CCER_CC1E, Capture/Compare 1 output enable

\ TIM13_CNT (read-write) Reset:0x00000000
: TIM13_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM13_CNT ; \ TIM13_CNT_CNT, counter value

\ TIM13_PSC (read-write) Reset:0x0000
: TIM13_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM13_PSC ; \ TIM13_PSC_PSC, Prescaler value

\ TIM13_ARR (read-write) Reset:0x00000000
: TIM13_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM13_ARR ; \ TIM13_ARR_ARR, Auto-reload value

\ TIM13_CCR1 (read-write) Reset:0x00000000
: TIM13_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM13_CCR1 ; \ TIM13_CCR1_CCR1, Capture/Compare 1 value

\ TIM13_SMCR (read-write) Reset:0x00000000
: TIM13_SMCR_SMS3 ( -- x addr ) 16 bit TIM13_SMCR ; \ TIM13_SMCR_SMS3, Slave mode selection
: TIM13_SMCR_ETP ( -- x addr ) 15 bit TIM13_SMCR ; \ TIM13_SMCR_ETP, External trigger polarity
: TIM13_SMCR_ECE ( -- x addr ) 14 bit TIM13_SMCR ; \ TIM13_SMCR_ECE, External clock enable
: TIM13_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM13_SMCR ; \ TIM13_SMCR_ETPS, External trigger prescaler
: TIM13_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM13_SMCR ; \ TIM13_SMCR_ETF, External trigger filter
: TIM13_SMCR_MSM ( -- x addr ) 7 bit TIM13_SMCR ; \ TIM13_SMCR_MSM, Master/slave mode
: TIM13_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM13_SMCR ; \ TIM13_SMCR_TS, Trigger selection
: TIM13_SMCR_SMS ( %bbb -- x addr ) TIM13_SMCR ; \ TIM13_SMCR_SMS, Slave mode selection

\ TIM13_OR (read-write) Reset:0x00000000
: TIM13_OR_TI1_RMP ( %bb -- x addr ) TIM13_OR ; \ TIM13_OR_TI1_RMP, TIM11 Input 1 remapping capability

\ TIM14_CR1 (read-write) Reset:0x0000
: TIM14_CR1_CKD ( %bb -- x addr ) 8 lshift TIM14_CR1 ; \ TIM14_CR1_CKD, Clock division
: TIM14_CR1_ARPE ( -- x addr ) 7 bit TIM14_CR1 ; \ TIM14_CR1_ARPE, Auto-reload preload enable
: TIM14_CR1_URS ( -- x addr ) 2 bit TIM14_CR1 ; \ TIM14_CR1_URS, Update request source
: TIM14_CR1_UDIS ( -- x addr ) 1 bit TIM14_CR1 ; \ TIM14_CR1_UDIS, Update disable
: TIM14_CR1_CEN ( -- x addr ) 0 bit TIM14_CR1 ; \ TIM14_CR1_CEN, Counter enable

\ TIM14_DIER (read-write) Reset:0x0000
: TIM14_DIER_CC1IE ( -- x addr ) 1 bit TIM14_DIER ; \ TIM14_DIER_CC1IE, Capture/Compare 1 interrupt enable
: TIM14_DIER_UIE ( -- x addr ) 0 bit TIM14_DIER ; \ TIM14_DIER_UIE, Update interrupt enable

\ TIM14_SR (read-write) Reset:0x0000
: TIM14_SR_CC1OF ( -- x addr ) 9 bit TIM14_SR ; \ TIM14_SR_CC1OF, Capture/Compare 1 overcapture flag
: TIM14_SR_CC1IF ( -- x addr ) 1 bit TIM14_SR ; \ TIM14_SR_CC1IF, Capture/compare 1 interrupt flag
: TIM14_SR_UIF ( -- x addr ) 0 bit TIM14_SR ; \ TIM14_SR_UIF, Update interrupt flag

\ TIM14_EGR (write-only) Reset:0x0000
: TIM14_EGR_CC1G ( -- x addr ) 1 bit TIM14_EGR ; \ TIM14_EGR_CC1G, Capture/compare 1 generation
: TIM14_EGR_UG ( -- x addr ) 0 bit TIM14_EGR ; \ TIM14_EGR_UG, Update generation

\ TIM14_CCMR1_Output (read-write) Reset:0x00000000
: TIM14_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM14_CCMR1_Output ; \ TIM14_CCMR1_Output_OC1M, Output Compare 1 mode
: TIM14_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM14_CCMR1_Output ; \ TIM14_CCMR1_Output_OC1PE, Output Compare 1 preload enable
: TIM14_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM14_CCMR1_Output ; \ TIM14_CCMR1_Output_OC1FE, Output Compare 1 fast enable
: TIM14_CCMR1_Output_CC1S ( %bb -- x addr ) TIM14_CCMR1_Output ; \ TIM14_CCMR1_Output_CC1S, Capture/Compare 1 selection

\ TIM14_CCMR1_Input (read-write) Reset:0x00000000
: TIM14_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM14_CCMR1_Input ; \ TIM14_CCMR1_Input_IC1F, Input capture 1 filter
: TIM14_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM14_CCMR1_Input ; \ TIM14_CCMR1_Input_ICPCS, Input capture 1 prescaler
: TIM14_CCMR1_Input_CC1S ( %bb -- x addr ) TIM14_CCMR1_Input ; \ TIM14_CCMR1_Input_CC1S, Capture/Compare 1 selection

\ TIM14_CCER (read-write) Reset:0x0000
: TIM14_CCER_CC1NP ( -- x addr ) 3 bit TIM14_CCER ; \ TIM14_CCER_CC1NP, Capture/Compare 1 output Polarity
: TIM14_CCER_CC1P ( -- x addr ) 1 bit TIM14_CCER ; \ TIM14_CCER_CC1P, Capture/Compare 1 output Polarity
: TIM14_CCER_CC1E ( -- x addr ) 0 bit TIM14_CCER ; \ TIM14_CCER_CC1E, Capture/Compare 1 output enable

\ TIM14_CNT (read-write) Reset:0x00000000
: TIM14_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM14_CNT ; \ TIM14_CNT_CNT, counter value

\ TIM14_PSC (read-write) Reset:0x0000
: TIM14_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM14_PSC ; \ TIM14_PSC_PSC, Prescaler value

\ TIM14_ARR (read-write) Reset:0x00000000
: TIM14_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM14_ARR ; \ TIM14_ARR_ARR, Auto-reload value

\ TIM14_CCR1 (read-write) Reset:0x00000000
: TIM14_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM14_CCR1 ; \ TIM14_CCR1_CCR1, Capture/Compare 1 value

\ TIM14_SMCR (read-write) Reset:0x00000000
: TIM14_SMCR_SMS3 ( -- x addr ) 16 bit TIM14_SMCR ; \ TIM14_SMCR_SMS3, Slave mode selection
: TIM14_SMCR_ETP ( -- x addr ) 15 bit TIM14_SMCR ; \ TIM14_SMCR_ETP, External trigger polarity
: TIM14_SMCR_ECE ( -- x addr ) 14 bit TIM14_SMCR ; \ TIM14_SMCR_ECE, External clock enable
: TIM14_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM14_SMCR ; \ TIM14_SMCR_ETPS, External trigger prescaler
: TIM14_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM14_SMCR ; \ TIM14_SMCR_ETF, External trigger filter
: TIM14_SMCR_MSM ( -- x addr ) 7 bit TIM14_SMCR ; \ TIM14_SMCR_MSM, Master/slave mode
: TIM14_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM14_SMCR ; \ TIM14_SMCR_TS, Trigger selection
: TIM14_SMCR_SMS ( %bbb -- x addr ) TIM14_SMCR ; \ TIM14_SMCR_SMS, Slave mode selection

\ TIM14_OR (read-write) Reset:0x00000000
: TIM14_OR_TI1_RMP ( %bb -- x addr ) TIM14_OR ; \ TIM14_OR_TI1_RMP, TIM11 Input 1 remapping capability

\ TIM6_CR1 (read-write) Reset:0x0000
: TIM6_CR1_ARPE ( -- x addr ) 7 bit TIM6_CR1 ; \ TIM6_CR1_ARPE, Auto-reload preload enable
: TIM6_CR1_OPM ( -- x addr ) 3 bit TIM6_CR1 ; \ TIM6_CR1_OPM, One-pulse mode
: TIM6_CR1_URS ( -- x addr ) 2 bit TIM6_CR1 ; \ TIM6_CR1_URS, Update request source
: TIM6_CR1_UDIS ( -- x addr ) 1 bit TIM6_CR1 ; \ TIM6_CR1_UDIS, Update disable
: TIM6_CR1_CEN ( -- x addr ) 0 bit TIM6_CR1 ; \ TIM6_CR1_CEN, Counter enable

\ TIM6_CR2 (read-write) Reset:0x0000
: TIM6_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM6_CR2 ; \ TIM6_CR2_MMS, Master mode selection

\ TIM6_DIER (read-write) Reset:0x0000
: TIM6_DIER_UDE ( -- x addr ) 8 bit TIM6_DIER ; \ TIM6_DIER_UDE, Update DMA request enable
: TIM6_DIER_UIE ( -- x addr ) 0 bit TIM6_DIER ; \ TIM6_DIER_UIE, Update interrupt enable

\ TIM6_SR (read-write) Reset:0x0000
: TIM6_SR_UIF ( -- x addr ) 0 bit TIM6_SR ; \ TIM6_SR_UIF, Update interrupt flag

\ TIM6_EGR (write-only) Reset:0x0000
: TIM6_EGR_UG ( -- x addr ) 0 bit TIM6_EGR ; \ TIM6_EGR_UG, Update generation

\ TIM6_CNT (read-write) Reset:0x00000000
: TIM6_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM6_CNT ; \ TIM6_CNT_CNT, Low counter value

\ TIM6_PSC (read-write) Reset:0x0000
: TIM6_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM6_PSC ; \ TIM6_PSC_PSC, Prescaler value

\ TIM6_ARR (read-write) Reset:0x00000000
: TIM6_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM6_ARR ; \ TIM6_ARR_ARR, Low Auto-reload value

\ TIM7_CR1 (read-write) Reset:0x0000
: TIM7_CR1_ARPE ( -- x addr ) 7 bit TIM7_CR1 ; \ TIM7_CR1_ARPE, Auto-reload preload enable
: TIM7_CR1_OPM ( -- x addr ) 3 bit TIM7_CR1 ; \ TIM7_CR1_OPM, One-pulse mode
: TIM7_CR1_URS ( -- x addr ) 2 bit TIM7_CR1 ; \ TIM7_CR1_URS, Update request source
: TIM7_CR1_UDIS ( -- x addr ) 1 bit TIM7_CR1 ; \ TIM7_CR1_UDIS, Update disable
: TIM7_CR1_CEN ( -- x addr ) 0 bit TIM7_CR1 ; \ TIM7_CR1_CEN, Counter enable

\ TIM7_CR2 (read-write) Reset:0x0000
: TIM7_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM7_CR2 ; \ TIM7_CR2_MMS, Master mode selection

\ TIM7_DIER (read-write) Reset:0x0000
: TIM7_DIER_UDE ( -- x addr ) 8 bit TIM7_DIER ; \ TIM7_DIER_UDE, Update DMA request enable
: TIM7_DIER_UIE ( -- x addr ) 0 bit TIM7_DIER ; \ TIM7_DIER_UIE, Update interrupt enable

\ TIM7_SR (read-write) Reset:0x0000
: TIM7_SR_UIF ( -- x addr ) 0 bit TIM7_SR ; \ TIM7_SR_UIF, Update interrupt flag

\ TIM7_EGR (write-only) Reset:0x0000
: TIM7_EGR_UG ( -- x addr ) 0 bit TIM7_EGR ; \ TIM7_EGR_UG, Update generation

\ TIM7_CNT (read-write) Reset:0x00000000
: TIM7_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM7_CNT ; \ TIM7_CNT_CNT, Low counter value

\ TIM7_PSC (read-write) Reset:0x0000
: TIM7_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM7_PSC ; \ TIM7_PSC_PSC, Prescaler value

\ TIM7_ARR (read-write) Reset:0x00000000
: TIM7_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM7_ARR ; \ TIM7_ARR_ARR, Low Auto-reload value

\ Ethernet_MAC_MACCR (read-write) Reset:0x0008000
: Ethernet_MAC_MACCR_RE ( -- x addr ) 2 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_RE, RE
: Ethernet_MAC_MACCR_TE ( -- x addr ) 3 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_TE, TE
: Ethernet_MAC_MACCR_DC ( -- x addr ) 4 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_DC, DC
: Ethernet_MAC_MACCR_BL ( %bb -- x addr ) 5 lshift Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_BL, BL
: Ethernet_MAC_MACCR_APCS ( -- x addr ) 7 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_APCS, APCS
: Ethernet_MAC_MACCR_RD ( -- x addr ) 9 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_RD, RD
: Ethernet_MAC_MACCR_IPCO ( -- x addr ) 10 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_IPCO, IPCO
: Ethernet_MAC_MACCR_DM ( -- x addr ) 11 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_DM, DM
: Ethernet_MAC_MACCR_LM ( -- x addr ) 12 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_LM, LM
: Ethernet_MAC_MACCR_ROD ( -- x addr ) 13 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_ROD, ROD
: Ethernet_MAC_MACCR_FES ( -- x addr ) 14 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_FES, FES
: Ethernet_MAC_MACCR_CSD ( -- x addr ) 16 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_CSD, CSD
: Ethernet_MAC_MACCR_IFG ( %bbb -- x addr ) 17 lshift Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_IFG, IFG
: Ethernet_MAC_MACCR_JD ( -- x addr ) 22 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_JD, JD
: Ethernet_MAC_MACCR_WD ( -- x addr ) 23 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_WD, WD
: Ethernet_MAC_MACCR_CSTF ( -- x addr ) 25 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_CSTF, CSTF

\ Ethernet_MAC_MACFFR (read-write) Reset:0x00000000
: Ethernet_MAC_MACFFR_PM ( -- x addr ) 0 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_PM, PM
: Ethernet_MAC_MACFFR_HU ( -- x addr ) 1 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_HU, HU
: Ethernet_MAC_MACFFR_HM ( -- x addr ) 2 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_HM, HM
: Ethernet_MAC_MACFFR_DAIF ( -- x addr ) 3 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_DAIF, DAIF
: Ethernet_MAC_MACFFR_RAM ( -- x addr ) 4 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_RAM, RAM
: Ethernet_MAC_MACFFR_BFD ( -- x addr ) 5 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_BFD, BFD
: Ethernet_MAC_MACFFR_PCF ( -- x addr ) 6 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_PCF, PCF
: Ethernet_MAC_MACFFR_SAIF ( -- x addr ) 7 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_SAIF, SAIF
: Ethernet_MAC_MACFFR_SAF ( -- x addr ) 8 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_SAF, SAF
: Ethernet_MAC_MACFFR_HPF ( -- x addr ) 9 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_HPF, HPF
: Ethernet_MAC_MACFFR_RA ( -- x addr ) 31 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_RA, RA

\ Ethernet_MAC_MACHTHR (read-write) Reset:0x00000000
: Ethernet_MAC_MACHTHR_HTH ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACHTHR ; \ Ethernet_MAC_MACHTHR_HTH, HTH

\ Ethernet_MAC_MACHTLR (read-write) Reset:0x00000000
: Ethernet_MAC_MACHTLR_HTL ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACHTLR ; \ Ethernet_MAC_MACHTLR_HTL, HTL

\ Ethernet_MAC_MACMIIAR (read-write) Reset:0x00000000
: Ethernet_MAC_MACMIIAR_MB ( -- x addr ) 0 bit Ethernet_MAC_MACMIIAR ; \ Ethernet_MAC_MACMIIAR_MB, MB
: Ethernet_MAC_MACMIIAR_MW ( -- x addr ) 1 bit Ethernet_MAC_MACMIIAR ; \ Ethernet_MAC_MACMIIAR_MW, MW
: Ethernet_MAC_MACMIIAR_CR ( %bbb -- x addr ) 2 lshift Ethernet_MAC_MACMIIAR ; \ Ethernet_MAC_MACMIIAR_CR, CR
: Ethernet_MAC_MACMIIAR_MR ( %bbbbb -- x addr ) 6 lshift Ethernet_MAC_MACMIIAR ; \ Ethernet_MAC_MACMIIAR_MR, MR
: Ethernet_MAC_MACMIIAR_PA ( %bbbbb -- x addr ) 11 lshift Ethernet_MAC_MACMIIAR ; \ Ethernet_MAC_MACMIIAR_PA, PA

\ Ethernet_MAC_MACMIIDR (read-write) Reset:0x00000000
: Ethernet_MAC_MACMIIDR_TD ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACMIIDR ; \ Ethernet_MAC_MACMIIDR_TD, TD

\ Ethernet_MAC_MACFCR (read-write) Reset:0x00000000
: Ethernet_MAC_MACFCR_FCB ( -- x addr ) 0 bit Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_FCB, FCB
: Ethernet_MAC_MACFCR_TFCE ( -- x addr ) 1 bit Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_TFCE, TFCE
: Ethernet_MAC_MACFCR_RFCE ( -- x addr ) 2 bit Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_RFCE, RFCE
: Ethernet_MAC_MACFCR_UPFD ( -- x addr ) 3 bit Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_UPFD, UPFD
: Ethernet_MAC_MACFCR_PLT ( %bb -- x addr ) 4 lshift Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_PLT, PLT
: Ethernet_MAC_MACFCR_ZQPD ( -- x addr ) 7 bit Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_ZQPD, ZQPD
: Ethernet_MAC_MACFCR_PT ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_PT, PT

\ Ethernet_MAC_MACVLANTR (read-write) Reset:0x00000000
: Ethernet_MAC_MACVLANTR_VLANTI ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACVLANTR ; \ Ethernet_MAC_MACVLANTR_VLANTI, VLANTI
: Ethernet_MAC_MACVLANTR_VLANTC ( -- x addr ) 16 bit Ethernet_MAC_MACVLANTR ; \ Ethernet_MAC_MACVLANTR_VLANTC, VLANTC

\ Ethernet_MAC_MACPMTCSR (read-write) Reset:0x00000000
: Ethernet_MAC_MACPMTCSR_PD ( -- x addr ) 0 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_PD, PD
: Ethernet_MAC_MACPMTCSR_MPE ( -- x addr ) 1 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_MPE, MPE
: Ethernet_MAC_MACPMTCSR_WFE ( -- x addr ) 2 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_WFE, WFE
: Ethernet_MAC_MACPMTCSR_MPR ( -- x addr ) 5 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_MPR, MPR
: Ethernet_MAC_MACPMTCSR_WFR ( -- x addr ) 6 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_WFR, WFR
: Ethernet_MAC_MACPMTCSR_GU ( -- x addr ) 9 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_GU, GU
: Ethernet_MAC_MACPMTCSR_WFFRPR ( -- x addr ) 31 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_WFFRPR, WFFRPR

\ Ethernet_MAC_MACDBGR (read-only) Reset:0x00000000
: Ethernet_MAC_MACDBGR_CR? ( --  1|0 ) 0 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_CR, CR
: Ethernet_MAC_MACDBGR_CSR? ( --  1|0 ) 1 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_CSR, CSR
: Ethernet_MAC_MACDBGR_ROR? ( --  1|0 ) 2 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_ROR, ROR
: Ethernet_MAC_MACDBGR_MCF? ( --  1|0 ) 3 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_MCF, MCF
: Ethernet_MAC_MACDBGR_MCP? ( --  1|0 ) 4 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_MCP, MCP
: Ethernet_MAC_MACDBGR_MCFHP? ( --  1|0 ) 5 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_MCFHP, MCFHP

\ Ethernet_MAC_MACSR (multiple-access)  Reset:0x00000000
: Ethernet_MAC_MACSR_PMTS ( -- x addr ) 3 bit Ethernet_MAC_MACSR ; \ Ethernet_MAC_MACSR_PMTS, PMTS
: Ethernet_MAC_MACSR_MMCS ( -- x addr ) 4 bit Ethernet_MAC_MACSR ; \ Ethernet_MAC_MACSR_MMCS, MMCS
: Ethernet_MAC_MACSR_MMCRS ( -- x addr ) 5 bit Ethernet_MAC_MACSR ; \ Ethernet_MAC_MACSR_MMCRS, MMCRS
: Ethernet_MAC_MACSR_MMCTS ( -- x addr ) 6 bit Ethernet_MAC_MACSR ; \ Ethernet_MAC_MACSR_MMCTS, MMCTS
: Ethernet_MAC_MACSR_TSTS ( -- x addr ) 9 bit Ethernet_MAC_MACSR ; \ Ethernet_MAC_MACSR_TSTS, TSTS

\ Ethernet_MAC_MACIMR (read-write) Reset:0x00000000
: Ethernet_MAC_MACIMR_PMTIM ( -- x addr ) 3 bit Ethernet_MAC_MACIMR ; \ Ethernet_MAC_MACIMR_PMTIM, PMTIM
: Ethernet_MAC_MACIMR_TSTIM ( -- x addr ) 9 bit Ethernet_MAC_MACIMR ; \ Ethernet_MAC_MACIMR_TSTIM, TSTIM

\ Ethernet_MAC_MACA0HR (multiple-access)  Reset:0x0010FFFF
: Ethernet_MAC_MACA0HR_MACA0H ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA0HR ; \ Ethernet_MAC_MACA0HR_MACA0H, MAC address0 high
: Ethernet_MAC_MACA0HR_MO ( -- x addr ) 31 bit Ethernet_MAC_MACA0HR ; \ Ethernet_MAC_MACA0HR_MO, Always 1

\ Ethernet_MAC_MACA0LR (read-write) Reset:0xFFFFFFFF
: Ethernet_MAC_MACA0LR_MACA0L ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA0LR ; \ Ethernet_MAC_MACA0LR_MACA0L, 0

\ Ethernet_MAC_MACA1HR (read-write) Reset:0x0000FFFF
: Ethernet_MAC_MACA1HR_MACA1H ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA1HR ; \ Ethernet_MAC_MACA1HR_MACA1H, MACA1H
: Ethernet_MAC_MACA1HR_MBC ( %bbbbbb -- x addr ) 24 lshift Ethernet_MAC_MACA1HR ; \ Ethernet_MAC_MACA1HR_MBC, MBC
: Ethernet_MAC_MACA1HR_SA ( -- x addr ) 30 bit Ethernet_MAC_MACA1HR ; \ Ethernet_MAC_MACA1HR_SA, SA
: Ethernet_MAC_MACA1HR_AE ( -- x addr ) 31 bit Ethernet_MAC_MACA1HR ; \ Ethernet_MAC_MACA1HR_AE, AE

\ Ethernet_MAC_MACA1LR (read-write) Reset:0xFFFFFFFF
: Ethernet_MAC_MACA1LR_MACA1LR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA1LR ; \ Ethernet_MAC_MACA1LR_MACA1LR, MACA1LR

\ Ethernet_MAC_MACA2HR (read-write) Reset:0x0000FFFF
: Ethernet_MAC_MACA2HR_MAC2AH ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA2HR ; \ Ethernet_MAC_MACA2HR_MAC2AH, MAC2AH
: Ethernet_MAC_MACA2HR_MBC ( %bbbbbb -- x addr ) 24 lshift Ethernet_MAC_MACA2HR ; \ Ethernet_MAC_MACA2HR_MBC, MBC
: Ethernet_MAC_MACA2HR_SA ( -- x addr ) 30 bit Ethernet_MAC_MACA2HR ; \ Ethernet_MAC_MACA2HR_SA, SA
: Ethernet_MAC_MACA2HR_AE ( -- x addr ) 31 bit Ethernet_MAC_MACA2HR ; \ Ethernet_MAC_MACA2HR_AE, AE

\ Ethernet_MAC_MACA2LR (read-write) Reset:0xFFFFFFFF
: Ethernet_MAC_MACA2LR_MACA2L x addr ) Ethernet_MAC_MACA2LR ; \ Ethernet_MAC_MACA2LR_MACA2L, MACA2L

\ Ethernet_MAC_MACA3HR (read-write) Reset:0x0000FFFF
: Ethernet_MAC_MACA3HR_MACA3H ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA3HR ; \ Ethernet_MAC_MACA3HR_MACA3H, MACA3H
: Ethernet_MAC_MACA3HR_MBC ( %bbbbbb -- x addr ) 24 lshift Ethernet_MAC_MACA3HR ; \ Ethernet_MAC_MACA3HR_MBC, MBC
: Ethernet_MAC_MACA3HR_SA ( -- x addr ) 30 bit Ethernet_MAC_MACA3HR ; \ Ethernet_MAC_MACA3HR_SA, SA
: Ethernet_MAC_MACA3HR_AE ( -- x addr ) 31 bit Ethernet_MAC_MACA3HR ; \ Ethernet_MAC_MACA3HR_AE, AE

\ Ethernet_MAC_MACA3LR (read-write) Reset:0xFFFFFFFF
: Ethernet_MAC_MACA3LR_MBCA3L ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA3LR ; \ Ethernet_MAC_MACA3LR_MBCA3L, MBCA3L

\ Ethernet_MAC_MACRWUFFER (read-write) Reset:0xFFFFFFFF

\ Ethernet_MMC_MMCCR (read-write) Reset:0x00000000
: Ethernet_MMC_MMCCR_CR ( -- x addr ) 0 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_CR, CR
: Ethernet_MMC_MMCCR_CSR ( -- x addr ) 1 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_CSR, CSR
: Ethernet_MMC_MMCCR_ROR ( -- x addr ) 2 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_ROR, ROR
: Ethernet_MMC_MMCCR_MCF ( -- x addr ) 3 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_MCF, MCF
: Ethernet_MMC_MMCCR_MCP ( -- x addr ) 4 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_MCP, MCP
: Ethernet_MMC_MMCCR_MCFHP ( -- x addr ) 5 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_MCFHP, MCFHP

\ Ethernet_MMC_MMCRIR (read-write) Reset:0x00000000
: Ethernet_MMC_MMCRIR_RFCES ( -- x addr ) 5 bit Ethernet_MMC_MMCRIR ; \ Ethernet_MMC_MMCRIR_RFCES, RFCES
: Ethernet_MMC_MMCRIR_RFAES ( -- x addr ) 6 bit Ethernet_MMC_MMCRIR ; \ Ethernet_MMC_MMCRIR_RFAES, RFAES
: Ethernet_MMC_MMCRIR_RGUFS ( -- x addr ) 17 bit Ethernet_MMC_MMCRIR ; \ Ethernet_MMC_MMCRIR_RGUFS, RGUFS

\ Ethernet_MMC_MMCTIR (read-only) Reset:0x00000000
: Ethernet_MMC_MMCTIR_TGFSCS? ( --  1|0 ) 14 bit Ethernet_MMC_MMCTIR bit@ ; \ Ethernet_MMC_MMCTIR_TGFSCS, TGFSCS
: Ethernet_MMC_MMCTIR_TGFMSCS? ( --  1|0 ) 15 bit Ethernet_MMC_MMCTIR bit@ ; \ Ethernet_MMC_MMCTIR_TGFMSCS, TGFMSCS
: Ethernet_MMC_MMCTIR_TGFS? ( --  1|0 ) 21 bit Ethernet_MMC_MMCTIR bit@ ; \ Ethernet_MMC_MMCTIR_TGFS, TGFS

\ Ethernet_MMC_MMCRIMR (read-write) Reset:0x00000000
: Ethernet_MMC_MMCRIMR_RFCEM ( -- x addr ) 5 bit Ethernet_MMC_MMCRIMR ; \ Ethernet_MMC_MMCRIMR_RFCEM, RFCEM
: Ethernet_MMC_MMCRIMR_RFAEM ( -- x addr ) 6 bit Ethernet_MMC_MMCRIMR ; \ Ethernet_MMC_MMCRIMR_RFAEM, RFAEM
: Ethernet_MMC_MMCRIMR_RGUFM ( -- x addr ) 17 bit Ethernet_MMC_MMCRIMR ; \ Ethernet_MMC_MMCRIMR_RGUFM, RGUFM

\ Ethernet_MMC_MMCTIMR (read-write) Reset:0x00000000
: Ethernet_MMC_MMCTIMR_TGFSCM ( -- x addr ) 14 bit Ethernet_MMC_MMCTIMR ; \ Ethernet_MMC_MMCTIMR_TGFSCM, TGFSCM
: Ethernet_MMC_MMCTIMR_TGFMSCM ( -- x addr ) 15 bit Ethernet_MMC_MMCTIMR ; \ Ethernet_MMC_MMCTIMR_TGFMSCM, TGFMSCM
: Ethernet_MMC_MMCTIMR_TGFM ( -- x addr ) 16 bit Ethernet_MMC_MMCTIMR ; \ Ethernet_MMC_MMCTIMR_TGFM, TGFM

\ Ethernet_MMC_MMCTGFSCCR (read-only) Reset:0x00000000
: Ethernet_MMC_MMCTGFSCCR_TGFSCC? ( --  x ) Ethernet_MMC_MMCTGFSCCR @ ; \ Ethernet_MMC_MMCTGFSCCR_TGFSCC, TGFSCC

\ Ethernet_MMC_MMCTGFMSCCR (read-only) Reset:0x00000000
: Ethernet_MMC_MMCTGFMSCCR_TGFMSCC? ( --  x ) Ethernet_MMC_MMCTGFMSCCR @ ; \ Ethernet_MMC_MMCTGFMSCCR_TGFMSCC, TGFMSCC

\ Ethernet_MMC_MMCTGFCR (read-only) Reset:0x00000000
: Ethernet_MMC_MMCTGFCR_TGFC? ( --  x ) Ethernet_MMC_MMCTGFCR @ ; \ Ethernet_MMC_MMCTGFCR_TGFC, HTL

\ Ethernet_MMC_MMCRFCECR (read-only) Reset:0x00000000
: Ethernet_MMC_MMCRFCECR_RFCFC? ( --  x ) Ethernet_MMC_MMCRFCECR @ ; \ Ethernet_MMC_MMCRFCECR_RFCFC, RFCFC

\ Ethernet_MMC_MMCRFAECR (read-only) Reset:0x00000000
: Ethernet_MMC_MMCRFAECR_RFAEC? ( --  x ) Ethernet_MMC_MMCRFAECR @ ; \ Ethernet_MMC_MMCRFAECR_RFAEC, RFAEC

\ Ethernet_MMC_MMCRGUFCR (read-only) Reset:0x00000000
: Ethernet_MMC_MMCRGUFCR_RGUFC? ( --  x ) Ethernet_MMC_MMCRGUFCR @ ; \ Ethernet_MMC_MMCRGUFCR_RGUFC, RGUFC

\ Ethernet_PTP_PTPTSCR (read-write) Reset:0x00002000
: Ethernet_PTP_PTPTSCR_TSE ( -- x addr ) 0 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSE, TSE
: Ethernet_PTP_PTPTSCR_TSFCU ( -- x addr ) 1 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSFCU, TSFCU
: Ethernet_PTP_PTPTSCR_TSPTPPSV2E ( -- x addr ) 10 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSPTPPSV2E, TSPTPPSV2E
: Ethernet_PTP_PTPTSCR_TSSPTPOEFE ( -- x addr ) 11 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSPTPOEFE, TSSPTPOEFE
: Ethernet_PTP_PTPTSCR_TSSIPV6FE ( -- x addr ) 12 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSIPV6FE, TSSIPV6FE
: Ethernet_PTP_PTPTSCR_TSSIPV4FE ( -- x addr ) 13 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSIPV4FE, TSSIPV4FE
: Ethernet_PTP_PTPTSCR_TSSEME ( -- x addr ) 14 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSEME, TSSEME
: Ethernet_PTP_PTPTSCR_TSSMRME ( -- x addr ) 15 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSMRME, TSSMRME
: Ethernet_PTP_PTPTSCR_TSCNT ( %bb -- x addr ) 16 lshift Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSCNT, TSCNT
: Ethernet_PTP_PTPTSCR_TSPFFMAE ( -- x addr ) 18 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSPFFMAE, TSPFFMAE
: Ethernet_PTP_PTPTSCR_TSSTI ( -- x addr ) 2 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSTI, TSSTI
: Ethernet_PTP_PTPTSCR_TSSTU ( -- x addr ) 3 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSTU, TSSTU
: Ethernet_PTP_PTPTSCR_TSITE ( -- x addr ) 4 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSITE, TSITE
: Ethernet_PTP_PTPTSCR_TTSARU ( -- x addr ) 5 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TTSARU, TTSARU
: Ethernet_PTP_PTPTSCR_TSSARFE ( -- x addr ) 8 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSARFE, TSSARFE
: Ethernet_PTP_PTPTSCR_TSSSR ( -- x addr ) 9 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSSR, TSSSR

\ Ethernet_PTP_PTPSSIR (read-write) Reset:0x00000000
: Ethernet_PTP_PTPSSIR_STSSI ( %bbbbbbbb -- x addr ) Ethernet_PTP_PTPSSIR ; \ Ethernet_PTP_PTPSSIR_STSSI, STSSI

\ Ethernet_PTP_PTPTSHR (read-only) Reset:0x00000000
: Ethernet_PTP_PTPTSHR_STS? ( --  x ) Ethernet_PTP_PTPTSHR @ ; \ Ethernet_PTP_PTPTSHR_STS, STS

\ Ethernet_PTP_PTPTSLR (read-only) Reset:0x00000000
: Ethernet_PTP_PTPTSLR_STSS? ( --  x ) Ethernet_PTP_PTPTSLR @ ; \ Ethernet_PTP_PTPTSLR_STSS, STSS
: Ethernet_PTP_PTPTSLR_STPNS? ( --  1|0 ) 31 bit Ethernet_PTP_PTPTSLR bit@ ; \ Ethernet_PTP_PTPTSLR_STPNS, STPNS

\ Ethernet_PTP_PTPTSHUR (read-write) Reset:0x00000000
: Ethernet_PTP_PTPTSHUR_TSUS ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_PTP_PTPTSHUR ; \ Ethernet_PTP_PTPTSHUR_TSUS, TSUS

\ Ethernet_PTP_PTPTSLUR (read-write) Reset:0x00000000
: Ethernet_PTP_PTPTSLUR_TSUSS x addr ) Ethernet_PTP_PTPTSLUR ; \ Ethernet_PTP_PTPTSLUR_TSUSS, TSUSS
: Ethernet_PTP_PTPTSLUR_TSUPNS ( -- x addr ) 31 bit Ethernet_PTP_PTPTSLUR ; \ Ethernet_PTP_PTPTSLUR_TSUPNS, TSUPNS

\ Ethernet_PTP_PTPTSAR (read-write) Reset:0x00000000
: Ethernet_PTP_PTPTSAR_TSA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_PTP_PTPTSAR ; \ Ethernet_PTP_PTPTSAR_TSA, TSA

\ Ethernet_PTP_PTPTTHR (read-write) Reset:0x00000000
: Ethernet_PTP_PTPTTHR_TTSH ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_PTP_PTPTTHR ; \ Ethernet_PTP_PTPTTHR_TTSH, 0

\ Ethernet_PTP_PTPTTLR (read-write) Reset:0x00000000
: Ethernet_PTP_PTPTTLR_TTSL ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_PTP_PTPTTLR ; \ Ethernet_PTP_PTPTTLR_TTSL, TTSL

\ Ethernet_PTP_PTPTSSR (read-only) Reset:0x00000000
: Ethernet_PTP_PTPTSSR_TSSO? ( --  1|0 ) 0 bit Ethernet_PTP_PTPTSSR bit@ ; \ Ethernet_PTP_PTPTSSR_TSSO, TSSO
: Ethernet_PTP_PTPTSSR_TSTTR? ( --  1|0 ) 1 bit Ethernet_PTP_PTPTSSR bit@ ; \ Ethernet_PTP_PTPTSSR_TSTTR, TSTTR

\ Ethernet_PTP_PTPPPSCR (read-only) Reset:0x00000000
: Ethernet_PTP_PTPPPSCR_TSSO? ( --  1|0 ) 0 bit Ethernet_PTP_PTPPPSCR bit@ ; \ Ethernet_PTP_PTPPPSCR_TSSO, TSSO
: Ethernet_PTP_PTPPPSCR_TSTTR? ( --  1|0 ) 1 bit Ethernet_PTP_PTPPPSCR bit@ ; \ Ethernet_PTP_PTPPPSCR_TSTTR, TSTTR

\ Ethernet_DMA_DMABMR (read-write) Reset:0x00002101
: Ethernet_DMA_DMABMR_SR ( -- x addr ) 0 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_SR, SR
: Ethernet_DMA_DMABMR_DA ( -- x addr ) 1 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_DA, DA
: Ethernet_DMA_DMABMR_DSL ( %bbbbb -- x addr ) 2 lshift Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_DSL, DSL
: Ethernet_DMA_DMABMR_EDFE ( -- x addr ) 7 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_EDFE, EDFE
: Ethernet_DMA_DMABMR_PBL ( %bbbbbb -- x addr ) 8 lshift Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_PBL, PBL
: Ethernet_DMA_DMABMR_RTPR ( %bb -- x addr ) 14 lshift Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_RTPR, RTPR
: Ethernet_DMA_DMABMR_FB ( -- x addr ) 16 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_FB, FB
: Ethernet_DMA_DMABMR_RDP ( %bbbbbb -- x addr ) 17 lshift Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_RDP, RDP
: Ethernet_DMA_DMABMR_USP ( -- x addr ) 23 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_USP, USP
: Ethernet_DMA_DMABMR_FPM ( -- x addr ) 24 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_FPM, FPM
: Ethernet_DMA_DMABMR_AAB ( -- x addr ) 25 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_AAB, AAB
: Ethernet_DMA_DMABMR_MB ( -- x addr ) 26 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_MB, MB

\ Ethernet_DMA_DMATPDR (read-write) Reset:0x00000000
: Ethernet_DMA_DMATPDR_TPD ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_DMA_DMATPDR ; \ Ethernet_DMA_DMATPDR_TPD, TPD

\ Ethernet_DMA_DMARPDR (read-write) Reset:0x00000000
: Ethernet_DMA_DMARPDR_RPD ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_DMA_DMARPDR ; \ Ethernet_DMA_DMARPDR_RPD, RPD

\ Ethernet_DMA_DMARDLAR (read-write) Reset:0x00000000
: Ethernet_DMA_DMARDLAR_SRL ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_DMA_DMARDLAR ; \ Ethernet_DMA_DMARDLAR_SRL, SRL

\ Ethernet_DMA_DMATDLAR (read-write) Reset:0x00000000
: Ethernet_DMA_DMATDLAR_STL ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_DMA_DMATDLAR ; \ Ethernet_DMA_DMATDLAR_STL, STL

\ Ethernet_DMA_DMASR (multiple-access)  Reset:0x00000000
: Ethernet_DMA_DMASR_TS ( -- x addr ) 0 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TS, TS
: Ethernet_DMA_DMASR_TPSS ( -- x addr ) 1 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TPSS, TPSS
: Ethernet_DMA_DMASR_TBUS ( -- x addr ) 2 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TBUS, TBUS
: Ethernet_DMA_DMASR_TJTS ( -- x addr ) 3 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TJTS, TJTS
: Ethernet_DMA_DMASR_ROS ( -- x addr ) 4 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_ROS, ROS
: Ethernet_DMA_DMASR_TUS ( -- x addr ) 5 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TUS, TUS
: Ethernet_DMA_DMASR_RS ( -- x addr ) 6 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_RS, RS
: Ethernet_DMA_DMASR_RBUS ( -- x addr ) 7 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_RBUS, RBUS
: Ethernet_DMA_DMASR_RPSS ( -- x addr ) 8 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_RPSS, RPSS
: Ethernet_DMA_DMASR_PWTS ( -- x addr ) 9 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_PWTS, PWTS
: Ethernet_DMA_DMASR_ETS ( -- x addr ) 10 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_ETS, ETS
: Ethernet_DMA_DMASR_FBES ( -- x addr ) 13 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_FBES, FBES
: Ethernet_DMA_DMASR_ERS ( -- x addr ) 14 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_ERS, ERS
: Ethernet_DMA_DMASR_AIS ( -- x addr ) 15 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_AIS, AIS
: Ethernet_DMA_DMASR_NIS ( -- x addr ) 16 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_NIS, NIS
: Ethernet_DMA_DMASR_RPS ( %bbb -- x addr ) 17 lshift Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_RPS, RPS
: Ethernet_DMA_DMASR_TPS ( %bbb -- x addr ) 20 lshift Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TPS, TPS
: Ethernet_DMA_DMASR_EBS ( %bbb -- x addr ) 23 lshift Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_EBS, EBS
: Ethernet_DMA_DMASR_MMCS ( -- x addr ) 27 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_MMCS, MMCS
: Ethernet_DMA_DMASR_PMTS ( -- x addr ) 28 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_PMTS, PMTS
: Ethernet_DMA_DMASR_TSTS ( -- x addr ) 29 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TSTS, TSTS

\ Ethernet_DMA_DMAOMR (read-write) Reset:0x00000000
: Ethernet_DMA_DMAOMR_SR ( -- x addr ) 1 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_SR, SR
: Ethernet_DMA_DMAOMR_OSF ( -- x addr ) 2 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_OSF, OSF
: Ethernet_DMA_DMAOMR_RTC ( %bb -- x addr ) 3 lshift Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_RTC, RTC
: Ethernet_DMA_DMAOMR_FUGF ( -- x addr ) 6 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_FUGF, FUGF
: Ethernet_DMA_DMAOMR_FEF ( -- x addr ) 7 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_FEF, FEF
: Ethernet_DMA_DMAOMR_ST ( -- x addr ) 13 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_ST, ST
: Ethernet_DMA_DMAOMR_TTC ( %bbb -- x addr ) 14 lshift Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_TTC, TTC
: Ethernet_DMA_DMAOMR_FTF ( -- x addr ) 20 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_FTF, FTF
: Ethernet_DMA_DMAOMR_TSF ( -- x addr ) 21 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_TSF, TSF
: Ethernet_DMA_DMAOMR_DFRF ( -- x addr ) 24 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_DFRF, DFRF
: Ethernet_DMA_DMAOMR_RSF ( -- x addr ) 25 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_RSF, RSF
: Ethernet_DMA_DMAOMR_DTCEFD ( -- x addr ) 26 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_DTCEFD, DTCEFD

\ Ethernet_DMA_DMAIER (read-write) Reset:0x00000000
: Ethernet_DMA_DMAIER_TIE ( -- x addr ) 0 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_TIE, TIE
: Ethernet_DMA_DMAIER_TPSIE ( -- x addr ) 1 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_TPSIE, TPSIE
: Ethernet_DMA_DMAIER_TBUIE ( -- x addr ) 2 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_TBUIE, TBUIE
: Ethernet_DMA_DMAIER_TJTIE ( -- x addr ) 3 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_TJTIE, TJTIE
: Ethernet_DMA_DMAIER_ROIE ( -- x addr ) 4 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_ROIE, ROIE
: Ethernet_DMA_DMAIER_TUIE ( -- x addr ) 5 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_TUIE, TUIE
: Ethernet_DMA_DMAIER_RIE ( -- x addr ) 6 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_RIE, RIE
: Ethernet_DMA_DMAIER_RBUIE ( -- x addr ) 7 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_RBUIE, RBUIE
: Ethernet_DMA_DMAIER_RPSIE ( -- x addr ) 8 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_RPSIE, RPSIE
: Ethernet_DMA_DMAIER_RWTIE ( -- x addr ) 9 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_RWTIE, RWTIE
: Ethernet_DMA_DMAIER_ETIE ( -- x addr ) 10 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_ETIE, ETIE
: Ethernet_DMA_DMAIER_FBEIE ( -- x addr ) 13 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_FBEIE, FBEIE
: Ethernet_DMA_DMAIER_ERIE ( -- x addr ) 14 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_ERIE, ERIE
: Ethernet_DMA_DMAIER_AISE ( -- x addr ) 15 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_AISE, AISE
: Ethernet_DMA_DMAIER_NISE ( -- x addr ) 16 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_NISE, NISE

\ Ethernet_DMA_DMAMFBOCR (read-write) Reset:0x00000000
: Ethernet_DMA_DMAMFBOCR_MFC ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_DMA_DMAMFBOCR ; \ Ethernet_DMA_DMAMFBOCR_MFC, MFC
: Ethernet_DMA_DMAMFBOCR_OMFC ( -- x addr ) 16 bit Ethernet_DMA_DMAMFBOCR ; \ Ethernet_DMA_DMAMFBOCR_OMFC, OMFC
: Ethernet_DMA_DMAMFBOCR_MFA x addr ) 17 lshift Ethernet_DMA_DMAMFBOCR ; \ Ethernet_DMA_DMAMFBOCR_MFA, MFA
: Ethernet_DMA_DMAMFBOCR_OFOC ( -- x addr ) 28 bit Ethernet_DMA_DMAMFBOCR ; \ Ethernet_DMA_DMAMFBOCR_OFOC, OFOC

\ Ethernet_DMA_DMARSWTR (read-write) Reset:0x00000000
: Ethernet_DMA_DMARSWTR_RSWTC ( %bbbbbbbb -- x addr ) Ethernet_DMA_DMARSWTR ; \ Ethernet_DMA_DMARSWTR_RSWTC, RSWTC

\ Ethernet_DMA_DMACHTDR (read-only) Reset:0x00000000
: Ethernet_DMA_DMACHTDR_HTDAP? ( --  x ) Ethernet_DMA_DMACHTDR @ ; \ Ethernet_DMA_DMACHTDR_HTDAP, HTDAP

\ Ethernet_DMA_DMACHRDR (read-only) Reset:0x00000000
: Ethernet_DMA_DMACHRDR_HRDAP? ( --  x ) Ethernet_DMA_DMACHRDR @ ; \ Ethernet_DMA_DMACHRDR_HRDAP, HRDAP

\ Ethernet_DMA_DMACHTBAR (read-only) Reset:0x00000000
: Ethernet_DMA_DMACHTBAR_HTBAP? ( --  x ) Ethernet_DMA_DMACHTBAR @ ; \ Ethernet_DMA_DMACHTBAR_HTBAP, HTBAP

\ Ethernet_DMA_DMACHRBAR (read-only) Reset:0x00000000
: Ethernet_DMA_DMACHRBAR_HRBAP? ( --  x ) Ethernet_DMA_DMACHRBAR @ ; \ Ethernet_DMA_DMACHRBAR_HRBAP, HRBAP

\ CRC_DR (read-write) Reset:0xFFFFFFFF
: CRC_DR_DR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRC_DR ; \ CRC_DR_DR, Data Register

\ CRC_IDR (read-write) Reset:0x00000000
: CRC_IDR_IDR ( %bbbbbbbb -- x addr ) CRC_IDR ; \ CRC_IDR_IDR, Independent Data register

\ CRC_CR (write-only) Reset:0x00000000
: CRC_CR_CR ( -- x addr ) 0 bit CRC_CR ; \ CRC_CR_CR, Control regidter

\ CRC_INIT (read-write) Reset:0x00000000
: CRC_INIT_CRC_INIT ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRC_INIT ; \ CRC_INIT_CRC_INIT, Programmable initial CRC value

\ CRC_POL (read-write) Reset:0x00000000
: CRC_POL_POL ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRC_POL ; \ CRC_POL_POL, Programmable polynomial

\ CAN1_MCR (read-write) Reset:0x00010002
: CAN1_MCR_DBF ( -- x addr ) 16 bit CAN1_MCR ; \ CAN1_MCR_DBF, DBF
: CAN1_MCR_RESET ( -- x addr ) 15 bit CAN1_MCR ; \ CAN1_MCR_RESET, RESET
: CAN1_MCR_TTCM ( -- x addr ) 7 bit CAN1_MCR ; \ CAN1_MCR_TTCM, TTCM
: CAN1_MCR_ABOM ( -- x addr ) 6 bit CAN1_MCR ; \ CAN1_MCR_ABOM, ABOM
: CAN1_MCR_AWUM ( -- x addr ) 5 bit CAN1_MCR ; \ CAN1_MCR_AWUM, AWUM
: CAN1_MCR_NART ( -- x addr ) 4 bit CAN1_MCR ; \ CAN1_MCR_NART, NART
: CAN1_MCR_RFLM ( -- x addr ) 3 bit CAN1_MCR ; \ CAN1_MCR_RFLM, RFLM
: CAN1_MCR_TXFP ( -- x addr ) 2 bit CAN1_MCR ; \ CAN1_MCR_TXFP, TXFP
: CAN1_MCR_SLEEP ( -- x addr ) 1 bit CAN1_MCR ; \ CAN1_MCR_SLEEP, SLEEP
: CAN1_MCR_INRQ ( -- x addr ) 0 bit CAN1_MCR ; \ CAN1_MCR_INRQ, INRQ

\ CAN1_MSR (multiple-access)  Reset:0x00000C02
: CAN1_MSR_RX ( -- x addr ) 11 bit CAN1_MSR ; \ CAN1_MSR_RX, RX
: CAN1_MSR_SAMP ( -- x addr ) 10 bit CAN1_MSR ; \ CAN1_MSR_SAMP, SAMP
: CAN1_MSR_RXM ( -- x addr ) 9 bit CAN1_MSR ; \ CAN1_MSR_RXM, RXM
: CAN1_MSR_TXM ( -- x addr ) 8 bit CAN1_MSR ; \ CAN1_MSR_TXM, TXM
: CAN1_MSR_SLAKI ( -- x addr ) 4 bit CAN1_MSR ; \ CAN1_MSR_SLAKI, SLAKI
: CAN1_MSR_WKUI ( -- x addr ) 3 bit CAN1_MSR ; \ CAN1_MSR_WKUI, WKUI
: CAN1_MSR_ERRI ( -- x addr ) 2 bit CAN1_MSR ; \ CAN1_MSR_ERRI, ERRI
: CAN1_MSR_SLAK ( -- x addr ) 1 bit CAN1_MSR ; \ CAN1_MSR_SLAK, SLAK
: CAN1_MSR_INAK ( -- x addr ) 0 bit CAN1_MSR ; \ CAN1_MSR_INAK, INAK

\ CAN1_TSR (multiple-access)  Reset:0x1C000000
: CAN1_TSR_LOW2? ( -- 1|0 ) 31 bit CAN1_TSR bit@ ; \ CAN1_TSR_LOW2, Lowest priority flag for mailbox 2
: CAN1_TSR_LOW1? ( -- 1|0 ) 30 bit CAN1_TSR bit@ ; \ CAN1_TSR_LOW1, Lowest priority flag for mailbox 1
: CAN1_TSR_LOW0? ( -- 1|0 ) 29 bit CAN1_TSR bit@ ; \ CAN1_TSR_LOW0, Lowest priority flag for mailbox 0
: CAN1_TSR_TME2? ( -- 1|0 ) 28 bit CAN1_TSR bit@ ; \ CAN1_TSR_TME2, Lowest priority flag for mailbox 2
: CAN1_TSR_TME1? ( -- 1|0 ) 27 bit CAN1_TSR bit@ ; \ CAN1_TSR_TME1, Lowest priority flag for mailbox 1
: CAN1_TSR_TME0? ( -- 1|0 ) 26 bit CAN1_TSR bit@ ; \ CAN1_TSR_TME0, Lowest priority flag for mailbox 0
: CAN1_TSR_CODE ( %bb -- x addr ) 24 lshift CAN1_TSR ; \ CAN1_TSR_CODE, CODE
: CAN1_TSR_ABRQ2 ( -- x addr ) 23 bit CAN1_TSR ; \ CAN1_TSR_ABRQ2, ABRQ2
: CAN1_TSR_TERR2 ( -- x addr ) 19 bit CAN1_TSR ; \ CAN1_TSR_TERR2, TERR2
: CAN1_TSR_ALST2 ( -- x addr ) 18 bit CAN1_TSR ; \ CAN1_TSR_ALST2, ALST2
: CAN1_TSR_TXOK2 ( -- x addr ) 17 bit CAN1_TSR ; \ CAN1_TSR_TXOK2, TXOK2
: CAN1_TSR_RQCP2 ( -- x addr ) 16 bit CAN1_TSR ; \ CAN1_TSR_RQCP2, RQCP2
: CAN1_TSR_ABRQ1 ( -- x addr ) 15 bit CAN1_TSR ; \ CAN1_TSR_ABRQ1, ABRQ1
: CAN1_TSR_TERR1 ( -- x addr ) 11 bit CAN1_TSR ; \ CAN1_TSR_TERR1, TERR1
: CAN1_TSR_ALST1 ( -- x addr ) 10 bit CAN1_TSR ; \ CAN1_TSR_ALST1, ALST1
: CAN1_TSR_TXOK1 ( -- x addr ) 9 bit CAN1_TSR ; \ CAN1_TSR_TXOK1, TXOK1
: CAN1_TSR_RQCP1 ( -- x addr ) 8 bit CAN1_TSR ; \ CAN1_TSR_RQCP1, RQCP1
: CAN1_TSR_ABRQ0 ( -- x addr ) 7 bit CAN1_TSR ; \ CAN1_TSR_ABRQ0, ABRQ0
: CAN1_TSR_TERR0 ( -- x addr ) 3 bit CAN1_TSR ; \ CAN1_TSR_TERR0, TERR0
: CAN1_TSR_ALST0 ( -- x addr ) 2 bit CAN1_TSR ; \ CAN1_TSR_ALST0, ALST0
: CAN1_TSR_TXOK0 ( -- x addr ) 1 bit CAN1_TSR ; \ CAN1_TSR_TXOK0, TXOK0
: CAN1_TSR_RQCP0 ( -- x addr ) 0 bit CAN1_TSR ; \ CAN1_TSR_RQCP0, RQCP0

\ CAN1_RF0R (multiple-access)  Reset:0x00000000
: CAN1_RF0R_RFOM0 ( -- x addr ) 5 bit CAN1_RF0R ; \ CAN1_RF0R_RFOM0, RFOM0
: CAN1_RF0R_FOVR0 ( -- x addr ) 4 bit CAN1_RF0R ; \ CAN1_RF0R_FOVR0, FOVR0
: CAN1_RF0R_FULL0 ( -- x addr ) 3 bit CAN1_RF0R ; \ CAN1_RF0R_FULL0, FULL0
: CAN1_RF0R_FMP0 ( %bb -- x addr ) CAN1_RF0R ; \ CAN1_RF0R_FMP0, FMP0

\ CAN1_RF1R (multiple-access)  Reset:0x00000000
: CAN1_RF1R_RFOM1 ( -- x addr ) 5 bit CAN1_RF1R ; \ CAN1_RF1R_RFOM1, RFOM1
: CAN1_RF1R_FOVR1 ( -- x addr ) 4 bit CAN1_RF1R ; \ CAN1_RF1R_FOVR1, FOVR1
: CAN1_RF1R_FULL1 ( -- x addr ) 3 bit CAN1_RF1R ; \ CAN1_RF1R_FULL1, FULL1
: CAN1_RF1R_FMP1 ( %bb -- x addr ) CAN1_RF1R ; \ CAN1_RF1R_FMP1, FMP1

\ CAN1_IER (read-write) Reset:0x00000000
: CAN1_IER_SLKIE ( -- x addr ) 17 bit CAN1_IER ; \ CAN1_IER_SLKIE, SLKIE
: CAN1_IER_WKUIE ( -- x addr ) 16 bit CAN1_IER ; \ CAN1_IER_WKUIE, WKUIE
: CAN1_IER_ERRIE ( -- x addr ) 15 bit CAN1_IER ; \ CAN1_IER_ERRIE, ERRIE
: CAN1_IER_LECIE ( -- x addr ) 11 bit CAN1_IER ; \ CAN1_IER_LECIE, LECIE
: CAN1_IER_BOFIE ( -- x addr ) 10 bit CAN1_IER ; \ CAN1_IER_BOFIE, BOFIE
: CAN1_IER_EPVIE ( -- x addr ) 9 bit CAN1_IER ; \ CAN1_IER_EPVIE, EPVIE
: CAN1_IER_EWGIE ( -- x addr ) 8 bit CAN1_IER ; \ CAN1_IER_EWGIE, EWGIE
: CAN1_IER_FOVIE1 ( -- x addr ) 6 bit CAN1_IER ; \ CAN1_IER_FOVIE1, FOVIE1
: CAN1_IER_FFIE1 ( -- x addr ) 5 bit CAN1_IER ; \ CAN1_IER_FFIE1, FFIE1
: CAN1_IER_FMPIE1 ( -- x addr ) 4 bit CAN1_IER ; \ CAN1_IER_FMPIE1, FMPIE1
: CAN1_IER_FOVIE0 ( -- x addr ) 3 bit CAN1_IER ; \ CAN1_IER_FOVIE0, FOVIE0
: CAN1_IER_FFIE0 ( -- x addr ) 2 bit CAN1_IER ; \ CAN1_IER_FFIE0, FFIE0
: CAN1_IER_FMPIE0 ( -- x addr ) 1 bit CAN1_IER ; \ CAN1_IER_FMPIE0, FMPIE0
: CAN1_IER_TMEIE ( -- x addr ) 0 bit CAN1_IER ; \ CAN1_IER_TMEIE, TMEIE

\ CAN1_ESR (multiple-access)  Reset:0x00000000
: CAN1_ESR_REC ( %bbbbbbbb -- x addr ) 24 lshift CAN1_ESR ; \ CAN1_ESR_REC, REC
: CAN1_ESR_TEC ( %bbbbbbbb -- x addr ) 16 lshift CAN1_ESR ; \ CAN1_ESR_TEC, TEC
: CAN1_ESR_LEC ( %bbb -- x addr ) 4 lshift CAN1_ESR ; \ CAN1_ESR_LEC, LEC
: CAN1_ESR_BOFF ( -- x addr ) 2 bit CAN1_ESR ; \ CAN1_ESR_BOFF, BOFF
: CAN1_ESR_EPVF ( -- x addr ) 1 bit CAN1_ESR ; \ CAN1_ESR_EPVF, EPVF
: CAN1_ESR_EWGF ( -- x addr ) 0 bit CAN1_ESR ; \ CAN1_ESR_EWGF, EWGF

\ CAN1_BTR (read-write) Reset:0x00000000
: CAN1_BTR_SILM ( -- x addr ) 31 bit CAN1_BTR ; \ CAN1_BTR_SILM, SILM
: CAN1_BTR_LBKM ( -- x addr ) 30 bit CAN1_BTR ; \ CAN1_BTR_LBKM, LBKM
: CAN1_BTR_SJW ( %bb -- x addr ) 24 lshift CAN1_BTR ; \ CAN1_BTR_SJW, SJW
: CAN1_BTR_TS2 ( %bbb -- x addr ) 20 lshift CAN1_BTR ; \ CAN1_BTR_TS2, TS2
: CAN1_BTR_TS1 ( %bbbb -- x addr ) 16 lshift CAN1_BTR ; \ CAN1_BTR_TS1, TS1
: CAN1_BTR_BRP ( %bbbbbbbbbb -- x addr ) CAN1_BTR ; \ CAN1_BTR_BRP, BRP

\ CAN1_TI0R (read-write) Reset:0x00000000
: CAN1_TI0R_STID x addr ) 21 lshift CAN1_TI0R ; \ CAN1_TI0R_STID, STID
: CAN1_TI0R_EXID x addr ) 3 lshift CAN1_TI0R ; \ CAN1_TI0R_EXID, EXID
: CAN1_TI0R_IDE ( -- x addr ) 2 bit CAN1_TI0R ; \ CAN1_TI0R_IDE, IDE
: CAN1_TI0R_RTR ( -- x addr ) 1 bit CAN1_TI0R ; \ CAN1_TI0R_RTR, RTR
: CAN1_TI0R_TXRQ ( -- x addr ) 0 bit CAN1_TI0R ; \ CAN1_TI0R_TXRQ, TXRQ

\ CAN1_TDT0R (read-write) Reset:0x00000000
: CAN1_TDT0R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN1_TDT0R ; \ CAN1_TDT0R_TIME, TIME
: CAN1_TDT0R_TGT ( -- x addr ) 8 bit CAN1_TDT0R ; \ CAN1_TDT0R_TGT, TGT
: CAN1_TDT0R_DLC ( %bbbb -- x addr ) CAN1_TDT0R ; \ CAN1_TDT0R_DLC, DLC

\ CAN1_TDL0R (read-write) Reset:0x00000000
: CAN1_TDL0R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDL0R ; \ CAN1_TDL0R_DATA3, DATA3
: CAN1_TDL0R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDL0R ; \ CAN1_TDL0R_DATA2, DATA2
: CAN1_TDL0R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDL0R ; \ CAN1_TDL0R_DATA1, DATA1
: CAN1_TDL0R_DATA0 ( %bbbbbbbb -- x addr ) CAN1_TDL0R ; \ CAN1_TDL0R_DATA0, DATA0

\ CAN1_TDH0R (read-write) Reset:0x00000000
: CAN1_TDH0R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDH0R ; \ CAN1_TDH0R_DATA7, DATA7
: CAN1_TDH0R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDH0R ; \ CAN1_TDH0R_DATA6, DATA6
: CAN1_TDH0R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDH0R ; \ CAN1_TDH0R_DATA5, DATA5
: CAN1_TDH0R_DATA4 ( %bbbbbbbb -- x addr ) CAN1_TDH0R ; \ CAN1_TDH0R_DATA4, DATA4

\ CAN1_TI1R (read-write) Reset:0x00000000
: CAN1_TI1R_STID x addr ) 21 lshift CAN1_TI1R ; \ CAN1_TI1R_STID, STID
: CAN1_TI1R_EXID x addr ) 3 lshift CAN1_TI1R ; \ CAN1_TI1R_EXID, EXID
: CAN1_TI1R_IDE ( -- x addr ) 2 bit CAN1_TI1R ; \ CAN1_TI1R_IDE, IDE
: CAN1_TI1R_RTR ( -- x addr ) 1 bit CAN1_TI1R ; \ CAN1_TI1R_RTR, RTR
: CAN1_TI1R_TXRQ ( -- x addr ) 0 bit CAN1_TI1R ; \ CAN1_TI1R_TXRQ, TXRQ

\ CAN1_TDT1R (read-write) Reset:0x00000000
: CAN1_TDT1R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN1_TDT1R ; \ CAN1_TDT1R_TIME, TIME
: CAN1_TDT1R_TGT ( -- x addr ) 8 bit CAN1_TDT1R ; \ CAN1_TDT1R_TGT, TGT
: CAN1_TDT1R_DLC ( %bbbb -- x addr ) CAN1_TDT1R ; \ CAN1_TDT1R_DLC, DLC

\ CAN1_TDL1R (read-write) Reset:0x00000000
: CAN1_TDL1R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDL1R ; \ CAN1_TDL1R_DATA3, DATA3
: CAN1_TDL1R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDL1R ; \ CAN1_TDL1R_DATA2, DATA2
: CAN1_TDL1R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDL1R ; \ CAN1_TDL1R_DATA1, DATA1
: CAN1_TDL1R_DATA0 ( %bbbbbbbb -- x addr ) CAN1_TDL1R ; \ CAN1_TDL1R_DATA0, DATA0

\ CAN1_TDH1R (read-write) Reset:0x00000000
: CAN1_TDH1R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDH1R ; \ CAN1_TDH1R_DATA7, DATA7
: CAN1_TDH1R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDH1R ; \ CAN1_TDH1R_DATA6, DATA6
: CAN1_TDH1R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDH1R ; \ CAN1_TDH1R_DATA5, DATA5
: CAN1_TDH1R_DATA4 ( %bbbbbbbb -- x addr ) CAN1_TDH1R ; \ CAN1_TDH1R_DATA4, DATA4

\ CAN1_TI2R (read-write) Reset:0x00000000
: CAN1_TI2R_STID x addr ) 21 lshift CAN1_TI2R ; \ CAN1_TI2R_STID, STID
: CAN1_TI2R_EXID x addr ) 3 lshift CAN1_TI2R ; \ CAN1_TI2R_EXID, EXID
: CAN1_TI2R_IDE ( -- x addr ) 2 bit CAN1_TI2R ; \ CAN1_TI2R_IDE, IDE
: CAN1_TI2R_RTR ( -- x addr ) 1 bit CAN1_TI2R ; \ CAN1_TI2R_RTR, RTR
: CAN1_TI2R_TXRQ ( -- x addr ) 0 bit CAN1_TI2R ; \ CAN1_TI2R_TXRQ, TXRQ

\ CAN1_TDT2R (read-write) Reset:0x00000000
: CAN1_TDT2R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN1_TDT2R ; \ CAN1_TDT2R_TIME, TIME
: CAN1_TDT2R_TGT ( -- x addr ) 8 bit CAN1_TDT2R ; \ CAN1_TDT2R_TGT, TGT
: CAN1_TDT2R_DLC ( %bbbb -- x addr ) CAN1_TDT2R ; \ CAN1_TDT2R_DLC, DLC

\ CAN1_TDL2R (read-write) Reset:0x00000000
: CAN1_TDL2R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDL2R ; \ CAN1_TDL2R_DATA3, DATA3
: CAN1_TDL2R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDL2R ; \ CAN1_TDL2R_DATA2, DATA2
: CAN1_TDL2R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDL2R ; \ CAN1_TDL2R_DATA1, DATA1
: CAN1_TDL2R_DATA0 ( %bbbbbbbb -- x addr ) CAN1_TDL2R ; \ CAN1_TDL2R_DATA0, DATA0

\ CAN1_TDH2R (read-write) Reset:0x00000000
: CAN1_TDH2R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDH2R ; \ CAN1_TDH2R_DATA7, DATA7
: CAN1_TDH2R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDH2R ; \ CAN1_TDH2R_DATA6, DATA6
: CAN1_TDH2R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDH2R ; \ CAN1_TDH2R_DATA5, DATA5
: CAN1_TDH2R_DATA4 ( %bbbbbbbb -- x addr ) CAN1_TDH2R ; \ CAN1_TDH2R_DATA4, DATA4

\ CAN1_RI0R (read-only) Reset:0x00000000
: CAN1_RI0R_STID? ( --  x ) 21 lshift CAN1_RI0R @ ; \ CAN1_RI0R_STID, STID
: CAN1_RI0R_EXID? ( --  x ) 3 lshift CAN1_RI0R @ ; \ CAN1_RI0R_EXID, EXID
: CAN1_RI0R_IDE? ( --  1|0 ) 2 bit CAN1_RI0R bit@ ; \ CAN1_RI0R_IDE, IDE
: CAN1_RI0R_RTR? ( --  1|0 ) 1 bit CAN1_RI0R bit@ ; \ CAN1_RI0R_RTR, RTR

\ CAN1_RDT0R (read-only) Reset:0x00000000
: CAN1_RDT0R_TIME? ( --  x ) 16 lshift CAN1_RDT0R @ ; \ CAN1_RDT0R_TIME, TIME
: CAN1_RDT0R_FMI? ( --  x ) 8 lshift CAN1_RDT0R @ ; \ CAN1_RDT0R_FMI, FMI
: CAN1_RDT0R_DLC? ( --  x ) CAN1_RDT0R @ ; \ CAN1_RDT0R_DLC, DLC

\ CAN1_RDL0R (read-only) Reset:0x00000000
: CAN1_RDL0R_DATA3? ( --  x ) 24 lshift CAN1_RDL0R @ ; \ CAN1_RDL0R_DATA3, DATA3
: CAN1_RDL0R_DATA2? ( --  x ) 16 lshift CAN1_RDL0R @ ; \ CAN1_RDL0R_DATA2, DATA2
: CAN1_RDL0R_DATA1? ( --  x ) 8 lshift CAN1_RDL0R @ ; \ CAN1_RDL0R_DATA1, DATA1
: CAN1_RDL0R_DATA0? ( --  x ) CAN1_RDL0R @ ; \ CAN1_RDL0R_DATA0, DATA0

\ CAN1_RDH0R (read-only) Reset:0x00000000
: CAN1_RDH0R_DATA7? ( --  x ) 24 lshift CAN1_RDH0R @ ; \ CAN1_RDH0R_DATA7, DATA7
: CAN1_RDH0R_DATA6? ( --  x ) 16 lshift CAN1_RDH0R @ ; \ CAN1_RDH0R_DATA6, DATA6
: CAN1_RDH0R_DATA5? ( --  x ) 8 lshift CAN1_RDH0R @ ; \ CAN1_RDH0R_DATA5, DATA5
: CAN1_RDH0R_DATA4? ( --  x ) CAN1_RDH0R @ ; \ CAN1_RDH0R_DATA4, DATA4

\ CAN1_RI1R (read-only) Reset:0x00000000
: CAN1_RI1R_STID? ( --  x ) 21 lshift CAN1_RI1R @ ; \ CAN1_RI1R_STID, STID
: CAN1_RI1R_EXID? ( --  x ) 3 lshift CAN1_RI1R @ ; \ CAN1_RI1R_EXID, EXID
: CAN1_RI1R_IDE? ( --  1|0 ) 2 bit CAN1_RI1R bit@ ; \ CAN1_RI1R_IDE, IDE
: CAN1_RI1R_RTR? ( --  1|0 ) 1 bit CAN1_RI1R bit@ ; \ CAN1_RI1R_RTR, RTR

\ CAN1_RDT1R (read-only) Reset:0x00000000
: CAN1_RDT1R_TIME? ( --  x ) 16 lshift CAN1_RDT1R @ ; \ CAN1_RDT1R_TIME, TIME
: CAN1_RDT1R_FMI? ( --  x ) 8 lshift CAN1_RDT1R @ ; \ CAN1_RDT1R_FMI, FMI
: CAN1_RDT1R_DLC? ( --  x ) CAN1_RDT1R @ ; \ CAN1_RDT1R_DLC, DLC

\ CAN1_RDL1R (read-only) Reset:0x00000000
: CAN1_RDL1R_DATA3? ( --  x ) 24 lshift CAN1_RDL1R @ ; \ CAN1_RDL1R_DATA3, DATA3
: CAN1_RDL1R_DATA2? ( --  x ) 16 lshift CAN1_RDL1R @ ; \ CAN1_RDL1R_DATA2, DATA2
: CAN1_RDL1R_DATA1? ( --  x ) 8 lshift CAN1_RDL1R @ ; \ CAN1_RDL1R_DATA1, DATA1
: CAN1_RDL1R_DATA0? ( --  x ) CAN1_RDL1R @ ; \ CAN1_RDL1R_DATA0, DATA0

\ CAN1_RDH1R (read-only) Reset:0x00000000
: CAN1_RDH1R_DATA7? ( --  x ) 24 lshift CAN1_RDH1R @ ; \ CAN1_RDH1R_DATA7, DATA7
: CAN1_RDH1R_DATA6? ( --  x ) 16 lshift CAN1_RDH1R @ ; \ CAN1_RDH1R_DATA6, DATA6
: CAN1_RDH1R_DATA5? ( --  x ) 8 lshift CAN1_RDH1R @ ; \ CAN1_RDH1R_DATA5, DATA5
: CAN1_RDH1R_DATA4? ( --  x ) CAN1_RDH1R @ ; \ CAN1_RDH1R_DATA4, DATA4

\ CAN1_FMR (read-write) Reset:0x2A1C0E01
: CAN1_FMR_CAN2SB ( %bbbbbb -- x addr ) 8 lshift CAN1_FMR ; \ CAN1_FMR_CAN2SB, CAN2SB
: CAN1_FMR_FINIT ( -- x addr ) 0 bit CAN1_FMR ; \ CAN1_FMR_FINIT, FINIT

\ CAN1_FM1R (read-write) Reset:0x00000000
: CAN1_FM1R_FBM0 ( -- x addr ) 0 bit CAN1_FM1R ; \ CAN1_FM1R_FBM0, Filter mode
: CAN1_FM1R_FBM1 ( -- x addr ) 1 bit CAN1_FM1R ; \ CAN1_FM1R_FBM1, Filter mode
: CAN1_FM1R_FBM2 ( -- x addr ) 2 bit CAN1_FM1R ; \ CAN1_FM1R_FBM2, Filter mode
: CAN1_FM1R_FBM3 ( -- x addr ) 3 bit CAN1_FM1R ; \ CAN1_FM1R_FBM3, Filter mode
: CAN1_FM1R_FBM4 ( -- x addr ) 4 bit CAN1_FM1R ; \ CAN1_FM1R_FBM4, Filter mode
: CAN1_FM1R_FBM5 ( -- x addr ) 5 bit CAN1_FM1R ; \ CAN1_FM1R_FBM5, Filter mode
: CAN1_FM1R_FBM6 ( -- x addr ) 6 bit CAN1_FM1R ; \ CAN1_FM1R_FBM6, Filter mode
: CAN1_FM1R_FBM7 ( -- x addr ) 7 bit CAN1_FM1R ; \ CAN1_FM1R_FBM7, Filter mode
: CAN1_FM1R_FBM8 ( -- x addr ) 8 bit CAN1_FM1R ; \ CAN1_FM1R_FBM8, Filter mode
: CAN1_FM1R_FBM9 ( -- x addr ) 9 bit CAN1_FM1R ; \ CAN1_FM1R_FBM9, Filter mode
: CAN1_FM1R_FBM10 ( -- x addr ) 10 bit CAN1_FM1R ; \ CAN1_FM1R_FBM10, Filter mode
: CAN1_FM1R_FBM11 ( -- x addr ) 11 bit CAN1_FM1R ; \ CAN1_FM1R_FBM11, Filter mode
: CAN1_FM1R_FBM12 ( -- x addr ) 12 bit CAN1_FM1R ; \ CAN1_FM1R_FBM12, Filter mode
: CAN1_FM1R_FBM13 ( -- x addr ) 13 bit CAN1_FM1R ; \ CAN1_FM1R_FBM13, Filter mode
: CAN1_FM1R_FBM14 ( -- x addr ) 14 bit CAN1_FM1R ; \ CAN1_FM1R_FBM14, Filter mode
: CAN1_FM1R_FBM15 ( -- x addr ) 15 bit CAN1_FM1R ; \ CAN1_FM1R_FBM15, Filter mode
: CAN1_FM1R_FBM16 ( -- x addr ) 16 bit CAN1_FM1R ; \ CAN1_FM1R_FBM16, Filter mode
: CAN1_FM1R_FBM17 ( -- x addr ) 17 bit CAN1_FM1R ; \ CAN1_FM1R_FBM17, Filter mode
: CAN1_FM1R_FBM18 ( -- x addr ) 18 bit CAN1_FM1R ; \ CAN1_FM1R_FBM18, Filter mode
: CAN1_FM1R_FBM19 ( -- x addr ) 19 bit CAN1_FM1R ; \ CAN1_FM1R_FBM19, Filter mode
: CAN1_FM1R_FBM20 ( -- x addr ) 20 bit CAN1_FM1R ; \ CAN1_FM1R_FBM20, Filter mode
: CAN1_FM1R_FBM21 ( -- x addr ) 21 bit CAN1_FM1R ; \ CAN1_FM1R_FBM21, Filter mode
: CAN1_FM1R_FBM22 ( -- x addr ) 22 bit CAN1_FM1R ; \ CAN1_FM1R_FBM22, Filter mode
: CAN1_FM1R_FBM23 ( -- x addr ) 23 bit CAN1_FM1R ; \ CAN1_FM1R_FBM23, Filter mode
: CAN1_FM1R_FBM24 ( -- x addr ) 24 bit CAN1_FM1R ; \ CAN1_FM1R_FBM24, Filter mode
: CAN1_FM1R_FBM25 ( -- x addr ) 25 bit CAN1_FM1R ; \ CAN1_FM1R_FBM25, Filter mode
: CAN1_FM1R_FBM26 ( -- x addr ) 26 bit CAN1_FM1R ; \ CAN1_FM1R_FBM26, Filter mode
: CAN1_FM1R_FBM27 ( -- x addr ) 27 bit CAN1_FM1R ; \ CAN1_FM1R_FBM27, Filter mode

\ CAN1_FS1R (read-write) Reset:0x00000000
: CAN1_FS1R_FSC0 ( -- x addr ) 0 bit CAN1_FS1R ; \ CAN1_FS1R_FSC0, Filter scale configuration
: CAN1_FS1R_FSC1 ( -- x addr ) 1 bit CAN1_FS1R ; \ CAN1_FS1R_FSC1, Filter scale configuration
: CAN1_FS1R_FSC2 ( -- x addr ) 2 bit CAN1_FS1R ; \ CAN1_FS1R_FSC2, Filter scale configuration
: CAN1_FS1R_FSC3 ( -- x addr ) 3 bit CAN1_FS1R ; \ CAN1_FS1R_FSC3, Filter scale configuration
: CAN1_FS1R_FSC4 ( -- x addr ) 4 bit CAN1_FS1R ; \ CAN1_FS1R_FSC4, Filter scale configuration
: CAN1_FS1R_FSC5 ( -- x addr ) 5 bit CAN1_FS1R ; \ CAN1_FS1R_FSC5, Filter scale configuration
: CAN1_FS1R_FSC6 ( -- x addr ) 6 bit CAN1_FS1R ; \ CAN1_FS1R_FSC6, Filter scale configuration
: CAN1_FS1R_FSC7 ( -- x addr ) 7 bit CAN1_FS1R ; \ CAN1_FS1R_FSC7, Filter scale configuration
: CAN1_FS1R_FSC8 ( -- x addr ) 8 bit CAN1_FS1R ; \ CAN1_FS1R_FSC8, Filter scale configuration
: CAN1_FS1R_FSC9 ( -- x addr ) 9 bit CAN1_FS1R ; \ CAN1_FS1R_FSC9, Filter scale configuration
: CAN1_FS1R_FSC10 ( -- x addr ) 10 bit CAN1_FS1R ; \ CAN1_FS1R_FSC10, Filter scale configuration
: CAN1_FS1R_FSC11 ( -- x addr ) 11 bit CAN1_FS1R ; \ CAN1_FS1R_FSC11, Filter scale configuration
: CAN1_FS1R_FSC12 ( -- x addr ) 12 bit CAN1_FS1R ; \ CAN1_FS1R_FSC12, Filter scale configuration
: CAN1_FS1R_FSC13 ( -- x addr ) 13 bit CAN1_FS1R ; \ CAN1_FS1R_FSC13, Filter scale configuration
: CAN1_FS1R_FSC14 ( -- x addr ) 14 bit CAN1_FS1R ; \ CAN1_FS1R_FSC14, Filter scale configuration
: CAN1_FS1R_FSC15 ( -- x addr ) 15 bit CAN1_FS1R ; \ CAN1_FS1R_FSC15, Filter scale configuration
: CAN1_FS1R_FSC16 ( -- x addr ) 16 bit CAN1_FS1R ; \ CAN1_FS1R_FSC16, Filter scale configuration
: CAN1_FS1R_FSC17 ( -- x addr ) 17 bit CAN1_FS1R ; \ CAN1_FS1R_FSC17, Filter scale configuration
: CAN1_FS1R_FSC18 ( -- x addr ) 18 bit CAN1_FS1R ; \ CAN1_FS1R_FSC18, Filter scale configuration
: CAN1_FS1R_FSC19 ( -- x addr ) 19 bit CAN1_FS1R ; \ CAN1_FS1R_FSC19, Filter scale configuration
: CAN1_FS1R_FSC20 ( -- x addr ) 20 bit CAN1_FS1R ; \ CAN1_FS1R_FSC20, Filter scale configuration
: CAN1_FS1R_FSC21 ( -- x addr ) 21 bit CAN1_FS1R ; \ CAN1_FS1R_FSC21, Filter scale configuration
: CAN1_FS1R_FSC22 ( -- x addr ) 22 bit CAN1_FS1R ; \ CAN1_FS1R_FSC22, Filter scale configuration
: CAN1_FS1R_FSC23 ( -- x addr ) 23 bit CAN1_FS1R ; \ CAN1_FS1R_FSC23, Filter scale configuration
: CAN1_FS1R_FSC24 ( -- x addr ) 24 bit CAN1_FS1R ; \ CAN1_FS1R_FSC24, Filter scale configuration
: CAN1_FS1R_FSC25 ( -- x addr ) 25 bit CAN1_FS1R ; \ CAN1_FS1R_FSC25, Filter scale configuration
: CAN1_FS1R_FSC26 ( -- x addr ) 26 bit CAN1_FS1R ; \ CAN1_FS1R_FSC26, Filter scale configuration
: CAN1_FS1R_FSC27 ( -- x addr ) 27 bit CAN1_FS1R ; \ CAN1_FS1R_FSC27, Filter scale configuration

\ CAN1_FFA1R (read-write) Reset:0x00000000
: CAN1_FFA1R_FFA0 ( -- x addr ) 0 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA0, Filter FIFO assignment for filter 0
: CAN1_FFA1R_FFA1 ( -- x addr ) 1 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA1, Filter FIFO assignment for filter 1
: CAN1_FFA1R_FFA2 ( -- x addr ) 2 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA2, Filter FIFO assignment for filter 2
: CAN1_FFA1R_FFA3 ( -- x addr ) 3 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA3, Filter FIFO assignment for filter 3
: CAN1_FFA1R_FFA4 ( -- x addr ) 4 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA4, Filter FIFO assignment for filter 4
: CAN1_FFA1R_FFA5 ( -- x addr ) 5 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA5, Filter FIFO assignment for filter 5
: CAN1_FFA1R_FFA6 ( -- x addr ) 6 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA6, Filter FIFO assignment for filter 6
: CAN1_FFA1R_FFA7 ( -- x addr ) 7 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA7, Filter FIFO assignment for filter 7
: CAN1_FFA1R_FFA8 ( -- x addr ) 8 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA8, Filter FIFO assignment for filter 8
: CAN1_FFA1R_FFA9 ( -- x addr ) 9 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA9, Filter FIFO assignment for filter 9
: CAN1_FFA1R_FFA10 ( -- x addr ) 10 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA10, Filter FIFO assignment for filter 10
: CAN1_FFA1R_FFA11 ( -- x addr ) 11 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA11, Filter FIFO assignment for filter 11
: CAN1_FFA1R_FFA12 ( -- x addr ) 12 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA12, Filter FIFO assignment for filter 12
: CAN1_FFA1R_FFA13 ( -- x addr ) 13 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA13, Filter FIFO assignment for filter 13
: CAN1_FFA1R_FFA14 ( -- x addr ) 14 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA14, Filter FIFO assignment for filter 14
: CAN1_FFA1R_FFA15 ( -- x addr ) 15 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA15, Filter FIFO assignment for filter 15
: CAN1_FFA1R_FFA16 ( -- x addr ) 16 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA16, Filter FIFO assignment for filter 16
: CAN1_FFA1R_FFA17 ( -- x addr ) 17 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA17, Filter FIFO assignment for filter 17
: CAN1_FFA1R_FFA18 ( -- x addr ) 18 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA18, Filter FIFO assignment for filter 18
: CAN1_FFA1R_FFA19 ( -- x addr ) 19 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA19, Filter FIFO assignment for filter 19
: CAN1_FFA1R_FFA20 ( -- x addr ) 20 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA20, Filter FIFO assignment for filter 20
: CAN1_FFA1R_FFA21 ( -- x addr ) 21 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA21, Filter FIFO assignment for filter 21
: CAN1_FFA1R_FFA22 ( -- x addr ) 22 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA22, Filter FIFO assignment for filter 22
: CAN1_FFA1R_FFA23 ( -- x addr ) 23 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA23, Filter FIFO assignment for filter 23
: CAN1_FFA1R_FFA24 ( -- x addr ) 24 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA24, Filter FIFO assignment for filter 24
: CAN1_FFA1R_FFA25 ( -- x addr ) 25 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA25, Filter FIFO assignment for filter 25
: CAN1_FFA1R_FFA26 ( -- x addr ) 26 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA26, Filter FIFO assignment for filter 26
: CAN1_FFA1R_FFA27 ( -- x addr ) 27 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA27, Filter FIFO assignment for filter 27

\ CAN1_FA1R (read-write) Reset:0x00000000
: CAN1_FA1R_FACT0 ( -- x addr ) 0 bit CAN1_FA1R ; \ CAN1_FA1R_FACT0, Filter active
: CAN1_FA1R_FACT1 ( -- x addr ) 1 bit CAN1_FA1R ; \ CAN1_FA1R_FACT1, Filter active
: CAN1_FA1R_FACT2 ( -- x addr ) 2 bit CAN1_FA1R ; \ CAN1_FA1R_FACT2, Filter active
: CAN1_FA1R_FACT3 ( -- x addr ) 3 bit CAN1_FA1R ; \ CAN1_FA1R_FACT3, Filter active
: CAN1_FA1R_FACT4 ( -- x addr ) 4 bit CAN1_FA1R ; \ CAN1_FA1R_FACT4, Filter active
: CAN1_FA1R_FACT5 ( -- x addr ) 5 bit CAN1_FA1R ; \ CAN1_FA1R_FACT5, Filter active
: CAN1_FA1R_FACT6 ( -- x addr ) 6 bit CAN1_FA1R ; \ CAN1_FA1R_FACT6, Filter active
: CAN1_FA1R_FACT7 ( -- x addr ) 7 bit CAN1_FA1R ; \ CAN1_FA1R_FACT7, Filter active
: CAN1_FA1R_FACT8 ( -- x addr ) 8 bit CAN1_FA1R ; \ CAN1_FA1R_FACT8, Filter active
: CAN1_FA1R_FACT9 ( -- x addr ) 9 bit CAN1_FA1R ; \ CAN1_FA1R_FACT9, Filter active
: CAN1_FA1R_FACT10 ( -- x addr ) 10 bit CAN1_FA1R ; \ CAN1_FA1R_FACT10, Filter active
: CAN1_FA1R_FACT11 ( -- x addr ) 11 bit CAN1_FA1R ; \ CAN1_FA1R_FACT11, Filter active
: CAN1_FA1R_FACT12 ( -- x addr ) 12 bit CAN1_FA1R ; \ CAN1_FA1R_FACT12, Filter active
: CAN1_FA1R_FACT13 ( -- x addr ) 13 bit CAN1_FA1R ; \ CAN1_FA1R_FACT13, Filter active
: CAN1_FA1R_FACT14 ( -- x addr ) 14 bit CAN1_FA1R ; \ CAN1_FA1R_FACT14, Filter active
: CAN1_FA1R_FACT15 ( -- x addr ) 15 bit CAN1_FA1R ; \ CAN1_FA1R_FACT15, Filter active
: CAN1_FA1R_FACT16 ( -- x addr ) 16 bit CAN1_FA1R ; \ CAN1_FA1R_FACT16, Filter active
: CAN1_FA1R_FACT17 ( -- x addr ) 17 bit CAN1_FA1R ; \ CAN1_FA1R_FACT17, Filter active
: CAN1_FA1R_FACT18 ( -- x addr ) 18 bit CAN1_FA1R ; \ CAN1_FA1R_FACT18, Filter active
: CAN1_FA1R_FACT19 ( -- x addr ) 19 bit CAN1_FA1R ; \ CAN1_FA1R_FACT19, Filter active
: CAN1_FA1R_FACT20 ( -- x addr ) 20 bit CAN1_FA1R ; \ CAN1_FA1R_FACT20, Filter active
: CAN1_FA1R_FACT21 ( -- x addr ) 21 bit CAN1_FA1R ; \ CAN1_FA1R_FACT21, Filter active
: CAN1_FA1R_FACT22 ( -- x addr ) 22 bit CAN1_FA1R ; \ CAN1_FA1R_FACT22, Filter active
: CAN1_FA1R_FACT23 ( -- x addr ) 23 bit CAN1_FA1R ; \ CAN1_FA1R_FACT23, Filter active
: CAN1_FA1R_FACT24 ( -- x addr ) 24 bit CAN1_FA1R ; \ CAN1_FA1R_FACT24, Filter active
: CAN1_FA1R_FACT25 ( -- x addr ) 25 bit CAN1_FA1R ; \ CAN1_FA1R_FACT25, Filter active
: CAN1_FA1R_FACT26 ( -- x addr ) 26 bit CAN1_FA1R ; \ CAN1_FA1R_FACT26, Filter active
: CAN1_FA1R_FACT27 ( -- x addr ) 27 bit CAN1_FA1R ; \ CAN1_FA1R_FACT27, Filter active

\ CAN1_F0R1 (read-write) Reset:0x00000000
: CAN1_F0R1_FB0 ( -- x addr ) 0 bit CAN1_F0R1 ; \ CAN1_F0R1_FB0, Filter bits
: CAN1_F0R1_FB1 ( -- x addr ) 1 bit CAN1_F0R1 ; \ CAN1_F0R1_FB1, Filter bits
: CAN1_F0R1_FB2 ( -- x addr ) 2 bit CAN1_F0R1 ; \ CAN1_F0R1_FB2, Filter bits
: CAN1_F0R1_FB3 ( -- x addr ) 3 bit CAN1_F0R1 ; \ CAN1_F0R1_FB3, Filter bits
: CAN1_F0R1_FB4 ( -- x addr ) 4 bit CAN1_F0R1 ; \ CAN1_F0R1_FB4, Filter bits
: CAN1_F0R1_FB5 ( -- x addr ) 5 bit CAN1_F0R1 ; \ CAN1_F0R1_FB5, Filter bits
: CAN1_F0R1_FB6 ( -- x addr ) 6 bit CAN1_F0R1 ; \ CAN1_F0R1_FB6, Filter bits
: CAN1_F0R1_FB7 ( -- x addr ) 7 bit CAN1_F0R1 ; \ CAN1_F0R1_FB7, Filter bits
: CAN1_F0R1_FB8 ( -- x addr ) 8 bit CAN1_F0R1 ; \ CAN1_F0R1_FB8, Filter bits
: CAN1_F0R1_FB9 ( -- x addr ) 9 bit CAN1_F0R1 ; \ CAN1_F0R1_FB9, Filter bits
: CAN1_F0R1_FB10 ( -- x addr ) 10 bit CAN1_F0R1 ; \ CAN1_F0R1_FB10, Filter bits
: CAN1_F0R1_FB11 ( -- x addr ) 11 bit CAN1_F0R1 ; \ CAN1_F0R1_FB11, Filter bits
: CAN1_F0R1_FB12 ( -- x addr ) 12 bit CAN1_F0R1 ; \ CAN1_F0R1_FB12, Filter bits
: CAN1_F0R1_FB13 ( -- x addr ) 13 bit CAN1_F0R1 ; \ CAN1_F0R1_FB13, Filter bits
: CAN1_F0R1_FB14 ( -- x addr ) 14 bit CAN1_F0R1 ; \ CAN1_F0R1_FB14, Filter bits
: CAN1_F0R1_FB15 ( -- x addr ) 15 bit CAN1_F0R1 ; \ CAN1_F0R1_FB15, Filter bits
: CAN1_F0R1_FB16 ( -- x addr ) 16 bit CAN1_F0R1 ; \ CAN1_F0R1_FB16, Filter bits
: CAN1_F0R1_FB17 ( -- x addr ) 17 bit CAN1_F0R1 ; \ CAN1_F0R1_FB17, Filter bits
: CAN1_F0R1_FB18 ( -- x addr ) 18 bit CAN1_F0R1 ; \ CAN1_F0R1_FB18, Filter bits
: CAN1_F0R1_FB19 ( -- x addr ) 19 bit CAN1_F0R1 ; \ CAN1_F0R1_FB19, Filter bits
: CAN1_F0R1_FB20 ( -- x addr ) 20 bit CAN1_F0R1 ; \ CAN1_F0R1_FB20, Filter bits
: CAN1_F0R1_FB21 ( -- x addr ) 21 bit CAN1_F0R1 ; \ CAN1_F0R1_FB21, Filter bits
: CAN1_F0R1_FB22 ( -- x addr ) 22 bit CAN1_F0R1 ; \ CAN1_F0R1_FB22, Filter bits
: CAN1_F0R1_FB23 ( -- x addr ) 23 bit CAN1_F0R1 ; \ CAN1_F0R1_FB23, Filter bits
: CAN1_F0R1_FB24 ( -- x addr ) 24 bit CAN1_F0R1 ; \ CAN1_F0R1_FB24, Filter bits
: CAN1_F0R1_FB25 ( -- x addr ) 25 bit CAN1_F0R1 ; \ CAN1_F0R1_FB25, Filter bits
: CAN1_F0R1_FB26 ( -- x addr ) 26 bit CAN1_F0R1 ; \ CAN1_F0R1_FB26, Filter bits
: CAN1_F0R1_FB27 ( -- x addr ) 27 bit CAN1_F0R1 ; \ CAN1_F0R1_FB27, Filter bits
: CAN1_F0R1_FB28 ( -- x addr ) 28 bit CAN1_F0R1 ; \ CAN1_F0R1_FB28, Filter bits
: CAN1_F0R1_FB29 ( -- x addr ) 29 bit CAN1_F0R1 ; \ CAN1_F0R1_FB29, Filter bits
: CAN1_F0R1_FB30 ( -- x addr ) 30 bit CAN1_F0R1 ; \ CAN1_F0R1_FB30, Filter bits
: CAN1_F0R1_FB31 ( -- x addr ) 31 bit CAN1_F0R1 ; \ CAN1_F0R1_FB31, Filter bits

\ CAN1_F0R2 (read-write) Reset:0x00000000
: CAN1_F0R2_FB0 ( -- x addr ) 0 bit CAN1_F0R2 ; \ CAN1_F0R2_FB0, Filter bits
: CAN1_F0R2_FB1 ( -- x addr ) 1 bit CAN1_F0R2 ; \ CAN1_F0R2_FB1, Filter bits
: CAN1_F0R2_FB2 ( -- x addr ) 2 bit CAN1_F0R2 ; \ CAN1_F0R2_FB2, Filter bits
: CAN1_F0R2_FB3 ( -- x addr ) 3 bit CAN1_F0R2 ; \ CAN1_F0R2_FB3, Filter bits
: CAN1_F0R2_FB4 ( -- x addr ) 4 bit CAN1_F0R2 ; \ CAN1_F0R2_FB4, Filter bits
: CAN1_F0R2_FB5 ( -- x addr ) 5 bit CAN1_F0R2 ; \ CAN1_F0R2_FB5, Filter bits
: CAN1_F0R2_FB6 ( -- x addr ) 6 bit CAN1_F0R2 ; \ CAN1_F0R2_FB6, Filter bits
: CAN1_F0R2_FB7 ( -- x addr ) 7 bit CAN1_F0R2 ; \ CAN1_F0R2_FB7, Filter bits
: CAN1_F0R2_FB8 ( -- x addr ) 8 bit CAN1_F0R2 ; \ CAN1_F0R2_FB8, Filter bits
: CAN1_F0R2_FB9 ( -- x addr ) 9 bit CAN1_F0R2 ; \ CAN1_F0R2_FB9, Filter bits
: CAN1_F0R2_FB10 ( -- x addr ) 10 bit CAN1_F0R2 ; \ CAN1_F0R2_FB10, Filter bits
: CAN1_F0R2_FB11 ( -- x addr ) 11 bit CAN1_F0R2 ; \ CAN1_F0R2_FB11, Filter bits
: CAN1_F0R2_FB12 ( -- x addr ) 12 bit CAN1_F0R2 ; \ CAN1_F0R2_FB12, Filter bits
: CAN1_F0R2_FB13 ( -- x addr ) 13 bit CAN1_F0R2 ; \ CAN1_F0R2_FB13, Filter bits
: CAN1_F0R2_FB14 ( -- x addr ) 14 bit CAN1_F0R2 ; \ CAN1_F0R2_FB14, Filter bits
: CAN1_F0R2_FB15 ( -- x addr ) 15 bit CAN1_F0R2 ; \ CAN1_F0R2_FB15, Filter bits
: CAN1_F0R2_FB16 ( -- x addr ) 16 bit CAN1_F0R2 ; \ CAN1_F0R2_FB16, Filter bits
: CAN1_F0R2_FB17 ( -- x addr ) 17 bit CAN1_F0R2 ; \ CAN1_F0R2_FB17, Filter bits
: CAN1_F0R2_FB18 ( -- x addr ) 18 bit CAN1_F0R2 ; \ CAN1_F0R2_FB18, Filter bits
: CAN1_F0R2_FB19 ( -- x addr ) 19 bit CAN1_F0R2 ; \ CAN1_F0R2_FB19, Filter bits
: CAN1_F0R2_FB20 ( -- x addr ) 20 bit CAN1_F0R2 ; \ CAN1_F0R2_FB20, Filter bits
: CAN1_F0R2_FB21 ( -- x addr ) 21 bit CAN1_F0R2 ; \ CAN1_F0R2_FB21, Filter bits
: CAN1_F0R2_FB22 ( -- x addr ) 22 bit CAN1_F0R2 ; \ CAN1_F0R2_FB22, Filter bits
: CAN1_F0R2_FB23 ( -- x addr ) 23 bit CAN1_F0R2 ; \ CAN1_F0R2_FB23, Filter bits
: CAN1_F0R2_FB24 ( -- x addr ) 24 bit CAN1_F0R2 ; \ CAN1_F0R2_FB24, Filter bits
: CAN1_F0R2_FB25 ( -- x addr ) 25 bit CAN1_F0R2 ; \ CAN1_F0R2_FB25, Filter bits
: CAN1_F0R2_FB26 ( -- x addr ) 26 bit CAN1_F0R2 ; \ CAN1_F0R2_FB26, Filter bits
: CAN1_F0R2_FB27 ( -- x addr ) 27 bit CAN1_F0R2 ; \ CAN1_F0R2_FB27, Filter bits
: CAN1_F0R2_FB28 ( -- x addr ) 28 bit CAN1_F0R2 ; \ CAN1_F0R2_FB28, Filter bits
: CAN1_F0R2_FB29 ( -- x addr ) 29 bit CAN1_F0R2 ; \ CAN1_F0R2_FB29, Filter bits
: CAN1_F0R2_FB30 ( -- x addr ) 30 bit CAN1_F0R2 ; \ CAN1_F0R2_FB30, Filter bits
: CAN1_F0R2_FB31 ( -- x addr ) 31 bit CAN1_F0R2 ; \ CAN1_F0R2_FB31, Filter bits

\ CAN1_F1R1 (read-write) Reset:0x00000000
: CAN1_F1R1_FB0 ( -- x addr ) 0 bit CAN1_F1R1 ; \ CAN1_F1R1_FB0, Filter bits
: CAN1_F1R1_FB1 ( -- x addr ) 1 bit CAN1_F1R1 ; \ CAN1_F1R1_FB1, Filter bits
: CAN1_F1R1_FB2 ( -- x addr ) 2 bit CAN1_F1R1 ; \ CAN1_F1R1_FB2, Filter bits
: CAN1_F1R1_FB3 ( -- x addr ) 3 bit CAN1_F1R1 ; \ CAN1_F1R1_FB3, Filter bits
: CAN1_F1R1_FB4 ( -- x addr ) 4 bit CAN1_F1R1 ; \ CAN1_F1R1_FB4, Filter bits
: CAN1_F1R1_FB5 ( -- x addr ) 5 bit CAN1_F1R1 ; \ CAN1_F1R1_FB5, Filter bits
: CAN1_F1R1_FB6 ( -- x addr ) 6 bit CAN1_F1R1 ; \ CAN1_F1R1_FB6, Filter bits
: CAN1_F1R1_FB7 ( -- x addr ) 7 bit CAN1_F1R1 ; \ CAN1_F1R1_FB7, Filter bits
: CAN1_F1R1_FB8 ( -- x addr ) 8 bit CAN1_F1R1 ; \ CAN1_F1R1_FB8, Filter bits
: CAN1_F1R1_FB9 ( -- x addr ) 9 bit CAN1_F1R1 ; \ CAN1_F1R1_FB9, Filter bits
: CAN1_F1R1_FB10 ( -- x addr ) 10 bit CAN1_F1R1 ; \ CAN1_F1R1_FB10, Filter bits
: CAN1_F1R1_FB11 ( -- x addr ) 11 bit CAN1_F1R1 ; \ CAN1_F1R1_FB11, Filter bits
: CAN1_F1R1_FB12 ( -- x addr ) 12 bit CAN1_F1R1 ; \ CAN1_F1R1_FB12, Filter bits
: CAN1_F1R1_FB13 ( -- x addr ) 13 bit CAN1_F1R1 ; \ CAN1_F1R1_FB13, Filter bits
: CAN1_F1R1_FB14 ( -- x addr ) 14 bit CAN1_F1R1 ; \ CAN1_F1R1_FB14, Filter bits
: CAN1_F1R1_FB15 ( -- x addr ) 15 bit CAN1_F1R1 ; \ CAN1_F1R1_FB15, Filter bits
: CAN1_F1R1_FB16 ( -- x addr ) 16 bit CAN1_F1R1 ; \ CAN1_F1R1_FB16, Filter bits
: CAN1_F1R1_FB17 ( -- x addr ) 17 bit CAN1_F1R1 ; \ CAN1_F1R1_FB17, Filter bits
: CAN1_F1R1_FB18 ( -- x addr ) 18 bit CAN1_F1R1 ; \ CAN1_F1R1_FB18, Filter bits
: CAN1_F1R1_FB19 ( -- x addr ) 19 bit CAN1_F1R1 ; \ CAN1_F1R1_FB19, Filter bits
: CAN1_F1R1_FB20 ( -- x addr ) 20 bit CAN1_F1R1 ; \ CAN1_F1R1_FB20, Filter bits
: CAN1_F1R1_FB21 ( -- x addr ) 21 bit CAN1_F1R1 ; \ CAN1_F1R1_FB21, Filter bits
: CAN1_F1R1_FB22 ( -- x addr ) 22 bit CAN1_F1R1 ; \ CAN1_F1R1_FB22, Filter bits
: CAN1_F1R1_FB23 ( -- x addr ) 23 bit CAN1_F1R1 ; \ CAN1_F1R1_FB23, Filter bits
: CAN1_F1R1_FB24 ( -- x addr ) 24 bit CAN1_F1R1 ; \ CAN1_F1R1_FB24, Filter bits
: CAN1_F1R1_FB25 ( -- x addr ) 25 bit CAN1_F1R1 ; \ CAN1_F1R1_FB25, Filter bits
: CAN1_F1R1_FB26 ( -- x addr ) 26 bit CAN1_F1R1 ; \ CAN1_F1R1_FB26, Filter bits
: CAN1_F1R1_FB27 ( -- x addr ) 27 bit CAN1_F1R1 ; \ CAN1_F1R1_FB27, Filter bits
: CAN1_F1R1_FB28 ( -- x addr ) 28 bit CAN1_F1R1 ; \ CAN1_F1R1_FB28, Filter bits
: CAN1_F1R1_FB29 ( -- x addr ) 29 bit CAN1_F1R1 ; \ CAN1_F1R1_FB29, Filter bits
: CAN1_F1R1_FB30 ( -- x addr ) 30 bit CAN1_F1R1 ; \ CAN1_F1R1_FB30, Filter bits
: CAN1_F1R1_FB31 ( -- x addr ) 31 bit CAN1_F1R1 ; \ CAN1_F1R1_FB31, Filter bits

\ CAN1_F1R2 (read-write) Reset:0x00000000
: CAN1_F1R2_FB0 ( -- x addr ) 0 bit CAN1_F1R2 ; \ CAN1_F1R2_FB0, Filter bits
: CAN1_F1R2_FB1 ( -- x addr ) 1 bit CAN1_F1R2 ; \ CAN1_F1R2_FB1, Filter bits
: CAN1_F1R2_FB2 ( -- x addr ) 2 bit CAN1_F1R2 ; \ CAN1_F1R2_FB2, Filter bits
: CAN1_F1R2_FB3 ( -- x addr ) 3 bit CAN1_F1R2 ; \ CAN1_F1R2_FB3, Filter bits
: CAN1_F1R2_FB4 ( -- x addr ) 4 bit CAN1_F1R2 ; \ CAN1_F1R2_FB4, Filter bits
: CAN1_F1R2_FB5 ( -- x addr ) 5 bit CAN1_F1R2 ; \ CAN1_F1R2_FB5, Filter bits
: CAN1_F1R2_FB6 ( -- x addr ) 6 bit CAN1_F1R2 ; \ CAN1_F1R2_FB6, Filter bits
: CAN1_F1R2_FB7 ( -- x addr ) 7 bit CAN1_F1R2 ; \ CAN1_F1R2_FB7, Filter bits
: CAN1_F1R2_FB8 ( -- x addr ) 8 bit CAN1_F1R2 ; \ CAN1_F1R2_FB8, Filter bits
: CAN1_F1R2_FB9 ( -- x addr ) 9 bit CAN1_F1R2 ; \ CAN1_F1R2_FB9, Filter bits
: CAN1_F1R2_FB10 ( -- x addr ) 10 bit CAN1_F1R2 ; \ CAN1_F1R2_FB10, Filter bits
: CAN1_F1R2_FB11 ( -- x addr ) 11 bit CAN1_F1R2 ; \ CAN1_F1R2_FB11, Filter bits
: CAN1_F1R2_FB12 ( -- x addr ) 12 bit CAN1_F1R2 ; \ CAN1_F1R2_FB12, Filter bits
: CAN1_F1R2_FB13 ( -- x addr ) 13 bit CAN1_F1R2 ; \ CAN1_F1R2_FB13, Filter bits
: CAN1_F1R2_FB14 ( -- x addr ) 14 bit CAN1_F1R2 ; \ CAN1_F1R2_FB14, Filter bits
: CAN1_F1R2_FB15 ( -- x addr ) 15 bit CAN1_F1R2 ; \ CAN1_F1R2_FB15, Filter bits
: CAN1_F1R2_FB16 ( -- x addr ) 16 bit CAN1_F1R2 ; \ CAN1_F1R2_FB16, Filter bits
: CAN1_F1R2_FB17 ( -- x addr ) 17 bit CAN1_F1R2 ; \ CAN1_F1R2_FB17, Filter bits
: CAN1_F1R2_FB18 ( -- x addr ) 18 bit CAN1_F1R2 ; \ CAN1_F1R2_FB18, Filter bits
: CAN1_F1R2_FB19 ( -- x addr ) 19 bit CAN1_F1R2 ; \ CAN1_F1R2_FB19, Filter bits
: CAN1_F1R2_FB20 ( -- x addr ) 20 bit CAN1_F1R2 ; \ CAN1_F1R2_FB20, Filter bits
: CAN1_F1R2_FB21 ( -- x addr ) 21 bit CAN1_F1R2 ; \ CAN1_F1R2_FB21, Filter bits
: CAN1_F1R2_FB22 ( -- x addr ) 22 bit CAN1_F1R2 ; \ CAN1_F1R2_FB22, Filter bits
: CAN1_F1R2_FB23 ( -- x addr ) 23 bit CAN1_F1R2 ; \ CAN1_F1R2_FB23, Filter bits
: CAN1_F1R2_FB24 ( -- x addr ) 24 bit CAN1_F1R2 ; \ CAN1_F1R2_FB24, Filter bits
: CAN1_F1R2_FB25 ( -- x addr ) 25 bit CAN1_F1R2 ; \ CAN1_F1R2_FB25, Filter bits
: CAN1_F1R2_FB26 ( -- x addr ) 26 bit CAN1_F1R2 ; \ CAN1_F1R2_FB26, Filter bits
: CAN1_F1R2_FB27 ( -- x addr ) 27 bit CAN1_F1R2 ; \ CAN1_F1R2_FB27, Filter bits
: CAN1_F1R2_FB28 ( -- x addr ) 28 bit CAN1_F1R2 ; \ CAN1_F1R2_FB28, Filter bits
: CAN1_F1R2_FB29 ( -- x addr ) 29 bit CAN1_F1R2 ; \ CAN1_F1R2_FB29, Filter bits
: CAN1_F1R2_FB30 ( -- x addr ) 30 bit CAN1_F1R2 ; \ CAN1_F1R2_FB30, Filter bits
: CAN1_F1R2_FB31 ( -- x addr ) 31 bit CAN1_F1R2 ; \ CAN1_F1R2_FB31, Filter bits

\ CAN1_F2R1 (read-write) Reset:0x00000000
: CAN1_F2R1_FB0 ( -- x addr ) 0 bit CAN1_F2R1 ; \ CAN1_F2R1_FB0, Filter bits
: CAN1_F2R1_FB1 ( -- x addr ) 1 bit CAN1_F2R1 ; \ CAN1_F2R1_FB1, Filter bits
: CAN1_F2R1_FB2 ( -- x addr ) 2 bit CAN1_F2R1 ; \ CAN1_F2R1_FB2, Filter bits
: CAN1_F2R1_FB3 ( -- x addr ) 3 bit CAN1_F2R1 ; \ CAN1_F2R1_FB3, Filter bits
: CAN1_F2R1_FB4 ( -- x addr ) 4 bit CAN1_F2R1 ; \ CAN1_F2R1_FB4, Filter bits
: CAN1_F2R1_FB5 ( -- x addr ) 5 bit CAN1_F2R1 ; \ CAN1_F2R1_FB5, Filter bits
: CAN1_F2R1_FB6 ( -- x addr ) 6 bit CAN1_F2R1 ; \ CAN1_F2R1_FB6, Filter bits
: CAN1_F2R1_FB7 ( -- x addr ) 7 bit CAN1_F2R1 ; \ CAN1_F2R1_FB7, Filter bits
: CAN1_F2R1_FB8 ( -- x addr ) 8 bit CAN1_F2R1 ; \ CAN1_F2R1_FB8, Filter bits
: CAN1_F2R1_FB9 ( -- x addr ) 9 bit CAN1_F2R1 ; \ CAN1_F2R1_FB9, Filter bits
: CAN1_F2R1_FB10 ( -- x addr ) 10 bit CAN1_F2R1 ; \ CAN1_F2R1_FB10, Filter bits
: CAN1_F2R1_FB11 ( -- x addr ) 11 bit CAN1_F2R1 ; \ CAN1_F2R1_FB11, Filter bits
: CAN1_F2R1_FB12 ( -- x addr ) 12 bit CAN1_F2R1 ; \ CAN1_F2R1_FB12, Filter bits
: CAN1_F2R1_FB13 ( -- x addr ) 13 bit CAN1_F2R1 ; \ CAN1_F2R1_FB13, Filter bits
: CAN1_F2R1_FB14 ( -- x addr ) 14 bit CAN1_F2R1 ; \ CAN1_F2R1_FB14, Filter bits
: CAN1_F2R1_FB15 ( -- x addr ) 15 bit CAN1_F2R1 ; \ CAN1_F2R1_FB15, Filter bits
: CAN1_F2R1_FB16 ( -- x addr ) 16 bit CAN1_F2R1 ; \ CAN1_F2R1_FB16, Filter bits
: CAN1_F2R1_FB17 ( -- x addr ) 17 bit CAN1_F2R1 ; \ CAN1_F2R1_FB17, Filter bits
: CAN1_F2R1_FB18 ( -- x addr ) 18 bit CAN1_F2R1 ; \ CAN1_F2R1_FB18, Filter bits
: CAN1_F2R1_FB19 ( -- x addr ) 19 bit CAN1_F2R1 ; \ CAN1_F2R1_FB19, Filter bits
: CAN1_F2R1_FB20 ( -- x addr ) 20 bit CAN1_F2R1 ; \ CAN1_F2R1_FB20, Filter bits
: CAN1_F2R1_FB21 ( -- x addr ) 21 bit CAN1_F2R1 ; \ CAN1_F2R1_FB21, Filter bits
: CAN1_F2R1_FB22 ( -- x addr ) 22 bit CAN1_F2R1 ; \ CAN1_F2R1_FB22, Filter bits
: CAN1_F2R1_FB23 ( -- x addr ) 23 bit CAN1_F2R1 ; \ CAN1_F2R1_FB23, Filter bits
: CAN1_F2R1_FB24 ( -- x addr ) 24 bit CAN1_F2R1 ; \ CAN1_F2R1_FB24, Filter bits
: CAN1_F2R1_FB25 ( -- x addr ) 25 bit CAN1_F2R1 ; \ CAN1_F2R1_FB25, Filter bits
: CAN1_F2R1_FB26 ( -- x addr ) 26 bit CAN1_F2R1 ; \ CAN1_F2R1_FB26, Filter bits
: CAN1_F2R1_FB27 ( -- x addr ) 27 bit CAN1_F2R1 ; \ CAN1_F2R1_FB27, Filter bits
: CAN1_F2R1_FB28 ( -- x addr ) 28 bit CAN1_F2R1 ; \ CAN1_F2R1_FB28, Filter bits
: CAN1_F2R1_FB29 ( -- x addr ) 29 bit CAN1_F2R1 ; \ CAN1_F2R1_FB29, Filter bits
: CAN1_F2R1_FB30 ( -- x addr ) 30 bit CAN1_F2R1 ; \ CAN1_F2R1_FB30, Filter bits
: CAN1_F2R1_FB31 ( -- x addr ) 31 bit CAN1_F2R1 ; \ CAN1_F2R1_FB31, Filter bits

\ CAN1_F2R2 (read-write) Reset:0x00000000
: CAN1_F2R2_FB0 ( -- x addr ) 0 bit CAN1_F2R2 ; \ CAN1_F2R2_FB0, Filter bits
: CAN1_F2R2_FB1 ( -- x addr ) 1 bit CAN1_F2R2 ; \ CAN1_F2R2_FB1, Filter bits
: CAN1_F2R2_FB2 ( -- x addr ) 2 bit CAN1_F2R2 ; \ CAN1_F2R2_FB2, Filter bits
: CAN1_F2R2_FB3 ( -- x addr ) 3 bit CAN1_F2R2 ; \ CAN1_F2R2_FB3, Filter bits
: CAN1_F2R2_FB4 ( -- x addr ) 4 bit CAN1_F2R2 ; \ CAN1_F2R2_FB4, Filter bits
: CAN1_F2R2_FB5 ( -- x addr ) 5 bit CAN1_F2R2 ; \ CAN1_F2R2_FB5, Filter bits
: CAN1_F2R2_FB6 ( -- x addr ) 6 bit CAN1_F2R2 ; \ CAN1_F2R2_FB6, Filter bits
: CAN1_F2R2_FB7 ( -- x addr ) 7 bit CAN1_F2R2 ; \ CAN1_F2R2_FB7, Filter bits
: CAN1_F2R2_FB8 ( -- x addr ) 8 bit CAN1_F2R2 ; \ CAN1_F2R2_FB8, Filter bits
: CAN1_F2R2_FB9 ( -- x addr ) 9 bit CAN1_F2R2 ; \ CAN1_F2R2_FB9, Filter bits
: CAN1_F2R2_FB10 ( -- x addr ) 10 bit CAN1_F2R2 ; \ CAN1_F2R2_FB10, Filter bits
: CAN1_F2R2_FB11 ( -- x addr ) 11 bit CAN1_F2R2 ; \ CAN1_F2R2_FB11, Filter bits
: CAN1_F2R2_FB12 ( -- x addr ) 12 bit CAN1_F2R2 ; \ CAN1_F2R2_FB12, Filter bits
: CAN1_F2R2_FB13 ( -- x addr ) 13 bit CAN1_F2R2 ; \ CAN1_F2R2_FB13, Filter bits
: CAN1_F2R2_FB14 ( -- x addr ) 14 bit CAN1_F2R2 ; \ CAN1_F2R2_FB14, Filter bits
: CAN1_F2R2_FB15 ( -- x addr ) 15 bit CAN1_F2R2 ; \ CAN1_F2R2_FB15, Filter bits
: CAN1_F2R2_FB16 ( -- x addr ) 16 bit CAN1_F2R2 ; \ CAN1_F2R2_FB16, Filter bits
: CAN1_F2R2_FB17 ( -- x addr ) 17 bit CAN1_F2R2 ; \ CAN1_F2R2_FB17, Filter bits
: CAN1_F2R2_FB18 ( -- x addr ) 18 bit CAN1_F2R2 ; \ CAN1_F2R2_FB18, Filter bits
: CAN1_F2R2_FB19 ( -- x addr ) 19 bit CAN1_F2R2 ; \ CAN1_F2R2_FB19, Filter bits
: CAN1_F2R2_FB20 ( -- x addr ) 20 bit CAN1_F2R2 ; \ CAN1_F2R2_FB20, Filter bits
: CAN1_F2R2_FB21 ( -- x addr ) 21 bit CAN1_F2R2 ; \ CAN1_F2R2_FB21, Filter bits
: CAN1_F2R2_FB22 ( -- x addr ) 22 bit CAN1_F2R2 ; \ CAN1_F2R2_FB22, Filter bits
: CAN1_F2R2_FB23 ( -- x addr ) 23 bit CAN1_F2R2 ; \ CAN1_F2R2_FB23, Filter bits
: CAN1_F2R2_FB24 ( -- x addr ) 24 bit CAN1_F2R2 ; \ CAN1_F2R2_FB24, Filter bits
: CAN1_F2R2_FB25 ( -- x addr ) 25 bit CAN1_F2R2 ; \ CAN1_F2R2_FB25, Filter bits
: CAN1_F2R2_FB26 ( -- x addr ) 26 bit CAN1_F2R2 ; \ CAN1_F2R2_FB26, Filter bits
: CAN1_F2R2_FB27 ( -- x addr ) 27 bit CAN1_F2R2 ; \ CAN1_F2R2_FB27, Filter bits
: CAN1_F2R2_FB28 ( -- x addr ) 28 bit CAN1_F2R2 ; \ CAN1_F2R2_FB28, Filter bits
: CAN1_F2R2_FB29 ( -- x addr ) 29 bit CAN1_F2R2 ; \ CAN1_F2R2_FB29, Filter bits
: CAN1_F2R2_FB30 ( -- x addr ) 30 bit CAN1_F2R2 ; \ CAN1_F2R2_FB30, Filter bits
: CAN1_F2R2_FB31 ( -- x addr ) 31 bit CAN1_F2R2 ; \ CAN1_F2R2_FB31, Filter bits

\ CAN1_F3R1 (read-write) Reset:0x00000000
: CAN1_F3R1_FB0 ( -- x addr ) 0 bit CAN1_F3R1 ; \ CAN1_F3R1_FB0, Filter bits
: CAN1_F3R1_FB1 ( -- x addr ) 1 bit CAN1_F3R1 ; \ CAN1_F3R1_FB1, Filter bits
: CAN1_F3R1_FB2 ( -- x addr ) 2 bit CAN1_F3R1 ; \ CAN1_F3R1_FB2, Filter bits
: CAN1_F3R1_FB3 ( -- x addr ) 3 bit CAN1_F3R1 ; \ CAN1_F3R1_FB3, Filter bits
: CAN1_F3R1_FB4 ( -- x addr ) 4 bit CAN1_F3R1 ; \ CAN1_F3R1_FB4, Filter bits
: CAN1_F3R1_FB5 ( -- x addr ) 5 bit CAN1_F3R1 ; \ CAN1_F3R1_FB5, Filter bits
: CAN1_F3R1_FB6 ( -- x addr ) 6 bit CAN1_F3R1 ; \ CAN1_F3R1_FB6, Filter bits
: CAN1_F3R1_FB7 ( -- x addr ) 7 bit CAN1_F3R1 ; \ CAN1_F3R1_FB7, Filter bits
: CAN1_F3R1_FB8 ( -- x addr ) 8 bit CAN1_F3R1 ; \ CAN1_F3R1_FB8, Filter bits
: CAN1_F3R1_FB9 ( -- x addr ) 9 bit CAN1_F3R1 ; \ CAN1_F3R1_FB9, Filter bits
: CAN1_F3R1_FB10 ( -- x addr ) 10 bit CAN1_F3R1 ; \ CAN1_F3R1_FB10, Filter bits
: CAN1_F3R1_FB11 ( -- x addr ) 11 bit CAN1_F3R1 ; \ CAN1_F3R1_FB11, Filter bits
: CAN1_F3R1_FB12 ( -- x addr ) 12 bit CAN1_F3R1 ; \ CAN1_F3R1_FB12, Filter bits
: CAN1_F3R1_FB13 ( -- x addr ) 13 bit CAN1_F3R1 ; \ CAN1_F3R1_FB13, Filter bits
: CAN1_F3R1_FB14 ( -- x addr ) 14 bit CAN1_F3R1 ; \ CAN1_F3R1_FB14, Filter bits
: CAN1_F3R1_FB15 ( -- x addr ) 15 bit CAN1_F3R1 ; \ CAN1_F3R1_FB15, Filter bits
: CAN1_F3R1_FB16 ( -- x addr ) 16 bit CAN1_F3R1 ; \ CAN1_F3R1_FB16, Filter bits
: CAN1_F3R1_FB17 ( -- x addr ) 17 bit CAN1_F3R1 ; \ CAN1_F3R1_FB17, Filter bits
: CAN1_F3R1_FB18 ( -- x addr ) 18 bit CAN1_F3R1 ; \ CAN1_F3R1_FB18, Filter bits
: CAN1_F3R1_FB19 ( -- x addr ) 19 bit CAN1_F3R1 ; \ CAN1_F3R1_FB19, Filter bits
: CAN1_F3R1_FB20 ( -- x addr ) 20 bit CAN1_F3R1 ; \ CAN1_F3R1_FB20, Filter bits
: CAN1_F3R1_FB21 ( -- x addr ) 21 bit CAN1_F3R1 ; \ CAN1_F3R1_FB21, Filter bits
: CAN1_F3R1_FB22 ( -- x addr ) 22 bit CAN1_F3R1 ; \ CAN1_F3R1_FB22, Filter bits
: CAN1_F3R1_FB23 ( -- x addr ) 23 bit CAN1_F3R1 ; \ CAN1_F3R1_FB23, Filter bits
: CAN1_F3R1_FB24 ( -- x addr ) 24 bit CAN1_F3R1 ; \ CAN1_F3R1_FB24, Filter bits
: CAN1_F3R1_FB25 ( -- x addr ) 25 bit CAN1_F3R1 ; \ CAN1_F3R1_FB25, Filter bits
: CAN1_F3R1_FB26 ( -- x addr ) 26 bit CAN1_F3R1 ; \ CAN1_F3R1_FB26, Filter bits
: CAN1_F3R1_FB27 ( -- x addr ) 27 bit CAN1_F3R1 ; \ CAN1_F3R1_FB27, Filter bits
: CAN1_F3R1_FB28 ( -- x addr ) 28 bit CAN1_F3R1 ; \ CAN1_F3R1_FB28, Filter bits
: CAN1_F3R1_FB29 ( -- x addr ) 29 bit CAN1_F3R1 ; \ CAN1_F3R1_FB29, Filter bits
: CAN1_F3R1_FB30 ( -- x addr ) 30 bit CAN1_F3R1 ; \ CAN1_F3R1_FB30, Filter bits
: CAN1_F3R1_FB31 ( -- x addr ) 31 bit CAN1_F3R1 ; \ CAN1_F3R1_FB31, Filter bits

\ CAN1_F3R2 (read-write) Reset:0x00000000
: CAN1_F3R2_FB0 ( -- x addr ) 0 bit CAN1_F3R2 ; \ CAN1_F3R2_FB0, Filter bits
: CAN1_F3R2_FB1 ( -- x addr ) 1 bit CAN1_F3R2 ; \ CAN1_F3R2_FB1, Filter bits
: CAN1_F3R2_FB2 ( -- x addr ) 2 bit CAN1_F3R2 ; \ CAN1_F3R2_FB2, Filter bits
: CAN1_F3R2_FB3 ( -- x addr ) 3 bit CAN1_F3R2 ; \ CAN1_F3R2_FB3, Filter bits
: CAN1_F3R2_FB4 ( -- x addr ) 4 bit CAN1_F3R2 ; \ CAN1_F3R2_FB4, Filter bits
: CAN1_F3R2_FB5 ( -- x addr ) 5 bit CAN1_F3R2 ; \ CAN1_F3R2_FB5, Filter bits
: CAN1_F3R2_FB6 ( -- x addr ) 6 bit CAN1_F3R2 ; \ CAN1_F3R2_FB6, Filter bits
: CAN1_F3R2_FB7 ( -- x addr ) 7 bit CAN1_F3R2 ; \ CAN1_F3R2_FB7, Filter bits
: CAN1_F3R2_FB8 ( -- x addr ) 8 bit CAN1_F3R2 ; \ CAN1_F3R2_FB8, Filter bits
: CAN1_F3R2_FB9 ( -- x addr ) 9 bit CAN1_F3R2 ; \ CAN1_F3R2_FB9, Filter bits
: CAN1_F3R2_FB10 ( -- x addr ) 10 bit CAN1_F3R2 ; \ CAN1_F3R2_FB10, Filter bits
: CAN1_F3R2_FB11 ( -- x addr ) 11 bit CAN1_F3R2 ; \ CAN1_F3R2_FB11, Filter bits
: CAN1_F3R2_FB12 ( -- x addr ) 12 bit CAN1_F3R2 ; \ CAN1_F3R2_FB12, Filter bits
: CAN1_F3R2_FB13 ( -- x addr ) 13 bit CAN1_F3R2 ; \ CAN1_F3R2_FB13, Filter bits
: CAN1_F3R2_FB14 ( -- x addr ) 14 bit CAN1_F3R2 ; \ CAN1_F3R2_FB14, Filter bits
: CAN1_F3R2_FB15 ( -- x addr ) 15 bit CAN1_F3R2 ; \ CAN1_F3R2_FB15, Filter bits
: CAN1_F3R2_FB16 ( -- x addr ) 16 bit CAN1_F3R2 ; \ CAN1_F3R2_FB16, Filter bits
: CAN1_F3R2_FB17 ( -- x addr ) 17 bit CAN1_F3R2 ; \ CAN1_F3R2_FB17, Filter bits
: CAN1_F3R2_FB18 ( -- x addr ) 18 bit CAN1_F3R2 ; \ CAN1_F3R2_FB18, Filter bits
: CAN1_F3R2_FB19 ( -- x addr ) 19 bit CAN1_F3R2 ; \ CAN1_F3R2_FB19, Filter bits
: CAN1_F3R2_FB20 ( -- x addr ) 20 bit CAN1_F3R2 ; \ CAN1_F3R2_FB20, Filter bits
: CAN1_F3R2_FB21 ( -- x addr ) 21 bit CAN1_F3R2 ; \ CAN1_F3R2_FB21, Filter bits
: CAN1_F3R2_FB22 ( -- x addr ) 22 bit CAN1_F3R2 ; \ CAN1_F3R2_FB22, Filter bits
: CAN1_F3R2_FB23 ( -- x addr ) 23 bit CAN1_F3R2 ; \ CAN1_F3R2_FB23, Filter bits
: CAN1_F3R2_FB24 ( -- x addr ) 24 bit CAN1_F3R2 ; \ CAN1_F3R2_FB24, Filter bits
: CAN1_F3R2_FB25 ( -- x addr ) 25 bit CAN1_F3R2 ; \ CAN1_F3R2_FB25, Filter bits
: CAN1_F3R2_FB26 ( -- x addr ) 26 bit CAN1_F3R2 ; \ CAN1_F3R2_FB26, Filter bits
: CAN1_F3R2_FB27 ( -- x addr ) 27 bit CAN1_F3R2 ; \ CAN1_F3R2_FB27, Filter bits
: CAN1_F3R2_FB28 ( -- x addr ) 28 bit CAN1_F3R2 ; \ CAN1_F3R2_FB28, Filter bits
: CAN1_F3R2_FB29 ( -- x addr ) 29 bit CAN1_F3R2 ; \ CAN1_F3R2_FB29, Filter bits
: CAN1_F3R2_FB30 ( -- x addr ) 30 bit CAN1_F3R2 ; \ CAN1_F3R2_FB30, Filter bits
: CAN1_F3R2_FB31 ( -- x addr ) 31 bit CAN1_F3R2 ; \ CAN1_F3R2_FB31, Filter bits

\ CAN1_F4R1 (read-write) Reset:0x00000000
: CAN1_F4R1_FB0 ( -- x addr ) 0 bit CAN1_F4R1 ; \ CAN1_F4R1_FB0, Filter bits
: CAN1_F4R1_FB1 ( -- x addr ) 1 bit CAN1_F4R1 ; \ CAN1_F4R1_FB1, Filter bits
: CAN1_F4R1_FB2 ( -- x addr ) 2 bit CAN1_F4R1 ; \ CAN1_F4R1_FB2, Filter bits
: CAN1_F4R1_FB3 ( -- x addr ) 3 bit CAN1_F4R1 ; \ CAN1_F4R1_FB3, Filter bits
: CAN1_F4R1_FB4 ( -- x addr ) 4 bit CAN1_F4R1 ; \ CAN1_F4R1_FB4, Filter bits
: CAN1_F4R1_FB5 ( -- x addr ) 5 bit CAN1_F4R1 ; \ CAN1_F4R1_FB5, Filter bits
: CAN1_F4R1_FB6 ( -- x addr ) 6 bit CAN1_F4R1 ; \ CAN1_F4R1_FB6, Filter bits
: CAN1_F4R1_FB7 ( -- x addr ) 7 bit CAN1_F4R1 ; \ CAN1_F4R1_FB7, Filter bits
: CAN1_F4R1_FB8 ( -- x addr ) 8 bit CAN1_F4R1 ; \ CAN1_F4R1_FB8, Filter bits
: CAN1_F4R1_FB9 ( -- x addr ) 9 bit CAN1_F4R1 ; \ CAN1_F4R1_FB9, Filter bits
: CAN1_F4R1_FB10 ( -- x addr ) 10 bit CAN1_F4R1 ; \ CAN1_F4R1_FB10, Filter bits
: CAN1_F4R1_FB11 ( -- x addr ) 11 bit CAN1_F4R1 ; \ CAN1_F4R1_FB11, Filter bits
: CAN1_F4R1_FB12 ( -- x addr ) 12 bit CAN1_F4R1 ; \ CAN1_F4R1_FB12, Filter bits
: CAN1_F4R1_FB13 ( -- x addr ) 13 bit CAN1_F4R1 ; \ CAN1_F4R1_FB13, Filter bits
: CAN1_F4R1_FB14 ( -- x addr ) 14 bit CAN1_F4R1 ; \ CAN1_F4R1_FB14, Filter bits
: CAN1_F4R1_FB15 ( -- x addr ) 15 bit CAN1_F4R1 ; \ CAN1_F4R1_FB15, Filter bits
: CAN1_F4R1_FB16 ( -- x addr ) 16 bit CAN1_F4R1 ; \ CAN1_F4R1_FB16, Filter bits
: CAN1_F4R1_FB17 ( -- x addr ) 17 bit CAN1_F4R1 ; \ CAN1_F4R1_FB17, Filter bits
: CAN1_F4R1_FB18 ( -- x addr ) 18 bit CAN1_F4R1 ; \ CAN1_F4R1_FB18, Filter bits
: CAN1_F4R1_FB19 ( -- x addr ) 19 bit CAN1_F4R1 ; \ CAN1_F4R1_FB19, Filter bits
: CAN1_F4R1_FB20 ( -- x addr ) 20 bit CAN1_F4R1 ; \ CAN1_F4R1_FB20, Filter bits
: CAN1_F4R1_FB21 ( -- x addr ) 21 bit CAN1_F4R1 ; \ CAN1_F4R1_FB21, Filter bits
: CAN1_F4R1_FB22 ( -- x addr ) 22 bit CAN1_F4R1 ; \ CAN1_F4R1_FB22, Filter bits
: CAN1_F4R1_FB23 ( -- x addr ) 23 bit CAN1_F4R1 ; \ CAN1_F4R1_FB23, Filter bits
: CAN1_F4R1_FB24 ( -- x addr ) 24 bit CAN1_F4R1 ; \ CAN1_F4R1_FB24, Filter bits
: CAN1_F4R1_FB25 ( -- x addr ) 25 bit CAN1_F4R1 ; \ CAN1_F4R1_FB25, Filter bits
: CAN1_F4R1_FB26 ( -- x addr ) 26 bit CAN1_F4R1 ; \ CAN1_F4R1_FB26, Filter bits
: CAN1_F4R1_FB27 ( -- x addr ) 27 bit CAN1_F4R1 ; \ CAN1_F4R1_FB27, Filter bits
: CAN1_F4R1_FB28 ( -- x addr ) 28 bit CAN1_F4R1 ; \ CAN1_F4R1_FB28, Filter bits
: CAN1_F4R1_FB29 ( -- x addr ) 29 bit CAN1_F4R1 ; \ CAN1_F4R1_FB29, Filter bits
: CAN1_F4R1_FB30 ( -- x addr ) 30 bit CAN1_F4R1 ; \ CAN1_F4R1_FB30, Filter bits
: CAN1_F4R1_FB31 ( -- x addr ) 31 bit CAN1_F4R1 ; \ CAN1_F4R1_FB31, Filter bits

\ CAN1_F4R2 (read-write) Reset:0x00000000
: CAN1_F4R2_FB0 ( -- x addr ) 0 bit CAN1_F4R2 ; \ CAN1_F4R2_FB0, Filter bits
: CAN1_F4R2_FB1 ( -- x addr ) 1 bit CAN1_F4R2 ; \ CAN1_F4R2_FB1, Filter bits
: CAN1_F4R2_FB2 ( -- x addr ) 2 bit CAN1_F4R2 ; \ CAN1_F4R2_FB2, Filter bits
: CAN1_F4R2_FB3 ( -- x addr ) 3 bit CAN1_F4R2 ; \ CAN1_F4R2_FB3, Filter bits
: CAN1_F4R2_FB4 ( -- x addr ) 4 bit CAN1_F4R2 ; \ CAN1_F4R2_FB4, Filter bits
: CAN1_F4R2_FB5 ( -- x addr ) 5 bit CAN1_F4R2 ; \ CAN1_F4R2_FB5, Filter bits
: CAN1_F4R2_FB6 ( -- x addr ) 6 bit CAN1_F4R2 ; \ CAN1_F4R2_FB6, Filter bits
: CAN1_F4R2_FB7 ( -- x addr ) 7 bit CAN1_F4R2 ; \ CAN1_F4R2_FB7, Filter bits
: CAN1_F4R2_FB8 ( -- x addr ) 8 bit CAN1_F4R2 ; \ CAN1_F4R2_FB8, Filter bits
: CAN1_F4R2_FB9 ( -- x addr ) 9 bit CAN1_F4R2 ; \ CAN1_F4R2_FB9, Filter bits
: CAN1_F4R2_FB10 ( -- x addr ) 10 bit CAN1_F4R2 ; \ CAN1_F4R2_FB10, Filter bits
: CAN1_F4R2_FB11 ( -- x addr ) 11 bit CAN1_F4R2 ; \ CAN1_F4R2_FB11, Filter bits
: CAN1_F4R2_FB12 ( -- x addr ) 12 bit CAN1_F4R2 ; \ CAN1_F4R2_FB12, Filter bits
: CAN1_F4R2_FB13 ( -- x addr ) 13 bit CAN1_F4R2 ; \ CAN1_F4R2_FB13, Filter bits
: CAN1_F4R2_FB14 ( -- x addr ) 14 bit CAN1_F4R2 ; \ CAN1_F4R2_FB14, Filter bits
: CAN1_F4R2_FB15 ( -- x addr ) 15 bit CAN1_F4R2 ; \ CAN1_F4R2_FB15, Filter bits
: CAN1_F4R2_FB16 ( -- x addr ) 16 bit CAN1_F4R2 ; \ CAN1_F4R2_FB16, Filter bits
: CAN1_F4R2_FB17 ( -- x addr ) 17 bit CAN1_F4R2 ; \ CAN1_F4R2_FB17, Filter bits
: CAN1_F4R2_FB18 ( -- x addr ) 18 bit CAN1_F4R2 ; \ CAN1_F4R2_FB18, Filter bits
: CAN1_F4R2_FB19 ( -- x addr ) 19 bit CAN1_F4R2 ; \ CAN1_F4R2_FB19, Filter bits
: CAN1_F4R2_FB20 ( -- x addr ) 20 bit CAN1_F4R2 ; \ CAN1_F4R2_FB20, Filter bits
: CAN1_F4R2_FB21 ( -- x addr ) 21 bit CAN1_F4R2 ; \ CAN1_F4R2_FB21, Filter bits
: CAN1_F4R2_FB22 ( -- x addr ) 22 bit CAN1_F4R2 ; \ CAN1_F4R2_FB22, Filter bits
: CAN1_F4R2_FB23 ( -- x addr ) 23 bit CAN1_F4R2 ; \ CAN1_F4R2_FB23, Filter bits
: CAN1_F4R2_FB24 ( -- x addr ) 24 bit CAN1_F4R2 ; \ CAN1_F4R2_FB24, Filter bits
: CAN1_F4R2_FB25 ( -- x addr ) 25 bit CAN1_F4R2 ; \ CAN1_F4R2_FB25, Filter bits
: CAN1_F4R2_FB26 ( -- x addr ) 26 bit CAN1_F4R2 ; \ CAN1_F4R2_FB26, Filter bits
: CAN1_F4R2_FB27 ( -- x addr ) 27 bit CAN1_F4R2 ; \ CAN1_F4R2_FB27, Filter bits
: CAN1_F4R2_FB28 ( -- x addr ) 28 bit CAN1_F4R2 ; \ CAN1_F4R2_FB28, Filter bits
: CAN1_F4R2_FB29 ( -- x addr ) 29 bit CAN1_F4R2 ; \ CAN1_F4R2_FB29, Filter bits
: CAN1_F4R2_FB30 ( -- x addr ) 30 bit CAN1_F4R2 ; \ CAN1_F4R2_FB30, Filter bits
: CAN1_F4R2_FB31 ( -- x addr ) 31 bit CAN1_F4R2 ; \ CAN1_F4R2_FB31, Filter bits

\ CAN1_F5R1 (read-write) Reset:0x00000000
: CAN1_F5R1_FB0 ( -- x addr ) 0 bit CAN1_F5R1 ; \ CAN1_F5R1_FB0, Filter bits
: CAN1_F5R1_FB1 ( -- x addr ) 1 bit CAN1_F5R1 ; \ CAN1_F5R1_FB1, Filter bits
: CAN1_F5R1_FB2 ( -- x addr ) 2 bit CAN1_F5R1 ; \ CAN1_F5R1_FB2, Filter bits
: CAN1_F5R1_FB3 ( -- x addr ) 3 bit CAN1_F5R1 ; \ CAN1_F5R1_FB3, Filter bits
: CAN1_F5R1_FB4 ( -- x addr ) 4 bit CAN1_F5R1 ; \ CAN1_F5R1_FB4, Filter bits
: CAN1_F5R1_FB5 ( -- x addr ) 5 bit CAN1_F5R1 ; \ CAN1_F5R1_FB5, Filter bits
: CAN1_F5R1_FB6 ( -- x addr ) 6 bit CAN1_F5R1 ; \ CAN1_F5R1_FB6, Filter bits
: CAN1_F5R1_FB7 ( -- x addr ) 7 bit CAN1_F5R1 ; \ CAN1_F5R1_FB7, Filter bits
: CAN1_F5R1_FB8 ( -- x addr ) 8 bit CAN1_F5R1 ; \ CAN1_F5R1_FB8, Filter bits
: CAN1_F5R1_FB9 ( -- x addr ) 9 bit CAN1_F5R1 ; \ CAN1_F5R1_FB9, Filter bits
: CAN1_F5R1_FB10 ( -- x addr ) 10 bit CAN1_F5R1 ; \ CAN1_F5R1_FB10, Filter bits
: CAN1_F5R1_FB11 ( -- x addr ) 11 bit CAN1_F5R1 ; \ CAN1_F5R1_FB11, Filter bits
: CAN1_F5R1_FB12 ( -- x addr ) 12 bit CAN1_F5R1 ; \ CAN1_F5R1_FB12, Filter bits
: CAN1_F5R1_FB13 ( -- x addr ) 13 bit CAN1_F5R1 ; \ CAN1_F5R1_FB13, Filter bits
: CAN1_F5R1_FB14 ( -- x addr ) 14 bit CAN1_F5R1 ; \ CAN1_F5R1_FB14, Filter bits
: CAN1_F5R1_FB15 ( -- x addr ) 15 bit CAN1_F5R1 ; \ CAN1_F5R1_FB15, Filter bits
: CAN1_F5R1_FB16 ( -- x addr ) 16 bit CAN1_F5R1 ; \ CAN1_F5R1_FB16, Filter bits
: CAN1_F5R1_FB17 ( -- x addr ) 17 bit CAN1_F5R1 ; \ CAN1_F5R1_FB17, Filter bits
: CAN1_F5R1_FB18 ( -- x addr ) 18 bit CAN1_F5R1 ; \ CAN1_F5R1_FB18, Filter bits
: CAN1_F5R1_FB19 ( -- x addr ) 19 bit CAN1_F5R1 ; \ CAN1_F5R1_FB19, Filter bits
: CAN1_F5R1_FB20 ( -- x addr ) 20 bit CAN1_F5R1 ; \ CAN1_F5R1_FB20, Filter bits
: CAN1_F5R1_FB21 ( -- x addr ) 21 bit CAN1_F5R1 ; \ CAN1_F5R1_FB21, Filter bits
: CAN1_F5R1_FB22 ( -- x addr ) 22 bit CAN1_F5R1 ; \ CAN1_F5R1_FB22, Filter bits
: CAN1_F5R1_FB23 ( -- x addr ) 23 bit CAN1_F5R1 ; \ CAN1_F5R1_FB23, Filter bits
: CAN1_F5R1_FB24 ( -- x addr ) 24 bit CAN1_F5R1 ; \ CAN1_F5R1_FB24, Filter bits
: CAN1_F5R1_FB25 ( -- x addr ) 25 bit CAN1_F5R1 ; \ CAN1_F5R1_FB25, Filter bits
: CAN1_F5R1_FB26 ( -- x addr ) 26 bit CAN1_F5R1 ; \ CAN1_F5R1_FB26, Filter bits
: CAN1_F5R1_FB27 ( -- x addr ) 27 bit CAN1_F5R1 ; \ CAN1_F5R1_FB27, Filter bits
: CAN1_F5R1_FB28 ( -- x addr ) 28 bit CAN1_F5R1 ; \ CAN1_F5R1_FB28, Filter bits
: CAN1_F5R1_FB29 ( -- x addr ) 29 bit CAN1_F5R1 ; \ CAN1_F5R1_FB29, Filter bits
: CAN1_F5R1_FB30 ( -- x addr ) 30 bit CAN1_F5R1 ; \ CAN1_F5R1_FB30, Filter bits
: CAN1_F5R1_FB31 ( -- x addr ) 31 bit CAN1_F5R1 ; \ CAN1_F5R1_FB31, Filter bits

\ CAN1_F5R2 (read-write) Reset:0x00000000
: CAN1_F5R2_FB0 ( -- x addr ) 0 bit CAN1_F5R2 ; \ CAN1_F5R2_FB0, Filter bits
: CAN1_F5R2_FB1 ( -- x addr ) 1 bit CAN1_F5R2 ; \ CAN1_F5R2_FB1, Filter bits
: CAN1_F5R2_FB2 ( -- x addr ) 2 bit CAN1_F5R2 ; \ CAN1_F5R2_FB2, Filter bits
: CAN1_F5R2_FB3 ( -- x addr ) 3 bit CAN1_F5R2 ; \ CAN1_F5R2_FB3, Filter bits
: CAN1_F5R2_FB4 ( -- x addr ) 4 bit CAN1_F5R2 ; \ CAN1_F5R2_FB4, Filter bits
: CAN1_F5R2_FB5 ( -- x addr ) 5 bit CAN1_F5R2 ; \ CAN1_F5R2_FB5, Filter bits
: CAN1_F5R2_FB6 ( -- x addr ) 6 bit CAN1_F5R2 ; \ CAN1_F5R2_FB6, Filter bits
: CAN1_F5R2_FB7 ( -- x addr ) 7 bit CAN1_F5R2 ; \ CAN1_F5R2_FB7, Filter bits
: CAN1_F5R2_FB8 ( -- x addr ) 8 bit CAN1_F5R2 ; \ CAN1_F5R2_FB8, Filter bits
: CAN1_F5R2_FB9 ( -- x addr ) 9 bit CAN1_F5R2 ; \ CAN1_F5R2_FB9, Filter bits
: CAN1_F5R2_FB10 ( -- x addr ) 10 bit CAN1_F5R2 ; \ CAN1_F5R2_FB10, Filter bits
: CAN1_F5R2_FB11 ( -- x addr ) 11 bit CAN1_F5R2 ; \ CAN1_F5R2_FB11, Filter bits
: CAN1_F5R2_FB12 ( -- x addr ) 12 bit CAN1_F5R2 ; \ CAN1_F5R2_FB12, Filter bits
: CAN1_F5R2_FB13 ( -- x addr ) 13 bit CAN1_F5R2 ; \ CAN1_F5R2_FB13, Filter bits
: CAN1_F5R2_FB14 ( -- x addr ) 14 bit CAN1_F5R2 ; \ CAN1_F5R2_FB14, Filter bits
: CAN1_F5R2_FB15 ( -- x addr ) 15 bit CAN1_F5R2 ; \ CAN1_F5R2_FB15, Filter bits
: CAN1_F5R2_FB16 ( -- x addr ) 16 bit CAN1_F5R2 ; \ CAN1_F5R2_FB16, Filter bits
: CAN1_F5R2_FB17 ( -- x addr ) 17 bit CAN1_F5R2 ; \ CAN1_F5R2_FB17, Filter bits
: CAN1_F5R2_FB18 ( -- x addr ) 18 bit CAN1_F5R2 ; \ CAN1_F5R2_FB18, Filter bits
: CAN1_F5R2_FB19 ( -- x addr ) 19 bit CAN1_F5R2 ; \ CAN1_F5R2_FB19, Filter bits
: CAN1_F5R2_FB20 ( -- x addr ) 20 bit CAN1_F5R2 ; \ CAN1_F5R2_FB20, Filter bits
: CAN1_F5R2_FB21 ( -- x addr ) 21 bit CAN1_F5R2 ; \ CAN1_F5R2_FB21, Filter bits
: CAN1_F5R2_FB22 ( -- x addr ) 22 bit CAN1_F5R2 ; \ CAN1_F5R2_FB22, Filter bits
: CAN1_F5R2_FB23 ( -- x addr ) 23 bit CAN1_F5R2 ; \ CAN1_F5R2_FB23, Filter bits
: CAN1_F5R2_FB24 ( -- x addr ) 24 bit CAN1_F5R2 ; \ CAN1_F5R2_FB24, Filter bits
: CAN1_F5R2_FB25 ( -- x addr ) 25 bit CAN1_F5R2 ; \ CAN1_F5R2_FB25, Filter bits
: CAN1_F5R2_FB26 ( -- x addr ) 26 bit CAN1_F5R2 ; \ CAN1_F5R2_FB26, Filter bits
: CAN1_F5R2_FB27 ( -- x addr ) 27 bit CAN1_F5R2 ; \ CAN1_F5R2_FB27, Filter bits
: CAN1_F5R2_FB28 ( -- x addr ) 28 bit CAN1_F5R2 ; \ CAN1_F5R2_FB28, Filter bits
: CAN1_F5R2_FB29 ( -- x addr ) 29 bit CAN1_F5R2 ; \ CAN1_F5R2_FB29, Filter bits
: CAN1_F5R2_FB30 ( -- x addr ) 30 bit CAN1_F5R2 ; \ CAN1_F5R2_FB30, Filter bits
: CAN1_F5R2_FB31 ( -- x addr ) 31 bit CAN1_F5R2 ; \ CAN1_F5R2_FB31, Filter bits

\ CAN1_F6R1 (read-write) Reset:0x00000000
: CAN1_F6R1_FB0 ( -- x addr ) 0 bit CAN1_F6R1 ; \ CAN1_F6R1_FB0, Filter bits
: CAN1_F6R1_FB1 ( -- x addr ) 1 bit CAN1_F6R1 ; \ CAN1_F6R1_FB1, Filter bits
: CAN1_F6R1_FB2 ( -- x addr ) 2 bit CAN1_F6R1 ; \ CAN1_F6R1_FB2, Filter bits
: CAN1_F6R1_FB3 ( -- x addr ) 3 bit CAN1_F6R1 ; \ CAN1_F6R1_FB3, Filter bits
: CAN1_F6R1_FB4 ( -- x addr ) 4 bit CAN1_F6R1 ; \ CAN1_F6R1_FB4, Filter bits
: CAN1_F6R1_FB5 ( -- x addr ) 5 bit CAN1_F6R1 ; \ CAN1_F6R1_FB5, Filter bits
: CAN1_F6R1_FB6 ( -- x addr ) 6 bit CAN1_F6R1 ; \ CAN1_F6R1_FB6, Filter bits
: CAN1_F6R1_FB7 ( -- x addr ) 7 bit CAN1_F6R1 ; \ CAN1_F6R1_FB7, Filter bits
: CAN1_F6R1_FB8 ( -- x addr ) 8 bit CAN1_F6R1 ; \ CAN1_F6R1_FB8, Filter bits
: CAN1_F6R1_FB9 ( -- x addr ) 9 bit CAN1_F6R1 ; \ CAN1_F6R1_FB9, Filter bits
: CAN1_F6R1_FB10 ( -- x addr ) 10 bit CAN1_F6R1 ; \ CAN1_F6R1_FB10, Filter bits
: CAN1_F6R1_FB11 ( -- x addr ) 11 bit CAN1_F6R1 ; \ CAN1_F6R1_FB11, Filter bits
: CAN1_F6R1_FB12 ( -- x addr ) 12 bit CAN1_F6R1 ; \ CAN1_F6R1_FB12, Filter bits
: CAN1_F6R1_FB13 ( -- x addr ) 13 bit CAN1_F6R1 ; \ CAN1_F6R1_FB13, Filter bits
: CAN1_F6R1_FB14 ( -- x addr ) 14 bit CAN1_F6R1 ; \ CAN1_F6R1_FB14, Filter bits
: CAN1_F6R1_FB15 ( -- x addr ) 15 bit CAN1_F6R1 ; \ CAN1_F6R1_FB15, Filter bits
: CAN1_F6R1_FB16 ( -- x addr ) 16 bit CAN1_F6R1 ; \ CAN1_F6R1_FB16, Filter bits
: CAN1_F6R1_FB17 ( -- x addr ) 17 bit CAN1_F6R1 ; \ CAN1_F6R1_FB17, Filter bits
: CAN1_F6R1_FB18 ( -- x addr ) 18 bit CAN1_F6R1 ; \ CAN1_F6R1_FB18, Filter bits
: CAN1_F6R1_FB19 ( -- x addr ) 19 bit CAN1_F6R1 ; \ CAN1_F6R1_FB19, Filter bits
: CAN1_F6R1_FB20 ( -- x addr ) 20 bit CAN1_F6R1 ; \ CAN1_F6R1_FB20, Filter bits
: CAN1_F6R1_FB21 ( -- x addr ) 21 bit CAN1_F6R1 ; \ CAN1_F6R1_FB21, Filter bits
: CAN1_F6R1_FB22 ( -- x addr ) 22 bit CAN1_F6R1 ; \ CAN1_F6R1_FB22, Filter bits
: CAN1_F6R1_FB23 ( -- x addr ) 23 bit CAN1_F6R1 ; \ CAN1_F6R1_FB23, Filter bits
: CAN1_F6R1_FB24 ( -- x addr ) 24 bit CAN1_F6R1 ; \ CAN1_F6R1_FB24, Filter bits
: CAN1_F6R1_FB25 ( -- x addr ) 25 bit CAN1_F6R1 ; \ CAN1_F6R1_FB25, Filter bits
: CAN1_F6R1_FB26 ( -- x addr ) 26 bit CAN1_F6R1 ; \ CAN1_F6R1_FB26, Filter bits
: CAN1_F6R1_FB27 ( -- x addr ) 27 bit CAN1_F6R1 ; \ CAN1_F6R1_FB27, Filter bits
: CAN1_F6R1_FB28 ( -- x addr ) 28 bit CAN1_F6R1 ; \ CAN1_F6R1_FB28, Filter bits
: CAN1_F6R1_FB29 ( -- x addr ) 29 bit CAN1_F6R1 ; \ CAN1_F6R1_FB29, Filter bits
: CAN1_F6R1_FB30 ( -- x addr ) 30 bit CAN1_F6R1 ; \ CAN1_F6R1_FB30, Filter bits
: CAN1_F6R1_FB31 ( -- x addr ) 31 bit CAN1_F6R1 ; \ CAN1_F6R1_FB31, Filter bits

\ CAN1_F6R2 (read-write) Reset:0x00000000
: CAN1_F6R2_FB0 ( -- x addr ) 0 bit CAN1_F6R2 ; \ CAN1_F6R2_FB0, Filter bits
: CAN1_F6R2_FB1 ( -- x addr ) 1 bit CAN1_F6R2 ; \ CAN1_F6R2_FB1, Filter bits
: CAN1_F6R2_FB2 ( -- x addr ) 2 bit CAN1_F6R2 ; \ CAN1_F6R2_FB2, Filter bits
: CAN1_F6R2_FB3 ( -- x addr ) 3 bit CAN1_F6R2 ; \ CAN1_F6R2_FB3, Filter bits
: CAN1_F6R2_FB4 ( -- x addr ) 4 bit CAN1_F6R2 ; \ CAN1_F6R2_FB4, Filter bits
: CAN1_F6R2_FB5 ( -- x addr ) 5 bit CAN1_F6R2 ; \ CAN1_F6R2_FB5, Filter bits
: CAN1_F6R2_FB6 ( -- x addr ) 6 bit CAN1_F6R2 ; \ CAN1_F6R2_FB6, Filter bits
: CAN1_F6R2_FB7 ( -- x addr ) 7 bit CAN1_F6R2 ; \ CAN1_F6R2_FB7, Filter bits
: CAN1_F6R2_FB8 ( -- x addr ) 8 bit CAN1_F6R2 ; \ CAN1_F6R2_FB8, Filter bits
: CAN1_F6R2_FB9 ( -- x addr ) 9 bit CAN1_F6R2 ; \ CAN1_F6R2_FB9, Filter bits
: CAN1_F6R2_FB10 ( -- x addr ) 10 bit CAN1_F6R2 ; \ CAN1_F6R2_FB10, Filter bits
: CAN1_F6R2_FB11 ( -- x addr ) 11 bit CAN1_F6R2 ; \ CAN1_F6R2_FB11, Filter bits
: CAN1_F6R2_FB12 ( -- x addr ) 12 bit CAN1_F6R2 ; \ CAN1_F6R2_FB12, Filter bits
: CAN1_F6R2_FB13 ( -- x addr ) 13 bit CAN1_F6R2 ; \ CAN1_F6R2_FB13, Filter bits
: CAN1_F6R2_FB14 ( -- x addr ) 14 bit CAN1_F6R2 ; \ CAN1_F6R2_FB14, Filter bits
: CAN1_F6R2_FB15 ( -- x addr ) 15 bit CAN1_F6R2 ; \ CAN1_F6R2_FB15, Filter bits
: CAN1_F6R2_FB16 ( -- x addr ) 16 bit CAN1_F6R2 ; \ CAN1_F6R2_FB16, Filter bits
: CAN1_F6R2_FB17 ( -- x addr ) 17 bit CAN1_F6R2 ; \ CAN1_F6R2_FB17, Filter bits
: CAN1_F6R2_FB18 ( -- x addr ) 18 bit CAN1_F6R2 ; \ CAN1_F6R2_FB18, Filter bits
: CAN1_F6R2_FB19 ( -- x addr ) 19 bit CAN1_F6R2 ; \ CAN1_F6R2_FB19, Filter bits
: CAN1_F6R2_FB20 ( -- x addr ) 20 bit CAN1_F6R2 ; \ CAN1_F6R2_FB20, Filter bits
: CAN1_F6R2_FB21 ( -- x addr ) 21 bit CAN1_F6R2 ; \ CAN1_F6R2_FB21, Filter bits
: CAN1_F6R2_FB22 ( -- x addr ) 22 bit CAN1_F6R2 ; \ CAN1_F6R2_FB22, Filter bits
: CAN1_F6R2_FB23 ( -- x addr ) 23 bit CAN1_F6R2 ; \ CAN1_F6R2_FB23, Filter bits
: CAN1_F6R2_FB24 ( -- x addr ) 24 bit CAN1_F6R2 ; \ CAN1_F6R2_FB24, Filter bits
: CAN1_F6R2_FB25 ( -- x addr ) 25 bit CAN1_F6R2 ; \ CAN1_F6R2_FB25, Filter bits
: CAN1_F6R2_FB26 ( -- x addr ) 26 bit CAN1_F6R2 ; \ CAN1_F6R2_FB26, Filter bits
: CAN1_F6R2_FB27 ( -- x addr ) 27 bit CAN1_F6R2 ; \ CAN1_F6R2_FB27, Filter bits
: CAN1_F6R2_FB28 ( -- x addr ) 28 bit CAN1_F6R2 ; \ CAN1_F6R2_FB28, Filter bits
: CAN1_F6R2_FB29 ( -- x addr ) 29 bit CAN1_F6R2 ; \ CAN1_F6R2_FB29, Filter bits
: CAN1_F6R2_FB30 ( -- x addr ) 30 bit CAN1_F6R2 ; \ CAN1_F6R2_FB30, Filter bits
: CAN1_F6R2_FB31 ( -- x addr ) 31 bit CAN1_F6R2 ; \ CAN1_F6R2_FB31, Filter bits

\ CAN1_F7R1 (read-write) Reset:0x00000000
: CAN1_F7R1_FB0 ( -- x addr ) 0 bit CAN1_F7R1 ; \ CAN1_F7R1_FB0, Filter bits
: CAN1_F7R1_FB1 ( -- x addr ) 1 bit CAN1_F7R1 ; \ CAN1_F7R1_FB1, Filter bits
: CAN1_F7R1_FB2 ( -- x addr ) 2 bit CAN1_F7R1 ; \ CAN1_F7R1_FB2, Filter bits
: CAN1_F7R1_FB3 ( -- x addr ) 3 bit CAN1_F7R1 ; \ CAN1_F7R1_FB3, Filter bits
: CAN1_F7R1_FB4 ( -- x addr ) 4 bit CAN1_F7R1 ; \ CAN1_F7R1_FB4, Filter bits
: CAN1_F7R1_FB5 ( -- x addr ) 5 bit CAN1_F7R1 ; \ CAN1_F7R1_FB5, Filter bits
: CAN1_F7R1_FB6 ( -- x addr ) 6 bit CAN1_F7R1 ; \ CAN1_F7R1_FB6, Filter bits
: CAN1_F7R1_FB7 ( -- x addr ) 7 bit CAN1_F7R1 ; \ CAN1_F7R1_FB7, Filter bits
: CAN1_F7R1_FB8 ( -- x addr ) 8 bit CAN1_F7R1 ; \ CAN1_F7R1_FB8, Filter bits
: CAN1_F7R1_FB9 ( -- x addr ) 9 bit CAN1_F7R1 ; \ CAN1_F7R1_FB9, Filter bits
: CAN1_F7R1_FB10 ( -- x addr ) 10 bit CAN1_F7R1 ; \ CAN1_F7R1_FB10, Filter bits
: CAN1_F7R1_FB11 ( -- x addr ) 11 bit CAN1_F7R1 ; \ CAN1_F7R1_FB11, Filter bits
: CAN1_F7R1_FB12 ( -- x addr ) 12 bit CAN1_F7R1 ; \ CAN1_F7R1_FB12, Filter bits
: CAN1_F7R1_FB13 ( -- x addr ) 13 bit CAN1_F7R1 ; \ CAN1_F7R1_FB13, Filter bits
: CAN1_F7R1_FB14 ( -- x addr ) 14 bit CAN1_F7R1 ; \ CAN1_F7R1_FB14, Filter bits
: CAN1_F7R1_FB15 ( -- x addr ) 15 bit CAN1_F7R1 ; \ CAN1_F7R1_FB15, Filter bits
: CAN1_F7R1_FB16 ( -- x addr ) 16 bit CAN1_F7R1 ; \ CAN1_F7R1_FB16, Filter bits
: CAN1_F7R1_FB17 ( -- x addr ) 17 bit CAN1_F7R1 ; \ CAN1_F7R1_FB17, Filter bits
: CAN1_F7R1_FB18 ( -- x addr ) 18 bit CAN1_F7R1 ; \ CAN1_F7R1_FB18, Filter bits
: CAN1_F7R1_FB19 ( -- x addr ) 19 bit CAN1_F7R1 ; \ CAN1_F7R1_FB19, Filter bits
: CAN1_F7R1_FB20 ( -- x addr ) 20 bit CAN1_F7R1 ; \ CAN1_F7R1_FB20, Filter bits
: CAN1_F7R1_FB21 ( -- x addr ) 21 bit CAN1_F7R1 ; \ CAN1_F7R1_FB21, Filter bits
: CAN1_F7R1_FB22 ( -- x addr ) 22 bit CAN1_F7R1 ; \ CAN1_F7R1_FB22, Filter bits
: CAN1_F7R1_FB23 ( -- x addr ) 23 bit CAN1_F7R1 ; \ CAN1_F7R1_FB23, Filter bits
: CAN1_F7R1_FB24 ( -- x addr ) 24 bit CAN1_F7R1 ; \ CAN1_F7R1_FB24, Filter bits
: CAN1_F7R1_FB25 ( -- x addr ) 25 bit CAN1_F7R1 ; \ CAN1_F7R1_FB25, Filter bits
: CAN1_F7R1_FB26 ( -- x addr ) 26 bit CAN1_F7R1 ; \ CAN1_F7R1_FB26, Filter bits
: CAN1_F7R1_FB27 ( -- x addr ) 27 bit CAN1_F7R1 ; \ CAN1_F7R1_FB27, Filter bits
: CAN1_F7R1_FB28 ( -- x addr ) 28 bit CAN1_F7R1 ; \ CAN1_F7R1_FB28, Filter bits
: CAN1_F7R1_FB29 ( -- x addr ) 29 bit CAN1_F7R1 ; \ CAN1_F7R1_FB29, Filter bits
: CAN1_F7R1_FB30 ( -- x addr ) 30 bit CAN1_F7R1 ; \ CAN1_F7R1_FB30, Filter bits
: CAN1_F7R1_FB31 ( -- x addr ) 31 bit CAN1_F7R1 ; \ CAN1_F7R1_FB31, Filter bits

\ CAN1_F7R2 (read-write) Reset:0x00000000
: CAN1_F7R2_FB0 ( -- x addr ) 0 bit CAN1_F7R2 ; \ CAN1_F7R2_FB0, Filter bits
: CAN1_F7R2_FB1 ( -- x addr ) 1 bit CAN1_F7R2 ; \ CAN1_F7R2_FB1, Filter bits
: CAN1_F7R2_FB2 ( -- x addr ) 2 bit CAN1_F7R2 ; \ CAN1_F7R2_FB2, Filter bits
: CAN1_F7R2_FB3 ( -- x addr ) 3 bit CAN1_F7R2 ; \ CAN1_F7R2_FB3, Filter bits
: CAN1_F7R2_FB4 ( -- x addr ) 4 bit CAN1_F7R2 ; \ CAN1_F7R2_FB4, Filter bits
: CAN1_F7R2_FB5 ( -- x addr ) 5 bit CAN1_F7R2 ; \ CAN1_F7R2_FB5, Filter bits
: CAN1_F7R2_FB6 ( -- x addr ) 6 bit CAN1_F7R2 ; \ CAN1_F7R2_FB6, Filter bits
: CAN1_F7R2_FB7 ( -- x addr ) 7 bit CAN1_F7R2 ; \ CAN1_F7R2_FB7, Filter bits
: CAN1_F7R2_FB8 ( -- x addr ) 8 bit CAN1_F7R2 ; \ CAN1_F7R2_FB8, Filter bits
: CAN1_F7R2_FB9 ( -- x addr ) 9 bit CAN1_F7R2 ; \ CAN1_F7R2_FB9, Filter bits
: CAN1_F7R2_FB10 ( -- x addr ) 10 bit CAN1_F7R2 ; \ CAN1_F7R2_FB10, Filter bits
: CAN1_F7R2_FB11 ( -- x addr ) 11 bit CAN1_F7R2 ; \ CAN1_F7R2_FB11, Filter bits
: CAN1_F7R2_FB12 ( -- x addr ) 12 bit CAN1_F7R2 ; \ CAN1_F7R2_FB12, Filter bits
: CAN1_F7R2_FB13 ( -- x addr ) 13 bit CAN1_F7R2 ; \ CAN1_F7R2_FB13, Filter bits
: CAN1_F7R2_FB14 ( -- x addr ) 14 bit CAN1_F7R2 ; \ CAN1_F7R2_FB14, Filter bits
: CAN1_F7R2_FB15 ( -- x addr ) 15 bit CAN1_F7R2 ; \ CAN1_F7R2_FB15, Filter bits
: CAN1_F7R2_FB16 ( -- x addr ) 16 bit CAN1_F7R2 ; \ CAN1_F7R2_FB16, Filter bits
: CAN1_F7R2_FB17 ( -- x addr ) 17 bit CAN1_F7R2 ; \ CAN1_F7R2_FB17, Filter bits
: CAN1_F7R2_FB18 ( -- x addr ) 18 bit CAN1_F7R2 ; \ CAN1_F7R2_FB18, Filter bits
: CAN1_F7R2_FB19 ( -- x addr ) 19 bit CAN1_F7R2 ; \ CAN1_F7R2_FB19, Filter bits
: CAN1_F7R2_FB20 ( -- x addr ) 20 bit CAN1_F7R2 ; \ CAN1_F7R2_FB20, Filter bits
: CAN1_F7R2_FB21 ( -- x addr ) 21 bit CAN1_F7R2 ; \ CAN1_F7R2_FB21, Filter bits
: CAN1_F7R2_FB22 ( -- x addr ) 22 bit CAN1_F7R2 ; \ CAN1_F7R2_FB22, Filter bits
: CAN1_F7R2_FB23 ( -- x addr ) 23 bit CAN1_F7R2 ; \ CAN1_F7R2_FB23, Filter bits
: CAN1_F7R2_FB24 ( -- x addr ) 24 bit CAN1_F7R2 ; \ CAN1_F7R2_FB24, Filter bits
: CAN1_F7R2_FB25 ( -- x addr ) 25 bit CAN1_F7R2 ; \ CAN1_F7R2_FB25, Filter bits
: CAN1_F7R2_FB26 ( -- x addr ) 26 bit CAN1_F7R2 ; \ CAN1_F7R2_FB26, Filter bits
: CAN1_F7R2_FB27 ( -- x addr ) 27 bit CAN1_F7R2 ; \ CAN1_F7R2_FB27, Filter bits
: CAN1_F7R2_FB28 ( -- x addr ) 28 bit CAN1_F7R2 ; \ CAN1_F7R2_FB28, Filter bits
: CAN1_F7R2_FB29 ( -- x addr ) 29 bit CAN1_F7R2 ; \ CAN1_F7R2_FB29, Filter bits
: CAN1_F7R2_FB30 ( -- x addr ) 30 bit CAN1_F7R2 ; \ CAN1_F7R2_FB30, Filter bits
: CAN1_F7R2_FB31 ( -- x addr ) 31 bit CAN1_F7R2 ; \ CAN1_F7R2_FB31, Filter bits

\ CAN1_F8R1 (read-write) Reset:0x00000000
: CAN1_F8R1_FB0 ( -- x addr ) 0 bit CAN1_F8R1 ; \ CAN1_F8R1_FB0, Filter bits
: CAN1_F8R1_FB1 ( -- x addr ) 1 bit CAN1_F8R1 ; \ CAN1_F8R1_FB1, Filter bits
: CAN1_F8R1_FB2 ( -- x addr ) 2 bit CAN1_F8R1 ; \ CAN1_F8R1_FB2, Filter bits
: CAN1_F8R1_FB3 ( -- x addr ) 3 bit CAN1_F8R1 ; \ CAN1_F8R1_FB3, Filter bits
: CAN1_F8R1_FB4 ( -- x addr ) 4 bit CAN1_F8R1 ; \ CAN1_F8R1_FB4, Filter bits
: CAN1_F8R1_FB5 ( -- x addr ) 5 bit CAN1_F8R1 ; \ CAN1_F8R1_FB5, Filter bits
: CAN1_F8R1_FB6 ( -- x addr ) 6 bit CAN1_F8R1 ; \ CAN1_F8R1_FB6, Filter bits
: CAN1_F8R1_FB7 ( -- x addr ) 7 bit CAN1_F8R1 ; \ CAN1_F8R1_FB7, Filter bits
: CAN1_F8R1_FB8 ( -- x addr ) 8 bit CAN1_F8R1 ; \ CAN1_F8R1_FB8, Filter bits
: CAN1_F8R1_FB9 ( -- x addr ) 9 bit CAN1_F8R1 ; \ CAN1_F8R1_FB9, Filter bits
: CAN1_F8R1_FB10 ( -- x addr ) 10 bit CAN1_F8R1 ; \ CAN1_F8R1_FB10, Filter bits
: CAN1_F8R1_FB11 ( -- x addr ) 11 bit CAN1_F8R1 ; \ CAN1_F8R1_FB11, Filter bits
: CAN1_F8R1_FB12 ( -- x addr ) 12 bit CAN1_F8R1 ; \ CAN1_F8R1_FB12, Filter bits
: CAN1_F8R1_FB13 ( -- x addr ) 13 bit CAN1_F8R1 ; \ CAN1_F8R1_FB13, Filter bits
: CAN1_F8R1_FB14 ( -- x addr ) 14 bit CAN1_F8R1 ; \ CAN1_F8R1_FB14, Filter bits
: CAN1_F8R1_FB15 ( -- x addr ) 15 bit CAN1_F8R1 ; \ CAN1_F8R1_FB15, Filter bits
: CAN1_F8R1_FB16 ( -- x addr ) 16 bit CAN1_F8R1 ; \ CAN1_F8R1_FB16, Filter bits
: CAN1_F8R1_FB17 ( -- x addr ) 17 bit CAN1_F8R1 ; \ CAN1_F8R1_FB17, Filter bits
: CAN1_F8R1_FB18 ( -- x addr ) 18 bit CAN1_F8R1 ; \ CAN1_F8R1_FB18, Filter bits
: CAN1_F8R1_FB19 ( -- x addr ) 19 bit CAN1_F8R1 ; \ CAN1_F8R1_FB19, Filter bits
: CAN1_F8R1_FB20 ( -- x addr ) 20 bit CAN1_F8R1 ; \ CAN1_F8R1_FB20, Filter bits
: CAN1_F8R1_FB21 ( -- x addr ) 21 bit CAN1_F8R1 ; \ CAN1_F8R1_FB21, Filter bits
: CAN1_F8R1_FB22 ( -- x addr ) 22 bit CAN1_F8R1 ; \ CAN1_F8R1_FB22, Filter bits
: CAN1_F8R1_FB23 ( -- x addr ) 23 bit CAN1_F8R1 ; \ CAN1_F8R1_FB23, Filter bits
: CAN1_F8R1_FB24 ( -- x addr ) 24 bit CAN1_F8R1 ; \ CAN1_F8R1_FB24, Filter bits
: CAN1_F8R1_FB25 ( -- x addr ) 25 bit CAN1_F8R1 ; \ CAN1_F8R1_FB25, Filter bits
: CAN1_F8R1_FB26 ( -- x addr ) 26 bit CAN1_F8R1 ; \ CAN1_F8R1_FB26, Filter bits
: CAN1_F8R1_FB27 ( -- x addr ) 27 bit CAN1_F8R1 ; \ CAN1_F8R1_FB27, Filter bits
: CAN1_F8R1_FB28 ( -- x addr ) 28 bit CAN1_F8R1 ; \ CAN1_F8R1_FB28, Filter bits
: CAN1_F8R1_FB29 ( -- x addr ) 29 bit CAN1_F8R1 ; \ CAN1_F8R1_FB29, Filter bits
: CAN1_F8R1_FB30 ( -- x addr ) 30 bit CAN1_F8R1 ; \ CAN1_F8R1_FB30, Filter bits
: CAN1_F8R1_FB31 ( -- x addr ) 31 bit CAN1_F8R1 ; \ CAN1_F8R1_FB31, Filter bits

\ CAN1_F8R2 (read-write) Reset:0x00000000
: CAN1_F8R2_FB0 ( -- x addr ) 0 bit CAN1_F8R2 ; \ CAN1_F8R2_FB0, Filter bits
: CAN1_F8R2_FB1 ( -- x addr ) 1 bit CAN1_F8R2 ; \ CAN1_F8R2_FB1, Filter bits
: CAN1_F8R2_FB2 ( -- x addr ) 2 bit CAN1_F8R2 ; \ CAN1_F8R2_FB2, Filter bits
: CAN1_F8R2_FB3 ( -- x addr ) 3 bit CAN1_F8R2 ; \ CAN1_F8R2_FB3, Filter bits
: CAN1_F8R2_FB4 ( -- x addr ) 4 bit CAN1_F8R2 ; \ CAN1_F8R2_FB4, Filter bits
: CAN1_F8R2_FB5 ( -- x addr ) 5 bit CAN1_F8R2 ; \ CAN1_F8R2_FB5, Filter bits
: CAN1_F8R2_FB6 ( -- x addr ) 6 bit CAN1_F8R2 ; \ CAN1_F8R2_FB6, Filter bits
: CAN1_F8R2_FB7 ( -- x addr ) 7 bit CAN1_F8R2 ; \ CAN1_F8R2_FB7, Filter bits
: CAN1_F8R2_FB8 ( -- x addr ) 8 bit CAN1_F8R2 ; \ CAN1_F8R2_FB8, Filter bits
: CAN1_F8R2_FB9 ( -- x addr ) 9 bit CAN1_F8R2 ; \ CAN1_F8R2_FB9, Filter bits
: CAN1_F8R2_FB10 ( -- x addr ) 10 bit CAN1_F8R2 ; \ CAN1_F8R2_FB10, Filter bits
: CAN1_F8R2_FB11 ( -- x addr ) 11 bit CAN1_F8R2 ; \ CAN1_F8R2_FB11, Filter bits
: CAN1_F8R2_FB12 ( -- x addr ) 12 bit CAN1_F8R2 ; \ CAN1_F8R2_FB12, Filter bits
: CAN1_F8R2_FB13 ( -- x addr ) 13 bit CAN1_F8R2 ; \ CAN1_F8R2_FB13, Filter bits
: CAN1_F8R2_FB14 ( -- x addr ) 14 bit CAN1_F8R2 ; \ CAN1_F8R2_FB14, Filter bits
: CAN1_F8R2_FB15 ( -- x addr ) 15 bit CAN1_F8R2 ; \ CAN1_F8R2_FB15, Filter bits
: CAN1_F8R2_FB16 ( -- x addr ) 16 bit CAN1_F8R2 ; \ CAN1_F8R2_FB16, Filter bits
: CAN1_F8R2_FB17 ( -- x addr ) 17 bit CAN1_F8R2 ; \ CAN1_F8R2_FB17, Filter bits
: CAN1_F8R2_FB18 ( -- x addr ) 18 bit CAN1_F8R2 ; \ CAN1_F8R2_FB18, Filter bits
: CAN1_F8R2_FB19 ( -- x addr ) 19 bit CAN1_F8R2 ; \ CAN1_F8R2_FB19, Filter bits
: CAN1_F8R2_FB20 ( -- x addr ) 20 bit CAN1_F8R2 ; \ CAN1_F8R2_FB20, Filter bits
: CAN1_F8R2_FB21 ( -- x addr ) 21 bit CAN1_F8R2 ; \ CAN1_F8R2_FB21, Filter bits
: CAN1_F8R2_FB22 ( -- x addr ) 22 bit CAN1_F8R2 ; \ CAN1_F8R2_FB22, Filter bits
: CAN1_F8R2_FB23 ( -- x addr ) 23 bit CAN1_F8R2 ; \ CAN1_F8R2_FB23, Filter bits
: CAN1_F8R2_FB24 ( -- x addr ) 24 bit CAN1_F8R2 ; \ CAN1_F8R2_FB24, Filter bits
: CAN1_F8R2_FB25 ( -- x addr ) 25 bit CAN1_F8R2 ; \ CAN1_F8R2_FB25, Filter bits
: CAN1_F8R2_FB26 ( -- x addr ) 26 bit CAN1_F8R2 ; \ CAN1_F8R2_FB26, Filter bits
: CAN1_F8R2_FB27 ( -- x addr ) 27 bit CAN1_F8R2 ; \ CAN1_F8R2_FB27, Filter bits
: CAN1_F8R2_FB28 ( -- x addr ) 28 bit CAN1_F8R2 ; \ CAN1_F8R2_FB28, Filter bits
: CAN1_F8R2_FB29 ( -- x addr ) 29 bit CAN1_F8R2 ; \ CAN1_F8R2_FB29, Filter bits
: CAN1_F8R2_FB30 ( -- x addr ) 30 bit CAN1_F8R2 ; \ CAN1_F8R2_FB30, Filter bits
: CAN1_F8R2_FB31 ( -- x addr ) 31 bit CAN1_F8R2 ; \ CAN1_F8R2_FB31, Filter bits

\ CAN1_F9R1 (read-write) Reset:0x00000000
: CAN1_F9R1_FB0 ( -- x addr ) 0 bit CAN1_F9R1 ; \ CAN1_F9R1_FB0, Filter bits
: CAN1_F9R1_FB1 ( -- x addr ) 1 bit CAN1_F9R1 ; \ CAN1_F9R1_FB1, Filter bits
: CAN1_F9R1_FB2 ( -- x addr ) 2 bit CAN1_F9R1 ; \ CAN1_F9R1_FB2, Filter bits
: CAN1_F9R1_FB3 ( -- x addr ) 3 bit CAN1_F9R1 ; \ CAN1_F9R1_FB3, Filter bits
: CAN1_F9R1_FB4 ( -- x addr ) 4 bit CAN1_F9R1 ; \ CAN1_F9R1_FB4, Filter bits
: CAN1_F9R1_FB5 ( -- x addr ) 5 bit CAN1_F9R1 ; \ CAN1_F9R1_FB5, Filter bits
: CAN1_F9R1_FB6 ( -- x addr ) 6 bit CAN1_F9R1 ; \ CAN1_F9R1_FB6, Filter bits
: CAN1_F9R1_FB7 ( -- x addr ) 7 bit CAN1_F9R1 ; \ CAN1_F9R1_FB7, Filter bits
: CAN1_F9R1_FB8 ( -- x addr ) 8 bit CAN1_F9R1 ; \ CAN1_F9R1_FB8, Filter bits
: CAN1_F9R1_FB9 ( -- x addr ) 9 bit CAN1_F9R1 ; \ CAN1_F9R1_FB9, Filter bits
: CAN1_F9R1_FB10 ( -- x addr ) 10 bit CAN1_F9R1 ; \ CAN1_F9R1_FB10, Filter bits
: CAN1_F9R1_FB11 ( -- x addr ) 11 bit CAN1_F9R1 ; \ CAN1_F9R1_FB11, Filter bits
: CAN1_F9R1_FB12 ( -- x addr ) 12 bit CAN1_F9R1 ; \ CAN1_F9R1_FB12, Filter bits
: CAN1_F9R1_FB13 ( -- x addr ) 13 bit CAN1_F9R1 ; \ CAN1_F9R1_FB13, Filter bits
: CAN1_F9R1_FB14 ( -- x addr ) 14 bit CAN1_F9R1 ; \ CAN1_F9R1_FB14, Filter bits
: CAN1_F9R1_FB15 ( -- x addr ) 15 bit CAN1_F9R1 ; \ CAN1_F9R1_FB15, Filter bits
: CAN1_F9R1_FB16 ( -- x addr ) 16 bit CAN1_F9R1 ; \ CAN1_F9R1_FB16, Filter bits
: CAN1_F9R1_FB17 ( -- x addr ) 17 bit CAN1_F9R1 ; \ CAN1_F9R1_FB17, Filter bits
: CAN1_F9R1_FB18 ( -- x addr ) 18 bit CAN1_F9R1 ; \ CAN1_F9R1_FB18, Filter bits
: CAN1_F9R1_FB19 ( -- x addr ) 19 bit CAN1_F9R1 ; \ CAN1_F9R1_FB19, Filter bits
: CAN1_F9R1_FB20 ( -- x addr ) 20 bit CAN1_F9R1 ; \ CAN1_F9R1_FB20, Filter bits
: CAN1_F9R1_FB21 ( -- x addr ) 21 bit CAN1_F9R1 ; \ CAN1_F9R1_FB21, Filter bits
: CAN1_F9R1_FB22 ( -- x addr ) 22 bit CAN1_F9R1 ; \ CAN1_F9R1_FB22, Filter bits
: CAN1_F9R1_FB23 ( -- x addr ) 23 bit CAN1_F9R1 ; \ CAN1_F9R1_FB23, Filter bits
: CAN1_F9R1_FB24 ( -- x addr ) 24 bit CAN1_F9R1 ; \ CAN1_F9R1_FB24, Filter bits
: CAN1_F9R1_FB25 ( -- x addr ) 25 bit CAN1_F9R1 ; \ CAN1_F9R1_FB25, Filter bits
: CAN1_F9R1_FB26 ( -- x addr ) 26 bit CAN1_F9R1 ; \ CAN1_F9R1_FB26, Filter bits
: CAN1_F9R1_FB27 ( -- x addr ) 27 bit CAN1_F9R1 ; \ CAN1_F9R1_FB27, Filter bits
: CAN1_F9R1_FB28 ( -- x addr ) 28 bit CAN1_F9R1 ; \ CAN1_F9R1_FB28, Filter bits
: CAN1_F9R1_FB29 ( -- x addr ) 29 bit CAN1_F9R1 ; \ CAN1_F9R1_FB29, Filter bits
: CAN1_F9R1_FB30 ( -- x addr ) 30 bit CAN1_F9R1 ; \ CAN1_F9R1_FB30, Filter bits
: CAN1_F9R1_FB31 ( -- x addr ) 31 bit CAN1_F9R1 ; \ CAN1_F9R1_FB31, Filter bits

\ CAN1_F9R2 (read-write) Reset:0x00000000
: CAN1_F9R2_FB0 ( -- x addr ) 0 bit CAN1_F9R2 ; \ CAN1_F9R2_FB0, Filter bits
: CAN1_F9R2_FB1 ( -- x addr ) 1 bit CAN1_F9R2 ; \ CAN1_F9R2_FB1, Filter bits
: CAN1_F9R2_FB2 ( -- x addr ) 2 bit CAN1_F9R2 ; \ CAN1_F9R2_FB2, Filter bits
: CAN1_F9R2_FB3 ( -- x addr ) 3 bit CAN1_F9R2 ; \ CAN1_F9R2_FB3, Filter bits
: CAN1_F9R2_FB4 ( -- x addr ) 4 bit CAN1_F9R2 ; \ CAN1_F9R2_FB4, Filter bits
: CAN1_F9R2_FB5 ( -- x addr ) 5 bit CAN1_F9R2 ; \ CAN1_F9R2_FB5, Filter bits
: CAN1_F9R2_FB6 ( -- x addr ) 6 bit CAN1_F9R2 ; \ CAN1_F9R2_FB6, Filter bits
: CAN1_F9R2_FB7 ( -- x addr ) 7 bit CAN1_F9R2 ; \ CAN1_F9R2_FB7, Filter bits
: CAN1_F9R2_FB8 ( -- x addr ) 8 bit CAN1_F9R2 ; \ CAN1_F9R2_FB8, Filter bits
: CAN1_F9R2_FB9 ( -- x addr ) 9 bit CAN1_F9R2 ; \ CAN1_F9R2_FB9, Filter bits
: CAN1_F9R2_FB10 ( -- x addr ) 10 bit CAN1_F9R2 ; \ CAN1_F9R2_FB10, Filter bits
: CAN1_F9R2_FB11 ( -- x addr ) 11 bit CAN1_F9R2 ; \ CAN1_F9R2_FB11, Filter bits
: CAN1_F9R2_FB12 ( -- x addr ) 12 bit CAN1_F9R2 ; \ CAN1_F9R2_FB12, Filter bits
: CAN1_F9R2_FB13 ( -- x addr ) 13 bit CAN1_F9R2 ; \ CAN1_F9R2_FB13, Filter bits
: CAN1_F9R2_FB14 ( -- x addr ) 14 bit CAN1_F9R2 ; \ CAN1_F9R2_FB14, Filter bits
: CAN1_F9R2_FB15 ( -- x addr ) 15 bit CAN1_F9R2 ; \ CAN1_F9R2_FB15, Filter bits
: CAN1_F9R2_FB16 ( -- x addr ) 16 bit CAN1_F9R2 ; \ CAN1_F9R2_FB16, Filter bits
: CAN1_F9R2_FB17 ( -- x addr ) 17 bit CAN1_F9R2 ; \ CAN1_F9R2_FB17, Filter bits
: CAN1_F9R2_FB18 ( -- x addr ) 18 bit CAN1_F9R2 ; \ CAN1_F9R2_FB18, Filter bits
: CAN1_F9R2_FB19 ( -- x addr ) 19 bit CAN1_F9R2 ; \ CAN1_F9R2_FB19, Filter bits
: CAN1_F9R2_FB20 ( -- x addr ) 20 bit CAN1_F9R2 ; \ CAN1_F9R2_FB20, Filter bits
: CAN1_F9R2_FB21 ( -- x addr ) 21 bit CAN1_F9R2 ; \ CAN1_F9R2_FB21, Filter bits
: CAN1_F9R2_FB22 ( -- x addr ) 22 bit CAN1_F9R2 ; \ CAN1_F9R2_FB22, Filter bits
: CAN1_F9R2_FB23 ( -- x addr ) 23 bit CAN1_F9R2 ; \ CAN1_F9R2_FB23, Filter bits
: CAN1_F9R2_FB24 ( -- x addr ) 24 bit CAN1_F9R2 ; \ CAN1_F9R2_FB24, Filter bits
: CAN1_F9R2_FB25 ( -- x addr ) 25 bit CAN1_F9R2 ; \ CAN1_F9R2_FB25, Filter bits
: CAN1_F9R2_FB26 ( -- x addr ) 26 bit CAN1_F9R2 ; \ CAN1_F9R2_FB26, Filter bits
: CAN1_F9R2_FB27 ( -- x addr ) 27 bit CAN1_F9R2 ; \ CAN1_F9R2_FB27, Filter bits
: CAN1_F9R2_FB28 ( -- x addr ) 28 bit CAN1_F9R2 ; \ CAN1_F9R2_FB28, Filter bits
: CAN1_F9R2_FB29 ( -- x addr ) 29 bit CAN1_F9R2 ; \ CAN1_F9R2_FB29, Filter bits
: CAN1_F9R2_FB30 ( -- x addr ) 30 bit CAN1_F9R2 ; \ CAN1_F9R2_FB30, Filter bits
: CAN1_F9R2_FB31 ( -- x addr ) 31 bit CAN1_F9R2 ; \ CAN1_F9R2_FB31, Filter bits

\ CAN1_F10R1 (read-write) Reset:0x00000000
: CAN1_F10R1_FB0 ( -- x addr ) 0 bit CAN1_F10R1 ; \ CAN1_F10R1_FB0, Filter bits
: CAN1_F10R1_FB1 ( -- x addr ) 1 bit CAN1_F10R1 ; \ CAN1_F10R1_FB1, Filter bits
: CAN1_F10R1_FB2 ( -- x addr ) 2 bit CAN1_F10R1 ; \ CAN1_F10R1_FB2, Filter bits
: CAN1_F10R1_FB3 ( -- x addr ) 3 bit CAN1_F10R1 ; \ CAN1_F10R1_FB3, Filter bits
: CAN1_F10R1_FB4 ( -- x addr ) 4 bit CAN1_F10R1 ; \ CAN1_F10R1_FB4, Filter bits
: CAN1_F10R1_FB5 ( -- x addr ) 5 bit CAN1_F10R1 ; \ CAN1_F10R1_FB5, Filter bits
: CAN1_F10R1_FB6 ( -- x addr ) 6 bit CAN1_F10R1 ; \ CAN1_F10R1_FB6, Filter bits
: CAN1_F10R1_FB7 ( -- x addr ) 7 bit CAN1_F10R1 ; \ CAN1_F10R1_FB7, Filter bits
: CAN1_F10R1_FB8 ( -- x addr ) 8 bit CAN1_F10R1 ; \ CAN1_F10R1_FB8, Filter bits
: CAN1_F10R1_FB9 ( -- x addr ) 9 bit CAN1_F10R1 ; \ CAN1_F10R1_FB9, Filter bits
: CAN1_F10R1_FB10 ( -- x addr ) 10 bit CAN1_F10R1 ; \ CAN1_F10R1_FB10, Filter bits
: CAN1_F10R1_FB11 ( -- x addr ) 11 bit CAN1_F10R1 ; \ CAN1_F10R1_FB11, Filter bits
: CAN1_F10R1_FB12 ( -- x addr ) 12 bit CAN1_F10R1 ; \ CAN1_F10R1_FB12, Filter bits
: CAN1_F10R1_FB13 ( -- x addr ) 13 bit CAN1_F10R1 ; \ CAN1_F10R1_FB13, Filter bits
: CAN1_F10R1_FB14 ( -- x addr ) 14 bit CAN1_F10R1 ; \ CAN1_F10R1_FB14, Filter bits
: CAN1_F10R1_FB15 ( -- x addr ) 15 bit CAN1_F10R1 ; \ CAN1_F10R1_FB15, Filter bits
: CAN1_F10R1_FB16 ( -- x addr ) 16 bit CAN1_F10R1 ; \ CAN1_F10R1_FB16, Filter bits
: CAN1_F10R1_FB17 ( -- x addr ) 17 bit CAN1_F10R1 ; \ CAN1_F10R1_FB17, Filter bits
: CAN1_F10R1_FB18 ( -- x addr ) 18 bit CAN1_F10R1 ; \ CAN1_F10R1_FB18, Filter bits
: CAN1_F10R1_FB19 ( -- x addr ) 19 bit CAN1_F10R1 ; \ CAN1_F10R1_FB19, Filter bits
: CAN1_F10R1_FB20 ( -- x addr ) 20 bit CAN1_F10R1 ; \ CAN1_F10R1_FB20, Filter bits
: CAN1_F10R1_FB21 ( -- x addr ) 21 bit CAN1_F10R1 ; \ CAN1_F10R1_FB21, Filter bits
: CAN1_F10R1_FB22 ( -- x addr ) 22 bit CAN1_F10R1 ; \ CAN1_F10R1_FB22, Filter bits
: CAN1_F10R1_FB23 ( -- x addr ) 23 bit CAN1_F10R1 ; \ CAN1_F10R1_FB23, Filter bits
: CAN1_F10R1_FB24 ( -- x addr ) 24 bit CAN1_F10R1 ; \ CAN1_F10R1_FB24, Filter bits
: CAN1_F10R1_FB25 ( -- x addr ) 25 bit CAN1_F10R1 ; \ CAN1_F10R1_FB25, Filter bits
: CAN1_F10R1_FB26 ( -- x addr ) 26 bit CAN1_F10R1 ; \ CAN1_F10R1_FB26, Filter bits
: CAN1_F10R1_FB27 ( -- x addr ) 27 bit CAN1_F10R1 ; \ CAN1_F10R1_FB27, Filter bits
: CAN1_F10R1_FB28 ( -- x addr ) 28 bit CAN1_F10R1 ; \ CAN1_F10R1_FB28, Filter bits
: CAN1_F10R1_FB29 ( -- x addr ) 29 bit CAN1_F10R1 ; \ CAN1_F10R1_FB29, Filter bits
: CAN1_F10R1_FB30 ( -- x addr ) 30 bit CAN1_F10R1 ; \ CAN1_F10R1_FB30, Filter bits
: CAN1_F10R1_FB31 ( -- x addr ) 31 bit CAN1_F10R1 ; \ CAN1_F10R1_FB31, Filter bits

\ CAN1_F10R2 (read-write) Reset:0x00000000
: CAN1_F10R2_FB0 ( -- x addr ) 0 bit CAN1_F10R2 ; \ CAN1_F10R2_FB0, Filter bits
: CAN1_F10R2_FB1 ( -- x addr ) 1 bit CAN1_F10R2 ; \ CAN1_F10R2_FB1, Filter bits
: CAN1_F10R2_FB2 ( -- x addr ) 2 bit CAN1_F10R2 ; \ CAN1_F10R2_FB2, Filter bits
: CAN1_F10R2_FB3 ( -- x addr ) 3 bit CAN1_F10R2 ; \ CAN1_F10R2_FB3, Filter bits
: CAN1_F10R2_FB4 ( -- x addr ) 4 bit CAN1_F10R2 ; \ CAN1_F10R2_FB4, Filter bits
: CAN1_F10R2_FB5 ( -- x addr ) 5 bit CAN1_F10R2 ; \ CAN1_F10R2_FB5, Filter bits
: CAN1_F10R2_FB6 ( -- x addr ) 6 bit CAN1_F10R2 ; \ CAN1_F10R2_FB6, Filter bits
: CAN1_F10R2_FB7 ( -- x addr ) 7 bit CAN1_F10R2 ; \ CAN1_F10R2_FB7, Filter bits
: CAN1_F10R2_FB8 ( -- x addr ) 8 bit CAN1_F10R2 ; \ CAN1_F10R2_FB8, Filter bits
: CAN1_F10R2_FB9 ( -- x addr ) 9 bit CAN1_F10R2 ; \ CAN1_F10R2_FB9, Filter bits
: CAN1_F10R2_FB10 ( -- x addr ) 10 bit CAN1_F10R2 ; \ CAN1_F10R2_FB10, Filter bits
: CAN1_F10R2_FB11 ( -- x addr ) 11 bit CAN1_F10R2 ; \ CAN1_F10R2_FB11, Filter bits
: CAN1_F10R2_FB12 ( -- x addr ) 12 bit CAN1_F10R2 ; \ CAN1_F10R2_FB12, Filter bits
: CAN1_F10R2_FB13 ( -- x addr ) 13 bit CAN1_F10R2 ; \ CAN1_F10R2_FB13, Filter bits
: CAN1_F10R2_FB14 ( -- x addr ) 14 bit CAN1_F10R2 ; \ CAN1_F10R2_FB14, Filter bits
: CAN1_F10R2_FB15 ( -- x addr ) 15 bit CAN1_F10R2 ; \ CAN1_F10R2_FB15, Filter bits
: CAN1_F10R2_FB16 ( -- x addr ) 16 bit CAN1_F10R2 ; \ CAN1_F10R2_FB16, Filter bits
: CAN1_F10R2_FB17 ( -- x addr ) 17 bit CAN1_F10R2 ; \ CAN1_F10R2_FB17, Filter bits
: CAN1_F10R2_FB18 ( -- x addr ) 18 bit CAN1_F10R2 ; \ CAN1_F10R2_FB18, Filter bits
: CAN1_F10R2_FB19 ( -- x addr ) 19 bit CAN1_F10R2 ; \ CAN1_F10R2_FB19, Filter bits
: CAN1_F10R2_FB20 ( -- x addr ) 20 bit CAN1_F10R2 ; \ CAN1_F10R2_FB20, Filter bits
: CAN1_F10R2_FB21 ( -- x addr ) 21 bit CAN1_F10R2 ; \ CAN1_F10R2_FB21, Filter bits
: CAN1_F10R2_FB22 ( -- x addr ) 22 bit CAN1_F10R2 ; \ CAN1_F10R2_FB22, Filter bits
: CAN1_F10R2_FB23 ( -- x addr ) 23 bit CAN1_F10R2 ; \ CAN1_F10R2_FB23, Filter bits
: CAN1_F10R2_FB24 ( -- x addr ) 24 bit CAN1_F10R2 ; \ CAN1_F10R2_FB24, Filter bits
: CAN1_F10R2_FB25 ( -- x addr ) 25 bit CAN1_F10R2 ; \ CAN1_F10R2_FB25, Filter bits
: CAN1_F10R2_FB26 ( -- x addr ) 26 bit CAN1_F10R2 ; \ CAN1_F10R2_FB26, Filter bits
: CAN1_F10R2_FB27 ( -- x addr ) 27 bit CAN1_F10R2 ; \ CAN1_F10R2_FB27, Filter bits
: CAN1_F10R2_FB28 ( -- x addr ) 28 bit CAN1_F10R2 ; \ CAN1_F10R2_FB28, Filter bits
: CAN1_F10R2_FB29 ( -- x addr ) 29 bit CAN1_F10R2 ; \ CAN1_F10R2_FB29, Filter bits
: CAN1_F10R2_FB30 ( -- x addr ) 30 bit CAN1_F10R2 ; \ CAN1_F10R2_FB30, Filter bits
: CAN1_F10R2_FB31 ( -- x addr ) 31 bit CAN1_F10R2 ; \ CAN1_F10R2_FB31, Filter bits

\ CAN1_F11R1 (read-write) Reset:0x00000000
: CAN1_F11R1_FB0 ( -- x addr ) 0 bit CAN1_F11R1 ; \ CAN1_F11R1_FB0, Filter bits
: CAN1_F11R1_FB1 ( -- x addr ) 1 bit CAN1_F11R1 ; \ CAN1_F11R1_FB1, Filter bits
: CAN1_F11R1_FB2 ( -- x addr ) 2 bit CAN1_F11R1 ; \ CAN1_F11R1_FB2, Filter bits
: CAN1_F11R1_FB3 ( -- x addr ) 3 bit CAN1_F11R1 ; \ CAN1_F11R1_FB3, Filter bits
: CAN1_F11R1_FB4 ( -- x addr ) 4 bit CAN1_F11R1 ; \ CAN1_F11R1_FB4, Filter bits
: CAN1_F11R1_FB5 ( -- x addr ) 5 bit CAN1_F11R1 ; \ CAN1_F11R1_FB5, Filter bits
: CAN1_F11R1_FB6 ( -- x addr ) 6 bit CAN1_F11R1 ; \ CAN1_F11R1_FB6, Filter bits
: CAN1_F11R1_FB7 ( -- x addr ) 7 bit CAN1_F11R1 ; \ CAN1_F11R1_FB7, Filter bits
: CAN1_F11R1_FB8 ( -- x addr ) 8 bit CAN1_F11R1 ; \ CAN1_F11R1_FB8, Filter bits
: CAN1_F11R1_FB9 ( -- x addr ) 9 bit CAN1_F11R1 ; \ CAN1_F11R1_FB9, Filter bits
: CAN1_F11R1_FB10 ( -- x addr ) 10 bit CAN1_F11R1 ; \ CAN1_F11R1_FB10, Filter bits
: CAN1_F11R1_FB11 ( -- x addr ) 11 bit CAN1_F11R1 ; \ CAN1_F11R1_FB11, Filter bits
: CAN1_F11R1_FB12 ( -- x addr ) 12 bit CAN1_F11R1 ; \ CAN1_F11R1_FB12, Filter bits
: CAN1_F11R1_FB13 ( -- x addr ) 13 bit CAN1_F11R1 ; \ CAN1_F11R1_FB13, Filter bits
: CAN1_F11R1_FB14 ( -- x addr ) 14 bit CAN1_F11R1 ; \ CAN1_F11R1_FB14, Filter bits
: CAN1_F11R1_FB15 ( -- x addr ) 15 bit CAN1_F11R1 ; \ CAN1_F11R1_FB15, Filter bits
: CAN1_F11R1_FB16 ( -- x addr ) 16 bit CAN1_F11R1 ; \ CAN1_F11R1_FB16, Filter bits
: CAN1_F11R1_FB17 ( -- x addr ) 17 bit CAN1_F11R1 ; \ CAN1_F11R1_FB17, Filter bits
: CAN1_F11R1_FB18 ( -- x addr ) 18 bit CAN1_F11R1 ; \ CAN1_F11R1_FB18, Filter bits
: CAN1_F11R1_FB19 ( -- x addr ) 19 bit CAN1_F11R1 ; \ CAN1_F11R1_FB19, Filter bits
: CAN1_F11R1_FB20 ( -- x addr ) 20 bit CAN1_F11R1 ; \ CAN1_F11R1_FB20, Filter bits
: CAN1_F11R1_FB21 ( -- x addr ) 21 bit CAN1_F11R1 ; \ CAN1_F11R1_FB21, Filter bits
: CAN1_F11R1_FB22 ( -- x addr ) 22 bit CAN1_F11R1 ; \ CAN1_F11R1_FB22, Filter bits
: CAN1_F11R1_FB23 ( -- x addr ) 23 bit CAN1_F11R1 ; \ CAN1_F11R1_FB23, Filter bits
: CAN1_F11R1_FB24 ( -- x addr ) 24 bit CAN1_F11R1 ; \ CAN1_F11R1_FB24, Filter bits
: CAN1_F11R1_FB25 ( -- x addr ) 25 bit CAN1_F11R1 ; \ CAN1_F11R1_FB25, Filter bits
: CAN1_F11R1_FB26 ( -- x addr ) 26 bit CAN1_F11R1 ; \ CAN1_F11R1_FB26, Filter bits
: CAN1_F11R1_FB27 ( -- x addr ) 27 bit CAN1_F11R1 ; \ CAN1_F11R1_FB27, Filter bits
: CAN1_F11R1_FB28 ( -- x addr ) 28 bit CAN1_F11R1 ; \ CAN1_F11R1_FB28, Filter bits
: CAN1_F11R1_FB29 ( -- x addr ) 29 bit CAN1_F11R1 ; \ CAN1_F11R1_FB29, Filter bits
: CAN1_F11R1_FB30 ( -- x addr ) 30 bit CAN1_F11R1 ; \ CAN1_F11R1_FB30, Filter bits
: CAN1_F11R1_FB31 ( -- x addr ) 31 bit CAN1_F11R1 ; \ CAN1_F11R1_FB31, Filter bits

\ CAN1_F11R2 (read-write) Reset:0x00000000
: CAN1_F11R2_FB0 ( -- x addr ) 0 bit CAN1_F11R2 ; \ CAN1_F11R2_FB0, Filter bits
: CAN1_F11R2_FB1 ( -- x addr ) 1 bit CAN1_F11R2 ; \ CAN1_F11R2_FB1, Filter bits
: CAN1_F11R2_FB2 ( -- x addr ) 2 bit CAN1_F11R2 ; \ CAN1_F11R2_FB2, Filter bits
: CAN1_F11R2_FB3 ( -- x addr ) 3 bit CAN1_F11R2 ; \ CAN1_F11R2_FB3, Filter bits
: CAN1_F11R2_FB4 ( -- x addr ) 4 bit CAN1_F11R2 ; \ CAN1_F11R2_FB4, Filter bits
: CAN1_F11R2_FB5 ( -- x addr ) 5 bit CAN1_F11R2 ; \ CAN1_F11R2_FB5, Filter bits
: CAN1_F11R2_FB6 ( -- x addr ) 6 bit CAN1_F11R2 ; \ CAN1_F11R2_FB6, Filter bits
: CAN1_F11R2_FB7 ( -- x addr ) 7 bit CAN1_F11R2 ; \ CAN1_F11R2_FB7, Filter bits
: CAN1_F11R2_FB8 ( -- x addr ) 8 bit CAN1_F11R2 ; \ CAN1_F11R2_FB8, Filter bits
: CAN1_F11R2_FB9 ( -- x addr ) 9 bit CAN1_F11R2 ; \ CAN1_F11R2_FB9, Filter bits
: CAN1_F11R2_FB10 ( -- x addr ) 10 bit CAN1_F11R2 ; \ CAN1_F11R2_FB10, Filter bits
: CAN1_F11R2_FB11 ( -- x addr ) 11 bit CAN1_F11R2 ; \ CAN1_F11R2_FB11, Filter bits
: CAN1_F11R2_FB12 ( -- x addr ) 12 bit CAN1_F11R2 ; \ CAN1_F11R2_FB12, Filter bits
: CAN1_F11R2_FB13 ( -- x addr ) 13 bit CAN1_F11R2 ; \ CAN1_F11R2_FB13, Filter bits
: CAN1_F11R2_FB14 ( -- x addr ) 14 bit CAN1_F11R2 ; \ CAN1_F11R2_FB14, Filter bits
: CAN1_F11R2_FB15 ( -- x addr ) 15 bit CAN1_F11R2 ; \ CAN1_F11R2_FB15, Filter bits
: CAN1_F11R2_FB16 ( -- x addr ) 16 bit CAN1_F11R2 ; \ CAN1_F11R2_FB16, Filter bits
: CAN1_F11R2_FB17 ( -- x addr ) 17 bit CAN1_F11R2 ; \ CAN1_F11R2_FB17, Filter bits
: CAN1_F11R2_FB18 ( -- x addr ) 18 bit CAN1_F11R2 ; \ CAN1_F11R2_FB18, Filter bits
: CAN1_F11R2_FB19 ( -- x addr ) 19 bit CAN1_F11R2 ; \ CAN1_F11R2_FB19, Filter bits
: CAN1_F11R2_FB20 ( -- x addr ) 20 bit CAN1_F11R2 ; \ CAN1_F11R2_FB20, Filter bits
: CAN1_F11R2_FB21 ( -- x addr ) 21 bit CAN1_F11R2 ; \ CAN1_F11R2_FB21, Filter bits
: CAN1_F11R2_FB22 ( -- x addr ) 22 bit CAN1_F11R2 ; \ CAN1_F11R2_FB22, Filter bits
: CAN1_F11R2_FB23 ( -- x addr ) 23 bit CAN1_F11R2 ; \ CAN1_F11R2_FB23, Filter bits
: CAN1_F11R2_FB24 ( -- x addr ) 24 bit CAN1_F11R2 ; \ CAN1_F11R2_FB24, Filter bits
: CAN1_F11R2_FB25 ( -- x addr ) 25 bit CAN1_F11R2 ; \ CAN1_F11R2_FB25, Filter bits
: CAN1_F11R2_FB26 ( -- x addr ) 26 bit CAN1_F11R2 ; \ CAN1_F11R2_FB26, Filter bits
: CAN1_F11R2_FB27 ( -- x addr ) 27 bit CAN1_F11R2 ; \ CAN1_F11R2_FB27, Filter bits
: CAN1_F11R2_FB28 ( -- x addr ) 28 bit CAN1_F11R2 ; \ CAN1_F11R2_FB28, Filter bits
: CAN1_F11R2_FB29 ( -- x addr ) 29 bit CAN1_F11R2 ; \ CAN1_F11R2_FB29, Filter bits
: CAN1_F11R2_FB30 ( -- x addr ) 30 bit CAN1_F11R2 ; \ CAN1_F11R2_FB30, Filter bits
: CAN1_F11R2_FB31 ( -- x addr ) 31 bit CAN1_F11R2 ; \ CAN1_F11R2_FB31, Filter bits

\ CAN1_F12R1 (read-write) Reset:0x00000000
: CAN1_F12R1_FB0 ( -- x addr ) 0 bit CAN1_F12R1 ; \ CAN1_F12R1_FB0, Filter bits
: CAN1_F12R1_FB1 ( -- x addr ) 1 bit CAN1_F12R1 ; \ CAN1_F12R1_FB1, Filter bits
: CAN1_F12R1_FB2 ( -- x addr ) 2 bit CAN1_F12R1 ; \ CAN1_F12R1_FB2, Filter bits
: CAN1_F12R1_FB3 ( -- x addr ) 3 bit CAN1_F12R1 ; \ CAN1_F12R1_FB3, Filter bits
: CAN1_F12R1_FB4 ( -- x addr ) 4 bit CAN1_F12R1 ; \ CAN1_F12R1_FB4, Filter bits
: CAN1_F12R1_FB5 ( -- x addr ) 5 bit CAN1_F12R1 ; \ CAN1_F12R1_FB5, Filter bits
: CAN1_F12R1_FB6 ( -- x addr ) 6 bit CAN1_F12R1 ; \ CAN1_F12R1_FB6, Filter bits
: CAN1_F12R1_FB7 ( -- x addr ) 7 bit CAN1_F12R1 ; \ CAN1_F12R1_FB7, Filter bits
: CAN1_F12R1_FB8 ( -- x addr ) 8 bit CAN1_F12R1 ; \ CAN1_F12R1_FB8, Filter bits
: CAN1_F12R1_FB9 ( -- x addr ) 9 bit CAN1_F12R1 ; \ CAN1_F12R1_FB9, Filter bits
: CAN1_F12R1_FB10 ( -- x addr ) 10 bit CAN1_F12R1 ; \ CAN1_F12R1_FB10, Filter bits
: CAN1_F12R1_FB11 ( -- x addr ) 11 bit CAN1_F12R1 ; \ CAN1_F12R1_FB11, Filter bits
: CAN1_F12R1_FB12 ( -- x addr ) 12 bit CAN1_F12R1 ; \ CAN1_F12R1_FB12, Filter bits
: CAN1_F12R1_FB13 ( -- x addr ) 13 bit CAN1_F12R1 ; \ CAN1_F12R1_FB13, Filter bits
: CAN1_F12R1_FB14 ( -- x addr ) 14 bit CAN1_F12R1 ; \ CAN1_F12R1_FB14, Filter bits
: CAN1_F12R1_FB15 ( -- x addr ) 15 bit CAN1_F12R1 ; \ CAN1_F12R1_FB15, Filter bits
: CAN1_F12R1_FB16 ( -- x addr ) 16 bit CAN1_F12R1 ; \ CAN1_F12R1_FB16, Filter bits
: CAN1_F12R1_FB17 ( -- x addr ) 17 bit CAN1_F12R1 ; \ CAN1_F12R1_FB17, Filter bits
: CAN1_F12R1_FB18 ( -- x addr ) 18 bit CAN1_F12R1 ; \ CAN1_F12R1_FB18, Filter bits
: CAN1_F12R1_FB19 ( -- x addr ) 19 bit CAN1_F12R1 ; \ CAN1_F12R1_FB19, Filter bits
: CAN1_F12R1_FB20 ( -- x addr ) 20 bit CAN1_F12R1 ; \ CAN1_F12R1_FB20, Filter bits
: CAN1_F12R1_FB21 ( -- x addr ) 21 bit CAN1_F12R1 ; \ CAN1_F12R1_FB21, Filter bits
: CAN1_F12R1_FB22 ( -- x addr ) 22 bit CAN1_F12R1 ; \ CAN1_F12R1_FB22, Filter bits
: CAN1_F12R1_FB23 ( -- x addr ) 23 bit CAN1_F12R1 ; \ CAN1_F12R1_FB23, Filter bits
: CAN1_F12R1_FB24 ( -- x addr ) 24 bit CAN1_F12R1 ; \ CAN1_F12R1_FB24, Filter bits
: CAN1_F12R1_FB25 ( -- x addr ) 25 bit CAN1_F12R1 ; \ CAN1_F12R1_FB25, Filter bits
: CAN1_F12R1_FB26 ( -- x addr ) 26 bit CAN1_F12R1 ; \ CAN1_F12R1_FB26, Filter bits
: CAN1_F12R1_FB27 ( -- x addr ) 27 bit CAN1_F12R1 ; \ CAN1_F12R1_FB27, Filter bits
: CAN1_F12R1_FB28 ( -- x addr ) 28 bit CAN1_F12R1 ; \ CAN1_F12R1_FB28, Filter bits
: CAN1_F12R1_FB29 ( -- x addr ) 29 bit CAN1_F12R1 ; \ CAN1_F12R1_FB29, Filter bits
: CAN1_F12R1_FB30 ( -- x addr ) 30 bit CAN1_F12R1 ; \ CAN1_F12R1_FB30, Filter bits
: CAN1_F12R1_FB31 ( -- x addr ) 31 bit CAN1_F12R1 ; \ CAN1_F12R1_FB31, Filter bits

\ CAN1_F12R2 (read-write) Reset:0x00000000
: CAN1_F12R2_FB0 ( -- x addr ) 0 bit CAN1_F12R2 ; \ CAN1_F12R2_FB0, Filter bits
: CAN1_F12R2_FB1 ( -- x addr ) 1 bit CAN1_F12R2 ; \ CAN1_F12R2_FB1, Filter bits
: CAN1_F12R2_FB2 ( -- x addr ) 2 bit CAN1_F12R2 ; \ CAN1_F12R2_FB2, Filter bits
: CAN1_F12R2_FB3 ( -- x addr ) 3 bit CAN1_F12R2 ; \ CAN1_F12R2_FB3, Filter bits
: CAN1_F12R2_FB4 ( -- x addr ) 4 bit CAN1_F12R2 ; \ CAN1_F12R2_FB4, Filter bits
: CAN1_F12R2_FB5 ( -- x addr ) 5 bit CAN1_F12R2 ; \ CAN1_F12R2_FB5, Filter bits
: CAN1_F12R2_FB6 ( -- x addr ) 6 bit CAN1_F12R2 ; \ CAN1_F12R2_FB6, Filter bits
: CAN1_F12R2_FB7 ( -- x addr ) 7 bit CAN1_F12R2 ; \ CAN1_F12R2_FB7, Filter bits
: CAN1_F12R2_FB8 ( -- x addr ) 8 bit CAN1_F12R2 ; \ CAN1_F12R2_FB8, Filter bits
: CAN1_F12R2_FB9 ( -- x addr ) 9 bit CAN1_F12R2 ; \ CAN1_F12R2_FB9, Filter bits
: CAN1_F12R2_FB10 ( -- x addr ) 10 bit CAN1_F12R2 ; \ CAN1_F12R2_FB10, Filter bits
: CAN1_F12R2_FB11 ( -- x addr ) 11 bit CAN1_F12R2 ; \ CAN1_F12R2_FB11, Filter bits
: CAN1_F12R2_FB12 ( -- x addr ) 12 bit CAN1_F12R2 ; \ CAN1_F12R2_FB12, Filter bits
: CAN1_F12R2_FB13 ( -- x addr ) 13 bit CAN1_F12R2 ; \ CAN1_F12R2_FB13, Filter bits
: CAN1_F12R2_FB14 ( -- x addr ) 14 bit CAN1_F12R2 ; \ CAN1_F12R2_FB14, Filter bits
: CAN1_F12R2_FB15 ( -- x addr ) 15 bit CAN1_F12R2 ; \ CAN1_F12R2_FB15, Filter bits
: CAN1_F12R2_FB16 ( -- x addr ) 16 bit CAN1_F12R2 ; \ CAN1_F12R2_FB16, Filter bits
: CAN1_F12R2_FB17 ( -- x addr ) 17 bit CAN1_F12R2 ; \ CAN1_F12R2_FB17, Filter bits
: CAN1_F12R2_FB18 ( -- x addr ) 18 bit CAN1_F12R2 ; \ CAN1_F12R2_FB18, Filter bits
: CAN1_F12R2_FB19 ( -- x addr ) 19 bit CAN1_F12R2 ; \ CAN1_F12R2_FB19, Filter bits
: CAN1_F12R2_FB20 ( -- x addr ) 20 bit CAN1_F12R2 ; \ CAN1_F12R2_FB20, Filter bits
: CAN1_F12R2_FB21 ( -- x addr ) 21 bit CAN1_F12R2 ; \ CAN1_F12R2_FB21, Filter bits
: CAN1_F12R2_FB22 ( -- x addr ) 22 bit CAN1_F12R2 ; \ CAN1_F12R2_FB22, Filter bits
: CAN1_F12R2_FB23 ( -- x addr ) 23 bit CAN1_F12R2 ; \ CAN1_F12R2_FB23, Filter bits
: CAN1_F12R2_FB24 ( -- x addr ) 24 bit CAN1_F12R2 ; \ CAN1_F12R2_FB24, Filter bits
: CAN1_F12R2_FB25 ( -- x addr ) 25 bit CAN1_F12R2 ; \ CAN1_F12R2_FB25, Filter bits
: CAN1_F12R2_FB26 ( -- x addr ) 26 bit CAN1_F12R2 ; \ CAN1_F12R2_FB26, Filter bits
: CAN1_F12R2_FB27 ( -- x addr ) 27 bit CAN1_F12R2 ; \ CAN1_F12R2_FB27, Filter bits
: CAN1_F12R2_FB28 ( -- x addr ) 28 bit CAN1_F12R2 ; \ CAN1_F12R2_FB28, Filter bits
: CAN1_F12R2_FB29 ( -- x addr ) 29 bit CAN1_F12R2 ; \ CAN1_F12R2_FB29, Filter bits
: CAN1_F12R2_FB30 ( -- x addr ) 30 bit CAN1_F12R2 ; \ CAN1_F12R2_FB30, Filter bits
: CAN1_F12R2_FB31 ( -- x addr ) 31 bit CAN1_F12R2 ; \ CAN1_F12R2_FB31, Filter bits

\ CAN1_F13R1 (read-write) Reset:0x00000000
: CAN1_F13R1_FB0 ( -- x addr ) 0 bit CAN1_F13R1 ; \ CAN1_F13R1_FB0, Filter bits
: CAN1_F13R1_FB1 ( -- x addr ) 1 bit CAN1_F13R1 ; \ CAN1_F13R1_FB1, Filter bits
: CAN1_F13R1_FB2 ( -- x addr ) 2 bit CAN1_F13R1 ; \ CAN1_F13R1_FB2, Filter bits
: CAN1_F13R1_FB3 ( -- x addr ) 3 bit CAN1_F13R1 ; \ CAN1_F13R1_FB3, Filter bits
: CAN1_F13R1_FB4 ( -- x addr ) 4 bit CAN1_F13R1 ; \ CAN1_F13R1_FB4, Filter bits
: CAN1_F13R1_FB5 ( -- x addr ) 5 bit CAN1_F13R1 ; \ CAN1_F13R1_FB5, Filter bits
: CAN1_F13R1_FB6 ( -- x addr ) 6 bit CAN1_F13R1 ; \ CAN1_F13R1_FB6, Filter bits
: CAN1_F13R1_FB7 ( -- x addr ) 7 bit CAN1_F13R1 ; \ CAN1_F13R1_FB7, Filter bits
: CAN1_F13R1_FB8 ( -- x addr ) 8 bit CAN1_F13R1 ; \ CAN1_F13R1_FB8, Filter bits
: CAN1_F13R1_FB9 ( -- x addr ) 9 bit CAN1_F13R1 ; \ CAN1_F13R1_FB9, Filter bits
: CAN1_F13R1_FB10 ( -- x addr ) 10 bit CAN1_F13R1 ; \ CAN1_F13R1_FB10, Filter bits
: CAN1_F13R1_FB11 ( -- x addr ) 11 bit CAN1_F13R1 ; \ CAN1_F13R1_FB11, Filter bits
: CAN1_F13R1_FB12 ( -- x addr ) 12 bit CAN1_F13R1 ; \ CAN1_F13R1_FB12, Filter bits
: CAN1_F13R1_FB13 ( -- x addr ) 13 bit CAN1_F13R1 ; \ CAN1_F13R1_FB13, Filter bits
: CAN1_F13R1_FB14 ( -- x addr ) 14 bit CAN1_F13R1 ; \ CAN1_F13R1_FB14, Filter bits
: CAN1_F13R1_FB15 ( -- x addr ) 15 bit CAN1_F13R1 ; \ CAN1_F13R1_FB15, Filter bits
: CAN1_F13R1_FB16 ( -- x addr ) 16 bit CAN1_F13R1 ; \ CAN1_F13R1_FB16, Filter bits
: CAN1_F13R1_FB17 ( -- x addr ) 17 bit CAN1_F13R1 ; \ CAN1_F13R1_FB17, Filter bits
: CAN1_F13R1_FB18 ( -- x addr ) 18 bit CAN1_F13R1 ; \ CAN1_F13R1_FB18, Filter bits
: CAN1_F13R1_FB19 ( -- x addr ) 19 bit CAN1_F13R1 ; \ CAN1_F13R1_FB19, Filter bits
: CAN1_F13R1_FB20 ( -- x addr ) 20 bit CAN1_F13R1 ; \ CAN1_F13R1_FB20, Filter bits
: CAN1_F13R1_FB21 ( -- x addr ) 21 bit CAN1_F13R1 ; \ CAN1_F13R1_FB21, Filter bits
: CAN1_F13R1_FB22 ( -- x addr ) 22 bit CAN1_F13R1 ; \ CAN1_F13R1_FB22, Filter bits
: CAN1_F13R1_FB23 ( -- x addr ) 23 bit CAN1_F13R1 ; \ CAN1_F13R1_FB23, Filter bits
: CAN1_F13R1_FB24 ( -- x addr ) 24 bit CAN1_F13R1 ; \ CAN1_F13R1_FB24, Filter bits
: CAN1_F13R1_FB25 ( -- x addr ) 25 bit CAN1_F13R1 ; \ CAN1_F13R1_FB25, Filter bits
: CAN1_F13R1_FB26 ( -- x addr ) 26 bit CAN1_F13R1 ; \ CAN1_F13R1_FB26, Filter bits
: CAN1_F13R1_FB27 ( -- x addr ) 27 bit CAN1_F13R1 ; \ CAN1_F13R1_FB27, Filter bits
: CAN1_F13R1_FB28 ( -- x addr ) 28 bit CAN1_F13R1 ; \ CAN1_F13R1_FB28, Filter bits
: CAN1_F13R1_FB29 ( -- x addr ) 29 bit CAN1_F13R1 ; \ CAN1_F13R1_FB29, Filter bits
: CAN1_F13R1_FB30 ( -- x addr ) 30 bit CAN1_F13R1 ; \ CAN1_F13R1_FB30, Filter bits
: CAN1_F13R1_FB31 ( -- x addr ) 31 bit CAN1_F13R1 ; \ CAN1_F13R1_FB31, Filter bits

\ CAN1_F13R2 (read-write) Reset:0x00000000
: CAN1_F13R2_FB0 ( -- x addr ) 0 bit CAN1_F13R2 ; \ CAN1_F13R2_FB0, Filter bits
: CAN1_F13R2_FB1 ( -- x addr ) 1 bit CAN1_F13R2 ; \ CAN1_F13R2_FB1, Filter bits
: CAN1_F13R2_FB2 ( -- x addr ) 2 bit CAN1_F13R2 ; \ CAN1_F13R2_FB2, Filter bits
: CAN1_F13R2_FB3 ( -- x addr ) 3 bit CAN1_F13R2 ; \ CAN1_F13R2_FB3, Filter bits
: CAN1_F13R2_FB4 ( -- x addr ) 4 bit CAN1_F13R2 ; \ CAN1_F13R2_FB4, Filter bits
: CAN1_F13R2_FB5 ( -- x addr ) 5 bit CAN1_F13R2 ; \ CAN1_F13R2_FB5, Filter bits
: CAN1_F13R2_FB6 ( -- x addr ) 6 bit CAN1_F13R2 ; \ CAN1_F13R2_FB6, Filter bits
: CAN1_F13R2_FB7 ( -- x addr ) 7 bit CAN1_F13R2 ; \ CAN1_F13R2_FB7, Filter bits
: CAN1_F13R2_FB8 ( -- x addr ) 8 bit CAN1_F13R2 ; \ CAN1_F13R2_FB8, Filter bits
: CAN1_F13R2_FB9 ( -- x addr ) 9 bit CAN1_F13R2 ; \ CAN1_F13R2_FB9, Filter bits
: CAN1_F13R2_FB10 ( -- x addr ) 10 bit CAN1_F13R2 ; \ CAN1_F13R2_FB10, Filter bits
: CAN1_F13R2_FB11 ( -- x addr ) 11 bit CAN1_F13R2 ; \ CAN1_F13R2_FB11, Filter bits
: CAN1_F13R2_FB12 ( -- x addr ) 12 bit CAN1_F13R2 ; \ CAN1_F13R2_FB12, Filter bits
: CAN1_F13R2_FB13 ( -- x addr ) 13 bit CAN1_F13R2 ; \ CAN1_F13R2_FB13, Filter bits
: CAN1_F13R2_FB14 ( -- x addr ) 14 bit CAN1_F13R2 ; \ CAN1_F13R2_FB14, Filter bits
: CAN1_F13R2_FB15 ( -- x addr ) 15 bit CAN1_F13R2 ; \ CAN1_F13R2_FB15, Filter bits
: CAN1_F13R2_FB16 ( -- x addr ) 16 bit CAN1_F13R2 ; \ CAN1_F13R2_FB16, Filter bits
: CAN1_F13R2_FB17 ( -- x addr ) 17 bit CAN1_F13R2 ; \ CAN1_F13R2_FB17, Filter bits
: CAN1_F13R2_FB18 ( -- x addr ) 18 bit CAN1_F13R2 ; \ CAN1_F13R2_FB18, Filter bits
: CAN1_F13R2_FB19 ( -- x addr ) 19 bit CAN1_F13R2 ; \ CAN1_F13R2_FB19, Filter bits
: CAN1_F13R2_FB20 ( -- x addr ) 20 bit CAN1_F13R2 ; \ CAN1_F13R2_FB20, Filter bits
: CAN1_F13R2_FB21 ( -- x addr ) 21 bit CAN1_F13R2 ; \ CAN1_F13R2_FB21, Filter bits
: CAN1_F13R2_FB22 ( -- x addr ) 22 bit CAN1_F13R2 ; \ CAN1_F13R2_FB22, Filter bits
: CAN1_F13R2_FB23 ( -- x addr ) 23 bit CAN1_F13R2 ; \ CAN1_F13R2_FB23, Filter bits
: CAN1_F13R2_FB24 ( -- x addr ) 24 bit CAN1_F13R2 ; \ CAN1_F13R2_FB24, Filter bits
: CAN1_F13R2_FB25 ( -- x addr ) 25 bit CAN1_F13R2 ; \ CAN1_F13R2_FB25, Filter bits
: CAN1_F13R2_FB26 ( -- x addr ) 26 bit CAN1_F13R2 ; \ CAN1_F13R2_FB26, Filter bits
: CAN1_F13R2_FB27 ( -- x addr ) 27 bit CAN1_F13R2 ; \ CAN1_F13R2_FB27, Filter bits
: CAN1_F13R2_FB28 ( -- x addr ) 28 bit CAN1_F13R2 ; \ CAN1_F13R2_FB28, Filter bits
: CAN1_F13R2_FB29 ( -- x addr ) 29 bit CAN1_F13R2 ; \ CAN1_F13R2_FB29, Filter bits
: CAN1_F13R2_FB30 ( -- x addr ) 30 bit CAN1_F13R2 ; \ CAN1_F13R2_FB30, Filter bits
: CAN1_F13R2_FB31 ( -- x addr ) 31 bit CAN1_F13R2 ; \ CAN1_F13R2_FB31, Filter bits

\ CAN1_F14R1 (read-write) Reset:0x00000000
: CAN1_F14R1_FB0 ( -- x addr ) 0 bit CAN1_F14R1 ; \ CAN1_F14R1_FB0, Filter bits
: CAN1_F14R1_FB1 ( -- x addr ) 1 bit CAN1_F14R1 ; \ CAN1_F14R1_FB1, Filter bits
: CAN1_F14R1_FB2 ( -- x addr ) 2 bit CAN1_F14R1 ; \ CAN1_F14R1_FB2, Filter bits
: CAN1_F14R1_FB3 ( -- x addr ) 3 bit CAN1_F14R1 ; \ CAN1_F14R1_FB3, Filter bits
: CAN1_F14R1_FB4 ( -- x addr ) 4 bit CAN1_F14R1 ; \ CAN1_F14R1_FB4, Filter bits
: CAN1_F14R1_FB5 ( -- x addr ) 5 bit CAN1_F14R1 ; \ CAN1_F14R1_FB5, Filter bits
: CAN1_F14R1_FB6 ( -- x addr ) 6 bit CAN1_F14R1 ; \ CAN1_F14R1_FB6, Filter bits
: CAN1_F14R1_FB7 ( -- x addr ) 7 bit CAN1_F14R1 ; \ CAN1_F14R1_FB7, Filter bits
: CAN1_F14R1_FB8 ( -- x addr ) 8 bit CAN1_F14R1 ; \ CAN1_F14R1_FB8, Filter bits
: CAN1_F14R1_FB9 ( -- x addr ) 9 bit CAN1_F14R1 ; \ CAN1_F14R1_FB9, Filter bits
: CAN1_F14R1_FB10 ( -- x addr ) 10 bit CAN1_F14R1 ; \ CAN1_F14R1_FB10, Filter bits
: CAN1_F14R1_FB11 ( -- x addr ) 11 bit CAN1_F14R1 ; \ CAN1_F14R1_FB11, Filter bits
: CAN1_F14R1_FB12 ( -- x addr ) 12 bit CAN1_F14R1 ; \ CAN1_F14R1_FB12, Filter bits
: CAN1_F14R1_FB13 ( -- x addr ) 13 bit CAN1_F14R1 ; \ CAN1_F14R1_FB13, Filter bits
: CAN1_F14R1_FB14 ( -- x addr ) 14 bit CAN1_F14R1 ; \ CAN1_F14R1_FB14, Filter bits
: CAN1_F14R1_FB15 ( -- x addr ) 15 bit CAN1_F14R1 ; \ CAN1_F14R1_FB15, Filter bits
: CAN1_F14R1_FB16 ( -- x addr ) 16 bit CAN1_F14R1 ; \ CAN1_F14R1_FB16, Filter bits
: CAN1_F14R1_FB17 ( -- x addr ) 17 bit CAN1_F14R1 ; \ CAN1_F14R1_FB17, Filter bits
: CAN1_F14R1_FB18 ( -- x addr ) 18 bit CAN1_F14R1 ; \ CAN1_F14R1_FB18, Filter bits
: CAN1_F14R1_FB19 ( -- x addr ) 19 bit CAN1_F14R1 ; \ CAN1_F14R1_FB19, Filter bits
: CAN1_F14R1_FB20 ( -- x addr ) 20 bit CAN1_F14R1 ; \ CAN1_F14R1_FB20, Filter bits
: CAN1_F14R1_FB21 ( -- x addr ) 21 bit CAN1_F14R1 ; \ CAN1_F14R1_FB21, Filter bits
: CAN1_F14R1_FB22 ( -- x addr ) 22 bit CAN1_F14R1 ; \ CAN1_F14R1_FB22, Filter bits
: CAN1_F14R1_FB23 ( -- x addr ) 23 bit CAN1_F14R1 ; \ CAN1_F14R1_FB23, Filter bits
: CAN1_F14R1_FB24 ( -- x addr ) 24 bit CAN1_F14R1 ; \ CAN1_F14R1_FB24, Filter bits
: CAN1_F14R1_FB25 ( -- x addr ) 25 bit CAN1_F14R1 ; \ CAN1_F14R1_FB25, Filter bits
: CAN1_F14R1_FB26 ( -- x addr ) 26 bit CAN1_F14R1 ; \ CAN1_F14R1_FB26, Filter bits
: CAN1_F14R1_FB27 ( -- x addr ) 27 bit CAN1_F14R1 ; \ CAN1_F14R1_FB27, Filter bits
: CAN1_F14R1_FB28 ( -- x addr ) 28 bit CAN1_F14R1 ; \ CAN1_F14R1_FB28, Filter bits
: CAN1_F14R1_FB29 ( -- x addr ) 29 bit CAN1_F14R1 ; \ CAN1_F14R1_FB29, Filter bits
: CAN1_F14R1_FB30 ( -- x addr ) 30 bit CAN1_F14R1 ; \ CAN1_F14R1_FB30, Filter bits
: CAN1_F14R1_FB31 ( -- x addr ) 31 bit CAN1_F14R1 ; \ CAN1_F14R1_FB31, Filter bits

\ CAN1_F14R2 (read-write) Reset:0x00000000
: CAN1_F14R2_FB0 ( -- x addr ) 0 bit CAN1_F14R2 ; \ CAN1_F14R2_FB0, Filter bits
: CAN1_F14R2_FB1 ( -- x addr ) 1 bit CAN1_F14R2 ; \ CAN1_F14R2_FB1, Filter bits
: CAN1_F14R2_FB2 ( -- x addr ) 2 bit CAN1_F14R2 ; \ CAN1_F14R2_FB2, Filter bits
: CAN1_F14R2_FB3 ( -- x addr ) 3 bit CAN1_F14R2 ; \ CAN1_F14R2_FB3, Filter bits
: CAN1_F14R2_FB4 ( -- x addr ) 4 bit CAN1_F14R2 ; \ CAN1_F14R2_FB4, Filter bits
: CAN1_F14R2_FB5 ( -- x addr ) 5 bit CAN1_F14R2 ; \ CAN1_F14R2_FB5, Filter bits
: CAN1_F14R2_FB6 ( -- x addr ) 6 bit CAN1_F14R2 ; \ CAN1_F14R2_FB6, Filter bits
: CAN1_F14R2_FB7 ( -- x addr ) 7 bit CAN1_F14R2 ; \ CAN1_F14R2_FB7, Filter bits
: CAN1_F14R2_FB8 ( -- x addr ) 8 bit CAN1_F14R2 ; \ CAN1_F14R2_FB8, Filter bits
: CAN1_F14R2_FB9 ( -- x addr ) 9 bit CAN1_F14R2 ; \ CAN1_F14R2_FB9, Filter bits
: CAN1_F14R2_FB10 ( -- x addr ) 10 bit CAN1_F14R2 ; \ CAN1_F14R2_FB10, Filter bits
: CAN1_F14R2_FB11 ( -- x addr ) 11 bit CAN1_F14R2 ; \ CAN1_F14R2_FB11, Filter bits
: CAN1_F14R2_FB12 ( -- x addr ) 12 bit CAN1_F14R2 ; \ CAN1_F14R2_FB12, Filter bits
: CAN1_F14R2_FB13 ( -- x addr ) 13 bit CAN1_F14R2 ; \ CAN1_F14R2_FB13, Filter bits
: CAN1_F14R2_FB14 ( -- x addr ) 14 bit CAN1_F14R2 ; \ CAN1_F14R2_FB14, Filter bits
: CAN1_F14R2_FB15 ( -- x addr ) 15 bit CAN1_F14R2 ; \ CAN1_F14R2_FB15, Filter bits
: CAN1_F14R2_FB16 ( -- x addr ) 16 bit CAN1_F14R2 ; \ CAN1_F14R2_FB16, Filter bits
: CAN1_F14R2_FB17 ( -- x addr ) 17 bit CAN1_F14R2 ; \ CAN1_F14R2_FB17, Filter bits
: CAN1_F14R2_FB18 ( -- x addr ) 18 bit CAN1_F14R2 ; \ CAN1_F14R2_FB18, Filter bits
: CAN1_F14R2_FB19 ( -- x addr ) 19 bit CAN1_F14R2 ; \ CAN1_F14R2_FB19, Filter bits
: CAN1_F14R2_FB20 ( -- x addr ) 20 bit CAN1_F14R2 ; \ CAN1_F14R2_FB20, Filter bits
: CAN1_F14R2_FB21 ( -- x addr ) 21 bit CAN1_F14R2 ; \ CAN1_F14R2_FB21, Filter bits
: CAN1_F14R2_FB22 ( -- x addr ) 22 bit CAN1_F14R2 ; \ CAN1_F14R2_FB22, Filter bits
: CAN1_F14R2_FB23 ( -- x addr ) 23 bit CAN1_F14R2 ; \ CAN1_F14R2_FB23, Filter bits
: CAN1_F14R2_FB24 ( -- x addr ) 24 bit CAN1_F14R2 ; \ CAN1_F14R2_FB24, Filter bits
: CAN1_F14R2_FB25 ( -- x addr ) 25 bit CAN1_F14R2 ; \ CAN1_F14R2_FB25, Filter bits
: CAN1_F14R2_FB26 ( -- x addr ) 26 bit CAN1_F14R2 ; \ CAN1_F14R2_FB26, Filter bits
: CAN1_F14R2_FB27 ( -- x addr ) 27 bit CAN1_F14R2 ; \ CAN1_F14R2_FB27, Filter bits
: CAN1_F14R2_FB28 ( -- x addr ) 28 bit CAN1_F14R2 ; \ CAN1_F14R2_FB28, Filter bits
: CAN1_F14R2_FB29 ( -- x addr ) 29 bit CAN1_F14R2 ; \ CAN1_F14R2_FB29, Filter bits
: CAN1_F14R2_FB30 ( -- x addr ) 30 bit CAN1_F14R2 ; \ CAN1_F14R2_FB30, Filter bits
: CAN1_F14R2_FB31 ( -- x addr ) 31 bit CAN1_F14R2 ; \ CAN1_F14R2_FB31, Filter bits

\ CAN1_F15R1 (read-write) Reset:0x00000000
: CAN1_F15R1_FB0 ( -- x addr ) 0 bit CAN1_F15R1 ; \ CAN1_F15R1_FB0, Filter bits
: CAN1_F15R1_FB1 ( -- x addr ) 1 bit CAN1_F15R1 ; \ CAN1_F15R1_FB1, Filter bits
: CAN1_F15R1_FB2 ( -- x addr ) 2 bit CAN1_F15R1 ; \ CAN1_F15R1_FB2, Filter bits
: CAN1_F15R1_FB3 ( -- x addr ) 3 bit CAN1_F15R1 ; \ CAN1_F15R1_FB3, Filter bits
: CAN1_F15R1_FB4 ( -- x addr ) 4 bit CAN1_F15R1 ; \ CAN1_F15R1_FB4, Filter bits
: CAN1_F15R1_FB5 ( -- x addr ) 5 bit CAN1_F15R1 ; \ CAN1_F15R1_FB5, Filter bits
: CAN1_F15R1_FB6 ( -- x addr ) 6 bit CAN1_F15R1 ; \ CAN1_F15R1_FB6, Filter bits
: CAN1_F15R1_FB7 ( -- x addr ) 7 bit CAN1_F15R1 ; \ CAN1_F15R1_FB7, Filter bits
: CAN1_F15R1_FB8 ( -- x addr ) 8 bit CAN1_F15R1 ; \ CAN1_F15R1_FB8, Filter bits
: CAN1_F15R1_FB9 ( -- x addr ) 9 bit CAN1_F15R1 ; \ CAN1_F15R1_FB9, Filter bits
: CAN1_F15R1_FB10 ( -- x addr ) 10 bit CAN1_F15R1 ; \ CAN1_F15R1_FB10, Filter bits
: CAN1_F15R1_FB11 ( -- x addr ) 11 bit CAN1_F15R1 ; \ CAN1_F15R1_FB11, Filter bits
: CAN1_F15R1_FB12 ( -- x addr ) 12 bit CAN1_F15R1 ; \ CAN1_F15R1_FB12, Filter bits
: CAN1_F15R1_FB13 ( -- x addr ) 13 bit CAN1_F15R1 ; \ CAN1_F15R1_FB13, Filter bits
: CAN1_F15R1_FB14 ( -- x addr ) 14 bit CAN1_F15R1 ; \ CAN1_F15R1_FB14, Filter bits
: CAN1_F15R1_FB15 ( -- x addr ) 15 bit CAN1_F15R1 ; \ CAN1_F15R1_FB15, Filter bits
: CAN1_F15R1_FB16 ( -- x addr ) 16 bit CAN1_F15R1 ; \ CAN1_F15R1_FB16, Filter bits
: CAN1_F15R1_FB17 ( -- x addr ) 17 bit CAN1_F15R1 ; \ CAN1_F15R1_FB17, Filter bits
: CAN1_F15R1_FB18 ( -- x addr ) 18 bit CAN1_F15R1 ; \ CAN1_F15R1_FB18, Filter bits
: CAN1_F15R1_FB19 ( -- x addr ) 19 bit CAN1_F15R1 ; \ CAN1_F15R1_FB19, Filter bits
: CAN1_F15R1_FB20 ( -- x addr ) 20 bit CAN1_F15R1 ; \ CAN1_F15R1_FB20, Filter bits
: CAN1_F15R1_FB21 ( -- x addr ) 21 bit CAN1_F15R1 ; \ CAN1_F15R1_FB21, Filter bits
: CAN1_F15R1_FB22 ( -- x addr ) 22 bit CAN1_F15R1 ; \ CAN1_F15R1_FB22, Filter bits
: CAN1_F15R1_FB23 ( -- x addr ) 23 bit CAN1_F15R1 ; \ CAN1_F15R1_FB23, Filter bits
: CAN1_F15R1_FB24 ( -- x addr ) 24 bit CAN1_F15R1 ; \ CAN1_F15R1_FB24, Filter bits
: CAN1_F15R1_FB25 ( -- x addr ) 25 bit CAN1_F15R1 ; \ CAN1_F15R1_FB25, Filter bits
: CAN1_F15R1_FB26 ( -- x addr ) 26 bit CAN1_F15R1 ; \ CAN1_F15R1_FB26, Filter bits
: CAN1_F15R1_FB27 ( -- x addr ) 27 bit CAN1_F15R1 ; \ CAN1_F15R1_FB27, Filter bits
: CAN1_F15R1_FB28 ( -- x addr ) 28 bit CAN1_F15R1 ; \ CAN1_F15R1_FB28, Filter bits
: CAN1_F15R1_FB29 ( -- x addr ) 29 bit CAN1_F15R1 ; \ CAN1_F15R1_FB29, Filter bits
: CAN1_F15R1_FB30 ( -- x addr ) 30 bit CAN1_F15R1 ; \ CAN1_F15R1_FB30, Filter bits
: CAN1_F15R1_FB31 ( -- x addr ) 31 bit CAN1_F15R1 ; \ CAN1_F15R1_FB31, Filter bits

\ CAN1_F15R2 (read-write) Reset:0x00000000
: CAN1_F15R2_FB0 ( -- x addr ) 0 bit CAN1_F15R2 ; \ CAN1_F15R2_FB0, Filter bits
: CAN1_F15R2_FB1 ( -- x addr ) 1 bit CAN1_F15R2 ; \ CAN1_F15R2_FB1, Filter bits
: CAN1_F15R2_FB2 ( -- x addr ) 2 bit CAN1_F15R2 ; \ CAN1_F15R2_FB2, Filter bits
: CAN1_F15R2_FB3 ( -- x addr ) 3 bit CAN1_F15R2 ; \ CAN1_F15R2_FB3, Filter bits
: CAN1_F15R2_FB4 ( -- x addr ) 4 bit CAN1_F15R2 ; \ CAN1_F15R2_FB4, Filter bits
: CAN1_F15R2_FB5 ( -- x addr ) 5 bit CAN1_F15R2 ; \ CAN1_F15R2_FB5, Filter bits
: CAN1_F15R2_FB6 ( -- x addr ) 6 bit CAN1_F15R2 ; \ CAN1_F15R2_FB6, Filter bits
: CAN1_F15R2_FB7 ( -- x addr ) 7 bit CAN1_F15R2 ; \ CAN1_F15R2_FB7, Filter bits
: CAN1_F15R2_FB8 ( -- x addr ) 8 bit CAN1_F15R2 ; \ CAN1_F15R2_FB8, Filter bits
: CAN1_F15R2_FB9 ( -- x addr ) 9 bit CAN1_F15R2 ; \ CAN1_F15R2_FB9, Filter bits
: CAN1_F15R2_FB10 ( -- x addr ) 10 bit CAN1_F15R2 ; \ CAN1_F15R2_FB10, Filter bits
: CAN1_F15R2_FB11 ( -- x addr ) 11 bit CAN1_F15R2 ; \ CAN1_F15R2_FB11, Filter bits
: CAN1_F15R2_FB12 ( -- x addr ) 12 bit CAN1_F15R2 ; \ CAN1_F15R2_FB12, Filter bits
: CAN1_F15R2_FB13 ( -- x addr ) 13 bit CAN1_F15R2 ; \ CAN1_F15R2_FB13, Filter bits
: CAN1_F15R2_FB14 ( -- x addr ) 14 bit CAN1_F15R2 ; \ CAN1_F15R2_FB14, Filter bits
: CAN1_F15R2_FB15 ( -- x addr ) 15 bit CAN1_F15R2 ; \ CAN1_F15R2_FB15, Filter bits
: CAN1_F15R2_FB16 ( -- x addr ) 16 bit CAN1_F15R2 ; \ CAN1_F15R2_FB16, Filter bits
: CAN1_F15R2_FB17 ( -- x addr ) 17 bit CAN1_F15R2 ; \ CAN1_F15R2_FB17, Filter bits
: CAN1_F15R2_FB18 ( -- x addr ) 18 bit CAN1_F15R2 ; \ CAN1_F15R2_FB18, Filter bits
: CAN1_F15R2_FB19 ( -- x addr ) 19 bit CAN1_F15R2 ; \ CAN1_F15R2_FB19, Filter bits
: CAN1_F15R2_FB20 ( -- x addr ) 20 bit CAN1_F15R2 ; \ CAN1_F15R2_FB20, Filter bits
: CAN1_F15R2_FB21 ( -- x addr ) 21 bit CAN1_F15R2 ; \ CAN1_F15R2_FB21, Filter bits
: CAN1_F15R2_FB22 ( -- x addr ) 22 bit CAN1_F15R2 ; \ CAN1_F15R2_FB22, Filter bits
: CAN1_F15R2_FB23 ( -- x addr ) 23 bit CAN1_F15R2 ; \ CAN1_F15R2_FB23, Filter bits
: CAN1_F15R2_FB24 ( -- x addr ) 24 bit CAN1_F15R2 ; \ CAN1_F15R2_FB24, Filter bits
: CAN1_F15R2_FB25 ( -- x addr ) 25 bit CAN1_F15R2 ; \ CAN1_F15R2_FB25, Filter bits
: CAN1_F15R2_FB26 ( -- x addr ) 26 bit CAN1_F15R2 ; \ CAN1_F15R2_FB26, Filter bits
: CAN1_F15R2_FB27 ( -- x addr ) 27 bit CAN1_F15R2 ; \ CAN1_F15R2_FB27, Filter bits
: CAN1_F15R2_FB28 ( -- x addr ) 28 bit CAN1_F15R2 ; \ CAN1_F15R2_FB28, Filter bits
: CAN1_F15R2_FB29 ( -- x addr ) 29 bit CAN1_F15R2 ; \ CAN1_F15R2_FB29, Filter bits
: CAN1_F15R2_FB30 ( -- x addr ) 30 bit CAN1_F15R2 ; \ CAN1_F15R2_FB30, Filter bits
: CAN1_F15R2_FB31 ( -- x addr ) 31 bit CAN1_F15R2 ; \ CAN1_F15R2_FB31, Filter bits

\ CAN1_F16R1 (read-write) Reset:0x00000000
: CAN1_F16R1_FB0 ( -- x addr ) 0 bit CAN1_F16R1 ; \ CAN1_F16R1_FB0, Filter bits
: CAN1_F16R1_FB1 ( -- x addr ) 1 bit CAN1_F16R1 ; \ CAN1_F16R1_FB1, Filter bits
: CAN1_F16R1_FB2 ( -- x addr ) 2 bit CAN1_F16R1 ; \ CAN1_F16R1_FB2, Filter bits
: CAN1_F16R1_FB3 ( -- x addr ) 3 bit CAN1_F16R1 ; \ CAN1_F16R1_FB3, Filter bits
: CAN1_F16R1_FB4 ( -- x addr ) 4 bit CAN1_F16R1 ; \ CAN1_F16R1_FB4, Filter bits
: CAN1_F16R1_FB5 ( -- x addr ) 5 bit CAN1_F16R1 ; \ CAN1_F16R1_FB5, Filter bits
: CAN1_F16R1_FB6 ( -- x addr ) 6 bit CAN1_F16R1 ; \ CAN1_F16R1_FB6, Filter bits
: CAN1_F16R1_FB7 ( -- x addr ) 7 bit CAN1_F16R1 ; \ CAN1_F16R1_FB7, Filter bits
: CAN1_F16R1_FB8 ( -- x addr ) 8 bit CAN1_F16R1 ; \ CAN1_F16R1_FB8, Filter bits
: CAN1_F16R1_FB9 ( -- x addr ) 9 bit CAN1_F16R1 ; \ CAN1_F16R1_FB9, Filter bits
: CAN1_F16R1_FB10 ( -- x addr ) 10 bit CAN1_F16R1 ; \ CAN1_F16R1_FB10, Filter bits
: CAN1_F16R1_FB11 ( -- x addr ) 11 bit CAN1_F16R1 ; \ CAN1_F16R1_FB11, Filter bits
: CAN1_F16R1_FB12 ( -- x addr ) 12 bit CAN1_F16R1 ; \ CAN1_F16R1_FB12, Filter bits
: CAN1_F16R1_FB13 ( -- x addr ) 13 bit CAN1_F16R1 ; \ CAN1_F16R1_FB13, Filter bits
: CAN1_F16R1_FB14 ( -- x addr ) 14 bit CAN1_F16R1 ; \ CAN1_F16R1_FB14, Filter bits
: CAN1_F16R1_FB15 ( -- x addr ) 15 bit CAN1_F16R1 ; \ CAN1_F16R1_FB15, Filter bits
: CAN1_F16R1_FB16 ( -- x addr ) 16 bit CAN1_F16R1 ; \ CAN1_F16R1_FB16, Filter bits
: CAN1_F16R1_FB17 ( -- x addr ) 17 bit CAN1_F16R1 ; \ CAN1_F16R1_FB17, Filter bits
: CAN1_F16R1_FB18 ( -- x addr ) 18 bit CAN1_F16R1 ; \ CAN1_F16R1_FB18, Filter bits
: CAN1_F16R1_FB19 ( -- x addr ) 19 bit CAN1_F16R1 ; \ CAN1_F16R1_FB19, Filter bits
: CAN1_F16R1_FB20 ( -- x addr ) 20 bit CAN1_F16R1 ; \ CAN1_F16R1_FB20, Filter bits
: CAN1_F16R1_FB21 ( -- x addr ) 21 bit CAN1_F16R1 ; \ CAN1_F16R1_FB21, Filter bits
: CAN1_F16R1_FB22 ( -- x addr ) 22 bit CAN1_F16R1 ; \ CAN1_F16R1_FB22, Filter bits
: CAN1_F16R1_FB23 ( -- x addr ) 23 bit CAN1_F16R1 ; \ CAN1_F16R1_FB23, Filter bits
: CAN1_F16R1_FB24 ( -- x addr ) 24 bit CAN1_F16R1 ; \ CAN1_F16R1_FB24, Filter bits
: CAN1_F16R1_FB25 ( -- x addr ) 25 bit CAN1_F16R1 ; \ CAN1_F16R1_FB25, Filter bits
: CAN1_F16R1_FB26 ( -- x addr ) 26 bit CAN1_F16R1 ; \ CAN1_F16R1_FB26, Filter bits
: CAN1_F16R1_FB27 ( -- x addr ) 27 bit CAN1_F16R1 ; \ CAN1_F16R1_FB27, Filter bits
: CAN1_F16R1_FB28 ( -- x addr ) 28 bit CAN1_F16R1 ; \ CAN1_F16R1_FB28, Filter bits
: CAN1_F16R1_FB29 ( -- x addr ) 29 bit CAN1_F16R1 ; \ CAN1_F16R1_FB29, Filter bits
: CAN1_F16R1_FB30 ( -- x addr ) 30 bit CAN1_F16R1 ; \ CAN1_F16R1_FB30, Filter bits
: CAN1_F16R1_FB31 ( -- x addr ) 31 bit CAN1_F16R1 ; \ CAN1_F16R1_FB31, Filter bits

\ CAN1_F16R2 (read-write) Reset:0x00000000
: CAN1_F16R2_FB0 ( -- x addr ) 0 bit CAN1_F16R2 ; \ CAN1_F16R2_FB0, Filter bits
: CAN1_F16R2_FB1 ( -- x addr ) 1 bit CAN1_F16R2 ; \ CAN1_F16R2_FB1, Filter bits
: CAN1_F16R2_FB2 ( -- x addr ) 2 bit CAN1_F16R2 ; \ CAN1_F16R2_FB2, Filter bits
: CAN1_F16R2_FB3 ( -- x addr ) 3 bit CAN1_F16R2 ; \ CAN1_F16R2_FB3, Filter bits
: CAN1_F16R2_FB4 ( -- x addr ) 4 bit CAN1_F16R2 ; \ CAN1_F16R2_FB4, Filter bits
: CAN1_F16R2_FB5 ( -- x addr ) 5 bit CAN1_F16R2 ; \ CAN1_F16R2_FB5, Filter bits
: CAN1_F16R2_FB6 ( -- x addr ) 6 bit CAN1_F16R2 ; \ CAN1_F16R2_FB6, Filter bits
: CAN1_F16R2_FB7 ( -- x addr ) 7 bit CAN1_F16R2 ; \ CAN1_F16R2_FB7, Filter bits
: CAN1_F16R2_FB8 ( -- x addr ) 8 bit CAN1_F16R2 ; \ CAN1_F16R2_FB8, Filter bits
: CAN1_F16R2_FB9 ( -- x addr ) 9 bit CAN1_F16R2 ; \ CAN1_F16R2_FB9, Filter bits
: CAN1_F16R2_FB10 ( -- x addr ) 10 bit CAN1_F16R2 ; \ CAN1_F16R2_FB10, Filter bits
: CAN1_F16R2_FB11 ( -- x addr ) 11 bit CAN1_F16R2 ; \ CAN1_F16R2_FB11, Filter bits
: CAN1_F16R2_FB12 ( -- x addr ) 12 bit CAN1_F16R2 ; \ CAN1_F16R2_FB12, Filter bits
: CAN1_F16R2_FB13 ( -- x addr ) 13 bit CAN1_F16R2 ; \ CAN1_F16R2_FB13, Filter bits
: CAN1_F16R2_FB14 ( -- x addr ) 14 bit CAN1_F16R2 ; \ CAN1_F16R2_FB14, Filter bits
: CAN1_F16R2_FB15 ( -- x addr ) 15 bit CAN1_F16R2 ; \ CAN1_F16R2_FB15, Filter bits
: CAN1_F16R2_FB16 ( -- x addr ) 16 bit CAN1_F16R2 ; \ CAN1_F16R2_FB16, Filter bits
: CAN1_F16R2_FB17 ( -- x addr ) 17 bit CAN1_F16R2 ; \ CAN1_F16R2_FB17, Filter bits
: CAN1_F16R2_FB18 ( -- x addr ) 18 bit CAN1_F16R2 ; \ CAN1_F16R2_FB18, Filter bits
: CAN1_F16R2_FB19 ( -- x addr ) 19 bit CAN1_F16R2 ; \ CAN1_F16R2_FB19, Filter bits
: CAN1_F16R2_FB20 ( -- x addr ) 20 bit CAN1_F16R2 ; \ CAN1_F16R2_FB20, Filter bits
: CAN1_F16R2_FB21 ( -- x addr ) 21 bit CAN1_F16R2 ; \ CAN1_F16R2_FB21, Filter bits
: CAN1_F16R2_FB22 ( -- x addr ) 22 bit CAN1_F16R2 ; \ CAN1_F16R2_FB22, Filter bits
: CAN1_F16R2_FB23 ( -- x addr ) 23 bit CAN1_F16R2 ; \ CAN1_F16R2_FB23, Filter bits
: CAN1_F16R2_FB24 ( -- x addr ) 24 bit CAN1_F16R2 ; \ CAN1_F16R2_FB24, Filter bits
: CAN1_F16R2_FB25 ( -- x addr ) 25 bit CAN1_F16R2 ; \ CAN1_F16R2_FB25, Filter bits
: CAN1_F16R2_FB26 ( -- x addr ) 26 bit CAN1_F16R2 ; \ CAN1_F16R2_FB26, Filter bits
: CAN1_F16R2_FB27 ( -- x addr ) 27 bit CAN1_F16R2 ; \ CAN1_F16R2_FB27, Filter bits
: CAN1_F16R2_FB28 ( -- x addr ) 28 bit CAN1_F16R2 ; \ CAN1_F16R2_FB28, Filter bits
: CAN1_F16R2_FB29 ( -- x addr ) 29 bit CAN1_F16R2 ; \ CAN1_F16R2_FB29, Filter bits
: CAN1_F16R2_FB30 ( -- x addr ) 30 bit CAN1_F16R2 ; \ CAN1_F16R2_FB30, Filter bits
: CAN1_F16R2_FB31 ( -- x addr ) 31 bit CAN1_F16R2 ; \ CAN1_F16R2_FB31, Filter bits

\ CAN1_F17R1 (read-write) Reset:0x00000000
: CAN1_F17R1_FB0 ( -- x addr ) 0 bit CAN1_F17R1 ; \ CAN1_F17R1_FB0, Filter bits
: CAN1_F17R1_FB1 ( -- x addr ) 1 bit CAN1_F17R1 ; \ CAN1_F17R1_FB1, Filter bits
: CAN1_F17R1_FB2 ( -- x addr ) 2 bit CAN1_F17R1 ; \ CAN1_F17R1_FB2, Filter bits
: CAN1_F17R1_FB3 ( -- x addr ) 3 bit CAN1_F17R1 ; \ CAN1_F17R1_FB3, Filter bits
: CAN1_F17R1_FB4 ( -- x addr ) 4 bit CAN1_F17R1 ; \ CAN1_F17R1_FB4, Filter bits
: CAN1_F17R1_FB5 ( -- x addr ) 5 bit CAN1_F17R1 ; \ CAN1_F17R1_FB5, Filter bits
: CAN1_F17R1_FB6 ( -- x addr ) 6 bit CAN1_F17R1 ; \ CAN1_F17R1_FB6, Filter bits
: CAN1_F17R1_FB7 ( -- x addr ) 7 bit CAN1_F17R1 ; \ CAN1_F17R1_FB7, Filter bits
: CAN1_F17R1_FB8 ( -- x addr ) 8 bit CAN1_F17R1 ; \ CAN1_F17R1_FB8, Filter bits
: CAN1_F17R1_FB9 ( -- x addr ) 9 bit CAN1_F17R1 ; \ CAN1_F17R1_FB9, Filter bits
: CAN1_F17R1_FB10 ( -- x addr ) 10 bit CAN1_F17R1 ; \ CAN1_F17R1_FB10, Filter bits
: CAN1_F17R1_FB11 ( -- x addr ) 11 bit CAN1_F17R1 ; \ CAN1_F17R1_FB11, Filter bits
: CAN1_F17R1_FB12 ( -- x addr ) 12 bit CAN1_F17R1 ; \ CAN1_F17R1_FB12, Filter bits
: CAN1_F17R1_FB13 ( -- x addr ) 13 bit CAN1_F17R1 ; \ CAN1_F17R1_FB13, Filter bits
: CAN1_F17R1_FB14 ( -- x addr ) 14 bit CAN1_F17R1 ; \ CAN1_F17R1_FB14, Filter bits
: CAN1_F17R1_FB15 ( -- x addr ) 15 bit CAN1_F17R1 ; \ CAN1_F17R1_FB15, Filter bits
: CAN1_F17R1_FB16 ( -- x addr ) 16 bit CAN1_F17R1 ; \ CAN1_F17R1_FB16, Filter bits
: CAN1_F17R1_FB17 ( -- x addr ) 17 bit CAN1_F17R1 ; \ CAN1_F17R1_FB17, Filter bits
: CAN1_F17R1_FB18 ( -- x addr ) 18 bit CAN1_F17R1 ; \ CAN1_F17R1_FB18, Filter bits
: CAN1_F17R1_FB19 ( -- x addr ) 19 bit CAN1_F17R1 ; \ CAN1_F17R1_FB19, Filter bits
: CAN1_F17R1_FB20 ( -- x addr ) 20 bit CAN1_F17R1 ; \ CAN1_F17R1_FB20, Filter bits
: CAN1_F17R1_FB21 ( -- x addr ) 21 bit CAN1_F17R1 ; \ CAN1_F17R1_FB21, Filter bits
: CAN1_F17R1_FB22 ( -- x addr ) 22 bit CAN1_F17R1 ; \ CAN1_F17R1_FB22, Filter bits
: CAN1_F17R1_FB23 ( -- x addr ) 23 bit CAN1_F17R1 ; \ CAN1_F17R1_FB23, Filter bits
: CAN1_F17R1_FB24 ( -- x addr ) 24 bit CAN1_F17R1 ; \ CAN1_F17R1_FB24, Filter bits
: CAN1_F17R1_FB25 ( -- x addr ) 25 bit CAN1_F17R1 ; \ CAN1_F17R1_FB25, Filter bits
: CAN1_F17R1_FB26 ( -- x addr ) 26 bit CAN1_F17R1 ; \ CAN1_F17R1_FB26, Filter bits
: CAN1_F17R1_FB27 ( -- x addr ) 27 bit CAN1_F17R1 ; \ CAN1_F17R1_FB27, Filter bits
: CAN1_F17R1_FB28 ( -- x addr ) 28 bit CAN1_F17R1 ; \ CAN1_F17R1_FB28, Filter bits
: CAN1_F17R1_FB29 ( -- x addr ) 29 bit CAN1_F17R1 ; \ CAN1_F17R1_FB29, Filter bits
: CAN1_F17R1_FB30 ( -- x addr ) 30 bit CAN1_F17R1 ; \ CAN1_F17R1_FB30, Filter bits
: CAN1_F17R1_FB31 ( -- x addr ) 31 bit CAN1_F17R1 ; \ CAN1_F17R1_FB31, Filter bits

\ CAN1_F17R2 (read-write) Reset:0x00000000
: CAN1_F17R2_FB0 ( -- x addr ) 0 bit CAN1_F17R2 ; \ CAN1_F17R2_FB0, Filter bits
: CAN1_F17R2_FB1 ( -- x addr ) 1 bit CAN1_F17R2 ; \ CAN1_F17R2_FB1, Filter bits
: CAN1_F17R2_FB2 ( -- x addr ) 2 bit CAN1_F17R2 ; \ CAN1_F17R2_FB2, Filter bits
: CAN1_F17R2_FB3 ( -- x addr ) 3 bit CAN1_F17R2 ; \ CAN1_F17R2_FB3, Filter bits
: CAN1_F17R2_FB4 ( -- x addr ) 4 bit CAN1_F17R2 ; \ CAN1_F17R2_FB4, Filter bits
: CAN1_F17R2_FB5 ( -- x addr ) 5 bit CAN1_F17R2 ; \ CAN1_F17R2_FB5, Filter bits
: CAN1_F17R2_FB6 ( -- x addr ) 6 bit CAN1_F17R2 ; \ CAN1_F17R2_FB6, Filter bits
: CAN1_F17R2_FB7 ( -- x addr ) 7 bit CAN1_F17R2 ; \ CAN1_F17R2_FB7, Filter bits
: CAN1_F17R2_FB8 ( -- x addr ) 8 bit CAN1_F17R2 ; \ CAN1_F17R2_FB8, Filter bits
: CAN1_F17R2_FB9 ( -- x addr ) 9 bit CAN1_F17R2 ; \ CAN1_F17R2_FB9, Filter bits
: CAN1_F17R2_FB10 ( -- x addr ) 10 bit CAN1_F17R2 ; \ CAN1_F17R2_FB10, Filter bits
: CAN1_F17R2_FB11 ( -- x addr ) 11 bit CAN1_F17R2 ; \ CAN1_F17R2_FB11, Filter bits
: CAN1_F17R2_FB12 ( -- x addr ) 12 bit CAN1_F17R2 ; \ CAN1_F17R2_FB12, Filter bits
: CAN1_F17R2_FB13 ( -- x addr ) 13 bit CAN1_F17R2 ; \ CAN1_F17R2_FB13, Filter bits
: CAN1_F17R2_FB14 ( -- x addr ) 14 bit CAN1_F17R2 ; \ CAN1_F17R2_FB14, Filter bits
: CAN1_F17R2_FB15 ( -- x addr ) 15 bit CAN1_F17R2 ; \ CAN1_F17R2_FB15, Filter bits
: CAN1_F17R2_FB16 ( -- x addr ) 16 bit CAN1_F17R2 ; \ CAN1_F17R2_FB16, Filter bits
: CAN1_F17R2_FB17 ( -- x addr ) 17 bit CAN1_F17R2 ; \ CAN1_F17R2_FB17, Filter bits
: CAN1_F17R2_FB18 ( -- x addr ) 18 bit CAN1_F17R2 ; \ CAN1_F17R2_FB18, Filter bits
: CAN1_F17R2_FB19 ( -- x addr ) 19 bit CAN1_F17R2 ; \ CAN1_F17R2_FB19, Filter bits
: CAN1_F17R2_FB20 ( -- x addr ) 20 bit CAN1_F17R2 ; \ CAN1_F17R2_FB20, Filter bits
: CAN1_F17R2_FB21 ( -- x addr ) 21 bit CAN1_F17R2 ; \ CAN1_F17R2_FB21, Filter bits
: CAN1_F17R2_FB22 ( -- x addr ) 22 bit CAN1_F17R2 ; \ CAN1_F17R2_FB22, Filter bits
: CAN1_F17R2_FB23 ( -- x addr ) 23 bit CAN1_F17R2 ; \ CAN1_F17R2_FB23, Filter bits
: CAN1_F17R2_FB24 ( -- x addr ) 24 bit CAN1_F17R2 ; \ CAN1_F17R2_FB24, Filter bits
: CAN1_F17R2_FB25 ( -- x addr ) 25 bit CAN1_F17R2 ; \ CAN1_F17R2_FB25, Filter bits
: CAN1_F17R2_FB26 ( -- x addr ) 26 bit CAN1_F17R2 ; \ CAN1_F17R2_FB26, Filter bits
: CAN1_F17R2_FB27 ( -- x addr ) 27 bit CAN1_F17R2 ; \ CAN1_F17R2_FB27, Filter bits
: CAN1_F17R2_FB28 ( -- x addr ) 28 bit CAN1_F17R2 ; \ CAN1_F17R2_FB28, Filter bits
: CAN1_F17R2_FB29 ( -- x addr ) 29 bit CAN1_F17R2 ; \ CAN1_F17R2_FB29, Filter bits
: CAN1_F17R2_FB30 ( -- x addr ) 30 bit CAN1_F17R2 ; \ CAN1_F17R2_FB30, Filter bits
: CAN1_F17R2_FB31 ( -- x addr ) 31 bit CAN1_F17R2 ; \ CAN1_F17R2_FB31, Filter bits

\ CAN1_F18R1 (read-write) Reset:0x00000000
: CAN1_F18R1_FB0 ( -- x addr ) 0 bit CAN1_F18R1 ; \ CAN1_F18R1_FB0, Filter bits
: CAN1_F18R1_FB1 ( -- x addr ) 1 bit CAN1_F18R1 ; \ CAN1_F18R1_FB1, Filter bits
: CAN1_F18R1_FB2 ( -- x addr ) 2 bit CAN1_F18R1 ; \ CAN1_F18R1_FB2, Filter bits
: CAN1_F18R1_FB3 ( -- x addr ) 3 bit CAN1_F18R1 ; \ CAN1_F18R1_FB3, Filter bits
: CAN1_F18R1_FB4 ( -- x addr ) 4 bit CAN1_F18R1 ; \ CAN1_F18R1_FB4, Filter bits
: CAN1_F18R1_FB5 ( -- x addr ) 5 bit CAN1_F18R1 ; \ CAN1_F18R1_FB5, Filter bits
: CAN1_F18R1_FB6 ( -- x addr ) 6 bit CAN1_F18R1 ; \ CAN1_F18R1_FB6, Filter bits
: CAN1_F18R1_FB7 ( -- x addr ) 7 bit CAN1_F18R1 ; \ CAN1_F18R1_FB7, Filter bits
: CAN1_F18R1_FB8 ( -- x addr ) 8 bit CAN1_F18R1 ; \ CAN1_F18R1_FB8, Filter bits
: CAN1_F18R1_FB9 ( -- x addr ) 9 bit CAN1_F18R1 ; \ CAN1_F18R1_FB9, Filter bits
: CAN1_F18R1_FB10 ( -- x addr ) 10 bit CAN1_F18R1 ; \ CAN1_F18R1_FB10, Filter bits
: CAN1_F18R1_FB11 ( -- x addr ) 11 bit CAN1_F18R1 ; \ CAN1_F18R1_FB11, Filter bits
: CAN1_F18R1_FB12 ( -- x addr ) 12 bit CAN1_F18R1 ; \ CAN1_F18R1_FB12, Filter bits
: CAN1_F18R1_FB13 ( -- x addr ) 13 bit CAN1_F18R1 ; \ CAN1_F18R1_FB13, Filter bits
: CAN1_F18R1_FB14 ( -- x addr ) 14 bit CAN1_F18R1 ; \ CAN1_F18R1_FB14, Filter bits
: CAN1_F18R1_FB15 ( -- x addr ) 15 bit CAN1_F18R1 ; \ CAN1_F18R1_FB15, Filter bits
: CAN1_F18R1_FB16 ( -- x addr ) 16 bit CAN1_F18R1 ; \ CAN1_F18R1_FB16, Filter bits
: CAN1_F18R1_FB17 ( -- x addr ) 17 bit CAN1_F18R1 ; \ CAN1_F18R1_FB17, Filter bits
: CAN1_F18R1_FB18 ( -- x addr ) 18 bit CAN1_F18R1 ; \ CAN1_F18R1_FB18, Filter bits
: CAN1_F18R1_FB19 ( -- x addr ) 19 bit CAN1_F18R1 ; \ CAN1_F18R1_FB19, Filter bits
: CAN1_F18R1_FB20 ( -- x addr ) 20 bit CAN1_F18R1 ; \ CAN1_F18R1_FB20, Filter bits
: CAN1_F18R1_FB21 ( -- x addr ) 21 bit CAN1_F18R1 ; \ CAN1_F18R1_FB21, Filter bits
: CAN1_F18R1_FB22 ( -- x addr ) 22 bit CAN1_F18R1 ; \ CAN1_F18R1_FB22, Filter bits
: CAN1_F18R1_FB23 ( -- x addr ) 23 bit CAN1_F18R1 ; \ CAN1_F18R1_FB23, Filter bits
: CAN1_F18R1_FB24 ( -- x addr ) 24 bit CAN1_F18R1 ; \ CAN1_F18R1_FB24, Filter bits
: CAN1_F18R1_FB25 ( -- x addr ) 25 bit CAN1_F18R1 ; \ CAN1_F18R1_FB25, Filter bits
: CAN1_F18R1_FB26 ( -- x addr ) 26 bit CAN1_F18R1 ; \ CAN1_F18R1_FB26, Filter bits
: CAN1_F18R1_FB27 ( -- x addr ) 27 bit CAN1_F18R1 ; \ CAN1_F18R1_FB27, Filter bits
: CAN1_F18R1_FB28 ( -- x addr ) 28 bit CAN1_F18R1 ; \ CAN1_F18R1_FB28, Filter bits
: CAN1_F18R1_FB29 ( -- x addr ) 29 bit CAN1_F18R1 ; \ CAN1_F18R1_FB29, Filter bits
: CAN1_F18R1_FB30 ( -- x addr ) 30 bit CAN1_F18R1 ; \ CAN1_F18R1_FB30, Filter bits
: CAN1_F18R1_FB31 ( -- x addr ) 31 bit CAN1_F18R1 ; \ CAN1_F18R1_FB31, Filter bits

\ CAN1_F18R2 (read-write) Reset:0x00000000
: CAN1_F18R2_FB0 ( -- x addr ) 0 bit CAN1_F18R2 ; \ CAN1_F18R2_FB0, Filter bits
: CAN1_F18R2_FB1 ( -- x addr ) 1 bit CAN1_F18R2 ; \ CAN1_F18R2_FB1, Filter bits
: CAN1_F18R2_FB2 ( -- x addr ) 2 bit CAN1_F18R2 ; \ CAN1_F18R2_FB2, Filter bits
: CAN1_F18R2_FB3 ( -- x addr ) 3 bit CAN1_F18R2 ; \ CAN1_F18R2_FB3, Filter bits
: CAN1_F18R2_FB4 ( -- x addr ) 4 bit CAN1_F18R2 ; \ CAN1_F18R2_FB4, Filter bits
: CAN1_F18R2_FB5 ( -- x addr ) 5 bit CAN1_F18R2 ; \ CAN1_F18R2_FB5, Filter bits
: CAN1_F18R2_FB6 ( -- x addr ) 6 bit CAN1_F18R2 ; \ CAN1_F18R2_FB6, Filter bits
: CAN1_F18R2_FB7 ( -- x addr ) 7 bit CAN1_F18R2 ; \ CAN1_F18R2_FB7, Filter bits
: CAN1_F18R2_FB8 ( -- x addr ) 8 bit CAN1_F18R2 ; \ CAN1_F18R2_FB8, Filter bits
: CAN1_F18R2_FB9 ( -- x addr ) 9 bit CAN1_F18R2 ; \ CAN1_F18R2_FB9, Filter bits
: CAN1_F18R2_FB10 ( -- x addr ) 10 bit CAN1_F18R2 ; \ CAN1_F18R2_FB10, Filter bits
: CAN1_F18R2_FB11 ( -- x addr ) 11 bit CAN1_F18R2 ; \ CAN1_F18R2_FB11, Filter bits
: CAN1_F18R2_FB12 ( -- x addr ) 12 bit CAN1_F18R2 ; \ CAN1_F18R2_FB12, Filter bits
: CAN1_F18R2_FB13 ( -- x addr ) 13 bit CAN1_F18R2 ; \ CAN1_F18R2_FB13, Filter bits
: CAN1_F18R2_FB14 ( -- x addr ) 14 bit CAN1_F18R2 ; \ CAN1_F18R2_FB14, Filter bits
: CAN1_F18R2_FB15 ( -- x addr ) 15 bit CAN1_F18R2 ; \ CAN1_F18R2_FB15, Filter bits
: CAN1_F18R2_FB16 ( -- x addr ) 16 bit CAN1_F18R2 ; \ CAN1_F18R2_FB16, Filter bits
: CAN1_F18R2_FB17 ( -- x addr ) 17 bit CAN1_F18R2 ; \ CAN1_F18R2_FB17, Filter bits
: CAN1_F18R2_FB18 ( -- x addr ) 18 bit CAN1_F18R2 ; \ CAN1_F18R2_FB18, Filter bits
: CAN1_F18R2_FB19 ( -- x addr ) 19 bit CAN1_F18R2 ; \ CAN1_F18R2_FB19, Filter bits
: CAN1_F18R2_FB20 ( -- x addr ) 20 bit CAN1_F18R2 ; \ CAN1_F18R2_FB20, Filter bits
: CAN1_F18R2_FB21 ( -- x addr ) 21 bit CAN1_F18R2 ; \ CAN1_F18R2_FB21, Filter bits
: CAN1_F18R2_FB22 ( -- x addr ) 22 bit CAN1_F18R2 ; \ CAN1_F18R2_FB22, Filter bits
: CAN1_F18R2_FB23 ( -- x addr ) 23 bit CAN1_F18R2 ; \ CAN1_F18R2_FB23, Filter bits
: CAN1_F18R2_FB24 ( -- x addr ) 24 bit CAN1_F18R2 ; \ CAN1_F18R2_FB24, Filter bits
: CAN1_F18R2_FB25 ( -- x addr ) 25 bit CAN1_F18R2 ; \ CAN1_F18R2_FB25, Filter bits
: CAN1_F18R2_FB26 ( -- x addr ) 26 bit CAN1_F18R2 ; \ CAN1_F18R2_FB26, Filter bits
: CAN1_F18R2_FB27 ( -- x addr ) 27 bit CAN1_F18R2 ; \ CAN1_F18R2_FB27, Filter bits
: CAN1_F18R2_FB28 ( -- x addr ) 28 bit CAN1_F18R2 ; \ CAN1_F18R2_FB28, Filter bits
: CAN1_F18R2_FB29 ( -- x addr ) 29 bit CAN1_F18R2 ; \ CAN1_F18R2_FB29, Filter bits
: CAN1_F18R2_FB30 ( -- x addr ) 30 bit CAN1_F18R2 ; \ CAN1_F18R2_FB30, Filter bits
: CAN1_F18R2_FB31 ( -- x addr ) 31 bit CAN1_F18R2 ; \ CAN1_F18R2_FB31, Filter bits

\ CAN1_F19R1 (read-write) Reset:0x00000000
: CAN1_F19R1_FB0 ( -- x addr ) 0 bit CAN1_F19R1 ; \ CAN1_F19R1_FB0, Filter bits
: CAN1_F19R1_FB1 ( -- x addr ) 1 bit CAN1_F19R1 ; \ CAN1_F19R1_FB1, Filter bits
: CAN1_F19R1_FB2 ( -- x addr ) 2 bit CAN1_F19R1 ; \ CAN1_F19R1_FB2, Filter bits
: CAN1_F19R1_FB3 ( -- x addr ) 3 bit CAN1_F19R1 ; \ CAN1_F19R1_FB3, Filter bits
: CAN1_F19R1_FB4 ( -- x addr ) 4 bit CAN1_F19R1 ; \ CAN1_F19R1_FB4, Filter bits
: CAN1_F19R1_FB5 ( -- x addr ) 5 bit CAN1_F19R1 ; \ CAN1_F19R1_FB5, Filter bits
: CAN1_F19R1_FB6 ( -- x addr ) 6 bit CAN1_F19R1 ; \ CAN1_F19R1_FB6, Filter bits
: CAN1_F19R1_FB7 ( -- x addr ) 7 bit CAN1_F19R1 ; \ CAN1_F19R1_FB7, Filter bits
: CAN1_F19R1_FB8 ( -- x addr ) 8 bit CAN1_F19R1 ; \ CAN1_F19R1_FB8, Filter bits
: CAN1_F19R1_FB9 ( -- x addr ) 9 bit CAN1_F19R1 ; \ CAN1_F19R1_FB9, Filter bits
: CAN1_F19R1_FB10 ( -- x addr ) 10 bit CAN1_F19R1 ; \ CAN1_F19R1_FB10, Filter bits
: CAN1_F19R1_FB11 ( -- x addr ) 11 bit CAN1_F19R1 ; \ CAN1_F19R1_FB11, Filter bits
: CAN1_F19R1_FB12 ( -- x addr ) 12 bit CAN1_F19R1 ; \ CAN1_F19R1_FB12, Filter bits
: CAN1_F19R1_FB13 ( -- x addr ) 13 bit CAN1_F19R1 ; \ CAN1_F19R1_FB13, Filter bits
: CAN1_F19R1_FB14 ( -- x addr ) 14 bit CAN1_F19R1 ; \ CAN1_F19R1_FB14, Filter bits
: CAN1_F19R1_FB15 ( -- x addr ) 15 bit CAN1_F19R1 ; \ CAN1_F19R1_FB15, Filter bits
: CAN1_F19R1_FB16 ( -- x addr ) 16 bit CAN1_F19R1 ; \ CAN1_F19R1_FB16, Filter bits
: CAN1_F19R1_FB17 ( -- x addr ) 17 bit CAN1_F19R1 ; \ CAN1_F19R1_FB17, Filter bits
: CAN1_F19R1_FB18 ( -- x addr ) 18 bit CAN1_F19R1 ; \ CAN1_F19R1_FB18, Filter bits
: CAN1_F19R1_FB19 ( -- x addr ) 19 bit CAN1_F19R1 ; \ CAN1_F19R1_FB19, Filter bits
: CAN1_F19R1_FB20 ( -- x addr ) 20 bit CAN1_F19R1 ; \ CAN1_F19R1_FB20, Filter bits
: CAN1_F19R1_FB21 ( -- x addr ) 21 bit CAN1_F19R1 ; \ CAN1_F19R1_FB21, Filter bits
: CAN1_F19R1_FB22 ( -- x addr ) 22 bit CAN1_F19R1 ; \ CAN1_F19R1_FB22, Filter bits
: CAN1_F19R1_FB23 ( -- x addr ) 23 bit CAN1_F19R1 ; \ CAN1_F19R1_FB23, Filter bits
: CAN1_F19R1_FB24 ( -- x addr ) 24 bit CAN1_F19R1 ; \ CAN1_F19R1_FB24, Filter bits
: CAN1_F19R1_FB25 ( -- x addr ) 25 bit CAN1_F19R1 ; \ CAN1_F19R1_FB25, Filter bits
: CAN1_F19R1_FB26 ( -- x addr ) 26 bit CAN1_F19R1 ; \ CAN1_F19R1_FB26, Filter bits
: CAN1_F19R1_FB27 ( -- x addr ) 27 bit CAN1_F19R1 ; \ CAN1_F19R1_FB27, Filter bits
: CAN1_F19R1_FB28 ( -- x addr ) 28 bit CAN1_F19R1 ; \ CAN1_F19R1_FB28, Filter bits
: CAN1_F19R1_FB29 ( -- x addr ) 29 bit CAN1_F19R1 ; \ CAN1_F19R1_FB29, Filter bits
: CAN1_F19R1_FB30 ( -- x addr ) 30 bit CAN1_F19R1 ; \ CAN1_F19R1_FB30, Filter bits
: CAN1_F19R1_FB31 ( -- x addr ) 31 bit CAN1_F19R1 ; \ CAN1_F19R1_FB31, Filter bits

\ CAN1_F19R2 (read-write) Reset:0x00000000
: CAN1_F19R2_FB0 ( -- x addr ) 0 bit CAN1_F19R2 ; \ CAN1_F19R2_FB0, Filter bits
: CAN1_F19R2_FB1 ( -- x addr ) 1 bit CAN1_F19R2 ; \ CAN1_F19R2_FB1, Filter bits
: CAN1_F19R2_FB2 ( -- x addr ) 2 bit CAN1_F19R2 ; \ CAN1_F19R2_FB2, Filter bits
: CAN1_F19R2_FB3 ( -- x addr ) 3 bit CAN1_F19R2 ; \ CAN1_F19R2_FB3, Filter bits
: CAN1_F19R2_FB4 ( -- x addr ) 4 bit CAN1_F19R2 ; \ CAN1_F19R2_FB4, Filter bits
: CAN1_F19R2_FB5 ( -- x addr ) 5 bit CAN1_F19R2 ; \ CAN1_F19R2_FB5, Filter bits
: CAN1_F19R2_FB6 ( -- x addr ) 6 bit CAN1_F19R2 ; \ CAN1_F19R2_FB6, Filter bits
: CAN1_F19R2_FB7 ( -- x addr ) 7 bit CAN1_F19R2 ; \ CAN1_F19R2_FB7, Filter bits
: CAN1_F19R2_FB8 ( -- x addr ) 8 bit CAN1_F19R2 ; \ CAN1_F19R2_FB8, Filter bits
: CAN1_F19R2_FB9 ( -- x addr ) 9 bit CAN1_F19R2 ; \ CAN1_F19R2_FB9, Filter bits
: CAN1_F19R2_FB10 ( -- x addr ) 10 bit CAN1_F19R2 ; \ CAN1_F19R2_FB10, Filter bits
: CAN1_F19R2_FB11 ( -- x addr ) 11 bit CAN1_F19R2 ; \ CAN1_F19R2_FB11, Filter bits
: CAN1_F19R2_FB12 ( -- x addr ) 12 bit CAN1_F19R2 ; \ CAN1_F19R2_FB12, Filter bits
: CAN1_F19R2_FB13 ( -- x addr ) 13 bit CAN1_F19R2 ; \ CAN1_F19R2_FB13, Filter bits
: CAN1_F19R2_FB14 ( -- x addr ) 14 bit CAN1_F19R2 ; \ CAN1_F19R2_FB14, Filter bits
: CAN1_F19R2_FB15 ( -- x addr ) 15 bit CAN1_F19R2 ; \ CAN1_F19R2_FB15, Filter bits
: CAN1_F19R2_FB16 ( -- x addr ) 16 bit CAN1_F19R2 ; \ CAN1_F19R2_FB16, Filter bits
: CAN1_F19R2_FB17 ( -- x addr ) 17 bit CAN1_F19R2 ; \ CAN1_F19R2_FB17, Filter bits
: CAN1_F19R2_FB18 ( -- x addr ) 18 bit CAN1_F19R2 ; \ CAN1_F19R2_FB18, Filter bits
: CAN1_F19R2_FB19 ( -- x addr ) 19 bit CAN1_F19R2 ; \ CAN1_F19R2_FB19, Filter bits
: CAN1_F19R2_FB20 ( -- x addr ) 20 bit CAN1_F19R2 ; \ CAN1_F19R2_FB20, Filter bits
: CAN1_F19R2_FB21 ( -- x addr ) 21 bit CAN1_F19R2 ; \ CAN1_F19R2_FB21, Filter bits
: CAN1_F19R2_FB22 ( -- x addr ) 22 bit CAN1_F19R2 ; \ CAN1_F19R2_FB22, Filter bits
: CAN1_F19R2_FB23 ( -- x addr ) 23 bit CAN1_F19R2 ; \ CAN1_F19R2_FB23, Filter bits
: CAN1_F19R2_FB24 ( -- x addr ) 24 bit CAN1_F19R2 ; \ CAN1_F19R2_FB24, Filter bits
: CAN1_F19R2_FB25 ( -- x addr ) 25 bit CAN1_F19R2 ; \ CAN1_F19R2_FB25, Filter bits
: CAN1_F19R2_FB26 ( -- x addr ) 26 bit CAN1_F19R2 ; \ CAN1_F19R2_FB26, Filter bits
: CAN1_F19R2_FB27 ( -- x addr ) 27 bit CAN1_F19R2 ; \ CAN1_F19R2_FB27, Filter bits
: CAN1_F19R2_FB28 ( -- x addr ) 28 bit CAN1_F19R2 ; \ CAN1_F19R2_FB28, Filter bits
: CAN1_F19R2_FB29 ( -- x addr ) 29 bit CAN1_F19R2 ; \ CAN1_F19R2_FB29, Filter bits
: CAN1_F19R2_FB30 ( -- x addr ) 30 bit CAN1_F19R2 ; \ CAN1_F19R2_FB30, Filter bits
: CAN1_F19R2_FB31 ( -- x addr ) 31 bit CAN1_F19R2 ; \ CAN1_F19R2_FB31, Filter bits

\ CAN1_F20R1 (read-write) Reset:0x00000000
: CAN1_F20R1_FB0 ( -- x addr ) 0 bit CAN1_F20R1 ; \ CAN1_F20R1_FB0, Filter bits
: CAN1_F20R1_FB1 ( -- x addr ) 1 bit CAN1_F20R1 ; \ CAN1_F20R1_FB1, Filter bits
: CAN1_F20R1_FB2 ( -- x addr ) 2 bit CAN1_F20R1 ; \ CAN1_F20R1_FB2, Filter bits
: CAN1_F20R1_FB3 ( -- x addr ) 3 bit CAN1_F20R1 ; \ CAN1_F20R1_FB3, Filter bits
: CAN1_F20R1_FB4 ( -- x addr ) 4 bit CAN1_F20R1 ; \ CAN1_F20R1_FB4, Filter bits
: CAN1_F20R1_FB5 ( -- x addr ) 5 bit CAN1_F20R1 ; \ CAN1_F20R1_FB5, Filter bits
: CAN1_F20R1_FB6 ( -- x addr ) 6 bit CAN1_F20R1 ; \ CAN1_F20R1_FB6, Filter bits
: CAN1_F20R1_FB7 ( -- x addr ) 7 bit CAN1_F20R1 ; \ CAN1_F20R1_FB7, Filter bits
: CAN1_F20R1_FB8 ( -- x addr ) 8 bit CAN1_F20R1 ; \ CAN1_F20R1_FB8, Filter bits
: CAN1_F20R1_FB9 ( -- x addr ) 9 bit CAN1_F20R1 ; \ CAN1_F20R1_FB9, Filter bits
: CAN1_F20R1_FB10 ( -- x addr ) 10 bit CAN1_F20R1 ; \ CAN1_F20R1_FB10, Filter bits
: CAN1_F20R1_FB11 ( -- x addr ) 11 bit CAN1_F20R1 ; \ CAN1_F20R1_FB11, Filter bits
: CAN1_F20R1_FB12 ( -- x addr ) 12 bit CAN1_F20R1 ; \ CAN1_F20R1_FB12, Filter bits
: CAN1_F20R1_FB13 ( -- x addr ) 13 bit CAN1_F20R1 ; \ CAN1_F20R1_FB13, Filter bits
: CAN1_F20R1_FB14 ( -- x addr ) 14 bit CAN1_F20R1 ; \ CAN1_F20R1_FB14, Filter bits
: CAN1_F20R1_FB15 ( -- x addr ) 15 bit CAN1_F20R1 ; \ CAN1_F20R1_FB15, Filter bits
: CAN1_F20R1_FB16 ( -- x addr ) 16 bit CAN1_F20R1 ; \ CAN1_F20R1_FB16, Filter bits
: CAN1_F20R1_FB17 ( -- x addr ) 17 bit CAN1_F20R1 ; \ CAN1_F20R1_FB17, Filter bits
: CAN1_F20R1_FB18 ( -- x addr ) 18 bit CAN1_F20R1 ; \ CAN1_F20R1_FB18, Filter bits
: CAN1_F20R1_FB19 ( -- x addr ) 19 bit CAN1_F20R1 ; \ CAN1_F20R1_FB19, Filter bits
: CAN1_F20R1_FB20 ( -- x addr ) 20 bit CAN1_F20R1 ; \ CAN1_F20R1_FB20, Filter bits
: CAN1_F20R1_FB21 ( -- x addr ) 21 bit CAN1_F20R1 ; \ CAN1_F20R1_FB21, Filter bits
: CAN1_F20R1_FB22 ( -- x addr ) 22 bit CAN1_F20R1 ; \ CAN1_F20R1_FB22, Filter bits
: CAN1_F20R1_FB23 ( -- x addr ) 23 bit CAN1_F20R1 ; \ CAN1_F20R1_FB23, Filter bits
: CAN1_F20R1_FB24 ( -- x addr ) 24 bit CAN1_F20R1 ; \ CAN1_F20R1_FB24, Filter bits
: CAN1_F20R1_FB25 ( -- x addr ) 25 bit CAN1_F20R1 ; \ CAN1_F20R1_FB25, Filter bits
: CAN1_F20R1_FB26 ( -- x addr ) 26 bit CAN1_F20R1 ; \ CAN1_F20R1_FB26, Filter bits
: CAN1_F20R1_FB27 ( -- x addr ) 27 bit CAN1_F20R1 ; \ CAN1_F20R1_FB27, Filter bits
: CAN1_F20R1_FB28 ( -- x addr ) 28 bit CAN1_F20R1 ; \ CAN1_F20R1_FB28, Filter bits
: CAN1_F20R1_FB29 ( -- x addr ) 29 bit CAN1_F20R1 ; \ CAN1_F20R1_FB29, Filter bits
: CAN1_F20R1_FB30 ( -- x addr ) 30 bit CAN1_F20R1 ; \ CAN1_F20R1_FB30, Filter bits
: CAN1_F20R1_FB31 ( -- x addr ) 31 bit CAN1_F20R1 ; \ CAN1_F20R1_FB31, Filter bits

\ CAN1_F20R2 (read-write) Reset:0x00000000
: CAN1_F20R2_FB0 ( -- x addr ) 0 bit CAN1_F20R2 ; \ CAN1_F20R2_FB0, Filter bits
: CAN1_F20R2_FB1 ( -- x addr ) 1 bit CAN1_F20R2 ; \ CAN1_F20R2_FB1, Filter bits
: CAN1_F20R2_FB2 ( -- x addr ) 2 bit CAN1_F20R2 ; \ CAN1_F20R2_FB2, Filter bits
: CAN1_F20R2_FB3 ( -- x addr ) 3 bit CAN1_F20R2 ; \ CAN1_F20R2_FB3, Filter bits
: CAN1_F20R2_FB4 ( -- x addr ) 4 bit CAN1_F20R2 ; \ CAN1_F20R2_FB4, Filter bits
: CAN1_F20R2_FB5 ( -- x addr ) 5 bit CAN1_F20R2 ; \ CAN1_F20R2_FB5, Filter bits
: CAN1_F20R2_FB6 ( -- x addr ) 6 bit CAN1_F20R2 ; \ CAN1_F20R2_FB6, Filter bits
: CAN1_F20R2_FB7 ( -- x addr ) 7 bit CAN1_F20R2 ; \ CAN1_F20R2_FB7, Filter bits
: CAN1_F20R2_FB8 ( -- x addr ) 8 bit CAN1_F20R2 ; \ CAN1_F20R2_FB8, Filter bits
: CAN1_F20R2_FB9 ( -- x addr ) 9 bit CAN1_F20R2 ; \ CAN1_F20R2_FB9, Filter bits
: CAN1_F20R2_FB10 ( -- x addr ) 10 bit CAN1_F20R2 ; \ CAN1_F20R2_FB10, Filter bits
: CAN1_F20R2_FB11 ( -- x addr ) 11 bit CAN1_F20R2 ; \ CAN1_F20R2_FB11, Filter bits
: CAN1_F20R2_FB12 ( -- x addr ) 12 bit CAN1_F20R2 ; \ CAN1_F20R2_FB12, Filter bits
: CAN1_F20R2_FB13 ( -- x addr ) 13 bit CAN1_F20R2 ; \ CAN1_F20R2_FB13, Filter bits
: CAN1_F20R2_FB14 ( -- x addr ) 14 bit CAN1_F20R2 ; \ CAN1_F20R2_FB14, Filter bits
: CAN1_F20R2_FB15 ( -- x addr ) 15 bit CAN1_F20R2 ; \ CAN1_F20R2_FB15, Filter bits
: CAN1_F20R2_FB16 ( -- x addr ) 16 bit CAN1_F20R2 ; \ CAN1_F20R2_FB16, Filter bits
: CAN1_F20R2_FB17 ( -- x addr ) 17 bit CAN1_F20R2 ; \ CAN1_F20R2_FB17, Filter bits
: CAN1_F20R2_FB18 ( -- x addr ) 18 bit CAN1_F20R2 ; \ CAN1_F20R2_FB18, Filter bits
: CAN1_F20R2_FB19 ( -- x addr ) 19 bit CAN1_F20R2 ; \ CAN1_F20R2_FB19, Filter bits
: CAN1_F20R2_FB20 ( -- x addr ) 20 bit CAN1_F20R2 ; \ CAN1_F20R2_FB20, Filter bits
: CAN1_F20R2_FB21 ( -- x addr ) 21 bit CAN1_F20R2 ; \ CAN1_F20R2_FB21, Filter bits
: CAN1_F20R2_FB22 ( -- x addr ) 22 bit CAN1_F20R2 ; \ CAN1_F20R2_FB22, Filter bits
: CAN1_F20R2_FB23 ( -- x addr ) 23 bit CAN1_F20R2 ; \ CAN1_F20R2_FB23, Filter bits
: CAN1_F20R2_FB24 ( -- x addr ) 24 bit CAN1_F20R2 ; \ CAN1_F20R2_FB24, Filter bits
: CAN1_F20R2_FB25 ( -- x addr ) 25 bit CAN1_F20R2 ; \ CAN1_F20R2_FB25, Filter bits
: CAN1_F20R2_FB26 ( -- x addr ) 26 bit CAN1_F20R2 ; \ CAN1_F20R2_FB26, Filter bits
: CAN1_F20R2_FB27 ( -- x addr ) 27 bit CAN1_F20R2 ; \ CAN1_F20R2_FB27, Filter bits
: CAN1_F20R2_FB28 ( -- x addr ) 28 bit CAN1_F20R2 ; \ CAN1_F20R2_FB28, Filter bits
: CAN1_F20R2_FB29 ( -- x addr ) 29 bit CAN1_F20R2 ; \ CAN1_F20R2_FB29, Filter bits
: CAN1_F20R2_FB30 ( -- x addr ) 30 bit CAN1_F20R2 ; \ CAN1_F20R2_FB30, Filter bits
: CAN1_F20R2_FB31 ( -- x addr ) 31 bit CAN1_F20R2 ; \ CAN1_F20R2_FB31, Filter bits

\ CAN1_F21R1 (read-write) Reset:0x00000000
: CAN1_F21R1_FB0 ( -- x addr ) 0 bit CAN1_F21R1 ; \ CAN1_F21R1_FB0, Filter bits
: CAN1_F21R1_FB1 ( -- x addr ) 1 bit CAN1_F21R1 ; \ CAN1_F21R1_FB1, Filter bits
: CAN1_F21R1_FB2 ( -- x addr ) 2 bit CAN1_F21R1 ; \ CAN1_F21R1_FB2, Filter bits
: CAN1_F21R1_FB3 ( -- x addr ) 3 bit CAN1_F21R1 ; \ CAN1_F21R1_FB3, Filter bits
: CAN1_F21R1_FB4 ( -- x addr ) 4 bit CAN1_F21R1 ; \ CAN1_F21R1_FB4, Filter bits
: CAN1_F21R1_FB5 ( -- x addr ) 5 bit CAN1_F21R1 ; \ CAN1_F21R1_FB5, Filter bits
: CAN1_F21R1_FB6 ( -- x addr ) 6 bit CAN1_F21R1 ; \ CAN1_F21R1_FB6, Filter bits
: CAN1_F21R1_FB7 ( -- x addr ) 7 bit CAN1_F21R1 ; \ CAN1_F21R1_FB7, Filter bits
: CAN1_F21R1_FB8 ( -- x addr ) 8 bit CAN1_F21R1 ; \ CAN1_F21R1_FB8, Filter bits
: CAN1_F21R1_FB9 ( -- x addr ) 9 bit CAN1_F21R1 ; \ CAN1_F21R1_FB9, Filter bits
: CAN1_F21R1_FB10 ( -- x addr ) 10 bit CAN1_F21R1 ; \ CAN1_F21R1_FB10, Filter bits
: CAN1_F21R1_FB11 ( -- x addr ) 11 bit CAN1_F21R1 ; \ CAN1_F21R1_FB11, Filter bits
: CAN1_F21R1_FB12 ( -- x addr ) 12 bit CAN1_F21R1 ; \ CAN1_F21R1_FB12, Filter bits
: CAN1_F21R1_FB13 ( -- x addr ) 13 bit CAN1_F21R1 ; \ CAN1_F21R1_FB13, Filter bits
: CAN1_F21R1_FB14 ( -- x addr ) 14 bit CAN1_F21R1 ; \ CAN1_F21R1_FB14, Filter bits
: CAN1_F21R1_FB15 ( -- x addr ) 15 bit CAN1_F21R1 ; \ CAN1_F21R1_FB15, Filter bits
: CAN1_F21R1_FB16 ( -- x addr ) 16 bit CAN1_F21R1 ; \ CAN1_F21R1_FB16, Filter bits
: CAN1_F21R1_FB17 ( -- x addr ) 17 bit CAN1_F21R1 ; \ CAN1_F21R1_FB17, Filter bits
: CAN1_F21R1_FB18 ( -- x addr ) 18 bit CAN1_F21R1 ; \ CAN1_F21R1_FB18, Filter bits
: CAN1_F21R1_FB19 ( -- x addr ) 19 bit CAN1_F21R1 ; \ CAN1_F21R1_FB19, Filter bits
: CAN1_F21R1_FB20 ( -- x addr ) 20 bit CAN1_F21R1 ; \ CAN1_F21R1_FB20, Filter bits
: CAN1_F21R1_FB21 ( -- x addr ) 21 bit CAN1_F21R1 ; \ CAN1_F21R1_FB21, Filter bits
: CAN1_F21R1_FB22 ( -- x addr ) 22 bit CAN1_F21R1 ; \ CAN1_F21R1_FB22, Filter bits
: CAN1_F21R1_FB23 ( -- x addr ) 23 bit CAN1_F21R1 ; \ CAN1_F21R1_FB23, Filter bits
: CAN1_F21R1_FB24 ( -- x addr ) 24 bit CAN1_F21R1 ; \ CAN1_F21R1_FB24, Filter bits
: CAN1_F21R1_FB25 ( -- x addr ) 25 bit CAN1_F21R1 ; \ CAN1_F21R1_FB25, Filter bits
: CAN1_F21R1_FB26 ( -- x addr ) 26 bit CAN1_F21R1 ; \ CAN1_F21R1_FB26, Filter bits
: CAN1_F21R1_FB27 ( -- x addr ) 27 bit CAN1_F21R1 ; \ CAN1_F21R1_FB27, Filter bits
: CAN1_F21R1_FB28 ( -- x addr ) 28 bit CAN1_F21R1 ; \ CAN1_F21R1_FB28, Filter bits
: CAN1_F21R1_FB29 ( -- x addr ) 29 bit CAN1_F21R1 ; \ CAN1_F21R1_FB29, Filter bits
: CAN1_F21R1_FB30 ( -- x addr ) 30 bit CAN1_F21R1 ; \ CAN1_F21R1_FB30, Filter bits
: CAN1_F21R1_FB31 ( -- x addr ) 31 bit CAN1_F21R1 ; \ CAN1_F21R1_FB31, Filter bits

\ CAN1_F21R2 (read-write) Reset:0x00000000
: CAN1_F21R2_FB0 ( -- x addr ) 0 bit CAN1_F21R2 ; \ CAN1_F21R2_FB0, Filter bits
: CAN1_F21R2_FB1 ( -- x addr ) 1 bit CAN1_F21R2 ; \ CAN1_F21R2_FB1, Filter bits
: CAN1_F21R2_FB2 ( -- x addr ) 2 bit CAN1_F21R2 ; \ CAN1_F21R2_FB2, Filter bits
: CAN1_F21R2_FB3 ( -- x addr ) 3 bit CAN1_F21R2 ; \ CAN1_F21R2_FB3, Filter bits
: CAN1_F21R2_FB4 ( -- x addr ) 4 bit CAN1_F21R2 ; \ CAN1_F21R2_FB4, Filter bits
: CAN1_F21R2_FB5 ( -- x addr ) 5 bit CAN1_F21R2 ; \ CAN1_F21R2_FB5, Filter bits
: CAN1_F21R2_FB6 ( -- x addr ) 6 bit CAN1_F21R2 ; \ CAN1_F21R2_FB6, Filter bits
: CAN1_F21R2_FB7 ( -- x addr ) 7 bit CAN1_F21R2 ; \ CAN1_F21R2_FB7, Filter bits
: CAN1_F21R2_FB8 ( -- x addr ) 8 bit CAN1_F21R2 ; \ CAN1_F21R2_FB8, Filter bits
: CAN1_F21R2_FB9 ( -- x addr ) 9 bit CAN1_F21R2 ; \ CAN1_F21R2_FB9, Filter bits
: CAN1_F21R2_FB10 ( -- x addr ) 10 bit CAN1_F21R2 ; \ CAN1_F21R2_FB10, Filter bits
: CAN1_F21R2_FB11 ( -- x addr ) 11 bit CAN1_F21R2 ; \ CAN1_F21R2_FB11, Filter bits
: CAN1_F21R2_FB12 ( -- x addr ) 12 bit CAN1_F21R2 ; \ CAN1_F21R2_FB12, Filter bits
: CAN1_F21R2_FB13 ( -- x addr ) 13 bit CAN1_F21R2 ; \ CAN1_F21R2_FB13, Filter bits
: CAN1_F21R2_FB14 ( -- x addr ) 14 bit CAN1_F21R2 ; \ CAN1_F21R2_FB14, Filter bits
: CAN1_F21R2_FB15 ( -- x addr ) 15 bit CAN1_F21R2 ; \ CAN1_F21R2_FB15, Filter bits
: CAN1_F21R2_FB16 ( -- x addr ) 16 bit CAN1_F21R2 ; \ CAN1_F21R2_FB16, Filter bits
: CAN1_F21R2_FB17 ( -- x addr ) 17 bit CAN1_F21R2 ; \ CAN1_F21R2_FB17, Filter bits
: CAN1_F21R2_FB18 ( -- x addr ) 18 bit CAN1_F21R2 ; \ CAN1_F21R2_FB18, Filter bits
: CAN1_F21R2_FB19 ( -- x addr ) 19 bit CAN1_F21R2 ; \ CAN1_F21R2_FB19, Filter bits
: CAN1_F21R2_FB20 ( -- x addr ) 20 bit CAN1_F21R2 ; \ CAN1_F21R2_FB20, Filter bits
: CAN1_F21R2_FB21 ( -- x addr ) 21 bit CAN1_F21R2 ; \ CAN1_F21R2_FB21, Filter bits
: CAN1_F21R2_FB22 ( -- x addr ) 22 bit CAN1_F21R2 ; \ CAN1_F21R2_FB22, Filter bits
: CAN1_F21R2_FB23 ( -- x addr ) 23 bit CAN1_F21R2 ; \ CAN1_F21R2_FB23, Filter bits
: CAN1_F21R2_FB24 ( -- x addr ) 24 bit CAN1_F21R2 ; \ CAN1_F21R2_FB24, Filter bits
: CAN1_F21R2_FB25 ( -- x addr ) 25 bit CAN1_F21R2 ; \ CAN1_F21R2_FB25, Filter bits
: CAN1_F21R2_FB26 ( -- x addr ) 26 bit CAN1_F21R2 ; \ CAN1_F21R2_FB26, Filter bits
: CAN1_F21R2_FB27 ( -- x addr ) 27 bit CAN1_F21R2 ; \ CAN1_F21R2_FB27, Filter bits
: CAN1_F21R2_FB28 ( -- x addr ) 28 bit CAN1_F21R2 ; \ CAN1_F21R2_FB28, Filter bits
: CAN1_F21R2_FB29 ( -- x addr ) 29 bit CAN1_F21R2 ; \ CAN1_F21R2_FB29, Filter bits
: CAN1_F21R2_FB30 ( -- x addr ) 30 bit CAN1_F21R2 ; \ CAN1_F21R2_FB30, Filter bits
: CAN1_F21R2_FB31 ( -- x addr ) 31 bit CAN1_F21R2 ; \ CAN1_F21R2_FB31, Filter bits

\ CAN1_F22R1 (read-write) Reset:0x00000000
: CAN1_F22R1_FB0 ( -- x addr ) 0 bit CAN1_F22R1 ; \ CAN1_F22R1_FB0, Filter bits
: CAN1_F22R1_FB1 ( -- x addr ) 1 bit CAN1_F22R1 ; \ CAN1_F22R1_FB1, Filter bits
: CAN1_F22R1_FB2 ( -- x addr ) 2 bit CAN1_F22R1 ; \ CAN1_F22R1_FB2, Filter bits
: CAN1_F22R1_FB3 ( -- x addr ) 3 bit CAN1_F22R1 ; \ CAN1_F22R1_FB3, Filter bits
: CAN1_F22R1_FB4 ( -- x addr ) 4 bit CAN1_F22R1 ; \ CAN1_F22R1_FB4, Filter bits
: CAN1_F22R1_FB5 ( -- x addr ) 5 bit CAN1_F22R1 ; \ CAN1_F22R1_FB5, Filter bits
: CAN1_F22R1_FB6 ( -- x addr ) 6 bit CAN1_F22R1 ; \ CAN1_F22R1_FB6, Filter bits
: CAN1_F22R1_FB7 ( -- x addr ) 7 bit CAN1_F22R1 ; \ CAN1_F22R1_FB7, Filter bits
: CAN1_F22R1_FB8 ( -- x addr ) 8 bit CAN1_F22R1 ; \ CAN1_F22R1_FB8, Filter bits
: CAN1_F22R1_FB9 ( -- x addr ) 9 bit CAN1_F22R1 ; \ CAN1_F22R1_FB9, Filter bits
: CAN1_F22R1_FB10 ( -- x addr ) 10 bit CAN1_F22R1 ; \ CAN1_F22R1_FB10, Filter bits
: CAN1_F22R1_FB11 ( -- x addr ) 11 bit CAN1_F22R1 ; \ CAN1_F22R1_FB11, Filter bits
: CAN1_F22R1_FB12 ( -- x addr ) 12 bit CAN1_F22R1 ; \ CAN1_F22R1_FB12, Filter bits
: CAN1_F22R1_FB13 ( -- x addr ) 13 bit CAN1_F22R1 ; \ CAN1_F22R1_FB13, Filter bits
: CAN1_F22R1_FB14 ( -- x addr ) 14 bit CAN1_F22R1 ; \ CAN1_F22R1_FB14, Filter bits
: CAN1_F22R1_FB15 ( -- x addr ) 15 bit CAN1_F22R1 ; \ CAN1_F22R1_FB15, Filter bits
: CAN1_F22R1_FB16 ( -- x addr ) 16 bit CAN1_F22R1 ; \ CAN1_F22R1_FB16, Filter bits
: CAN1_F22R1_FB17 ( -- x addr ) 17 bit CAN1_F22R1 ; \ CAN1_F22R1_FB17, Filter bits
: CAN1_F22R1_FB18 ( -- x addr ) 18 bit CAN1_F22R1 ; \ CAN1_F22R1_FB18, Filter bits
: CAN1_F22R1_FB19 ( -- x addr ) 19 bit CAN1_F22R1 ; \ CAN1_F22R1_FB19, Filter bits
: CAN1_F22R1_FB20 ( -- x addr ) 20 bit CAN1_F22R1 ; \ CAN1_F22R1_FB20, Filter bits
: CAN1_F22R1_FB21 ( -- x addr ) 21 bit CAN1_F22R1 ; \ CAN1_F22R1_FB21, Filter bits
: CAN1_F22R1_FB22 ( -- x addr ) 22 bit CAN1_F22R1 ; \ CAN1_F22R1_FB22, Filter bits
: CAN1_F22R1_FB23 ( -- x addr ) 23 bit CAN1_F22R1 ; \ CAN1_F22R1_FB23, Filter bits
: CAN1_F22R1_FB24 ( -- x addr ) 24 bit CAN1_F22R1 ; \ CAN1_F22R1_FB24, Filter bits
: CAN1_F22R1_FB25 ( -- x addr ) 25 bit CAN1_F22R1 ; \ CAN1_F22R1_FB25, Filter bits
: CAN1_F22R1_FB26 ( -- x addr ) 26 bit CAN1_F22R1 ; \ CAN1_F22R1_FB26, Filter bits
: CAN1_F22R1_FB27 ( -- x addr ) 27 bit CAN1_F22R1 ; \ CAN1_F22R1_FB27, Filter bits
: CAN1_F22R1_FB28 ( -- x addr ) 28 bit CAN1_F22R1 ; \ CAN1_F22R1_FB28, Filter bits
: CAN1_F22R1_FB29 ( -- x addr ) 29 bit CAN1_F22R1 ; \ CAN1_F22R1_FB29, Filter bits
: CAN1_F22R1_FB30 ( -- x addr ) 30 bit CAN1_F22R1 ; \ CAN1_F22R1_FB30, Filter bits
: CAN1_F22R1_FB31 ( -- x addr ) 31 bit CAN1_F22R1 ; \ CAN1_F22R1_FB31, Filter bits

\ CAN1_F22R2 (read-write) Reset:0x00000000
: CAN1_F22R2_FB0 ( -- x addr ) 0 bit CAN1_F22R2 ; \ CAN1_F22R2_FB0, Filter bits
: CAN1_F22R2_FB1 ( -- x addr ) 1 bit CAN1_F22R2 ; \ CAN1_F22R2_FB1, Filter bits
: CAN1_F22R2_FB2 ( -- x addr ) 2 bit CAN1_F22R2 ; \ CAN1_F22R2_FB2, Filter bits
: CAN1_F22R2_FB3 ( -- x addr ) 3 bit CAN1_F22R2 ; \ CAN1_F22R2_FB3, Filter bits
: CAN1_F22R2_FB4 ( -- x addr ) 4 bit CAN1_F22R2 ; \ CAN1_F22R2_FB4, Filter bits
: CAN1_F22R2_FB5 ( -- x addr ) 5 bit CAN1_F22R2 ; \ CAN1_F22R2_FB5, Filter bits
: CAN1_F22R2_FB6 ( -- x addr ) 6 bit CAN1_F22R2 ; \ CAN1_F22R2_FB6, Filter bits
: CAN1_F22R2_FB7 ( -- x addr ) 7 bit CAN1_F22R2 ; \ CAN1_F22R2_FB7, Filter bits
: CAN1_F22R2_FB8 ( -- x addr ) 8 bit CAN1_F22R2 ; \ CAN1_F22R2_FB8, Filter bits
: CAN1_F22R2_FB9 ( -- x addr ) 9 bit CAN1_F22R2 ; \ CAN1_F22R2_FB9, Filter bits
: CAN1_F22R2_FB10 ( -- x addr ) 10 bit CAN1_F22R2 ; \ CAN1_F22R2_FB10, Filter bits
: CAN1_F22R2_FB11 ( -- x addr ) 11 bit CAN1_F22R2 ; \ CAN1_F22R2_FB11, Filter bits
: CAN1_F22R2_FB12 ( -- x addr ) 12 bit CAN1_F22R2 ; \ CAN1_F22R2_FB12, Filter bits
: CAN1_F22R2_FB13 ( -- x addr ) 13 bit CAN1_F22R2 ; \ CAN1_F22R2_FB13, Filter bits
: CAN1_F22R2_FB14 ( -- x addr ) 14 bit CAN1_F22R2 ; \ CAN1_F22R2_FB14, Filter bits
: CAN1_F22R2_FB15 ( -- x addr ) 15 bit CAN1_F22R2 ; \ CAN1_F22R2_FB15, Filter bits
: CAN1_F22R2_FB16 ( -- x addr ) 16 bit CAN1_F22R2 ; \ CAN1_F22R2_FB16, Filter bits
: CAN1_F22R2_FB17 ( -- x addr ) 17 bit CAN1_F22R2 ; \ CAN1_F22R2_FB17, Filter bits
: CAN1_F22R2_FB18 ( -- x addr ) 18 bit CAN1_F22R2 ; \ CAN1_F22R2_FB18, Filter bits
: CAN1_F22R2_FB19 ( -- x addr ) 19 bit CAN1_F22R2 ; \ CAN1_F22R2_FB19, Filter bits
: CAN1_F22R2_FB20 ( -- x addr ) 20 bit CAN1_F22R2 ; \ CAN1_F22R2_FB20, Filter bits
: CAN1_F22R2_FB21 ( -- x addr ) 21 bit CAN1_F22R2 ; \ CAN1_F22R2_FB21, Filter bits
: CAN1_F22R2_FB22 ( -- x addr ) 22 bit CAN1_F22R2 ; \ CAN1_F22R2_FB22, Filter bits
: CAN1_F22R2_FB23 ( -- x addr ) 23 bit CAN1_F22R2 ; \ CAN1_F22R2_FB23, Filter bits
: CAN1_F22R2_FB24 ( -- x addr ) 24 bit CAN1_F22R2 ; \ CAN1_F22R2_FB24, Filter bits
: CAN1_F22R2_FB25 ( -- x addr ) 25 bit CAN1_F22R2 ; \ CAN1_F22R2_FB25, Filter bits
: CAN1_F22R2_FB26 ( -- x addr ) 26 bit CAN1_F22R2 ; \ CAN1_F22R2_FB26, Filter bits
: CAN1_F22R2_FB27 ( -- x addr ) 27 bit CAN1_F22R2 ; \ CAN1_F22R2_FB27, Filter bits
: CAN1_F22R2_FB28 ( -- x addr ) 28 bit CAN1_F22R2 ; \ CAN1_F22R2_FB28, Filter bits
: CAN1_F22R2_FB29 ( -- x addr ) 29 bit CAN1_F22R2 ; \ CAN1_F22R2_FB29, Filter bits
: CAN1_F22R2_FB30 ( -- x addr ) 30 bit CAN1_F22R2 ; \ CAN1_F22R2_FB30, Filter bits
: CAN1_F22R2_FB31 ( -- x addr ) 31 bit CAN1_F22R2 ; \ CAN1_F22R2_FB31, Filter bits

\ CAN1_F23R1 (read-write) Reset:0x00000000
: CAN1_F23R1_FB0 ( -- x addr ) 0 bit CAN1_F23R1 ; \ CAN1_F23R1_FB0, Filter bits
: CAN1_F23R1_FB1 ( -- x addr ) 1 bit CAN1_F23R1 ; \ CAN1_F23R1_FB1, Filter bits
: CAN1_F23R1_FB2 ( -- x addr ) 2 bit CAN1_F23R1 ; \ CAN1_F23R1_FB2, Filter bits
: CAN1_F23R1_FB3 ( -- x addr ) 3 bit CAN1_F23R1 ; \ CAN1_F23R1_FB3, Filter bits
: CAN1_F23R1_FB4 ( -- x addr ) 4 bit CAN1_F23R1 ; \ CAN1_F23R1_FB4, Filter bits
: CAN1_F23R1_FB5 ( -- x addr ) 5 bit CAN1_F23R1 ; \ CAN1_F23R1_FB5, Filter bits
: CAN1_F23R1_FB6 ( -- x addr ) 6 bit CAN1_F23R1 ; \ CAN1_F23R1_FB6, Filter bits
: CAN1_F23R1_FB7 ( -- x addr ) 7 bit CAN1_F23R1 ; \ CAN1_F23R1_FB7, Filter bits
: CAN1_F23R1_FB8 ( -- x addr ) 8 bit CAN1_F23R1 ; \ CAN1_F23R1_FB8, Filter bits
: CAN1_F23R1_FB9 ( -- x addr ) 9 bit CAN1_F23R1 ; \ CAN1_F23R1_FB9, Filter bits
: CAN1_F23R1_FB10 ( -- x addr ) 10 bit CAN1_F23R1 ; \ CAN1_F23R1_FB10, Filter bits
: CAN1_F23R1_FB11 ( -- x addr ) 11 bit CAN1_F23R1 ; \ CAN1_F23R1_FB11, Filter bits
: CAN1_F23R1_FB12 ( -- x addr ) 12 bit CAN1_F23R1 ; \ CAN1_F23R1_FB12, Filter bits
: CAN1_F23R1_FB13 ( -- x addr ) 13 bit CAN1_F23R1 ; \ CAN1_F23R1_FB13, Filter bits
: CAN1_F23R1_FB14 ( -- x addr ) 14 bit CAN1_F23R1 ; \ CAN1_F23R1_FB14, Filter bits
: CAN1_F23R1_FB15 ( -- x addr ) 15 bit CAN1_F23R1 ; \ CAN1_F23R1_FB15, Filter bits
: CAN1_F23R1_FB16 ( -- x addr ) 16 bit CAN1_F23R1 ; \ CAN1_F23R1_FB16, Filter bits
: CAN1_F23R1_FB17 ( -- x addr ) 17 bit CAN1_F23R1 ; \ CAN1_F23R1_FB17, Filter bits
: CAN1_F23R1_FB18 ( -- x addr ) 18 bit CAN1_F23R1 ; \ CAN1_F23R1_FB18, Filter bits
: CAN1_F23R1_FB19 ( -- x addr ) 19 bit CAN1_F23R1 ; \ CAN1_F23R1_FB19, Filter bits
: CAN1_F23R1_FB20 ( -- x addr ) 20 bit CAN1_F23R1 ; \ CAN1_F23R1_FB20, Filter bits
: CAN1_F23R1_FB21 ( -- x addr ) 21 bit CAN1_F23R1 ; \ CAN1_F23R1_FB21, Filter bits
: CAN1_F23R1_FB22 ( -- x addr ) 22 bit CAN1_F23R1 ; \ CAN1_F23R1_FB22, Filter bits
: CAN1_F23R1_FB23 ( -- x addr ) 23 bit CAN1_F23R1 ; \ CAN1_F23R1_FB23, Filter bits
: CAN1_F23R1_FB24 ( -- x addr ) 24 bit CAN1_F23R1 ; \ CAN1_F23R1_FB24, Filter bits
: CAN1_F23R1_FB25 ( -- x addr ) 25 bit CAN1_F23R1 ; \ CAN1_F23R1_FB25, Filter bits
: CAN1_F23R1_FB26 ( -- x addr ) 26 bit CAN1_F23R1 ; \ CAN1_F23R1_FB26, Filter bits
: CAN1_F23R1_FB27 ( -- x addr ) 27 bit CAN1_F23R1 ; \ CAN1_F23R1_FB27, Filter bits
: CAN1_F23R1_FB28 ( -- x addr ) 28 bit CAN1_F23R1 ; \ CAN1_F23R1_FB28, Filter bits
: CAN1_F23R1_FB29 ( -- x addr ) 29 bit CAN1_F23R1 ; \ CAN1_F23R1_FB29, Filter bits
: CAN1_F23R1_FB30 ( -- x addr ) 30 bit CAN1_F23R1 ; \ CAN1_F23R1_FB30, Filter bits
: CAN1_F23R1_FB31 ( -- x addr ) 31 bit CAN1_F23R1 ; \ CAN1_F23R1_FB31, Filter bits

\ CAN1_F23R2 (read-write) Reset:0x00000000
: CAN1_F23R2_FB0 ( -- x addr ) 0 bit CAN1_F23R2 ; \ CAN1_F23R2_FB0, Filter bits
: CAN1_F23R2_FB1 ( -- x addr ) 1 bit CAN1_F23R2 ; \ CAN1_F23R2_FB1, Filter bits
: CAN1_F23R2_FB2 ( -- x addr ) 2 bit CAN1_F23R2 ; \ CAN1_F23R2_FB2, Filter bits
: CAN1_F23R2_FB3 ( -- x addr ) 3 bit CAN1_F23R2 ; \ CAN1_F23R2_FB3, Filter bits
: CAN1_F23R2_FB4 ( -- x addr ) 4 bit CAN1_F23R2 ; \ CAN1_F23R2_FB4, Filter bits
: CAN1_F23R2_FB5 ( -- x addr ) 5 bit CAN1_F23R2 ; \ CAN1_F23R2_FB5, Filter bits
: CAN1_F23R2_FB6 ( -- x addr ) 6 bit CAN1_F23R2 ; \ CAN1_F23R2_FB6, Filter bits
: CAN1_F23R2_FB7 ( -- x addr ) 7 bit CAN1_F23R2 ; \ CAN1_F23R2_FB7, Filter bits
: CAN1_F23R2_FB8 ( -- x addr ) 8 bit CAN1_F23R2 ; \ CAN1_F23R2_FB8, Filter bits
: CAN1_F23R2_FB9 ( -- x addr ) 9 bit CAN1_F23R2 ; \ CAN1_F23R2_FB9, Filter bits
: CAN1_F23R2_FB10 ( -- x addr ) 10 bit CAN1_F23R2 ; \ CAN1_F23R2_FB10, Filter bits
: CAN1_F23R2_FB11 ( -- x addr ) 11 bit CAN1_F23R2 ; \ CAN1_F23R2_FB11, Filter bits
: CAN1_F23R2_FB12 ( -- x addr ) 12 bit CAN1_F23R2 ; \ CAN1_F23R2_FB12, Filter bits
: CAN1_F23R2_FB13 ( -- x addr ) 13 bit CAN1_F23R2 ; \ CAN1_F23R2_FB13, Filter bits
: CAN1_F23R2_FB14 ( -- x addr ) 14 bit CAN1_F23R2 ; \ CAN1_F23R2_FB14, Filter bits
: CAN1_F23R2_FB15 ( -- x addr ) 15 bit CAN1_F23R2 ; \ CAN1_F23R2_FB15, Filter bits
: CAN1_F23R2_FB16 ( -- x addr ) 16 bit CAN1_F23R2 ; \ CAN1_F23R2_FB16, Filter bits
: CAN1_F23R2_FB17 ( -- x addr ) 17 bit CAN1_F23R2 ; \ CAN1_F23R2_FB17, Filter bits
: CAN1_F23R2_FB18 ( -- x addr ) 18 bit CAN1_F23R2 ; \ CAN1_F23R2_FB18, Filter bits
: CAN1_F23R2_FB19 ( -- x addr ) 19 bit CAN1_F23R2 ; \ CAN1_F23R2_FB19, Filter bits
: CAN1_F23R2_FB20 ( -- x addr ) 20 bit CAN1_F23R2 ; \ CAN1_F23R2_FB20, Filter bits
: CAN1_F23R2_FB21 ( -- x addr ) 21 bit CAN1_F23R2 ; \ CAN1_F23R2_FB21, Filter bits
: CAN1_F23R2_FB22 ( -- x addr ) 22 bit CAN1_F23R2 ; \ CAN1_F23R2_FB22, Filter bits
: CAN1_F23R2_FB23 ( -- x addr ) 23 bit CAN1_F23R2 ; \ CAN1_F23R2_FB23, Filter bits
: CAN1_F23R2_FB24 ( -- x addr ) 24 bit CAN1_F23R2 ; \ CAN1_F23R2_FB24, Filter bits
: CAN1_F23R2_FB25 ( -- x addr ) 25 bit CAN1_F23R2 ; \ CAN1_F23R2_FB25, Filter bits
: CAN1_F23R2_FB26 ( -- x addr ) 26 bit CAN1_F23R2 ; \ CAN1_F23R2_FB26, Filter bits
: CAN1_F23R2_FB27 ( -- x addr ) 27 bit CAN1_F23R2 ; \ CAN1_F23R2_FB27, Filter bits
: CAN1_F23R2_FB28 ( -- x addr ) 28 bit CAN1_F23R2 ; \ CAN1_F23R2_FB28, Filter bits
: CAN1_F23R2_FB29 ( -- x addr ) 29 bit CAN1_F23R2 ; \ CAN1_F23R2_FB29, Filter bits
: CAN1_F23R2_FB30 ( -- x addr ) 30 bit CAN1_F23R2 ; \ CAN1_F23R2_FB30, Filter bits
: CAN1_F23R2_FB31 ( -- x addr ) 31 bit CAN1_F23R2 ; \ CAN1_F23R2_FB31, Filter bits

\ CAN1_F24R1 (read-write) Reset:0x00000000
: CAN1_F24R1_FB0 ( -- x addr ) 0 bit CAN1_F24R1 ; \ CAN1_F24R1_FB0, Filter bits
: CAN1_F24R1_FB1 ( -- x addr ) 1 bit CAN1_F24R1 ; \ CAN1_F24R1_FB1, Filter bits
: CAN1_F24R1_FB2 ( -- x addr ) 2 bit CAN1_F24R1 ; \ CAN1_F24R1_FB2, Filter bits
: CAN1_F24R1_FB3 ( -- x addr ) 3 bit CAN1_F24R1 ; \ CAN1_F24R1_FB3, Filter bits
: CAN1_F24R1_FB4 ( -- x addr ) 4 bit CAN1_F24R1 ; \ CAN1_F24R1_FB4, Filter bits
: CAN1_F24R1_FB5 ( -- x addr ) 5 bit CAN1_F24R1 ; \ CAN1_F24R1_FB5, Filter bits
: CAN1_F24R1_FB6 ( -- x addr ) 6 bit CAN1_F24R1 ; \ CAN1_F24R1_FB6, Filter bits
: CAN1_F24R1_FB7 ( -- x addr ) 7 bit CAN1_F24R1 ; \ CAN1_F24R1_FB7, Filter bits
: CAN1_F24R1_FB8 ( -- x addr ) 8 bit CAN1_F24R1 ; \ CAN1_F24R1_FB8, Filter bits
: CAN1_F24R1_FB9 ( -- x addr ) 9 bit CAN1_F24R1 ; \ CAN1_F24R1_FB9, Filter bits
: CAN1_F24R1_FB10 ( -- x addr ) 10 bit CAN1_F24R1 ; \ CAN1_F24R1_FB10, Filter bits
: CAN1_F24R1_FB11 ( -- x addr ) 11 bit CAN1_F24R1 ; \ CAN1_F24R1_FB11, Filter bits
: CAN1_F24R1_FB12 ( -- x addr ) 12 bit CAN1_F24R1 ; \ CAN1_F24R1_FB12, Filter bits
: CAN1_F24R1_FB13 ( -- x addr ) 13 bit CAN1_F24R1 ; \ CAN1_F24R1_FB13, Filter bits
: CAN1_F24R1_FB14 ( -- x addr ) 14 bit CAN1_F24R1 ; \ CAN1_F24R1_FB14, Filter bits
: CAN1_F24R1_FB15 ( -- x addr ) 15 bit CAN1_F24R1 ; \ CAN1_F24R1_FB15, Filter bits
: CAN1_F24R1_FB16 ( -- x addr ) 16 bit CAN1_F24R1 ; \ CAN1_F24R1_FB16, Filter bits
: CAN1_F24R1_FB17 ( -- x addr ) 17 bit CAN1_F24R1 ; \ CAN1_F24R1_FB17, Filter bits
: CAN1_F24R1_FB18 ( -- x addr ) 18 bit CAN1_F24R1 ; \ CAN1_F24R1_FB18, Filter bits
: CAN1_F24R1_FB19 ( -- x addr ) 19 bit CAN1_F24R1 ; \ CAN1_F24R1_FB19, Filter bits
: CAN1_F24R1_FB20 ( -- x addr ) 20 bit CAN1_F24R1 ; \ CAN1_F24R1_FB20, Filter bits
: CAN1_F24R1_FB21 ( -- x addr ) 21 bit CAN1_F24R1 ; \ CAN1_F24R1_FB21, Filter bits
: CAN1_F24R1_FB22 ( -- x addr ) 22 bit CAN1_F24R1 ; \ CAN1_F24R1_FB22, Filter bits
: CAN1_F24R1_FB23 ( -- x addr ) 23 bit CAN1_F24R1 ; \ CAN1_F24R1_FB23, Filter bits
: CAN1_F24R1_FB24 ( -- x addr ) 24 bit CAN1_F24R1 ; \ CAN1_F24R1_FB24, Filter bits
: CAN1_F24R1_FB25 ( -- x addr ) 25 bit CAN1_F24R1 ; \ CAN1_F24R1_FB25, Filter bits
: CAN1_F24R1_FB26 ( -- x addr ) 26 bit CAN1_F24R1 ; \ CAN1_F24R1_FB26, Filter bits
: CAN1_F24R1_FB27 ( -- x addr ) 27 bit CAN1_F24R1 ; \ CAN1_F24R1_FB27, Filter bits
: CAN1_F24R1_FB28 ( -- x addr ) 28 bit CAN1_F24R1 ; \ CAN1_F24R1_FB28, Filter bits
: CAN1_F24R1_FB29 ( -- x addr ) 29 bit CAN1_F24R1 ; \ CAN1_F24R1_FB29, Filter bits
: CAN1_F24R1_FB30 ( -- x addr ) 30 bit CAN1_F24R1 ; \ CAN1_F24R1_FB30, Filter bits
: CAN1_F24R1_FB31 ( -- x addr ) 31 bit CAN1_F24R1 ; \ CAN1_F24R1_FB31, Filter bits

\ CAN1_F24R2 (read-write) Reset:0x00000000
: CAN1_F24R2_FB0 ( -- x addr ) 0 bit CAN1_F24R2 ; \ CAN1_F24R2_FB0, Filter bits
: CAN1_F24R2_FB1 ( -- x addr ) 1 bit CAN1_F24R2 ; \ CAN1_F24R2_FB1, Filter bits
: CAN1_F24R2_FB2 ( -- x addr ) 2 bit CAN1_F24R2 ; \ CAN1_F24R2_FB2, Filter bits
: CAN1_F24R2_FB3 ( -- x addr ) 3 bit CAN1_F24R2 ; \ CAN1_F24R2_FB3, Filter bits
: CAN1_F24R2_FB4 ( -- x addr ) 4 bit CAN1_F24R2 ; \ CAN1_F24R2_FB4, Filter bits
: CAN1_F24R2_FB5 ( -- x addr ) 5 bit CAN1_F24R2 ; \ CAN1_F24R2_FB5, Filter bits
: CAN1_F24R2_FB6 ( -- x addr ) 6 bit CAN1_F24R2 ; \ CAN1_F24R2_FB6, Filter bits
: CAN1_F24R2_FB7 ( -- x addr ) 7 bit CAN1_F24R2 ; \ CAN1_F24R2_FB7, Filter bits
: CAN1_F24R2_FB8 ( -- x addr ) 8 bit CAN1_F24R2 ; \ CAN1_F24R2_FB8, Filter bits
: CAN1_F24R2_FB9 ( -- x addr ) 9 bit CAN1_F24R2 ; \ CAN1_F24R2_FB9, Filter bits
: CAN1_F24R2_FB10 ( -- x addr ) 10 bit CAN1_F24R2 ; \ CAN1_F24R2_FB10, Filter bits
: CAN1_F24R2_FB11 ( -- x addr ) 11 bit CAN1_F24R2 ; \ CAN1_F24R2_FB11, Filter bits
: CAN1_F24R2_FB12 ( -- x addr ) 12 bit CAN1_F24R2 ; \ CAN1_F24R2_FB12, Filter bits
: CAN1_F24R2_FB13 ( -- x addr ) 13 bit CAN1_F24R2 ; \ CAN1_F24R2_FB13, Filter bits
: CAN1_F24R2_FB14 ( -- x addr ) 14 bit CAN1_F24R2 ; \ CAN1_F24R2_FB14, Filter bits
: CAN1_F24R2_FB15 ( -- x addr ) 15 bit CAN1_F24R2 ; \ CAN1_F24R2_FB15, Filter bits
: CAN1_F24R2_FB16 ( -- x addr ) 16 bit CAN1_F24R2 ; \ CAN1_F24R2_FB16, Filter bits
: CAN1_F24R2_FB17 ( -- x addr ) 17 bit CAN1_F24R2 ; \ CAN1_F24R2_FB17, Filter bits
: CAN1_F24R2_FB18 ( -- x addr ) 18 bit CAN1_F24R2 ; \ CAN1_F24R2_FB18, Filter bits
: CAN1_F24R2_FB19 ( -- x addr ) 19 bit CAN1_F24R2 ; \ CAN1_F24R2_FB19, Filter bits
: CAN1_F24R2_FB20 ( -- x addr ) 20 bit CAN1_F24R2 ; \ CAN1_F24R2_FB20, Filter bits
: CAN1_F24R2_FB21 ( -- x addr ) 21 bit CAN1_F24R2 ; \ CAN1_F24R2_FB21, Filter bits
: CAN1_F24R2_FB22 ( -- x addr ) 22 bit CAN1_F24R2 ; \ CAN1_F24R2_FB22, Filter bits
: CAN1_F24R2_FB23 ( -- x addr ) 23 bit CAN1_F24R2 ; \ CAN1_F24R2_FB23, Filter bits
: CAN1_F24R2_FB24 ( -- x addr ) 24 bit CAN1_F24R2 ; \ CAN1_F24R2_FB24, Filter bits
: CAN1_F24R2_FB25 ( -- x addr ) 25 bit CAN1_F24R2 ; \ CAN1_F24R2_FB25, Filter bits
: CAN1_F24R2_FB26 ( -- x addr ) 26 bit CAN1_F24R2 ; \ CAN1_F24R2_FB26, Filter bits
: CAN1_F24R2_FB27 ( -- x addr ) 27 bit CAN1_F24R2 ; \ CAN1_F24R2_FB27, Filter bits
: CAN1_F24R2_FB28 ( -- x addr ) 28 bit CAN1_F24R2 ; \ CAN1_F24R2_FB28, Filter bits
: CAN1_F24R2_FB29 ( -- x addr ) 29 bit CAN1_F24R2 ; \ CAN1_F24R2_FB29, Filter bits
: CAN1_F24R2_FB30 ( -- x addr ) 30 bit CAN1_F24R2 ; \ CAN1_F24R2_FB30, Filter bits
: CAN1_F24R2_FB31 ( -- x addr ) 31 bit CAN1_F24R2 ; \ CAN1_F24R2_FB31, Filter bits

\ CAN1_F25R1 (read-write) Reset:0x00000000
: CAN1_F25R1_FB0 ( -- x addr ) 0 bit CAN1_F25R1 ; \ CAN1_F25R1_FB0, Filter bits
: CAN1_F25R1_FB1 ( -- x addr ) 1 bit CAN1_F25R1 ; \ CAN1_F25R1_FB1, Filter bits
: CAN1_F25R1_FB2 ( -- x addr ) 2 bit CAN1_F25R1 ; \ CAN1_F25R1_FB2, Filter bits
: CAN1_F25R1_FB3 ( -- x addr ) 3 bit CAN1_F25R1 ; \ CAN1_F25R1_FB3, Filter bits
: CAN1_F25R1_FB4 ( -- x addr ) 4 bit CAN1_F25R1 ; \ CAN1_F25R1_FB4, Filter bits
: CAN1_F25R1_FB5 ( -- x addr ) 5 bit CAN1_F25R1 ; \ CAN1_F25R1_FB5, Filter bits
: CAN1_F25R1_FB6 ( -- x addr ) 6 bit CAN1_F25R1 ; \ CAN1_F25R1_FB6, Filter bits
: CAN1_F25R1_FB7 ( -- x addr ) 7 bit CAN1_F25R1 ; \ CAN1_F25R1_FB7, Filter bits
: CAN1_F25R1_FB8 ( -- x addr ) 8 bit CAN1_F25R1 ; \ CAN1_F25R1_FB8, Filter bits
: CAN1_F25R1_FB9 ( -- x addr ) 9 bit CAN1_F25R1 ; \ CAN1_F25R1_FB9, Filter bits
: CAN1_F25R1_FB10 ( -- x addr ) 10 bit CAN1_F25R1 ; \ CAN1_F25R1_FB10, Filter bits
: CAN1_F25R1_FB11 ( -- x addr ) 11 bit CAN1_F25R1 ; \ CAN1_F25R1_FB11, Filter bits
: CAN1_F25R1_FB12 ( -- x addr ) 12 bit CAN1_F25R1 ; \ CAN1_F25R1_FB12, Filter bits
: CAN1_F25R1_FB13 ( -- x addr ) 13 bit CAN1_F25R1 ; \ CAN1_F25R1_FB13, Filter bits
: CAN1_F25R1_FB14 ( -- x addr ) 14 bit CAN1_F25R1 ; \ CAN1_F25R1_FB14, Filter bits
: CAN1_F25R1_FB15 ( -- x addr ) 15 bit CAN1_F25R1 ; \ CAN1_F25R1_FB15, Filter bits
: CAN1_F25R1_FB16 ( -- x addr ) 16 bit CAN1_F25R1 ; \ CAN1_F25R1_FB16, Filter bits
: CAN1_F25R1_FB17 ( -- x addr ) 17 bit CAN1_F25R1 ; \ CAN1_F25R1_FB17, Filter bits
: CAN1_F25R1_FB18 ( -- x addr ) 18 bit CAN1_F25R1 ; \ CAN1_F25R1_FB18, Filter bits
: CAN1_F25R1_FB19 ( -- x addr ) 19 bit CAN1_F25R1 ; \ CAN1_F25R1_FB19, Filter bits
: CAN1_F25R1_FB20 ( -- x addr ) 20 bit CAN1_F25R1 ; \ CAN1_F25R1_FB20, Filter bits
: CAN1_F25R1_FB21 ( -- x addr ) 21 bit CAN1_F25R1 ; \ CAN1_F25R1_FB21, Filter bits
: CAN1_F25R1_FB22 ( -- x addr ) 22 bit CAN1_F25R1 ; \ CAN1_F25R1_FB22, Filter bits
: CAN1_F25R1_FB23 ( -- x addr ) 23 bit CAN1_F25R1 ; \ CAN1_F25R1_FB23, Filter bits
: CAN1_F25R1_FB24 ( -- x addr ) 24 bit CAN1_F25R1 ; \ CAN1_F25R1_FB24, Filter bits
: CAN1_F25R1_FB25 ( -- x addr ) 25 bit CAN1_F25R1 ; \ CAN1_F25R1_FB25, Filter bits
: CAN1_F25R1_FB26 ( -- x addr ) 26 bit CAN1_F25R1 ; \ CAN1_F25R1_FB26, Filter bits
: CAN1_F25R1_FB27 ( -- x addr ) 27 bit CAN1_F25R1 ; \ CAN1_F25R1_FB27, Filter bits
: CAN1_F25R1_FB28 ( -- x addr ) 28 bit CAN1_F25R1 ; \ CAN1_F25R1_FB28, Filter bits
: CAN1_F25R1_FB29 ( -- x addr ) 29 bit CAN1_F25R1 ; \ CAN1_F25R1_FB29, Filter bits
: CAN1_F25R1_FB30 ( -- x addr ) 30 bit CAN1_F25R1 ; \ CAN1_F25R1_FB30, Filter bits
: CAN1_F25R1_FB31 ( -- x addr ) 31 bit CAN1_F25R1 ; \ CAN1_F25R1_FB31, Filter bits

\ CAN1_F25R2 (read-write) Reset:0x00000000
: CAN1_F25R2_FB0 ( -- x addr ) 0 bit CAN1_F25R2 ; \ CAN1_F25R2_FB0, Filter bits
: CAN1_F25R2_FB1 ( -- x addr ) 1 bit CAN1_F25R2 ; \ CAN1_F25R2_FB1, Filter bits
: CAN1_F25R2_FB2 ( -- x addr ) 2 bit CAN1_F25R2 ; \ CAN1_F25R2_FB2, Filter bits
: CAN1_F25R2_FB3 ( -- x addr ) 3 bit CAN1_F25R2 ; \ CAN1_F25R2_FB3, Filter bits
: CAN1_F25R2_FB4 ( -- x addr ) 4 bit CAN1_F25R2 ; \ CAN1_F25R2_FB4, Filter bits
: CAN1_F25R2_FB5 ( -- x addr ) 5 bit CAN1_F25R2 ; \ CAN1_F25R2_FB5, Filter bits
: CAN1_F25R2_FB6 ( -- x addr ) 6 bit CAN1_F25R2 ; \ CAN1_F25R2_FB6, Filter bits
: CAN1_F25R2_FB7 ( -- x addr ) 7 bit CAN1_F25R2 ; \ CAN1_F25R2_FB7, Filter bits
: CAN1_F25R2_FB8 ( -- x addr ) 8 bit CAN1_F25R2 ; \ CAN1_F25R2_FB8, Filter bits
: CAN1_F25R2_FB9 ( -- x addr ) 9 bit CAN1_F25R2 ; \ CAN1_F25R2_FB9, Filter bits
: CAN1_F25R2_FB10 ( -- x addr ) 10 bit CAN1_F25R2 ; \ CAN1_F25R2_FB10, Filter bits
: CAN1_F25R2_FB11 ( -- x addr ) 11 bit CAN1_F25R2 ; \ CAN1_F25R2_FB11, Filter bits
: CAN1_F25R2_FB12 ( -- x addr ) 12 bit CAN1_F25R2 ; \ CAN1_F25R2_FB12, Filter bits
: CAN1_F25R2_FB13 ( -- x addr ) 13 bit CAN1_F25R2 ; \ CAN1_F25R2_FB13, Filter bits
: CAN1_F25R2_FB14 ( -- x addr ) 14 bit CAN1_F25R2 ; \ CAN1_F25R2_FB14, Filter bits
: CAN1_F25R2_FB15 ( -- x addr ) 15 bit CAN1_F25R2 ; \ CAN1_F25R2_FB15, Filter bits
: CAN1_F25R2_FB16 ( -- x addr ) 16 bit CAN1_F25R2 ; \ CAN1_F25R2_FB16, Filter bits
: CAN1_F25R2_FB17 ( -- x addr ) 17 bit CAN1_F25R2 ; \ CAN1_F25R2_FB17, Filter bits
: CAN1_F25R2_FB18 ( -- x addr ) 18 bit CAN1_F25R2 ; \ CAN1_F25R2_FB18, Filter bits
: CAN1_F25R2_FB19 ( -- x addr ) 19 bit CAN1_F25R2 ; \ CAN1_F25R2_FB19, Filter bits
: CAN1_F25R2_FB20 ( -- x addr ) 20 bit CAN1_F25R2 ; \ CAN1_F25R2_FB20, Filter bits
: CAN1_F25R2_FB21 ( -- x addr ) 21 bit CAN1_F25R2 ; \ CAN1_F25R2_FB21, Filter bits
: CAN1_F25R2_FB22 ( -- x addr ) 22 bit CAN1_F25R2 ; \ CAN1_F25R2_FB22, Filter bits
: CAN1_F25R2_FB23 ( -- x addr ) 23 bit CAN1_F25R2 ; \ CAN1_F25R2_FB23, Filter bits
: CAN1_F25R2_FB24 ( -- x addr ) 24 bit CAN1_F25R2 ; \ CAN1_F25R2_FB24, Filter bits
: CAN1_F25R2_FB25 ( -- x addr ) 25 bit CAN1_F25R2 ; \ CAN1_F25R2_FB25, Filter bits
: CAN1_F25R2_FB26 ( -- x addr ) 26 bit CAN1_F25R2 ; \ CAN1_F25R2_FB26, Filter bits
: CAN1_F25R2_FB27 ( -- x addr ) 27 bit CAN1_F25R2 ; \ CAN1_F25R2_FB27, Filter bits
: CAN1_F25R2_FB28 ( -- x addr ) 28 bit CAN1_F25R2 ; \ CAN1_F25R2_FB28, Filter bits
: CAN1_F25R2_FB29 ( -- x addr ) 29 bit CAN1_F25R2 ; \ CAN1_F25R2_FB29, Filter bits
: CAN1_F25R2_FB30 ( -- x addr ) 30 bit CAN1_F25R2 ; \ CAN1_F25R2_FB30, Filter bits
: CAN1_F25R2_FB31 ( -- x addr ) 31 bit CAN1_F25R2 ; \ CAN1_F25R2_FB31, Filter bits

\ CAN1_F26R1 (read-write) Reset:0x00000000
: CAN1_F26R1_FB0 ( -- x addr ) 0 bit CAN1_F26R1 ; \ CAN1_F26R1_FB0, Filter bits
: CAN1_F26R1_FB1 ( -- x addr ) 1 bit CAN1_F26R1 ; \ CAN1_F26R1_FB1, Filter bits
: CAN1_F26R1_FB2 ( -- x addr ) 2 bit CAN1_F26R1 ; \ CAN1_F26R1_FB2, Filter bits
: CAN1_F26R1_FB3 ( -- x addr ) 3 bit CAN1_F26R1 ; \ CAN1_F26R1_FB3, Filter bits
: CAN1_F26R1_FB4 ( -- x addr ) 4 bit CAN1_F26R1 ; \ CAN1_F26R1_FB4, Filter bits
: CAN1_F26R1_FB5 ( -- x addr ) 5 bit CAN1_F26R1 ; \ CAN1_F26R1_FB5, Filter bits
: CAN1_F26R1_FB6 ( -- x addr ) 6 bit CAN1_F26R1 ; \ CAN1_F26R1_FB6, Filter bits
: CAN1_F26R1_FB7 ( -- x addr ) 7 bit CAN1_F26R1 ; \ CAN1_F26R1_FB7, Filter bits
: CAN1_F26R1_FB8 ( -- x addr ) 8 bit CAN1_F26R1 ; \ CAN1_F26R1_FB8, Filter bits
: CAN1_F26R1_FB9 ( -- x addr ) 9 bit CAN1_F26R1 ; \ CAN1_F26R1_FB9, Filter bits
: CAN1_F26R1_FB10 ( -- x addr ) 10 bit CAN1_F26R1 ; \ CAN1_F26R1_FB10, Filter bits
: CAN1_F26R1_FB11 ( -- x addr ) 11 bit CAN1_F26R1 ; \ CAN1_F26R1_FB11, Filter bits
: CAN1_F26R1_FB12 ( -- x addr ) 12 bit CAN1_F26R1 ; \ CAN1_F26R1_FB12, Filter bits
: CAN1_F26R1_FB13 ( -- x addr ) 13 bit CAN1_F26R1 ; \ CAN1_F26R1_FB13, Filter bits
: CAN1_F26R1_FB14 ( -- x addr ) 14 bit CAN1_F26R1 ; \ CAN1_F26R1_FB14, Filter bits
: CAN1_F26R1_FB15 ( -- x addr ) 15 bit CAN1_F26R1 ; \ CAN1_F26R1_FB15, Filter bits
: CAN1_F26R1_FB16 ( -- x addr ) 16 bit CAN1_F26R1 ; \ CAN1_F26R1_FB16, Filter bits
: CAN1_F26R1_FB17 ( -- x addr ) 17 bit CAN1_F26R1 ; \ CAN1_F26R1_FB17, Filter bits
: CAN1_F26R1_FB18 ( -- x addr ) 18 bit CAN1_F26R1 ; \ CAN1_F26R1_FB18, Filter bits
: CAN1_F26R1_FB19 ( -- x addr ) 19 bit CAN1_F26R1 ; \ CAN1_F26R1_FB19, Filter bits
: CAN1_F26R1_FB20 ( -- x addr ) 20 bit CAN1_F26R1 ; \ CAN1_F26R1_FB20, Filter bits
: CAN1_F26R1_FB21 ( -- x addr ) 21 bit CAN1_F26R1 ; \ CAN1_F26R1_FB21, Filter bits
: CAN1_F26R1_FB22 ( -- x addr ) 22 bit CAN1_F26R1 ; \ CAN1_F26R1_FB22, Filter bits
: CAN1_F26R1_FB23 ( -- x addr ) 23 bit CAN1_F26R1 ; \ CAN1_F26R1_FB23, Filter bits
: CAN1_F26R1_FB24 ( -- x addr ) 24 bit CAN1_F26R1 ; \ CAN1_F26R1_FB24, Filter bits
: CAN1_F26R1_FB25 ( -- x addr ) 25 bit CAN1_F26R1 ; \ CAN1_F26R1_FB25, Filter bits
: CAN1_F26R1_FB26 ( -- x addr ) 26 bit CAN1_F26R1 ; \ CAN1_F26R1_FB26, Filter bits
: CAN1_F26R1_FB27 ( -- x addr ) 27 bit CAN1_F26R1 ; \ CAN1_F26R1_FB27, Filter bits
: CAN1_F26R1_FB28 ( -- x addr ) 28 bit CAN1_F26R1 ; \ CAN1_F26R1_FB28, Filter bits
: CAN1_F26R1_FB29 ( -- x addr ) 29 bit CAN1_F26R1 ; \ CAN1_F26R1_FB29, Filter bits
: CAN1_F26R1_FB30 ( -- x addr ) 30 bit CAN1_F26R1 ; \ CAN1_F26R1_FB30, Filter bits
: CAN1_F26R1_FB31 ( -- x addr ) 31 bit CAN1_F26R1 ; \ CAN1_F26R1_FB31, Filter bits

\ CAN1_F26R2 (read-write) Reset:0x00000000
: CAN1_F26R2_FB0 ( -- x addr ) 0 bit CAN1_F26R2 ; \ CAN1_F26R2_FB0, Filter bits
: CAN1_F26R2_FB1 ( -- x addr ) 1 bit CAN1_F26R2 ; \ CAN1_F26R2_FB1, Filter bits
: CAN1_F26R2_FB2 ( -- x addr ) 2 bit CAN1_F26R2 ; \ CAN1_F26R2_FB2, Filter bits
: CAN1_F26R2_FB3 ( -- x addr ) 3 bit CAN1_F26R2 ; \ CAN1_F26R2_FB3, Filter bits
: CAN1_F26R2_FB4 ( -- x addr ) 4 bit CAN1_F26R2 ; \ CAN1_F26R2_FB4, Filter bits
: CAN1_F26R2_FB5 ( -- x addr ) 5 bit CAN1_F26R2 ; \ CAN1_F26R2_FB5, Filter bits
: CAN1_F26R2_FB6 ( -- x addr ) 6 bit CAN1_F26R2 ; \ CAN1_F26R2_FB6, Filter bits
: CAN1_F26R2_FB7 ( -- x addr ) 7 bit CAN1_F26R2 ; \ CAN1_F26R2_FB7, Filter bits
: CAN1_F26R2_FB8 ( -- x addr ) 8 bit CAN1_F26R2 ; \ CAN1_F26R2_FB8, Filter bits
: CAN1_F26R2_FB9 ( -- x addr ) 9 bit CAN1_F26R2 ; \ CAN1_F26R2_FB9, Filter bits
: CAN1_F26R2_FB10 ( -- x addr ) 10 bit CAN1_F26R2 ; \ CAN1_F26R2_FB10, Filter bits
: CAN1_F26R2_FB11 ( -- x addr ) 11 bit CAN1_F26R2 ; \ CAN1_F26R2_FB11, Filter bits
: CAN1_F26R2_FB12 ( -- x addr ) 12 bit CAN1_F26R2 ; \ CAN1_F26R2_FB12, Filter bits
: CAN1_F26R2_FB13 ( -- x addr ) 13 bit CAN1_F26R2 ; \ CAN1_F26R2_FB13, Filter bits
: CAN1_F26R2_FB14 ( -- x addr ) 14 bit CAN1_F26R2 ; \ CAN1_F26R2_FB14, Filter bits
: CAN1_F26R2_FB15 ( -- x addr ) 15 bit CAN1_F26R2 ; \ CAN1_F26R2_FB15, Filter bits
: CAN1_F26R2_FB16 ( -- x addr ) 16 bit CAN1_F26R2 ; \ CAN1_F26R2_FB16, Filter bits
: CAN1_F26R2_FB17 ( -- x addr ) 17 bit CAN1_F26R2 ; \ CAN1_F26R2_FB17, Filter bits
: CAN1_F26R2_FB18 ( -- x addr ) 18 bit CAN1_F26R2 ; \ CAN1_F26R2_FB18, Filter bits
: CAN1_F26R2_FB19 ( -- x addr ) 19 bit CAN1_F26R2 ; \ CAN1_F26R2_FB19, Filter bits
: CAN1_F26R2_FB20 ( -- x addr ) 20 bit CAN1_F26R2 ; \ CAN1_F26R2_FB20, Filter bits
: CAN1_F26R2_FB21 ( -- x addr ) 21 bit CAN1_F26R2 ; \ CAN1_F26R2_FB21, Filter bits
: CAN1_F26R2_FB22 ( -- x addr ) 22 bit CAN1_F26R2 ; \ CAN1_F26R2_FB22, Filter bits
: CAN1_F26R2_FB23 ( -- x addr ) 23 bit CAN1_F26R2 ; \ CAN1_F26R2_FB23, Filter bits
: CAN1_F26R2_FB24 ( -- x addr ) 24 bit CAN1_F26R2 ; \ CAN1_F26R2_FB24, Filter bits
: CAN1_F26R2_FB25 ( -- x addr ) 25 bit CAN1_F26R2 ; \ CAN1_F26R2_FB25, Filter bits
: CAN1_F26R2_FB26 ( -- x addr ) 26 bit CAN1_F26R2 ; \ CAN1_F26R2_FB26, Filter bits
: CAN1_F26R2_FB27 ( -- x addr ) 27 bit CAN1_F26R2 ; \ CAN1_F26R2_FB27, Filter bits
: CAN1_F26R2_FB28 ( -- x addr ) 28 bit CAN1_F26R2 ; \ CAN1_F26R2_FB28, Filter bits
: CAN1_F26R2_FB29 ( -- x addr ) 29 bit CAN1_F26R2 ; \ CAN1_F26R2_FB29, Filter bits
: CAN1_F26R2_FB30 ( -- x addr ) 30 bit CAN1_F26R2 ; \ CAN1_F26R2_FB30, Filter bits
: CAN1_F26R2_FB31 ( -- x addr ) 31 bit CAN1_F26R2 ; \ CAN1_F26R2_FB31, Filter bits

\ CAN1_F27R1 (read-write) Reset:0x00000000
: CAN1_F27R1_FB0 ( -- x addr ) 0 bit CAN1_F27R1 ; \ CAN1_F27R1_FB0, Filter bits
: CAN1_F27R1_FB1 ( -- x addr ) 1 bit CAN1_F27R1 ; \ CAN1_F27R1_FB1, Filter bits
: CAN1_F27R1_FB2 ( -- x addr ) 2 bit CAN1_F27R1 ; \ CAN1_F27R1_FB2, Filter bits
: CAN1_F27R1_FB3 ( -- x addr ) 3 bit CAN1_F27R1 ; \ CAN1_F27R1_FB3, Filter bits
: CAN1_F27R1_FB4 ( -- x addr ) 4 bit CAN1_F27R1 ; \ CAN1_F27R1_FB4, Filter bits
: CAN1_F27R1_FB5 ( -- x addr ) 5 bit CAN1_F27R1 ; \ CAN1_F27R1_FB5, Filter bits
: CAN1_F27R1_FB6 ( -- x addr ) 6 bit CAN1_F27R1 ; \ CAN1_F27R1_FB6, Filter bits
: CAN1_F27R1_FB7 ( -- x addr ) 7 bit CAN1_F27R1 ; \ CAN1_F27R1_FB7, Filter bits
: CAN1_F27R1_FB8 ( -- x addr ) 8 bit CAN1_F27R1 ; \ CAN1_F27R1_FB8, Filter bits
: CAN1_F27R1_FB9 ( -- x addr ) 9 bit CAN1_F27R1 ; \ CAN1_F27R1_FB9, Filter bits
: CAN1_F27R1_FB10 ( -- x addr ) 10 bit CAN1_F27R1 ; \ CAN1_F27R1_FB10, Filter bits
: CAN1_F27R1_FB11 ( -- x addr ) 11 bit CAN1_F27R1 ; \ CAN1_F27R1_FB11, Filter bits
: CAN1_F27R1_FB12 ( -- x addr ) 12 bit CAN1_F27R1 ; \ CAN1_F27R1_FB12, Filter bits
: CAN1_F27R1_FB13 ( -- x addr ) 13 bit CAN1_F27R1 ; \ CAN1_F27R1_FB13, Filter bits
: CAN1_F27R1_FB14 ( -- x addr ) 14 bit CAN1_F27R1 ; \ CAN1_F27R1_FB14, Filter bits
: CAN1_F27R1_FB15 ( -- x addr ) 15 bit CAN1_F27R1 ; \ CAN1_F27R1_FB15, Filter bits
: CAN1_F27R1_FB16 ( -- x addr ) 16 bit CAN1_F27R1 ; \ CAN1_F27R1_FB16, Filter bits
: CAN1_F27R1_FB17 ( -- x addr ) 17 bit CAN1_F27R1 ; \ CAN1_F27R1_FB17, Filter bits
: CAN1_F27R1_FB18 ( -- x addr ) 18 bit CAN1_F27R1 ; \ CAN1_F27R1_FB18, Filter bits
: CAN1_F27R1_FB19 ( -- x addr ) 19 bit CAN1_F27R1 ; \ CAN1_F27R1_FB19, Filter bits
: CAN1_F27R1_FB20 ( -- x addr ) 20 bit CAN1_F27R1 ; \ CAN1_F27R1_FB20, Filter bits
: CAN1_F27R1_FB21 ( -- x addr ) 21 bit CAN1_F27R1 ; \ CAN1_F27R1_FB21, Filter bits
: CAN1_F27R1_FB22 ( -- x addr ) 22 bit CAN1_F27R1 ; \ CAN1_F27R1_FB22, Filter bits
: CAN1_F27R1_FB23 ( -- x addr ) 23 bit CAN1_F27R1 ; \ CAN1_F27R1_FB23, Filter bits
: CAN1_F27R1_FB24 ( -- x addr ) 24 bit CAN1_F27R1 ; \ CAN1_F27R1_FB24, Filter bits
: CAN1_F27R1_FB25 ( -- x addr ) 25 bit CAN1_F27R1 ; \ CAN1_F27R1_FB25, Filter bits
: CAN1_F27R1_FB26 ( -- x addr ) 26 bit CAN1_F27R1 ; \ CAN1_F27R1_FB26, Filter bits
: CAN1_F27R1_FB27 ( -- x addr ) 27 bit CAN1_F27R1 ; \ CAN1_F27R1_FB27, Filter bits
: CAN1_F27R1_FB28 ( -- x addr ) 28 bit CAN1_F27R1 ; \ CAN1_F27R1_FB28, Filter bits
: CAN1_F27R1_FB29 ( -- x addr ) 29 bit CAN1_F27R1 ; \ CAN1_F27R1_FB29, Filter bits
: CAN1_F27R1_FB30 ( -- x addr ) 30 bit CAN1_F27R1 ; \ CAN1_F27R1_FB30, Filter bits
: CAN1_F27R1_FB31 ( -- x addr ) 31 bit CAN1_F27R1 ; \ CAN1_F27R1_FB31, Filter bits

\ CAN1_F27R2 (read-write) Reset:0x00000000
: CAN1_F27R2_FB0 ( -- x addr ) 0 bit CAN1_F27R2 ; \ CAN1_F27R2_FB0, Filter bits
: CAN1_F27R2_FB1 ( -- x addr ) 1 bit CAN1_F27R2 ; \ CAN1_F27R2_FB1, Filter bits
: CAN1_F27R2_FB2 ( -- x addr ) 2 bit CAN1_F27R2 ; \ CAN1_F27R2_FB2, Filter bits
: CAN1_F27R2_FB3 ( -- x addr ) 3 bit CAN1_F27R2 ; \ CAN1_F27R2_FB3, Filter bits
: CAN1_F27R2_FB4 ( -- x addr ) 4 bit CAN1_F27R2 ; \ CAN1_F27R2_FB4, Filter bits
: CAN1_F27R2_FB5 ( -- x addr ) 5 bit CAN1_F27R2 ; \ CAN1_F27R2_FB5, Filter bits
: CAN1_F27R2_FB6 ( -- x addr ) 6 bit CAN1_F27R2 ; \ CAN1_F27R2_FB6, Filter bits
: CAN1_F27R2_FB7 ( -- x addr ) 7 bit CAN1_F27R2 ; \ CAN1_F27R2_FB7, Filter bits
: CAN1_F27R2_FB8 ( -- x addr ) 8 bit CAN1_F27R2 ; \ CAN1_F27R2_FB8, Filter bits
: CAN1_F27R2_FB9 ( -- x addr ) 9 bit CAN1_F27R2 ; \ CAN1_F27R2_FB9, Filter bits
: CAN1_F27R2_FB10 ( -- x addr ) 10 bit CAN1_F27R2 ; \ CAN1_F27R2_FB10, Filter bits
: CAN1_F27R2_FB11 ( -- x addr ) 11 bit CAN1_F27R2 ; \ CAN1_F27R2_FB11, Filter bits
: CAN1_F27R2_FB12 ( -- x addr ) 12 bit CAN1_F27R2 ; \ CAN1_F27R2_FB12, Filter bits
: CAN1_F27R2_FB13 ( -- x addr ) 13 bit CAN1_F27R2 ; \ CAN1_F27R2_FB13, Filter bits
: CAN1_F27R2_FB14 ( -- x addr ) 14 bit CAN1_F27R2 ; \ CAN1_F27R2_FB14, Filter bits
: CAN1_F27R2_FB15 ( -- x addr ) 15 bit CAN1_F27R2 ; \ CAN1_F27R2_FB15, Filter bits
: CAN1_F27R2_FB16 ( -- x addr ) 16 bit CAN1_F27R2 ; \ CAN1_F27R2_FB16, Filter bits
: CAN1_F27R2_FB17 ( -- x addr ) 17 bit CAN1_F27R2 ; \ CAN1_F27R2_FB17, Filter bits
: CAN1_F27R2_FB18 ( -- x addr ) 18 bit CAN1_F27R2 ; \ CAN1_F27R2_FB18, Filter bits
: CAN1_F27R2_FB19 ( -- x addr ) 19 bit CAN1_F27R2 ; \ CAN1_F27R2_FB19, Filter bits
: CAN1_F27R2_FB20 ( -- x addr ) 20 bit CAN1_F27R2 ; \ CAN1_F27R2_FB20, Filter bits
: CAN1_F27R2_FB21 ( -- x addr ) 21 bit CAN1_F27R2 ; \ CAN1_F27R2_FB21, Filter bits
: CAN1_F27R2_FB22 ( -- x addr ) 22 bit CAN1_F27R2 ; \ CAN1_F27R2_FB22, Filter bits
: CAN1_F27R2_FB23 ( -- x addr ) 23 bit CAN1_F27R2 ; \ CAN1_F27R2_FB23, Filter bits
: CAN1_F27R2_FB24 ( -- x addr ) 24 bit CAN1_F27R2 ; \ CAN1_F27R2_FB24, Filter bits
: CAN1_F27R2_FB25 ( -- x addr ) 25 bit CAN1_F27R2 ; \ CAN1_F27R2_FB25, Filter bits
: CAN1_F27R2_FB26 ( -- x addr ) 26 bit CAN1_F27R2 ; \ CAN1_F27R2_FB26, Filter bits
: CAN1_F27R2_FB27 ( -- x addr ) 27 bit CAN1_F27R2 ; \ CAN1_F27R2_FB27, Filter bits
: CAN1_F27R2_FB28 ( -- x addr ) 28 bit CAN1_F27R2 ; \ CAN1_F27R2_FB28, Filter bits
: CAN1_F27R2_FB29 ( -- x addr ) 29 bit CAN1_F27R2 ; \ CAN1_F27R2_FB29, Filter bits
: CAN1_F27R2_FB30 ( -- x addr ) 30 bit CAN1_F27R2 ; \ CAN1_F27R2_FB30, Filter bits
: CAN1_F27R2_FB31 ( -- x addr ) 31 bit CAN1_F27R2 ; \ CAN1_F27R2_FB31, Filter bits

\ CAN2_MCR (read-write) Reset:0x00010002
: CAN2_MCR_DBF ( -- x addr ) 16 bit CAN2_MCR ; \ CAN2_MCR_DBF, DBF
: CAN2_MCR_RESET ( -- x addr ) 15 bit CAN2_MCR ; \ CAN2_MCR_RESET, RESET
: CAN2_MCR_TTCM ( -- x addr ) 7 bit CAN2_MCR ; \ CAN2_MCR_TTCM, TTCM
: CAN2_MCR_ABOM ( -- x addr ) 6 bit CAN2_MCR ; \ CAN2_MCR_ABOM, ABOM
: CAN2_MCR_AWUM ( -- x addr ) 5 bit CAN2_MCR ; \ CAN2_MCR_AWUM, AWUM
: CAN2_MCR_NART ( -- x addr ) 4 bit CAN2_MCR ; \ CAN2_MCR_NART, NART
: CAN2_MCR_RFLM ( -- x addr ) 3 bit CAN2_MCR ; \ CAN2_MCR_RFLM, RFLM
: CAN2_MCR_TXFP ( -- x addr ) 2 bit CAN2_MCR ; \ CAN2_MCR_TXFP, TXFP
: CAN2_MCR_SLEEP ( -- x addr ) 1 bit CAN2_MCR ; \ CAN2_MCR_SLEEP, SLEEP
: CAN2_MCR_INRQ ( -- x addr ) 0 bit CAN2_MCR ; \ CAN2_MCR_INRQ, INRQ

\ CAN2_MSR (multiple-access)  Reset:0x00000C02
: CAN2_MSR_RX ( -- x addr ) 11 bit CAN2_MSR ; \ CAN2_MSR_RX, RX
: CAN2_MSR_SAMP ( -- x addr ) 10 bit CAN2_MSR ; \ CAN2_MSR_SAMP, SAMP
: CAN2_MSR_RXM ( -- x addr ) 9 bit CAN2_MSR ; \ CAN2_MSR_RXM, RXM
: CAN2_MSR_TXM ( -- x addr ) 8 bit CAN2_MSR ; \ CAN2_MSR_TXM, TXM
: CAN2_MSR_SLAKI ( -- x addr ) 4 bit CAN2_MSR ; \ CAN2_MSR_SLAKI, SLAKI
: CAN2_MSR_WKUI ( -- x addr ) 3 bit CAN2_MSR ; \ CAN2_MSR_WKUI, WKUI
: CAN2_MSR_ERRI ( -- x addr ) 2 bit CAN2_MSR ; \ CAN2_MSR_ERRI, ERRI
: CAN2_MSR_SLAK ( -- x addr ) 1 bit CAN2_MSR ; \ CAN2_MSR_SLAK, SLAK
: CAN2_MSR_INAK ( -- x addr ) 0 bit CAN2_MSR ; \ CAN2_MSR_INAK, INAK

\ CAN2_TSR (multiple-access)  Reset:0x1C000000
: CAN2_TSR_LOW2? ( -- 1|0 ) 31 bit CAN2_TSR bit@ ; \ CAN2_TSR_LOW2, Lowest priority flag for mailbox 2
: CAN2_TSR_LOW1? ( -- 1|0 ) 30 bit CAN2_TSR bit@ ; \ CAN2_TSR_LOW1, Lowest priority flag for mailbox 1
: CAN2_TSR_LOW0? ( -- 1|0 ) 29 bit CAN2_TSR bit@ ; \ CAN2_TSR_LOW0, Lowest priority flag for mailbox 0
: CAN2_TSR_TME2? ( -- 1|0 ) 28 bit CAN2_TSR bit@ ; \ CAN2_TSR_TME2, Lowest priority flag for mailbox 2
: CAN2_TSR_TME1? ( -- 1|0 ) 27 bit CAN2_TSR bit@ ; \ CAN2_TSR_TME1, Lowest priority flag for mailbox 1
: CAN2_TSR_TME0? ( -- 1|0 ) 26 bit CAN2_TSR bit@ ; \ CAN2_TSR_TME0, Lowest priority flag for mailbox 0
: CAN2_TSR_CODE ( %bb -- x addr ) 24 lshift CAN2_TSR ; \ CAN2_TSR_CODE, CODE
: CAN2_TSR_ABRQ2 ( -- x addr ) 23 bit CAN2_TSR ; \ CAN2_TSR_ABRQ2, ABRQ2
: CAN2_TSR_TERR2 ( -- x addr ) 19 bit CAN2_TSR ; \ CAN2_TSR_TERR2, TERR2
: CAN2_TSR_ALST2 ( -- x addr ) 18 bit CAN2_TSR ; \ CAN2_TSR_ALST2, ALST2
: CAN2_TSR_TXOK2 ( -- x addr ) 17 bit CAN2_TSR ; \ CAN2_TSR_TXOK2, TXOK2
: CAN2_TSR_RQCP2 ( -- x addr ) 16 bit CAN2_TSR ; \ CAN2_TSR_RQCP2, RQCP2
: CAN2_TSR_ABRQ1 ( -- x addr ) 15 bit CAN2_TSR ; \ CAN2_TSR_ABRQ1, ABRQ1
: CAN2_TSR_TERR1 ( -- x addr ) 11 bit CAN2_TSR ; \ CAN2_TSR_TERR1, TERR1
: CAN2_TSR_ALST1 ( -- x addr ) 10 bit CAN2_TSR ; \ CAN2_TSR_ALST1, ALST1
: CAN2_TSR_TXOK1 ( -- x addr ) 9 bit CAN2_TSR ; \ CAN2_TSR_TXOK1, TXOK1
: CAN2_TSR_RQCP1 ( -- x addr ) 8 bit CAN2_TSR ; \ CAN2_TSR_RQCP1, RQCP1
: CAN2_TSR_ABRQ0 ( -- x addr ) 7 bit CAN2_TSR ; \ CAN2_TSR_ABRQ0, ABRQ0
: CAN2_TSR_TERR0 ( -- x addr ) 3 bit CAN2_TSR ; \ CAN2_TSR_TERR0, TERR0
: CAN2_TSR_ALST0 ( -- x addr ) 2 bit CAN2_TSR ; \ CAN2_TSR_ALST0, ALST0
: CAN2_TSR_TXOK0 ( -- x addr ) 1 bit CAN2_TSR ; \ CAN2_TSR_TXOK0, TXOK0
: CAN2_TSR_RQCP0 ( -- x addr ) 0 bit CAN2_TSR ; \ CAN2_TSR_RQCP0, RQCP0

\ CAN2_RF0R (multiple-access)  Reset:0x00000000
: CAN2_RF0R_RFOM0 ( -- x addr ) 5 bit CAN2_RF0R ; \ CAN2_RF0R_RFOM0, RFOM0
: CAN2_RF0R_FOVR0 ( -- x addr ) 4 bit CAN2_RF0R ; \ CAN2_RF0R_FOVR0, FOVR0
: CAN2_RF0R_FULL0 ( -- x addr ) 3 bit CAN2_RF0R ; \ CAN2_RF0R_FULL0, FULL0
: CAN2_RF0R_FMP0 ( %bb -- x addr ) CAN2_RF0R ; \ CAN2_RF0R_FMP0, FMP0

\ CAN2_RF1R (multiple-access)  Reset:0x00000000
: CAN2_RF1R_RFOM1 ( -- x addr ) 5 bit CAN2_RF1R ; \ CAN2_RF1R_RFOM1, RFOM1
: CAN2_RF1R_FOVR1 ( -- x addr ) 4 bit CAN2_RF1R ; \ CAN2_RF1R_FOVR1, FOVR1
: CAN2_RF1R_FULL1 ( -- x addr ) 3 bit CAN2_RF1R ; \ CAN2_RF1R_FULL1, FULL1
: CAN2_RF1R_FMP1 ( %bb -- x addr ) CAN2_RF1R ; \ CAN2_RF1R_FMP1, FMP1

\ CAN2_IER (read-write) Reset:0x00000000
: CAN2_IER_SLKIE ( -- x addr ) 17 bit CAN2_IER ; \ CAN2_IER_SLKIE, SLKIE
: CAN2_IER_WKUIE ( -- x addr ) 16 bit CAN2_IER ; \ CAN2_IER_WKUIE, WKUIE
: CAN2_IER_ERRIE ( -- x addr ) 15 bit CAN2_IER ; \ CAN2_IER_ERRIE, ERRIE
: CAN2_IER_LECIE ( -- x addr ) 11 bit CAN2_IER ; \ CAN2_IER_LECIE, LECIE
: CAN2_IER_BOFIE ( -- x addr ) 10 bit CAN2_IER ; \ CAN2_IER_BOFIE, BOFIE
: CAN2_IER_EPVIE ( -- x addr ) 9 bit CAN2_IER ; \ CAN2_IER_EPVIE, EPVIE
: CAN2_IER_EWGIE ( -- x addr ) 8 bit CAN2_IER ; \ CAN2_IER_EWGIE, EWGIE
: CAN2_IER_FOVIE1 ( -- x addr ) 6 bit CAN2_IER ; \ CAN2_IER_FOVIE1, FOVIE1
: CAN2_IER_FFIE1 ( -- x addr ) 5 bit CAN2_IER ; \ CAN2_IER_FFIE1, FFIE1
: CAN2_IER_FMPIE1 ( -- x addr ) 4 bit CAN2_IER ; \ CAN2_IER_FMPIE1, FMPIE1
: CAN2_IER_FOVIE0 ( -- x addr ) 3 bit CAN2_IER ; \ CAN2_IER_FOVIE0, FOVIE0
: CAN2_IER_FFIE0 ( -- x addr ) 2 bit CAN2_IER ; \ CAN2_IER_FFIE0, FFIE0
: CAN2_IER_FMPIE0 ( -- x addr ) 1 bit CAN2_IER ; \ CAN2_IER_FMPIE0, FMPIE0
: CAN2_IER_TMEIE ( -- x addr ) 0 bit CAN2_IER ; \ CAN2_IER_TMEIE, TMEIE

\ CAN2_ESR (multiple-access)  Reset:0x00000000
: CAN2_ESR_REC ( %bbbbbbbb -- x addr ) 24 lshift CAN2_ESR ; \ CAN2_ESR_REC, REC
: CAN2_ESR_TEC ( %bbbbbbbb -- x addr ) 16 lshift CAN2_ESR ; \ CAN2_ESR_TEC, TEC
: CAN2_ESR_LEC ( %bbb -- x addr ) 4 lshift CAN2_ESR ; \ CAN2_ESR_LEC, LEC
: CAN2_ESR_BOFF ( -- x addr ) 2 bit CAN2_ESR ; \ CAN2_ESR_BOFF, BOFF
: CAN2_ESR_EPVF ( -- x addr ) 1 bit CAN2_ESR ; \ CAN2_ESR_EPVF, EPVF
: CAN2_ESR_EWGF ( -- x addr ) 0 bit CAN2_ESR ; \ CAN2_ESR_EWGF, EWGF

\ CAN2_BTR (read-write) Reset:0x00000000
: CAN2_BTR_SILM ( -- x addr ) 31 bit CAN2_BTR ; \ CAN2_BTR_SILM, SILM
: CAN2_BTR_LBKM ( -- x addr ) 30 bit CAN2_BTR ; \ CAN2_BTR_LBKM, LBKM
: CAN2_BTR_SJW ( %bb -- x addr ) 24 lshift CAN2_BTR ; \ CAN2_BTR_SJW, SJW
: CAN2_BTR_TS2 ( %bbb -- x addr ) 20 lshift CAN2_BTR ; \ CAN2_BTR_TS2, TS2
: CAN2_BTR_TS1 ( %bbbb -- x addr ) 16 lshift CAN2_BTR ; \ CAN2_BTR_TS1, TS1
: CAN2_BTR_BRP ( %bbbbbbbbbb -- x addr ) CAN2_BTR ; \ CAN2_BTR_BRP, BRP

\ CAN2_TI0R (read-write) Reset:0x00000000
: CAN2_TI0R_STID x addr ) 21 lshift CAN2_TI0R ; \ CAN2_TI0R_STID, STID
: CAN2_TI0R_EXID x addr ) 3 lshift CAN2_TI0R ; \ CAN2_TI0R_EXID, EXID
: CAN2_TI0R_IDE ( -- x addr ) 2 bit CAN2_TI0R ; \ CAN2_TI0R_IDE, IDE
: CAN2_TI0R_RTR ( -- x addr ) 1 bit CAN2_TI0R ; \ CAN2_TI0R_RTR, RTR
: CAN2_TI0R_TXRQ ( -- x addr ) 0 bit CAN2_TI0R ; \ CAN2_TI0R_TXRQ, TXRQ

\ CAN2_TDT0R (read-write) Reset:0x00000000
: CAN2_TDT0R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN2_TDT0R ; \ CAN2_TDT0R_TIME, TIME
: CAN2_TDT0R_TGT ( -- x addr ) 8 bit CAN2_TDT0R ; \ CAN2_TDT0R_TGT, TGT
: CAN2_TDT0R_DLC ( %bbbb -- x addr ) CAN2_TDT0R ; \ CAN2_TDT0R_DLC, DLC

\ CAN2_TDL0R (read-write) Reset:0x00000000
: CAN2_TDL0R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDL0R ; \ CAN2_TDL0R_DATA3, DATA3
: CAN2_TDL0R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDL0R ; \ CAN2_TDL0R_DATA2, DATA2
: CAN2_TDL0R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDL0R ; \ CAN2_TDL0R_DATA1, DATA1
: CAN2_TDL0R_DATA0 ( %bbbbbbbb -- x addr ) CAN2_TDL0R ; \ CAN2_TDL0R_DATA0, DATA0

\ CAN2_TDH0R (read-write) Reset:0x00000000
: CAN2_TDH0R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDH0R ; \ CAN2_TDH0R_DATA7, DATA7
: CAN2_TDH0R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDH0R ; \ CAN2_TDH0R_DATA6, DATA6
: CAN2_TDH0R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDH0R ; \ CAN2_TDH0R_DATA5, DATA5
: CAN2_TDH0R_DATA4 ( %bbbbbbbb -- x addr ) CAN2_TDH0R ; \ CAN2_TDH0R_DATA4, DATA4

\ CAN2_TI1R (read-write) Reset:0x00000000
: CAN2_TI1R_STID x addr ) 21 lshift CAN2_TI1R ; \ CAN2_TI1R_STID, STID
: CAN2_TI1R_EXID x addr ) 3 lshift CAN2_TI1R ; \ CAN2_TI1R_EXID, EXID
: CAN2_TI1R_IDE ( -- x addr ) 2 bit CAN2_TI1R ; \ CAN2_TI1R_IDE, IDE
: CAN2_TI1R_RTR ( -- x addr ) 1 bit CAN2_TI1R ; \ CAN2_TI1R_RTR, RTR
: CAN2_TI1R_TXRQ ( -- x addr ) 0 bit CAN2_TI1R ; \ CAN2_TI1R_TXRQ, TXRQ

\ CAN2_TDT1R (read-write) Reset:0x00000000
: CAN2_TDT1R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN2_TDT1R ; \ CAN2_TDT1R_TIME, TIME
: CAN2_TDT1R_TGT ( -- x addr ) 8 bit CAN2_TDT1R ; \ CAN2_TDT1R_TGT, TGT
: CAN2_TDT1R_DLC ( %bbbb -- x addr ) CAN2_TDT1R ; \ CAN2_TDT1R_DLC, DLC

\ CAN2_TDL1R (read-write) Reset:0x00000000
: CAN2_TDL1R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDL1R ; \ CAN2_TDL1R_DATA3, DATA3
: CAN2_TDL1R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDL1R ; \ CAN2_TDL1R_DATA2, DATA2
: CAN2_TDL1R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDL1R ; \ CAN2_TDL1R_DATA1, DATA1
: CAN2_TDL1R_DATA0 ( %bbbbbbbb -- x addr ) CAN2_TDL1R ; \ CAN2_TDL1R_DATA0, DATA0

\ CAN2_TDH1R (read-write) Reset:0x00000000
: CAN2_TDH1R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDH1R ; \ CAN2_TDH1R_DATA7, DATA7
: CAN2_TDH1R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDH1R ; \ CAN2_TDH1R_DATA6, DATA6
: CAN2_TDH1R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDH1R ; \ CAN2_TDH1R_DATA5, DATA5
: CAN2_TDH1R_DATA4 ( %bbbbbbbb -- x addr ) CAN2_TDH1R ; \ CAN2_TDH1R_DATA4, DATA4

\ CAN2_TI2R (read-write) Reset:0x00000000
: CAN2_TI2R_STID x addr ) 21 lshift CAN2_TI2R ; \ CAN2_TI2R_STID, STID
: CAN2_TI2R_EXID x addr ) 3 lshift CAN2_TI2R ; \ CAN2_TI2R_EXID, EXID
: CAN2_TI2R_IDE ( -- x addr ) 2 bit CAN2_TI2R ; \ CAN2_TI2R_IDE, IDE
: CAN2_TI2R_RTR ( -- x addr ) 1 bit CAN2_TI2R ; \ CAN2_TI2R_RTR, RTR
: CAN2_TI2R_TXRQ ( -- x addr ) 0 bit CAN2_TI2R ; \ CAN2_TI2R_TXRQ, TXRQ

\ CAN2_TDT2R (read-write) Reset:0x00000000
: CAN2_TDT2R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN2_TDT2R ; \ CAN2_TDT2R_TIME, TIME
: CAN2_TDT2R_TGT ( -- x addr ) 8 bit CAN2_TDT2R ; \ CAN2_TDT2R_TGT, TGT
: CAN2_TDT2R_DLC ( %bbbb -- x addr ) CAN2_TDT2R ; \ CAN2_TDT2R_DLC, DLC

\ CAN2_TDL2R (read-write) Reset:0x00000000
: CAN2_TDL2R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDL2R ; \ CAN2_TDL2R_DATA3, DATA3
: CAN2_TDL2R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDL2R ; \ CAN2_TDL2R_DATA2, DATA2
: CAN2_TDL2R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDL2R ; \ CAN2_TDL2R_DATA1, DATA1
: CAN2_TDL2R_DATA0 ( %bbbbbbbb -- x addr ) CAN2_TDL2R ; \ CAN2_TDL2R_DATA0, DATA0

\ CAN2_TDH2R (read-write) Reset:0x00000000
: CAN2_TDH2R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDH2R ; \ CAN2_TDH2R_DATA7, DATA7
: CAN2_TDH2R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDH2R ; \ CAN2_TDH2R_DATA6, DATA6
: CAN2_TDH2R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDH2R ; \ CAN2_TDH2R_DATA5, DATA5
: CAN2_TDH2R_DATA4 ( %bbbbbbbb -- x addr ) CAN2_TDH2R ; \ CAN2_TDH2R_DATA4, DATA4

\ CAN2_RI0R (read-only) Reset:0x00000000
: CAN2_RI0R_STID? ( --  x ) 21 lshift CAN2_RI0R @ ; \ CAN2_RI0R_STID, STID
: CAN2_RI0R_EXID? ( --  x ) 3 lshift CAN2_RI0R @ ; \ CAN2_RI0R_EXID, EXID
: CAN2_RI0R_IDE? ( --  1|0 ) 2 bit CAN2_RI0R bit@ ; \ CAN2_RI0R_IDE, IDE
: CAN2_RI0R_RTR? ( --  1|0 ) 1 bit CAN2_RI0R bit@ ; \ CAN2_RI0R_RTR, RTR

\ CAN2_RDT0R (read-only) Reset:0x00000000
: CAN2_RDT0R_TIME? ( --  x ) 16 lshift CAN2_RDT0R @ ; \ CAN2_RDT0R_TIME, TIME
: CAN2_RDT0R_FMI? ( --  x ) 8 lshift CAN2_RDT0R @ ; \ CAN2_RDT0R_FMI, FMI
: CAN2_RDT0R_DLC? ( --  x ) CAN2_RDT0R @ ; \ CAN2_RDT0R_DLC, DLC

\ CAN2_RDL0R (read-only) Reset:0x00000000
: CAN2_RDL0R_DATA3? ( --  x ) 24 lshift CAN2_RDL0R @ ; \ CAN2_RDL0R_DATA3, DATA3
: CAN2_RDL0R_DATA2? ( --  x ) 16 lshift CAN2_RDL0R @ ; \ CAN2_RDL0R_DATA2, DATA2
: CAN2_RDL0R_DATA1? ( --  x ) 8 lshift CAN2_RDL0R @ ; \ CAN2_RDL0R_DATA1, DATA1
: CAN2_RDL0R_DATA0? ( --  x ) CAN2_RDL0R @ ; \ CAN2_RDL0R_DATA0, DATA0

\ CAN2_RDH0R (read-only) Reset:0x00000000
: CAN2_RDH0R_DATA7? ( --  x ) 24 lshift CAN2_RDH0R @ ; \ CAN2_RDH0R_DATA7, DATA7
: CAN2_RDH0R_DATA6? ( --  x ) 16 lshift CAN2_RDH0R @ ; \ CAN2_RDH0R_DATA6, DATA6
: CAN2_RDH0R_DATA5? ( --  x ) 8 lshift CAN2_RDH0R @ ; \ CAN2_RDH0R_DATA5, DATA5
: CAN2_RDH0R_DATA4? ( --  x ) CAN2_RDH0R @ ; \ CAN2_RDH0R_DATA4, DATA4

\ CAN2_RI1R (read-only) Reset:0x00000000
: CAN2_RI1R_STID? ( --  x ) 21 lshift CAN2_RI1R @ ; \ CAN2_RI1R_STID, STID
: CAN2_RI1R_EXID? ( --  x ) 3 lshift CAN2_RI1R @ ; \ CAN2_RI1R_EXID, EXID
: CAN2_RI1R_IDE? ( --  1|0 ) 2 bit CAN2_RI1R bit@ ; \ CAN2_RI1R_IDE, IDE
: CAN2_RI1R_RTR? ( --  1|0 ) 1 bit CAN2_RI1R bit@ ; \ CAN2_RI1R_RTR, RTR

\ CAN2_RDT1R (read-only) Reset:0x00000000
: CAN2_RDT1R_TIME? ( --  x ) 16 lshift CAN2_RDT1R @ ; \ CAN2_RDT1R_TIME, TIME
: CAN2_RDT1R_FMI? ( --  x ) 8 lshift CAN2_RDT1R @ ; \ CAN2_RDT1R_FMI, FMI
: CAN2_RDT1R_DLC? ( --  x ) CAN2_RDT1R @ ; \ CAN2_RDT1R_DLC, DLC

\ CAN2_RDL1R (read-only) Reset:0x00000000
: CAN2_RDL1R_DATA3? ( --  x ) 24 lshift CAN2_RDL1R @ ; \ CAN2_RDL1R_DATA3, DATA3
: CAN2_RDL1R_DATA2? ( --  x ) 16 lshift CAN2_RDL1R @ ; \ CAN2_RDL1R_DATA2, DATA2
: CAN2_RDL1R_DATA1? ( --  x ) 8 lshift CAN2_RDL1R @ ; \ CAN2_RDL1R_DATA1, DATA1
: CAN2_RDL1R_DATA0? ( --  x ) CAN2_RDL1R @ ; \ CAN2_RDL1R_DATA0, DATA0

\ CAN2_RDH1R (read-only) Reset:0x00000000
: CAN2_RDH1R_DATA7? ( --  x ) 24 lshift CAN2_RDH1R @ ; \ CAN2_RDH1R_DATA7, DATA7
: CAN2_RDH1R_DATA6? ( --  x ) 16 lshift CAN2_RDH1R @ ; \ CAN2_RDH1R_DATA6, DATA6
: CAN2_RDH1R_DATA5? ( --  x ) 8 lshift CAN2_RDH1R @ ; \ CAN2_RDH1R_DATA5, DATA5
: CAN2_RDH1R_DATA4? ( --  x ) CAN2_RDH1R @ ; \ CAN2_RDH1R_DATA4, DATA4

\ CAN2_FMR (read-write) Reset:0x2A1C0E01
: CAN2_FMR_CAN2SB ( %bbbbbb -- x addr ) 8 lshift CAN2_FMR ; \ CAN2_FMR_CAN2SB, CAN2SB
: CAN2_FMR_FINIT ( -- x addr ) 0 bit CAN2_FMR ; \ CAN2_FMR_FINIT, FINIT

\ CAN2_FM1R (read-write) Reset:0x00000000
: CAN2_FM1R_FBM0 ( -- x addr ) 0 bit CAN2_FM1R ; \ CAN2_FM1R_FBM0, Filter mode
: CAN2_FM1R_FBM1 ( -- x addr ) 1 bit CAN2_FM1R ; \ CAN2_FM1R_FBM1, Filter mode
: CAN2_FM1R_FBM2 ( -- x addr ) 2 bit CAN2_FM1R ; \ CAN2_FM1R_FBM2, Filter mode
: CAN2_FM1R_FBM3 ( -- x addr ) 3 bit CAN2_FM1R ; \ CAN2_FM1R_FBM3, Filter mode
: CAN2_FM1R_FBM4 ( -- x addr ) 4 bit CAN2_FM1R ; \ CAN2_FM1R_FBM4, Filter mode
: CAN2_FM1R_FBM5 ( -- x addr ) 5 bit CAN2_FM1R ; \ CAN2_FM1R_FBM5, Filter mode
: CAN2_FM1R_FBM6 ( -- x addr ) 6 bit CAN2_FM1R ; \ CAN2_FM1R_FBM6, Filter mode
: CAN2_FM1R_FBM7 ( -- x addr ) 7 bit CAN2_FM1R ; \ CAN2_FM1R_FBM7, Filter mode
: CAN2_FM1R_FBM8 ( -- x addr ) 8 bit CAN2_FM1R ; \ CAN2_FM1R_FBM8, Filter mode
: CAN2_FM1R_FBM9 ( -- x addr ) 9 bit CAN2_FM1R ; \ CAN2_FM1R_FBM9, Filter mode
: CAN2_FM1R_FBM10 ( -- x addr ) 10 bit CAN2_FM1R ; \ CAN2_FM1R_FBM10, Filter mode
: CAN2_FM1R_FBM11 ( -- x addr ) 11 bit CAN2_FM1R ; \ CAN2_FM1R_FBM11, Filter mode
: CAN2_FM1R_FBM12 ( -- x addr ) 12 bit CAN2_FM1R ; \ CAN2_FM1R_FBM12, Filter mode
: CAN2_FM1R_FBM13 ( -- x addr ) 13 bit CAN2_FM1R ; \ CAN2_FM1R_FBM13, Filter mode
: CAN2_FM1R_FBM14 ( -- x addr ) 14 bit CAN2_FM1R ; \ CAN2_FM1R_FBM14, Filter mode
: CAN2_FM1R_FBM15 ( -- x addr ) 15 bit CAN2_FM1R ; \ CAN2_FM1R_FBM15, Filter mode
: CAN2_FM1R_FBM16 ( -- x addr ) 16 bit CAN2_FM1R ; \ CAN2_FM1R_FBM16, Filter mode
: CAN2_FM1R_FBM17 ( -- x addr ) 17 bit CAN2_FM1R ; \ CAN2_FM1R_FBM17, Filter mode
: CAN2_FM1R_FBM18 ( -- x addr ) 18 bit CAN2_FM1R ; \ CAN2_FM1R_FBM18, Filter mode
: CAN2_FM1R_FBM19 ( -- x addr ) 19 bit CAN2_FM1R ; \ CAN2_FM1R_FBM19, Filter mode
: CAN2_FM1R_FBM20 ( -- x addr ) 20 bit CAN2_FM1R ; \ CAN2_FM1R_FBM20, Filter mode
: CAN2_FM1R_FBM21 ( -- x addr ) 21 bit CAN2_FM1R ; \ CAN2_FM1R_FBM21, Filter mode
: CAN2_FM1R_FBM22 ( -- x addr ) 22 bit CAN2_FM1R ; \ CAN2_FM1R_FBM22, Filter mode
: CAN2_FM1R_FBM23 ( -- x addr ) 23 bit CAN2_FM1R ; \ CAN2_FM1R_FBM23, Filter mode
: CAN2_FM1R_FBM24 ( -- x addr ) 24 bit CAN2_FM1R ; \ CAN2_FM1R_FBM24, Filter mode
: CAN2_FM1R_FBM25 ( -- x addr ) 25 bit CAN2_FM1R ; \ CAN2_FM1R_FBM25, Filter mode
: CAN2_FM1R_FBM26 ( -- x addr ) 26 bit CAN2_FM1R ; \ CAN2_FM1R_FBM26, Filter mode
: CAN2_FM1R_FBM27 ( -- x addr ) 27 bit CAN2_FM1R ; \ CAN2_FM1R_FBM27, Filter mode

\ CAN2_FS1R (read-write) Reset:0x00000000
: CAN2_FS1R_FSC0 ( -- x addr ) 0 bit CAN2_FS1R ; \ CAN2_FS1R_FSC0, Filter scale configuration
: CAN2_FS1R_FSC1 ( -- x addr ) 1 bit CAN2_FS1R ; \ CAN2_FS1R_FSC1, Filter scale configuration
: CAN2_FS1R_FSC2 ( -- x addr ) 2 bit CAN2_FS1R ; \ CAN2_FS1R_FSC2, Filter scale configuration
: CAN2_FS1R_FSC3 ( -- x addr ) 3 bit CAN2_FS1R ; \ CAN2_FS1R_FSC3, Filter scale configuration
: CAN2_FS1R_FSC4 ( -- x addr ) 4 bit CAN2_FS1R ; \ CAN2_FS1R_FSC4, Filter scale configuration
: CAN2_FS1R_FSC5 ( -- x addr ) 5 bit CAN2_FS1R ; \ CAN2_FS1R_FSC5, Filter scale configuration
: CAN2_FS1R_FSC6 ( -- x addr ) 6 bit CAN2_FS1R ; \ CAN2_FS1R_FSC6, Filter scale configuration
: CAN2_FS1R_FSC7 ( -- x addr ) 7 bit CAN2_FS1R ; \ CAN2_FS1R_FSC7, Filter scale configuration
: CAN2_FS1R_FSC8 ( -- x addr ) 8 bit CAN2_FS1R ; \ CAN2_FS1R_FSC8, Filter scale configuration
: CAN2_FS1R_FSC9 ( -- x addr ) 9 bit CAN2_FS1R ; \ CAN2_FS1R_FSC9, Filter scale configuration
: CAN2_FS1R_FSC10 ( -- x addr ) 10 bit CAN2_FS1R ; \ CAN2_FS1R_FSC10, Filter scale configuration
: CAN2_FS1R_FSC11 ( -- x addr ) 11 bit CAN2_FS1R ; \ CAN2_FS1R_FSC11, Filter scale configuration
: CAN2_FS1R_FSC12 ( -- x addr ) 12 bit CAN2_FS1R ; \ CAN2_FS1R_FSC12, Filter scale configuration
: CAN2_FS1R_FSC13 ( -- x addr ) 13 bit CAN2_FS1R ; \ CAN2_FS1R_FSC13, Filter scale configuration
: CAN2_FS1R_FSC14 ( -- x addr ) 14 bit CAN2_FS1R ; \ CAN2_FS1R_FSC14, Filter scale configuration
: CAN2_FS1R_FSC15 ( -- x addr ) 15 bit CAN2_FS1R ; \ CAN2_FS1R_FSC15, Filter scale configuration
: CAN2_FS1R_FSC16 ( -- x addr ) 16 bit CAN2_FS1R ; \ CAN2_FS1R_FSC16, Filter scale configuration
: CAN2_FS1R_FSC17 ( -- x addr ) 17 bit CAN2_FS1R ; \ CAN2_FS1R_FSC17, Filter scale configuration
: CAN2_FS1R_FSC18 ( -- x addr ) 18 bit CAN2_FS1R ; \ CAN2_FS1R_FSC18, Filter scale configuration
: CAN2_FS1R_FSC19 ( -- x addr ) 19 bit CAN2_FS1R ; \ CAN2_FS1R_FSC19, Filter scale configuration
: CAN2_FS1R_FSC20 ( -- x addr ) 20 bit CAN2_FS1R ; \ CAN2_FS1R_FSC20, Filter scale configuration
: CAN2_FS1R_FSC21 ( -- x addr ) 21 bit CAN2_FS1R ; \ CAN2_FS1R_FSC21, Filter scale configuration
: CAN2_FS1R_FSC22 ( -- x addr ) 22 bit CAN2_FS1R ; \ CAN2_FS1R_FSC22, Filter scale configuration
: CAN2_FS1R_FSC23 ( -- x addr ) 23 bit CAN2_FS1R ; \ CAN2_FS1R_FSC23, Filter scale configuration
: CAN2_FS1R_FSC24 ( -- x addr ) 24 bit CAN2_FS1R ; \ CAN2_FS1R_FSC24, Filter scale configuration
: CAN2_FS1R_FSC25 ( -- x addr ) 25 bit CAN2_FS1R ; \ CAN2_FS1R_FSC25, Filter scale configuration
: CAN2_FS1R_FSC26 ( -- x addr ) 26 bit CAN2_FS1R ; \ CAN2_FS1R_FSC26, Filter scale configuration
: CAN2_FS1R_FSC27 ( -- x addr ) 27 bit CAN2_FS1R ; \ CAN2_FS1R_FSC27, Filter scale configuration

\ CAN2_FFA1R (read-write) Reset:0x00000000
: CAN2_FFA1R_FFA0 ( -- x addr ) 0 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA0, Filter FIFO assignment for filter 0
: CAN2_FFA1R_FFA1 ( -- x addr ) 1 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA1, Filter FIFO assignment for filter 1
: CAN2_FFA1R_FFA2 ( -- x addr ) 2 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA2, Filter FIFO assignment for filter 2
: CAN2_FFA1R_FFA3 ( -- x addr ) 3 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA3, Filter FIFO assignment for filter 3
: CAN2_FFA1R_FFA4 ( -- x addr ) 4 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA4, Filter FIFO assignment for filter 4
: CAN2_FFA1R_FFA5 ( -- x addr ) 5 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA5, Filter FIFO assignment for filter 5
: CAN2_FFA1R_FFA6 ( -- x addr ) 6 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA6, Filter FIFO assignment for filter 6
: CAN2_FFA1R_FFA7 ( -- x addr ) 7 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA7, Filter FIFO assignment for filter 7
: CAN2_FFA1R_FFA8 ( -- x addr ) 8 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA8, Filter FIFO assignment for filter 8
: CAN2_FFA1R_FFA9 ( -- x addr ) 9 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA9, Filter FIFO assignment for filter 9
: CAN2_FFA1R_FFA10 ( -- x addr ) 10 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA10, Filter FIFO assignment for filter 10
: CAN2_FFA1R_FFA11 ( -- x addr ) 11 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA11, Filter FIFO assignment for filter 11
: CAN2_FFA1R_FFA12 ( -- x addr ) 12 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA12, Filter FIFO assignment for filter 12
: CAN2_FFA1R_FFA13 ( -- x addr ) 13 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA13, Filter FIFO assignment for filter 13
: CAN2_FFA1R_FFA14 ( -- x addr ) 14 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA14, Filter FIFO assignment for filter 14
: CAN2_FFA1R_FFA15 ( -- x addr ) 15 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA15, Filter FIFO assignment for filter 15
: CAN2_FFA1R_FFA16 ( -- x addr ) 16 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA16, Filter FIFO assignment for filter 16
: CAN2_FFA1R_FFA17 ( -- x addr ) 17 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA17, Filter FIFO assignment for filter 17
: CAN2_FFA1R_FFA18 ( -- x addr ) 18 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA18, Filter FIFO assignment for filter 18
: CAN2_FFA1R_FFA19 ( -- x addr ) 19 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA19, Filter FIFO assignment for filter 19
: CAN2_FFA1R_FFA20 ( -- x addr ) 20 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA20, Filter FIFO assignment for filter 20
: CAN2_FFA1R_FFA21 ( -- x addr ) 21 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA21, Filter FIFO assignment for filter 21
: CAN2_FFA1R_FFA22 ( -- x addr ) 22 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA22, Filter FIFO assignment for filter 22
: CAN2_FFA1R_FFA23 ( -- x addr ) 23 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA23, Filter FIFO assignment for filter 23
: CAN2_FFA1R_FFA24 ( -- x addr ) 24 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA24, Filter FIFO assignment for filter 24
: CAN2_FFA1R_FFA25 ( -- x addr ) 25 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA25, Filter FIFO assignment for filter 25
: CAN2_FFA1R_FFA26 ( -- x addr ) 26 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA26, Filter FIFO assignment for filter 26
: CAN2_FFA1R_FFA27 ( -- x addr ) 27 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA27, Filter FIFO assignment for filter 27

\ CAN2_FA1R (read-write) Reset:0x00000000
: CAN2_FA1R_FACT0 ( -- x addr ) 0 bit CAN2_FA1R ; \ CAN2_FA1R_FACT0, Filter active
: CAN2_FA1R_FACT1 ( -- x addr ) 1 bit CAN2_FA1R ; \ CAN2_FA1R_FACT1, Filter active
: CAN2_FA1R_FACT2 ( -- x addr ) 2 bit CAN2_FA1R ; \ CAN2_FA1R_FACT2, Filter active
: CAN2_FA1R_FACT3 ( -- x addr ) 3 bit CAN2_FA1R ; \ CAN2_FA1R_FACT3, Filter active
: CAN2_FA1R_FACT4 ( -- x addr ) 4 bit CAN2_FA1R ; \ CAN2_FA1R_FACT4, Filter active
: CAN2_FA1R_FACT5 ( -- x addr ) 5 bit CAN2_FA1R ; \ CAN2_FA1R_FACT5, Filter active
: CAN2_FA1R_FACT6 ( -- x addr ) 6 bit CAN2_FA1R ; \ CAN2_FA1R_FACT6, Filter active
: CAN2_FA1R_FACT7 ( -- x addr ) 7 bit CAN2_FA1R ; \ CAN2_FA1R_FACT7, Filter active
: CAN2_FA1R_FACT8 ( -- x addr ) 8 bit CAN2_FA1R ; \ CAN2_FA1R_FACT8, Filter active
: CAN2_FA1R_FACT9 ( -- x addr ) 9 bit CAN2_FA1R ; \ CAN2_FA1R_FACT9, Filter active
: CAN2_FA1R_FACT10 ( -- x addr ) 10 bit CAN2_FA1R ; \ CAN2_FA1R_FACT10, Filter active
: CAN2_FA1R_FACT11 ( -- x addr ) 11 bit CAN2_FA1R ; \ CAN2_FA1R_FACT11, Filter active
: CAN2_FA1R_FACT12 ( -- x addr ) 12 bit CAN2_FA1R ; \ CAN2_FA1R_FACT12, Filter active
: CAN2_FA1R_FACT13 ( -- x addr ) 13 bit CAN2_FA1R ; \ CAN2_FA1R_FACT13, Filter active
: CAN2_FA1R_FACT14 ( -- x addr ) 14 bit CAN2_FA1R ; \ CAN2_FA1R_FACT14, Filter active
: CAN2_FA1R_FACT15 ( -- x addr ) 15 bit CAN2_FA1R ; \ CAN2_FA1R_FACT15, Filter active
: CAN2_FA1R_FACT16 ( -- x addr ) 16 bit CAN2_FA1R ; \ CAN2_FA1R_FACT16, Filter active
: CAN2_FA1R_FACT17 ( -- x addr ) 17 bit CAN2_FA1R ; \ CAN2_FA1R_FACT17, Filter active
: CAN2_FA1R_FACT18 ( -- x addr ) 18 bit CAN2_FA1R ; \ CAN2_FA1R_FACT18, Filter active
: CAN2_FA1R_FACT19 ( -- x addr ) 19 bit CAN2_FA1R ; \ CAN2_FA1R_FACT19, Filter active
: CAN2_FA1R_FACT20 ( -- x addr ) 20 bit CAN2_FA1R ; \ CAN2_FA1R_FACT20, Filter active
: CAN2_FA1R_FACT21 ( -- x addr ) 21 bit CAN2_FA1R ; \ CAN2_FA1R_FACT21, Filter active
: CAN2_FA1R_FACT22 ( -- x addr ) 22 bit CAN2_FA1R ; \ CAN2_FA1R_FACT22, Filter active
: CAN2_FA1R_FACT23 ( -- x addr ) 23 bit CAN2_FA1R ; \ CAN2_FA1R_FACT23, Filter active
: CAN2_FA1R_FACT24 ( -- x addr ) 24 bit CAN2_FA1R ; \ CAN2_FA1R_FACT24, Filter active
: CAN2_FA1R_FACT25 ( -- x addr ) 25 bit CAN2_FA1R ; \ CAN2_FA1R_FACT25, Filter active
: CAN2_FA1R_FACT26 ( -- x addr ) 26 bit CAN2_FA1R ; \ CAN2_FA1R_FACT26, Filter active
: CAN2_FA1R_FACT27 ( -- x addr ) 27 bit CAN2_FA1R ; \ CAN2_FA1R_FACT27, Filter active

\ CAN2_F0R1 (read-write) Reset:0x00000000
: CAN2_F0R1_FB0 ( -- x addr ) 0 bit CAN2_F0R1 ; \ CAN2_F0R1_FB0, Filter bits
: CAN2_F0R1_FB1 ( -- x addr ) 1 bit CAN2_F0R1 ; \ CAN2_F0R1_FB1, Filter bits
: CAN2_F0R1_FB2 ( -- x addr ) 2 bit CAN2_F0R1 ; \ CAN2_F0R1_FB2, Filter bits
: CAN2_F0R1_FB3 ( -- x addr ) 3 bit CAN2_F0R1 ; \ CAN2_F0R1_FB3, Filter bits
: CAN2_F0R1_FB4 ( -- x addr ) 4 bit CAN2_F0R1 ; \ CAN2_F0R1_FB4, Filter bits
: CAN2_F0R1_FB5 ( -- x addr ) 5 bit CAN2_F0R1 ; \ CAN2_F0R1_FB5, Filter bits
: CAN2_F0R1_FB6 ( -- x addr ) 6 bit CAN2_F0R1 ; \ CAN2_F0R1_FB6, Filter bits
: CAN2_F0R1_FB7 ( -- x addr ) 7 bit CAN2_F0R1 ; \ CAN2_F0R1_FB7, Filter bits
: CAN2_F0R1_FB8 ( -- x addr ) 8 bit CAN2_F0R1 ; \ CAN2_F0R1_FB8, Filter bits
: CAN2_F0R1_FB9 ( -- x addr ) 9 bit CAN2_F0R1 ; \ CAN2_F0R1_FB9, Filter bits
: CAN2_F0R1_FB10 ( -- x addr ) 10 bit CAN2_F0R1 ; \ CAN2_F0R1_FB10, Filter bits
: CAN2_F0R1_FB11 ( -- x addr ) 11 bit CAN2_F0R1 ; \ CAN2_F0R1_FB11, Filter bits
: CAN2_F0R1_FB12 ( -- x addr ) 12 bit CAN2_F0R1 ; \ CAN2_F0R1_FB12, Filter bits
: CAN2_F0R1_FB13 ( -- x addr ) 13 bit CAN2_F0R1 ; \ CAN2_F0R1_FB13, Filter bits
: CAN2_F0R1_FB14 ( -- x addr ) 14 bit CAN2_F0R1 ; \ CAN2_F0R1_FB14, Filter bits
: CAN2_F0R1_FB15 ( -- x addr ) 15 bit CAN2_F0R1 ; \ CAN2_F0R1_FB15, Filter bits
: CAN2_F0R1_FB16 ( -- x addr ) 16 bit CAN2_F0R1 ; \ CAN2_F0R1_FB16, Filter bits
: CAN2_F0R1_FB17 ( -- x addr ) 17 bit CAN2_F0R1 ; \ CAN2_F0R1_FB17, Filter bits
: CAN2_F0R1_FB18 ( -- x addr ) 18 bit CAN2_F0R1 ; \ CAN2_F0R1_FB18, Filter bits
: CAN2_F0R1_FB19 ( -- x addr ) 19 bit CAN2_F0R1 ; \ CAN2_F0R1_FB19, Filter bits
: CAN2_F0R1_FB20 ( -- x addr ) 20 bit CAN2_F0R1 ; \ CAN2_F0R1_FB20, Filter bits
: CAN2_F0R1_FB21 ( -- x addr ) 21 bit CAN2_F0R1 ; \ CAN2_F0R1_FB21, Filter bits
: CAN2_F0R1_FB22 ( -- x addr ) 22 bit CAN2_F0R1 ; \ CAN2_F0R1_FB22, Filter bits
: CAN2_F0R1_FB23 ( -- x addr ) 23 bit CAN2_F0R1 ; \ CAN2_F0R1_FB23, Filter bits
: CAN2_F0R1_FB24 ( -- x addr ) 24 bit CAN2_F0R1 ; \ CAN2_F0R1_FB24, Filter bits
: CAN2_F0R1_FB25 ( -- x addr ) 25 bit CAN2_F0R1 ; \ CAN2_F0R1_FB25, Filter bits
: CAN2_F0R1_FB26 ( -- x addr ) 26 bit CAN2_F0R1 ; \ CAN2_F0R1_FB26, Filter bits
: CAN2_F0R1_FB27 ( -- x addr ) 27 bit CAN2_F0R1 ; \ CAN2_F0R1_FB27, Filter bits
: CAN2_F0R1_FB28 ( -- x addr ) 28 bit CAN2_F0R1 ; \ CAN2_F0R1_FB28, Filter bits
: CAN2_F0R1_FB29 ( -- x addr ) 29 bit CAN2_F0R1 ; \ CAN2_F0R1_FB29, Filter bits
: CAN2_F0R1_FB30 ( -- x addr ) 30 bit CAN2_F0R1 ; \ CAN2_F0R1_FB30, Filter bits
: CAN2_F0R1_FB31 ( -- x addr ) 31 bit CAN2_F0R1 ; \ CAN2_F0R1_FB31, Filter bits

\ CAN2_F0R2 (read-write) Reset:0x00000000
: CAN2_F0R2_FB0 ( -- x addr ) 0 bit CAN2_F0R2 ; \ CAN2_F0R2_FB0, Filter bits
: CAN2_F0R2_FB1 ( -- x addr ) 1 bit CAN2_F0R2 ; \ CAN2_F0R2_FB1, Filter bits
: CAN2_F0R2_FB2 ( -- x addr ) 2 bit CAN2_F0R2 ; \ CAN2_F0R2_FB2, Filter bits
: CAN2_F0R2_FB3 ( -- x addr ) 3 bit CAN2_F0R2 ; \ CAN2_F0R2_FB3, Filter bits
: CAN2_F0R2_FB4 ( -- x addr ) 4 bit CAN2_F0R2 ; \ CAN2_F0R2_FB4, Filter bits
: CAN2_F0R2_FB5 ( -- x addr ) 5 bit CAN2_F0R2 ; \ CAN2_F0R2_FB5, Filter bits
: CAN2_F0R2_FB6 ( -- x addr ) 6 bit CAN2_F0R2 ; \ CAN2_F0R2_FB6, Filter bits
: CAN2_F0R2_FB7 ( -- x addr ) 7 bit CAN2_F0R2 ; \ CAN2_F0R2_FB7, Filter bits
: CAN2_F0R2_FB8 ( -- x addr ) 8 bit CAN2_F0R2 ; \ CAN2_F0R2_FB8, Filter bits
: CAN2_F0R2_FB9 ( -- x addr ) 9 bit CAN2_F0R2 ; \ CAN2_F0R2_FB9, Filter bits
: CAN2_F0R2_FB10 ( -- x addr ) 10 bit CAN2_F0R2 ; \ CAN2_F0R2_FB10, Filter bits
: CAN2_F0R2_FB11 ( -- x addr ) 11 bit CAN2_F0R2 ; \ CAN2_F0R2_FB11, Filter bits
: CAN2_F0R2_FB12 ( -- x addr ) 12 bit CAN2_F0R2 ; \ CAN2_F0R2_FB12, Filter bits
: CAN2_F0R2_FB13 ( -- x addr ) 13 bit CAN2_F0R2 ; \ CAN2_F0R2_FB13, Filter bits
: CAN2_F0R2_FB14 ( -- x addr ) 14 bit CAN2_F0R2 ; \ CAN2_F0R2_FB14, Filter bits
: CAN2_F0R2_FB15 ( -- x addr ) 15 bit CAN2_F0R2 ; \ CAN2_F0R2_FB15, Filter bits
: CAN2_F0R2_FB16 ( -- x addr ) 16 bit CAN2_F0R2 ; \ CAN2_F0R2_FB16, Filter bits
: CAN2_F0R2_FB17 ( -- x addr ) 17 bit CAN2_F0R2 ; \ CAN2_F0R2_FB17, Filter bits
: CAN2_F0R2_FB18 ( -- x addr ) 18 bit CAN2_F0R2 ; \ CAN2_F0R2_FB18, Filter bits
: CAN2_F0R2_FB19 ( -- x addr ) 19 bit CAN2_F0R2 ; \ CAN2_F0R2_FB19, Filter bits
: CAN2_F0R2_FB20 ( -- x addr ) 20 bit CAN2_F0R2 ; \ CAN2_F0R2_FB20, Filter bits
: CAN2_F0R2_FB21 ( -- x addr ) 21 bit CAN2_F0R2 ; \ CAN2_F0R2_FB21, Filter bits
: CAN2_F0R2_FB22 ( -- x addr ) 22 bit CAN2_F0R2 ; \ CAN2_F0R2_FB22, Filter bits
: CAN2_F0R2_FB23 ( -- x addr ) 23 bit CAN2_F0R2 ; \ CAN2_F0R2_FB23, Filter bits
: CAN2_F0R2_FB24 ( -- x addr ) 24 bit CAN2_F0R2 ; \ CAN2_F0R2_FB24, Filter bits
: CAN2_F0R2_FB25 ( -- x addr ) 25 bit CAN2_F0R2 ; \ CAN2_F0R2_FB25, Filter bits
: CAN2_F0R2_FB26 ( -- x addr ) 26 bit CAN2_F0R2 ; \ CAN2_F0R2_FB26, Filter bits
: CAN2_F0R2_FB27 ( -- x addr ) 27 bit CAN2_F0R2 ; \ CAN2_F0R2_FB27, Filter bits
: CAN2_F0R2_FB28 ( -- x addr ) 28 bit CAN2_F0R2 ; \ CAN2_F0R2_FB28, Filter bits
: CAN2_F0R2_FB29 ( -- x addr ) 29 bit CAN2_F0R2 ; \ CAN2_F0R2_FB29, Filter bits
: CAN2_F0R2_FB30 ( -- x addr ) 30 bit CAN2_F0R2 ; \ CAN2_F0R2_FB30, Filter bits
: CAN2_F0R2_FB31 ( -- x addr ) 31 bit CAN2_F0R2 ; \ CAN2_F0R2_FB31, Filter bits

\ CAN2_F1R1 (read-write) Reset:0x00000000
: CAN2_F1R1_FB0 ( -- x addr ) 0 bit CAN2_F1R1 ; \ CAN2_F1R1_FB0, Filter bits
: CAN2_F1R1_FB1 ( -- x addr ) 1 bit CAN2_F1R1 ; \ CAN2_F1R1_FB1, Filter bits
: CAN2_F1R1_FB2 ( -- x addr ) 2 bit CAN2_F1R1 ; \ CAN2_F1R1_FB2, Filter bits
: CAN2_F1R1_FB3 ( -- x addr ) 3 bit CAN2_F1R1 ; \ CAN2_F1R1_FB3, Filter bits
: CAN2_F1R1_FB4 ( -- x addr ) 4 bit CAN2_F1R1 ; \ CAN2_F1R1_FB4, Filter bits
: CAN2_F1R1_FB5 ( -- x addr ) 5 bit CAN2_F1R1 ; \ CAN2_F1R1_FB5, Filter bits
: CAN2_F1R1_FB6 ( -- x addr ) 6 bit CAN2_F1R1 ; \ CAN2_F1R1_FB6, Filter bits
: CAN2_F1R1_FB7 ( -- x addr ) 7 bit CAN2_F1R1 ; \ CAN2_F1R1_FB7, Filter bits
: CAN2_F1R1_FB8 ( -- x addr ) 8 bit CAN2_F1R1 ; \ CAN2_F1R1_FB8, Filter bits
: CAN2_F1R1_FB9 ( -- x addr ) 9 bit CAN2_F1R1 ; \ CAN2_F1R1_FB9, Filter bits
: CAN2_F1R1_FB10 ( -- x addr ) 10 bit CAN2_F1R1 ; \ CAN2_F1R1_FB10, Filter bits
: CAN2_F1R1_FB11 ( -- x addr ) 11 bit CAN2_F1R1 ; \ CAN2_F1R1_FB11, Filter bits
: CAN2_F1R1_FB12 ( -- x addr ) 12 bit CAN2_F1R1 ; \ CAN2_F1R1_FB12, Filter bits
: CAN2_F1R1_FB13 ( -- x addr ) 13 bit CAN2_F1R1 ; \ CAN2_F1R1_FB13, Filter bits
: CAN2_F1R1_FB14 ( -- x addr ) 14 bit CAN2_F1R1 ; \ CAN2_F1R1_FB14, Filter bits
: CAN2_F1R1_FB15 ( -- x addr ) 15 bit CAN2_F1R1 ; \ CAN2_F1R1_FB15, Filter bits
: CAN2_F1R1_FB16 ( -- x addr ) 16 bit CAN2_F1R1 ; \ CAN2_F1R1_FB16, Filter bits
: CAN2_F1R1_FB17 ( -- x addr ) 17 bit CAN2_F1R1 ; \ CAN2_F1R1_FB17, Filter bits
: CAN2_F1R1_FB18 ( -- x addr ) 18 bit CAN2_F1R1 ; \ CAN2_F1R1_FB18, Filter bits
: CAN2_F1R1_FB19 ( -- x addr ) 19 bit CAN2_F1R1 ; \ CAN2_F1R1_FB19, Filter bits
: CAN2_F1R1_FB20 ( -- x addr ) 20 bit CAN2_F1R1 ; \ CAN2_F1R1_FB20, Filter bits
: CAN2_F1R1_FB21 ( -- x addr ) 21 bit CAN2_F1R1 ; \ CAN2_F1R1_FB21, Filter bits
: CAN2_F1R1_FB22 ( -- x addr ) 22 bit CAN2_F1R1 ; \ CAN2_F1R1_FB22, Filter bits
: CAN2_F1R1_FB23 ( -- x addr ) 23 bit CAN2_F1R1 ; \ CAN2_F1R1_FB23, Filter bits
: CAN2_F1R1_FB24 ( -- x addr ) 24 bit CAN2_F1R1 ; \ CAN2_F1R1_FB24, Filter bits
: CAN2_F1R1_FB25 ( -- x addr ) 25 bit CAN2_F1R1 ; \ CAN2_F1R1_FB25, Filter bits
: CAN2_F1R1_FB26 ( -- x addr ) 26 bit CAN2_F1R1 ; \ CAN2_F1R1_FB26, Filter bits
: CAN2_F1R1_FB27 ( -- x addr ) 27 bit CAN2_F1R1 ; \ CAN2_F1R1_FB27, Filter bits
: CAN2_F1R1_FB28 ( -- x addr ) 28 bit CAN2_F1R1 ; \ CAN2_F1R1_FB28, Filter bits
: CAN2_F1R1_FB29 ( -- x addr ) 29 bit CAN2_F1R1 ; \ CAN2_F1R1_FB29, Filter bits
: CAN2_F1R1_FB30 ( -- x addr ) 30 bit CAN2_F1R1 ; \ CAN2_F1R1_FB30, Filter bits
: CAN2_F1R1_FB31 ( -- x addr ) 31 bit CAN2_F1R1 ; \ CAN2_F1R1_FB31, Filter bits

\ CAN2_F1R2 (read-write) Reset:0x00000000
: CAN2_F1R2_FB0 ( -- x addr ) 0 bit CAN2_F1R2 ; \ CAN2_F1R2_FB0, Filter bits
: CAN2_F1R2_FB1 ( -- x addr ) 1 bit CAN2_F1R2 ; \ CAN2_F1R2_FB1, Filter bits
: CAN2_F1R2_FB2 ( -- x addr ) 2 bit CAN2_F1R2 ; \ CAN2_F1R2_FB2, Filter bits
: CAN2_F1R2_FB3 ( -- x addr ) 3 bit CAN2_F1R2 ; \ CAN2_F1R2_FB3, Filter bits
: CAN2_F1R2_FB4 ( -- x addr ) 4 bit CAN2_F1R2 ; \ CAN2_F1R2_FB4, Filter bits
: CAN2_F1R2_FB5 ( -- x addr ) 5 bit CAN2_F1R2 ; \ CAN2_F1R2_FB5, Filter bits
: CAN2_F1R2_FB6 ( -- x addr ) 6 bit CAN2_F1R2 ; \ CAN2_F1R2_FB6, Filter bits
: CAN2_F1R2_FB7 ( -- x addr ) 7 bit CAN2_F1R2 ; \ CAN2_F1R2_FB7, Filter bits
: CAN2_F1R2_FB8 ( -- x addr ) 8 bit CAN2_F1R2 ; \ CAN2_F1R2_FB8, Filter bits
: CAN2_F1R2_FB9 ( -- x addr ) 9 bit CAN2_F1R2 ; \ CAN2_F1R2_FB9, Filter bits
: CAN2_F1R2_FB10 ( -- x addr ) 10 bit CAN2_F1R2 ; \ CAN2_F1R2_FB10, Filter bits
: CAN2_F1R2_FB11 ( -- x addr ) 11 bit CAN2_F1R2 ; \ CAN2_F1R2_FB11, Filter bits
: CAN2_F1R2_FB12 ( -- x addr ) 12 bit CAN2_F1R2 ; \ CAN2_F1R2_FB12, Filter bits
: CAN2_F1R2_FB13 ( -- x addr ) 13 bit CAN2_F1R2 ; \ CAN2_F1R2_FB13, Filter bits
: CAN2_F1R2_FB14 ( -- x addr ) 14 bit CAN2_F1R2 ; \ CAN2_F1R2_FB14, Filter bits
: CAN2_F1R2_FB15 ( -- x addr ) 15 bit CAN2_F1R2 ; \ CAN2_F1R2_FB15, Filter bits
: CAN2_F1R2_FB16 ( -- x addr ) 16 bit CAN2_F1R2 ; \ CAN2_F1R2_FB16, Filter bits
: CAN2_F1R2_FB17 ( -- x addr ) 17 bit CAN2_F1R2 ; \ CAN2_F1R2_FB17, Filter bits
: CAN2_F1R2_FB18 ( -- x addr ) 18 bit CAN2_F1R2 ; \ CAN2_F1R2_FB18, Filter bits
: CAN2_F1R2_FB19 ( -- x addr ) 19 bit CAN2_F1R2 ; \ CAN2_F1R2_FB19, Filter bits
: CAN2_F1R2_FB20 ( -- x addr ) 20 bit CAN2_F1R2 ; \ CAN2_F1R2_FB20, Filter bits
: CAN2_F1R2_FB21 ( -- x addr ) 21 bit CAN2_F1R2 ; \ CAN2_F1R2_FB21, Filter bits
: CAN2_F1R2_FB22 ( -- x addr ) 22 bit CAN2_F1R2 ; \ CAN2_F1R2_FB22, Filter bits
: CAN2_F1R2_FB23 ( -- x addr ) 23 bit CAN2_F1R2 ; \ CAN2_F1R2_FB23, Filter bits
: CAN2_F1R2_FB24 ( -- x addr ) 24 bit CAN2_F1R2 ; \ CAN2_F1R2_FB24, Filter bits
: CAN2_F1R2_FB25 ( -- x addr ) 25 bit CAN2_F1R2 ; \ CAN2_F1R2_FB25, Filter bits
: CAN2_F1R2_FB26 ( -- x addr ) 26 bit CAN2_F1R2 ; \ CAN2_F1R2_FB26, Filter bits
: CAN2_F1R2_FB27 ( -- x addr ) 27 bit CAN2_F1R2 ; \ CAN2_F1R2_FB27, Filter bits
: CAN2_F1R2_FB28 ( -- x addr ) 28 bit CAN2_F1R2 ; \ CAN2_F1R2_FB28, Filter bits
: CAN2_F1R2_FB29 ( -- x addr ) 29 bit CAN2_F1R2 ; \ CAN2_F1R2_FB29, Filter bits
: CAN2_F1R2_FB30 ( -- x addr ) 30 bit CAN2_F1R2 ; \ CAN2_F1R2_FB30, Filter bits
: CAN2_F1R2_FB31 ( -- x addr ) 31 bit CAN2_F1R2 ; \ CAN2_F1R2_FB31, Filter bits

\ CAN2_F2R1 (read-write) Reset:0x00000000
: CAN2_F2R1_FB0 ( -- x addr ) 0 bit CAN2_F2R1 ; \ CAN2_F2R1_FB0, Filter bits
: CAN2_F2R1_FB1 ( -- x addr ) 1 bit CAN2_F2R1 ; \ CAN2_F2R1_FB1, Filter bits
: CAN2_F2R1_FB2 ( -- x addr ) 2 bit CAN2_F2R1 ; \ CAN2_F2R1_FB2, Filter bits
: CAN2_F2R1_FB3 ( -- x addr ) 3 bit CAN2_F2R1 ; \ CAN2_F2R1_FB3, Filter bits
: CAN2_F2R1_FB4 ( -- x addr ) 4 bit CAN2_F2R1 ; \ CAN2_F2R1_FB4, Filter bits
: CAN2_F2R1_FB5 ( -- x addr ) 5 bit CAN2_F2R1 ; \ CAN2_F2R1_FB5, Filter bits
: CAN2_F2R1_FB6 ( -- x addr ) 6 bit CAN2_F2R1 ; \ CAN2_F2R1_FB6, Filter bits
: CAN2_F2R1_FB7 ( -- x addr ) 7 bit CAN2_F2R1 ; \ CAN2_F2R1_FB7, Filter bits
: CAN2_F2R1_FB8 ( -- x addr ) 8 bit CAN2_F2R1 ; \ CAN2_F2R1_FB8, Filter bits
: CAN2_F2R1_FB9 ( -- x addr ) 9 bit CAN2_F2R1 ; \ CAN2_F2R1_FB9, Filter bits
: CAN2_F2R1_FB10 ( -- x addr ) 10 bit CAN2_F2R1 ; \ CAN2_F2R1_FB10, Filter bits
: CAN2_F2R1_FB11 ( -- x addr ) 11 bit CAN2_F2R1 ; \ CAN2_F2R1_FB11, Filter bits
: CAN2_F2R1_FB12 ( -- x addr ) 12 bit CAN2_F2R1 ; \ CAN2_F2R1_FB12, Filter bits
: CAN2_F2R1_FB13 ( -- x addr ) 13 bit CAN2_F2R1 ; \ CAN2_F2R1_FB13, Filter bits
: CAN2_F2R1_FB14 ( -- x addr ) 14 bit CAN2_F2R1 ; \ CAN2_F2R1_FB14, Filter bits
: CAN2_F2R1_FB15 ( -- x addr ) 15 bit CAN2_F2R1 ; \ CAN2_F2R1_FB15, Filter bits
: CAN2_F2R1_FB16 ( -- x addr ) 16 bit CAN2_F2R1 ; \ CAN2_F2R1_FB16, Filter bits
: CAN2_F2R1_FB17 ( -- x addr ) 17 bit CAN2_F2R1 ; \ CAN2_F2R1_FB17, Filter bits
: CAN2_F2R1_FB18 ( -- x addr ) 18 bit CAN2_F2R1 ; \ CAN2_F2R1_FB18, Filter bits
: CAN2_F2R1_FB19 ( -- x addr ) 19 bit CAN2_F2R1 ; \ CAN2_F2R1_FB19, Filter bits
: CAN2_F2R1_FB20 ( -- x addr ) 20 bit CAN2_F2R1 ; \ CAN2_F2R1_FB20, Filter bits
: CAN2_F2R1_FB21 ( -- x addr ) 21 bit CAN2_F2R1 ; \ CAN2_F2R1_FB21, Filter bits
: CAN2_F2R1_FB22 ( -- x addr ) 22 bit CAN2_F2R1 ; \ CAN2_F2R1_FB22, Filter bits
: CAN2_F2R1_FB23 ( -- x addr ) 23 bit CAN2_F2R1 ; \ CAN2_F2R1_FB23, Filter bits
: CAN2_F2R1_FB24 ( -- x addr ) 24 bit CAN2_F2R1 ; \ CAN2_F2R1_FB24, Filter bits
: CAN2_F2R1_FB25 ( -- x addr ) 25 bit CAN2_F2R1 ; \ CAN2_F2R1_FB25, Filter bits
: CAN2_F2R1_FB26 ( -- x addr ) 26 bit CAN2_F2R1 ; \ CAN2_F2R1_FB26, Filter bits
: CAN2_F2R1_FB27 ( -- x addr ) 27 bit CAN2_F2R1 ; \ CAN2_F2R1_FB27, Filter bits
: CAN2_F2R1_FB28 ( -- x addr ) 28 bit CAN2_F2R1 ; \ CAN2_F2R1_FB28, Filter bits
: CAN2_F2R1_FB29 ( -- x addr ) 29 bit CAN2_F2R1 ; \ CAN2_F2R1_FB29, Filter bits
: CAN2_F2R1_FB30 ( -- x addr ) 30 bit CAN2_F2R1 ; \ CAN2_F2R1_FB30, Filter bits
: CAN2_F2R1_FB31 ( -- x addr ) 31 bit CAN2_F2R1 ; \ CAN2_F2R1_FB31, Filter bits

\ CAN2_F2R2 (read-write) Reset:0x00000000
: CAN2_F2R2_FB0 ( -- x addr ) 0 bit CAN2_F2R2 ; \ CAN2_F2R2_FB0, Filter bits
: CAN2_F2R2_FB1 ( -- x addr ) 1 bit CAN2_F2R2 ; \ CAN2_F2R2_FB1, Filter bits
: CAN2_F2R2_FB2 ( -- x addr ) 2 bit CAN2_F2R2 ; \ CAN2_F2R2_FB2, Filter bits
: CAN2_F2R2_FB3 ( -- x addr ) 3 bit CAN2_F2R2 ; \ CAN2_F2R2_FB3, Filter bits
: CAN2_F2R2_FB4 ( -- x addr ) 4 bit CAN2_F2R2 ; \ CAN2_F2R2_FB4, Filter bits
: CAN2_F2R2_FB5 ( -- x addr ) 5 bit CAN2_F2R2 ; \ CAN2_F2R2_FB5, Filter bits
: CAN2_F2R2_FB6 ( -- x addr ) 6 bit CAN2_F2R2 ; \ CAN2_F2R2_FB6, Filter bits
: CAN2_F2R2_FB7 ( -- x addr ) 7 bit CAN2_F2R2 ; \ CAN2_F2R2_FB7, Filter bits
: CAN2_F2R2_FB8 ( -- x addr ) 8 bit CAN2_F2R2 ; \ CAN2_F2R2_FB8, Filter bits
: CAN2_F2R2_FB9 ( -- x addr ) 9 bit CAN2_F2R2 ; \ CAN2_F2R2_FB9, Filter bits
: CAN2_F2R2_FB10 ( -- x addr ) 10 bit CAN2_F2R2 ; \ CAN2_F2R2_FB10, Filter bits
: CAN2_F2R2_FB11 ( -- x addr ) 11 bit CAN2_F2R2 ; \ CAN2_F2R2_FB11, Filter bits
: CAN2_F2R2_FB12 ( -- x addr ) 12 bit CAN2_F2R2 ; \ CAN2_F2R2_FB12, Filter bits
: CAN2_F2R2_FB13 ( -- x addr ) 13 bit CAN2_F2R2 ; \ CAN2_F2R2_FB13, Filter bits
: CAN2_F2R2_FB14 ( -- x addr ) 14 bit CAN2_F2R2 ; \ CAN2_F2R2_FB14, Filter bits
: CAN2_F2R2_FB15 ( -- x addr ) 15 bit CAN2_F2R2 ; \ CAN2_F2R2_FB15, Filter bits
: CAN2_F2R2_FB16 ( -- x addr ) 16 bit CAN2_F2R2 ; \ CAN2_F2R2_FB16, Filter bits
: CAN2_F2R2_FB17 ( -- x addr ) 17 bit CAN2_F2R2 ; \ CAN2_F2R2_FB17, Filter bits
: CAN2_F2R2_FB18 ( -- x addr ) 18 bit CAN2_F2R2 ; \ CAN2_F2R2_FB18, Filter bits
: CAN2_F2R2_FB19 ( -- x addr ) 19 bit CAN2_F2R2 ; \ CAN2_F2R2_FB19, Filter bits
: CAN2_F2R2_FB20 ( -- x addr ) 20 bit CAN2_F2R2 ; \ CAN2_F2R2_FB20, Filter bits
: CAN2_F2R2_FB21 ( -- x addr ) 21 bit CAN2_F2R2 ; \ CAN2_F2R2_FB21, Filter bits
: CAN2_F2R2_FB22 ( -- x addr ) 22 bit CAN2_F2R2 ; \ CAN2_F2R2_FB22, Filter bits
: CAN2_F2R2_FB23 ( -- x addr ) 23 bit CAN2_F2R2 ; \ CAN2_F2R2_FB23, Filter bits
: CAN2_F2R2_FB24 ( -- x addr ) 24 bit CAN2_F2R2 ; \ CAN2_F2R2_FB24, Filter bits
: CAN2_F2R2_FB25 ( -- x addr ) 25 bit CAN2_F2R2 ; \ CAN2_F2R2_FB25, Filter bits
: CAN2_F2R2_FB26 ( -- x addr ) 26 bit CAN2_F2R2 ; \ CAN2_F2R2_FB26, Filter bits
: CAN2_F2R2_FB27 ( -- x addr ) 27 bit CAN2_F2R2 ; \ CAN2_F2R2_FB27, Filter bits
: CAN2_F2R2_FB28 ( -- x addr ) 28 bit CAN2_F2R2 ; \ CAN2_F2R2_FB28, Filter bits
: CAN2_F2R2_FB29 ( -- x addr ) 29 bit CAN2_F2R2 ; \ CAN2_F2R2_FB29, Filter bits
: CAN2_F2R2_FB30 ( -- x addr ) 30 bit CAN2_F2R2 ; \ CAN2_F2R2_FB30, Filter bits
: CAN2_F2R2_FB31 ( -- x addr ) 31 bit CAN2_F2R2 ; \ CAN2_F2R2_FB31, Filter bits

\ CAN2_F3R1 (read-write) Reset:0x00000000
: CAN2_F3R1_FB0 ( -- x addr ) 0 bit CAN2_F3R1 ; \ CAN2_F3R1_FB0, Filter bits
: CAN2_F3R1_FB1 ( -- x addr ) 1 bit CAN2_F3R1 ; \ CAN2_F3R1_FB1, Filter bits
: CAN2_F3R1_FB2 ( -- x addr ) 2 bit CAN2_F3R1 ; \ CAN2_F3R1_FB2, Filter bits
: CAN2_F3R1_FB3 ( -- x addr ) 3 bit CAN2_F3R1 ; \ CAN2_F3R1_FB3, Filter bits
: CAN2_F3R1_FB4 ( -- x addr ) 4 bit CAN2_F3R1 ; \ CAN2_F3R1_FB4, Filter bits
: CAN2_F3R1_FB5 ( -- x addr ) 5 bit CAN2_F3R1 ; \ CAN2_F3R1_FB5, Filter bits
: CAN2_F3R1_FB6 ( -- x addr ) 6 bit CAN2_F3R1 ; \ CAN2_F3R1_FB6, Filter bits
: CAN2_F3R1_FB7 ( -- x addr ) 7 bit CAN2_F3R1 ; \ CAN2_F3R1_FB7, Filter bits
: CAN2_F3R1_FB8 ( -- x addr ) 8 bit CAN2_F3R1 ; \ CAN2_F3R1_FB8, Filter bits
: CAN2_F3R1_FB9 ( -- x addr ) 9 bit CAN2_F3R1 ; \ CAN2_F3R1_FB9, Filter bits
: CAN2_F3R1_FB10 ( -- x addr ) 10 bit CAN2_F3R1 ; \ CAN2_F3R1_FB10, Filter bits
: CAN2_F3R1_FB11 ( -- x addr ) 11 bit CAN2_F3R1 ; \ CAN2_F3R1_FB11, Filter bits
: CAN2_F3R1_FB12 ( -- x addr ) 12 bit CAN2_F3R1 ; \ CAN2_F3R1_FB12, Filter bits
: CAN2_F3R1_FB13 ( -- x addr ) 13 bit CAN2_F3R1 ; \ CAN2_F3R1_FB13, Filter bits
: CAN2_F3R1_FB14 ( -- x addr ) 14 bit CAN2_F3R1 ; \ CAN2_F3R1_FB14, Filter bits
: CAN2_F3R1_FB15 ( -- x addr ) 15 bit CAN2_F3R1 ; \ CAN2_F3R1_FB15, Filter bits
: CAN2_F3R1_FB16 ( -- x addr ) 16 bit CAN2_F3R1 ; \ CAN2_F3R1_FB16, Filter bits
: CAN2_F3R1_FB17 ( -- x addr ) 17 bit CAN2_F3R1 ; \ CAN2_F3R1_FB17, Filter bits
: CAN2_F3R1_FB18 ( -- x addr ) 18 bit CAN2_F3R1 ; \ CAN2_F3R1_FB18, Filter bits
: CAN2_F3R1_FB19 ( -- x addr ) 19 bit CAN2_F3R1 ; \ CAN2_F3R1_FB19, Filter bits
: CAN2_F3R1_FB20 ( -- x addr ) 20 bit CAN2_F3R1 ; \ CAN2_F3R1_FB20, Filter bits
: CAN2_F3R1_FB21 ( -- x addr ) 21 bit CAN2_F3R1 ; \ CAN2_F3R1_FB21, Filter bits
: CAN2_F3R1_FB22 ( -- x addr ) 22 bit CAN2_F3R1 ; \ CAN2_F3R1_FB22, Filter bits
: CAN2_F3R1_FB23 ( -- x addr ) 23 bit CAN2_F3R1 ; \ CAN2_F3R1_FB23, Filter bits
: CAN2_F3R1_FB24 ( -- x addr ) 24 bit CAN2_F3R1 ; \ CAN2_F3R1_FB24, Filter bits
: CAN2_F3R1_FB25 ( -- x addr ) 25 bit CAN2_F3R1 ; \ CAN2_F3R1_FB25, Filter bits
: CAN2_F3R1_FB26 ( -- x addr ) 26 bit CAN2_F3R1 ; \ CAN2_F3R1_FB26, Filter bits
: CAN2_F3R1_FB27 ( -- x addr ) 27 bit CAN2_F3R1 ; \ CAN2_F3R1_FB27, Filter bits
: CAN2_F3R1_FB28 ( -- x addr ) 28 bit CAN2_F3R1 ; \ CAN2_F3R1_FB28, Filter bits
: CAN2_F3R1_FB29 ( -- x addr ) 29 bit CAN2_F3R1 ; \ CAN2_F3R1_FB29, Filter bits
: CAN2_F3R1_FB30 ( -- x addr ) 30 bit CAN2_F3R1 ; \ CAN2_F3R1_FB30, Filter bits
: CAN2_F3R1_FB31 ( -- x addr ) 31 bit CAN2_F3R1 ; \ CAN2_F3R1_FB31, Filter bits

\ CAN2_F3R2 (read-write) Reset:0x00000000
: CAN2_F3R2_FB0 ( -- x addr ) 0 bit CAN2_F3R2 ; \ CAN2_F3R2_FB0, Filter bits
: CAN2_F3R2_FB1 ( -- x addr ) 1 bit CAN2_F3R2 ; \ CAN2_F3R2_FB1, Filter bits
: CAN2_F3R2_FB2 ( -- x addr ) 2 bit CAN2_F3R2 ; \ CAN2_F3R2_FB2, Filter bits
: CAN2_F3R2_FB3 ( -- x addr ) 3 bit CAN2_F3R2 ; \ CAN2_F3R2_FB3, Filter bits
: CAN2_F3R2_FB4 ( -- x addr ) 4 bit CAN2_F3R2 ; \ CAN2_F3R2_FB4, Filter bits
: CAN2_F3R2_FB5 ( -- x addr ) 5 bit CAN2_F3R2 ; \ CAN2_F3R2_FB5, Filter bits
: CAN2_F3R2_FB6 ( -- x addr ) 6 bit CAN2_F3R2 ; \ CAN2_F3R2_FB6, Filter bits
: CAN2_F3R2_FB7 ( -- x addr ) 7 bit CAN2_F3R2 ; \ CAN2_F3R2_FB7, Filter bits
: CAN2_F3R2_FB8 ( -- x addr ) 8 bit CAN2_F3R2 ; \ CAN2_F3R2_FB8, Filter bits
: CAN2_F3R2_FB9 ( -- x addr ) 9 bit CAN2_F3R2 ; \ CAN2_F3R2_FB9, Filter bits
: CAN2_F3R2_FB10 ( -- x addr ) 10 bit CAN2_F3R2 ; \ CAN2_F3R2_FB10, Filter bits
: CAN2_F3R2_FB11 ( -- x addr ) 11 bit CAN2_F3R2 ; \ CAN2_F3R2_FB11, Filter bits
: CAN2_F3R2_FB12 ( -- x addr ) 12 bit CAN2_F3R2 ; \ CAN2_F3R2_FB12, Filter bits
: CAN2_F3R2_FB13 ( -- x addr ) 13 bit CAN2_F3R2 ; \ CAN2_F3R2_FB13, Filter bits
: CAN2_F3R2_FB14 ( -- x addr ) 14 bit CAN2_F3R2 ; \ CAN2_F3R2_FB14, Filter bits
: CAN2_F3R2_FB15 ( -- x addr ) 15 bit CAN2_F3R2 ; \ CAN2_F3R2_FB15, Filter bits
: CAN2_F3R2_FB16 ( -- x addr ) 16 bit CAN2_F3R2 ; \ CAN2_F3R2_FB16, Filter bits
: CAN2_F3R2_FB17 ( -- x addr ) 17 bit CAN2_F3R2 ; \ CAN2_F3R2_FB17, Filter bits
: CAN2_F3R2_FB18 ( -- x addr ) 18 bit CAN2_F3R2 ; \ CAN2_F3R2_FB18, Filter bits
: CAN2_F3R2_FB19 ( -- x addr ) 19 bit CAN2_F3R2 ; \ CAN2_F3R2_FB19, Filter bits
: CAN2_F3R2_FB20 ( -- x addr ) 20 bit CAN2_F3R2 ; \ CAN2_F3R2_FB20, Filter bits
: CAN2_F3R2_FB21 ( -- x addr ) 21 bit CAN2_F3R2 ; \ CAN2_F3R2_FB21, Filter bits
: CAN2_F3R2_FB22 ( -- x addr ) 22 bit CAN2_F3R2 ; \ CAN2_F3R2_FB22, Filter bits
: CAN2_F3R2_FB23 ( -- x addr ) 23 bit CAN2_F3R2 ; \ CAN2_F3R2_FB23, Filter bits
: CAN2_F3R2_FB24 ( -- x addr ) 24 bit CAN2_F3R2 ; \ CAN2_F3R2_FB24, Filter bits
: CAN2_F3R2_FB25 ( -- x addr ) 25 bit CAN2_F3R2 ; \ CAN2_F3R2_FB25, Filter bits
: CAN2_F3R2_FB26 ( -- x addr ) 26 bit CAN2_F3R2 ; \ CAN2_F3R2_FB26, Filter bits
: CAN2_F3R2_FB27 ( -- x addr ) 27 bit CAN2_F3R2 ; \ CAN2_F3R2_FB27, Filter bits
: CAN2_F3R2_FB28 ( -- x addr ) 28 bit CAN2_F3R2 ; \ CAN2_F3R2_FB28, Filter bits
: CAN2_F3R2_FB29 ( -- x addr ) 29 bit CAN2_F3R2 ; \ CAN2_F3R2_FB29, Filter bits
: CAN2_F3R2_FB30 ( -- x addr ) 30 bit CAN2_F3R2 ; \ CAN2_F3R2_FB30, Filter bits
: CAN2_F3R2_FB31 ( -- x addr ) 31 bit CAN2_F3R2 ; \ CAN2_F3R2_FB31, Filter bits

\ CAN2_F4R1 (read-write) Reset:0x00000000
: CAN2_F4R1_FB0 ( -- x addr ) 0 bit CAN2_F4R1 ; \ CAN2_F4R1_FB0, Filter bits
: CAN2_F4R1_FB1 ( -- x addr ) 1 bit CAN2_F4R1 ; \ CAN2_F4R1_FB1, Filter bits
: CAN2_F4R1_FB2 ( -- x addr ) 2 bit CAN2_F4R1 ; \ CAN2_F4R1_FB2, Filter bits
: CAN2_F4R1_FB3 ( -- x addr ) 3 bit CAN2_F4R1 ; \ CAN2_F4R1_FB3, Filter bits
: CAN2_F4R1_FB4 ( -- x addr ) 4 bit CAN2_F4R1 ; \ CAN2_F4R1_FB4, Filter bits
: CAN2_F4R1_FB5 ( -- x addr ) 5 bit CAN2_F4R1 ; \ CAN2_F4R1_FB5, Filter bits
: CAN2_F4R1_FB6 ( -- x addr ) 6 bit CAN2_F4R1 ; \ CAN2_F4R1_FB6, Filter bits
: CAN2_F4R1_FB7 ( -- x addr ) 7 bit CAN2_F4R1 ; \ CAN2_F4R1_FB7, Filter bits
: CAN2_F4R1_FB8 ( -- x addr ) 8 bit CAN2_F4R1 ; \ CAN2_F4R1_FB8, Filter bits
: CAN2_F4R1_FB9 ( -- x addr ) 9 bit CAN2_F4R1 ; \ CAN2_F4R1_FB9, Filter bits
: CAN2_F4R1_FB10 ( -- x addr ) 10 bit CAN2_F4R1 ; \ CAN2_F4R1_FB10, Filter bits
: CAN2_F4R1_FB11 ( -- x addr ) 11 bit CAN2_F4R1 ; \ CAN2_F4R1_FB11, Filter bits
: CAN2_F4R1_FB12 ( -- x addr ) 12 bit CAN2_F4R1 ; \ CAN2_F4R1_FB12, Filter bits
: CAN2_F4R1_FB13 ( -- x addr ) 13 bit CAN2_F4R1 ; \ CAN2_F4R1_FB13, Filter bits
: CAN2_F4R1_FB14 ( -- x addr ) 14 bit CAN2_F4R1 ; \ CAN2_F4R1_FB14, Filter bits
: CAN2_F4R1_FB15 ( -- x addr ) 15 bit CAN2_F4R1 ; \ CAN2_F4R1_FB15, Filter bits
: CAN2_F4R1_FB16 ( -- x addr ) 16 bit CAN2_F4R1 ; \ CAN2_F4R1_FB16, Filter bits
: CAN2_F4R1_FB17 ( -- x addr ) 17 bit CAN2_F4R1 ; \ CAN2_F4R1_FB17, Filter bits
: CAN2_F4R1_FB18 ( -- x addr ) 18 bit CAN2_F4R1 ; \ CAN2_F4R1_FB18, Filter bits
: CAN2_F4R1_FB19 ( -- x addr ) 19 bit CAN2_F4R1 ; \ CAN2_F4R1_FB19, Filter bits
: CAN2_F4R1_FB20 ( -- x addr ) 20 bit CAN2_F4R1 ; \ CAN2_F4R1_FB20, Filter bits
: CAN2_F4R1_FB21 ( -- x addr ) 21 bit CAN2_F4R1 ; \ CAN2_F4R1_FB21, Filter bits
: CAN2_F4R1_FB22 ( -- x addr ) 22 bit CAN2_F4R1 ; \ CAN2_F4R1_FB22, Filter bits
: CAN2_F4R1_FB23 ( -- x addr ) 23 bit CAN2_F4R1 ; \ CAN2_F4R1_FB23, Filter bits
: CAN2_F4R1_FB24 ( -- x addr ) 24 bit CAN2_F4R1 ; \ CAN2_F4R1_FB24, Filter bits
: CAN2_F4R1_FB25 ( -- x addr ) 25 bit CAN2_F4R1 ; \ CAN2_F4R1_FB25, Filter bits
: CAN2_F4R1_FB26 ( -- x addr ) 26 bit CAN2_F4R1 ; \ CAN2_F4R1_FB26, Filter bits
: CAN2_F4R1_FB27 ( -- x addr ) 27 bit CAN2_F4R1 ; \ CAN2_F4R1_FB27, Filter bits
: CAN2_F4R1_FB28 ( -- x addr ) 28 bit CAN2_F4R1 ; \ CAN2_F4R1_FB28, Filter bits
: CAN2_F4R1_FB29 ( -- x addr ) 29 bit CAN2_F4R1 ; \ CAN2_F4R1_FB29, Filter bits
: CAN2_F4R1_FB30 ( -- x addr ) 30 bit CAN2_F4R1 ; \ CAN2_F4R1_FB30, Filter bits
: CAN2_F4R1_FB31 ( -- x addr ) 31 bit CAN2_F4R1 ; \ CAN2_F4R1_FB31, Filter bits

\ CAN2_F4R2 (read-write) Reset:0x00000000
: CAN2_F4R2_FB0 ( -- x addr ) 0 bit CAN2_F4R2 ; \ CAN2_F4R2_FB0, Filter bits
: CAN2_F4R2_FB1 ( -- x addr ) 1 bit CAN2_F4R2 ; \ CAN2_F4R2_FB1, Filter bits
: CAN2_F4R2_FB2 ( -- x addr ) 2 bit CAN2_F4R2 ; \ CAN2_F4R2_FB2, Filter bits
: CAN2_F4R2_FB3 ( -- x addr ) 3 bit CAN2_F4R2 ; \ CAN2_F4R2_FB3, Filter bits
: CAN2_F4R2_FB4 ( -- x addr ) 4 bit CAN2_F4R2 ; \ CAN2_F4R2_FB4, Filter bits
: CAN2_F4R2_FB5 ( -- x addr ) 5 bit CAN2_F4R2 ; \ CAN2_F4R2_FB5, Filter bits
: CAN2_F4R2_FB6 ( -- x addr ) 6 bit CAN2_F4R2 ; \ CAN2_F4R2_FB6, Filter bits
: CAN2_F4R2_FB7 ( -- x addr ) 7 bit CAN2_F4R2 ; \ CAN2_F4R2_FB7, Filter bits
: CAN2_F4R2_FB8 ( -- x addr ) 8 bit CAN2_F4R2 ; \ CAN2_F4R2_FB8, Filter bits
: CAN2_F4R2_FB9 ( -- x addr ) 9 bit CAN2_F4R2 ; \ CAN2_F4R2_FB9, Filter bits
: CAN2_F4R2_FB10 ( -- x addr ) 10 bit CAN2_F4R2 ; \ CAN2_F4R2_FB10, Filter bits
: CAN2_F4R2_FB11 ( -- x addr ) 11 bit CAN2_F4R2 ; \ CAN2_F4R2_FB11, Filter bits
: CAN2_F4R2_FB12 ( -- x addr ) 12 bit CAN2_F4R2 ; \ CAN2_F4R2_FB12, Filter bits
: CAN2_F4R2_FB13 ( -- x addr ) 13 bit CAN2_F4R2 ; \ CAN2_F4R2_FB13, Filter bits
: CAN2_F4R2_FB14 ( -- x addr ) 14 bit CAN2_F4R2 ; \ CAN2_F4R2_FB14, Filter bits
: CAN2_F4R2_FB15 ( -- x addr ) 15 bit CAN2_F4R2 ; \ CAN2_F4R2_FB15, Filter bits
: CAN2_F4R2_FB16 ( -- x addr ) 16 bit CAN2_F4R2 ; \ CAN2_F4R2_FB16, Filter bits
: CAN2_F4R2_FB17 ( -- x addr ) 17 bit CAN2_F4R2 ; \ CAN2_F4R2_FB17, Filter bits
: CAN2_F4R2_FB18 ( -- x addr ) 18 bit CAN2_F4R2 ; \ CAN2_F4R2_FB18, Filter bits
: CAN2_F4R2_FB19 ( -- x addr ) 19 bit CAN2_F4R2 ; \ CAN2_F4R2_FB19, Filter bits
: CAN2_F4R2_FB20 ( -- x addr ) 20 bit CAN2_F4R2 ; \ CAN2_F4R2_FB20, Filter bits
: CAN2_F4R2_FB21 ( -- x addr ) 21 bit CAN2_F4R2 ; \ CAN2_F4R2_FB21, Filter bits
: CAN2_F4R2_FB22 ( -- x addr ) 22 bit CAN2_F4R2 ; \ CAN2_F4R2_FB22, Filter bits
: CAN2_F4R2_FB23 ( -- x addr ) 23 bit CAN2_F4R2 ; \ CAN2_F4R2_FB23, Filter bits
: CAN2_F4R2_FB24 ( -- x addr ) 24 bit CAN2_F4R2 ; \ CAN2_F4R2_FB24, Filter bits
: CAN2_F4R2_FB25 ( -- x addr ) 25 bit CAN2_F4R2 ; \ CAN2_F4R2_FB25, Filter bits
: CAN2_F4R2_FB26 ( -- x addr ) 26 bit CAN2_F4R2 ; \ CAN2_F4R2_FB26, Filter bits
: CAN2_F4R2_FB27 ( -- x addr ) 27 bit CAN2_F4R2 ; \ CAN2_F4R2_FB27, Filter bits
: CAN2_F4R2_FB28 ( -- x addr ) 28 bit CAN2_F4R2 ; \ CAN2_F4R2_FB28, Filter bits
: CAN2_F4R2_FB29 ( -- x addr ) 29 bit CAN2_F4R2 ; \ CAN2_F4R2_FB29, Filter bits
: CAN2_F4R2_FB30 ( -- x addr ) 30 bit CAN2_F4R2 ; \ CAN2_F4R2_FB30, Filter bits
: CAN2_F4R2_FB31 ( -- x addr ) 31 bit CAN2_F4R2 ; \ CAN2_F4R2_FB31, Filter bits

\ CAN2_F5R1 (read-write) Reset:0x00000000
: CAN2_F5R1_FB0 ( -- x addr ) 0 bit CAN2_F5R1 ; \ CAN2_F5R1_FB0, Filter bits
: CAN2_F5R1_FB1 ( -- x addr ) 1 bit CAN2_F5R1 ; \ CAN2_F5R1_FB1, Filter bits
: CAN2_F5R1_FB2 ( -- x addr ) 2 bit CAN2_F5R1 ; \ CAN2_F5R1_FB2, Filter bits
: CAN2_F5R1_FB3 ( -- x addr ) 3 bit CAN2_F5R1 ; \ CAN2_F5R1_FB3, Filter bits
: CAN2_F5R1_FB4 ( -- x addr ) 4 bit CAN2_F5R1 ; \ CAN2_F5R1_FB4, Filter bits
: CAN2_F5R1_FB5 ( -- x addr ) 5 bit CAN2_F5R1 ; \ CAN2_F5R1_FB5, Filter bits
: CAN2_F5R1_FB6 ( -- x addr ) 6 bit CAN2_F5R1 ; \ CAN2_F5R1_FB6, Filter bits
: CAN2_F5R1_FB7 ( -- x addr ) 7 bit CAN2_F5R1 ; \ CAN2_F5R1_FB7, Filter bits
: CAN2_F5R1_FB8 ( -- x addr ) 8 bit CAN2_F5R1 ; \ CAN2_F5R1_FB8, Filter bits
: CAN2_F5R1_FB9 ( -- x addr ) 9 bit CAN2_F5R1 ; \ CAN2_F5R1_FB9, Filter bits
: CAN2_F5R1_FB10 ( -- x addr ) 10 bit CAN2_F5R1 ; \ CAN2_F5R1_FB10, Filter bits
: CAN2_F5R1_FB11 ( -- x addr ) 11 bit CAN2_F5R1 ; \ CAN2_F5R1_FB11, Filter bits
: CAN2_F5R1_FB12 ( -- x addr ) 12 bit CAN2_F5R1 ; \ CAN2_F5R1_FB12, Filter bits
: CAN2_F5R1_FB13 ( -- x addr ) 13 bit CAN2_F5R1 ; \ CAN2_F5R1_FB13, Filter bits
: CAN2_F5R1_FB14 ( -- x addr ) 14 bit CAN2_F5R1 ; \ CAN2_F5R1_FB14, Filter bits
: CAN2_F5R1_FB15 ( -- x addr ) 15 bit CAN2_F5R1 ; \ CAN2_F5R1_FB15, Filter bits
: CAN2_F5R1_FB16 ( -- x addr ) 16 bit CAN2_F5R1 ; \ CAN2_F5R1_FB16, Filter bits
: CAN2_F5R1_FB17 ( -- x addr ) 17 bit CAN2_F5R1 ; \ CAN2_F5R1_FB17, Filter bits
: CAN2_F5R1_FB18 ( -- x addr ) 18 bit CAN2_F5R1 ; \ CAN2_F5R1_FB18, Filter bits
: CAN2_F5R1_FB19 ( -- x addr ) 19 bit CAN2_F5R1 ; \ CAN2_F5R1_FB19, Filter bits
: CAN2_F5R1_FB20 ( -- x addr ) 20 bit CAN2_F5R1 ; \ CAN2_F5R1_FB20, Filter bits
: CAN2_F5R1_FB21 ( -- x addr ) 21 bit CAN2_F5R1 ; \ CAN2_F5R1_FB21, Filter bits
: CAN2_F5R1_FB22 ( -- x addr ) 22 bit CAN2_F5R1 ; \ CAN2_F5R1_FB22, Filter bits
: CAN2_F5R1_FB23 ( -- x addr ) 23 bit CAN2_F5R1 ; \ CAN2_F5R1_FB23, Filter bits
: CAN2_F5R1_FB24 ( -- x addr ) 24 bit CAN2_F5R1 ; \ CAN2_F5R1_FB24, Filter bits
: CAN2_F5R1_FB25 ( -- x addr ) 25 bit CAN2_F5R1 ; \ CAN2_F5R1_FB25, Filter bits
: CAN2_F5R1_FB26 ( -- x addr ) 26 bit CAN2_F5R1 ; \ CAN2_F5R1_FB26, Filter bits
: CAN2_F5R1_FB27 ( -- x addr ) 27 bit CAN2_F5R1 ; \ CAN2_F5R1_FB27, Filter bits
: CAN2_F5R1_FB28 ( -- x addr ) 28 bit CAN2_F5R1 ; \ CAN2_F5R1_FB28, Filter bits
: CAN2_F5R1_FB29 ( -- x addr ) 29 bit CAN2_F5R1 ; \ CAN2_F5R1_FB29, Filter bits
: CAN2_F5R1_FB30 ( -- x addr ) 30 bit CAN2_F5R1 ; \ CAN2_F5R1_FB30, Filter bits
: CAN2_F5R1_FB31 ( -- x addr ) 31 bit CAN2_F5R1 ; \ CAN2_F5R1_FB31, Filter bits

\ CAN2_F5R2 (read-write) Reset:0x00000000
: CAN2_F5R2_FB0 ( -- x addr ) 0 bit CAN2_F5R2 ; \ CAN2_F5R2_FB0, Filter bits
: CAN2_F5R2_FB1 ( -- x addr ) 1 bit CAN2_F5R2 ; \ CAN2_F5R2_FB1, Filter bits
: CAN2_F5R2_FB2 ( -- x addr ) 2 bit CAN2_F5R2 ; \ CAN2_F5R2_FB2, Filter bits
: CAN2_F5R2_FB3 ( -- x addr ) 3 bit CAN2_F5R2 ; \ CAN2_F5R2_FB3, Filter bits
: CAN2_F5R2_FB4 ( -- x addr ) 4 bit CAN2_F5R2 ; \ CAN2_F5R2_FB4, Filter bits
: CAN2_F5R2_FB5 ( -- x addr ) 5 bit CAN2_F5R2 ; \ CAN2_F5R2_FB5, Filter bits
: CAN2_F5R2_FB6 ( -- x addr ) 6 bit CAN2_F5R2 ; \ CAN2_F5R2_FB6, Filter bits
: CAN2_F5R2_FB7 ( -- x addr ) 7 bit CAN2_F5R2 ; \ CAN2_F5R2_FB7, Filter bits
: CAN2_F5R2_FB8 ( -- x addr ) 8 bit CAN2_F5R2 ; \ CAN2_F5R2_FB8, Filter bits
: CAN2_F5R2_FB9 ( -- x addr ) 9 bit CAN2_F5R2 ; \ CAN2_F5R2_FB9, Filter bits
: CAN2_F5R2_FB10 ( -- x addr ) 10 bit CAN2_F5R2 ; \ CAN2_F5R2_FB10, Filter bits
: CAN2_F5R2_FB11 ( -- x addr ) 11 bit CAN2_F5R2 ; \ CAN2_F5R2_FB11, Filter bits
: CAN2_F5R2_FB12 ( -- x addr ) 12 bit CAN2_F5R2 ; \ CAN2_F5R2_FB12, Filter bits
: CAN2_F5R2_FB13 ( -- x addr ) 13 bit CAN2_F5R2 ; \ CAN2_F5R2_FB13, Filter bits
: CAN2_F5R2_FB14 ( -- x addr ) 14 bit CAN2_F5R2 ; \ CAN2_F5R2_FB14, Filter bits
: CAN2_F5R2_FB15 ( -- x addr ) 15 bit CAN2_F5R2 ; \ CAN2_F5R2_FB15, Filter bits
: CAN2_F5R2_FB16 ( -- x addr ) 16 bit CAN2_F5R2 ; \ CAN2_F5R2_FB16, Filter bits
: CAN2_F5R2_FB17 ( -- x addr ) 17 bit CAN2_F5R2 ; \ CAN2_F5R2_FB17, Filter bits
: CAN2_F5R2_FB18 ( -- x addr ) 18 bit CAN2_F5R2 ; \ CAN2_F5R2_FB18, Filter bits
: CAN2_F5R2_FB19 ( -- x addr ) 19 bit CAN2_F5R2 ; \ CAN2_F5R2_FB19, Filter bits
: CAN2_F5R2_FB20 ( -- x addr ) 20 bit CAN2_F5R2 ; \ CAN2_F5R2_FB20, Filter bits
: CAN2_F5R2_FB21 ( -- x addr ) 21 bit CAN2_F5R2 ; \ CAN2_F5R2_FB21, Filter bits
: CAN2_F5R2_FB22 ( -- x addr ) 22 bit CAN2_F5R2 ; \ CAN2_F5R2_FB22, Filter bits
: CAN2_F5R2_FB23 ( -- x addr ) 23 bit CAN2_F5R2 ; \ CAN2_F5R2_FB23, Filter bits
: CAN2_F5R2_FB24 ( -- x addr ) 24 bit CAN2_F5R2 ; \ CAN2_F5R2_FB24, Filter bits
: CAN2_F5R2_FB25 ( -- x addr ) 25 bit CAN2_F5R2 ; \ CAN2_F5R2_FB25, Filter bits
: CAN2_F5R2_FB26 ( -- x addr ) 26 bit CAN2_F5R2 ; \ CAN2_F5R2_FB26, Filter bits
: CAN2_F5R2_FB27 ( -- x addr ) 27 bit CAN2_F5R2 ; \ CAN2_F5R2_FB27, Filter bits
: CAN2_F5R2_FB28 ( -- x addr ) 28 bit CAN2_F5R2 ; \ CAN2_F5R2_FB28, Filter bits
: CAN2_F5R2_FB29 ( -- x addr ) 29 bit CAN2_F5R2 ; \ CAN2_F5R2_FB29, Filter bits
: CAN2_F5R2_FB30 ( -- x addr ) 30 bit CAN2_F5R2 ; \ CAN2_F5R2_FB30, Filter bits
: CAN2_F5R2_FB31 ( -- x addr ) 31 bit CAN2_F5R2 ; \ CAN2_F5R2_FB31, Filter bits

\ CAN2_F6R1 (read-write) Reset:0x00000000
: CAN2_F6R1_FB0 ( -- x addr ) 0 bit CAN2_F6R1 ; \ CAN2_F6R1_FB0, Filter bits
: CAN2_F6R1_FB1 ( -- x addr ) 1 bit CAN2_F6R1 ; \ CAN2_F6R1_FB1, Filter bits
: CAN2_F6R1_FB2 ( -- x addr ) 2 bit CAN2_F6R1 ; \ CAN2_F6R1_FB2, Filter bits
: CAN2_F6R1_FB3 ( -- x addr ) 3 bit CAN2_F6R1 ; \ CAN2_F6R1_FB3, Filter bits
: CAN2_F6R1_FB4 ( -- x addr ) 4 bit CAN2_F6R1 ; \ CAN2_F6R1_FB4, Filter bits
: CAN2_F6R1_FB5 ( -- x addr ) 5 bit CAN2_F6R1 ; \ CAN2_F6R1_FB5, Filter bits
: CAN2_F6R1_FB6 ( -- x addr ) 6 bit CAN2_F6R1 ; \ CAN2_F6R1_FB6, Filter bits
: CAN2_F6R1_FB7 ( -- x addr ) 7 bit CAN2_F6R1 ; \ CAN2_F6R1_FB7, Filter bits
: CAN2_F6R1_FB8 ( -- x addr ) 8 bit CAN2_F6R1 ; \ CAN2_F6R1_FB8, Filter bits
: CAN2_F6R1_FB9 ( -- x addr ) 9 bit CAN2_F6R1 ; \ CAN2_F6R1_FB9, Filter bits
: CAN2_F6R1_FB10 ( -- x addr ) 10 bit CAN2_F6R1 ; \ CAN2_F6R1_FB10, Filter bits
: CAN2_F6R1_FB11 ( -- x addr ) 11 bit CAN2_F6R1 ; \ CAN2_F6R1_FB11, Filter bits
: CAN2_F6R1_FB12 ( -- x addr ) 12 bit CAN2_F6R1 ; \ CAN2_F6R1_FB12, Filter bits
: CAN2_F6R1_FB13 ( -- x addr ) 13 bit CAN2_F6R1 ; \ CAN2_F6R1_FB13, Filter bits
: CAN2_F6R1_FB14 ( -- x addr ) 14 bit CAN2_F6R1 ; \ CAN2_F6R1_FB14, Filter bits
: CAN2_F6R1_FB15 ( -- x addr ) 15 bit CAN2_F6R1 ; \ CAN2_F6R1_FB15, Filter bits
: CAN2_F6R1_FB16 ( -- x addr ) 16 bit CAN2_F6R1 ; \ CAN2_F6R1_FB16, Filter bits
: CAN2_F6R1_FB17 ( -- x addr ) 17 bit CAN2_F6R1 ; \ CAN2_F6R1_FB17, Filter bits
: CAN2_F6R1_FB18 ( -- x addr ) 18 bit CAN2_F6R1 ; \ CAN2_F6R1_FB18, Filter bits
: CAN2_F6R1_FB19 ( -- x addr ) 19 bit CAN2_F6R1 ; \ CAN2_F6R1_FB19, Filter bits
: CAN2_F6R1_FB20 ( -- x addr ) 20 bit CAN2_F6R1 ; \ CAN2_F6R1_FB20, Filter bits
: CAN2_F6R1_FB21 ( -- x addr ) 21 bit CAN2_F6R1 ; \ CAN2_F6R1_FB21, Filter bits
: CAN2_F6R1_FB22 ( -- x addr ) 22 bit CAN2_F6R1 ; \ CAN2_F6R1_FB22, Filter bits
: CAN2_F6R1_FB23 ( -- x addr ) 23 bit CAN2_F6R1 ; \ CAN2_F6R1_FB23, Filter bits
: CAN2_F6R1_FB24 ( -- x addr ) 24 bit CAN2_F6R1 ; \ CAN2_F6R1_FB24, Filter bits
: CAN2_F6R1_FB25 ( -- x addr ) 25 bit CAN2_F6R1 ; \ CAN2_F6R1_FB25, Filter bits
: CAN2_F6R1_FB26 ( -- x addr ) 26 bit CAN2_F6R1 ; \ CAN2_F6R1_FB26, Filter bits
: CAN2_F6R1_FB27 ( -- x addr ) 27 bit CAN2_F6R1 ; \ CAN2_F6R1_FB27, Filter bits
: CAN2_F6R1_FB28 ( -- x addr ) 28 bit CAN2_F6R1 ; \ CAN2_F6R1_FB28, Filter bits
: CAN2_F6R1_FB29 ( -- x addr ) 29 bit CAN2_F6R1 ; \ CAN2_F6R1_FB29, Filter bits
: CAN2_F6R1_FB30 ( -- x addr ) 30 bit CAN2_F6R1 ; \ CAN2_F6R1_FB30, Filter bits
: CAN2_F6R1_FB31 ( -- x addr ) 31 bit CAN2_F6R1 ; \ CAN2_F6R1_FB31, Filter bits

\ CAN2_F6R2 (read-write) Reset:0x00000000
: CAN2_F6R2_FB0 ( -- x addr ) 0 bit CAN2_F6R2 ; \ CAN2_F6R2_FB0, Filter bits
: CAN2_F6R2_FB1 ( -- x addr ) 1 bit CAN2_F6R2 ; \ CAN2_F6R2_FB1, Filter bits
: CAN2_F6R2_FB2 ( -- x addr ) 2 bit CAN2_F6R2 ; \ CAN2_F6R2_FB2, Filter bits
: CAN2_F6R2_FB3 ( -- x addr ) 3 bit CAN2_F6R2 ; \ CAN2_F6R2_FB3, Filter bits
: CAN2_F6R2_FB4 ( -- x addr ) 4 bit CAN2_F6R2 ; \ CAN2_F6R2_FB4, Filter bits
: CAN2_F6R2_FB5 ( -- x addr ) 5 bit CAN2_F6R2 ; \ CAN2_F6R2_FB5, Filter bits
: CAN2_F6R2_FB6 ( -- x addr ) 6 bit CAN2_F6R2 ; \ CAN2_F6R2_FB6, Filter bits
: CAN2_F6R2_FB7 ( -- x addr ) 7 bit CAN2_F6R2 ; \ CAN2_F6R2_FB7, Filter bits
: CAN2_F6R2_FB8 ( -- x addr ) 8 bit CAN2_F6R2 ; \ CAN2_F6R2_FB8, Filter bits
: CAN2_F6R2_FB9 ( -- x addr ) 9 bit CAN2_F6R2 ; \ CAN2_F6R2_FB9, Filter bits
: CAN2_F6R2_FB10 ( -- x addr ) 10 bit CAN2_F6R2 ; \ CAN2_F6R2_FB10, Filter bits
: CAN2_F6R2_FB11 ( -- x addr ) 11 bit CAN2_F6R2 ; \ CAN2_F6R2_FB11, Filter bits
: CAN2_F6R2_FB12 ( -- x addr ) 12 bit CAN2_F6R2 ; \ CAN2_F6R2_FB12, Filter bits
: CAN2_F6R2_FB13 ( -- x addr ) 13 bit CAN2_F6R2 ; \ CAN2_F6R2_FB13, Filter bits
: CAN2_F6R2_FB14 ( -- x addr ) 14 bit CAN2_F6R2 ; \ CAN2_F6R2_FB14, Filter bits
: CAN2_F6R2_FB15 ( -- x addr ) 15 bit CAN2_F6R2 ; \ CAN2_F6R2_FB15, Filter bits
: CAN2_F6R2_FB16 ( -- x addr ) 16 bit CAN2_F6R2 ; \ CAN2_F6R2_FB16, Filter bits
: CAN2_F6R2_FB17 ( -- x addr ) 17 bit CAN2_F6R2 ; \ CAN2_F6R2_FB17, Filter bits
: CAN2_F6R2_FB18 ( -- x addr ) 18 bit CAN2_F6R2 ; \ CAN2_F6R2_FB18, Filter bits
: CAN2_F6R2_FB19 ( -- x addr ) 19 bit CAN2_F6R2 ; \ CAN2_F6R2_FB19, Filter bits
: CAN2_F6R2_FB20 ( -- x addr ) 20 bit CAN2_F6R2 ; \ CAN2_F6R2_FB20, Filter bits
: CAN2_F6R2_FB21 ( -- x addr ) 21 bit CAN2_F6R2 ; \ CAN2_F6R2_FB21, Filter bits
: CAN2_F6R2_FB22 ( -- x addr ) 22 bit CAN2_F6R2 ; \ CAN2_F6R2_FB22, Filter bits
: CAN2_F6R2_FB23 ( -- x addr ) 23 bit CAN2_F6R2 ; \ CAN2_F6R2_FB23, Filter bits
: CAN2_F6R2_FB24 ( -- x addr ) 24 bit CAN2_F6R2 ; \ CAN2_F6R2_FB24, Filter bits
: CAN2_F6R2_FB25 ( -- x addr ) 25 bit CAN2_F6R2 ; \ CAN2_F6R2_FB25, Filter bits
: CAN2_F6R2_FB26 ( -- x addr ) 26 bit CAN2_F6R2 ; \ CAN2_F6R2_FB26, Filter bits
: CAN2_F6R2_FB27 ( -- x addr ) 27 bit CAN2_F6R2 ; \ CAN2_F6R2_FB27, Filter bits
: CAN2_F6R2_FB28 ( -- x addr ) 28 bit CAN2_F6R2 ; \ CAN2_F6R2_FB28, Filter bits
: CAN2_F6R2_FB29 ( -- x addr ) 29 bit CAN2_F6R2 ; \ CAN2_F6R2_FB29, Filter bits
: CAN2_F6R2_FB30 ( -- x addr ) 30 bit CAN2_F6R2 ; \ CAN2_F6R2_FB30, Filter bits
: CAN2_F6R2_FB31 ( -- x addr ) 31 bit CAN2_F6R2 ; \ CAN2_F6R2_FB31, Filter bits

\ CAN2_F7R1 (read-write) Reset:0x00000000
: CAN2_F7R1_FB0 ( -- x addr ) 0 bit CAN2_F7R1 ; \ CAN2_F7R1_FB0, Filter bits
: CAN2_F7R1_FB1 ( -- x addr ) 1 bit CAN2_F7R1 ; \ CAN2_F7R1_FB1, Filter bits
: CAN2_F7R1_FB2 ( -- x addr ) 2 bit CAN2_F7R1 ; \ CAN2_F7R1_FB2, Filter bits
: CAN2_F7R1_FB3 ( -- x addr ) 3 bit CAN2_F7R1 ; \ CAN2_F7R1_FB3, Filter bits
: CAN2_F7R1_FB4 ( -- x addr ) 4 bit CAN2_F7R1 ; \ CAN2_F7R1_FB4, Filter bits
: CAN2_F7R1_FB5 ( -- x addr ) 5 bit CAN2_F7R1 ; \ CAN2_F7R1_FB5, Filter bits
: CAN2_F7R1_FB6 ( -- x addr ) 6 bit CAN2_F7R1 ; \ CAN2_F7R1_FB6, Filter bits
: CAN2_F7R1_FB7 ( -- x addr ) 7 bit CAN2_F7R1 ; \ CAN2_F7R1_FB7, Filter bits
: CAN2_F7R1_FB8 ( -- x addr ) 8 bit CAN2_F7R1 ; \ CAN2_F7R1_FB8, Filter bits
: CAN2_F7R1_FB9 ( -- x addr ) 9 bit CAN2_F7R1 ; \ CAN2_F7R1_FB9, Filter bits
: CAN2_F7R1_FB10 ( -- x addr ) 10 bit CAN2_F7R1 ; \ CAN2_F7R1_FB10, Filter bits
: CAN2_F7R1_FB11 ( -- x addr ) 11 bit CAN2_F7R1 ; \ CAN2_F7R1_FB11, Filter bits
: CAN2_F7R1_FB12 ( -- x addr ) 12 bit CAN2_F7R1 ; \ CAN2_F7R1_FB12, Filter bits
: CAN2_F7R1_FB13 ( -- x addr ) 13 bit CAN2_F7R1 ; \ CAN2_F7R1_FB13, Filter bits
: CAN2_F7R1_FB14 ( -- x addr ) 14 bit CAN2_F7R1 ; \ CAN2_F7R1_FB14, Filter bits
: CAN2_F7R1_FB15 ( -- x addr ) 15 bit CAN2_F7R1 ; \ CAN2_F7R1_FB15, Filter bits
: CAN2_F7R1_FB16 ( -- x addr ) 16 bit CAN2_F7R1 ; \ CAN2_F7R1_FB16, Filter bits
: CAN2_F7R1_FB17 ( -- x addr ) 17 bit CAN2_F7R1 ; \ CAN2_F7R1_FB17, Filter bits
: CAN2_F7R1_FB18 ( -- x addr ) 18 bit CAN2_F7R1 ; \ CAN2_F7R1_FB18, Filter bits
: CAN2_F7R1_FB19 ( -- x addr ) 19 bit CAN2_F7R1 ; \ CAN2_F7R1_FB19, Filter bits
: CAN2_F7R1_FB20 ( -- x addr ) 20 bit CAN2_F7R1 ; \ CAN2_F7R1_FB20, Filter bits
: CAN2_F7R1_FB21 ( -- x addr ) 21 bit CAN2_F7R1 ; \ CAN2_F7R1_FB21, Filter bits
: CAN2_F7R1_FB22 ( -- x addr ) 22 bit CAN2_F7R1 ; \ CAN2_F7R1_FB22, Filter bits
: CAN2_F7R1_FB23 ( -- x addr ) 23 bit CAN2_F7R1 ; \ CAN2_F7R1_FB23, Filter bits
: CAN2_F7R1_FB24 ( -- x addr ) 24 bit CAN2_F7R1 ; \ CAN2_F7R1_FB24, Filter bits
: CAN2_F7R1_FB25 ( -- x addr ) 25 bit CAN2_F7R1 ; \ CAN2_F7R1_FB25, Filter bits
: CAN2_F7R1_FB26 ( -- x addr ) 26 bit CAN2_F7R1 ; \ CAN2_F7R1_FB26, Filter bits
: CAN2_F7R1_FB27 ( -- x addr ) 27 bit CAN2_F7R1 ; \ CAN2_F7R1_FB27, Filter bits
: CAN2_F7R1_FB28 ( -- x addr ) 28 bit CAN2_F7R1 ; \ CAN2_F7R1_FB28, Filter bits
: CAN2_F7R1_FB29 ( -- x addr ) 29 bit CAN2_F7R1 ; \ CAN2_F7R1_FB29, Filter bits
: CAN2_F7R1_FB30 ( -- x addr ) 30 bit CAN2_F7R1 ; \ CAN2_F7R1_FB30, Filter bits
: CAN2_F7R1_FB31 ( -- x addr ) 31 bit CAN2_F7R1 ; \ CAN2_F7R1_FB31, Filter bits

\ CAN2_F7R2 (read-write) Reset:0x00000000
: CAN2_F7R2_FB0 ( -- x addr ) 0 bit CAN2_F7R2 ; \ CAN2_F7R2_FB0, Filter bits
: CAN2_F7R2_FB1 ( -- x addr ) 1 bit CAN2_F7R2 ; \ CAN2_F7R2_FB1, Filter bits
: CAN2_F7R2_FB2 ( -- x addr ) 2 bit CAN2_F7R2 ; \ CAN2_F7R2_FB2, Filter bits
: CAN2_F7R2_FB3 ( -- x addr ) 3 bit CAN2_F7R2 ; \ CAN2_F7R2_FB3, Filter bits
: CAN2_F7R2_FB4 ( -- x addr ) 4 bit CAN2_F7R2 ; \ CAN2_F7R2_FB4, Filter bits
: CAN2_F7R2_FB5 ( -- x addr ) 5 bit CAN2_F7R2 ; \ CAN2_F7R2_FB5, Filter bits
: CAN2_F7R2_FB6 ( -- x addr ) 6 bit CAN2_F7R2 ; \ CAN2_F7R2_FB6, Filter bits
: CAN2_F7R2_FB7 ( -- x addr ) 7 bit CAN2_F7R2 ; \ CAN2_F7R2_FB7, Filter bits
: CAN2_F7R2_FB8 ( -- x addr ) 8 bit CAN2_F7R2 ; \ CAN2_F7R2_FB8, Filter bits
: CAN2_F7R2_FB9 ( -- x addr ) 9 bit CAN2_F7R2 ; \ CAN2_F7R2_FB9, Filter bits
: CAN2_F7R2_FB10 ( -- x addr ) 10 bit CAN2_F7R2 ; \ CAN2_F7R2_FB10, Filter bits
: CAN2_F7R2_FB11 ( -- x addr ) 11 bit CAN2_F7R2 ; \ CAN2_F7R2_FB11, Filter bits
: CAN2_F7R2_FB12 ( -- x addr ) 12 bit CAN2_F7R2 ; \ CAN2_F7R2_FB12, Filter bits
: CAN2_F7R2_FB13 ( -- x addr ) 13 bit CAN2_F7R2 ; \ CAN2_F7R2_FB13, Filter bits
: CAN2_F7R2_FB14 ( -- x addr ) 14 bit CAN2_F7R2 ; \ CAN2_F7R2_FB14, Filter bits
: CAN2_F7R2_FB15 ( -- x addr ) 15 bit CAN2_F7R2 ; \ CAN2_F7R2_FB15, Filter bits
: CAN2_F7R2_FB16 ( -- x addr ) 16 bit CAN2_F7R2 ; \ CAN2_F7R2_FB16, Filter bits
: CAN2_F7R2_FB17 ( -- x addr ) 17 bit CAN2_F7R2 ; \ CAN2_F7R2_FB17, Filter bits
: CAN2_F7R2_FB18 ( -- x addr ) 18 bit CAN2_F7R2 ; \ CAN2_F7R2_FB18, Filter bits
: CAN2_F7R2_FB19 ( -- x addr ) 19 bit CAN2_F7R2 ; \ CAN2_F7R2_FB19, Filter bits
: CAN2_F7R2_FB20 ( -- x addr ) 20 bit CAN2_F7R2 ; \ CAN2_F7R2_FB20, Filter bits
: CAN2_F7R2_FB21 ( -- x addr ) 21 bit CAN2_F7R2 ; \ CAN2_F7R2_FB21, Filter bits
: CAN2_F7R2_FB22 ( -- x addr ) 22 bit CAN2_F7R2 ; \ CAN2_F7R2_FB22, Filter bits
: CAN2_F7R2_FB23 ( -- x addr ) 23 bit CAN2_F7R2 ; \ CAN2_F7R2_FB23, Filter bits
: CAN2_F7R2_FB24 ( -- x addr ) 24 bit CAN2_F7R2 ; \ CAN2_F7R2_FB24, Filter bits
: CAN2_F7R2_FB25 ( -- x addr ) 25 bit CAN2_F7R2 ; \ CAN2_F7R2_FB25, Filter bits
: CAN2_F7R2_FB26 ( -- x addr ) 26 bit CAN2_F7R2 ; \ CAN2_F7R2_FB26, Filter bits
: CAN2_F7R2_FB27 ( -- x addr ) 27 bit CAN2_F7R2 ; \ CAN2_F7R2_FB27, Filter bits
: CAN2_F7R2_FB28 ( -- x addr ) 28 bit CAN2_F7R2 ; \ CAN2_F7R2_FB28, Filter bits
: CAN2_F7R2_FB29 ( -- x addr ) 29 bit CAN2_F7R2 ; \ CAN2_F7R2_FB29, Filter bits
: CAN2_F7R2_FB30 ( -- x addr ) 30 bit CAN2_F7R2 ; \ CAN2_F7R2_FB30, Filter bits
: CAN2_F7R2_FB31 ( -- x addr ) 31 bit CAN2_F7R2 ; \ CAN2_F7R2_FB31, Filter bits

\ CAN2_F8R1 (read-write) Reset:0x00000000
: CAN2_F8R1_FB0 ( -- x addr ) 0 bit CAN2_F8R1 ; \ CAN2_F8R1_FB0, Filter bits
: CAN2_F8R1_FB1 ( -- x addr ) 1 bit CAN2_F8R1 ; \ CAN2_F8R1_FB1, Filter bits
: CAN2_F8R1_FB2 ( -- x addr ) 2 bit CAN2_F8R1 ; \ CAN2_F8R1_FB2, Filter bits
: CAN2_F8R1_FB3 ( -- x addr ) 3 bit CAN2_F8R1 ; \ CAN2_F8R1_FB3, Filter bits
: CAN2_F8R1_FB4 ( -- x addr ) 4 bit CAN2_F8R1 ; \ CAN2_F8R1_FB4, Filter bits
: CAN2_F8R1_FB5 ( -- x addr ) 5 bit CAN2_F8R1 ; \ CAN2_F8R1_FB5, Filter bits
: CAN2_F8R1_FB6 ( -- x addr ) 6 bit CAN2_F8R1 ; \ CAN2_F8R1_FB6, Filter bits
: CAN2_F8R1_FB7 ( -- x addr ) 7 bit CAN2_F8R1 ; \ CAN2_F8R1_FB7, Filter bits
: CAN2_F8R1_FB8 ( -- x addr ) 8 bit CAN2_F8R1 ; \ CAN2_F8R1_FB8, Filter bits
: CAN2_F8R1_FB9 ( -- x addr ) 9 bit CAN2_F8R1 ; \ CAN2_F8R1_FB9, Filter bits
: CAN2_F8R1_FB10 ( -- x addr ) 10 bit CAN2_F8R1 ; \ CAN2_F8R1_FB10, Filter bits
: CAN2_F8R1_FB11 ( -- x addr ) 11 bit CAN2_F8R1 ; \ CAN2_F8R1_FB11, Filter bits
: CAN2_F8R1_FB12 ( -- x addr ) 12 bit CAN2_F8R1 ; \ CAN2_F8R1_FB12, Filter bits
: CAN2_F8R1_FB13 ( -- x addr ) 13 bit CAN2_F8R1 ; \ CAN2_F8R1_FB13, Filter bits
: CAN2_F8R1_FB14 ( -- x addr ) 14 bit CAN2_F8R1 ; \ CAN2_F8R1_FB14, Filter bits
: CAN2_F8R1_FB15 ( -- x addr ) 15 bit CAN2_F8R1 ; \ CAN2_F8R1_FB15, Filter bits
: CAN2_F8R1_FB16 ( -- x addr ) 16 bit CAN2_F8R1 ; \ CAN2_F8R1_FB16, Filter bits
: CAN2_F8R1_FB17 ( -- x addr ) 17 bit CAN2_F8R1 ; \ CAN2_F8R1_FB17, Filter bits
: CAN2_F8R1_FB18 ( -- x addr ) 18 bit CAN2_F8R1 ; \ CAN2_F8R1_FB18, Filter bits
: CAN2_F8R1_FB19 ( -- x addr ) 19 bit CAN2_F8R1 ; \ CAN2_F8R1_FB19, Filter bits
: CAN2_F8R1_FB20 ( -- x addr ) 20 bit CAN2_F8R1 ; \ CAN2_F8R1_FB20, Filter bits
: CAN2_F8R1_FB21 ( -- x addr ) 21 bit CAN2_F8R1 ; \ CAN2_F8R1_FB21, Filter bits
: CAN2_F8R1_FB22 ( -- x addr ) 22 bit CAN2_F8R1 ; \ CAN2_F8R1_FB22, Filter bits
: CAN2_F8R1_FB23 ( -- x addr ) 23 bit CAN2_F8R1 ; \ CAN2_F8R1_FB23, Filter bits
: CAN2_F8R1_FB24 ( -- x addr ) 24 bit CAN2_F8R1 ; \ CAN2_F8R1_FB24, Filter bits
: CAN2_F8R1_FB25 ( -- x addr ) 25 bit CAN2_F8R1 ; \ CAN2_F8R1_FB25, Filter bits
: CAN2_F8R1_FB26 ( -- x addr ) 26 bit CAN2_F8R1 ; \ CAN2_F8R1_FB26, Filter bits
: CAN2_F8R1_FB27 ( -- x addr ) 27 bit CAN2_F8R1 ; \ CAN2_F8R1_FB27, Filter bits
: CAN2_F8R1_FB28 ( -- x addr ) 28 bit CAN2_F8R1 ; \ CAN2_F8R1_FB28, Filter bits
: CAN2_F8R1_FB29 ( -- x addr ) 29 bit CAN2_F8R1 ; \ CAN2_F8R1_FB29, Filter bits
: CAN2_F8R1_FB30 ( -- x addr ) 30 bit CAN2_F8R1 ; \ CAN2_F8R1_FB30, Filter bits
: CAN2_F8R1_FB31 ( -- x addr ) 31 bit CAN2_F8R1 ; \ CAN2_F8R1_FB31, Filter bits

\ CAN2_F8R2 (read-write) Reset:0x00000000
: CAN2_F8R2_FB0 ( -- x addr ) 0 bit CAN2_F8R2 ; \ CAN2_F8R2_FB0, Filter bits
: CAN2_F8R2_FB1 ( -- x addr ) 1 bit CAN2_F8R2 ; \ CAN2_F8R2_FB1, Filter bits
: CAN2_F8R2_FB2 ( -- x addr ) 2 bit CAN2_F8R2 ; \ CAN2_F8R2_FB2, Filter bits
: CAN2_F8R2_FB3 ( -- x addr ) 3 bit CAN2_F8R2 ; \ CAN2_F8R2_FB3, Filter bits
: CAN2_F8R2_FB4 ( -- x addr ) 4 bit CAN2_F8R2 ; \ CAN2_F8R2_FB4, Filter bits
: CAN2_F8R2_FB5 ( -- x addr ) 5 bit CAN2_F8R2 ; \ CAN2_F8R2_FB5, Filter bits
: CAN2_F8R2_FB6 ( -- x addr ) 6 bit CAN2_F8R2 ; \ CAN2_F8R2_FB6, Filter bits
: CAN2_F8R2_FB7 ( -- x addr ) 7 bit CAN2_F8R2 ; \ CAN2_F8R2_FB7, Filter bits
: CAN2_F8R2_FB8 ( -- x addr ) 8 bit CAN2_F8R2 ; \ CAN2_F8R2_FB8, Filter bits
: CAN2_F8R2_FB9 ( -- x addr ) 9 bit CAN2_F8R2 ; \ CAN2_F8R2_FB9, Filter bits
: CAN2_F8R2_FB10 ( -- x addr ) 10 bit CAN2_F8R2 ; \ CAN2_F8R2_FB10, Filter bits
: CAN2_F8R2_FB11 ( -- x addr ) 11 bit CAN2_F8R2 ; \ CAN2_F8R2_FB11, Filter bits
: CAN2_F8R2_FB12 ( -- x addr ) 12 bit CAN2_F8R2 ; \ CAN2_F8R2_FB12, Filter bits
: CAN2_F8R2_FB13 ( -- x addr ) 13 bit CAN2_F8R2 ; \ CAN2_F8R2_FB13, Filter bits
: CAN2_F8R2_FB14 ( -- x addr ) 14 bit CAN2_F8R2 ; \ CAN2_F8R2_FB14, Filter bits
: CAN2_F8R2_FB15 ( -- x addr ) 15 bit CAN2_F8R2 ; \ CAN2_F8R2_FB15, Filter bits
: CAN2_F8R2_FB16 ( -- x addr ) 16 bit CAN2_F8R2 ; \ CAN2_F8R2_FB16, Filter bits
: CAN2_F8R2_FB17 ( -- x addr ) 17 bit CAN2_F8R2 ; \ CAN2_F8R2_FB17, Filter bits
: CAN2_F8R2_FB18 ( -- x addr ) 18 bit CAN2_F8R2 ; \ CAN2_F8R2_FB18, Filter bits
: CAN2_F8R2_FB19 ( -- x addr ) 19 bit CAN2_F8R2 ; \ CAN2_F8R2_FB19, Filter bits
: CAN2_F8R2_FB20 ( -- x addr ) 20 bit CAN2_F8R2 ; \ CAN2_F8R2_FB20, Filter bits
: CAN2_F8R2_FB21 ( -- x addr ) 21 bit CAN2_F8R2 ; \ CAN2_F8R2_FB21, Filter bits
: CAN2_F8R2_FB22 ( -- x addr ) 22 bit CAN2_F8R2 ; \ CAN2_F8R2_FB22, Filter bits
: CAN2_F8R2_FB23 ( -- x addr ) 23 bit CAN2_F8R2 ; \ CAN2_F8R2_FB23, Filter bits
: CAN2_F8R2_FB24 ( -- x addr ) 24 bit CAN2_F8R2 ; \ CAN2_F8R2_FB24, Filter bits
: CAN2_F8R2_FB25 ( -- x addr ) 25 bit CAN2_F8R2 ; \ CAN2_F8R2_FB25, Filter bits
: CAN2_F8R2_FB26 ( -- x addr ) 26 bit CAN2_F8R2 ; \ CAN2_F8R2_FB26, Filter bits
: CAN2_F8R2_FB27 ( -- x addr ) 27 bit CAN2_F8R2 ; \ CAN2_F8R2_FB27, Filter bits
: CAN2_F8R2_FB28 ( -- x addr ) 28 bit CAN2_F8R2 ; \ CAN2_F8R2_FB28, Filter bits
: CAN2_F8R2_FB29 ( -- x addr ) 29 bit CAN2_F8R2 ; \ CAN2_F8R2_FB29, Filter bits
: CAN2_F8R2_FB30 ( -- x addr ) 30 bit CAN2_F8R2 ; \ CAN2_F8R2_FB30, Filter bits
: CAN2_F8R2_FB31 ( -- x addr ) 31 bit CAN2_F8R2 ; \ CAN2_F8R2_FB31, Filter bits

\ CAN2_F9R1 (read-write) Reset:0x00000000
: CAN2_F9R1_FB0 ( -- x addr ) 0 bit CAN2_F9R1 ; \ CAN2_F9R1_FB0, Filter bits
: CAN2_F9R1_FB1 ( -- x addr ) 1 bit CAN2_F9R1 ; \ CAN2_F9R1_FB1, Filter bits
: CAN2_F9R1_FB2 ( -- x addr ) 2 bit CAN2_F9R1 ; \ CAN2_F9R1_FB2, Filter bits
: CAN2_F9R1_FB3 ( -- x addr ) 3 bit CAN2_F9R1 ; \ CAN2_F9R1_FB3, Filter bits
: CAN2_F9R1_FB4 ( -- x addr ) 4 bit CAN2_F9R1 ; \ CAN2_F9R1_FB4, Filter bits
: CAN2_F9R1_FB5 ( -- x addr ) 5 bit CAN2_F9R1 ; \ CAN2_F9R1_FB5, Filter bits
: CAN2_F9R1_FB6 ( -- x addr ) 6 bit CAN2_F9R1 ; \ CAN2_F9R1_FB6, Filter bits
: CAN2_F9R1_FB7 ( -- x addr ) 7 bit CAN2_F9R1 ; \ CAN2_F9R1_FB7, Filter bits
: CAN2_F9R1_FB8 ( -- x addr ) 8 bit CAN2_F9R1 ; \ CAN2_F9R1_FB8, Filter bits
: CAN2_F9R1_FB9 ( -- x addr ) 9 bit CAN2_F9R1 ; \ CAN2_F9R1_FB9, Filter bits
: CAN2_F9R1_FB10 ( -- x addr ) 10 bit CAN2_F9R1 ; \ CAN2_F9R1_FB10, Filter bits
: CAN2_F9R1_FB11 ( -- x addr ) 11 bit CAN2_F9R1 ; \ CAN2_F9R1_FB11, Filter bits
: CAN2_F9R1_FB12 ( -- x addr ) 12 bit CAN2_F9R1 ; \ CAN2_F9R1_FB12, Filter bits
: CAN2_F9R1_FB13 ( -- x addr ) 13 bit CAN2_F9R1 ; \ CAN2_F9R1_FB13, Filter bits
: CAN2_F9R1_FB14 ( -- x addr ) 14 bit CAN2_F9R1 ; \ CAN2_F9R1_FB14, Filter bits
: CAN2_F9R1_FB15 ( -- x addr ) 15 bit CAN2_F9R1 ; \ CAN2_F9R1_FB15, Filter bits
: CAN2_F9R1_FB16 ( -- x addr ) 16 bit CAN2_F9R1 ; \ CAN2_F9R1_FB16, Filter bits
: CAN2_F9R1_FB17 ( -- x addr ) 17 bit CAN2_F9R1 ; \ CAN2_F9R1_FB17, Filter bits
: CAN2_F9R1_FB18 ( -- x addr ) 18 bit CAN2_F9R1 ; \ CAN2_F9R1_FB18, Filter bits
: CAN2_F9R1_FB19 ( -- x addr ) 19 bit CAN2_F9R1 ; \ CAN2_F9R1_FB19, Filter bits
: CAN2_F9R1_FB20 ( -- x addr ) 20 bit CAN2_F9R1 ; \ CAN2_F9R1_FB20, Filter bits
: CAN2_F9R1_FB21 ( -- x addr ) 21 bit CAN2_F9R1 ; \ CAN2_F9R1_FB21, Filter bits
: CAN2_F9R1_FB22 ( -- x addr ) 22 bit CAN2_F9R1 ; \ CAN2_F9R1_FB22, Filter bits
: CAN2_F9R1_FB23 ( -- x addr ) 23 bit CAN2_F9R1 ; \ CAN2_F9R1_FB23, Filter bits
: CAN2_F9R1_FB24 ( -- x addr ) 24 bit CAN2_F9R1 ; \ CAN2_F9R1_FB24, Filter bits
: CAN2_F9R1_FB25 ( -- x addr ) 25 bit CAN2_F9R1 ; \ CAN2_F9R1_FB25, Filter bits
: CAN2_F9R1_FB26 ( -- x addr ) 26 bit CAN2_F9R1 ; \ CAN2_F9R1_FB26, Filter bits
: CAN2_F9R1_FB27 ( -- x addr ) 27 bit CAN2_F9R1 ; \ CAN2_F9R1_FB27, Filter bits
: CAN2_F9R1_FB28 ( -- x addr ) 28 bit CAN2_F9R1 ; \ CAN2_F9R1_FB28, Filter bits
: CAN2_F9R1_FB29 ( -- x addr ) 29 bit CAN2_F9R1 ; \ CAN2_F9R1_FB29, Filter bits
: CAN2_F9R1_FB30 ( -- x addr ) 30 bit CAN2_F9R1 ; \ CAN2_F9R1_FB30, Filter bits
: CAN2_F9R1_FB31 ( -- x addr ) 31 bit CAN2_F9R1 ; \ CAN2_F9R1_FB31, Filter bits

\ CAN2_F9R2 (read-write) Reset:0x00000000
: CAN2_F9R2_FB0 ( -- x addr ) 0 bit CAN2_F9R2 ; \ CAN2_F9R2_FB0, Filter bits
: CAN2_F9R2_FB1 ( -- x addr ) 1 bit CAN2_F9R2 ; \ CAN2_F9R2_FB1, Filter bits
: CAN2_F9R2_FB2 ( -- x addr ) 2 bit CAN2_F9R2 ; \ CAN2_F9R2_FB2, Filter bits
: CAN2_F9R2_FB3 ( -- x addr ) 3 bit CAN2_F9R2 ; \ CAN2_F9R2_FB3, Filter bits
: CAN2_F9R2_FB4 ( -- x addr ) 4 bit CAN2_F9R2 ; \ CAN2_F9R2_FB4, Filter bits
: CAN2_F9R2_FB5 ( -- x addr ) 5 bit CAN2_F9R2 ; \ CAN2_F9R2_FB5, Filter bits
: CAN2_F9R2_FB6 ( -- x addr ) 6 bit CAN2_F9R2 ; \ CAN2_F9R2_FB6, Filter bits
: CAN2_F9R2_FB7 ( -- x addr ) 7 bit CAN2_F9R2 ; \ CAN2_F9R2_FB7, Filter bits
: CAN2_F9R2_FB8 ( -- x addr ) 8 bit CAN2_F9R2 ; \ CAN2_F9R2_FB8, Filter bits
: CAN2_F9R2_FB9 ( -- x addr ) 9 bit CAN2_F9R2 ; \ CAN2_F9R2_FB9, Filter bits
: CAN2_F9R2_FB10 ( -- x addr ) 10 bit CAN2_F9R2 ; \ CAN2_F9R2_FB10, Filter bits
: CAN2_F9R2_FB11 ( -- x addr ) 11 bit CAN2_F9R2 ; \ CAN2_F9R2_FB11, Filter bits
: CAN2_F9R2_FB12 ( -- x addr ) 12 bit CAN2_F9R2 ; \ CAN2_F9R2_FB12, Filter bits
: CAN2_F9R2_FB13 ( -- x addr ) 13 bit CAN2_F9R2 ; \ CAN2_F9R2_FB13, Filter bits
: CAN2_F9R2_FB14 ( -- x addr ) 14 bit CAN2_F9R2 ; \ CAN2_F9R2_FB14, Filter bits
: CAN2_F9R2_FB15 ( -- x addr ) 15 bit CAN2_F9R2 ; \ CAN2_F9R2_FB15, Filter bits
: CAN2_F9R2_FB16 ( -- x addr ) 16 bit CAN2_F9R2 ; \ CAN2_F9R2_FB16, Filter bits
: CAN2_F9R2_FB17 ( -- x addr ) 17 bit CAN2_F9R2 ; \ CAN2_F9R2_FB17, Filter bits
: CAN2_F9R2_FB18 ( -- x addr ) 18 bit CAN2_F9R2 ; \ CAN2_F9R2_FB18, Filter bits
: CAN2_F9R2_FB19 ( -- x addr ) 19 bit CAN2_F9R2 ; \ CAN2_F9R2_FB19, Filter bits
: CAN2_F9R2_FB20 ( -- x addr ) 20 bit CAN2_F9R2 ; \ CAN2_F9R2_FB20, Filter bits
: CAN2_F9R2_FB21 ( -- x addr ) 21 bit CAN2_F9R2 ; \ CAN2_F9R2_FB21, Filter bits
: CAN2_F9R2_FB22 ( -- x addr ) 22 bit CAN2_F9R2 ; \ CAN2_F9R2_FB22, Filter bits
: CAN2_F9R2_FB23 ( -- x addr ) 23 bit CAN2_F9R2 ; \ CAN2_F9R2_FB23, Filter bits
: CAN2_F9R2_FB24 ( -- x addr ) 24 bit CAN2_F9R2 ; \ CAN2_F9R2_FB24, Filter bits
: CAN2_F9R2_FB25 ( -- x addr ) 25 bit CAN2_F9R2 ; \ CAN2_F9R2_FB25, Filter bits
: CAN2_F9R2_FB26 ( -- x addr ) 26 bit CAN2_F9R2 ; \ CAN2_F9R2_FB26, Filter bits
: CAN2_F9R2_FB27 ( -- x addr ) 27 bit CAN2_F9R2 ; \ CAN2_F9R2_FB27, Filter bits
: CAN2_F9R2_FB28 ( -- x addr ) 28 bit CAN2_F9R2 ; \ CAN2_F9R2_FB28, Filter bits
: CAN2_F9R2_FB29 ( -- x addr ) 29 bit CAN2_F9R2 ; \ CAN2_F9R2_FB29, Filter bits
: CAN2_F9R2_FB30 ( -- x addr ) 30 bit CAN2_F9R2 ; \ CAN2_F9R2_FB30, Filter bits
: CAN2_F9R2_FB31 ( -- x addr ) 31 bit CAN2_F9R2 ; \ CAN2_F9R2_FB31, Filter bits

\ CAN2_F10R1 (read-write) Reset:0x00000000
: CAN2_F10R1_FB0 ( -- x addr ) 0 bit CAN2_F10R1 ; \ CAN2_F10R1_FB0, Filter bits
: CAN2_F10R1_FB1 ( -- x addr ) 1 bit CAN2_F10R1 ; \ CAN2_F10R1_FB1, Filter bits
: CAN2_F10R1_FB2 ( -- x addr ) 2 bit CAN2_F10R1 ; \ CAN2_F10R1_FB2, Filter bits
: CAN2_F10R1_FB3 ( -- x addr ) 3 bit CAN2_F10R1 ; \ CAN2_F10R1_FB3, Filter bits
: CAN2_F10R1_FB4 ( -- x addr ) 4 bit CAN2_F10R1 ; \ CAN2_F10R1_FB4, Filter bits
: CAN2_F10R1_FB5 ( -- x addr ) 5 bit CAN2_F10R1 ; \ CAN2_F10R1_FB5, Filter bits
: CAN2_F10R1_FB6 ( -- x addr ) 6 bit CAN2_F10R1 ; \ CAN2_F10R1_FB6, Filter bits
: CAN2_F10R1_FB7 ( -- x addr ) 7 bit CAN2_F10R1 ; \ CAN2_F10R1_FB7, Filter bits
: CAN2_F10R1_FB8 ( -- x addr ) 8 bit CAN2_F10R1 ; \ CAN2_F10R1_FB8, Filter bits
: CAN2_F10R1_FB9 ( -- x addr ) 9 bit CAN2_F10R1 ; \ CAN2_F10R1_FB9, Filter bits
: CAN2_F10R1_FB10 ( -- x addr ) 10 bit CAN2_F10R1 ; \ CAN2_F10R1_FB10, Filter bits
: CAN2_F10R1_FB11 ( -- x addr ) 11 bit CAN2_F10R1 ; \ CAN2_F10R1_FB11, Filter bits
: CAN2_F10R1_FB12 ( -- x addr ) 12 bit CAN2_F10R1 ; \ CAN2_F10R1_FB12, Filter bits
: CAN2_F10R1_FB13 ( -- x addr ) 13 bit CAN2_F10R1 ; \ CAN2_F10R1_FB13, Filter bits
: CAN2_F10R1_FB14 ( -- x addr ) 14 bit CAN2_F10R1 ; \ CAN2_F10R1_FB14, Filter bits
: CAN2_F10R1_FB15 ( -- x addr ) 15 bit CAN2_F10R1 ; \ CAN2_F10R1_FB15, Filter bits
: CAN2_F10R1_FB16 ( -- x addr ) 16 bit CAN2_F10R1 ; \ CAN2_F10R1_FB16, Filter bits
: CAN2_F10R1_FB17 ( -- x addr ) 17 bit CAN2_F10R1 ; \ CAN2_F10R1_FB17, Filter bits
: CAN2_F10R1_FB18 ( -- x addr ) 18 bit CAN2_F10R1 ; \ CAN2_F10R1_FB18, Filter bits
: CAN2_F10R1_FB19 ( -- x addr ) 19 bit CAN2_F10R1 ; \ CAN2_F10R1_FB19, Filter bits
: CAN2_F10R1_FB20 ( -- x addr ) 20 bit CAN2_F10R1 ; \ CAN2_F10R1_FB20, Filter bits
: CAN2_F10R1_FB21 ( -- x addr ) 21 bit CAN2_F10R1 ; \ CAN2_F10R1_FB21, Filter bits
: CAN2_F10R1_FB22 ( -- x addr ) 22 bit CAN2_F10R1 ; \ CAN2_F10R1_FB22, Filter bits
: CAN2_F10R1_FB23 ( -- x addr ) 23 bit CAN2_F10R1 ; \ CAN2_F10R1_FB23, Filter bits
: CAN2_F10R1_FB24 ( -- x addr ) 24 bit CAN2_F10R1 ; \ CAN2_F10R1_FB24, Filter bits
: CAN2_F10R1_FB25 ( -- x addr ) 25 bit CAN2_F10R1 ; \ CAN2_F10R1_FB25, Filter bits
: CAN2_F10R1_FB26 ( -- x addr ) 26 bit CAN2_F10R1 ; \ CAN2_F10R1_FB26, Filter bits
: CAN2_F10R1_FB27 ( -- x addr ) 27 bit CAN2_F10R1 ; \ CAN2_F10R1_FB27, Filter bits
: CAN2_F10R1_FB28 ( -- x addr ) 28 bit CAN2_F10R1 ; \ CAN2_F10R1_FB28, Filter bits
: CAN2_F10R1_FB29 ( -- x addr ) 29 bit CAN2_F10R1 ; \ CAN2_F10R1_FB29, Filter bits
: CAN2_F10R1_FB30 ( -- x addr ) 30 bit CAN2_F10R1 ; \ CAN2_F10R1_FB30, Filter bits
: CAN2_F10R1_FB31 ( -- x addr ) 31 bit CAN2_F10R1 ; \ CAN2_F10R1_FB31, Filter bits

\ CAN2_F10R2 (read-write) Reset:0x00000000
: CAN2_F10R2_FB0 ( -- x addr ) 0 bit CAN2_F10R2 ; \ CAN2_F10R2_FB0, Filter bits
: CAN2_F10R2_FB1 ( -- x addr ) 1 bit CAN2_F10R2 ; \ CAN2_F10R2_FB1, Filter bits
: CAN2_F10R2_FB2 ( -- x addr ) 2 bit CAN2_F10R2 ; \ CAN2_F10R2_FB2, Filter bits
: CAN2_F10R2_FB3 ( -- x addr ) 3 bit CAN2_F10R2 ; \ CAN2_F10R2_FB3, Filter bits
: CAN2_F10R2_FB4 ( -- x addr ) 4 bit CAN2_F10R2 ; \ CAN2_F10R2_FB4, Filter bits
: CAN2_F10R2_FB5 ( -- x addr ) 5 bit CAN2_F10R2 ; \ CAN2_F10R2_FB5, Filter bits
: CAN2_F10R2_FB6 ( -- x addr ) 6 bit CAN2_F10R2 ; \ CAN2_F10R2_FB6, Filter bits
: CAN2_F10R2_FB7 ( -- x addr ) 7 bit CAN2_F10R2 ; \ CAN2_F10R2_FB7, Filter bits
: CAN2_F10R2_FB8 ( -- x addr ) 8 bit CAN2_F10R2 ; \ CAN2_F10R2_FB8, Filter bits
: CAN2_F10R2_FB9 ( -- x addr ) 9 bit CAN2_F10R2 ; \ CAN2_F10R2_FB9, Filter bits
: CAN2_F10R2_FB10 ( -- x addr ) 10 bit CAN2_F10R2 ; \ CAN2_F10R2_FB10, Filter bits
: CAN2_F10R2_FB11 ( -- x addr ) 11 bit CAN2_F10R2 ; \ CAN2_F10R2_FB11, Filter bits
: CAN2_F10R2_FB12 ( -- x addr ) 12 bit CAN2_F10R2 ; \ CAN2_F10R2_FB12, Filter bits
: CAN2_F10R2_FB13 ( -- x addr ) 13 bit CAN2_F10R2 ; \ CAN2_F10R2_FB13, Filter bits
: CAN2_F10R2_FB14 ( -- x addr ) 14 bit CAN2_F10R2 ; \ CAN2_F10R2_FB14, Filter bits
: CAN2_F10R2_FB15 ( -- x addr ) 15 bit CAN2_F10R2 ; \ CAN2_F10R2_FB15, Filter bits
: CAN2_F10R2_FB16 ( -- x addr ) 16 bit CAN2_F10R2 ; \ CAN2_F10R2_FB16, Filter bits
: CAN2_F10R2_FB17 ( -- x addr ) 17 bit CAN2_F10R2 ; \ CAN2_F10R2_FB17, Filter bits
: CAN2_F10R2_FB18 ( -- x addr ) 18 bit CAN2_F10R2 ; \ CAN2_F10R2_FB18, Filter bits
: CAN2_F10R2_FB19 ( -- x addr ) 19 bit CAN2_F10R2 ; \ CAN2_F10R2_FB19, Filter bits
: CAN2_F10R2_FB20 ( -- x addr ) 20 bit CAN2_F10R2 ; \ CAN2_F10R2_FB20, Filter bits
: CAN2_F10R2_FB21 ( -- x addr ) 21 bit CAN2_F10R2 ; \ CAN2_F10R2_FB21, Filter bits
: CAN2_F10R2_FB22 ( -- x addr ) 22 bit CAN2_F10R2 ; \ CAN2_F10R2_FB22, Filter bits
: CAN2_F10R2_FB23 ( -- x addr ) 23 bit CAN2_F10R2 ; \ CAN2_F10R2_FB23, Filter bits
: CAN2_F10R2_FB24 ( -- x addr ) 24 bit CAN2_F10R2 ; \ CAN2_F10R2_FB24, Filter bits
: CAN2_F10R2_FB25 ( -- x addr ) 25 bit CAN2_F10R2 ; \ CAN2_F10R2_FB25, Filter bits
: CAN2_F10R2_FB26 ( -- x addr ) 26 bit CAN2_F10R2 ; \ CAN2_F10R2_FB26, Filter bits
: CAN2_F10R2_FB27 ( -- x addr ) 27 bit CAN2_F10R2 ; \ CAN2_F10R2_FB27, Filter bits
: CAN2_F10R2_FB28 ( -- x addr ) 28 bit CAN2_F10R2 ; \ CAN2_F10R2_FB28, Filter bits
: CAN2_F10R2_FB29 ( -- x addr ) 29 bit CAN2_F10R2 ; \ CAN2_F10R2_FB29, Filter bits
: CAN2_F10R2_FB30 ( -- x addr ) 30 bit CAN2_F10R2 ; \ CAN2_F10R2_FB30, Filter bits
: CAN2_F10R2_FB31 ( -- x addr ) 31 bit CAN2_F10R2 ; \ CAN2_F10R2_FB31, Filter bits

\ CAN2_F11R1 (read-write) Reset:0x00000000
: CAN2_F11R1_FB0 ( -- x addr ) 0 bit CAN2_F11R1 ; \ CAN2_F11R1_FB0, Filter bits
: CAN2_F11R1_FB1 ( -- x addr ) 1 bit CAN2_F11R1 ; \ CAN2_F11R1_FB1, Filter bits
: CAN2_F11R1_FB2 ( -- x addr ) 2 bit CAN2_F11R1 ; \ CAN2_F11R1_FB2, Filter bits
: CAN2_F11R1_FB3 ( -- x addr ) 3 bit CAN2_F11R1 ; \ CAN2_F11R1_FB3, Filter bits
: CAN2_F11R1_FB4 ( -- x addr ) 4 bit CAN2_F11R1 ; \ CAN2_F11R1_FB4, Filter bits
: CAN2_F11R1_FB5 ( -- x addr ) 5 bit CAN2_F11R1 ; \ CAN2_F11R1_FB5, Filter bits
: CAN2_F11R1_FB6 ( -- x addr ) 6 bit CAN2_F11R1 ; \ CAN2_F11R1_FB6, Filter bits
: CAN2_F11R1_FB7 ( -- x addr ) 7 bit CAN2_F11R1 ; \ CAN2_F11R1_FB7, Filter bits
: CAN2_F11R1_FB8 ( -- x addr ) 8 bit CAN2_F11R1 ; \ CAN2_F11R1_FB8, Filter bits
: CAN2_F11R1_FB9 ( -- x addr ) 9 bit CAN2_F11R1 ; \ CAN2_F11R1_FB9, Filter bits
: CAN2_F11R1_FB10 ( -- x addr ) 10 bit CAN2_F11R1 ; \ CAN2_F11R1_FB10, Filter bits
: CAN2_F11R1_FB11 ( -- x addr ) 11 bit CAN2_F11R1 ; \ CAN2_F11R1_FB11, Filter bits
: CAN2_F11R1_FB12 ( -- x addr ) 12 bit CAN2_F11R1 ; \ CAN2_F11R1_FB12, Filter bits
: CAN2_F11R1_FB13 ( -- x addr ) 13 bit CAN2_F11R1 ; \ CAN2_F11R1_FB13, Filter bits
: CAN2_F11R1_FB14 ( -- x addr ) 14 bit CAN2_F11R1 ; \ CAN2_F11R1_FB14, Filter bits
: CAN2_F11R1_FB15 ( -- x addr ) 15 bit CAN2_F11R1 ; \ CAN2_F11R1_FB15, Filter bits
: CAN2_F11R1_FB16 ( -- x addr ) 16 bit CAN2_F11R1 ; \ CAN2_F11R1_FB16, Filter bits
: CAN2_F11R1_FB17 ( -- x addr ) 17 bit CAN2_F11R1 ; \ CAN2_F11R1_FB17, Filter bits
: CAN2_F11R1_FB18 ( -- x addr ) 18 bit CAN2_F11R1 ; \ CAN2_F11R1_FB18, Filter bits
: CAN2_F11R1_FB19 ( -- x addr ) 19 bit CAN2_F11R1 ; \ CAN2_F11R1_FB19, Filter bits
: CAN2_F11R1_FB20 ( -- x addr ) 20 bit CAN2_F11R1 ; \ CAN2_F11R1_FB20, Filter bits
: CAN2_F11R1_FB21 ( -- x addr ) 21 bit CAN2_F11R1 ; \ CAN2_F11R1_FB21, Filter bits
: CAN2_F11R1_FB22 ( -- x addr ) 22 bit CAN2_F11R1 ; \ CAN2_F11R1_FB22, Filter bits
: CAN2_F11R1_FB23 ( -- x addr ) 23 bit CAN2_F11R1 ; \ CAN2_F11R1_FB23, Filter bits
: CAN2_F11R1_FB24 ( -- x addr ) 24 bit CAN2_F11R1 ; \ CAN2_F11R1_FB24, Filter bits
: CAN2_F11R1_FB25 ( -- x addr ) 25 bit CAN2_F11R1 ; \ CAN2_F11R1_FB25, Filter bits
: CAN2_F11R1_FB26 ( -- x addr ) 26 bit CAN2_F11R1 ; \ CAN2_F11R1_FB26, Filter bits
: CAN2_F11R1_FB27 ( -- x addr ) 27 bit CAN2_F11R1 ; \ CAN2_F11R1_FB27, Filter bits
: CAN2_F11R1_FB28 ( -- x addr ) 28 bit CAN2_F11R1 ; \ CAN2_F11R1_FB28, Filter bits
: CAN2_F11R1_FB29 ( -- x addr ) 29 bit CAN2_F11R1 ; \ CAN2_F11R1_FB29, Filter bits
: CAN2_F11R1_FB30 ( -- x addr ) 30 bit CAN2_F11R1 ; \ CAN2_F11R1_FB30, Filter bits
: CAN2_F11R1_FB31 ( -- x addr ) 31 bit CAN2_F11R1 ; \ CAN2_F11R1_FB31, Filter bits

\ CAN2_F11R2 (read-write) Reset:0x00000000
: CAN2_F11R2_FB0 ( -- x addr ) 0 bit CAN2_F11R2 ; \ CAN2_F11R2_FB0, Filter bits
: CAN2_F11R2_FB1 ( -- x addr ) 1 bit CAN2_F11R2 ; \ CAN2_F11R2_FB1, Filter bits
: CAN2_F11R2_FB2 ( -- x addr ) 2 bit CAN2_F11R2 ; \ CAN2_F11R2_FB2, Filter bits
: CAN2_F11R2_FB3 ( -- x addr ) 3 bit CAN2_F11R2 ; \ CAN2_F11R2_FB3, Filter bits
: CAN2_F11R2_FB4 ( -- x addr ) 4 bit CAN2_F11R2 ; \ CAN2_F11R2_FB4, Filter bits
: CAN2_F11R2_FB5 ( -- x addr ) 5 bit CAN2_F11R2 ; \ CAN2_F11R2_FB5, Filter bits
: CAN2_F11R2_FB6 ( -- x addr ) 6 bit CAN2_F11R2 ; \ CAN2_F11R2_FB6, Filter bits
: CAN2_F11R2_FB7 ( -- x addr ) 7 bit CAN2_F11R2 ; \ CAN2_F11R2_FB7, Filter bits
: CAN2_F11R2_FB8 ( -- x addr ) 8 bit CAN2_F11R2 ; \ CAN2_F11R2_FB8, Filter bits
: CAN2_F11R2_FB9 ( -- x addr ) 9 bit CAN2_F11R2 ; \ CAN2_F11R2_FB9, Filter bits
: CAN2_F11R2_FB10 ( -- x addr ) 10 bit CAN2_F11R2 ; \ CAN2_F11R2_FB10, Filter bits
: CAN2_F11R2_FB11 ( -- x addr ) 11 bit CAN2_F11R2 ; \ CAN2_F11R2_FB11, Filter bits
: CAN2_F11R2_FB12 ( -- x addr ) 12 bit CAN2_F11R2 ; \ CAN2_F11R2_FB12, Filter bits
: CAN2_F11R2_FB13 ( -- x addr ) 13 bit CAN2_F11R2 ; \ CAN2_F11R2_FB13, Filter bits
: CAN2_F11R2_FB14 ( -- x addr ) 14 bit CAN2_F11R2 ; \ CAN2_F11R2_FB14, Filter bits
: CAN2_F11R2_FB15 ( -- x addr ) 15 bit CAN2_F11R2 ; \ CAN2_F11R2_FB15, Filter bits
: CAN2_F11R2_FB16 ( -- x addr ) 16 bit CAN2_F11R2 ; \ CAN2_F11R2_FB16, Filter bits
: CAN2_F11R2_FB17 ( -- x addr ) 17 bit CAN2_F11R2 ; \ CAN2_F11R2_FB17, Filter bits
: CAN2_F11R2_FB18 ( -- x addr ) 18 bit CAN2_F11R2 ; \ CAN2_F11R2_FB18, Filter bits
: CAN2_F11R2_FB19 ( -- x addr ) 19 bit CAN2_F11R2 ; \ CAN2_F11R2_FB19, Filter bits
: CAN2_F11R2_FB20 ( -- x addr ) 20 bit CAN2_F11R2 ; \ CAN2_F11R2_FB20, Filter bits
: CAN2_F11R2_FB21 ( -- x addr ) 21 bit CAN2_F11R2 ; \ CAN2_F11R2_FB21, Filter bits
: CAN2_F11R2_FB22 ( -- x addr ) 22 bit CAN2_F11R2 ; \ CAN2_F11R2_FB22, Filter bits
: CAN2_F11R2_FB23 ( -- x addr ) 23 bit CAN2_F11R2 ; \ CAN2_F11R2_FB23, Filter bits
: CAN2_F11R2_FB24 ( -- x addr ) 24 bit CAN2_F11R2 ; \ CAN2_F11R2_FB24, Filter bits
: CAN2_F11R2_FB25 ( -- x addr ) 25 bit CAN2_F11R2 ; \ CAN2_F11R2_FB25, Filter bits
: CAN2_F11R2_FB26 ( -- x addr ) 26 bit CAN2_F11R2 ; \ CAN2_F11R2_FB26, Filter bits
: CAN2_F11R2_FB27 ( -- x addr ) 27 bit CAN2_F11R2 ; \ CAN2_F11R2_FB27, Filter bits
: CAN2_F11R2_FB28 ( -- x addr ) 28 bit CAN2_F11R2 ; \ CAN2_F11R2_FB28, Filter bits
: CAN2_F11R2_FB29 ( -- x addr ) 29 bit CAN2_F11R2 ; \ CAN2_F11R2_FB29, Filter bits
: CAN2_F11R2_FB30 ( -- x addr ) 30 bit CAN2_F11R2 ; \ CAN2_F11R2_FB30, Filter bits
: CAN2_F11R2_FB31 ( -- x addr ) 31 bit CAN2_F11R2 ; \ CAN2_F11R2_FB31, Filter bits

\ CAN2_F12R1 (read-write) Reset:0x00000000
: CAN2_F12R1_FB0 ( -- x addr ) 0 bit CAN2_F12R1 ; \ CAN2_F12R1_FB0, Filter bits
: CAN2_F12R1_FB1 ( -- x addr ) 1 bit CAN2_F12R1 ; \ CAN2_F12R1_FB1, Filter bits
: CAN2_F12R1_FB2 ( -- x addr ) 2 bit CAN2_F12R1 ; \ CAN2_F12R1_FB2, Filter bits
: CAN2_F12R1_FB3 ( -- x addr ) 3 bit CAN2_F12R1 ; \ CAN2_F12R1_FB3, Filter bits
: CAN2_F12R1_FB4 ( -- x addr ) 4 bit CAN2_F12R1 ; \ CAN2_F12R1_FB4, Filter bits
: CAN2_F12R1_FB5 ( -- x addr ) 5 bit CAN2_F12R1 ; \ CAN2_F12R1_FB5, Filter bits
: CAN2_F12R1_FB6 ( -- x addr ) 6 bit CAN2_F12R1 ; \ CAN2_F12R1_FB6, Filter bits
: CAN2_F12R1_FB7 ( -- x addr ) 7 bit CAN2_F12R1 ; \ CAN2_F12R1_FB7, Filter bits
: CAN2_F12R1_FB8 ( -- x addr ) 8 bit CAN2_F12R1 ; \ CAN2_F12R1_FB8, Filter bits
: CAN2_F12R1_FB9 ( -- x addr ) 9 bit CAN2_F12R1 ; \ CAN2_F12R1_FB9, Filter bits
: CAN2_F12R1_FB10 ( -- x addr ) 10 bit CAN2_F12R1 ; \ CAN2_F12R1_FB10, Filter bits
: CAN2_F12R1_FB11 ( -- x addr ) 11 bit CAN2_F12R1 ; \ CAN2_F12R1_FB11, Filter bits
: CAN2_F12R1_FB12 ( -- x addr ) 12 bit CAN2_F12R1 ; \ CAN2_F12R1_FB12, Filter bits
: CAN2_F12R1_FB13 ( -- x addr ) 13 bit CAN2_F12R1 ; \ CAN2_F12R1_FB13, Filter bits
: CAN2_F12R1_FB14 ( -- x addr ) 14 bit CAN2_F12R1 ; \ CAN2_F12R1_FB14, Filter bits
: CAN2_F12R1_FB15 ( -- x addr ) 15 bit CAN2_F12R1 ; \ CAN2_F12R1_FB15, Filter bits
: CAN2_F12R1_FB16 ( -- x addr ) 16 bit CAN2_F12R1 ; \ CAN2_F12R1_FB16, Filter bits
: CAN2_F12R1_FB17 ( -- x addr ) 17 bit CAN2_F12R1 ; \ CAN2_F12R1_FB17, Filter bits
: CAN2_F12R1_FB18 ( -- x addr ) 18 bit CAN2_F12R1 ; \ CAN2_F12R1_FB18, Filter bits
: CAN2_F12R1_FB19 ( -- x addr ) 19 bit CAN2_F12R1 ; \ CAN2_F12R1_FB19, Filter bits
: CAN2_F12R1_FB20 ( -- x addr ) 20 bit CAN2_F12R1 ; \ CAN2_F12R1_FB20, Filter bits
: CAN2_F12R1_FB21 ( -- x addr ) 21 bit CAN2_F12R1 ; \ CAN2_F12R1_FB21, Filter bits
: CAN2_F12R1_FB22 ( -- x addr ) 22 bit CAN2_F12R1 ; \ CAN2_F12R1_FB22, Filter bits
: CAN2_F12R1_FB23 ( -- x addr ) 23 bit CAN2_F12R1 ; \ CAN2_F12R1_FB23, Filter bits
: CAN2_F12R1_FB24 ( -- x addr ) 24 bit CAN2_F12R1 ; \ CAN2_F12R1_FB24, Filter bits
: CAN2_F12R1_FB25 ( -- x addr ) 25 bit CAN2_F12R1 ; \ CAN2_F12R1_FB25, Filter bits
: CAN2_F12R1_FB26 ( -- x addr ) 26 bit CAN2_F12R1 ; \ CAN2_F12R1_FB26, Filter bits
: CAN2_F12R1_FB27 ( -- x addr ) 27 bit CAN2_F12R1 ; \ CAN2_F12R1_FB27, Filter bits
: CAN2_F12R1_FB28 ( -- x addr ) 28 bit CAN2_F12R1 ; \ CAN2_F12R1_FB28, Filter bits
: CAN2_F12R1_FB29 ( -- x addr ) 29 bit CAN2_F12R1 ; \ CAN2_F12R1_FB29, Filter bits
: CAN2_F12R1_FB30 ( -- x addr ) 30 bit CAN2_F12R1 ; \ CAN2_F12R1_FB30, Filter bits
: CAN2_F12R1_FB31 ( -- x addr ) 31 bit CAN2_F12R1 ; \ CAN2_F12R1_FB31, Filter bits

\ CAN2_F12R2 (read-write) Reset:0x00000000
: CAN2_F12R2_FB0 ( -- x addr ) 0 bit CAN2_F12R2 ; \ CAN2_F12R2_FB0, Filter bits
: CAN2_F12R2_FB1 ( -- x addr ) 1 bit CAN2_F12R2 ; \ CAN2_F12R2_FB1, Filter bits
: CAN2_F12R2_FB2 ( -- x addr ) 2 bit CAN2_F12R2 ; \ CAN2_F12R2_FB2, Filter bits
: CAN2_F12R2_FB3 ( -- x addr ) 3 bit CAN2_F12R2 ; \ CAN2_F12R2_FB3, Filter bits
: CAN2_F12R2_FB4 ( -- x addr ) 4 bit CAN2_F12R2 ; \ CAN2_F12R2_FB4, Filter bits
: CAN2_F12R2_FB5 ( -- x addr ) 5 bit CAN2_F12R2 ; \ CAN2_F12R2_FB5, Filter bits
: CAN2_F12R2_FB6 ( -- x addr ) 6 bit CAN2_F12R2 ; \ CAN2_F12R2_FB6, Filter bits
: CAN2_F12R2_FB7 ( -- x addr ) 7 bit CAN2_F12R2 ; \ CAN2_F12R2_FB7, Filter bits
: CAN2_F12R2_FB8 ( -- x addr ) 8 bit CAN2_F12R2 ; \ CAN2_F12R2_FB8, Filter bits
: CAN2_F12R2_FB9 ( -- x addr ) 9 bit CAN2_F12R2 ; \ CAN2_F12R2_FB9, Filter bits
: CAN2_F12R2_FB10 ( -- x addr ) 10 bit CAN2_F12R2 ; \ CAN2_F12R2_FB10, Filter bits
: CAN2_F12R2_FB11 ( -- x addr ) 11 bit CAN2_F12R2 ; \ CAN2_F12R2_FB11, Filter bits
: CAN2_F12R2_FB12 ( -- x addr ) 12 bit CAN2_F12R2 ; \ CAN2_F12R2_FB12, Filter bits
: CAN2_F12R2_FB13 ( -- x addr ) 13 bit CAN2_F12R2 ; \ CAN2_F12R2_FB13, Filter bits
: CAN2_F12R2_FB14 ( -- x addr ) 14 bit CAN2_F12R2 ; \ CAN2_F12R2_FB14, Filter bits
: CAN2_F12R2_FB15 ( -- x addr ) 15 bit CAN2_F12R2 ; \ CAN2_F12R2_FB15, Filter bits
: CAN2_F12R2_FB16 ( -- x addr ) 16 bit CAN2_F12R2 ; \ CAN2_F12R2_FB16, Filter bits
: CAN2_F12R2_FB17 ( -- x addr ) 17 bit CAN2_F12R2 ; \ CAN2_F12R2_FB17, Filter bits
: CAN2_F12R2_FB18 ( -- x addr ) 18 bit CAN2_F12R2 ; \ CAN2_F12R2_FB18, Filter bits
: CAN2_F12R2_FB19 ( -- x addr ) 19 bit CAN2_F12R2 ; \ CAN2_F12R2_FB19, Filter bits
: CAN2_F12R2_FB20 ( -- x addr ) 20 bit CAN2_F12R2 ; \ CAN2_F12R2_FB20, Filter bits
: CAN2_F12R2_FB21 ( -- x addr ) 21 bit CAN2_F12R2 ; \ CAN2_F12R2_FB21, Filter bits
: CAN2_F12R2_FB22 ( -- x addr ) 22 bit CAN2_F12R2 ; \ CAN2_F12R2_FB22, Filter bits
: CAN2_F12R2_FB23 ( -- x addr ) 23 bit CAN2_F12R2 ; \ CAN2_F12R2_FB23, Filter bits
: CAN2_F12R2_FB24 ( -- x addr ) 24 bit CAN2_F12R2 ; \ CAN2_F12R2_FB24, Filter bits
: CAN2_F12R2_FB25 ( -- x addr ) 25 bit CAN2_F12R2 ; \ CAN2_F12R2_FB25, Filter bits
: CAN2_F12R2_FB26 ( -- x addr ) 26 bit CAN2_F12R2 ; \ CAN2_F12R2_FB26, Filter bits
: CAN2_F12R2_FB27 ( -- x addr ) 27 bit CAN2_F12R2 ; \ CAN2_F12R2_FB27, Filter bits
: CAN2_F12R2_FB28 ( -- x addr ) 28 bit CAN2_F12R2 ; \ CAN2_F12R2_FB28, Filter bits
: CAN2_F12R2_FB29 ( -- x addr ) 29 bit CAN2_F12R2 ; \ CAN2_F12R2_FB29, Filter bits
: CAN2_F12R2_FB30 ( -- x addr ) 30 bit CAN2_F12R2 ; \ CAN2_F12R2_FB30, Filter bits
: CAN2_F12R2_FB31 ( -- x addr ) 31 bit CAN2_F12R2 ; \ CAN2_F12R2_FB31, Filter bits

\ CAN2_F13R1 (read-write) Reset:0x00000000
: CAN2_F13R1_FB0 ( -- x addr ) 0 bit CAN2_F13R1 ; \ CAN2_F13R1_FB0, Filter bits
: CAN2_F13R1_FB1 ( -- x addr ) 1 bit CAN2_F13R1 ; \ CAN2_F13R1_FB1, Filter bits
: CAN2_F13R1_FB2 ( -- x addr ) 2 bit CAN2_F13R1 ; \ CAN2_F13R1_FB2, Filter bits
: CAN2_F13R1_FB3 ( -- x addr ) 3 bit CAN2_F13R1 ; \ CAN2_F13R1_FB3, Filter bits
: CAN2_F13R1_FB4 ( -- x addr ) 4 bit CAN2_F13R1 ; \ CAN2_F13R1_FB4, Filter bits
: CAN2_F13R1_FB5 ( -- x addr ) 5 bit CAN2_F13R1 ; \ CAN2_F13R1_FB5, Filter bits
: CAN2_F13R1_FB6 ( -- x addr ) 6 bit CAN2_F13R1 ; \ CAN2_F13R1_FB6, Filter bits
: CAN2_F13R1_FB7 ( -- x addr ) 7 bit CAN2_F13R1 ; \ CAN2_F13R1_FB7, Filter bits
: CAN2_F13R1_FB8 ( -- x addr ) 8 bit CAN2_F13R1 ; \ CAN2_F13R1_FB8, Filter bits
: CAN2_F13R1_FB9 ( -- x addr ) 9 bit CAN2_F13R1 ; \ CAN2_F13R1_FB9, Filter bits
: CAN2_F13R1_FB10 ( -- x addr ) 10 bit CAN2_F13R1 ; \ CAN2_F13R1_FB10, Filter bits
: CAN2_F13R1_FB11 ( -- x addr ) 11 bit CAN2_F13R1 ; \ CAN2_F13R1_FB11, Filter bits
: CAN2_F13R1_FB12 ( -- x addr ) 12 bit CAN2_F13R1 ; \ CAN2_F13R1_FB12, Filter bits
: CAN2_F13R1_FB13 ( -- x addr ) 13 bit CAN2_F13R1 ; \ CAN2_F13R1_FB13, Filter bits
: CAN2_F13R1_FB14 ( -- x addr ) 14 bit CAN2_F13R1 ; \ CAN2_F13R1_FB14, Filter bits
: CAN2_F13R1_FB15 ( -- x addr ) 15 bit CAN2_F13R1 ; \ CAN2_F13R1_FB15, Filter bits
: CAN2_F13R1_FB16 ( -- x addr ) 16 bit CAN2_F13R1 ; \ CAN2_F13R1_FB16, Filter bits
: CAN2_F13R1_FB17 ( -- x addr ) 17 bit CAN2_F13R1 ; \ CAN2_F13R1_FB17, Filter bits
: CAN2_F13R1_FB18 ( -- x addr ) 18 bit CAN2_F13R1 ; \ CAN2_F13R1_FB18, Filter bits
: CAN2_F13R1_FB19 ( -- x addr ) 19 bit CAN2_F13R1 ; \ CAN2_F13R1_FB19, Filter bits
: CAN2_F13R1_FB20 ( -- x addr ) 20 bit CAN2_F13R1 ; \ CAN2_F13R1_FB20, Filter bits
: CAN2_F13R1_FB21 ( -- x addr ) 21 bit CAN2_F13R1 ; \ CAN2_F13R1_FB21, Filter bits
: CAN2_F13R1_FB22 ( -- x addr ) 22 bit CAN2_F13R1 ; \ CAN2_F13R1_FB22, Filter bits
: CAN2_F13R1_FB23 ( -- x addr ) 23 bit CAN2_F13R1 ; \ CAN2_F13R1_FB23, Filter bits
: CAN2_F13R1_FB24 ( -- x addr ) 24 bit CAN2_F13R1 ; \ CAN2_F13R1_FB24, Filter bits
: CAN2_F13R1_FB25 ( -- x addr ) 25 bit CAN2_F13R1 ; \ CAN2_F13R1_FB25, Filter bits
: CAN2_F13R1_FB26 ( -- x addr ) 26 bit CAN2_F13R1 ; \ CAN2_F13R1_FB26, Filter bits
: CAN2_F13R1_FB27 ( -- x addr ) 27 bit CAN2_F13R1 ; \ CAN2_F13R1_FB27, Filter bits
: CAN2_F13R1_FB28 ( -- x addr ) 28 bit CAN2_F13R1 ; \ CAN2_F13R1_FB28, Filter bits
: CAN2_F13R1_FB29 ( -- x addr ) 29 bit CAN2_F13R1 ; \ CAN2_F13R1_FB29, Filter bits
: CAN2_F13R1_FB30 ( -- x addr ) 30 bit CAN2_F13R1 ; \ CAN2_F13R1_FB30, Filter bits
: CAN2_F13R1_FB31 ( -- x addr ) 31 bit CAN2_F13R1 ; \ CAN2_F13R1_FB31, Filter bits

\ CAN2_F13R2 (read-write) Reset:0x00000000
: CAN2_F13R2_FB0 ( -- x addr ) 0 bit CAN2_F13R2 ; \ CAN2_F13R2_FB0, Filter bits
: CAN2_F13R2_FB1 ( -- x addr ) 1 bit CAN2_F13R2 ; \ CAN2_F13R2_FB1, Filter bits
: CAN2_F13R2_FB2 ( -- x addr ) 2 bit CAN2_F13R2 ; \ CAN2_F13R2_FB2, Filter bits
: CAN2_F13R2_FB3 ( -- x addr ) 3 bit CAN2_F13R2 ; \ CAN2_F13R2_FB3, Filter bits
: CAN2_F13R2_FB4 ( -- x addr ) 4 bit CAN2_F13R2 ; \ CAN2_F13R2_FB4, Filter bits
: CAN2_F13R2_FB5 ( -- x addr ) 5 bit CAN2_F13R2 ; \ CAN2_F13R2_FB5, Filter bits
: CAN2_F13R2_FB6 ( -- x addr ) 6 bit CAN2_F13R2 ; \ CAN2_F13R2_FB6, Filter bits
: CAN2_F13R2_FB7 ( -- x addr ) 7 bit CAN2_F13R2 ; \ CAN2_F13R2_FB7, Filter bits
: CAN2_F13R2_FB8 ( -- x addr ) 8 bit CAN2_F13R2 ; \ CAN2_F13R2_FB8, Filter bits
: CAN2_F13R2_FB9 ( -- x addr ) 9 bit CAN2_F13R2 ; \ CAN2_F13R2_FB9, Filter bits
: CAN2_F13R2_FB10 ( -- x addr ) 10 bit CAN2_F13R2 ; \ CAN2_F13R2_FB10, Filter bits
: CAN2_F13R2_FB11 ( -- x addr ) 11 bit CAN2_F13R2 ; \ CAN2_F13R2_FB11, Filter bits
: CAN2_F13R2_FB12 ( -- x addr ) 12 bit CAN2_F13R2 ; \ CAN2_F13R2_FB12, Filter bits
: CAN2_F13R2_FB13 ( -- x addr ) 13 bit CAN2_F13R2 ; \ CAN2_F13R2_FB13, Filter bits
: CAN2_F13R2_FB14 ( -- x addr ) 14 bit CAN2_F13R2 ; \ CAN2_F13R2_FB14, Filter bits
: CAN2_F13R2_FB15 ( -- x addr ) 15 bit CAN2_F13R2 ; \ CAN2_F13R2_FB15, Filter bits
: CAN2_F13R2_FB16 ( -- x addr ) 16 bit CAN2_F13R2 ; \ CAN2_F13R2_FB16, Filter bits
: CAN2_F13R2_FB17 ( -- x addr ) 17 bit CAN2_F13R2 ; \ CAN2_F13R2_FB17, Filter bits
: CAN2_F13R2_FB18 ( -- x addr ) 18 bit CAN2_F13R2 ; \ CAN2_F13R2_FB18, Filter bits
: CAN2_F13R2_FB19 ( -- x addr ) 19 bit CAN2_F13R2 ; \ CAN2_F13R2_FB19, Filter bits
: CAN2_F13R2_FB20 ( -- x addr ) 20 bit CAN2_F13R2 ; \ CAN2_F13R2_FB20, Filter bits
: CAN2_F13R2_FB21 ( -- x addr ) 21 bit CAN2_F13R2 ; \ CAN2_F13R2_FB21, Filter bits
: CAN2_F13R2_FB22 ( -- x addr ) 22 bit CAN2_F13R2 ; \ CAN2_F13R2_FB22, Filter bits
: CAN2_F13R2_FB23 ( -- x addr ) 23 bit CAN2_F13R2 ; \ CAN2_F13R2_FB23, Filter bits
: CAN2_F13R2_FB24 ( -- x addr ) 24 bit CAN2_F13R2 ; \ CAN2_F13R2_FB24, Filter bits
: CAN2_F13R2_FB25 ( -- x addr ) 25 bit CAN2_F13R2 ; \ CAN2_F13R2_FB25, Filter bits
: CAN2_F13R2_FB26 ( -- x addr ) 26 bit CAN2_F13R2 ; \ CAN2_F13R2_FB26, Filter bits
: CAN2_F13R2_FB27 ( -- x addr ) 27 bit CAN2_F13R2 ; \ CAN2_F13R2_FB27, Filter bits
: CAN2_F13R2_FB28 ( -- x addr ) 28 bit CAN2_F13R2 ; \ CAN2_F13R2_FB28, Filter bits
: CAN2_F13R2_FB29 ( -- x addr ) 29 bit CAN2_F13R2 ; \ CAN2_F13R2_FB29, Filter bits
: CAN2_F13R2_FB30 ( -- x addr ) 30 bit CAN2_F13R2 ; \ CAN2_F13R2_FB30, Filter bits
: CAN2_F13R2_FB31 ( -- x addr ) 31 bit CAN2_F13R2 ; \ CAN2_F13R2_FB31, Filter bits

\ CAN2_F14R1 (read-write) Reset:0x00000000
: CAN2_F14R1_FB0 ( -- x addr ) 0 bit CAN2_F14R1 ; \ CAN2_F14R1_FB0, Filter bits
: CAN2_F14R1_FB1 ( -- x addr ) 1 bit CAN2_F14R1 ; \ CAN2_F14R1_FB1, Filter bits
: CAN2_F14R1_FB2 ( -- x addr ) 2 bit CAN2_F14R1 ; \ CAN2_F14R1_FB2, Filter bits
: CAN2_F14R1_FB3 ( -- x addr ) 3 bit CAN2_F14R1 ; \ CAN2_F14R1_FB3, Filter bits
: CAN2_F14R1_FB4 ( -- x addr ) 4 bit CAN2_F14R1 ; \ CAN2_F14R1_FB4, Filter bits
: CAN2_F14R1_FB5 ( -- x addr ) 5 bit CAN2_F14R1 ; \ CAN2_F14R1_FB5, Filter bits
: CAN2_F14R1_FB6 ( -- x addr ) 6 bit CAN2_F14R1 ; \ CAN2_F14R1_FB6, Filter bits
: CAN2_F14R1_FB7 ( -- x addr ) 7 bit CAN2_F14R1 ; \ CAN2_F14R1_FB7, Filter bits
: CAN2_F14R1_FB8 ( -- x addr ) 8 bit CAN2_F14R1 ; \ CAN2_F14R1_FB8, Filter bits
: CAN2_F14R1_FB9 ( -- x addr ) 9 bit CAN2_F14R1 ; \ CAN2_F14R1_FB9, Filter bits
: CAN2_F14R1_FB10 ( -- x addr ) 10 bit CAN2_F14R1 ; \ CAN2_F14R1_FB10, Filter bits
: CAN2_F14R1_FB11 ( -- x addr ) 11 bit CAN2_F14R1 ; \ CAN2_F14R1_FB11, Filter bits
: CAN2_F14R1_FB12 ( -- x addr ) 12 bit CAN2_F14R1 ; \ CAN2_F14R1_FB12, Filter bits
: CAN2_F14R1_FB13 ( -- x addr ) 13 bit CAN2_F14R1 ; \ CAN2_F14R1_FB13, Filter bits
: CAN2_F14R1_FB14 ( -- x addr ) 14 bit CAN2_F14R1 ; \ CAN2_F14R1_FB14, Filter bits
: CAN2_F14R1_FB15 ( -- x addr ) 15 bit CAN2_F14R1 ; \ CAN2_F14R1_FB15, Filter bits
: CAN2_F14R1_FB16 ( -- x addr ) 16 bit CAN2_F14R1 ; \ CAN2_F14R1_FB16, Filter bits
: CAN2_F14R1_FB17 ( -- x addr ) 17 bit CAN2_F14R1 ; \ CAN2_F14R1_FB17, Filter bits
: CAN2_F14R1_FB18 ( -- x addr ) 18 bit CAN2_F14R1 ; \ CAN2_F14R1_FB18, Filter bits
: CAN2_F14R1_FB19 ( -- x addr ) 19 bit CAN2_F14R1 ; \ CAN2_F14R1_FB19, Filter bits
: CAN2_F14R1_FB20 ( -- x addr ) 20 bit CAN2_F14R1 ; \ CAN2_F14R1_FB20, Filter bits
: CAN2_F14R1_FB21 ( -- x addr ) 21 bit CAN2_F14R1 ; \ CAN2_F14R1_FB21, Filter bits
: CAN2_F14R1_FB22 ( -- x addr ) 22 bit CAN2_F14R1 ; \ CAN2_F14R1_FB22, Filter bits
: CAN2_F14R1_FB23 ( -- x addr ) 23 bit CAN2_F14R1 ; \ CAN2_F14R1_FB23, Filter bits
: CAN2_F14R1_FB24 ( -- x addr ) 24 bit CAN2_F14R1 ; \ CAN2_F14R1_FB24, Filter bits
: CAN2_F14R1_FB25 ( -- x addr ) 25 bit CAN2_F14R1 ; \ CAN2_F14R1_FB25, Filter bits
: CAN2_F14R1_FB26 ( -- x addr ) 26 bit CAN2_F14R1 ; \ CAN2_F14R1_FB26, Filter bits
: CAN2_F14R1_FB27 ( -- x addr ) 27 bit CAN2_F14R1 ; \ CAN2_F14R1_FB27, Filter bits
: CAN2_F14R1_FB28 ( -- x addr ) 28 bit CAN2_F14R1 ; \ CAN2_F14R1_FB28, Filter bits
: CAN2_F14R1_FB29 ( -- x addr ) 29 bit CAN2_F14R1 ; \ CAN2_F14R1_FB29, Filter bits
: CAN2_F14R1_FB30 ( -- x addr ) 30 bit CAN2_F14R1 ; \ CAN2_F14R1_FB30, Filter bits
: CAN2_F14R1_FB31 ( -- x addr ) 31 bit CAN2_F14R1 ; \ CAN2_F14R1_FB31, Filter bits

\ CAN2_F14R2 (read-write) Reset:0x00000000
: CAN2_F14R2_FB0 ( -- x addr ) 0 bit CAN2_F14R2 ; \ CAN2_F14R2_FB0, Filter bits
: CAN2_F14R2_FB1 ( -- x addr ) 1 bit CAN2_F14R2 ; \ CAN2_F14R2_FB1, Filter bits
: CAN2_F14R2_FB2 ( -- x addr ) 2 bit CAN2_F14R2 ; \ CAN2_F14R2_FB2, Filter bits
: CAN2_F14R2_FB3 ( -- x addr ) 3 bit CAN2_F14R2 ; \ CAN2_F14R2_FB3, Filter bits
: CAN2_F14R2_FB4 ( -- x addr ) 4 bit CAN2_F14R2 ; \ CAN2_F14R2_FB4, Filter bits
: CAN2_F14R2_FB5 ( -- x addr ) 5 bit CAN2_F14R2 ; \ CAN2_F14R2_FB5, Filter bits
: CAN2_F14R2_FB6 ( -- x addr ) 6 bit CAN2_F14R2 ; \ CAN2_F14R2_FB6, Filter bits
: CAN2_F14R2_FB7 ( -- x addr ) 7 bit CAN2_F14R2 ; \ CAN2_F14R2_FB7, Filter bits
: CAN2_F14R2_FB8 ( -- x addr ) 8 bit CAN2_F14R2 ; \ CAN2_F14R2_FB8, Filter bits
: CAN2_F14R2_FB9 ( -- x addr ) 9 bit CAN2_F14R2 ; \ CAN2_F14R2_FB9, Filter bits
: CAN2_F14R2_FB10 ( -- x addr ) 10 bit CAN2_F14R2 ; \ CAN2_F14R2_FB10, Filter bits
: CAN2_F14R2_FB11 ( -- x addr ) 11 bit CAN2_F14R2 ; \ CAN2_F14R2_FB11, Filter bits
: CAN2_F14R2_FB12 ( -- x addr ) 12 bit CAN2_F14R2 ; \ CAN2_F14R2_FB12, Filter bits
: CAN2_F14R2_FB13 ( -- x addr ) 13 bit CAN2_F14R2 ; \ CAN2_F14R2_FB13, Filter bits
: CAN2_F14R2_FB14 ( -- x addr ) 14 bit CAN2_F14R2 ; \ CAN2_F14R2_FB14, Filter bits
: CAN2_F14R2_FB15 ( -- x addr ) 15 bit CAN2_F14R2 ; \ CAN2_F14R2_FB15, Filter bits
: CAN2_F14R2_FB16 ( -- x addr ) 16 bit CAN2_F14R2 ; \ CAN2_F14R2_FB16, Filter bits
: CAN2_F14R2_FB17 ( -- x addr ) 17 bit CAN2_F14R2 ; \ CAN2_F14R2_FB17, Filter bits
: CAN2_F14R2_FB18 ( -- x addr ) 18 bit CAN2_F14R2 ; \ CAN2_F14R2_FB18, Filter bits
: CAN2_F14R2_FB19 ( -- x addr ) 19 bit CAN2_F14R2 ; \ CAN2_F14R2_FB19, Filter bits
: CAN2_F14R2_FB20 ( -- x addr ) 20 bit CAN2_F14R2 ; \ CAN2_F14R2_FB20, Filter bits
: CAN2_F14R2_FB21 ( -- x addr ) 21 bit CAN2_F14R2 ; \ CAN2_F14R2_FB21, Filter bits
: CAN2_F14R2_FB22 ( -- x addr ) 22 bit CAN2_F14R2 ; \ CAN2_F14R2_FB22, Filter bits
: CAN2_F14R2_FB23 ( -- x addr ) 23 bit CAN2_F14R2 ; \ CAN2_F14R2_FB23, Filter bits
: CAN2_F14R2_FB24 ( -- x addr ) 24 bit CAN2_F14R2 ; \ CAN2_F14R2_FB24, Filter bits
: CAN2_F14R2_FB25 ( -- x addr ) 25 bit CAN2_F14R2 ; \ CAN2_F14R2_FB25, Filter bits
: CAN2_F14R2_FB26 ( -- x addr ) 26 bit CAN2_F14R2 ; \ CAN2_F14R2_FB26, Filter bits
: CAN2_F14R2_FB27 ( -- x addr ) 27 bit CAN2_F14R2 ; \ CAN2_F14R2_FB27, Filter bits
: CAN2_F14R2_FB28 ( -- x addr ) 28 bit CAN2_F14R2 ; \ CAN2_F14R2_FB28, Filter bits
: CAN2_F14R2_FB29 ( -- x addr ) 29 bit CAN2_F14R2 ; \ CAN2_F14R2_FB29, Filter bits
: CAN2_F14R2_FB30 ( -- x addr ) 30 bit CAN2_F14R2 ; \ CAN2_F14R2_FB30, Filter bits
: CAN2_F14R2_FB31 ( -- x addr ) 31 bit CAN2_F14R2 ; \ CAN2_F14R2_FB31, Filter bits

\ CAN2_F15R1 (read-write) Reset:0x00000000
: CAN2_F15R1_FB0 ( -- x addr ) 0 bit CAN2_F15R1 ; \ CAN2_F15R1_FB0, Filter bits
: CAN2_F15R1_FB1 ( -- x addr ) 1 bit CAN2_F15R1 ; \ CAN2_F15R1_FB1, Filter bits
: CAN2_F15R1_FB2 ( -- x addr ) 2 bit CAN2_F15R1 ; \ CAN2_F15R1_FB2, Filter bits
: CAN2_F15R1_FB3 ( -- x addr ) 3 bit CAN2_F15R1 ; \ CAN2_F15R1_FB3, Filter bits
: CAN2_F15R1_FB4 ( -- x addr ) 4 bit CAN2_F15R1 ; \ CAN2_F15R1_FB4, Filter bits
: CAN2_F15R1_FB5 ( -- x addr ) 5 bit CAN2_F15R1 ; \ CAN2_F15R1_FB5, Filter bits
: CAN2_F15R1_FB6 ( -- x addr ) 6 bit CAN2_F15R1 ; \ CAN2_F15R1_FB6, Filter bits
: CAN2_F15R1_FB7 ( -- x addr ) 7 bit CAN2_F15R1 ; \ CAN2_F15R1_FB7, Filter bits
: CAN2_F15R1_FB8 ( -- x addr ) 8 bit CAN2_F15R1 ; \ CAN2_F15R1_FB8, Filter bits
: CAN2_F15R1_FB9 ( -- x addr ) 9 bit CAN2_F15R1 ; \ CAN2_F15R1_FB9, Filter bits
: CAN2_F15R1_FB10 ( -- x addr ) 10 bit CAN2_F15R1 ; \ CAN2_F15R1_FB10, Filter bits
: CAN2_F15R1_FB11 ( -- x addr ) 11 bit CAN2_F15R1 ; \ CAN2_F15R1_FB11, Filter bits
: CAN2_F15R1_FB12 ( -- x addr ) 12 bit CAN2_F15R1 ; \ CAN2_F15R1_FB12, Filter bits
: CAN2_F15R1_FB13 ( -- x addr ) 13 bit CAN2_F15R1 ; \ CAN2_F15R1_FB13, Filter bits
: CAN2_F15R1_FB14 ( -- x addr ) 14 bit CAN2_F15R1 ; \ CAN2_F15R1_FB14, Filter bits
: CAN2_F15R1_FB15 ( -- x addr ) 15 bit CAN2_F15R1 ; \ CAN2_F15R1_FB15, Filter bits
: CAN2_F15R1_FB16 ( -- x addr ) 16 bit CAN2_F15R1 ; \ CAN2_F15R1_FB16, Filter bits
: CAN2_F15R1_FB17 ( -- x addr ) 17 bit CAN2_F15R1 ; \ CAN2_F15R1_FB17, Filter bits
: CAN2_F15R1_FB18 ( -- x addr ) 18 bit CAN2_F15R1 ; \ CAN2_F15R1_FB18, Filter bits
: CAN2_F15R1_FB19 ( -- x addr ) 19 bit CAN2_F15R1 ; \ CAN2_F15R1_FB19, Filter bits
: CAN2_F15R1_FB20 ( -- x addr ) 20 bit CAN2_F15R1 ; \ CAN2_F15R1_FB20, Filter bits
: CAN2_F15R1_FB21 ( -- x addr ) 21 bit CAN2_F15R1 ; \ CAN2_F15R1_FB21, Filter bits
: CAN2_F15R1_FB22 ( -- x addr ) 22 bit CAN2_F15R1 ; \ CAN2_F15R1_FB22, Filter bits
: CAN2_F15R1_FB23 ( -- x addr ) 23 bit CAN2_F15R1 ; \ CAN2_F15R1_FB23, Filter bits
: CAN2_F15R1_FB24 ( -- x addr ) 24 bit CAN2_F15R1 ; \ CAN2_F15R1_FB24, Filter bits
: CAN2_F15R1_FB25 ( -- x addr ) 25 bit CAN2_F15R1 ; \ CAN2_F15R1_FB25, Filter bits
: CAN2_F15R1_FB26 ( -- x addr ) 26 bit CAN2_F15R1 ; \ CAN2_F15R1_FB26, Filter bits
: CAN2_F15R1_FB27 ( -- x addr ) 27 bit CAN2_F15R1 ; \ CAN2_F15R1_FB27, Filter bits
: CAN2_F15R1_FB28 ( -- x addr ) 28 bit CAN2_F15R1 ; \ CAN2_F15R1_FB28, Filter bits
: CAN2_F15R1_FB29 ( -- x addr ) 29 bit CAN2_F15R1 ; \ CAN2_F15R1_FB29, Filter bits
: CAN2_F15R1_FB30 ( -- x addr ) 30 bit CAN2_F15R1 ; \ CAN2_F15R1_FB30, Filter bits
: CAN2_F15R1_FB31 ( -- x addr ) 31 bit CAN2_F15R1 ; \ CAN2_F15R1_FB31, Filter bits

\ CAN2_F15R2 (read-write) Reset:0x00000000
: CAN2_F15R2_FB0 ( -- x addr ) 0 bit CAN2_F15R2 ; \ CAN2_F15R2_FB0, Filter bits
: CAN2_F15R2_FB1 ( -- x addr ) 1 bit CAN2_F15R2 ; \ CAN2_F15R2_FB1, Filter bits
: CAN2_F15R2_FB2 ( -- x addr ) 2 bit CAN2_F15R2 ; \ CAN2_F15R2_FB2, Filter bits
: CAN2_F15R2_FB3 ( -- x addr ) 3 bit CAN2_F15R2 ; \ CAN2_F15R2_FB3, Filter bits
: CAN2_F15R2_FB4 ( -- x addr ) 4 bit CAN2_F15R2 ; \ CAN2_F15R2_FB4, Filter bits
: CAN2_F15R2_FB5 ( -- x addr ) 5 bit CAN2_F15R2 ; \ CAN2_F15R2_FB5, Filter bits
: CAN2_F15R2_FB6 ( -- x addr ) 6 bit CAN2_F15R2 ; \ CAN2_F15R2_FB6, Filter bits
: CAN2_F15R2_FB7 ( -- x addr ) 7 bit CAN2_F15R2 ; \ CAN2_F15R2_FB7, Filter bits
: CAN2_F15R2_FB8 ( -- x addr ) 8 bit CAN2_F15R2 ; \ CAN2_F15R2_FB8, Filter bits
: CAN2_F15R2_FB9 ( -- x addr ) 9 bit CAN2_F15R2 ; \ CAN2_F15R2_FB9, Filter bits
: CAN2_F15R2_FB10 ( -- x addr ) 10 bit CAN2_F15R2 ; \ CAN2_F15R2_FB10, Filter bits
: CAN2_F15R2_FB11 ( -- x addr ) 11 bit CAN2_F15R2 ; \ CAN2_F15R2_FB11, Filter bits
: CAN2_F15R2_FB12 ( -- x addr ) 12 bit CAN2_F15R2 ; \ CAN2_F15R2_FB12, Filter bits
: CAN2_F15R2_FB13 ( -- x addr ) 13 bit CAN2_F15R2 ; \ CAN2_F15R2_FB13, Filter bits
: CAN2_F15R2_FB14 ( -- x addr ) 14 bit CAN2_F15R2 ; \ CAN2_F15R2_FB14, Filter bits
: CAN2_F15R2_FB15 ( -- x addr ) 15 bit CAN2_F15R2 ; \ CAN2_F15R2_FB15, Filter bits
: CAN2_F15R2_FB16 ( -- x addr ) 16 bit CAN2_F15R2 ; \ CAN2_F15R2_FB16, Filter bits
: CAN2_F15R2_FB17 ( -- x addr ) 17 bit CAN2_F15R2 ; \ CAN2_F15R2_FB17, Filter bits
: CAN2_F15R2_FB18 ( -- x addr ) 18 bit CAN2_F15R2 ; \ CAN2_F15R2_FB18, Filter bits
: CAN2_F15R2_FB19 ( -- x addr ) 19 bit CAN2_F15R2 ; \ CAN2_F15R2_FB19, Filter bits
: CAN2_F15R2_FB20 ( -- x addr ) 20 bit CAN2_F15R2 ; \ CAN2_F15R2_FB20, Filter bits
: CAN2_F15R2_FB21 ( -- x addr ) 21 bit CAN2_F15R2 ; \ CAN2_F15R2_FB21, Filter bits
: CAN2_F15R2_FB22 ( -- x addr ) 22 bit CAN2_F15R2 ; \ CAN2_F15R2_FB22, Filter bits
: CAN2_F15R2_FB23 ( -- x addr ) 23 bit CAN2_F15R2 ; \ CAN2_F15R2_FB23, Filter bits
: CAN2_F15R2_FB24 ( -- x addr ) 24 bit CAN2_F15R2 ; \ CAN2_F15R2_FB24, Filter bits
: CAN2_F15R2_FB25 ( -- x addr ) 25 bit CAN2_F15R2 ; \ CAN2_F15R2_FB25, Filter bits
: CAN2_F15R2_FB26 ( -- x addr ) 26 bit CAN2_F15R2 ; \ CAN2_F15R2_FB26, Filter bits
: CAN2_F15R2_FB27 ( -- x addr ) 27 bit CAN2_F15R2 ; \ CAN2_F15R2_FB27, Filter bits
: CAN2_F15R2_FB28 ( -- x addr ) 28 bit CAN2_F15R2 ; \ CAN2_F15R2_FB28, Filter bits
: CAN2_F15R2_FB29 ( -- x addr ) 29 bit CAN2_F15R2 ; \ CAN2_F15R2_FB29, Filter bits
: CAN2_F15R2_FB30 ( -- x addr ) 30 bit CAN2_F15R2 ; \ CAN2_F15R2_FB30, Filter bits
: CAN2_F15R2_FB31 ( -- x addr ) 31 bit CAN2_F15R2 ; \ CAN2_F15R2_FB31, Filter bits

\ CAN2_F16R1 (read-write) Reset:0x00000000
: CAN2_F16R1_FB0 ( -- x addr ) 0 bit CAN2_F16R1 ; \ CAN2_F16R1_FB0, Filter bits
: CAN2_F16R1_FB1 ( -- x addr ) 1 bit CAN2_F16R1 ; \ CAN2_F16R1_FB1, Filter bits
: CAN2_F16R1_FB2 ( -- x addr ) 2 bit CAN2_F16R1 ; \ CAN2_F16R1_FB2, Filter bits
: CAN2_F16R1_FB3 ( -- x addr ) 3 bit CAN2_F16R1 ; \ CAN2_F16R1_FB3, Filter bits
: CAN2_F16R1_FB4 ( -- x addr ) 4 bit CAN2_F16R1 ; \ CAN2_F16R1_FB4, Filter bits
: CAN2_F16R1_FB5 ( -- x addr ) 5 bit CAN2_F16R1 ; \ CAN2_F16R1_FB5, Filter bits
: CAN2_F16R1_FB6 ( -- x addr ) 6 bit CAN2_F16R1 ; \ CAN2_F16R1_FB6, Filter bits
: CAN2_F16R1_FB7 ( -- x addr ) 7 bit CAN2_F16R1 ; \ CAN2_F16R1_FB7, Filter bits
: CAN2_F16R1_FB8 ( -- x addr ) 8 bit CAN2_F16R1 ; \ CAN2_F16R1_FB8, Filter bits
: CAN2_F16R1_FB9 ( -- x addr ) 9 bit CAN2_F16R1 ; \ CAN2_F16R1_FB9, Filter bits
: CAN2_F16R1_FB10 ( -- x addr ) 10 bit CAN2_F16R1 ; \ CAN2_F16R1_FB10, Filter bits
: CAN2_F16R1_FB11 ( -- x addr ) 11 bit CAN2_F16R1 ; \ CAN2_F16R1_FB11, Filter bits
: CAN2_F16R1_FB12 ( -- x addr ) 12 bit CAN2_F16R1 ; \ CAN2_F16R1_FB12, Filter bits
: CAN2_F16R1_FB13 ( -- x addr ) 13 bit CAN2_F16R1 ; \ CAN2_F16R1_FB13, Filter bits
: CAN2_F16R1_FB14 ( -- x addr ) 14 bit CAN2_F16R1 ; \ CAN2_F16R1_FB14, Filter bits
: CAN2_F16R1_FB15 ( -- x addr ) 15 bit CAN2_F16R1 ; \ CAN2_F16R1_FB15, Filter bits
: CAN2_F16R1_FB16 ( -- x addr ) 16 bit CAN2_F16R1 ; \ CAN2_F16R1_FB16, Filter bits
: CAN2_F16R1_FB17 ( -- x addr ) 17 bit CAN2_F16R1 ; \ CAN2_F16R1_FB17, Filter bits
: CAN2_F16R1_FB18 ( -- x addr ) 18 bit CAN2_F16R1 ; \ CAN2_F16R1_FB18, Filter bits
: CAN2_F16R1_FB19 ( -- x addr ) 19 bit CAN2_F16R1 ; \ CAN2_F16R1_FB19, Filter bits
: CAN2_F16R1_FB20 ( -- x addr ) 20 bit CAN2_F16R1 ; \ CAN2_F16R1_FB20, Filter bits
: CAN2_F16R1_FB21 ( -- x addr ) 21 bit CAN2_F16R1 ; \ CAN2_F16R1_FB21, Filter bits
: CAN2_F16R1_FB22 ( -- x addr ) 22 bit CAN2_F16R1 ; \ CAN2_F16R1_FB22, Filter bits
: CAN2_F16R1_FB23 ( -- x addr ) 23 bit CAN2_F16R1 ; \ CAN2_F16R1_FB23, Filter bits
: CAN2_F16R1_FB24 ( -- x addr ) 24 bit CAN2_F16R1 ; \ CAN2_F16R1_FB24, Filter bits
: CAN2_F16R1_FB25 ( -- x addr ) 25 bit CAN2_F16R1 ; \ CAN2_F16R1_FB25, Filter bits
: CAN2_F16R1_FB26 ( -- x addr ) 26 bit CAN2_F16R1 ; \ CAN2_F16R1_FB26, Filter bits
: CAN2_F16R1_FB27 ( -- x addr ) 27 bit CAN2_F16R1 ; \ CAN2_F16R1_FB27, Filter bits
: CAN2_F16R1_FB28 ( -- x addr ) 28 bit CAN2_F16R1 ; \ CAN2_F16R1_FB28, Filter bits
: CAN2_F16R1_FB29 ( -- x addr ) 29 bit CAN2_F16R1 ; \ CAN2_F16R1_FB29, Filter bits
: CAN2_F16R1_FB30 ( -- x addr ) 30 bit CAN2_F16R1 ; \ CAN2_F16R1_FB30, Filter bits
: CAN2_F16R1_FB31 ( -- x addr ) 31 bit CAN2_F16R1 ; \ CAN2_F16R1_FB31, Filter bits

\ CAN2_F16R2 (read-write) Reset:0x00000000
: CAN2_F16R2_FB0 ( -- x addr ) 0 bit CAN2_F16R2 ; \ CAN2_F16R2_FB0, Filter bits
: CAN2_F16R2_FB1 ( -- x addr ) 1 bit CAN2_F16R2 ; \ CAN2_F16R2_FB1, Filter bits
: CAN2_F16R2_FB2 ( -- x addr ) 2 bit CAN2_F16R2 ; \ CAN2_F16R2_FB2, Filter bits
: CAN2_F16R2_FB3 ( -- x addr ) 3 bit CAN2_F16R2 ; \ CAN2_F16R2_FB3, Filter bits
: CAN2_F16R2_FB4 ( -- x addr ) 4 bit CAN2_F16R2 ; \ CAN2_F16R2_FB4, Filter bits
: CAN2_F16R2_FB5 ( -- x addr ) 5 bit CAN2_F16R2 ; \ CAN2_F16R2_FB5, Filter bits
: CAN2_F16R2_FB6 ( -- x addr ) 6 bit CAN2_F16R2 ; \ CAN2_F16R2_FB6, Filter bits
: CAN2_F16R2_FB7 ( -- x addr ) 7 bit CAN2_F16R2 ; \ CAN2_F16R2_FB7, Filter bits
: CAN2_F16R2_FB8 ( -- x addr ) 8 bit CAN2_F16R2 ; \ CAN2_F16R2_FB8, Filter bits
: CAN2_F16R2_FB9 ( -- x addr ) 9 bit CAN2_F16R2 ; \ CAN2_F16R2_FB9, Filter bits
: CAN2_F16R2_FB10 ( -- x addr ) 10 bit CAN2_F16R2 ; \ CAN2_F16R2_FB10, Filter bits
: CAN2_F16R2_FB11 ( -- x addr ) 11 bit CAN2_F16R2 ; \ CAN2_F16R2_FB11, Filter bits
: CAN2_F16R2_FB12 ( -- x addr ) 12 bit CAN2_F16R2 ; \ CAN2_F16R2_FB12, Filter bits
: CAN2_F16R2_FB13 ( -- x addr ) 13 bit CAN2_F16R2 ; \ CAN2_F16R2_FB13, Filter bits
: CAN2_F16R2_FB14 ( -- x addr ) 14 bit CAN2_F16R2 ; \ CAN2_F16R2_FB14, Filter bits
: CAN2_F16R2_FB15 ( -- x addr ) 15 bit CAN2_F16R2 ; \ CAN2_F16R2_FB15, Filter bits
: CAN2_F16R2_FB16 ( -- x addr ) 16 bit CAN2_F16R2 ; \ CAN2_F16R2_FB16, Filter bits
: CAN2_F16R2_FB17 ( -- x addr ) 17 bit CAN2_F16R2 ; \ CAN2_F16R2_FB17, Filter bits
: CAN2_F16R2_FB18 ( -- x addr ) 18 bit CAN2_F16R2 ; \ CAN2_F16R2_FB18, Filter bits
: CAN2_F16R2_FB19 ( -- x addr ) 19 bit CAN2_F16R2 ; \ CAN2_F16R2_FB19, Filter bits
: CAN2_F16R2_FB20 ( -- x addr ) 20 bit CAN2_F16R2 ; \ CAN2_F16R2_FB20, Filter bits
: CAN2_F16R2_FB21 ( -- x addr ) 21 bit CAN2_F16R2 ; \ CAN2_F16R2_FB21, Filter bits
: CAN2_F16R2_FB22 ( -- x addr ) 22 bit CAN2_F16R2 ; \ CAN2_F16R2_FB22, Filter bits
: CAN2_F16R2_FB23 ( -- x addr ) 23 bit CAN2_F16R2 ; \ CAN2_F16R2_FB23, Filter bits
: CAN2_F16R2_FB24 ( -- x addr ) 24 bit CAN2_F16R2 ; \ CAN2_F16R2_FB24, Filter bits
: CAN2_F16R2_FB25 ( -- x addr ) 25 bit CAN2_F16R2 ; \ CAN2_F16R2_FB25, Filter bits
: CAN2_F16R2_FB26 ( -- x addr ) 26 bit CAN2_F16R2 ; \ CAN2_F16R2_FB26, Filter bits
: CAN2_F16R2_FB27 ( -- x addr ) 27 bit CAN2_F16R2 ; \ CAN2_F16R2_FB27, Filter bits
: CAN2_F16R2_FB28 ( -- x addr ) 28 bit CAN2_F16R2 ; \ CAN2_F16R2_FB28, Filter bits
: CAN2_F16R2_FB29 ( -- x addr ) 29 bit CAN2_F16R2 ; \ CAN2_F16R2_FB29, Filter bits
: CAN2_F16R2_FB30 ( -- x addr ) 30 bit CAN2_F16R2 ; \ CAN2_F16R2_FB30, Filter bits
: CAN2_F16R2_FB31 ( -- x addr ) 31 bit CAN2_F16R2 ; \ CAN2_F16R2_FB31, Filter bits

\ CAN2_F17R1 (read-write) Reset:0x00000000
: CAN2_F17R1_FB0 ( -- x addr ) 0 bit CAN2_F17R1 ; \ CAN2_F17R1_FB0, Filter bits
: CAN2_F17R1_FB1 ( -- x addr ) 1 bit CAN2_F17R1 ; \ CAN2_F17R1_FB1, Filter bits
: CAN2_F17R1_FB2 ( -- x addr ) 2 bit CAN2_F17R1 ; \ CAN2_F17R1_FB2, Filter bits
: CAN2_F17R1_FB3 ( -- x addr ) 3 bit CAN2_F17R1 ; \ CAN2_F17R1_FB3, Filter bits
: CAN2_F17R1_FB4 ( -- x addr ) 4 bit CAN2_F17R1 ; \ CAN2_F17R1_FB4, Filter bits
: CAN2_F17R1_FB5 ( -- x addr ) 5 bit CAN2_F17R1 ; \ CAN2_F17R1_FB5, Filter bits
: CAN2_F17R1_FB6 ( -- x addr ) 6 bit CAN2_F17R1 ; \ CAN2_F17R1_FB6, Filter bits
: CAN2_F17R1_FB7 ( -- x addr ) 7 bit CAN2_F17R1 ; \ CAN2_F17R1_FB7, Filter bits
: CAN2_F17R1_FB8 ( -- x addr ) 8 bit CAN2_F17R1 ; \ CAN2_F17R1_FB8, Filter bits
: CAN2_F17R1_FB9 ( -- x addr ) 9 bit CAN2_F17R1 ; \ CAN2_F17R1_FB9, Filter bits
: CAN2_F17R1_FB10 ( -- x addr ) 10 bit CAN2_F17R1 ; \ CAN2_F17R1_FB10, Filter bits
: CAN2_F17R1_FB11 ( -- x addr ) 11 bit CAN2_F17R1 ; \ CAN2_F17R1_FB11, Filter bits
: CAN2_F17R1_FB12 ( -- x addr ) 12 bit CAN2_F17R1 ; \ CAN2_F17R1_FB12, Filter bits
: CAN2_F17R1_FB13 ( -- x addr ) 13 bit CAN2_F17R1 ; \ CAN2_F17R1_FB13, Filter bits
: CAN2_F17R1_FB14 ( -- x addr ) 14 bit CAN2_F17R1 ; \ CAN2_F17R1_FB14, Filter bits
: CAN2_F17R1_FB15 ( -- x addr ) 15 bit CAN2_F17R1 ; \ CAN2_F17R1_FB15, Filter bits
: CAN2_F17R1_FB16 ( -- x addr ) 16 bit CAN2_F17R1 ; \ CAN2_F17R1_FB16, Filter bits
: CAN2_F17R1_FB17 ( -- x addr ) 17 bit CAN2_F17R1 ; \ CAN2_F17R1_FB17, Filter bits
: CAN2_F17R1_FB18 ( -- x addr ) 18 bit CAN2_F17R1 ; \ CAN2_F17R1_FB18, Filter bits
: CAN2_F17R1_FB19 ( -- x addr ) 19 bit CAN2_F17R1 ; \ CAN2_F17R1_FB19, Filter bits
: CAN2_F17R1_FB20 ( -- x addr ) 20 bit CAN2_F17R1 ; \ CAN2_F17R1_FB20, Filter bits
: CAN2_F17R1_FB21 ( -- x addr ) 21 bit CAN2_F17R1 ; \ CAN2_F17R1_FB21, Filter bits
: CAN2_F17R1_FB22 ( -- x addr ) 22 bit CAN2_F17R1 ; \ CAN2_F17R1_FB22, Filter bits
: CAN2_F17R1_FB23 ( -- x addr ) 23 bit CAN2_F17R1 ; \ CAN2_F17R1_FB23, Filter bits
: CAN2_F17R1_FB24 ( -- x addr ) 24 bit CAN2_F17R1 ; \ CAN2_F17R1_FB24, Filter bits
: CAN2_F17R1_FB25 ( -- x addr ) 25 bit CAN2_F17R1 ; \ CAN2_F17R1_FB25, Filter bits
: CAN2_F17R1_FB26 ( -- x addr ) 26 bit CAN2_F17R1 ; \ CAN2_F17R1_FB26, Filter bits
: CAN2_F17R1_FB27 ( -- x addr ) 27 bit CAN2_F17R1 ; \ CAN2_F17R1_FB27, Filter bits
: CAN2_F17R1_FB28 ( -- x addr ) 28 bit CAN2_F17R1 ; \ CAN2_F17R1_FB28, Filter bits
: CAN2_F17R1_FB29 ( -- x addr ) 29 bit CAN2_F17R1 ; \ CAN2_F17R1_FB29, Filter bits
: CAN2_F17R1_FB30 ( -- x addr ) 30 bit CAN2_F17R1 ; \ CAN2_F17R1_FB30, Filter bits
: CAN2_F17R1_FB31 ( -- x addr ) 31 bit CAN2_F17R1 ; \ CAN2_F17R1_FB31, Filter bits

\ CAN2_F17R2 (read-write) Reset:0x00000000
: CAN2_F17R2_FB0 ( -- x addr ) 0 bit CAN2_F17R2 ; \ CAN2_F17R2_FB0, Filter bits
: CAN2_F17R2_FB1 ( -- x addr ) 1 bit CAN2_F17R2 ; \ CAN2_F17R2_FB1, Filter bits
: CAN2_F17R2_FB2 ( -- x addr ) 2 bit CAN2_F17R2 ; \ CAN2_F17R2_FB2, Filter bits
: CAN2_F17R2_FB3 ( -- x addr ) 3 bit CAN2_F17R2 ; \ CAN2_F17R2_FB3, Filter bits
: CAN2_F17R2_FB4 ( -- x addr ) 4 bit CAN2_F17R2 ; \ CAN2_F17R2_FB4, Filter bits
: CAN2_F17R2_FB5 ( -- x addr ) 5 bit CAN2_F17R2 ; \ CAN2_F17R2_FB5, Filter bits
: CAN2_F17R2_FB6 ( -- x addr ) 6 bit CAN2_F17R2 ; \ CAN2_F17R2_FB6, Filter bits
: CAN2_F17R2_FB7 ( -- x addr ) 7 bit CAN2_F17R2 ; \ CAN2_F17R2_FB7, Filter bits
: CAN2_F17R2_FB8 ( -- x addr ) 8 bit CAN2_F17R2 ; \ CAN2_F17R2_FB8, Filter bits
: CAN2_F17R2_FB9 ( -- x addr ) 9 bit CAN2_F17R2 ; \ CAN2_F17R2_FB9, Filter bits
: CAN2_F17R2_FB10 ( -- x addr ) 10 bit CAN2_F17R2 ; \ CAN2_F17R2_FB10, Filter bits
: CAN2_F17R2_FB11 ( -- x addr ) 11 bit CAN2_F17R2 ; \ CAN2_F17R2_FB11, Filter bits
: CAN2_F17R2_FB12 ( -- x addr ) 12 bit CAN2_F17R2 ; \ CAN2_F17R2_FB12, Filter bits
: CAN2_F17R2_FB13 ( -- x addr ) 13 bit CAN2_F17R2 ; \ CAN2_F17R2_FB13, Filter bits
: CAN2_F17R2_FB14 ( -- x addr ) 14 bit CAN2_F17R2 ; \ CAN2_F17R2_FB14, Filter bits
: CAN2_F17R2_FB15 ( -- x addr ) 15 bit CAN2_F17R2 ; \ CAN2_F17R2_FB15, Filter bits
: CAN2_F17R2_FB16 ( -- x addr ) 16 bit CAN2_F17R2 ; \ CAN2_F17R2_FB16, Filter bits
: CAN2_F17R2_FB17 ( -- x addr ) 17 bit CAN2_F17R2 ; \ CAN2_F17R2_FB17, Filter bits
: CAN2_F17R2_FB18 ( -- x addr ) 18 bit CAN2_F17R2 ; \ CAN2_F17R2_FB18, Filter bits
: CAN2_F17R2_FB19 ( -- x addr ) 19 bit CAN2_F17R2 ; \ CAN2_F17R2_FB19, Filter bits
: CAN2_F17R2_FB20 ( -- x addr ) 20 bit CAN2_F17R2 ; \ CAN2_F17R2_FB20, Filter bits
: CAN2_F17R2_FB21 ( -- x addr ) 21 bit CAN2_F17R2 ; \ CAN2_F17R2_FB21, Filter bits
: CAN2_F17R2_FB22 ( -- x addr ) 22 bit CAN2_F17R2 ; \ CAN2_F17R2_FB22, Filter bits
: CAN2_F17R2_FB23 ( -- x addr ) 23 bit CAN2_F17R2 ; \ CAN2_F17R2_FB23, Filter bits
: CAN2_F17R2_FB24 ( -- x addr ) 24 bit CAN2_F17R2 ; \ CAN2_F17R2_FB24, Filter bits
: CAN2_F17R2_FB25 ( -- x addr ) 25 bit CAN2_F17R2 ; \ CAN2_F17R2_FB25, Filter bits
: CAN2_F17R2_FB26 ( -- x addr ) 26 bit CAN2_F17R2 ; \ CAN2_F17R2_FB26, Filter bits
: CAN2_F17R2_FB27 ( -- x addr ) 27 bit CAN2_F17R2 ; \ CAN2_F17R2_FB27, Filter bits
: CAN2_F17R2_FB28 ( -- x addr ) 28 bit CAN2_F17R2 ; \ CAN2_F17R2_FB28, Filter bits
: CAN2_F17R2_FB29 ( -- x addr ) 29 bit CAN2_F17R2 ; \ CAN2_F17R2_FB29, Filter bits
: CAN2_F17R2_FB30 ( -- x addr ) 30 bit CAN2_F17R2 ; \ CAN2_F17R2_FB30, Filter bits
: CAN2_F17R2_FB31 ( -- x addr ) 31 bit CAN2_F17R2 ; \ CAN2_F17R2_FB31, Filter bits

\ CAN2_F18R1 (read-write) Reset:0x00000000
: CAN2_F18R1_FB0 ( -- x addr ) 0 bit CAN2_F18R1 ; \ CAN2_F18R1_FB0, Filter bits
: CAN2_F18R1_FB1 ( -- x addr ) 1 bit CAN2_F18R1 ; \ CAN2_F18R1_FB1, Filter bits
: CAN2_F18R1_FB2 ( -- x addr ) 2 bit CAN2_F18R1 ; \ CAN2_F18R1_FB2, Filter bits
: CAN2_F18R1_FB3 ( -- x addr ) 3 bit CAN2_F18R1 ; \ CAN2_F18R1_FB3, Filter bits
: CAN2_F18R1_FB4 ( -- x addr ) 4 bit CAN2_F18R1 ; \ CAN2_F18R1_FB4, Filter bits
: CAN2_F18R1_FB5 ( -- x addr ) 5 bit CAN2_F18R1 ; \ CAN2_F18R1_FB5, Filter bits
: CAN2_F18R1_FB6 ( -- x addr ) 6 bit CAN2_F18R1 ; \ CAN2_F18R1_FB6, Filter bits
: CAN2_F18R1_FB7 ( -- x addr ) 7 bit CAN2_F18R1 ; \ CAN2_F18R1_FB7, Filter bits
: CAN2_F18R1_FB8 ( -- x addr ) 8 bit CAN2_F18R1 ; \ CAN2_F18R1_FB8, Filter bits
: CAN2_F18R1_FB9 ( -- x addr ) 9 bit CAN2_F18R1 ; \ CAN2_F18R1_FB9, Filter bits
: CAN2_F18R1_FB10 ( -- x addr ) 10 bit CAN2_F18R1 ; \ CAN2_F18R1_FB10, Filter bits
: CAN2_F18R1_FB11 ( -- x addr ) 11 bit CAN2_F18R1 ; \ CAN2_F18R1_FB11, Filter bits
: CAN2_F18R1_FB12 ( -- x addr ) 12 bit CAN2_F18R1 ; \ CAN2_F18R1_FB12, Filter bits
: CAN2_F18R1_FB13 ( -- x addr ) 13 bit CAN2_F18R1 ; \ CAN2_F18R1_FB13, Filter bits
: CAN2_F18R1_FB14 ( -- x addr ) 14 bit CAN2_F18R1 ; \ CAN2_F18R1_FB14, Filter bits
: CAN2_F18R1_FB15 ( -- x addr ) 15 bit CAN2_F18R1 ; \ CAN2_F18R1_FB15, Filter bits
: CAN2_F18R1_FB16 ( -- x addr ) 16 bit CAN2_F18R1 ; \ CAN2_F18R1_FB16, Filter bits
: CAN2_F18R1_FB17 ( -- x addr ) 17 bit CAN2_F18R1 ; \ CAN2_F18R1_FB17, Filter bits
: CAN2_F18R1_FB18 ( -- x addr ) 18 bit CAN2_F18R1 ; \ CAN2_F18R1_FB18, Filter bits
: CAN2_F18R1_FB19 ( -- x addr ) 19 bit CAN2_F18R1 ; \ CAN2_F18R1_FB19, Filter bits
: CAN2_F18R1_FB20 ( -- x addr ) 20 bit CAN2_F18R1 ; \ CAN2_F18R1_FB20, Filter bits
: CAN2_F18R1_FB21 ( -- x addr ) 21 bit CAN2_F18R1 ; \ CAN2_F18R1_FB21, Filter bits
: CAN2_F18R1_FB22 ( -- x addr ) 22 bit CAN2_F18R1 ; \ CAN2_F18R1_FB22, Filter bits
: CAN2_F18R1_FB23 ( -- x addr ) 23 bit CAN2_F18R1 ; \ CAN2_F18R1_FB23, Filter bits
: CAN2_F18R1_FB24 ( -- x addr ) 24 bit CAN2_F18R1 ; \ CAN2_F18R1_FB24, Filter bits
: CAN2_F18R1_FB25 ( -- x addr ) 25 bit CAN2_F18R1 ; \ CAN2_F18R1_FB25, Filter bits
: CAN2_F18R1_FB26 ( -- x addr ) 26 bit CAN2_F18R1 ; \ CAN2_F18R1_FB26, Filter bits
: CAN2_F18R1_FB27 ( -- x addr ) 27 bit CAN2_F18R1 ; \ CAN2_F18R1_FB27, Filter bits
: CAN2_F18R1_FB28 ( -- x addr ) 28 bit CAN2_F18R1 ; \ CAN2_F18R1_FB28, Filter bits
: CAN2_F18R1_FB29 ( -- x addr ) 29 bit CAN2_F18R1 ; \ CAN2_F18R1_FB29, Filter bits
: CAN2_F18R1_FB30 ( -- x addr ) 30 bit CAN2_F18R1 ; \ CAN2_F18R1_FB30, Filter bits
: CAN2_F18R1_FB31 ( -- x addr ) 31 bit CAN2_F18R1 ; \ CAN2_F18R1_FB31, Filter bits

\ CAN2_F18R2 (read-write) Reset:0x00000000
: CAN2_F18R2_FB0 ( -- x addr ) 0 bit CAN2_F18R2 ; \ CAN2_F18R2_FB0, Filter bits
: CAN2_F18R2_FB1 ( -- x addr ) 1 bit CAN2_F18R2 ; \ CAN2_F18R2_FB1, Filter bits
: CAN2_F18R2_FB2 ( -- x addr ) 2 bit CAN2_F18R2 ; \ CAN2_F18R2_FB2, Filter bits
: CAN2_F18R2_FB3 ( -- x addr ) 3 bit CAN2_F18R2 ; \ CAN2_F18R2_FB3, Filter bits
: CAN2_F18R2_FB4 ( -- x addr ) 4 bit CAN2_F18R2 ; \ CAN2_F18R2_FB4, Filter bits
: CAN2_F18R2_FB5 ( -- x addr ) 5 bit CAN2_F18R2 ; \ CAN2_F18R2_FB5, Filter bits
: CAN2_F18R2_FB6 ( -- x addr ) 6 bit CAN2_F18R2 ; \ CAN2_F18R2_FB6, Filter bits
: CAN2_F18R2_FB7 ( -- x addr ) 7 bit CAN2_F18R2 ; \ CAN2_F18R2_FB7, Filter bits
: CAN2_F18R2_FB8 ( -- x addr ) 8 bit CAN2_F18R2 ; \ CAN2_F18R2_FB8, Filter bits
: CAN2_F18R2_FB9 ( -- x addr ) 9 bit CAN2_F18R2 ; \ CAN2_F18R2_FB9, Filter bits
: CAN2_F18R2_FB10 ( -- x addr ) 10 bit CAN2_F18R2 ; \ CAN2_F18R2_FB10, Filter bits
: CAN2_F18R2_FB11 ( -- x addr ) 11 bit CAN2_F18R2 ; \ CAN2_F18R2_FB11, Filter bits
: CAN2_F18R2_FB12 ( -- x addr ) 12 bit CAN2_F18R2 ; \ CAN2_F18R2_FB12, Filter bits
: CAN2_F18R2_FB13 ( -- x addr ) 13 bit CAN2_F18R2 ; \ CAN2_F18R2_FB13, Filter bits
: CAN2_F18R2_FB14 ( -- x addr ) 14 bit CAN2_F18R2 ; \ CAN2_F18R2_FB14, Filter bits
: CAN2_F18R2_FB15 ( -- x addr ) 15 bit CAN2_F18R2 ; \ CAN2_F18R2_FB15, Filter bits
: CAN2_F18R2_FB16 ( -- x addr ) 16 bit CAN2_F18R2 ; \ CAN2_F18R2_FB16, Filter bits
: CAN2_F18R2_FB17 ( -- x addr ) 17 bit CAN2_F18R2 ; \ CAN2_F18R2_FB17, Filter bits
: CAN2_F18R2_FB18 ( -- x addr ) 18 bit CAN2_F18R2 ; \ CAN2_F18R2_FB18, Filter bits
: CAN2_F18R2_FB19 ( -- x addr ) 19 bit CAN2_F18R2 ; \ CAN2_F18R2_FB19, Filter bits
: CAN2_F18R2_FB20 ( -- x addr ) 20 bit CAN2_F18R2 ; \ CAN2_F18R2_FB20, Filter bits
: CAN2_F18R2_FB21 ( -- x addr ) 21 bit CAN2_F18R2 ; \ CAN2_F18R2_FB21, Filter bits
: CAN2_F18R2_FB22 ( -- x addr ) 22 bit CAN2_F18R2 ; \ CAN2_F18R2_FB22, Filter bits
: CAN2_F18R2_FB23 ( -- x addr ) 23 bit CAN2_F18R2 ; \ CAN2_F18R2_FB23, Filter bits
: CAN2_F18R2_FB24 ( -- x addr ) 24 bit CAN2_F18R2 ; \ CAN2_F18R2_FB24, Filter bits
: CAN2_F18R2_FB25 ( -- x addr ) 25 bit CAN2_F18R2 ; \ CAN2_F18R2_FB25, Filter bits
: CAN2_F18R2_FB26 ( -- x addr ) 26 bit CAN2_F18R2 ; \ CAN2_F18R2_FB26, Filter bits
: CAN2_F18R2_FB27 ( -- x addr ) 27 bit CAN2_F18R2 ; \ CAN2_F18R2_FB27, Filter bits
: CAN2_F18R2_FB28 ( -- x addr ) 28 bit CAN2_F18R2 ; \ CAN2_F18R2_FB28, Filter bits
: CAN2_F18R2_FB29 ( -- x addr ) 29 bit CAN2_F18R2 ; \ CAN2_F18R2_FB29, Filter bits
: CAN2_F18R2_FB30 ( -- x addr ) 30 bit CAN2_F18R2 ; \ CAN2_F18R2_FB30, Filter bits
: CAN2_F18R2_FB31 ( -- x addr ) 31 bit CAN2_F18R2 ; \ CAN2_F18R2_FB31, Filter bits

\ CAN2_F19R1 (read-write) Reset:0x00000000
: CAN2_F19R1_FB0 ( -- x addr ) 0 bit CAN2_F19R1 ; \ CAN2_F19R1_FB0, Filter bits
: CAN2_F19R1_FB1 ( -- x addr ) 1 bit CAN2_F19R1 ; \ CAN2_F19R1_FB1, Filter bits
: CAN2_F19R1_FB2 ( -- x addr ) 2 bit CAN2_F19R1 ; \ CAN2_F19R1_FB2, Filter bits
: CAN2_F19R1_FB3 ( -- x addr ) 3 bit CAN2_F19R1 ; \ CAN2_F19R1_FB3, Filter bits
: CAN2_F19R1_FB4 ( -- x addr ) 4 bit CAN2_F19R1 ; \ CAN2_F19R1_FB4, Filter bits
: CAN2_F19R1_FB5 ( -- x addr ) 5 bit CAN2_F19R1 ; \ CAN2_F19R1_FB5, Filter bits
: CAN2_F19R1_FB6 ( -- x addr ) 6 bit CAN2_F19R1 ; \ CAN2_F19R1_FB6, Filter bits
: CAN2_F19R1_FB7 ( -- x addr ) 7 bit CAN2_F19R1 ; \ CAN2_F19R1_FB7, Filter bits
: CAN2_F19R1_FB8 ( -- x addr ) 8 bit CAN2_F19R1 ; \ CAN2_F19R1_FB8, Filter bits
: CAN2_F19R1_FB9 ( -- x addr ) 9 bit CAN2_F19R1 ; \ CAN2_F19R1_FB9, Filter bits
: CAN2_F19R1_FB10 ( -- x addr ) 10 bit CAN2_F19R1 ; \ CAN2_F19R1_FB10, Filter bits
: CAN2_F19R1_FB11 ( -- x addr ) 11 bit CAN2_F19R1 ; \ CAN2_F19R1_FB11, Filter bits
: CAN2_F19R1_FB12 ( -- x addr ) 12 bit CAN2_F19R1 ; \ CAN2_F19R1_FB12, Filter bits
: CAN2_F19R1_FB13 ( -- x addr ) 13 bit CAN2_F19R1 ; \ CAN2_F19R1_FB13, Filter bits
: CAN2_F19R1_FB14 ( -- x addr ) 14 bit CAN2_F19R1 ; \ CAN2_F19R1_FB14, Filter bits
: CAN2_F19R1_FB15 ( -- x addr ) 15 bit CAN2_F19R1 ; \ CAN2_F19R1_FB15, Filter bits
: CAN2_F19R1_FB16 ( -- x addr ) 16 bit CAN2_F19R1 ; \ CAN2_F19R1_FB16, Filter bits
: CAN2_F19R1_FB17 ( -- x addr ) 17 bit CAN2_F19R1 ; \ CAN2_F19R1_FB17, Filter bits
: CAN2_F19R1_FB18 ( -- x addr ) 18 bit CAN2_F19R1 ; \ CAN2_F19R1_FB18, Filter bits
: CAN2_F19R1_FB19 ( -- x addr ) 19 bit CAN2_F19R1 ; \ CAN2_F19R1_FB19, Filter bits
: CAN2_F19R1_FB20 ( -- x addr ) 20 bit CAN2_F19R1 ; \ CAN2_F19R1_FB20, Filter bits
: CAN2_F19R1_FB21 ( -- x addr ) 21 bit CAN2_F19R1 ; \ CAN2_F19R1_FB21, Filter bits
: CAN2_F19R1_FB22 ( -- x addr ) 22 bit CAN2_F19R1 ; \ CAN2_F19R1_FB22, Filter bits
: CAN2_F19R1_FB23 ( -- x addr ) 23 bit CAN2_F19R1 ; \ CAN2_F19R1_FB23, Filter bits
: CAN2_F19R1_FB24 ( -- x addr ) 24 bit CAN2_F19R1 ; \ CAN2_F19R1_FB24, Filter bits
: CAN2_F19R1_FB25 ( -- x addr ) 25 bit CAN2_F19R1 ; \ CAN2_F19R1_FB25, Filter bits
: CAN2_F19R1_FB26 ( -- x addr ) 26 bit CAN2_F19R1 ; \ CAN2_F19R1_FB26, Filter bits
: CAN2_F19R1_FB27 ( -- x addr ) 27 bit CAN2_F19R1 ; \ CAN2_F19R1_FB27, Filter bits
: CAN2_F19R1_FB28 ( -- x addr ) 28 bit CAN2_F19R1 ; \ CAN2_F19R1_FB28, Filter bits
: CAN2_F19R1_FB29 ( -- x addr ) 29 bit CAN2_F19R1 ; \ CAN2_F19R1_FB29, Filter bits
: CAN2_F19R1_FB30 ( -- x addr ) 30 bit CAN2_F19R1 ; \ CAN2_F19R1_FB30, Filter bits
: CAN2_F19R1_FB31 ( -- x addr ) 31 bit CAN2_F19R1 ; \ CAN2_F19R1_FB31, Filter bits

\ CAN2_F19R2 (read-write) Reset:0x00000000
: CAN2_F19R2_FB0 ( -- x addr ) 0 bit CAN2_F19R2 ; \ CAN2_F19R2_FB0, Filter bits
: CAN2_F19R2_FB1 ( -- x addr ) 1 bit CAN2_F19R2 ; \ CAN2_F19R2_FB1, Filter bits
: CAN2_F19R2_FB2 ( -- x addr ) 2 bit CAN2_F19R2 ; \ CAN2_F19R2_FB2, Filter bits
: CAN2_F19R2_FB3 ( -- x addr ) 3 bit CAN2_F19R2 ; \ CAN2_F19R2_FB3, Filter bits
: CAN2_F19R2_FB4 ( -- x addr ) 4 bit CAN2_F19R2 ; \ CAN2_F19R2_FB4, Filter bits
: CAN2_F19R2_FB5 ( -- x addr ) 5 bit CAN2_F19R2 ; \ CAN2_F19R2_FB5, Filter bits
: CAN2_F19R2_FB6 ( -- x addr ) 6 bit CAN2_F19R2 ; \ CAN2_F19R2_FB6, Filter bits
: CAN2_F19R2_FB7 ( -- x addr ) 7 bit CAN2_F19R2 ; \ CAN2_F19R2_FB7, Filter bits
: CAN2_F19R2_FB8 ( -- x addr ) 8 bit CAN2_F19R2 ; \ CAN2_F19R2_FB8, Filter bits
: CAN2_F19R2_FB9 ( -- x addr ) 9 bit CAN2_F19R2 ; \ CAN2_F19R2_FB9, Filter bits
: CAN2_F19R2_FB10 ( -- x addr ) 10 bit CAN2_F19R2 ; \ CAN2_F19R2_FB10, Filter bits
: CAN2_F19R2_FB11 ( -- x addr ) 11 bit CAN2_F19R2 ; \ CAN2_F19R2_FB11, Filter bits
: CAN2_F19R2_FB12 ( -- x addr ) 12 bit CAN2_F19R2 ; \ CAN2_F19R2_FB12, Filter bits
: CAN2_F19R2_FB13 ( -- x addr ) 13 bit CAN2_F19R2 ; \ CAN2_F19R2_FB13, Filter bits
: CAN2_F19R2_FB14 ( -- x addr ) 14 bit CAN2_F19R2 ; \ CAN2_F19R2_FB14, Filter bits
: CAN2_F19R2_FB15 ( -- x addr ) 15 bit CAN2_F19R2 ; \ CAN2_F19R2_FB15, Filter bits
: CAN2_F19R2_FB16 ( -- x addr ) 16 bit CAN2_F19R2 ; \ CAN2_F19R2_FB16, Filter bits
: CAN2_F19R2_FB17 ( -- x addr ) 17 bit CAN2_F19R2 ; \ CAN2_F19R2_FB17, Filter bits
: CAN2_F19R2_FB18 ( -- x addr ) 18 bit CAN2_F19R2 ; \ CAN2_F19R2_FB18, Filter bits
: CAN2_F19R2_FB19 ( -- x addr ) 19 bit CAN2_F19R2 ; \ CAN2_F19R2_FB19, Filter bits
: CAN2_F19R2_FB20 ( -- x addr ) 20 bit CAN2_F19R2 ; \ CAN2_F19R2_FB20, Filter bits
: CAN2_F19R2_FB21 ( -- x addr ) 21 bit CAN2_F19R2 ; \ CAN2_F19R2_FB21, Filter bits
: CAN2_F19R2_FB22 ( -- x addr ) 22 bit CAN2_F19R2 ; \ CAN2_F19R2_FB22, Filter bits
: CAN2_F19R2_FB23 ( -- x addr ) 23 bit CAN2_F19R2 ; \ CAN2_F19R2_FB23, Filter bits
: CAN2_F19R2_FB24 ( -- x addr ) 24 bit CAN2_F19R2 ; \ CAN2_F19R2_FB24, Filter bits
: CAN2_F19R2_FB25 ( -- x addr ) 25 bit CAN2_F19R2 ; \ CAN2_F19R2_FB25, Filter bits
: CAN2_F19R2_FB26 ( -- x addr ) 26 bit CAN2_F19R2 ; \ CAN2_F19R2_FB26, Filter bits
: CAN2_F19R2_FB27 ( -- x addr ) 27 bit CAN2_F19R2 ; \ CAN2_F19R2_FB27, Filter bits
: CAN2_F19R2_FB28 ( -- x addr ) 28 bit CAN2_F19R2 ; \ CAN2_F19R2_FB28, Filter bits
: CAN2_F19R2_FB29 ( -- x addr ) 29 bit CAN2_F19R2 ; \ CAN2_F19R2_FB29, Filter bits
: CAN2_F19R2_FB30 ( -- x addr ) 30 bit CAN2_F19R2 ; \ CAN2_F19R2_FB30, Filter bits
: CAN2_F19R2_FB31 ( -- x addr ) 31 bit CAN2_F19R2 ; \ CAN2_F19R2_FB31, Filter bits

\ CAN2_F20R1 (read-write) Reset:0x00000000
: CAN2_F20R1_FB0 ( -- x addr ) 0 bit CAN2_F20R1 ; \ CAN2_F20R1_FB0, Filter bits
: CAN2_F20R1_FB1 ( -- x addr ) 1 bit CAN2_F20R1 ; \ CAN2_F20R1_FB1, Filter bits
: CAN2_F20R1_FB2 ( -- x addr ) 2 bit CAN2_F20R1 ; \ CAN2_F20R1_FB2, Filter bits
: CAN2_F20R1_FB3 ( -- x addr ) 3 bit CAN2_F20R1 ; \ CAN2_F20R1_FB3, Filter bits
: CAN2_F20R1_FB4 ( -- x addr ) 4 bit CAN2_F20R1 ; \ CAN2_F20R1_FB4, Filter bits
: CAN2_F20R1_FB5 ( -- x addr ) 5 bit CAN2_F20R1 ; \ CAN2_F20R1_FB5, Filter bits
: CAN2_F20R1_FB6 ( -- x addr ) 6 bit CAN2_F20R1 ; \ CAN2_F20R1_FB6, Filter bits
: CAN2_F20R1_FB7 ( -- x addr ) 7 bit CAN2_F20R1 ; \ CAN2_F20R1_FB7, Filter bits
: CAN2_F20R1_FB8 ( -- x addr ) 8 bit CAN2_F20R1 ; \ CAN2_F20R1_FB8, Filter bits
: CAN2_F20R1_FB9 ( -- x addr ) 9 bit CAN2_F20R1 ; \ CAN2_F20R1_FB9, Filter bits
: CAN2_F20R1_FB10 ( -- x addr ) 10 bit CAN2_F20R1 ; \ CAN2_F20R1_FB10, Filter bits
: CAN2_F20R1_FB11 ( -- x addr ) 11 bit CAN2_F20R1 ; \ CAN2_F20R1_FB11, Filter bits
: CAN2_F20R1_FB12 ( -- x addr ) 12 bit CAN2_F20R1 ; \ CAN2_F20R1_FB12, Filter bits
: CAN2_F20R1_FB13 ( -- x addr ) 13 bit CAN2_F20R1 ; \ CAN2_F20R1_FB13, Filter bits
: CAN2_F20R1_FB14 ( -- x addr ) 14 bit CAN2_F20R1 ; \ CAN2_F20R1_FB14, Filter bits
: CAN2_F20R1_FB15 ( -- x addr ) 15 bit CAN2_F20R1 ; \ CAN2_F20R1_FB15, Filter bits
: CAN2_F20R1_FB16 ( -- x addr ) 16 bit CAN2_F20R1 ; \ CAN2_F20R1_FB16, Filter bits
: CAN2_F20R1_FB17 ( -- x addr ) 17 bit CAN2_F20R1 ; \ CAN2_F20R1_FB17, Filter bits
: CAN2_F20R1_FB18 ( -- x addr ) 18 bit CAN2_F20R1 ; \ CAN2_F20R1_FB18, Filter bits
: CAN2_F20R1_FB19 ( -- x addr ) 19 bit CAN2_F20R1 ; \ CAN2_F20R1_FB19, Filter bits
: CAN2_F20R1_FB20 ( -- x addr ) 20 bit CAN2_F20R1 ; \ CAN2_F20R1_FB20, Filter bits
: CAN2_F20R1_FB21 ( -- x addr ) 21 bit CAN2_F20R1 ; \ CAN2_F20R1_FB21, Filter bits
: CAN2_F20R1_FB22 ( -- x addr ) 22 bit CAN2_F20R1 ; \ CAN2_F20R1_FB22, Filter bits
: CAN2_F20R1_FB23 ( -- x addr ) 23 bit CAN2_F20R1 ; \ CAN2_F20R1_FB23, Filter bits
: CAN2_F20R1_FB24 ( -- x addr ) 24 bit CAN2_F20R1 ; \ CAN2_F20R1_FB24, Filter bits
: CAN2_F20R1_FB25 ( -- x addr ) 25 bit CAN2_F20R1 ; \ CAN2_F20R1_FB25, Filter bits
: CAN2_F20R1_FB26 ( -- x addr ) 26 bit CAN2_F20R1 ; \ CAN2_F20R1_FB26, Filter bits
: CAN2_F20R1_FB27 ( -- x addr ) 27 bit CAN2_F20R1 ; \ CAN2_F20R1_FB27, Filter bits
: CAN2_F20R1_FB28 ( -- x addr ) 28 bit CAN2_F20R1 ; \ CAN2_F20R1_FB28, Filter bits
: CAN2_F20R1_FB29 ( -- x addr ) 29 bit CAN2_F20R1 ; \ CAN2_F20R1_FB29, Filter bits
: CAN2_F20R1_FB30 ( -- x addr ) 30 bit CAN2_F20R1 ; \ CAN2_F20R1_FB30, Filter bits
: CAN2_F20R1_FB31 ( -- x addr ) 31 bit CAN2_F20R1 ; \ CAN2_F20R1_FB31, Filter bits

\ CAN2_F20R2 (read-write) Reset:0x00000000
: CAN2_F20R2_FB0 ( -- x addr ) 0 bit CAN2_F20R2 ; \ CAN2_F20R2_FB0, Filter bits
: CAN2_F20R2_FB1 ( -- x addr ) 1 bit CAN2_F20R2 ; \ CAN2_F20R2_FB1, Filter bits
: CAN2_F20R2_FB2 ( -- x addr ) 2 bit CAN2_F20R2 ; \ CAN2_F20R2_FB2, Filter bits
: CAN2_F20R2_FB3 ( -- x addr ) 3 bit CAN2_F20R2 ; \ CAN2_F20R2_FB3, Filter bits
: CAN2_F20R2_FB4 ( -- x addr ) 4 bit CAN2_F20R2 ; \ CAN2_F20R2_FB4, Filter bits
: CAN2_F20R2_FB5 ( -- x addr ) 5 bit CAN2_F20R2 ; \ CAN2_F20R2_FB5, Filter bits
: CAN2_F20R2_FB6 ( -- x addr ) 6 bit CAN2_F20R2 ; \ CAN2_F20R2_FB6, Filter bits
: CAN2_F20R2_FB7 ( -- x addr ) 7 bit CAN2_F20R2 ; \ CAN2_F20R2_FB7, Filter bits
: CAN2_F20R2_FB8 ( -- x addr ) 8 bit CAN2_F20R2 ; \ CAN2_F20R2_FB8, Filter bits
: CAN2_F20R2_FB9 ( -- x addr ) 9 bit CAN2_F20R2 ; \ CAN2_F20R2_FB9, Filter bits
: CAN2_F20R2_FB10 ( -- x addr ) 10 bit CAN2_F20R2 ; \ CAN2_F20R2_FB10, Filter bits
: CAN2_F20R2_FB11 ( -- x addr ) 11 bit CAN2_F20R2 ; \ CAN2_F20R2_FB11, Filter bits
: CAN2_F20R2_FB12 ( -- x addr ) 12 bit CAN2_F20R2 ; \ CAN2_F20R2_FB12, Filter bits
: CAN2_F20R2_FB13 ( -- x addr ) 13 bit CAN2_F20R2 ; \ CAN2_F20R2_FB13, Filter bits
: CAN2_F20R2_FB14 ( -- x addr ) 14 bit CAN2_F20R2 ; \ CAN2_F20R2_FB14, Filter bits
: CAN2_F20R2_FB15 ( -- x addr ) 15 bit CAN2_F20R2 ; \ CAN2_F20R2_FB15, Filter bits
: CAN2_F20R2_FB16 ( -- x addr ) 16 bit CAN2_F20R2 ; \ CAN2_F20R2_FB16, Filter bits
: CAN2_F20R2_FB17 ( -- x addr ) 17 bit CAN2_F20R2 ; \ CAN2_F20R2_FB17, Filter bits
: CAN2_F20R2_FB18 ( -- x addr ) 18 bit CAN2_F20R2 ; \ CAN2_F20R2_FB18, Filter bits
: CAN2_F20R2_FB19 ( -- x addr ) 19 bit CAN2_F20R2 ; \ CAN2_F20R2_FB19, Filter bits
: CAN2_F20R2_FB20 ( -- x addr ) 20 bit CAN2_F20R2 ; \ CAN2_F20R2_FB20, Filter bits
: CAN2_F20R2_FB21 ( -- x addr ) 21 bit CAN2_F20R2 ; \ CAN2_F20R2_FB21, Filter bits
: CAN2_F20R2_FB22 ( -- x addr ) 22 bit CAN2_F20R2 ; \ CAN2_F20R2_FB22, Filter bits
: CAN2_F20R2_FB23 ( -- x addr ) 23 bit CAN2_F20R2 ; \ CAN2_F20R2_FB23, Filter bits
: CAN2_F20R2_FB24 ( -- x addr ) 24 bit CAN2_F20R2 ; \ CAN2_F20R2_FB24, Filter bits
: CAN2_F20R2_FB25 ( -- x addr ) 25 bit CAN2_F20R2 ; \ CAN2_F20R2_FB25, Filter bits
: CAN2_F20R2_FB26 ( -- x addr ) 26 bit CAN2_F20R2 ; \ CAN2_F20R2_FB26, Filter bits
: CAN2_F20R2_FB27 ( -- x addr ) 27 bit CAN2_F20R2 ; \ CAN2_F20R2_FB27, Filter bits
: CAN2_F20R2_FB28 ( -- x addr ) 28 bit CAN2_F20R2 ; \ CAN2_F20R2_FB28, Filter bits
: CAN2_F20R2_FB29 ( -- x addr ) 29 bit CAN2_F20R2 ; \ CAN2_F20R2_FB29, Filter bits
: CAN2_F20R2_FB30 ( -- x addr ) 30 bit CAN2_F20R2 ; \ CAN2_F20R2_FB30, Filter bits
: CAN2_F20R2_FB31 ( -- x addr ) 31 bit CAN2_F20R2 ; \ CAN2_F20R2_FB31, Filter bits

\ CAN2_F21R1 (read-write) Reset:0x00000000
: CAN2_F21R1_FB0 ( -- x addr ) 0 bit CAN2_F21R1 ; \ CAN2_F21R1_FB0, Filter bits
: CAN2_F21R1_FB1 ( -- x addr ) 1 bit CAN2_F21R1 ; \ CAN2_F21R1_FB1, Filter bits
: CAN2_F21R1_FB2 ( -- x addr ) 2 bit CAN2_F21R1 ; \ CAN2_F21R1_FB2, Filter bits
: CAN2_F21R1_FB3 ( -- x addr ) 3 bit CAN2_F21R1 ; \ CAN2_F21R1_FB3, Filter bits
: CAN2_F21R1_FB4 ( -- x addr ) 4 bit CAN2_F21R1 ; \ CAN2_F21R1_FB4, Filter bits
: CAN2_F21R1_FB5 ( -- x addr ) 5 bit CAN2_F21R1 ; \ CAN2_F21R1_FB5, Filter bits
: CAN2_F21R1_FB6 ( -- x addr ) 6 bit CAN2_F21R1 ; \ CAN2_F21R1_FB6, Filter bits
: CAN2_F21R1_FB7 ( -- x addr ) 7 bit CAN2_F21R1 ; \ CAN2_F21R1_FB7, Filter bits
: CAN2_F21R1_FB8 ( -- x addr ) 8 bit CAN2_F21R1 ; \ CAN2_F21R1_FB8, Filter bits
: CAN2_F21R1_FB9 ( -- x addr ) 9 bit CAN2_F21R1 ; \ CAN2_F21R1_FB9, Filter bits
: CAN2_F21R1_FB10 ( -- x addr ) 10 bit CAN2_F21R1 ; \ CAN2_F21R1_FB10, Filter bits
: CAN2_F21R1_FB11 ( -- x addr ) 11 bit CAN2_F21R1 ; \ CAN2_F21R1_FB11, Filter bits
: CAN2_F21R1_FB12 ( -- x addr ) 12 bit CAN2_F21R1 ; \ CAN2_F21R1_FB12, Filter bits
: CAN2_F21R1_FB13 ( -- x addr ) 13 bit CAN2_F21R1 ; \ CAN2_F21R1_FB13, Filter bits
: CAN2_F21R1_FB14 ( -- x addr ) 14 bit CAN2_F21R1 ; \ CAN2_F21R1_FB14, Filter bits
: CAN2_F21R1_FB15 ( -- x addr ) 15 bit CAN2_F21R1 ; \ CAN2_F21R1_FB15, Filter bits
: CAN2_F21R1_FB16 ( -- x addr ) 16 bit CAN2_F21R1 ; \ CAN2_F21R1_FB16, Filter bits
: CAN2_F21R1_FB17 ( -- x addr ) 17 bit CAN2_F21R1 ; \ CAN2_F21R1_FB17, Filter bits
: CAN2_F21R1_FB18 ( -- x addr ) 18 bit CAN2_F21R1 ; \ CAN2_F21R1_FB18, Filter bits
: CAN2_F21R1_FB19 ( -- x addr ) 19 bit CAN2_F21R1 ; \ CAN2_F21R1_FB19, Filter bits
: CAN2_F21R1_FB20 ( -- x addr ) 20 bit CAN2_F21R1 ; \ CAN2_F21R1_FB20, Filter bits
: CAN2_F21R1_FB21 ( -- x addr ) 21 bit CAN2_F21R1 ; \ CAN2_F21R1_FB21, Filter bits
: CAN2_F21R1_FB22 ( -- x addr ) 22 bit CAN2_F21R1 ; \ CAN2_F21R1_FB22, Filter bits
: CAN2_F21R1_FB23 ( -- x addr ) 23 bit CAN2_F21R1 ; \ CAN2_F21R1_FB23, Filter bits
: CAN2_F21R1_FB24 ( -- x addr ) 24 bit CAN2_F21R1 ; \ CAN2_F21R1_FB24, Filter bits
: CAN2_F21R1_FB25 ( -- x addr ) 25 bit CAN2_F21R1 ; \ CAN2_F21R1_FB25, Filter bits
: CAN2_F21R1_FB26 ( -- x addr ) 26 bit CAN2_F21R1 ; \ CAN2_F21R1_FB26, Filter bits
: CAN2_F21R1_FB27 ( -- x addr ) 27 bit CAN2_F21R1 ; \ CAN2_F21R1_FB27, Filter bits
: CAN2_F21R1_FB28 ( -- x addr ) 28 bit CAN2_F21R1 ; \ CAN2_F21R1_FB28, Filter bits
: CAN2_F21R1_FB29 ( -- x addr ) 29 bit CAN2_F21R1 ; \ CAN2_F21R1_FB29, Filter bits
: CAN2_F21R1_FB30 ( -- x addr ) 30 bit CAN2_F21R1 ; \ CAN2_F21R1_FB30, Filter bits
: CAN2_F21R1_FB31 ( -- x addr ) 31 bit CAN2_F21R1 ; \ CAN2_F21R1_FB31, Filter bits

\ CAN2_F21R2 (read-write) Reset:0x00000000
: CAN2_F21R2_FB0 ( -- x addr ) 0 bit CAN2_F21R2 ; \ CAN2_F21R2_FB0, Filter bits
: CAN2_F21R2_FB1 ( -- x addr ) 1 bit CAN2_F21R2 ; \ CAN2_F21R2_FB1, Filter bits
: CAN2_F21R2_FB2 ( -- x addr ) 2 bit CAN2_F21R2 ; \ CAN2_F21R2_FB2, Filter bits
: CAN2_F21R2_FB3 ( -- x addr ) 3 bit CAN2_F21R2 ; \ CAN2_F21R2_FB3, Filter bits
: CAN2_F21R2_FB4 ( -- x addr ) 4 bit CAN2_F21R2 ; \ CAN2_F21R2_FB4, Filter bits
: CAN2_F21R2_FB5 ( -- x addr ) 5 bit CAN2_F21R2 ; \ CAN2_F21R2_FB5, Filter bits
: CAN2_F21R2_FB6 ( -- x addr ) 6 bit CAN2_F21R2 ; \ CAN2_F21R2_FB6, Filter bits
: CAN2_F21R2_FB7 ( -- x addr ) 7 bit CAN2_F21R2 ; \ CAN2_F21R2_FB7, Filter bits
: CAN2_F21R2_FB8 ( -- x addr ) 8 bit CAN2_F21R2 ; \ CAN2_F21R2_FB8, Filter bits
: CAN2_F21R2_FB9 ( -- x addr ) 9 bit CAN2_F21R2 ; \ CAN2_F21R2_FB9, Filter bits
: CAN2_F21R2_FB10 ( -- x addr ) 10 bit CAN2_F21R2 ; \ CAN2_F21R2_FB10, Filter bits
: CAN2_F21R2_FB11 ( -- x addr ) 11 bit CAN2_F21R2 ; \ CAN2_F21R2_FB11, Filter bits
: CAN2_F21R2_FB12 ( -- x addr ) 12 bit CAN2_F21R2 ; \ CAN2_F21R2_FB12, Filter bits
: CAN2_F21R2_FB13 ( -- x addr ) 13 bit CAN2_F21R2 ; \ CAN2_F21R2_FB13, Filter bits
: CAN2_F21R2_FB14 ( -- x addr ) 14 bit CAN2_F21R2 ; \ CAN2_F21R2_FB14, Filter bits
: CAN2_F21R2_FB15 ( -- x addr ) 15 bit CAN2_F21R2 ; \ CAN2_F21R2_FB15, Filter bits
: CAN2_F21R2_FB16 ( -- x addr ) 16 bit CAN2_F21R2 ; \ CAN2_F21R2_FB16, Filter bits
: CAN2_F21R2_FB17 ( -- x addr ) 17 bit CAN2_F21R2 ; \ CAN2_F21R2_FB17, Filter bits
: CAN2_F21R2_FB18 ( -- x addr ) 18 bit CAN2_F21R2 ; \ CAN2_F21R2_FB18, Filter bits
: CAN2_F21R2_FB19 ( -- x addr ) 19 bit CAN2_F21R2 ; \ CAN2_F21R2_FB19, Filter bits
: CAN2_F21R2_FB20 ( -- x addr ) 20 bit CAN2_F21R2 ; \ CAN2_F21R2_FB20, Filter bits
: CAN2_F21R2_FB21 ( -- x addr ) 21 bit CAN2_F21R2 ; \ CAN2_F21R2_FB21, Filter bits
: CAN2_F21R2_FB22 ( -- x addr ) 22 bit CAN2_F21R2 ; \ CAN2_F21R2_FB22, Filter bits
: CAN2_F21R2_FB23 ( -- x addr ) 23 bit CAN2_F21R2 ; \ CAN2_F21R2_FB23, Filter bits
: CAN2_F21R2_FB24 ( -- x addr ) 24 bit CAN2_F21R2 ; \ CAN2_F21R2_FB24, Filter bits
: CAN2_F21R2_FB25 ( -- x addr ) 25 bit CAN2_F21R2 ; \ CAN2_F21R2_FB25, Filter bits
: CAN2_F21R2_FB26 ( -- x addr ) 26 bit CAN2_F21R2 ; \ CAN2_F21R2_FB26, Filter bits
: CAN2_F21R2_FB27 ( -- x addr ) 27 bit CAN2_F21R2 ; \ CAN2_F21R2_FB27, Filter bits
: CAN2_F21R2_FB28 ( -- x addr ) 28 bit CAN2_F21R2 ; \ CAN2_F21R2_FB28, Filter bits
: CAN2_F21R2_FB29 ( -- x addr ) 29 bit CAN2_F21R2 ; \ CAN2_F21R2_FB29, Filter bits
: CAN2_F21R2_FB30 ( -- x addr ) 30 bit CAN2_F21R2 ; \ CAN2_F21R2_FB30, Filter bits
: CAN2_F21R2_FB31 ( -- x addr ) 31 bit CAN2_F21R2 ; \ CAN2_F21R2_FB31, Filter bits

\ CAN2_F22R1 (read-write) Reset:0x00000000
: CAN2_F22R1_FB0 ( -- x addr ) 0 bit CAN2_F22R1 ; \ CAN2_F22R1_FB0, Filter bits
: CAN2_F22R1_FB1 ( -- x addr ) 1 bit CAN2_F22R1 ; \ CAN2_F22R1_FB1, Filter bits
: CAN2_F22R1_FB2 ( -- x addr ) 2 bit CAN2_F22R1 ; \ CAN2_F22R1_FB2, Filter bits
: CAN2_F22R1_FB3 ( -- x addr ) 3 bit CAN2_F22R1 ; \ CAN2_F22R1_FB3, Filter bits
: CAN2_F22R1_FB4 ( -- x addr ) 4 bit CAN2_F22R1 ; \ CAN2_F22R1_FB4, Filter bits
: CAN2_F22R1_FB5 ( -- x addr ) 5 bit CAN2_F22R1 ; \ CAN2_F22R1_FB5, Filter bits
: CAN2_F22R1_FB6 ( -- x addr ) 6 bit CAN2_F22R1 ; \ CAN2_F22R1_FB6, Filter bits
: CAN2_F22R1_FB7 ( -- x addr ) 7 bit CAN2_F22R1 ; \ CAN2_F22R1_FB7, Filter bits
: CAN2_F22R1_FB8 ( -- x addr ) 8 bit CAN2_F22R1 ; \ CAN2_F22R1_FB8, Filter bits
: CAN2_F22R1_FB9 ( -- x addr ) 9 bit CAN2_F22R1 ; \ CAN2_F22R1_FB9, Filter bits
: CAN2_F22R1_FB10 ( -- x addr ) 10 bit CAN2_F22R1 ; \ CAN2_F22R1_FB10, Filter bits
: CAN2_F22R1_FB11 ( -- x addr ) 11 bit CAN2_F22R1 ; \ CAN2_F22R1_FB11, Filter bits
: CAN2_F22R1_FB12 ( -- x addr ) 12 bit CAN2_F22R1 ; \ CAN2_F22R1_FB12, Filter bits
: CAN2_F22R1_FB13 ( -- x addr ) 13 bit CAN2_F22R1 ; \ CAN2_F22R1_FB13, Filter bits
: CAN2_F22R1_FB14 ( -- x addr ) 14 bit CAN2_F22R1 ; \ CAN2_F22R1_FB14, Filter bits
: CAN2_F22R1_FB15 ( -- x addr ) 15 bit CAN2_F22R1 ; \ CAN2_F22R1_FB15, Filter bits
: CAN2_F22R1_FB16 ( -- x addr ) 16 bit CAN2_F22R1 ; \ CAN2_F22R1_FB16, Filter bits
: CAN2_F22R1_FB17 ( -- x addr ) 17 bit CAN2_F22R1 ; \ CAN2_F22R1_FB17, Filter bits
: CAN2_F22R1_FB18 ( -- x addr ) 18 bit CAN2_F22R1 ; \ CAN2_F22R1_FB18, Filter bits
: CAN2_F22R1_FB19 ( -- x addr ) 19 bit CAN2_F22R1 ; \ CAN2_F22R1_FB19, Filter bits
: CAN2_F22R1_FB20 ( -- x addr ) 20 bit CAN2_F22R1 ; \ CAN2_F22R1_FB20, Filter bits
: CAN2_F22R1_FB21 ( -- x addr ) 21 bit CAN2_F22R1 ; \ CAN2_F22R1_FB21, Filter bits
: CAN2_F22R1_FB22 ( -- x addr ) 22 bit CAN2_F22R1 ; \ CAN2_F22R1_FB22, Filter bits
: CAN2_F22R1_FB23 ( -- x addr ) 23 bit CAN2_F22R1 ; \ CAN2_F22R1_FB23, Filter bits
: CAN2_F22R1_FB24 ( -- x addr ) 24 bit CAN2_F22R1 ; \ CAN2_F22R1_FB24, Filter bits
: CAN2_F22R1_FB25 ( -- x addr ) 25 bit CAN2_F22R1 ; \ CAN2_F22R1_FB25, Filter bits
: CAN2_F22R1_FB26 ( -- x addr ) 26 bit CAN2_F22R1 ; \ CAN2_F22R1_FB26, Filter bits
: CAN2_F22R1_FB27 ( -- x addr ) 27 bit CAN2_F22R1 ; \ CAN2_F22R1_FB27, Filter bits
: CAN2_F22R1_FB28 ( -- x addr ) 28 bit CAN2_F22R1 ; \ CAN2_F22R1_FB28, Filter bits
: CAN2_F22R1_FB29 ( -- x addr ) 29 bit CAN2_F22R1 ; \ CAN2_F22R1_FB29, Filter bits
: CAN2_F22R1_FB30 ( -- x addr ) 30 bit CAN2_F22R1 ; \ CAN2_F22R1_FB30, Filter bits
: CAN2_F22R1_FB31 ( -- x addr ) 31 bit CAN2_F22R1 ; \ CAN2_F22R1_FB31, Filter bits

\ CAN2_F22R2 (read-write) Reset:0x00000000
: CAN2_F22R2_FB0 ( -- x addr ) 0 bit CAN2_F22R2 ; \ CAN2_F22R2_FB0, Filter bits
: CAN2_F22R2_FB1 ( -- x addr ) 1 bit CAN2_F22R2 ; \ CAN2_F22R2_FB1, Filter bits
: CAN2_F22R2_FB2 ( -- x addr ) 2 bit CAN2_F22R2 ; \ CAN2_F22R2_FB2, Filter bits
: CAN2_F22R2_FB3 ( -- x addr ) 3 bit CAN2_F22R2 ; \ CAN2_F22R2_FB3, Filter bits
: CAN2_F22R2_FB4 ( -- x addr ) 4 bit CAN2_F22R2 ; \ CAN2_F22R2_FB4, Filter bits
: CAN2_F22R2_FB5 ( -- x addr ) 5 bit CAN2_F22R2 ; \ CAN2_F22R2_FB5, Filter bits
: CAN2_F22R2_FB6 ( -- x addr ) 6 bit CAN2_F22R2 ; \ CAN2_F22R2_FB6, Filter bits
: CAN2_F22R2_FB7 ( -- x addr ) 7 bit CAN2_F22R2 ; \ CAN2_F22R2_FB7, Filter bits
: CAN2_F22R2_FB8 ( -- x addr ) 8 bit CAN2_F22R2 ; \ CAN2_F22R2_FB8, Filter bits
: CAN2_F22R2_FB9 ( -- x addr ) 9 bit CAN2_F22R2 ; \ CAN2_F22R2_FB9, Filter bits
: CAN2_F22R2_FB10 ( -- x addr ) 10 bit CAN2_F22R2 ; \ CAN2_F22R2_FB10, Filter bits
: CAN2_F22R2_FB11 ( -- x addr ) 11 bit CAN2_F22R2 ; \ CAN2_F22R2_FB11, Filter bits
: CAN2_F22R2_FB12 ( -- x addr ) 12 bit CAN2_F22R2 ; \ CAN2_F22R2_FB12, Filter bits
: CAN2_F22R2_FB13 ( -- x addr ) 13 bit CAN2_F22R2 ; \ CAN2_F22R2_FB13, Filter bits
: CAN2_F22R2_FB14 ( -- x addr ) 14 bit CAN2_F22R2 ; \ CAN2_F22R2_FB14, Filter bits
: CAN2_F22R2_FB15 ( -- x addr ) 15 bit CAN2_F22R2 ; \ CAN2_F22R2_FB15, Filter bits
: CAN2_F22R2_FB16 ( -- x addr ) 16 bit CAN2_F22R2 ; \ CAN2_F22R2_FB16, Filter bits
: CAN2_F22R2_FB17 ( -- x addr ) 17 bit CAN2_F22R2 ; \ CAN2_F22R2_FB17, Filter bits
: CAN2_F22R2_FB18 ( -- x addr ) 18 bit CAN2_F22R2 ; \ CAN2_F22R2_FB18, Filter bits
: CAN2_F22R2_FB19 ( -- x addr ) 19 bit CAN2_F22R2 ; \ CAN2_F22R2_FB19, Filter bits
: CAN2_F22R2_FB20 ( -- x addr ) 20 bit CAN2_F22R2 ; \ CAN2_F22R2_FB20, Filter bits
: CAN2_F22R2_FB21 ( -- x addr ) 21 bit CAN2_F22R2 ; \ CAN2_F22R2_FB21, Filter bits
: CAN2_F22R2_FB22 ( -- x addr ) 22 bit CAN2_F22R2 ; \ CAN2_F22R2_FB22, Filter bits
: CAN2_F22R2_FB23 ( -- x addr ) 23 bit CAN2_F22R2 ; \ CAN2_F22R2_FB23, Filter bits
: CAN2_F22R2_FB24 ( -- x addr ) 24 bit CAN2_F22R2 ; \ CAN2_F22R2_FB24, Filter bits
: CAN2_F22R2_FB25 ( -- x addr ) 25 bit CAN2_F22R2 ; \ CAN2_F22R2_FB25, Filter bits
: CAN2_F22R2_FB26 ( -- x addr ) 26 bit CAN2_F22R2 ; \ CAN2_F22R2_FB26, Filter bits
: CAN2_F22R2_FB27 ( -- x addr ) 27 bit CAN2_F22R2 ; \ CAN2_F22R2_FB27, Filter bits
: CAN2_F22R2_FB28 ( -- x addr ) 28 bit CAN2_F22R2 ; \ CAN2_F22R2_FB28, Filter bits
: CAN2_F22R2_FB29 ( -- x addr ) 29 bit CAN2_F22R2 ; \ CAN2_F22R2_FB29, Filter bits
: CAN2_F22R2_FB30 ( -- x addr ) 30 bit CAN2_F22R2 ; \ CAN2_F22R2_FB30, Filter bits
: CAN2_F22R2_FB31 ( -- x addr ) 31 bit CAN2_F22R2 ; \ CAN2_F22R2_FB31, Filter bits

\ CAN2_F23R1 (read-write) Reset:0x00000000
: CAN2_F23R1_FB0 ( -- x addr ) 0 bit CAN2_F23R1 ; \ CAN2_F23R1_FB0, Filter bits
: CAN2_F23R1_FB1 ( -- x addr ) 1 bit CAN2_F23R1 ; \ CAN2_F23R1_FB1, Filter bits
: CAN2_F23R1_FB2 ( -- x addr ) 2 bit CAN2_F23R1 ; \ CAN2_F23R1_FB2, Filter bits
: CAN2_F23R1_FB3 ( -- x addr ) 3 bit CAN2_F23R1 ; \ CAN2_F23R1_FB3, Filter bits
: CAN2_F23R1_FB4 ( -- x addr ) 4 bit CAN2_F23R1 ; \ CAN2_F23R1_FB4, Filter bits
: CAN2_F23R1_FB5 ( -- x addr ) 5 bit CAN2_F23R1 ; \ CAN2_F23R1_FB5, Filter bits
: CAN2_F23R1_FB6 ( -- x addr ) 6 bit CAN2_F23R1 ; \ CAN2_F23R1_FB6, Filter bits
: CAN2_F23R1_FB7 ( -- x addr ) 7 bit CAN2_F23R1 ; \ CAN2_F23R1_FB7, Filter bits
: CAN2_F23R1_FB8 ( -- x addr ) 8 bit CAN2_F23R1 ; \ CAN2_F23R1_FB8, Filter bits
: CAN2_F23R1_FB9 ( -- x addr ) 9 bit CAN2_F23R1 ; \ CAN2_F23R1_FB9, Filter bits
: CAN2_F23R1_FB10 ( -- x addr ) 10 bit CAN2_F23R1 ; \ CAN2_F23R1_FB10, Filter bits
: CAN2_F23R1_FB11 ( -- x addr ) 11 bit CAN2_F23R1 ; \ CAN2_F23R1_FB11, Filter bits
: CAN2_F23R1_FB12 ( -- x addr ) 12 bit CAN2_F23R1 ; \ CAN2_F23R1_FB12, Filter bits
: CAN2_F23R1_FB13 ( -- x addr ) 13 bit CAN2_F23R1 ; \ CAN2_F23R1_FB13, Filter bits
: CAN2_F23R1_FB14 ( -- x addr ) 14 bit CAN2_F23R1 ; \ CAN2_F23R1_FB14, Filter bits
: CAN2_F23R1_FB15 ( -- x addr ) 15 bit CAN2_F23R1 ; \ CAN2_F23R1_FB15, Filter bits
: CAN2_F23R1_FB16 ( -- x addr ) 16 bit CAN2_F23R1 ; \ CAN2_F23R1_FB16, Filter bits
: CAN2_F23R1_FB17 ( -- x addr ) 17 bit CAN2_F23R1 ; \ CAN2_F23R1_FB17, Filter bits
: CAN2_F23R1_FB18 ( -- x addr ) 18 bit CAN2_F23R1 ; \ CAN2_F23R1_FB18, Filter bits
: CAN2_F23R1_FB19 ( -- x addr ) 19 bit CAN2_F23R1 ; \ CAN2_F23R1_FB19, Filter bits
: CAN2_F23R1_FB20 ( -- x addr ) 20 bit CAN2_F23R1 ; \ CAN2_F23R1_FB20, Filter bits
: CAN2_F23R1_FB21 ( -- x addr ) 21 bit CAN2_F23R1 ; \ CAN2_F23R1_FB21, Filter bits
: CAN2_F23R1_FB22 ( -- x addr ) 22 bit CAN2_F23R1 ; \ CAN2_F23R1_FB22, Filter bits
: CAN2_F23R1_FB23 ( -- x addr ) 23 bit CAN2_F23R1 ; \ CAN2_F23R1_FB23, Filter bits
: CAN2_F23R1_FB24 ( -- x addr ) 24 bit CAN2_F23R1 ; \ CAN2_F23R1_FB24, Filter bits
: CAN2_F23R1_FB25 ( -- x addr ) 25 bit CAN2_F23R1 ; \ CAN2_F23R1_FB25, Filter bits
: CAN2_F23R1_FB26 ( -- x addr ) 26 bit CAN2_F23R1 ; \ CAN2_F23R1_FB26, Filter bits
: CAN2_F23R1_FB27 ( -- x addr ) 27 bit CAN2_F23R1 ; \ CAN2_F23R1_FB27, Filter bits
: CAN2_F23R1_FB28 ( -- x addr ) 28 bit CAN2_F23R1 ; \ CAN2_F23R1_FB28, Filter bits
: CAN2_F23R1_FB29 ( -- x addr ) 29 bit CAN2_F23R1 ; \ CAN2_F23R1_FB29, Filter bits
: CAN2_F23R1_FB30 ( -- x addr ) 30 bit CAN2_F23R1 ; \ CAN2_F23R1_FB30, Filter bits
: CAN2_F23R1_FB31 ( -- x addr ) 31 bit CAN2_F23R1 ; \ CAN2_F23R1_FB31, Filter bits

\ CAN2_F23R2 (read-write) Reset:0x00000000
: CAN2_F23R2_FB0 ( -- x addr ) 0 bit CAN2_F23R2 ; \ CAN2_F23R2_FB0, Filter bits
: CAN2_F23R2_FB1 ( -- x addr ) 1 bit CAN2_F23R2 ; \ CAN2_F23R2_FB1, Filter bits
: CAN2_F23R2_FB2 ( -- x addr ) 2 bit CAN2_F23R2 ; \ CAN2_F23R2_FB2, Filter bits
: CAN2_F23R2_FB3 ( -- x addr ) 3 bit CAN2_F23R2 ; \ CAN2_F23R2_FB3, Filter bits
: CAN2_F23R2_FB4 ( -- x addr ) 4 bit CAN2_F23R2 ; \ CAN2_F23R2_FB4, Filter bits
: CAN2_F23R2_FB5 ( -- x addr ) 5 bit CAN2_F23R2 ; \ CAN2_F23R2_FB5, Filter bits
: CAN2_F23R2_FB6 ( -- x addr ) 6 bit CAN2_F23R2 ; \ CAN2_F23R2_FB6, Filter bits
: CAN2_F23R2_FB7 ( -- x addr ) 7 bit CAN2_F23R2 ; \ CAN2_F23R2_FB7, Filter bits
: CAN2_F23R2_FB8 ( -- x addr ) 8 bit CAN2_F23R2 ; \ CAN2_F23R2_FB8, Filter bits
: CAN2_F23R2_FB9 ( -- x addr ) 9 bit CAN2_F23R2 ; \ CAN2_F23R2_FB9, Filter bits
: CAN2_F23R2_FB10 ( -- x addr ) 10 bit CAN2_F23R2 ; \ CAN2_F23R2_FB10, Filter bits
: CAN2_F23R2_FB11 ( -- x addr ) 11 bit CAN2_F23R2 ; \ CAN2_F23R2_FB11, Filter bits
: CAN2_F23R2_FB12 ( -- x addr ) 12 bit CAN2_F23R2 ; \ CAN2_F23R2_FB12, Filter bits
: CAN2_F23R2_FB13 ( -- x addr ) 13 bit CAN2_F23R2 ; \ CAN2_F23R2_FB13, Filter bits
: CAN2_F23R2_FB14 ( -- x addr ) 14 bit CAN2_F23R2 ; \ CAN2_F23R2_FB14, Filter bits
: CAN2_F23R2_FB15 ( -- x addr ) 15 bit CAN2_F23R2 ; \ CAN2_F23R2_FB15, Filter bits
: CAN2_F23R2_FB16 ( -- x addr ) 16 bit CAN2_F23R2 ; \ CAN2_F23R2_FB16, Filter bits
: CAN2_F23R2_FB17 ( -- x addr ) 17 bit CAN2_F23R2 ; \ CAN2_F23R2_FB17, Filter bits
: CAN2_F23R2_FB18 ( -- x addr ) 18 bit CAN2_F23R2 ; \ CAN2_F23R2_FB18, Filter bits
: CAN2_F23R2_FB19 ( -- x addr ) 19 bit CAN2_F23R2 ; \ CAN2_F23R2_FB19, Filter bits
: CAN2_F23R2_FB20 ( -- x addr ) 20 bit CAN2_F23R2 ; \ CAN2_F23R2_FB20, Filter bits
: CAN2_F23R2_FB21 ( -- x addr ) 21 bit CAN2_F23R2 ; \ CAN2_F23R2_FB21, Filter bits
: CAN2_F23R2_FB22 ( -- x addr ) 22 bit CAN2_F23R2 ; \ CAN2_F23R2_FB22, Filter bits
: CAN2_F23R2_FB23 ( -- x addr ) 23 bit CAN2_F23R2 ; \ CAN2_F23R2_FB23, Filter bits
: CAN2_F23R2_FB24 ( -- x addr ) 24 bit CAN2_F23R2 ; \ CAN2_F23R2_FB24, Filter bits
: CAN2_F23R2_FB25 ( -- x addr ) 25 bit CAN2_F23R2 ; \ CAN2_F23R2_FB25, Filter bits
: CAN2_F23R2_FB26 ( -- x addr ) 26 bit CAN2_F23R2 ; \ CAN2_F23R2_FB26, Filter bits
: CAN2_F23R2_FB27 ( -- x addr ) 27 bit CAN2_F23R2 ; \ CAN2_F23R2_FB27, Filter bits
: CAN2_F23R2_FB28 ( -- x addr ) 28 bit CAN2_F23R2 ; \ CAN2_F23R2_FB28, Filter bits
: CAN2_F23R2_FB29 ( -- x addr ) 29 bit CAN2_F23R2 ; \ CAN2_F23R2_FB29, Filter bits
: CAN2_F23R2_FB30 ( -- x addr ) 30 bit CAN2_F23R2 ; \ CAN2_F23R2_FB30, Filter bits
: CAN2_F23R2_FB31 ( -- x addr ) 31 bit CAN2_F23R2 ; \ CAN2_F23R2_FB31, Filter bits

\ CAN2_F24R1 (read-write) Reset:0x00000000
: CAN2_F24R1_FB0 ( -- x addr ) 0 bit CAN2_F24R1 ; \ CAN2_F24R1_FB0, Filter bits
: CAN2_F24R1_FB1 ( -- x addr ) 1 bit CAN2_F24R1 ; \ CAN2_F24R1_FB1, Filter bits
: CAN2_F24R1_FB2 ( -- x addr ) 2 bit CAN2_F24R1 ; \ CAN2_F24R1_FB2, Filter bits
: CAN2_F24R1_FB3 ( -- x addr ) 3 bit CAN2_F24R1 ; \ CAN2_F24R1_FB3, Filter bits
: CAN2_F24R1_FB4 ( -- x addr ) 4 bit CAN2_F24R1 ; \ CAN2_F24R1_FB4, Filter bits
: CAN2_F24R1_FB5 ( -- x addr ) 5 bit CAN2_F24R1 ; \ CAN2_F24R1_FB5, Filter bits
: CAN2_F24R1_FB6 ( -- x addr ) 6 bit CAN2_F24R1 ; \ CAN2_F24R1_FB6, Filter bits
: CAN2_F24R1_FB7 ( -- x addr ) 7 bit CAN2_F24R1 ; \ CAN2_F24R1_FB7, Filter bits
: CAN2_F24R1_FB8 ( -- x addr ) 8 bit CAN2_F24R1 ; \ CAN2_F24R1_FB8, Filter bits
: CAN2_F24R1_FB9 ( -- x addr ) 9 bit CAN2_F24R1 ; \ CAN2_F24R1_FB9, Filter bits
: CAN2_F24R1_FB10 ( -- x addr ) 10 bit CAN2_F24R1 ; \ CAN2_F24R1_FB10, Filter bits
: CAN2_F24R1_FB11 ( -- x addr ) 11 bit CAN2_F24R1 ; \ CAN2_F24R1_FB11, Filter bits
: CAN2_F24R1_FB12 ( -- x addr ) 12 bit CAN2_F24R1 ; \ CAN2_F24R1_FB12, Filter bits
: CAN2_F24R1_FB13 ( -- x addr ) 13 bit CAN2_F24R1 ; \ CAN2_F24R1_FB13, Filter bits
: CAN2_F24R1_FB14 ( -- x addr ) 14 bit CAN2_F24R1 ; \ CAN2_F24R1_FB14, Filter bits
: CAN2_F24R1_FB15 ( -- x addr ) 15 bit CAN2_F24R1 ; \ CAN2_F24R1_FB15, Filter bits
: CAN2_F24R1_FB16 ( -- x addr ) 16 bit CAN2_F24R1 ; \ CAN2_F24R1_FB16, Filter bits
: CAN2_F24R1_FB17 ( -- x addr ) 17 bit CAN2_F24R1 ; \ CAN2_F24R1_FB17, Filter bits
: CAN2_F24R1_FB18 ( -- x addr ) 18 bit CAN2_F24R1 ; \ CAN2_F24R1_FB18, Filter bits
: CAN2_F24R1_FB19 ( -- x addr ) 19 bit CAN2_F24R1 ; \ CAN2_F24R1_FB19, Filter bits
: CAN2_F24R1_FB20 ( -- x addr ) 20 bit CAN2_F24R1 ; \ CAN2_F24R1_FB20, Filter bits
: CAN2_F24R1_FB21 ( -- x addr ) 21 bit CAN2_F24R1 ; \ CAN2_F24R1_FB21, Filter bits
: CAN2_F24R1_FB22 ( -- x addr ) 22 bit CAN2_F24R1 ; \ CAN2_F24R1_FB22, Filter bits
: CAN2_F24R1_FB23 ( -- x addr ) 23 bit CAN2_F24R1 ; \ CAN2_F24R1_FB23, Filter bits
: CAN2_F24R1_FB24 ( -- x addr ) 24 bit CAN2_F24R1 ; \ CAN2_F24R1_FB24, Filter bits
: CAN2_F24R1_FB25 ( -- x addr ) 25 bit CAN2_F24R1 ; \ CAN2_F24R1_FB25, Filter bits
: CAN2_F24R1_FB26 ( -- x addr ) 26 bit CAN2_F24R1 ; \ CAN2_F24R1_FB26, Filter bits
: CAN2_F24R1_FB27 ( -- x addr ) 27 bit CAN2_F24R1 ; \ CAN2_F24R1_FB27, Filter bits
: CAN2_F24R1_FB28 ( -- x addr ) 28 bit CAN2_F24R1 ; \ CAN2_F24R1_FB28, Filter bits
: CAN2_F24R1_FB29 ( -- x addr ) 29 bit CAN2_F24R1 ; \ CAN2_F24R1_FB29, Filter bits
: CAN2_F24R1_FB30 ( -- x addr ) 30 bit CAN2_F24R1 ; \ CAN2_F24R1_FB30, Filter bits
: CAN2_F24R1_FB31 ( -- x addr ) 31 bit CAN2_F24R1 ; \ CAN2_F24R1_FB31, Filter bits

\ CAN2_F24R2 (read-write) Reset:0x00000000
: CAN2_F24R2_FB0 ( -- x addr ) 0 bit CAN2_F24R2 ; \ CAN2_F24R2_FB0, Filter bits
: CAN2_F24R2_FB1 ( -- x addr ) 1 bit CAN2_F24R2 ; \ CAN2_F24R2_FB1, Filter bits
: CAN2_F24R2_FB2 ( -- x addr ) 2 bit CAN2_F24R2 ; \ CAN2_F24R2_FB2, Filter bits
: CAN2_F24R2_FB3 ( -- x addr ) 3 bit CAN2_F24R2 ; \ CAN2_F24R2_FB3, Filter bits
: CAN2_F24R2_FB4 ( -- x addr ) 4 bit CAN2_F24R2 ; \ CAN2_F24R2_FB4, Filter bits
: CAN2_F24R2_FB5 ( -- x addr ) 5 bit CAN2_F24R2 ; \ CAN2_F24R2_FB5, Filter bits
: CAN2_F24R2_FB6 ( -- x addr ) 6 bit CAN2_F24R2 ; \ CAN2_F24R2_FB6, Filter bits
: CAN2_F24R2_FB7 ( -- x addr ) 7 bit CAN2_F24R2 ; \ CAN2_F24R2_FB7, Filter bits
: CAN2_F24R2_FB8 ( -- x addr ) 8 bit CAN2_F24R2 ; \ CAN2_F24R2_FB8, Filter bits
: CAN2_F24R2_FB9 ( -- x addr ) 9 bit CAN2_F24R2 ; \ CAN2_F24R2_FB9, Filter bits
: CAN2_F24R2_FB10 ( -- x addr ) 10 bit CAN2_F24R2 ; \ CAN2_F24R2_FB10, Filter bits
: CAN2_F24R2_FB11 ( -- x addr ) 11 bit CAN2_F24R2 ; \ CAN2_F24R2_FB11, Filter bits
: CAN2_F24R2_FB12 ( -- x addr ) 12 bit CAN2_F24R2 ; \ CAN2_F24R2_FB12, Filter bits
: CAN2_F24R2_FB13 ( -- x addr ) 13 bit CAN2_F24R2 ; \ CAN2_F24R2_FB13, Filter bits
: CAN2_F24R2_FB14 ( -- x addr ) 14 bit CAN2_F24R2 ; \ CAN2_F24R2_FB14, Filter bits
: CAN2_F24R2_FB15 ( -- x addr ) 15 bit CAN2_F24R2 ; \ CAN2_F24R2_FB15, Filter bits
: CAN2_F24R2_FB16 ( -- x addr ) 16 bit CAN2_F24R2 ; \ CAN2_F24R2_FB16, Filter bits
: CAN2_F24R2_FB17 ( -- x addr ) 17 bit CAN2_F24R2 ; \ CAN2_F24R2_FB17, Filter bits
: CAN2_F24R2_FB18 ( -- x addr ) 18 bit CAN2_F24R2 ; \ CAN2_F24R2_FB18, Filter bits
: CAN2_F24R2_FB19 ( -- x addr ) 19 bit CAN2_F24R2 ; \ CAN2_F24R2_FB19, Filter bits
: CAN2_F24R2_FB20 ( -- x addr ) 20 bit CAN2_F24R2 ; \ CAN2_F24R2_FB20, Filter bits
: CAN2_F24R2_FB21 ( -- x addr ) 21 bit CAN2_F24R2 ; \ CAN2_F24R2_FB21, Filter bits
: CAN2_F24R2_FB22 ( -- x addr ) 22 bit CAN2_F24R2 ; \ CAN2_F24R2_FB22, Filter bits
: CAN2_F24R2_FB23 ( -- x addr ) 23 bit CAN2_F24R2 ; \ CAN2_F24R2_FB23, Filter bits
: CAN2_F24R2_FB24 ( -- x addr ) 24 bit CAN2_F24R2 ; \ CAN2_F24R2_FB24, Filter bits
: CAN2_F24R2_FB25 ( -- x addr ) 25 bit CAN2_F24R2 ; \ CAN2_F24R2_FB25, Filter bits
: CAN2_F24R2_FB26 ( -- x addr ) 26 bit CAN2_F24R2 ; \ CAN2_F24R2_FB26, Filter bits
: CAN2_F24R2_FB27 ( -- x addr ) 27 bit CAN2_F24R2 ; \ CAN2_F24R2_FB27, Filter bits
: CAN2_F24R2_FB28 ( -- x addr ) 28 bit CAN2_F24R2 ; \ CAN2_F24R2_FB28, Filter bits
: CAN2_F24R2_FB29 ( -- x addr ) 29 bit CAN2_F24R2 ; \ CAN2_F24R2_FB29, Filter bits
: CAN2_F24R2_FB30 ( -- x addr ) 30 bit CAN2_F24R2 ; \ CAN2_F24R2_FB30, Filter bits
: CAN2_F24R2_FB31 ( -- x addr ) 31 bit CAN2_F24R2 ; \ CAN2_F24R2_FB31, Filter bits

\ CAN2_F25R1 (read-write) Reset:0x00000000
: CAN2_F25R1_FB0 ( -- x addr ) 0 bit CAN2_F25R1 ; \ CAN2_F25R1_FB0, Filter bits
: CAN2_F25R1_FB1 ( -- x addr ) 1 bit CAN2_F25R1 ; \ CAN2_F25R1_FB1, Filter bits
: CAN2_F25R1_FB2 ( -- x addr ) 2 bit CAN2_F25R1 ; \ CAN2_F25R1_FB2, Filter bits
: CAN2_F25R1_FB3 ( -- x addr ) 3 bit CAN2_F25R1 ; \ CAN2_F25R1_FB3, Filter bits
: CAN2_F25R1_FB4 ( -- x addr ) 4 bit CAN2_F25R1 ; \ CAN2_F25R1_FB4, Filter bits
: CAN2_F25R1_FB5 ( -- x addr ) 5 bit CAN2_F25R1 ; \ CAN2_F25R1_FB5, Filter bits
: CAN2_F25R1_FB6 ( -- x addr ) 6 bit CAN2_F25R1 ; \ CAN2_F25R1_FB6, Filter bits
: CAN2_F25R1_FB7 ( -- x addr ) 7 bit CAN2_F25R1 ; \ CAN2_F25R1_FB7, Filter bits
: CAN2_F25R1_FB8 ( -- x addr ) 8 bit CAN2_F25R1 ; \ CAN2_F25R1_FB8, Filter bits
: CAN2_F25R1_FB9 ( -- x addr ) 9 bit CAN2_F25R1 ; \ CAN2_F25R1_FB9, Filter bits
: CAN2_F25R1_FB10 ( -- x addr ) 10 bit CAN2_F25R1 ; \ CAN2_F25R1_FB10, Filter bits
: CAN2_F25R1_FB11 ( -- x addr ) 11 bit CAN2_F25R1 ; \ CAN2_F25R1_FB11, Filter bits
: CAN2_F25R1_FB12 ( -- x addr ) 12 bit CAN2_F25R1 ; \ CAN2_F25R1_FB12, Filter bits
: CAN2_F25R1_FB13 ( -- x addr ) 13 bit CAN2_F25R1 ; \ CAN2_F25R1_FB13, Filter bits
: CAN2_F25R1_FB14 ( -- x addr ) 14 bit CAN2_F25R1 ; \ CAN2_F25R1_FB14, Filter bits
: CAN2_F25R1_FB15 ( -- x addr ) 15 bit CAN2_F25R1 ; \ CAN2_F25R1_FB15, Filter bits
: CAN2_F25R1_FB16 ( -- x addr ) 16 bit CAN2_F25R1 ; \ CAN2_F25R1_FB16, Filter bits
: CAN2_F25R1_FB17 ( -- x addr ) 17 bit CAN2_F25R1 ; \ CAN2_F25R1_FB17, Filter bits
: CAN2_F25R1_FB18 ( -- x addr ) 18 bit CAN2_F25R1 ; \ CAN2_F25R1_FB18, Filter bits
: CAN2_F25R1_FB19 ( -- x addr ) 19 bit CAN2_F25R1 ; \ CAN2_F25R1_FB19, Filter bits
: CAN2_F25R1_FB20 ( -- x addr ) 20 bit CAN2_F25R1 ; \ CAN2_F25R1_FB20, Filter bits
: CAN2_F25R1_FB21 ( -- x addr ) 21 bit CAN2_F25R1 ; \ CAN2_F25R1_FB21, Filter bits
: CAN2_F25R1_FB22 ( -- x addr ) 22 bit CAN2_F25R1 ; \ CAN2_F25R1_FB22, Filter bits
: CAN2_F25R1_FB23 ( -- x addr ) 23 bit CAN2_F25R1 ; \ CAN2_F25R1_FB23, Filter bits
: CAN2_F25R1_FB24 ( -- x addr ) 24 bit CAN2_F25R1 ; \ CAN2_F25R1_FB24, Filter bits
: CAN2_F25R1_FB25 ( -- x addr ) 25 bit CAN2_F25R1 ; \ CAN2_F25R1_FB25, Filter bits
: CAN2_F25R1_FB26 ( -- x addr ) 26 bit CAN2_F25R1 ; \ CAN2_F25R1_FB26, Filter bits
: CAN2_F25R1_FB27 ( -- x addr ) 27 bit CAN2_F25R1 ; \ CAN2_F25R1_FB27, Filter bits
: CAN2_F25R1_FB28 ( -- x addr ) 28 bit CAN2_F25R1 ; \ CAN2_F25R1_FB28, Filter bits
: CAN2_F25R1_FB29 ( -- x addr ) 29 bit CAN2_F25R1 ; \ CAN2_F25R1_FB29, Filter bits
: CAN2_F25R1_FB30 ( -- x addr ) 30 bit CAN2_F25R1 ; \ CAN2_F25R1_FB30, Filter bits
: CAN2_F25R1_FB31 ( -- x addr ) 31 bit CAN2_F25R1 ; \ CAN2_F25R1_FB31, Filter bits

\ CAN2_F25R2 (read-write) Reset:0x00000000
: CAN2_F25R2_FB0 ( -- x addr ) 0 bit CAN2_F25R2 ; \ CAN2_F25R2_FB0, Filter bits
: CAN2_F25R2_FB1 ( -- x addr ) 1 bit CAN2_F25R2 ; \ CAN2_F25R2_FB1, Filter bits
: CAN2_F25R2_FB2 ( -- x addr ) 2 bit CAN2_F25R2 ; \ CAN2_F25R2_FB2, Filter bits
: CAN2_F25R2_FB3 ( -- x addr ) 3 bit CAN2_F25R2 ; \ CAN2_F25R2_FB3, Filter bits
: CAN2_F25R2_FB4 ( -- x addr ) 4 bit CAN2_F25R2 ; \ CAN2_F25R2_FB4, Filter bits
: CAN2_F25R2_FB5 ( -- x addr ) 5 bit CAN2_F25R2 ; \ CAN2_F25R2_FB5, Filter bits
: CAN2_F25R2_FB6 ( -- x addr ) 6 bit CAN2_F25R2 ; \ CAN2_F25R2_FB6, Filter bits
: CAN2_F25R2_FB7 ( -- x addr ) 7 bit CAN2_F25R2 ; \ CAN2_F25R2_FB7, Filter bits
: CAN2_F25R2_FB8 ( -- x addr ) 8 bit CAN2_F25R2 ; \ CAN2_F25R2_FB8, Filter bits
: CAN2_F25R2_FB9 ( -- x addr ) 9 bit CAN2_F25R2 ; \ CAN2_F25R2_FB9, Filter bits
: CAN2_F25R2_FB10 ( -- x addr ) 10 bit CAN2_F25R2 ; \ CAN2_F25R2_FB10, Filter bits
: CAN2_F25R2_FB11 ( -- x addr ) 11 bit CAN2_F25R2 ; \ CAN2_F25R2_FB11, Filter bits
: CAN2_F25R2_FB12 ( -- x addr ) 12 bit CAN2_F25R2 ; \ CAN2_F25R2_FB12, Filter bits
: CAN2_F25R2_FB13 ( -- x addr ) 13 bit CAN2_F25R2 ; \ CAN2_F25R2_FB13, Filter bits
: CAN2_F25R2_FB14 ( -- x addr ) 14 bit CAN2_F25R2 ; \ CAN2_F25R2_FB14, Filter bits
: CAN2_F25R2_FB15 ( -- x addr ) 15 bit CAN2_F25R2 ; \ CAN2_F25R2_FB15, Filter bits
: CAN2_F25R2_FB16 ( -- x addr ) 16 bit CAN2_F25R2 ; \ CAN2_F25R2_FB16, Filter bits
: CAN2_F25R2_FB17 ( -- x addr ) 17 bit CAN2_F25R2 ; \ CAN2_F25R2_FB17, Filter bits
: CAN2_F25R2_FB18 ( -- x addr ) 18 bit CAN2_F25R2 ; \ CAN2_F25R2_FB18, Filter bits
: CAN2_F25R2_FB19 ( -- x addr ) 19 bit CAN2_F25R2 ; \ CAN2_F25R2_FB19, Filter bits
: CAN2_F25R2_FB20 ( -- x addr ) 20 bit CAN2_F25R2 ; \ CAN2_F25R2_FB20, Filter bits
: CAN2_F25R2_FB21 ( -- x addr ) 21 bit CAN2_F25R2 ; \ CAN2_F25R2_FB21, Filter bits
: CAN2_F25R2_FB22 ( -- x addr ) 22 bit CAN2_F25R2 ; \ CAN2_F25R2_FB22, Filter bits
: CAN2_F25R2_FB23 ( -- x addr ) 23 bit CAN2_F25R2 ; \ CAN2_F25R2_FB23, Filter bits
: CAN2_F25R2_FB24 ( -- x addr ) 24 bit CAN2_F25R2 ; \ CAN2_F25R2_FB24, Filter bits
: CAN2_F25R2_FB25 ( -- x addr ) 25 bit CAN2_F25R2 ; \ CAN2_F25R2_FB25, Filter bits
: CAN2_F25R2_FB26 ( -- x addr ) 26 bit CAN2_F25R2 ; \ CAN2_F25R2_FB26, Filter bits
: CAN2_F25R2_FB27 ( -- x addr ) 27 bit CAN2_F25R2 ; \ CAN2_F25R2_FB27, Filter bits
: CAN2_F25R2_FB28 ( -- x addr ) 28 bit CAN2_F25R2 ; \ CAN2_F25R2_FB28, Filter bits
: CAN2_F25R2_FB29 ( -- x addr ) 29 bit CAN2_F25R2 ; \ CAN2_F25R2_FB29, Filter bits
: CAN2_F25R2_FB30 ( -- x addr ) 30 bit CAN2_F25R2 ; \ CAN2_F25R2_FB30, Filter bits
: CAN2_F25R2_FB31 ( -- x addr ) 31 bit CAN2_F25R2 ; \ CAN2_F25R2_FB31, Filter bits

\ CAN2_F26R1 (read-write) Reset:0x00000000
: CAN2_F26R1_FB0 ( -- x addr ) 0 bit CAN2_F26R1 ; \ CAN2_F26R1_FB0, Filter bits
: CAN2_F26R1_FB1 ( -- x addr ) 1 bit CAN2_F26R1 ; \ CAN2_F26R1_FB1, Filter bits
: CAN2_F26R1_FB2 ( -- x addr ) 2 bit CAN2_F26R1 ; \ CAN2_F26R1_FB2, Filter bits
: CAN2_F26R1_FB3 ( -- x addr ) 3 bit CAN2_F26R1 ; \ CAN2_F26R1_FB3, Filter bits
: CAN2_F26R1_FB4 ( -- x addr ) 4 bit CAN2_F26R1 ; \ CAN2_F26R1_FB4, Filter bits
: CAN2_F26R1_FB5 ( -- x addr ) 5 bit CAN2_F26R1 ; \ CAN2_F26R1_FB5, Filter bits
: CAN2_F26R1_FB6 ( -- x addr ) 6 bit CAN2_F26R1 ; \ CAN2_F26R1_FB6, Filter bits
: CAN2_F26R1_FB7 ( -- x addr ) 7 bit CAN2_F26R1 ; \ CAN2_F26R1_FB7, Filter bits
: CAN2_F26R1_FB8 ( -- x addr ) 8 bit CAN2_F26R1 ; \ CAN2_F26R1_FB8, Filter bits
: CAN2_F26R1_FB9 ( -- x addr ) 9 bit CAN2_F26R1 ; \ CAN2_F26R1_FB9, Filter bits
: CAN2_F26R1_FB10 ( -- x addr ) 10 bit CAN2_F26R1 ; \ CAN2_F26R1_FB10, Filter bits
: CAN2_F26R1_FB11 ( -- x addr ) 11 bit CAN2_F26R1 ; \ CAN2_F26R1_FB11, Filter bits
: CAN2_F26R1_FB12 ( -- x addr ) 12 bit CAN2_F26R1 ; \ CAN2_F26R1_FB12, Filter bits
: CAN2_F26R1_FB13 ( -- x addr ) 13 bit CAN2_F26R1 ; \ CAN2_F26R1_FB13, Filter bits
: CAN2_F26R1_FB14 ( -- x addr ) 14 bit CAN2_F26R1 ; \ CAN2_F26R1_FB14, Filter bits
: CAN2_F26R1_FB15 ( -- x addr ) 15 bit CAN2_F26R1 ; \ CAN2_F26R1_FB15, Filter bits
: CAN2_F26R1_FB16 ( -- x addr ) 16 bit CAN2_F26R1 ; \ CAN2_F26R1_FB16, Filter bits
: CAN2_F26R1_FB17 ( -- x addr ) 17 bit CAN2_F26R1 ; \ CAN2_F26R1_FB17, Filter bits
: CAN2_F26R1_FB18 ( -- x addr ) 18 bit CAN2_F26R1 ; \ CAN2_F26R1_FB18, Filter bits
: CAN2_F26R1_FB19 ( -- x addr ) 19 bit CAN2_F26R1 ; \ CAN2_F26R1_FB19, Filter bits
: CAN2_F26R1_FB20 ( -- x addr ) 20 bit CAN2_F26R1 ; \ CAN2_F26R1_FB20, Filter bits
: CAN2_F26R1_FB21 ( -- x addr ) 21 bit CAN2_F26R1 ; \ CAN2_F26R1_FB21, Filter bits
: CAN2_F26R1_FB22 ( -- x addr ) 22 bit CAN2_F26R1 ; \ CAN2_F26R1_FB22, Filter bits
: CAN2_F26R1_FB23 ( -- x addr ) 23 bit CAN2_F26R1 ; \ CAN2_F26R1_FB23, Filter bits
: CAN2_F26R1_FB24 ( -- x addr ) 24 bit CAN2_F26R1 ; \ CAN2_F26R1_FB24, Filter bits
: CAN2_F26R1_FB25 ( -- x addr ) 25 bit CAN2_F26R1 ; \ CAN2_F26R1_FB25, Filter bits
: CAN2_F26R1_FB26 ( -- x addr ) 26 bit CAN2_F26R1 ; \ CAN2_F26R1_FB26, Filter bits
: CAN2_F26R1_FB27 ( -- x addr ) 27 bit CAN2_F26R1 ; \ CAN2_F26R1_FB27, Filter bits
: CAN2_F26R1_FB28 ( -- x addr ) 28 bit CAN2_F26R1 ; \ CAN2_F26R1_FB28, Filter bits
: CAN2_F26R1_FB29 ( -- x addr ) 29 bit CAN2_F26R1 ; \ CAN2_F26R1_FB29, Filter bits
: CAN2_F26R1_FB30 ( -- x addr ) 30 bit CAN2_F26R1 ; \ CAN2_F26R1_FB30, Filter bits
: CAN2_F26R1_FB31 ( -- x addr ) 31 bit CAN2_F26R1 ; \ CAN2_F26R1_FB31, Filter bits

\ CAN2_F26R2 (read-write) Reset:0x00000000
: CAN2_F26R2_FB0 ( -- x addr ) 0 bit CAN2_F26R2 ; \ CAN2_F26R2_FB0, Filter bits
: CAN2_F26R2_FB1 ( -- x addr ) 1 bit CAN2_F26R2 ; \ CAN2_F26R2_FB1, Filter bits
: CAN2_F26R2_FB2 ( -- x addr ) 2 bit CAN2_F26R2 ; \ CAN2_F26R2_FB2, Filter bits
: CAN2_F26R2_FB3 ( -- x addr ) 3 bit CAN2_F26R2 ; \ CAN2_F26R2_FB3, Filter bits
: CAN2_F26R2_FB4 ( -- x addr ) 4 bit CAN2_F26R2 ; \ CAN2_F26R2_FB4, Filter bits
: CAN2_F26R2_FB5 ( -- x addr ) 5 bit CAN2_F26R2 ; \ CAN2_F26R2_FB5, Filter bits
: CAN2_F26R2_FB6 ( -- x addr ) 6 bit CAN2_F26R2 ; \ CAN2_F26R2_FB6, Filter bits
: CAN2_F26R2_FB7 ( -- x addr ) 7 bit CAN2_F26R2 ; \ CAN2_F26R2_FB7, Filter bits
: CAN2_F26R2_FB8 ( -- x addr ) 8 bit CAN2_F26R2 ; \ CAN2_F26R2_FB8, Filter bits
: CAN2_F26R2_FB9 ( -- x addr ) 9 bit CAN2_F26R2 ; \ CAN2_F26R2_FB9, Filter bits
: CAN2_F26R2_FB10 ( -- x addr ) 10 bit CAN2_F26R2 ; \ CAN2_F26R2_FB10, Filter bits
: CAN2_F26R2_FB11 ( -- x addr ) 11 bit CAN2_F26R2 ; \ CAN2_F26R2_FB11, Filter bits
: CAN2_F26R2_FB12 ( -- x addr ) 12 bit CAN2_F26R2 ; \ CAN2_F26R2_FB12, Filter bits
: CAN2_F26R2_FB13 ( -- x addr ) 13 bit CAN2_F26R2 ; \ CAN2_F26R2_FB13, Filter bits
: CAN2_F26R2_FB14 ( -- x addr ) 14 bit CAN2_F26R2 ; \ CAN2_F26R2_FB14, Filter bits
: CAN2_F26R2_FB15 ( -- x addr ) 15 bit CAN2_F26R2 ; \ CAN2_F26R2_FB15, Filter bits
: CAN2_F26R2_FB16 ( -- x addr ) 16 bit CAN2_F26R2 ; \ CAN2_F26R2_FB16, Filter bits
: CAN2_F26R2_FB17 ( -- x addr ) 17 bit CAN2_F26R2 ; \ CAN2_F26R2_FB17, Filter bits
: CAN2_F26R2_FB18 ( -- x addr ) 18 bit CAN2_F26R2 ; \ CAN2_F26R2_FB18, Filter bits
: CAN2_F26R2_FB19 ( -- x addr ) 19 bit CAN2_F26R2 ; \ CAN2_F26R2_FB19, Filter bits
: CAN2_F26R2_FB20 ( -- x addr ) 20 bit CAN2_F26R2 ; \ CAN2_F26R2_FB20, Filter bits
: CAN2_F26R2_FB21 ( -- x addr ) 21 bit CAN2_F26R2 ; \ CAN2_F26R2_FB21, Filter bits
: CAN2_F26R2_FB22 ( -- x addr ) 22 bit CAN2_F26R2 ; \ CAN2_F26R2_FB22, Filter bits
: CAN2_F26R2_FB23 ( -- x addr ) 23 bit CAN2_F26R2 ; \ CAN2_F26R2_FB23, Filter bits
: CAN2_F26R2_FB24 ( -- x addr ) 24 bit CAN2_F26R2 ; \ CAN2_F26R2_FB24, Filter bits
: CAN2_F26R2_FB25 ( -- x addr ) 25 bit CAN2_F26R2 ; \ CAN2_F26R2_FB25, Filter bits
: CAN2_F26R2_FB26 ( -- x addr ) 26 bit CAN2_F26R2 ; \ CAN2_F26R2_FB26, Filter bits
: CAN2_F26R2_FB27 ( -- x addr ) 27 bit CAN2_F26R2 ; \ CAN2_F26R2_FB27, Filter bits
: CAN2_F26R2_FB28 ( -- x addr ) 28 bit CAN2_F26R2 ; \ CAN2_F26R2_FB28, Filter bits
: CAN2_F26R2_FB29 ( -- x addr ) 29 bit CAN2_F26R2 ; \ CAN2_F26R2_FB29, Filter bits
: CAN2_F26R2_FB30 ( -- x addr ) 30 bit CAN2_F26R2 ; \ CAN2_F26R2_FB30, Filter bits
: CAN2_F26R2_FB31 ( -- x addr ) 31 bit CAN2_F26R2 ; \ CAN2_F26R2_FB31, Filter bits

\ CAN2_F27R1 (read-write) Reset:0x00000000
: CAN2_F27R1_FB0 ( -- x addr ) 0 bit CAN2_F27R1 ; \ CAN2_F27R1_FB0, Filter bits
: CAN2_F27R1_FB1 ( -- x addr ) 1 bit CAN2_F27R1 ; \ CAN2_F27R1_FB1, Filter bits
: CAN2_F27R1_FB2 ( -- x addr ) 2 bit CAN2_F27R1 ; \ CAN2_F27R1_FB2, Filter bits
: CAN2_F27R1_FB3 ( -- x addr ) 3 bit CAN2_F27R1 ; \ CAN2_F27R1_FB3, Filter bits
: CAN2_F27R1_FB4 ( -- x addr ) 4 bit CAN2_F27R1 ; \ CAN2_F27R1_FB4, Filter bits
: CAN2_F27R1_FB5 ( -- x addr ) 5 bit CAN2_F27R1 ; \ CAN2_F27R1_FB5, Filter bits
: CAN2_F27R1_FB6 ( -- x addr ) 6 bit CAN2_F27R1 ; \ CAN2_F27R1_FB6, Filter bits
: CAN2_F27R1_FB7 ( -- x addr ) 7 bit CAN2_F27R1 ; \ CAN2_F27R1_FB7, Filter bits
: CAN2_F27R1_FB8 ( -- x addr ) 8 bit CAN2_F27R1 ; \ CAN2_F27R1_FB8, Filter bits
: CAN2_F27R1_FB9 ( -- x addr ) 9 bit CAN2_F27R1 ; \ CAN2_F27R1_FB9, Filter bits
: CAN2_F27R1_FB10 ( -- x addr ) 10 bit CAN2_F27R1 ; \ CAN2_F27R1_FB10, Filter bits
: CAN2_F27R1_FB11 ( -- x addr ) 11 bit CAN2_F27R1 ; \ CAN2_F27R1_FB11, Filter bits
: CAN2_F27R1_FB12 ( -- x addr ) 12 bit CAN2_F27R1 ; \ CAN2_F27R1_FB12, Filter bits
: CAN2_F27R1_FB13 ( -- x addr ) 13 bit CAN2_F27R1 ; \ CAN2_F27R1_FB13, Filter bits
: CAN2_F27R1_FB14 ( -- x addr ) 14 bit CAN2_F27R1 ; \ CAN2_F27R1_FB14, Filter bits
: CAN2_F27R1_FB15 ( -- x addr ) 15 bit CAN2_F27R1 ; \ CAN2_F27R1_FB15, Filter bits
: CAN2_F27R1_FB16 ( -- x addr ) 16 bit CAN2_F27R1 ; \ CAN2_F27R1_FB16, Filter bits
: CAN2_F27R1_FB17 ( -- x addr ) 17 bit CAN2_F27R1 ; \ CAN2_F27R1_FB17, Filter bits
: CAN2_F27R1_FB18 ( -- x addr ) 18 bit CAN2_F27R1 ; \ CAN2_F27R1_FB18, Filter bits
: CAN2_F27R1_FB19 ( -- x addr ) 19 bit CAN2_F27R1 ; \ CAN2_F27R1_FB19, Filter bits
: CAN2_F27R1_FB20 ( -- x addr ) 20 bit CAN2_F27R1 ; \ CAN2_F27R1_FB20, Filter bits
: CAN2_F27R1_FB21 ( -- x addr ) 21 bit CAN2_F27R1 ; \ CAN2_F27R1_FB21, Filter bits
: CAN2_F27R1_FB22 ( -- x addr ) 22 bit CAN2_F27R1 ; \ CAN2_F27R1_FB22, Filter bits
: CAN2_F27R1_FB23 ( -- x addr ) 23 bit CAN2_F27R1 ; \ CAN2_F27R1_FB23, Filter bits
: CAN2_F27R1_FB24 ( -- x addr ) 24 bit CAN2_F27R1 ; \ CAN2_F27R1_FB24, Filter bits
: CAN2_F27R1_FB25 ( -- x addr ) 25 bit CAN2_F27R1 ; \ CAN2_F27R1_FB25, Filter bits
: CAN2_F27R1_FB26 ( -- x addr ) 26 bit CAN2_F27R1 ; \ CAN2_F27R1_FB26, Filter bits
: CAN2_F27R1_FB27 ( -- x addr ) 27 bit CAN2_F27R1 ; \ CAN2_F27R1_FB27, Filter bits
: CAN2_F27R1_FB28 ( -- x addr ) 28 bit CAN2_F27R1 ; \ CAN2_F27R1_FB28, Filter bits
: CAN2_F27R1_FB29 ( -- x addr ) 29 bit CAN2_F27R1 ; \ CAN2_F27R1_FB29, Filter bits
: CAN2_F27R1_FB30 ( -- x addr ) 30 bit CAN2_F27R1 ; \ CAN2_F27R1_FB30, Filter bits
: CAN2_F27R1_FB31 ( -- x addr ) 31 bit CAN2_F27R1 ; \ CAN2_F27R1_FB31, Filter bits

\ CAN2_F27R2 (read-write) Reset:0x00000000
: CAN2_F27R2_FB0 ( -- x addr ) 0 bit CAN2_F27R2 ; \ CAN2_F27R2_FB0, Filter bits
: CAN2_F27R2_FB1 ( -- x addr ) 1 bit CAN2_F27R2 ; \ CAN2_F27R2_FB1, Filter bits
: CAN2_F27R2_FB2 ( -- x addr ) 2 bit CAN2_F27R2 ; \ CAN2_F27R2_FB2, Filter bits
: CAN2_F27R2_FB3 ( -- x addr ) 3 bit CAN2_F27R2 ; \ CAN2_F27R2_FB3, Filter bits
: CAN2_F27R2_FB4 ( -- x addr ) 4 bit CAN2_F27R2 ; \ CAN2_F27R2_FB4, Filter bits
: CAN2_F27R2_FB5 ( -- x addr ) 5 bit CAN2_F27R2 ; \ CAN2_F27R2_FB5, Filter bits
: CAN2_F27R2_FB6 ( -- x addr ) 6 bit CAN2_F27R2 ; \ CAN2_F27R2_FB6, Filter bits
: CAN2_F27R2_FB7 ( -- x addr ) 7 bit CAN2_F27R2 ; \ CAN2_F27R2_FB7, Filter bits
: CAN2_F27R2_FB8 ( -- x addr ) 8 bit CAN2_F27R2 ; \ CAN2_F27R2_FB8, Filter bits
: CAN2_F27R2_FB9 ( -- x addr ) 9 bit CAN2_F27R2 ; \ CAN2_F27R2_FB9, Filter bits
: CAN2_F27R2_FB10 ( -- x addr ) 10 bit CAN2_F27R2 ; \ CAN2_F27R2_FB10, Filter bits
: CAN2_F27R2_FB11 ( -- x addr ) 11 bit CAN2_F27R2 ; \ CAN2_F27R2_FB11, Filter bits
: CAN2_F27R2_FB12 ( -- x addr ) 12 bit CAN2_F27R2 ; \ CAN2_F27R2_FB12, Filter bits
: CAN2_F27R2_FB13 ( -- x addr ) 13 bit CAN2_F27R2 ; \ CAN2_F27R2_FB13, Filter bits
: CAN2_F27R2_FB14 ( -- x addr ) 14 bit CAN2_F27R2 ; \ CAN2_F27R2_FB14, Filter bits
: CAN2_F27R2_FB15 ( -- x addr ) 15 bit CAN2_F27R2 ; \ CAN2_F27R2_FB15, Filter bits
: CAN2_F27R2_FB16 ( -- x addr ) 16 bit CAN2_F27R2 ; \ CAN2_F27R2_FB16, Filter bits
: CAN2_F27R2_FB17 ( -- x addr ) 17 bit CAN2_F27R2 ; \ CAN2_F27R2_FB17, Filter bits
: CAN2_F27R2_FB18 ( -- x addr ) 18 bit CAN2_F27R2 ; \ CAN2_F27R2_FB18, Filter bits
: CAN2_F27R2_FB19 ( -- x addr ) 19 bit CAN2_F27R2 ; \ CAN2_F27R2_FB19, Filter bits
: CAN2_F27R2_FB20 ( -- x addr ) 20 bit CAN2_F27R2 ; \ CAN2_F27R2_FB20, Filter bits
: CAN2_F27R2_FB21 ( -- x addr ) 21 bit CAN2_F27R2 ; \ CAN2_F27R2_FB21, Filter bits
: CAN2_F27R2_FB22 ( -- x addr ) 22 bit CAN2_F27R2 ; \ CAN2_F27R2_FB22, Filter bits
: CAN2_F27R2_FB23 ( -- x addr ) 23 bit CAN2_F27R2 ; \ CAN2_F27R2_FB23, Filter bits
: CAN2_F27R2_FB24 ( -- x addr ) 24 bit CAN2_F27R2 ; \ CAN2_F27R2_FB24, Filter bits
: CAN2_F27R2_FB25 ( -- x addr ) 25 bit CAN2_F27R2 ; \ CAN2_F27R2_FB25, Filter bits
: CAN2_F27R2_FB26 ( -- x addr ) 26 bit CAN2_F27R2 ; \ CAN2_F27R2_FB26, Filter bits
: CAN2_F27R2_FB27 ( -- x addr ) 27 bit CAN2_F27R2 ; \ CAN2_F27R2_FB27, Filter bits
: CAN2_F27R2_FB28 ( -- x addr ) 28 bit CAN2_F27R2 ; \ CAN2_F27R2_FB28, Filter bits
: CAN2_F27R2_FB29 ( -- x addr ) 29 bit CAN2_F27R2 ; \ CAN2_F27R2_FB29, Filter bits
: CAN2_F27R2_FB30 ( -- x addr ) 30 bit CAN2_F27R2 ; \ CAN2_F27R2_FB30, Filter bits
: CAN2_F27R2_FB31 ( -- x addr ) 31 bit CAN2_F27R2 ; \ CAN2_F27R2_FB31, Filter bits

\ FLASH_ACR (read-write) Reset:0x00000000
: FLASH_ACR_LATENCY ( %bbbb -- x addr ) FLASH_ACR ; \ FLASH_ACR_LATENCY, Latency
: FLASH_ACR_PRFTEN ( -- x addr ) 8 bit FLASH_ACR ; \ FLASH_ACR_PRFTEN, Prefetch enable
: FLASH_ACR_ARTEN ( -- x addr ) 9 bit FLASH_ACR ; \ FLASH_ACR_ARTEN, ART Accelerator Enable
: FLASH_ACR_ARTRST ( -- x addr ) 11 bit FLASH_ACR ; \ FLASH_ACR_ARTRST, ART Accelerator reset

\ FLASH_KEYR (write-only) Reset:0x00000000
: FLASH_KEYR_KEY ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) FLASH_KEYR ; \ FLASH_KEYR_KEY, FPEC key

\ FLASH_OPTKEYR (write-only) Reset:0x00000000
: FLASH_OPTKEYR_OPTKEY ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) FLASH_OPTKEYR ; \ FLASH_OPTKEYR_OPTKEY, Option byte key

\ FLASH_SR (multiple-access)  Reset:0x00000000
: FLASH_SR_EOP ( -- x addr ) 0 bit FLASH_SR ; \ FLASH_SR_EOP, End of operation
: FLASH_SR_OPERR ( -- x addr ) 1 bit FLASH_SR ; \ FLASH_SR_OPERR, Operation error
: FLASH_SR_WRPERR ( -- x addr ) 4 bit FLASH_SR ; \ FLASH_SR_WRPERR, Write protection error
: FLASH_SR_PGAERR ( -- x addr ) 5 bit FLASH_SR ; \ FLASH_SR_PGAERR, Programming alignment error
: FLASH_SR_PGPERR ( -- x addr ) 6 bit FLASH_SR ; \ FLASH_SR_PGPERR, Programming parallelism error
: FLASH_SR_PGSERR ( -- x addr ) 7 bit FLASH_SR ; \ FLASH_SR_PGSERR, Programming sequence error
: FLASH_SR_BSY ( -- x addr ) 16 bit FLASH_SR ; \ FLASH_SR_BSY, Busy

\ FLASH_CR (read-write) Reset:0x80000000
: FLASH_CR_PG ( -- x addr ) 0 bit FLASH_CR ; \ FLASH_CR_PG, Programming
: FLASH_CR_SER ( -- x addr ) 1 bit FLASH_CR ; \ FLASH_CR_SER, Sector Erase
: FLASH_CR_MER ( -- x addr ) 2 bit FLASH_CR ; \ FLASH_CR_MER, Mass Erase of sectors 0 to 11
: FLASH_CR_SNB ( %bbbbb -- x addr ) 3 lshift FLASH_CR ; \ FLASH_CR_SNB, Sector number
: FLASH_CR_PSIZE ( %bb -- x addr ) 8 lshift FLASH_CR ; \ FLASH_CR_PSIZE, Program size
: FLASH_CR_MER1 ( -- x addr ) 15 bit FLASH_CR ; \ FLASH_CR_MER1, Mass Erase of sectors 12 to 23
: FLASH_CR_STRT ( -- x addr ) 16 bit FLASH_CR ; \ FLASH_CR_STRT, Start
: FLASH_CR_EOPIE ( -- x addr ) 24 bit FLASH_CR ; \ FLASH_CR_EOPIE, End of operation interrupt enable
: FLASH_CR_ERRIE ( -- x addr ) 25 bit FLASH_CR ; \ FLASH_CR_ERRIE, Error interrupt enable
: FLASH_CR_LOCK ( -- x addr ) 31 bit FLASH_CR ; \ FLASH_CR_LOCK, Lock

\ FLASH_OPTCR (read-write) Reset:0x0FFFAAED
: FLASH_OPTCR_OPTLOCK ( -- x addr ) 0 bit FLASH_OPTCR ; \ FLASH_OPTCR_OPTLOCK, Option lock
: FLASH_OPTCR_OPTSTRT ( -- x addr ) 1 bit FLASH_OPTCR ; \ FLASH_OPTCR_OPTSTRT, Option start
: FLASH_OPTCR_BOR_LEV ( %bb -- x addr ) 2 lshift FLASH_OPTCR ; \ FLASH_OPTCR_BOR_LEV, BOR reset Level
: FLASH_OPTCR_WWDG_SW ( -- x addr ) 4 bit FLASH_OPTCR ; \ FLASH_OPTCR_WWDG_SW, User option bytes
: FLASH_OPTCR_IWDG_SW ( -- x addr ) 5 bit FLASH_OPTCR ; \ FLASH_OPTCR_IWDG_SW, User option bytes
: FLASH_OPTCR_nRST_STOP ( -- x addr ) 6 bit FLASH_OPTCR ; \ FLASH_OPTCR_nRST_STOP, User option bytes
: FLASH_OPTCR_nRST_STDBY ( -- x addr ) 7 bit FLASH_OPTCR ; \ FLASH_OPTCR_nRST_STDBY, User option bytes
: FLASH_OPTCR_RDP ( %bbbbbbbb -- x addr ) 8 lshift FLASH_OPTCR ; \ FLASH_OPTCR_RDP, Read protect
: FLASH_OPTCR_nWRP ( %bbbbbbbb -- x addr ) 16 lshift FLASH_OPTCR ; \ FLASH_OPTCR_nWRP, Not write protect
: FLASH_OPTCR_IWDG_STDBY ( -- x addr ) 30 bit FLASH_OPTCR ; \ FLASH_OPTCR_IWDG_STDBY, Independent watchdog counter freeze in standby mode
: FLASH_OPTCR_IWDG_STOP ( -- x addr ) 31 bit FLASH_OPTCR ; \ FLASH_OPTCR_IWDG_STOP, Independent watchdog counter freeze in Stop mode

\ FLASH_OPTCR1 (read-write) Reset:0x0FFF0000
: FLASH_OPTCR1_BOOT_ADD0 ( %bbbbbbbbbbbbbbbb -- x addr ) FLASH_OPTCR1 ; \ FLASH_OPTCR1_BOOT_ADD0, Boot base address when Boot pin =0
: FLASH_OPTCR1_BOOT_ADD1 ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift FLASH_OPTCR1 ; \ FLASH_OPTCR1_BOOT_ADD1, Boot base address when Boot pin =1

\ EXTI_IMR (read-write) Reset:0x00000000
: EXTI_IMR_MR0 ( -- x addr ) 0 bit EXTI_IMR ; \ EXTI_IMR_MR0, Interrupt Mask on line 0
: EXTI_IMR_MR1 ( -- x addr ) 1 bit EXTI_IMR ; \ EXTI_IMR_MR1, Interrupt Mask on line 1
: EXTI_IMR_MR2 ( -- x addr ) 2 bit EXTI_IMR ; \ EXTI_IMR_MR2, Interrupt Mask on line 2
: EXTI_IMR_MR3 ( -- x addr ) 3 bit EXTI_IMR ; \ EXTI_IMR_MR3, Interrupt Mask on line 3
: EXTI_IMR_MR4 ( -- x addr ) 4 bit EXTI_IMR ; \ EXTI_IMR_MR4, Interrupt Mask on line 4
: EXTI_IMR_MR5 ( -- x addr ) 5 bit EXTI_IMR ; \ EXTI_IMR_MR5, Interrupt Mask on line 5
: EXTI_IMR_MR6 ( -- x addr ) 6 bit EXTI_IMR ; \ EXTI_IMR_MR6, Interrupt Mask on line 6
: EXTI_IMR_MR7 ( -- x addr ) 7 bit EXTI_IMR ; \ EXTI_IMR_MR7, Interrupt Mask on line 7
: EXTI_IMR_MR8 ( -- x addr ) 8 bit EXTI_IMR ; \ EXTI_IMR_MR8, Interrupt Mask on line 8
: EXTI_IMR_MR9 ( -- x addr ) 9 bit EXTI_IMR ; \ EXTI_IMR_MR9, Interrupt Mask on line 9
: EXTI_IMR_MR10 ( -- x addr ) 10 bit EXTI_IMR ; \ EXTI_IMR_MR10, Interrupt Mask on line 10
: EXTI_IMR_MR11 ( -- x addr ) 11 bit EXTI_IMR ; \ EXTI_IMR_MR11, Interrupt Mask on line 11
: EXTI_IMR_MR12 ( -- x addr ) 12 bit EXTI_IMR ; \ EXTI_IMR_MR12, Interrupt Mask on line 12
: EXTI_IMR_MR13 ( -- x addr ) 13 bit EXTI_IMR ; \ EXTI_IMR_MR13, Interrupt Mask on line 13
: EXTI_IMR_MR14 ( -- x addr ) 14 bit EXTI_IMR ; \ EXTI_IMR_MR14, Interrupt Mask on line 14
: EXTI_IMR_MR15 ( -- x addr ) 15 bit EXTI_IMR ; \ EXTI_IMR_MR15, Interrupt Mask on line 15
: EXTI_IMR_MR16 ( -- x addr ) 16 bit EXTI_IMR ; \ EXTI_IMR_MR16, Interrupt Mask on line 16
: EXTI_IMR_MR17 ( -- x addr ) 17 bit EXTI_IMR ; \ EXTI_IMR_MR17, Interrupt Mask on line 17
: EXTI_IMR_MR18 ( -- x addr ) 18 bit EXTI_IMR ; \ EXTI_IMR_MR18, Interrupt Mask on line 18
: EXTI_IMR_MR19 ( -- x addr ) 19 bit EXTI_IMR ; \ EXTI_IMR_MR19, Interrupt Mask on line 19
: EXTI_IMR_MR20 ( -- x addr ) 20 bit EXTI_IMR ; \ EXTI_IMR_MR20, Interrupt Mask on line 20
: EXTI_IMR_MR21 ( -- x addr ) 21 bit EXTI_IMR ; \ EXTI_IMR_MR21, Interrupt Mask on line 21
: EXTI_IMR_MR22 ( -- x addr ) 22 bit EXTI_IMR ; \ EXTI_IMR_MR22, Interrupt Mask on line 22

\ EXTI_EMR (read-write) Reset:0x00000000
: EXTI_EMR_MR0 ( -- x addr ) 0 bit EXTI_EMR ; \ EXTI_EMR_MR0, Event Mask on line 0
: EXTI_EMR_MR1 ( -- x addr ) 1 bit EXTI_EMR ; \ EXTI_EMR_MR1, Event Mask on line 1
: EXTI_EMR_MR2 ( -- x addr ) 2 bit EXTI_EMR ; \ EXTI_EMR_MR2, Event Mask on line 2
: EXTI_EMR_MR3 ( -- x addr ) 3 bit EXTI_EMR ; \ EXTI_EMR_MR3, Event Mask on line 3
: EXTI_EMR_MR4 ( -- x addr ) 4 bit EXTI_EMR ; \ EXTI_EMR_MR4, Event Mask on line 4
: EXTI_EMR_MR5 ( -- x addr ) 5 bit EXTI_EMR ; \ EXTI_EMR_MR5, Event Mask on line 5
: EXTI_EMR_MR6 ( -- x addr ) 6 bit EXTI_EMR ; \ EXTI_EMR_MR6, Event Mask on line 6
: EXTI_EMR_MR7 ( -- x addr ) 7 bit EXTI_EMR ; \ EXTI_EMR_MR7, Event Mask on line 7
: EXTI_EMR_MR8 ( -- x addr ) 8 bit EXTI_EMR ; \ EXTI_EMR_MR8, Event Mask on line 8
: EXTI_EMR_MR9 ( -- x addr ) 9 bit EXTI_EMR ; \ EXTI_EMR_MR9, Event Mask on line 9
: EXTI_EMR_MR10 ( -- x addr ) 10 bit EXTI_EMR ; \ EXTI_EMR_MR10, Event Mask on line 10
: EXTI_EMR_MR11 ( -- x addr ) 11 bit EXTI_EMR ; \ EXTI_EMR_MR11, Event Mask on line 11
: EXTI_EMR_MR12 ( -- x addr ) 12 bit EXTI_EMR ; \ EXTI_EMR_MR12, Event Mask on line 12
: EXTI_EMR_MR13 ( -- x addr ) 13 bit EXTI_EMR ; \ EXTI_EMR_MR13, Event Mask on line 13
: EXTI_EMR_MR14 ( -- x addr ) 14 bit EXTI_EMR ; \ EXTI_EMR_MR14, Event Mask on line 14
: EXTI_EMR_MR15 ( -- x addr ) 15 bit EXTI_EMR ; \ EXTI_EMR_MR15, Event Mask on line 15
: EXTI_EMR_MR16 ( -- x addr ) 16 bit EXTI_EMR ; \ EXTI_EMR_MR16, Event Mask on line 16
: EXTI_EMR_MR17 ( -- x addr ) 17 bit EXTI_EMR ; \ EXTI_EMR_MR17, Event Mask on line 17
: EXTI_EMR_MR18 ( -- x addr ) 18 bit EXTI_EMR ; \ EXTI_EMR_MR18, Event Mask on line 18
: EXTI_EMR_MR19 ( -- x addr ) 19 bit EXTI_EMR ; \ EXTI_EMR_MR19, Event Mask on line 19
: EXTI_EMR_MR20 ( -- x addr ) 20 bit EXTI_EMR ; \ EXTI_EMR_MR20, Event Mask on line 20
: EXTI_EMR_MR21 ( -- x addr ) 21 bit EXTI_EMR ; \ EXTI_EMR_MR21, Event Mask on line 21
: EXTI_EMR_MR22 ( -- x addr ) 22 bit EXTI_EMR ; \ EXTI_EMR_MR22, Event Mask on line 22

\ EXTI_RTSR (read-write) Reset:0x00000000
: EXTI_RTSR_TR0 ( -- x addr ) 0 bit EXTI_RTSR ; \ EXTI_RTSR_TR0, Rising trigger event configuration of line 0
: EXTI_RTSR_TR1 ( -- x addr ) 1 bit EXTI_RTSR ; \ EXTI_RTSR_TR1, Rising trigger event configuration of line 1
: EXTI_RTSR_TR2 ( -- x addr ) 2 bit EXTI_RTSR ; \ EXTI_RTSR_TR2, Rising trigger event configuration of line 2
: EXTI_RTSR_TR3 ( -- x addr ) 3 bit EXTI_RTSR ; \ EXTI_RTSR_TR3, Rising trigger event configuration of line 3
: EXTI_RTSR_TR4 ( -- x addr ) 4 bit EXTI_RTSR ; \ EXTI_RTSR_TR4, Rising trigger event configuration of line 4
: EXTI_RTSR_TR5 ( -- x addr ) 5 bit EXTI_RTSR ; \ EXTI_RTSR_TR5, Rising trigger event configuration of line 5
: EXTI_RTSR_TR6 ( -- x addr ) 6 bit EXTI_RTSR ; \ EXTI_RTSR_TR6, Rising trigger event configuration of line 6
: EXTI_RTSR_TR7 ( -- x addr ) 7 bit EXTI_RTSR ; \ EXTI_RTSR_TR7, Rising trigger event configuration of line 7
: EXTI_RTSR_TR8 ( -- x addr ) 8 bit EXTI_RTSR ; \ EXTI_RTSR_TR8, Rising trigger event configuration of line 8
: EXTI_RTSR_TR9 ( -- x addr ) 9 bit EXTI_RTSR ; \ EXTI_RTSR_TR9, Rising trigger event configuration of line 9
: EXTI_RTSR_TR10 ( -- x addr ) 10 bit EXTI_RTSR ; \ EXTI_RTSR_TR10, Rising trigger event configuration of line 10
: EXTI_RTSR_TR11 ( -- x addr ) 11 bit EXTI_RTSR ; \ EXTI_RTSR_TR11, Rising trigger event configuration of line 11
: EXTI_RTSR_TR12 ( -- x addr ) 12 bit EXTI_RTSR ; \ EXTI_RTSR_TR12, Rising trigger event configuration of line 12
: EXTI_RTSR_TR13 ( -- x addr ) 13 bit EXTI_RTSR ; \ EXTI_RTSR_TR13, Rising trigger event configuration of line 13
: EXTI_RTSR_TR14 ( -- x addr ) 14 bit EXTI_RTSR ; \ EXTI_RTSR_TR14, Rising trigger event configuration of line 14
: EXTI_RTSR_TR15 ( -- x addr ) 15 bit EXTI_RTSR ; \ EXTI_RTSR_TR15, Rising trigger event configuration of line 15
: EXTI_RTSR_TR16 ( -- x addr ) 16 bit EXTI_RTSR ; \ EXTI_RTSR_TR16, Rising trigger event configuration of line 16
: EXTI_RTSR_TR17 ( -- x addr ) 17 bit EXTI_RTSR ; \ EXTI_RTSR_TR17, Rising trigger event configuration of line 17
: EXTI_RTSR_TR18 ( -- x addr ) 18 bit EXTI_RTSR ; \ EXTI_RTSR_TR18, Rising trigger event configuration of line 18
: EXTI_RTSR_TR19 ( -- x addr ) 19 bit EXTI_RTSR ; \ EXTI_RTSR_TR19, Rising trigger event configuration of line 19
: EXTI_RTSR_TR20 ( -- x addr ) 20 bit EXTI_RTSR ; \ EXTI_RTSR_TR20, Rising trigger event configuration of line 20
: EXTI_RTSR_TR21 ( -- x addr ) 21 bit EXTI_RTSR ; \ EXTI_RTSR_TR21, Rising trigger event configuration of line 21
: EXTI_RTSR_TR22 ( -- x addr ) 22 bit EXTI_RTSR ; \ EXTI_RTSR_TR22, Rising trigger event configuration of line 22

\ EXTI_FTSR (read-write) Reset:0x00000000
: EXTI_FTSR_TR0 ( -- x addr ) 0 bit EXTI_FTSR ; \ EXTI_FTSR_TR0, Falling trigger event configuration of line 0
: EXTI_FTSR_TR1 ( -- x addr ) 1 bit EXTI_FTSR ; \ EXTI_FTSR_TR1, Falling trigger event configuration of line 1
: EXTI_FTSR_TR2 ( -- x addr ) 2 bit EXTI_FTSR ; \ EXTI_FTSR_TR2, Falling trigger event configuration of line 2
: EXTI_FTSR_TR3 ( -- x addr ) 3 bit EXTI_FTSR ; \ EXTI_FTSR_TR3, Falling trigger event configuration of line 3
: EXTI_FTSR_TR4 ( -- x addr ) 4 bit EXTI_FTSR ; \ EXTI_FTSR_TR4, Falling trigger event configuration of line 4
: EXTI_FTSR_TR5 ( -- x addr ) 5 bit EXTI_FTSR ; \ EXTI_FTSR_TR5, Falling trigger event configuration of line 5
: EXTI_FTSR_TR6 ( -- x addr ) 6 bit EXTI_FTSR ; \ EXTI_FTSR_TR6, Falling trigger event configuration of line 6
: EXTI_FTSR_TR7 ( -- x addr ) 7 bit EXTI_FTSR ; \ EXTI_FTSR_TR7, Falling trigger event configuration of line 7
: EXTI_FTSR_TR8 ( -- x addr ) 8 bit EXTI_FTSR ; \ EXTI_FTSR_TR8, Falling trigger event configuration of line 8
: EXTI_FTSR_TR9 ( -- x addr ) 9 bit EXTI_FTSR ; \ EXTI_FTSR_TR9, Falling trigger event configuration of line 9
: EXTI_FTSR_TR10 ( -- x addr ) 10 bit EXTI_FTSR ; \ EXTI_FTSR_TR10, Falling trigger event configuration of line 10
: EXTI_FTSR_TR11 ( -- x addr ) 11 bit EXTI_FTSR ; \ EXTI_FTSR_TR11, Falling trigger event configuration of line 11
: EXTI_FTSR_TR12 ( -- x addr ) 12 bit EXTI_FTSR ; \ EXTI_FTSR_TR12, Falling trigger event configuration of line 12
: EXTI_FTSR_TR13 ( -- x addr ) 13 bit EXTI_FTSR ; \ EXTI_FTSR_TR13, Falling trigger event configuration of line 13
: EXTI_FTSR_TR14 ( -- x addr ) 14 bit EXTI_FTSR ; \ EXTI_FTSR_TR14, Falling trigger event configuration of line 14
: EXTI_FTSR_TR15 ( -- x addr ) 15 bit EXTI_FTSR ; \ EXTI_FTSR_TR15, Falling trigger event configuration of line 15
: EXTI_FTSR_TR16 ( -- x addr ) 16 bit EXTI_FTSR ; \ EXTI_FTSR_TR16, Falling trigger event configuration of line 16
: EXTI_FTSR_TR17 ( -- x addr ) 17 bit EXTI_FTSR ; \ EXTI_FTSR_TR17, Falling trigger event configuration of line 17
: EXTI_FTSR_TR18 ( -- x addr ) 18 bit EXTI_FTSR ; \ EXTI_FTSR_TR18, Falling trigger event configuration of line 18
: EXTI_FTSR_TR19 ( -- x addr ) 19 bit EXTI_FTSR ; \ EXTI_FTSR_TR19, Falling trigger event configuration of line 19
: EXTI_FTSR_TR20 ( -- x addr ) 20 bit EXTI_FTSR ; \ EXTI_FTSR_TR20, Falling trigger event configuration of line 20
: EXTI_FTSR_TR21 ( -- x addr ) 21 bit EXTI_FTSR ; \ EXTI_FTSR_TR21, Falling trigger event configuration of line 21
: EXTI_FTSR_TR22 ( -- x addr ) 22 bit EXTI_FTSR ; \ EXTI_FTSR_TR22, Falling trigger event configuration of line 22

\ EXTI_SWIER (read-write) Reset:0x00000000
: EXTI_SWIER_SWIER0 ( -- x addr ) 0 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER0, Software Interrupt on line 0
: EXTI_SWIER_SWIER1 ( -- x addr ) 1 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER1, Software Interrupt on line 1
: EXTI_SWIER_SWIER2 ( -- x addr ) 2 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER2, Software Interrupt on line 2
: EXTI_SWIER_SWIER3 ( -- x addr ) 3 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER3, Software Interrupt on line 3
: EXTI_SWIER_SWIER4 ( -- x addr ) 4 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER4, Software Interrupt on line 4
: EXTI_SWIER_SWIER5 ( -- x addr ) 5 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER5, Software Interrupt on line 5
: EXTI_SWIER_SWIER6 ( -- x addr ) 6 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER6, Software Interrupt on line 6
: EXTI_SWIER_SWIER7 ( -- x addr ) 7 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER7, Software Interrupt on line 7
: EXTI_SWIER_SWIER8 ( -- x addr ) 8 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER8, Software Interrupt on line 8
: EXTI_SWIER_SWIER9 ( -- x addr ) 9 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER9, Software Interrupt on line 9
: EXTI_SWIER_SWIER10 ( -- x addr ) 10 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER10, Software Interrupt on line 10
: EXTI_SWIER_SWIER11 ( -- x addr ) 11 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER11, Software Interrupt on line 11
: EXTI_SWIER_SWIER12 ( -- x addr ) 12 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER12, Software Interrupt on line 12
: EXTI_SWIER_SWIER13 ( -- x addr ) 13 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER13, Software Interrupt on line 13
: EXTI_SWIER_SWIER14 ( -- x addr ) 14 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER14, Software Interrupt on line 14
: EXTI_SWIER_SWIER15 ( -- x addr ) 15 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER15, Software Interrupt on line 15
: EXTI_SWIER_SWIER16 ( -- x addr ) 16 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER16, Software Interrupt on line 16
: EXTI_SWIER_SWIER17 ( -- x addr ) 17 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER17, Software Interrupt on line 17
: EXTI_SWIER_SWIER18 ( -- x addr ) 18 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER18, Software Interrupt on line 18
: EXTI_SWIER_SWIER19 ( -- x addr ) 19 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER19, Software Interrupt on line 19
: EXTI_SWIER_SWIER20 ( -- x addr ) 20 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER20, Software Interrupt on line 20
: EXTI_SWIER_SWIER21 ( -- x addr ) 21 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER21, Software Interrupt on line 21
: EXTI_SWIER_SWIER22 ( -- x addr ) 22 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER22, Software Interrupt on line 22

\ EXTI_PR (read-write) Reset:0x00000000
: EXTI_PR_PR0 ( -- x addr ) 0 bit EXTI_PR ; \ EXTI_PR_PR0, Pending bit 0
: EXTI_PR_PR1 ( -- x addr ) 1 bit EXTI_PR ; \ EXTI_PR_PR1, Pending bit 1
: EXTI_PR_PR2 ( -- x addr ) 2 bit EXTI_PR ; \ EXTI_PR_PR2, Pending bit 2
: EXTI_PR_PR3 ( -- x addr ) 3 bit EXTI_PR ; \ EXTI_PR_PR3, Pending bit 3
: EXTI_PR_PR4 ( -- x addr ) 4 bit EXTI_PR ; \ EXTI_PR_PR4, Pending bit 4
: EXTI_PR_PR5 ( -- x addr ) 5 bit EXTI_PR ; \ EXTI_PR_PR5, Pending bit 5
: EXTI_PR_PR6 ( -- x addr ) 6 bit EXTI_PR ; \ EXTI_PR_PR6, Pending bit 6
: EXTI_PR_PR7 ( -- x addr ) 7 bit EXTI_PR ; \ EXTI_PR_PR7, Pending bit 7
: EXTI_PR_PR8 ( -- x addr ) 8 bit EXTI_PR ; \ EXTI_PR_PR8, Pending bit 8
: EXTI_PR_PR9 ( -- x addr ) 9 bit EXTI_PR ; \ EXTI_PR_PR9, Pending bit 9
: EXTI_PR_PR10 ( -- x addr ) 10 bit EXTI_PR ; \ EXTI_PR_PR10, Pending bit 10
: EXTI_PR_PR11 ( -- x addr ) 11 bit EXTI_PR ; \ EXTI_PR_PR11, Pending bit 11
: EXTI_PR_PR12 ( -- x addr ) 12 bit EXTI_PR ; \ EXTI_PR_PR12, Pending bit 12
: EXTI_PR_PR13 ( -- x addr ) 13 bit EXTI_PR ; \ EXTI_PR_PR13, Pending bit 13
: EXTI_PR_PR14 ( -- x addr ) 14 bit EXTI_PR ; \ EXTI_PR_PR14, Pending bit 14
: EXTI_PR_PR15 ( -- x addr ) 15 bit EXTI_PR ; \ EXTI_PR_PR15, Pending bit 15
: EXTI_PR_PR16 ( -- x addr ) 16 bit EXTI_PR ; \ EXTI_PR_PR16, Pending bit 16
: EXTI_PR_PR17 ( -- x addr ) 17 bit EXTI_PR ; \ EXTI_PR_PR17, Pending bit 17
: EXTI_PR_PR18 ( -- x addr ) 18 bit EXTI_PR ; \ EXTI_PR_PR18, Pending bit 18
: EXTI_PR_PR19 ( -- x addr ) 19 bit EXTI_PR ; \ EXTI_PR_PR19, Pending bit 19
: EXTI_PR_PR20 ( -- x addr ) 20 bit EXTI_PR ; \ EXTI_PR_PR20, Pending bit 20
: EXTI_PR_PR21 ( -- x addr ) 21 bit EXTI_PR ; \ EXTI_PR_PR21, Pending bit 21
: EXTI_PR_PR22 ( -- x addr ) 22 bit EXTI_PR ; \ EXTI_PR_PR22, Pending bit 22

\ LTDC_SSCR (read-write) Reset:0x00000000
: LTDC_SSCR_HSW ( %bbbbbbbbbb -- x addr ) 16 lshift LTDC_SSCR ; \ LTDC_SSCR_HSW, Horizontal Synchronization Width in units of pixel clock period
: LTDC_SSCR_VSH x addr ) LTDC_SSCR ; \ LTDC_SSCR_VSH, Vertical Synchronization Height in units of horizontal scan line

\ LTDC_BPCR (read-write) Reset:0x00000000
: LTDC_BPCR_AHBP ( %bbbbbbbbbb -- x addr ) 16 lshift LTDC_BPCR ; \ LTDC_BPCR_AHBP, Accumulated Horizontal back porch in units of pixel clock period
: LTDC_BPCR_AVBP x addr ) LTDC_BPCR ; \ LTDC_BPCR_AVBP, Accumulated Vertical back porch in units of horizontal scan line

\ LTDC_AWCR (read-write) Reset:0x00000000
: LTDC_AWCR_AAV ( %bbbbbbbbbb -- x addr ) 16 lshift LTDC_AWCR ; \ LTDC_AWCR_AAV, AAV
: LTDC_AWCR_AAH x addr ) LTDC_AWCR ; \ LTDC_AWCR_AAH, Accumulated Active Height in units of horizontal scan line

\ LTDC_TWCR (read-write) Reset:0x00000000
: LTDC_TWCR_TOTALW ( %bbbbbbbbbb -- x addr ) 16 lshift LTDC_TWCR ; \ LTDC_TWCR_TOTALW, Total Width in units of pixel clock period
: LTDC_TWCR_TOTALH x addr ) LTDC_TWCR ; \ LTDC_TWCR_TOTALH, Total Height in units of horizontal scan line

\ LTDC_GCR (multiple-access)  Reset:0x00002220
: LTDC_GCR_HSPOL ( -- x addr ) 31 bit LTDC_GCR ; \ LTDC_GCR_HSPOL, Horizontal Synchronization Polarity
: LTDC_GCR_VSPOL ( -- x addr ) 30 bit LTDC_GCR ; \ LTDC_GCR_VSPOL, Vertical Synchronization Polarity
: LTDC_GCR_DEPOL ( -- x addr ) 29 bit LTDC_GCR ; \ LTDC_GCR_DEPOL, Data Enable Polarity
: LTDC_GCR_PCPOL ( -- x addr ) 28 bit LTDC_GCR ; \ LTDC_GCR_PCPOL, Pixel Clock Polarity
: LTDC_GCR_DEN ( -- x addr ) 16 bit LTDC_GCR ; \ LTDC_GCR_DEN, Dither Enable
: LTDC_GCR_DRW ( %bbb -- x addr ) 12 lshift LTDC_GCR ; \ LTDC_GCR_DRW, Dither Red Width
: LTDC_GCR_DGW ( %bbb -- x addr ) 8 lshift LTDC_GCR ; \ LTDC_GCR_DGW, Dither Green Width
: LTDC_GCR_DBW ( %bbb -- x addr ) 4 lshift LTDC_GCR ; \ LTDC_GCR_DBW, Dither Blue Width
: LTDC_GCR_LTDCEN ( -- x addr ) 0 bit LTDC_GCR ; \ LTDC_GCR_LTDCEN, LCD-TFT controller enable bit

\ LTDC_SRCR (read-write) Reset:0x00000000
: LTDC_SRCR_VBR ( -- x addr ) 1 bit LTDC_SRCR ; \ LTDC_SRCR_VBR, Vertical Blanking Reload
: LTDC_SRCR_IMR ( -- x addr ) 0 bit LTDC_SRCR ; \ LTDC_SRCR_IMR, Immediate Reload

\ LTDC_BCCR (read-write) Reset:0x00000000
: LTDC_BCCR_BC ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) LTDC_BCCR ; \ LTDC_BCCR_BC, Background Color Red value

\ LTDC_IER (read-write) Reset:0x00000000
: LTDC_IER_RRIE ( -- x addr ) 3 bit LTDC_IER ; \ LTDC_IER_RRIE, Register Reload interrupt enable
: LTDC_IER_TERRIE ( -- x addr ) 2 bit LTDC_IER ; \ LTDC_IER_TERRIE, Transfer Error Interrupt Enable
: LTDC_IER_FUIE ( -- x addr ) 1 bit LTDC_IER ; \ LTDC_IER_FUIE, FIFO Underrun Interrupt Enable
: LTDC_IER_LIE ( -- x addr ) 0 bit LTDC_IER ; \ LTDC_IER_LIE, Line Interrupt Enable

\ LTDC_ISR (read-only) Reset:0x00000000
: LTDC_ISR_RRIF? ( --  1|0 ) 3 bit LTDC_ISR bit@ ; \ LTDC_ISR_RRIF, Register Reload Interrupt Flag
: LTDC_ISR_TERRIF? ( --  1|0 ) 2 bit LTDC_ISR bit@ ; \ LTDC_ISR_TERRIF, Transfer Error interrupt flag
: LTDC_ISR_FUIF? ( --  1|0 ) 1 bit LTDC_ISR bit@ ; \ LTDC_ISR_FUIF, FIFO Underrun Interrupt flag
: LTDC_ISR_LIF? ( --  1|0 ) 0 bit LTDC_ISR bit@ ; \ LTDC_ISR_LIF, Line Interrupt flag

\ LTDC_ICR (write-only) Reset:0x00000000
: LTDC_ICR_CRRIF ( -- x addr ) 3 bit LTDC_ICR ; \ LTDC_ICR_CRRIF, Clears Register Reload Interrupt Flag
: LTDC_ICR_CTERRIF ( -- x addr ) 2 bit LTDC_ICR ; \ LTDC_ICR_CTERRIF, Clears the Transfer Error Interrupt Flag
: LTDC_ICR_CFUIF ( -- x addr ) 1 bit LTDC_ICR ; \ LTDC_ICR_CFUIF, Clears the FIFO Underrun Interrupt flag
: LTDC_ICR_CLIF ( -- x addr ) 0 bit LTDC_ICR ; \ LTDC_ICR_CLIF, Clears the Line Interrupt Flag

\ LTDC_LIPCR (read-write) Reset:0x00000000
: LTDC_LIPCR_LIPOS x addr ) LTDC_LIPCR ; \ LTDC_LIPCR_LIPOS, Line Interrupt Position

\ LTDC_CPSR (read-only) Reset:0x00000000
: LTDC_CPSR_CXPOS? ( --  x ) 16 lshift LTDC_CPSR @ ; \ LTDC_CPSR_CXPOS, Current X Position
: LTDC_CPSR_CYPOS? ( --  x ) LTDC_CPSR @ ; \ LTDC_CPSR_CYPOS, Current Y Position

\ LTDC_CDSR (read-only) Reset:0x0000000F
: LTDC_CDSR_HSYNCS? ( --  1|0 ) 3 bit LTDC_CDSR bit@ ; \ LTDC_CDSR_HSYNCS, Horizontal Synchronization display Status
: LTDC_CDSR_VSYNCS? ( --  1|0 ) 2 bit LTDC_CDSR bit@ ; \ LTDC_CDSR_VSYNCS, Vertical Synchronization display Status
: LTDC_CDSR_HDES? ( --  1|0 ) 1 bit LTDC_CDSR bit@ ; \ LTDC_CDSR_HDES, Horizontal Data Enable display Status
: LTDC_CDSR_VDES? ( --  1|0 ) 0 bit LTDC_CDSR bit@ ; \ LTDC_CDSR_VDES, Vertical Data Enable display Status

\ LTDC_L1CR (read-write) Reset:0x00000000
: LTDC_L1CR_CLUTEN ( -- x addr ) 4 bit LTDC_L1CR ; \ LTDC_L1CR_CLUTEN, Color Look-Up Table Enable
: LTDC_L1CR_COLKEN ( -- x addr ) 1 bit LTDC_L1CR ; \ LTDC_L1CR_COLKEN, Color Keying Enable
: LTDC_L1CR_LEN ( -- x addr ) 0 bit LTDC_L1CR ; \ LTDC_L1CR_LEN, Layer Enable

\ LTDC_L1WHPCR (read-write) Reset:0x00000000
: LTDC_L1WHPCR_WHSPPOS ( %bbbbbbbbbbb -- x addr ) 16 lshift LTDC_L1WHPCR ; \ LTDC_L1WHPCR_WHSPPOS, Window Horizontal Stop Position
: LTDC_L1WHPCR_WHSTPOS ( %bbbbbbbbbbb -- x addr ) LTDC_L1WHPCR ; \ LTDC_L1WHPCR_WHSTPOS, Window Horizontal Start Position

\ LTDC_L1WVPCR (read-write) Reset:0x00000000
: LTDC_L1WVPCR_WVSPPOS x addr ) 16 lshift LTDC_L1WVPCR ; \ LTDC_L1WVPCR_WVSPPOS, Window Vertical Stop Position
: LTDC_L1WVPCR_WVSTPOS x addr ) LTDC_L1WVPCR ; \ LTDC_L1WVPCR_WVSTPOS, Window Vertical Start Position

\ LTDC_L1CKCR (read-write) Reset:0x00000000
: LTDC_L1CKCR_CKRED ( %bbbbbbbb -- x addr ) 16 lshift LTDC_L1CKCR ; \ LTDC_L1CKCR_CKRED, Color Key Red value
: LTDC_L1CKCR_CKGREEN ( %bbbbbbbb -- x addr ) 8 lshift LTDC_L1CKCR ; \ LTDC_L1CKCR_CKGREEN, Color Key Green value
: LTDC_L1CKCR_CKBLUE ( %bbbbbbbb -- x addr ) LTDC_L1CKCR ; \ LTDC_L1CKCR_CKBLUE, Color Key Blue value

\ LTDC_L1PFCR (read-write) Reset:0x00000000
: LTDC_L1PFCR_PF ( %bbb -- x addr ) LTDC_L1PFCR ; \ LTDC_L1PFCR_PF, Pixel Format

\ LTDC_L1CACR (read-write) Reset:0x00000000
: LTDC_L1CACR_CONSTA ( %bbbbbbbb -- x addr ) LTDC_L1CACR ; \ LTDC_L1CACR_CONSTA, Constant Alpha

\ LTDC_L1DCCR (read-write) Reset:0x00000000
: LTDC_L1DCCR_DCALPHA ( %bbbbbbbb -- x addr ) 24 lshift LTDC_L1DCCR ; \ LTDC_L1DCCR_DCALPHA, Default Color Alpha
: LTDC_L1DCCR_DCRED ( %bbbbbbbb -- x addr ) 16 lshift LTDC_L1DCCR ; \ LTDC_L1DCCR_DCRED, Default Color Red
: LTDC_L1DCCR_DCGREEN ( %bbbbbbbb -- x addr ) 8 lshift LTDC_L1DCCR ; \ LTDC_L1DCCR_DCGREEN, Default Color Green
: LTDC_L1DCCR_DCBLUE ( %bbbbbbbb -- x addr ) LTDC_L1DCCR ; \ LTDC_L1DCCR_DCBLUE, Default Color Blue

\ LTDC_L1BFCR (read-write) Reset:0x00000607
: LTDC_L1BFCR_BF1 ( %bbb -- x addr ) 8 lshift LTDC_L1BFCR ; \ LTDC_L1BFCR_BF1, Blending Factor 1
: LTDC_L1BFCR_BF2 ( %bbb -- x addr ) LTDC_L1BFCR ; \ LTDC_L1BFCR_BF2, Blending Factor 2

\ LTDC_L1CFBAR (read-write) Reset:0x00000000
: LTDC_L1CFBAR_CFBADD ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) LTDC_L1CFBAR ; \ LTDC_L1CFBAR_CFBADD, Color Frame Buffer Start Address

\ LTDC_L1CFBLR (read-write) Reset:0x00000000
: LTDC_L1CFBLR_CFBP x addr ) 16 lshift LTDC_L1CFBLR ; \ LTDC_L1CFBLR_CFBP, Color Frame Buffer Pitch in bytes
: LTDC_L1CFBLR_CFBLL x addr ) LTDC_L1CFBLR ; \ LTDC_L1CFBLR_CFBLL, Color Frame Buffer Line Length

\ LTDC_L1CFBLNR (read-write) Reset:0x00000000
: LTDC_L1CFBLNR_CFBLNBR x addr ) LTDC_L1CFBLNR ; \ LTDC_L1CFBLNR_CFBLNBR, Frame Buffer Line Number

\ LTDC_L1CLUTWR (write-only) Reset:0x00000000
: LTDC_L1CLUTWR_CLUTADD ( %bbbbbbbb -- x addr ) 24 lshift LTDC_L1CLUTWR ; \ LTDC_L1CLUTWR_CLUTADD, CLUT Address
: LTDC_L1CLUTWR_RED ( %bbbbbbbb -- x addr ) 16 lshift LTDC_L1CLUTWR ; \ LTDC_L1CLUTWR_RED, Red value
: LTDC_L1CLUTWR_GREEN ( %bbbbbbbb -- x addr ) 8 lshift LTDC_L1CLUTWR ; \ LTDC_L1CLUTWR_GREEN, Green value
: LTDC_L1CLUTWR_BLUE ( %bbbbbbbb -- x addr ) LTDC_L1CLUTWR ; \ LTDC_L1CLUTWR_BLUE, Blue value

\ LTDC_L2CR (read-write) Reset:0x00000000
: LTDC_L2CR_CLUTEN ( -- x addr ) 4 bit LTDC_L2CR ; \ LTDC_L2CR_CLUTEN, Color Look-Up Table Enable
: LTDC_L2CR_COLKEN ( -- x addr ) 1 bit LTDC_L2CR ; \ LTDC_L2CR_COLKEN, Color Keying Enable
: LTDC_L2CR_LEN ( -- x addr ) 0 bit LTDC_L2CR ; \ LTDC_L2CR_LEN, Layer Enable

\ LTDC_L2WHPCR (read-write) Reset:0x00000000
: LTDC_L2WHPCR_WHSPPOS ( %bbbbbbbbbbb -- x addr ) 16 lshift LTDC_L2WHPCR ; \ LTDC_L2WHPCR_WHSPPOS, Window Horizontal Stop Position
: LTDC_L2WHPCR_WHSTPOS ( %bbbbbbbbbbb -- x addr ) LTDC_L2WHPCR ; \ LTDC_L2WHPCR_WHSTPOS, Window Horizontal Start Position

\ LTDC_L2WVPCR (read-write) Reset:0x00000000
: LTDC_L2WVPCR_WVSPPOS x addr ) 16 lshift LTDC_L2WVPCR ; \ LTDC_L2WVPCR_WVSPPOS, Window Vertical Stop Position
: LTDC_L2WVPCR_WVSTPOS x addr ) LTDC_L2WVPCR ; \ LTDC_L2WVPCR_WVSTPOS, Window Vertical Start Position

\ LTDC_L2CKCR (read-write) Reset:0x00000000
: LTDC_L2CKCR_CKRED ( %bbbbbbbbb -- x addr ) 15 lshift LTDC_L2CKCR ; \ LTDC_L2CKCR_CKRED, Color Key Red value
: LTDC_L2CKCR_CKGREEN ( %bbbbbbb -- x addr ) 8 lshift LTDC_L2CKCR ; \ LTDC_L2CKCR_CKGREEN, Color Key Green value
: LTDC_L2CKCR_CKBLUE ( %bbbbbbbb -- x addr ) LTDC_L2CKCR ; \ LTDC_L2CKCR_CKBLUE, Color Key Blue value

\ LTDC_L2PFCR (read-write) Reset:0x00000000
: LTDC_L2PFCR_PF ( %bbb -- x addr ) LTDC_L2PFCR ; \ LTDC_L2PFCR_PF, Pixel Format

\ LTDC_L2CACR (read-write) Reset:0x00000000
: LTDC_L2CACR_CONSTA ( %bbbbbbbb -- x addr ) LTDC_L2CACR ; \ LTDC_L2CACR_CONSTA, Constant Alpha

\ LTDC_L2DCCR (read-write) Reset:0x00000000
: LTDC_L2DCCR_DCALPHA ( %bbbbbbbb -- x addr ) 24 lshift LTDC_L2DCCR ; \ LTDC_L2DCCR_DCALPHA, Default Color Alpha
: LTDC_L2DCCR_DCRED ( %bbbbbbbb -- x addr ) 16 lshift LTDC_L2DCCR ; \ LTDC_L2DCCR_DCRED, Default Color Red
: LTDC_L2DCCR_DCGREEN ( %bbbbbbbb -- x addr ) 8 lshift LTDC_L2DCCR ; \ LTDC_L2DCCR_DCGREEN, Default Color Green
: LTDC_L2DCCR_DCBLUE ( %bbbbbbbb -- x addr ) LTDC_L2DCCR ; \ LTDC_L2DCCR_DCBLUE, Default Color Blue

\ LTDC_L2BFCR (read-write) Reset:0x00000607
: LTDC_L2BFCR_BF1 ( %bbb -- x addr ) 8 lshift LTDC_L2BFCR ; \ LTDC_L2BFCR_BF1, Blending Factor 1
: LTDC_L2BFCR_BF2 ( %bbb -- x addr ) LTDC_L2BFCR ; \ LTDC_L2BFCR_BF2, Blending Factor 2

\ LTDC_L2CFBAR (read-write) Reset:0x00000000
: LTDC_L2CFBAR_CFBADD ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) LTDC_L2CFBAR ; \ LTDC_L2CFBAR_CFBADD, Color Frame Buffer Start Address

\ LTDC_L2CFBLR (read-write) Reset:0x00000000
: LTDC_L2CFBLR_CFBP x addr ) 16 lshift LTDC_L2CFBLR ; \ LTDC_L2CFBLR_CFBP, Color Frame Buffer Pitch in bytes
: LTDC_L2CFBLR_CFBLL x addr ) LTDC_L2CFBLR ; \ LTDC_L2CFBLR_CFBLL, Color Frame Buffer Line Length

\ LTDC_L2CFBLNR (read-write) Reset:0x00000000
: LTDC_L2CFBLNR_CFBLNBR x addr ) LTDC_L2CFBLNR ; \ LTDC_L2CFBLNR_CFBLNBR, Frame Buffer Line Number

\ LTDC_L2CLUTWR (write-only) Reset:0x00000000
: LTDC_L2CLUTWR_CLUTADD ( %bbbbbbbb -- x addr ) 24 lshift LTDC_L2CLUTWR ; \ LTDC_L2CLUTWR_CLUTADD, CLUT Address
: LTDC_L2CLUTWR_RED ( %bbbbbbbb -- x addr ) 16 lshift LTDC_L2CLUTWR ; \ LTDC_L2CLUTWR_RED, Red value
: LTDC_L2CLUTWR_GREEN ( %bbbbbbbb -- x addr ) 8 lshift LTDC_L2CLUTWR ; \ LTDC_L2CLUTWR_GREEN, Green value
: LTDC_L2CLUTWR_BLUE ( %bbbbbbbb -- x addr ) LTDC_L2CLUTWR ; \ LTDC_L2CLUTWR_BLUE, Blue value

\ SAI1_BCR1 (read-write) Reset:0x00000040
: SAI1_BCR1_MCJDIV ( %bbbb -- x addr ) 20 lshift SAI1_BCR1 ; \ SAI1_BCR1_MCJDIV, Master clock divider
: SAI1_BCR1_NODIV ( -- x addr ) 19 bit SAI1_BCR1 ; \ SAI1_BCR1_NODIV, No divider
: SAI1_BCR1_DMAEN ( -- x addr ) 17 bit SAI1_BCR1 ; \ SAI1_BCR1_DMAEN, DMA enable
: SAI1_BCR1_SAIBEN ( -- x addr ) 16 bit SAI1_BCR1 ; \ SAI1_BCR1_SAIBEN, Audio block B enable
: SAI1_BCR1_OutDri ( -- x addr ) 13 bit SAI1_BCR1 ; \ SAI1_BCR1_OutDri, Output drive
: SAI1_BCR1_MONO ( -- x addr ) 12 bit SAI1_BCR1 ; \ SAI1_BCR1_MONO, Mono mode
: SAI1_BCR1_SYNCEN ( %bb -- x addr ) 10 lshift SAI1_BCR1 ; \ SAI1_BCR1_SYNCEN, Synchronization enable
: SAI1_BCR1_CKSTR ( -- x addr ) 9 bit SAI1_BCR1 ; \ SAI1_BCR1_CKSTR, Clock strobing edge
: SAI1_BCR1_LSBFIRST ( -- x addr ) 8 bit SAI1_BCR1 ; \ SAI1_BCR1_LSBFIRST, Least significant bit first
: SAI1_BCR1_DS ( %bbb -- x addr ) 5 lshift SAI1_BCR1 ; \ SAI1_BCR1_DS, Data size
: SAI1_BCR1_PRTCFG ( %bb -- x addr ) 2 lshift SAI1_BCR1 ; \ SAI1_BCR1_PRTCFG, Protocol configuration
: SAI1_BCR1_MODE ( %bb -- x addr ) SAI1_BCR1 ; \ SAI1_BCR1_MODE, Audio block mode

\ SAI1_BCR2 (read-write) Reset:0x00000000
: SAI1_BCR2_COMP ( %bb -- x addr ) 14 lshift SAI1_BCR2 ; \ SAI1_BCR2_COMP, Companding mode
: SAI1_BCR2_CPL ( -- x addr ) 13 bit SAI1_BCR2 ; \ SAI1_BCR2_CPL, Complement bit
: SAI1_BCR2_MUTECN ( %bbbbbb -- x addr ) 7 lshift SAI1_BCR2 ; \ SAI1_BCR2_MUTECN, Mute counter
: SAI1_BCR2_MUTEVAL ( -- x addr ) 6 bit SAI1_BCR2 ; \ SAI1_BCR2_MUTEVAL, Mute value
: SAI1_BCR2_MUTE ( -- x addr ) 5 bit SAI1_BCR2 ; \ SAI1_BCR2_MUTE, Mute
: SAI1_BCR2_TRIS ( -- x addr ) 4 bit SAI1_BCR2 ; \ SAI1_BCR2_TRIS, Tristate management on data line
: SAI1_BCR2_FFLUS ( -- x addr ) 3 bit SAI1_BCR2 ; \ SAI1_BCR2_FFLUS, FIFO flush
: SAI1_BCR2_FTH ( %bbb -- x addr ) SAI1_BCR2 ; \ SAI1_BCR2_FTH, FIFO threshold

\ SAI1_BFRCR (read-write) Reset:0x00000007
: SAI1_BFRCR_FSOFF ( -- x addr ) 18 bit SAI1_BFRCR ; \ SAI1_BFRCR_FSOFF, Frame synchronization offset
: SAI1_BFRCR_FSPOL ( -- x addr ) 17 bit SAI1_BFRCR ; \ SAI1_BFRCR_FSPOL, Frame synchronization polarity
: SAI1_BFRCR_FSDEF ( -- x addr ) 16 bit SAI1_BFRCR ; \ SAI1_BFRCR_FSDEF, Frame synchronization definition
: SAI1_BFRCR_FSALL ( %bbbbbbb -- x addr ) 8 lshift SAI1_BFRCR ; \ SAI1_BFRCR_FSALL, Frame synchronization active level length
: SAI1_BFRCR_FRL ( %bbbbbbbb -- x addr ) SAI1_BFRCR ; \ SAI1_BFRCR_FRL, Frame length

\ SAI1_BSLOTR (read-write) Reset:0x00000000
: SAI1_BSLOTR_SLOTEN ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift SAI1_BSLOTR ; \ SAI1_BSLOTR_SLOTEN, Slot enable
: SAI1_BSLOTR_NBSLOT ( %bbbb -- x addr ) 8 lshift SAI1_BSLOTR ; \ SAI1_BSLOTR_NBSLOT, Number of slots in an audio frame
: SAI1_BSLOTR_SLOTSZ ( %bb -- x addr ) 6 lshift SAI1_BSLOTR ; \ SAI1_BSLOTR_SLOTSZ, Slot size
: SAI1_BSLOTR_FBOFF ( %bbbbb -- x addr ) SAI1_BSLOTR ; \ SAI1_BSLOTR_FBOFF, First bit offset

\ SAI1_BIM (read-write) Reset:0x00000000
: SAI1_BIM_LFSDETIE ( -- x addr ) 6 bit SAI1_BIM ; \ SAI1_BIM_LFSDETIE, Late frame synchronization detection interrupt enable
: SAI1_BIM_AFSDETIE ( -- x addr ) 5 bit SAI1_BIM ; \ SAI1_BIM_AFSDETIE, Anticipated frame synchronization detection interrupt enable
: SAI1_BIM_CNRDYIE ( -- x addr ) 4 bit SAI1_BIM ; \ SAI1_BIM_CNRDYIE, Codec not ready interrupt enable
: SAI1_BIM_FREQIE ( -- x addr ) 3 bit SAI1_BIM ; \ SAI1_BIM_FREQIE, FIFO request interrupt enable
: SAI1_BIM_WCKCFG ( -- x addr ) 2 bit SAI1_BIM ; \ SAI1_BIM_WCKCFG, Wrong clock configuration interrupt enable
: SAI1_BIM_MUTEDET ( -- x addr ) 1 bit SAI1_BIM ; \ SAI1_BIM_MUTEDET, Mute detection interrupt enable
: SAI1_BIM_OVRUDRIE ( -- x addr ) 0 bit SAI1_BIM ; \ SAI1_BIM_OVRUDRIE, Overrun/underrun interrupt enable

\ SAI1_BSR (read-only) Reset:0x00000000
: SAI1_BSR_FLVL? ( --  x ) 16 lshift SAI1_BSR @ ; \ SAI1_BSR_FLVL, FIFO level threshold
: SAI1_BSR_LFSDET? ( --  1|0 ) 6 bit SAI1_BSR bit@ ; \ SAI1_BSR_LFSDET, Late frame synchronization detection
: SAI1_BSR_AFSDET? ( --  1|0 ) 5 bit SAI1_BSR bit@ ; \ SAI1_BSR_AFSDET, Anticipated frame synchronization detection
: SAI1_BSR_CNRDY? ( --  1|0 ) 4 bit SAI1_BSR bit@ ; \ SAI1_BSR_CNRDY, Codec not ready
: SAI1_BSR_FREQ? ( --  1|0 ) 3 bit SAI1_BSR bit@ ; \ SAI1_BSR_FREQ, FIFO request
: SAI1_BSR_WCKCFG? ( --  1|0 ) 2 bit SAI1_BSR bit@ ; \ SAI1_BSR_WCKCFG, Wrong clock configuration flag
: SAI1_BSR_MUTEDET? ( --  1|0 ) 1 bit SAI1_BSR bit@ ; \ SAI1_BSR_MUTEDET, Mute detection
: SAI1_BSR_OVRUDR? ( --  1|0 ) 0 bit SAI1_BSR bit@ ; \ SAI1_BSR_OVRUDR, Overrun / underrun

\ SAI1_BCLRFR (write-only) Reset:0x00000000
: SAI1_BCLRFR_LFSDET ( -- x addr ) 6 bit SAI1_BCLRFR ; \ SAI1_BCLRFR_LFSDET, Clear late frame synchronization detection flag
: SAI1_BCLRFR_CAFSDET ( -- x addr ) 5 bit SAI1_BCLRFR ; \ SAI1_BCLRFR_CAFSDET, Clear anticipated frame synchronization detection flag
: SAI1_BCLRFR_CNRDY ( -- x addr ) 4 bit SAI1_BCLRFR ; \ SAI1_BCLRFR_CNRDY, Clear codec not ready flag
: SAI1_BCLRFR_WCKCFG ( -- x addr ) 2 bit SAI1_BCLRFR ; \ SAI1_BCLRFR_WCKCFG, Clear wrong clock configuration flag
: SAI1_BCLRFR_MUTEDET ( -- x addr ) 1 bit SAI1_BCLRFR ; \ SAI1_BCLRFR_MUTEDET, Mute detection flag
: SAI1_BCLRFR_OVRUDR ( -- x addr ) 0 bit SAI1_BCLRFR ; \ SAI1_BCLRFR_OVRUDR, Clear overrun / underrun

\ SAI1_BDR (read-write) Reset:0x00000000
: SAI1_BDR_DATA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SAI1_BDR ; \ SAI1_BDR_DATA, Data

\ SAI1_ACR1 (read-write) Reset:0x00000040
: SAI1_ACR1_MCJDIV ( %bbbb -- x addr ) 20 lshift SAI1_ACR1 ; \ SAI1_ACR1_MCJDIV, Master clock divider
: SAI1_ACR1_NODIV ( -- x addr ) 19 bit SAI1_ACR1 ; \ SAI1_ACR1_NODIV, No divider
: SAI1_ACR1_DMAEN ( -- x addr ) 17 bit SAI1_ACR1 ; \ SAI1_ACR1_DMAEN, DMA enable
: SAI1_ACR1_SAIAEN ( -- x addr ) 16 bit SAI1_ACR1 ; \ SAI1_ACR1_SAIAEN, Audio block A enable
: SAI1_ACR1_OutDri ( -- x addr ) 13 bit SAI1_ACR1 ; \ SAI1_ACR1_OutDri, Output drive
: SAI1_ACR1_MONO ( -- x addr ) 12 bit SAI1_ACR1 ; \ SAI1_ACR1_MONO, Mono mode
: SAI1_ACR1_SYNCEN ( %bb -- x addr ) 10 lshift SAI1_ACR1 ; \ SAI1_ACR1_SYNCEN, Synchronization enable
: SAI1_ACR1_CKSTR ( -- x addr ) 9 bit SAI1_ACR1 ; \ SAI1_ACR1_CKSTR, Clock strobing edge
: SAI1_ACR1_LSBFIRST ( -- x addr ) 8 bit SAI1_ACR1 ; \ SAI1_ACR1_LSBFIRST, Least significant bit first
: SAI1_ACR1_DS ( %bbb -- x addr ) 5 lshift SAI1_ACR1 ; \ SAI1_ACR1_DS, Data size
: SAI1_ACR1_PRTCFG ( %bb -- x addr ) 2 lshift SAI1_ACR1 ; \ SAI1_ACR1_PRTCFG, Protocol configuration
: SAI1_ACR1_MODE ( %bb -- x addr ) SAI1_ACR1 ; \ SAI1_ACR1_MODE, Audio block mode

\ SAI1_ACR2 (read-write) Reset:0x00000000
: SAI1_ACR2_COMP ( %bb -- x addr ) 14 lshift SAI1_ACR2 ; \ SAI1_ACR2_COMP, Companding mode
: SAI1_ACR2_CPL ( -- x addr ) 13 bit SAI1_ACR2 ; \ SAI1_ACR2_CPL, Complement bit
: SAI1_ACR2_MUTECN ( %bbbbbb -- x addr ) 7 lshift SAI1_ACR2 ; \ SAI1_ACR2_MUTECN, Mute counter
: SAI1_ACR2_MUTEVAL ( -- x addr ) 6 bit SAI1_ACR2 ; \ SAI1_ACR2_MUTEVAL, Mute value
: SAI1_ACR2_MUTE ( -- x addr ) 5 bit SAI1_ACR2 ; \ SAI1_ACR2_MUTE, Mute
: SAI1_ACR2_TRIS ( -- x addr ) 4 bit SAI1_ACR2 ; \ SAI1_ACR2_TRIS, Tristate management on data line
: SAI1_ACR2_FFLUS ( -- x addr ) 3 bit SAI1_ACR2 ; \ SAI1_ACR2_FFLUS, FIFO flush
: SAI1_ACR2_FTH ( %bbb -- x addr ) SAI1_ACR2 ; \ SAI1_ACR2_FTH, FIFO threshold

\ SAI1_AFRCR (read-write) Reset:0x00000007
: SAI1_AFRCR_FSOFF ( -- x addr ) 18 bit SAI1_AFRCR ; \ SAI1_AFRCR_FSOFF, Frame synchronization offset
: SAI1_AFRCR_FSPOL ( -- x addr ) 17 bit SAI1_AFRCR ; \ SAI1_AFRCR_FSPOL, Frame synchronization polarity
: SAI1_AFRCR_FSDEF ( -- x addr ) 16 bit SAI1_AFRCR ; \ SAI1_AFRCR_FSDEF, Frame synchronization definition
: SAI1_AFRCR_FSALL ( %bbbbbbb -- x addr ) 8 lshift SAI1_AFRCR ; \ SAI1_AFRCR_FSALL, Frame synchronization active level length
: SAI1_AFRCR_FRL ( %bbbbbbbb -- x addr ) SAI1_AFRCR ; \ SAI1_AFRCR_FRL, Frame length

\ SAI1_ASLOTR (read-write) Reset:0x00000000
: SAI1_ASLOTR_SLOTEN ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift SAI1_ASLOTR ; \ SAI1_ASLOTR_SLOTEN, Slot enable
: SAI1_ASLOTR_NBSLOT ( %bbbb -- x addr ) 8 lshift SAI1_ASLOTR ; \ SAI1_ASLOTR_NBSLOT, Number of slots in an audio frame
: SAI1_ASLOTR_SLOTSZ ( %bb -- x addr ) 6 lshift SAI1_ASLOTR ; \ SAI1_ASLOTR_SLOTSZ, Slot size
: SAI1_ASLOTR_FBOFF ( %bbbbb -- x addr ) SAI1_ASLOTR ; \ SAI1_ASLOTR_FBOFF, First bit offset

\ SAI1_AIM (read-write) Reset:0x00000000
: SAI1_AIM_LFSDET ( -- x addr ) 6 bit SAI1_AIM ; \ SAI1_AIM_LFSDET, Late frame synchronization detection interrupt enable
: SAI1_AIM_AFSDETIE ( -- x addr ) 5 bit SAI1_AIM ; \ SAI1_AIM_AFSDETIE, Anticipated frame synchronization detection interrupt enable
: SAI1_AIM_CNRDYIE ( -- x addr ) 4 bit SAI1_AIM ; \ SAI1_AIM_CNRDYIE, Codec not ready interrupt enable
: SAI1_AIM_FREQIE ( -- x addr ) 3 bit SAI1_AIM ; \ SAI1_AIM_FREQIE, FIFO request interrupt enable
: SAI1_AIM_WCKCFG ( -- x addr ) 2 bit SAI1_AIM ; \ SAI1_AIM_WCKCFG, Wrong clock configuration interrupt enable
: SAI1_AIM_MUTEDET ( -- x addr ) 1 bit SAI1_AIM ; \ SAI1_AIM_MUTEDET, Mute detection interrupt enable
: SAI1_AIM_OVRUDRIE ( -- x addr ) 0 bit SAI1_AIM ; \ SAI1_AIM_OVRUDRIE, Overrun/underrun interrupt enable

\ SAI1_ASR (read-write) Reset:0x00000000
: SAI1_ASR_FLVL ( %bbb -- x addr ) 16 lshift SAI1_ASR ; \ SAI1_ASR_FLVL, FIFO level threshold
: SAI1_ASR_LFSDET ( -- x addr ) 6 bit SAI1_ASR ; \ SAI1_ASR_LFSDET, Late frame synchronization detection
: SAI1_ASR_AFSDET ( -- x addr ) 5 bit SAI1_ASR ; \ SAI1_ASR_AFSDET, Anticipated frame synchronization detection
: SAI1_ASR_CNRDY ( -- x addr ) 4 bit SAI1_ASR ; \ SAI1_ASR_CNRDY, Codec not ready
: SAI1_ASR_FREQ ( -- x addr ) 3 bit SAI1_ASR ; \ SAI1_ASR_FREQ, FIFO request
: SAI1_ASR_WCKCFG ( -- x addr ) 2 bit SAI1_ASR ; \ SAI1_ASR_WCKCFG, Wrong clock configuration flag. This bit is read only.
: SAI1_ASR_MUTEDET ( -- x addr ) 1 bit SAI1_ASR ; \ SAI1_ASR_MUTEDET, Mute detection
: SAI1_ASR_OVRUDR ( -- x addr ) 0 bit SAI1_ASR ; \ SAI1_ASR_OVRUDR, Overrun / underrun

\ SAI1_ACLRFR (read-write) Reset:0x00000000
: SAI1_ACLRFR_LFSDET ( -- x addr ) 6 bit SAI1_ACLRFR ; \ SAI1_ACLRFR_LFSDET, Clear late frame synchronization detection flag
: SAI1_ACLRFR_CAFSDET ( -- x addr ) 5 bit SAI1_ACLRFR ; \ SAI1_ACLRFR_CAFSDET, Clear anticipated frame synchronization detection flag.
: SAI1_ACLRFR_CNRDY ( -- x addr ) 4 bit SAI1_ACLRFR ; \ SAI1_ACLRFR_CNRDY, Clear codec not ready flag
: SAI1_ACLRFR_WCKCFG ( -- x addr ) 2 bit SAI1_ACLRFR ; \ SAI1_ACLRFR_WCKCFG, Clear wrong clock configuration flag
: SAI1_ACLRFR_MUTEDET ( -- x addr ) 1 bit SAI1_ACLRFR ; \ SAI1_ACLRFR_MUTEDET, Mute detection flag
: SAI1_ACLRFR_OVRUDR ( -- x addr ) 0 bit SAI1_ACLRFR ; \ SAI1_ACLRFR_OVRUDR, Clear overrun / underrun

\ SAI1_ADR (read-write) Reset:0x00000000
: SAI1_ADR_DATA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SAI1_ADR ; \ SAI1_ADR_DATA, Data

\ SAI1_GCR (read-write) Reset:0x00000000
: SAI1_GCR_SYNCIN ( %bb -- x addr ) SAI1_GCR ; \ SAI1_GCR_SYNCIN, Synchronization inputs
: SAI1_GCR_SYNCOUT ( %bb -- x addr ) 4 lshift SAI1_GCR ; \ SAI1_GCR_SYNCOUT, Synchronization outputs

\ SAI2_BCR1 (read-write) Reset:0x00000040
: SAI2_BCR1_MCJDIV ( %bbbb -- x addr ) 20 lshift SAI2_BCR1 ; \ SAI2_BCR1_MCJDIV, Master clock divider
: SAI2_BCR1_NODIV ( -- x addr ) 19 bit SAI2_BCR1 ; \ SAI2_BCR1_NODIV, No divider
: SAI2_BCR1_DMAEN ( -- x addr ) 17 bit SAI2_BCR1 ; \ SAI2_BCR1_DMAEN, DMA enable
: SAI2_BCR1_SAIBEN ( -- x addr ) 16 bit SAI2_BCR1 ; \ SAI2_BCR1_SAIBEN, Audio block B enable
: SAI2_BCR1_OutDri ( -- x addr ) 13 bit SAI2_BCR1 ; \ SAI2_BCR1_OutDri, Output drive
: SAI2_BCR1_MONO ( -- x addr ) 12 bit SAI2_BCR1 ; \ SAI2_BCR1_MONO, Mono mode
: SAI2_BCR1_SYNCEN ( %bb -- x addr ) 10 lshift SAI2_BCR1 ; \ SAI2_BCR1_SYNCEN, Synchronization enable
: SAI2_BCR1_CKSTR ( -- x addr ) 9 bit SAI2_BCR1 ; \ SAI2_BCR1_CKSTR, Clock strobing edge
: SAI2_BCR1_LSBFIRST ( -- x addr ) 8 bit SAI2_BCR1 ; \ SAI2_BCR1_LSBFIRST, Least significant bit first
: SAI2_BCR1_DS ( %bbb -- x addr ) 5 lshift SAI2_BCR1 ; \ SAI2_BCR1_DS, Data size
: SAI2_BCR1_PRTCFG ( %bb -- x addr ) 2 lshift SAI2_BCR1 ; \ SAI2_BCR1_PRTCFG, Protocol configuration
: SAI2_BCR1_MODE ( %bb -- x addr ) SAI2_BCR1 ; \ SAI2_BCR1_MODE, Audio block mode

\ SAI2_BCR2 (read-write) Reset:0x00000000
: SAI2_BCR2_COMP ( %bb -- x addr ) 14 lshift SAI2_BCR2 ; \ SAI2_BCR2_COMP, Companding mode
: SAI2_BCR2_CPL ( -- x addr ) 13 bit SAI2_BCR2 ; \ SAI2_BCR2_CPL, Complement bit
: SAI2_BCR2_MUTECN ( %bbbbbb -- x addr ) 7 lshift SAI2_BCR2 ; \ SAI2_BCR2_MUTECN, Mute counter
: SAI2_BCR2_MUTEVAL ( -- x addr ) 6 bit SAI2_BCR2 ; \ SAI2_BCR2_MUTEVAL, Mute value
: SAI2_BCR2_MUTE ( -- x addr ) 5 bit SAI2_BCR2 ; \ SAI2_BCR2_MUTE, Mute
: SAI2_BCR2_TRIS ( -- x addr ) 4 bit SAI2_BCR2 ; \ SAI2_BCR2_TRIS, Tristate management on data line
: SAI2_BCR2_FFLUS ( -- x addr ) 3 bit SAI2_BCR2 ; \ SAI2_BCR2_FFLUS, FIFO flush
: SAI2_BCR2_FTH ( %bbb -- x addr ) SAI2_BCR2 ; \ SAI2_BCR2_FTH, FIFO threshold

\ SAI2_BFRCR (read-write) Reset:0x00000007
: SAI2_BFRCR_FSOFF ( -- x addr ) 18 bit SAI2_BFRCR ; \ SAI2_BFRCR_FSOFF, Frame synchronization offset
: SAI2_BFRCR_FSPOL ( -- x addr ) 17 bit SAI2_BFRCR ; \ SAI2_BFRCR_FSPOL, Frame synchronization polarity
: SAI2_BFRCR_FSDEF ( -- x addr ) 16 bit SAI2_BFRCR ; \ SAI2_BFRCR_FSDEF, Frame synchronization definition
: SAI2_BFRCR_FSALL ( %bbbbbbb -- x addr ) 8 lshift SAI2_BFRCR ; \ SAI2_BFRCR_FSALL, Frame synchronization active level length
: SAI2_BFRCR_FRL ( %bbbbbbbb -- x addr ) SAI2_BFRCR ; \ SAI2_BFRCR_FRL, Frame length

\ SAI2_BSLOTR (read-write) Reset:0x00000000
: SAI2_BSLOTR_SLOTEN ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift SAI2_BSLOTR ; \ SAI2_BSLOTR_SLOTEN, Slot enable
: SAI2_BSLOTR_NBSLOT ( %bbbb -- x addr ) 8 lshift SAI2_BSLOTR ; \ SAI2_BSLOTR_NBSLOT, Number of slots in an audio frame
: SAI2_BSLOTR_SLOTSZ ( %bb -- x addr ) 6 lshift SAI2_BSLOTR ; \ SAI2_BSLOTR_SLOTSZ, Slot size
: SAI2_BSLOTR_FBOFF ( %bbbbb -- x addr ) SAI2_BSLOTR ; \ SAI2_BSLOTR_FBOFF, First bit offset

\ SAI2_BIM (read-write) Reset:0x00000000
: SAI2_BIM_LFSDETIE ( -- x addr ) 6 bit SAI2_BIM ; \ SAI2_BIM_LFSDETIE, Late frame synchronization detection interrupt enable
: SAI2_BIM_AFSDETIE ( -- x addr ) 5 bit SAI2_BIM ; \ SAI2_BIM_AFSDETIE, Anticipated frame synchronization detection interrupt enable
: SAI2_BIM_CNRDYIE ( -- x addr ) 4 bit SAI2_BIM ; \ SAI2_BIM_CNRDYIE, Codec not ready interrupt enable
: SAI2_BIM_FREQIE ( -- x addr ) 3 bit SAI2_BIM ; \ SAI2_BIM_FREQIE, FIFO request interrupt enable
: SAI2_BIM_WCKCFG ( -- x addr ) 2 bit SAI2_BIM ; \ SAI2_BIM_WCKCFG, Wrong clock configuration interrupt enable
: SAI2_BIM_MUTEDET ( -- x addr ) 1 bit SAI2_BIM ; \ SAI2_BIM_MUTEDET, Mute detection interrupt enable
: SAI2_BIM_OVRUDRIE ( -- x addr ) 0 bit SAI2_BIM ; \ SAI2_BIM_OVRUDRIE, Overrun/underrun interrupt enable

\ SAI2_BSR (read-only) Reset:0x00000000
: SAI2_BSR_FLVL? ( --  x ) 16 lshift SAI2_BSR @ ; \ SAI2_BSR_FLVL, FIFO level threshold
: SAI2_BSR_LFSDET? ( --  1|0 ) 6 bit SAI2_BSR bit@ ; \ SAI2_BSR_LFSDET, Late frame synchronization detection
: SAI2_BSR_AFSDET? ( --  1|0 ) 5 bit SAI2_BSR bit@ ; \ SAI2_BSR_AFSDET, Anticipated frame synchronization detection
: SAI2_BSR_CNRDY? ( --  1|0 ) 4 bit SAI2_BSR bit@ ; \ SAI2_BSR_CNRDY, Codec not ready
: SAI2_BSR_FREQ? ( --  1|0 ) 3 bit SAI2_BSR bit@ ; \ SAI2_BSR_FREQ, FIFO request
: SAI2_BSR_WCKCFG? ( --  1|0 ) 2 bit SAI2_BSR bit@ ; \ SAI2_BSR_WCKCFG, Wrong clock configuration flag
: SAI2_BSR_MUTEDET? ( --  1|0 ) 1 bit SAI2_BSR bit@ ; \ SAI2_BSR_MUTEDET, Mute detection
: SAI2_BSR_OVRUDR? ( --  1|0 ) 0 bit SAI2_BSR bit@ ; \ SAI2_BSR_OVRUDR, Overrun / underrun

\ SAI2_BCLRFR (write-only) Reset:0x00000000
: SAI2_BCLRFR_LFSDET ( -- x addr ) 6 bit SAI2_BCLRFR ; \ SAI2_BCLRFR_LFSDET, Clear late frame synchronization detection flag
: SAI2_BCLRFR_CAFSDET ( -- x addr ) 5 bit SAI2_BCLRFR ; \ SAI2_BCLRFR_CAFSDET, Clear anticipated frame synchronization detection flag
: SAI2_BCLRFR_CNRDY ( -- x addr ) 4 bit SAI2_BCLRFR ; \ SAI2_BCLRFR_CNRDY, Clear codec not ready flag
: SAI2_BCLRFR_WCKCFG ( -- x addr ) 2 bit SAI2_BCLRFR ; \ SAI2_BCLRFR_WCKCFG, Clear wrong clock configuration flag
: SAI2_BCLRFR_MUTEDET ( -- x addr ) 1 bit SAI2_BCLRFR ; \ SAI2_BCLRFR_MUTEDET, Mute detection flag
: SAI2_BCLRFR_OVRUDR ( -- x addr ) 0 bit SAI2_BCLRFR ; \ SAI2_BCLRFR_OVRUDR, Clear overrun / underrun

\ SAI2_BDR (read-write) Reset:0x00000000
: SAI2_BDR_DATA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SAI2_BDR ; \ SAI2_BDR_DATA, Data

\ SAI2_ACR1 (read-write) Reset:0x00000040
: SAI2_ACR1_MCJDIV ( %bbbb -- x addr ) 20 lshift SAI2_ACR1 ; \ SAI2_ACR1_MCJDIV, Master clock divider
: SAI2_ACR1_NODIV ( -- x addr ) 19 bit SAI2_ACR1 ; \ SAI2_ACR1_NODIV, No divider
: SAI2_ACR1_DMAEN ( -- x addr ) 17 bit SAI2_ACR1 ; \ SAI2_ACR1_DMAEN, DMA enable
: SAI2_ACR1_SAIAEN ( -- x addr ) 16 bit SAI2_ACR1 ; \ SAI2_ACR1_SAIAEN, Audio block A enable
: SAI2_ACR1_OutDri ( -- x addr ) 13 bit SAI2_ACR1 ; \ SAI2_ACR1_OutDri, Output drive
: SAI2_ACR1_MONO ( -- x addr ) 12 bit SAI2_ACR1 ; \ SAI2_ACR1_MONO, Mono mode
: SAI2_ACR1_SYNCEN ( %bb -- x addr ) 10 lshift SAI2_ACR1 ; \ SAI2_ACR1_SYNCEN, Synchronization enable
: SAI2_ACR1_CKSTR ( -- x addr ) 9 bit SAI2_ACR1 ; \ SAI2_ACR1_CKSTR, Clock strobing edge
: SAI2_ACR1_LSBFIRST ( -- x addr ) 8 bit SAI2_ACR1 ; \ SAI2_ACR1_LSBFIRST, Least significant bit first
: SAI2_ACR1_DS ( %bbb -- x addr ) 5 lshift SAI2_ACR1 ; \ SAI2_ACR1_DS, Data size
: SAI2_ACR1_PRTCFG ( %bb -- x addr ) 2 lshift SAI2_ACR1 ; \ SAI2_ACR1_PRTCFG, Protocol configuration
: SAI2_ACR1_MODE ( %bb -- x addr ) SAI2_ACR1 ; \ SAI2_ACR1_MODE, Audio block mode

\ SAI2_ACR2 (read-write) Reset:0x00000000
: SAI2_ACR2_COMP ( %bb -- x addr ) 14 lshift SAI2_ACR2 ; \ SAI2_ACR2_COMP, Companding mode
: SAI2_ACR2_CPL ( -- x addr ) 13 bit SAI2_ACR2 ; \ SAI2_ACR2_CPL, Complement bit
: SAI2_ACR2_MUTECN ( %bbbbbb -- x addr ) 7 lshift SAI2_ACR2 ; \ SAI2_ACR2_MUTECN, Mute counter
: SAI2_ACR2_MUTEVAL ( -- x addr ) 6 bit SAI2_ACR2 ; \ SAI2_ACR2_MUTEVAL, Mute value
: SAI2_ACR2_MUTE ( -- x addr ) 5 bit SAI2_ACR2 ; \ SAI2_ACR2_MUTE, Mute
: SAI2_ACR2_TRIS ( -- x addr ) 4 bit SAI2_ACR2 ; \ SAI2_ACR2_TRIS, Tristate management on data line
: SAI2_ACR2_FFLUS ( -- x addr ) 3 bit SAI2_ACR2 ; \ SAI2_ACR2_FFLUS, FIFO flush
: SAI2_ACR2_FTH ( %bbb -- x addr ) SAI2_ACR2 ; \ SAI2_ACR2_FTH, FIFO threshold

\ SAI2_AFRCR (read-write) Reset:0x00000007
: SAI2_AFRCR_FSOFF ( -- x addr ) 18 bit SAI2_AFRCR ; \ SAI2_AFRCR_FSOFF, Frame synchronization offset
: SAI2_AFRCR_FSPOL ( -- x addr ) 17 bit SAI2_AFRCR ; \ SAI2_AFRCR_FSPOL, Frame synchronization polarity
: SAI2_AFRCR_FSDEF ( -- x addr ) 16 bit SAI2_AFRCR ; \ SAI2_AFRCR_FSDEF, Frame synchronization definition
: SAI2_AFRCR_FSALL ( %bbbbbbb -- x addr ) 8 lshift SAI2_AFRCR ; \ SAI2_AFRCR_FSALL, Frame synchronization active level length
: SAI2_AFRCR_FRL ( %bbbbbbbb -- x addr ) SAI2_AFRCR ; \ SAI2_AFRCR_FRL, Frame length

\ SAI2_ASLOTR (read-write) Reset:0x00000000
: SAI2_ASLOTR_SLOTEN ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift SAI2_ASLOTR ; \ SAI2_ASLOTR_SLOTEN, Slot enable
: SAI2_ASLOTR_NBSLOT ( %bbbb -- x addr ) 8 lshift SAI2_ASLOTR ; \ SAI2_ASLOTR_NBSLOT, Number of slots in an audio frame
: SAI2_ASLOTR_SLOTSZ ( %bb -- x addr ) 6 lshift SAI2_ASLOTR ; \ SAI2_ASLOTR_SLOTSZ, Slot size
: SAI2_ASLOTR_FBOFF ( %bbbbb -- x addr ) SAI2_ASLOTR ; \ SAI2_ASLOTR_FBOFF, First bit offset

\ SAI2_AIM (read-write) Reset:0x00000000
: SAI2_AIM_LFSDET ( -- x addr ) 6 bit SAI2_AIM ; \ SAI2_AIM_LFSDET, Late frame synchronization detection interrupt enable
: SAI2_AIM_AFSDETIE ( -- x addr ) 5 bit SAI2_AIM ; \ SAI2_AIM_AFSDETIE, Anticipated frame synchronization detection interrupt enable
: SAI2_AIM_CNRDYIE ( -- x addr ) 4 bit SAI2_AIM ; \ SAI2_AIM_CNRDYIE, Codec not ready interrupt enable
: SAI2_AIM_FREQIE ( -- x addr ) 3 bit SAI2_AIM ; \ SAI2_AIM_FREQIE, FIFO request interrupt enable
: SAI2_AIM_WCKCFG ( -- x addr ) 2 bit SAI2_AIM ; \ SAI2_AIM_WCKCFG, Wrong clock configuration interrupt enable
: SAI2_AIM_MUTEDET ( -- x addr ) 1 bit SAI2_AIM ; \ SAI2_AIM_MUTEDET, Mute detection interrupt enable
: SAI2_AIM_OVRUDRIE ( -- x addr ) 0 bit SAI2_AIM ; \ SAI2_AIM_OVRUDRIE, Overrun/underrun interrupt enable

\ SAI2_ASR (read-write) Reset:0x00000000
: SAI2_ASR_FLVL ( %bbb -- x addr ) 16 lshift SAI2_ASR ; \ SAI2_ASR_FLVL, FIFO level threshold
: SAI2_ASR_LFSDET ( -- x addr ) 6 bit SAI2_ASR ; \ SAI2_ASR_LFSDET, Late frame synchronization detection
: SAI2_ASR_AFSDET ( -- x addr ) 5 bit SAI2_ASR ; \ SAI2_ASR_AFSDET, Anticipated frame synchronization detection
: SAI2_ASR_CNRDY ( -- x addr ) 4 bit SAI2_ASR ; \ SAI2_ASR_CNRDY, Codec not ready
: SAI2_ASR_FREQ ( -- x addr ) 3 bit SAI2_ASR ; \ SAI2_ASR_FREQ, FIFO request
: SAI2_ASR_WCKCFG ( -- x addr ) 2 bit SAI2_ASR ; \ SAI2_ASR_WCKCFG, Wrong clock configuration flag. This bit is read only.
: SAI2_ASR_MUTEDET ( -- x addr ) 1 bit SAI2_ASR ; \ SAI2_ASR_MUTEDET, Mute detection
: SAI2_ASR_OVRUDR ( -- x addr ) 0 bit SAI2_ASR ; \ SAI2_ASR_OVRUDR, Overrun / underrun

\ SAI2_ACLRFR (read-write) Reset:0x00000000
: SAI2_ACLRFR_LFSDET ( -- x addr ) 6 bit SAI2_ACLRFR ; \ SAI2_ACLRFR_LFSDET, Clear late frame synchronization detection flag
: SAI2_ACLRFR_CAFSDET ( -- x addr ) 5 bit SAI2_ACLRFR ; \ SAI2_ACLRFR_CAFSDET, Clear anticipated frame synchronization detection flag.
: SAI2_ACLRFR_CNRDY ( -- x addr ) 4 bit SAI2_ACLRFR ; \ SAI2_ACLRFR_CNRDY, Clear codec not ready flag
: SAI2_ACLRFR_WCKCFG ( -- x addr ) 2 bit SAI2_ACLRFR ; \ SAI2_ACLRFR_WCKCFG, Clear wrong clock configuration flag
: SAI2_ACLRFR_MUTEDET ( -- x addr ) 1 bit SAI2_ACLRFR ; \ SAI2_ACLRFR_MUTEDET, Mute detection flag
: SAI2_ACLRFR_OVRUDR ( -- x addr ) 0 bit SAI2_ACLRFR ; \ SAI2_ACLRFR_OVRUDR, Clear overrun / underrun

\ SAI2_ADR (read-write) Reset:0x00000000
: SAI2_ADR_DATA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SAI2_ADR ; \ SAI2_ADR_DATA, Data

\ SAI2_GCR (read-write) Reset:0x00000000
: SAI2_GCR_SYNCIN ( %bb -- x addr ) SAI2_GCR ; \ SAI2_GCR_SYNCIN, Synchronization inputs
: SAI2_GCR_SYNCOUT ( %bb -- x addr ) 4 lshift SAI2_GCR ; \ SAI2_GCR_SYNCOUT, Synchronization outputs

\ DMA2D_CR (read-write) Reset:0x00000000
: DMA2D_CR_MODE ( %bb -- x addr ) 16 lshift DMA2D_CR ; \ DMA2D_CR_MODE, DMA2D mode
: DMA2D_CR_CEIE ( -- x addr ) 13 bit DMA2D_CR ; \ DMA2D_CR_CEIE, Configuration Error Interrupt Enable
: DMA2D_CR_CTCIE ( -- x addr ) 12 bit DMA2D_CR ; \ DMA2D_CR_CTCIE, CLUT transfer complete interrupt enable
: DMA2D_CR_CAEIE ( -- x addr ) 11 bit DMA2D_CR ; \ DMA2D_CR_CAEIE, CLUT access error interrupt enable
: DMA2D_CR_TWIE ( -- x addr ) 10 bit DMA2D_CR ; \ DMA2D_CR_TWIE, Transfer watermark interrupt enable
: DMA2D_CR_TCIE ( -- x addr ) 9 bit DMA2D_CR ; \ DMA2D_CR_TCIE, Transfer complete interrupt enable
: DMA2D_CR_TEIE ( -- x addr ) 8 bit DMA2D_CR ; \ DMA2D_CR_TEIE, Transfer error interrupt enable
: DMA2D_CR_ABORT ( -- x addr ) 2 bit DMA2D_CR ; \ DMA2D_CR_ABORT, Abort
: DMA2D_CR_SUSP ( -- x addr ) 1 bit DMA2D_CR ; \ DMA2D_CR_SUSP, Suspend
: DMA2D_CR_START ( -- x addr ) 0 bit DMA2D_CR ; \ DMA2D_CR_START, Start

\ DMA2D_ISR (read-only) Reset:0x00000000
: DMA2D_ISR_CEIF? ( --  1|0 ) 5 bit DMA2D_ISR bit@ ; \ DMA2D_ISR_CEIF, Configuration error interrupt flag
: DMA2D_ISR_CTCIF? ( --  1|0 ) 4 bit DMA2D_ISR bit@ ; \ DMA2D_ISR_CTCIF, CLUT transfer complete interrupt flag
: DMA2D_ISR_CAEIF? ( --  1|0 ) 3 bit DMA2D_ISR bit@ ; \ DMA2D_ISR_CAEIF, CLUT access error interrupt flag
: DMA2D_ISR_TWIF? ( --  1|0 ) 2 bit DMA2D_ISR bit@ ; \ DMA2D_ISR_TWIF, Transfer watermark interrupt flag
: DMA2D_ISR_TCIF? ( --  1|0 ) 1 bit DMA2D_ISR bit@ ; \ DMA2D_ISR_TCIF, Transfer complete interrupt flag
: DMA2D_ISR_TEIF? ( --  1|0 ) 0 bit DMA2D_ISR bit@ ; \ DMA2D_ISR_TEIF, Transfer error interrupt flag

\ DMA2D_IFCR (read-write) Reset:0x00000000
: DMA2D_IFCR_CCEIF ( -- x addr ) 5 bit DMA2D_IFCR ; \ DMA2D_IFCR_CCEIF, Clear configuration error interrupt flag
: DMA2D_IFCR_CCTCIF ( -- x addr ) 4 bit DMA2D_IFCR ; \ DMA2D_IFCR_CCTCIF, Clear CLUT transfer complete interrupt flag
: DMA2D_IFCR_CAECIF ( -- x addr ) 3 bit DMA2D_IFCR ; \ DMA2D_IFCR_CAECIF, Clear CLUT access error interrupt flag
: DMA2D_IFCR_CTWIF ( -- x addr ) 2 bit DMA2D_IFCR ; \ DMA2D_IFCR_CTWIF, Clear transfer watermark interrupt flag
: DMA2D_IFCR_CTCIF ( -- x addr ) 1 bit DMA2D_IFCR ; \ DMA2D_IFCR_CTCIF, Clear transfer complete interrupt flag
: DMA2D_IFCR_CTEIF ( -- x addr ) 0 bit DMA2D_IFCR ; \ DMA2D_IFCR_CTEIF, Clear Transfer error interrupt flag

\ DMA2D_FGMAR (read-write) Reset:0x00000000
: DMA2D_FGMAR_MA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2D_FGMAR ; \ DMA2D_FGMAR_MA, Memory address

\ DMA2D_FGOR (read-write) Reset:0x00000000
: DMA2D_FGOR_LO ( %bbbbbbbbbbbbbb -- x addr ) DMA2D_FGOR ; \ DMA2D_FGOR_LO, Line offset

\ DMA2D_BGMAR (read-write) Reset:0x00000000
: DMA2D_BGMAR_MA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2D_BGMAR ; \ DMA2D_BGMAR_MA, Memory address

\ DMA2D_BGOR (read-write) Reset:0x00000000
: DMA2D_BGOR_LO ( %bbbbbbbbbbbbbb -- x addr ) DMA2D_BGOR ; \ DMA2D_BGOR_LO, Line offset

\ DMA2D_FGPFCCR (read-write) Reset:0x00000000
: DMA2D_FGPFCCR_ALPHA ( %bbbbbbbb -- x addr ) 24 lshift DMA2D_FGPFCCR ; \ DMA2D_FGPFCCR_ALPHA, Alpha value
: DMA2D_FGPFCCR_AM ( %bb -- x addr ) 16 lshift DMA2D_FGPFCCR ; \ DMA2D_FGPFCCR_AM, Alpha mode
: DMA2D_FGPFCCR_CS ( %bbbbbbbb -- x addr ) 8 lshift DMA2D_FGPFCCR ; \ DMA2D_FGPFCCR_CS, CLUT size
: DMA2D_FGPFCCR_START ( -- x addr ) 5 bit DMA2D_FGPFCCR ; \ DMA2D_FGPFCCR_START, Start
: DMA2D_FGPFCCR_CCM ( -- x addr ) 4 bit DMA2D_FGPFCCR ; \ DMA2D_FGPFCCR_CCM, CLUT color mode
: DMA2D_FGPFCCR_CM ( %bbbb -- x addr ) DMA2D_FGPFCCR ; \ DMA2D_FGPFCCR_CM, Color mode

\ DMA2D_FGCOLR (read-write) Reset:0x00000000
: DMA2D_FGCOLR_RED ( %bbbbbbbb -- x addr ) 16 lshift DMA2D_FGCOLR ; \ DMA2D_FGCOLR_RED, Red Value
: DMA2D_FGCOLR_GREEN ( %bbbbbbbb -- x addr ) 8 lshift DMA2D_FGCOLR ; \ DMA2D_FGCOLR_GREEN, Green Value
: DMA2D_FGCOLR_BLUE ( %bbbbbbbb -- x addr ) DMA2D_FGCOLR ; \ DMA2D_FGCOLR_BLUE, Blue Value

\ DMA2D_BGPFCCR (read-write) Reset:0x00000000
: DMA2D_BGPFCCR_ALPHA ( %bbbbbbbb -- x addr ) 24 lshift DMA2D_BGPFCCR ; \ DMA2D_BGPFCCR_ALPHA, Alpha value
: DMA2D_BGPFCCR_AM ( %bb -- x addr ) 16 lshift DMA2D_BGPFCCR ; \ DMA2D_BGPFCCR_AM, Alpha mode
: DMA2D_BGPFCCR_CS ( %bbbbbbbb -- x addr ) 8 lshift DMA2D_BGPFCCR ; \ DMA2D_BGPFCCR_CS, CLUT size
: DMA2D_BGPFCCR_START ( -- x addr ) 5 bit DMA2D_BGPFCCR ; \ DMA2D_BGPFCCR_START, Start
: DMA2D_BGPFCCR_CCM ( -- x addr ) 4 bit DMA2D_BGPFCCR ; \ DMA2D_BGPFCCR_CCM, CLUT Color mode
: DMA2D_BGPFCCR_CM ( %bbbb -- x addr ) DMA2D_BGPFCCR ; \ DMA2D_BGPFCCR_CM, Color mode

\ DMA2D_BGCOLR (read-write) Reset:0x00000000
: DMA2D_BGCOLR_RED ( %bbbbbbbb -- x addr ) 16 lshift DMA2D_BGCOLR ; \ DMA2D_BGCOLR_RED, Red Value
: DMA2D_BGCOLR_GREEN ( %bbbbbbbb -- x addr ) 8 lshift DMA2D_BGCOLR ; \ DMA2D_BGCOLR_GREEN, Green Value
: DMA2D_BGCOLR_BLUE ( %bbbbbbbb -- x addr ) DMA2D_BGCOLR ; \ DMA2D_BGCOLR_BLUE, Blue Value

\ DMA2D_FGCMAR (read-write) Reset:0x00000000
: DMA2D_FGCMAR_MA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2D_FGCMAR ; \ DMA2D_FGCMAR_MA, Memory Address

\ DMA2D_BGCMAR (read-write) Reset:0x00000000
: DMA2D_BGCMAR_MA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2D_BGCMAR ; \ DMA2D_BGCMAR_MA, Memory address

\ DMA2D_OPFCCR (read-write) Reset:0x00000000
: DMA2D_OPFCCR_CM ( %bbb -- x addr ) DMA2D_OPFCCR ; \ DMA2D_OPFCCR_CM, Color mode

\ DMA2D_OCOLR (read-write) Reset:0x00000000
: DMA2D_OCOLR_APLHA ( %bbbbbbbb -- x addr ) 24 lshift DMA2D_OCOLR ; \ DMA2D_OCOLR_APLHA, Alpha Channel Value
: DMA2D_OCOLR_RED ( %bbbbbbbb -- x addr ) 16 lshift DMA2D_OCOLR ; \ DMA2D_OCOLR_RED, Red Value
: DMA2D_OCOLR_GREEN ( %bbbbbbbb -- x addr ) 8 lshift DMA2D_OCOLR ; \ DMA2D_OCOLR_GREEN, Green Value
: DMA2D_OCOLR_BLUE ( %bbbbbbbb -- x addr ) DMA2D_OCOLR ; \ DMA2D_OCOLR_BLUE, Blue Value

\ DMA2D_OMAR (read-write) Reset:0x00000000
: DMA2D_OMAR_MA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2D_OMAR ; \ DMA2D_OMAR_MA, Memory Address

\ DMA2D_OOR (read-write) Reset:0x00000000
: DMA2D_OOR_LO ( %bbbbbbbbbbbbbb -- x addr ) DMA2D_OOR ; \ DMA2D_OOR_LO, Line Offset

\ DMA2D_NLR (read-write) Reset:0x00000000
: DMA2D_NLR_PL ( %bbbbbbbbbbbbbb -- x addr ) 16 lshift DMA2D_NLR ; \ DMA2D_NLR_PL, Pixel per lines
: DMA2D_NLR_NL ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2D_NLR ; \ DMA2D_NLR_NL, Number of lines

\ DMA2D_LWR (read-write) Reset:0x00000000
: DMA2D_LWR_LW ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2D_LWR ; \ DMA2D_LWR_LW, Line watermark

\ DMA2D_AMTCR (read-write) Reset:0x00000000
: DMA2D_AMTCR_DT ( %bbbbbbbb -- x addr ) 8 lshift DMA2D_AMTCR ; \ DMA2D_AMTCR_DT, Dead Time
: DMA2D_AMTCR_EN ( -- x addr ) 0 bit DMA2D_AMTCR ; \ DMA2D_AMTCR_EN, Enable

\ DMA2D_FGCLUT (read-write) Reset:0x00000000
: DMA2D_FGCLUT_APLHA ( %bbbbbbbb -- x addr ) 24 lshift DMA2D_FGCLUT ; \ DMA2D_FGCLUT_APLHA, APLHA
: DMA2D_FGCLUT_RED ( %bbbbbbbb -- x addr ) 16 lshift DMA2D_FGCLUT ; \ DMA2D_FGCLUT_RED, RED
: DMA2D_FGCLUT_GREEN ( %bbbbbbbb -- x addr ) 8 lshift DMA2D_FGCLUT ; \ DMA2D_FGCLUT_GREEN, GREEN
: DMA2D_FGCLUT_BLUE ( %bbbbbbbb -- x addr ) DMA2D_FGCLUT ; \ DMA2D_FGCLUT_BLUE, BLUE

\ DMA2D_BGCLUT (read-write) Reset:0x00000000
: DMA2D_BGCLUT_APLHA ( %bbbbbbbb -- x addr ) 24 lshift DMA2D_BGCLUT ; \ DMA2D_BGCLUT_APLHA, APLHA
: DMA2D_BGCLUT_RED ( %bbbbbbbb -- x addr ) 16 lshift DMA2D_BGCLUT ; \ DMA2D_BGCLUT_RED, RED
: DMA2D_BGCLUT_GREEN ( %bbbbbbbb -- x addr ) 8 lshift DMA2D_BGCLUT ; \ DMA2D_BGCLUT_GREEN, GREEN
: DMA2D_BGCLUT_BLUE ( %bbbbbbbb -- x addr ) DMA2D_BGCLUT ; \ DMA2D_BGCLUT_BLUE, BLUE

\ QUADSPI_CR (read-write) Reset:0x00000000
: QUADSPI_CR_PRESCALER ( %bbbbbbbb -- x addr ) 24 lshift QUADSPI_CR ; \ QUADSPI_CR_PRESCALER, Clock prescaler
: QUADSPI_CR_PMM ( -- x addr ) 23 bit QUADSPI_CR ; \ QUADSPI_CR_PMM, Polling match mode
: QUADSPI_CR_APMS ( -- x addr ) 22 bit QUADSPI_CR ; \ QUADSPI_CR_APMS, Automatic poll mode stop
: QUADSPI_CR_TOIE ( -- x addr ) 20 bit QUADSPI_CR ; \ QUADSPI_CR_TOIE, TimeOut interrupt enable
: QUADSPI_CR_SMIE ( -- x addr ) 19 bit QUADSPI_CR ; \ QUADSPI_CR_SMIE, Status match interrupt enable
: QUADSPI_CR_FTIE ( -- x addr ) 18 bit QUADSPI_CR ; \ QUADSPI_CR_FTIE, FIFO threshold interrupt enable
: QUADSPI_CR_TCIE ( -- x addr ) 17 bit QUADSPI_CR ; \ QUADSPI_CR_TCIE, Transfer complete interrupt enable
: QUADSPI_CR_TEIE ( -- x addr ) 16 bit QUADSPI_CR ; \ QUADSPI_CR_TEIE, Transfer error interrupt enable
: QUADSPI_CR_FTHRES ( %bbbbb -- x addr ) 8 lshift QUADSPI_CR ; \ QUADSPI_CR_FTHRES, IFO threshold level
: QUADSPI_CR_FSEL ( -- x addr ) 7 bit QUADSPI_CR ; \ QUADSPI_CR_FSEL, FLASH memory selection
: QUADSPI_CR_DFM ( -- x addr ) 6 bit QUADSPI_CR ; \ QUADSPI_CR_DFM, Dual-flash mode
: QUADSPI_CR_SSHIFT ( -- x addr ) 4 bit QUADSPI_CR ; \ QUADSPI_CR_SSHIFT, Sample shift
: QUADSPI_CR_TCEN ( -- x addr ) 3 bit QUADSPI_CR ; \ QUADSPI_CR_TCEN, Timeout counter enable
: QUADSPI_CR_DMAEN ( -- x addr ) 2 bit QUADSPI_CR ; \ QUADSPI_CR_DMAEN, DMA enable
: QUADSPI_CR_ABORT ( -- x addr ) 1 bit QUADSPI_CR ; \ QUADSPI_CR_ABORT, Abort request
: QUADSPI_CR_EN ( -- x addr ) 0 bit QUADSPI_CR ; \ QUADSPI_CR_EN, Enable

\ QUADSPI_DCR (read-write) Reset:0x00000000
: QUADSPI_DCR_FSIZE ( %bbbbb -- x addr ) 16 lshift QUADSPI_DCR ; \ QUADSPI_DCR_FSIZE, FLASH memory size
: QUADSPI_DCR_CSHT ( %bbb -- x addr ) 8 lshift QUADSPI_DCR ; \ QUADSPI_DCR_CSHT, Chip select high time
: QUADSPI_DCR_CKMODE ( -- x addr ) 0 bit QUADSPI_DCR ; \ QUADSPI_DCR_CKMODE, Mode 0 / mode 3

\ QUADSPI_SR (read-only) Reset:0x00000000
: QUADSPI_SR_FLEVEL? ( --  x ) 8 lshift QUADSPI_SR @ ; \ QUADSPI_SR_FLEVEL, FIFO level
: QUADSPI_SR_BUSY? ( --  1|0 ) 5 bit QUADSPI_SR bit@ ; \ QUADSPI_SR_BUSY, Busy
: QUADSPI_SR_TOF? ( --  1|0 ) 4 bit QUADSPI_SR bit@ ; \ QUADSPI_SR_TOF, Timeout flag
: QUADSPI_SR_SMF? ( --  1|0 ) 3 bit QUADSPI_SR bit@ ; \ QUADSPI_SR_SMF, Status match flag
: QUADSPI_SR_FTF? ( --  1|0 ) 2 bit QUADSPI_SR bit@ ; \ QUADSPI_SR_FTF, FIFO threshold flag
: QUADSPI_SR_TCF? ( --  1|0 ) 1 bit QUADSPI_SR bit@ ; \ QUADSPI_SR_TCF, Transfer complete flag
: QUADSPI_SR_TEF? ( --  1|0 ) 0 bit QUADSPI_SR bit@ ; \ QUADSPI_SR_TEF, Transfer error flag

\ QUADSPI_FCR (read-write) Reset:0x00000000
: QUADSPI_FCR_CTOF ( -- x addr ) 4 bit QUADSPI_FCR ; \ QUADSPI_FCR_CTOF, Clear timeout flag
: QUADSPI_FCR_CSMF ( -- x addr ) 3 bit QUADSPI_FCR ; \ QUADSPI_FCR_CSMF, Clear status match flag
: QUADSPI_FCR_CTCF ( -- x addr ) 1 bit QUADSPI_FCR ; \ QUADSPI_FCR_CTCF, Clear transfer complete flag
: QUADSPI_FCR_CTEF ( -- x addr ) 0 bit QUADSPI_FCR ; \ QUADSPI_FCR_CTEF, Clear transfer error flag

\ QUADSPI_DLR (read-write) Reset:0x00000000
: QUADSPI_DLR_DL ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) QUADSPI_DLR ; \ QUADSPI_DLR_DL, Data length

\ QUADSPI_CCR (read-write) Reset:0x00000000
: QUADSPI_CCR_DDRM ( -- x addr ) 31 bit QUADSPI_CCR ; \ QUADSPI_CCR_DDRM, Double data rate mode
: QUADSPI_CCR_DHHC ( -- x addr ) 30 bit QUADSPI_CCR ; \ QUADSPI_CCR_DHHC, DDR hold half cycle
: QUADSPI_CCR_SIOO ( -- x addr ) 28 bit QUADSPI_CCR ; \ QUADSPI_CCR_SIOO, Send instruction only once mode
: QUADSPI_CCR_FMODE ( %bb -- x addr ) 26 lshift QUADSPI_CCR ; \ QUADSPI_CCR_FMODE, Functional mode
: QUADSPI_CCR_DMODE ( %bb -- x addr ) 24 lshift QUADSPI_CCR ; \ QUADSPI_CCR_DMODE, Data mode
: QUADSPI_CCR_DCYC ( %bbbbb -- x addr ) 18 lshift QUADSPI_CCR ; \ QUADSPI_CCR_DCYC, Number of dummy cycles
: QUADSPI_CCR_ABSIZE ( %bb -- x addr ) 16 lshift QUADSPI_CCR ; \ QUADSPI_CCR_ABSIZE, Alternate bytes size
: QUADSPI_CCR_ABMODE ( %bb -- x addr ) 14 lshift QUADSPI_CCR ; \ QUADSPI_CCR_ABMODE, Alternate bytes mode
: QUADSPI_CCR_ADSIZE ( %bb -- x addr ) 12 lshift QUADSPI_CCR ; \ QUADSPI_CCR_ADSIZE, Address size
: QUADSPI_CCR_ADMODE ( %bb -- x addr ) 10 lshift QUADSPI_CCR ; \ QUADSPI_CCR_ADMODE, Address mode
: QUADSPI_CCR_IMODE ( %bb -- x addr ) 8 lshift QUADSPI_CCR ; \ QUADSPI_CCR_IMODE, Instruction mode
: QUADSPI_CCR_INSTRUCTION ( %bbbbbbbb -- x addr ) QUADSPI_CCR ; \ QUADSPI_CCR_INSTRUCTION, Instruction

\ QUADSPI_AR (read-write) Reset:0x00000000
: QUADSPI_AR_ADDRESS ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) QUADSPI_AR ; \ QUADSPI_AR_ADDRESS, Address

\ QUADSPI_ABR (read-write) Reset:0x00000000
: QUADSPI_ABR_ALTERNATE ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) QUADSPI_ABR ; \ QUADSPI_ABR_ALTERNATE, ALTERNATE

\ QUADSPI_DR (read-write) Reset:0x00000000
: QUADSPI_DR_DATA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) QUADSPI_DR ; \ QUADSPI_DR_DATA, Data

\ QUADSPI_PSMKR (read-write) Reset:0x00000000
: QUADSPI_PSMKR_MASK ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) QUADSPI_PSMKR ; \ QUADSPI_PSMKR_MASK, Status mask

\ QUADSPI_PSMAR (read-write) Reset:0x00000000
: QUADSPI_PSMAR_MATCH ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) QUADSPI_PSMAR ; \ QUADSPI_PSMAR_MATCH, Status match

\ QUADSPI_PIR (read-write) Reset:0x00000000
: QUADSPI_PIR_INTERVAL ( %bbbbbbbbbbbbbbbb -- x addr ) QUADSPI_PIR ; \ QUADSPI_PIR_INTERVAL, Polling interval

\ QUADSPI_LPTR (read-write) Reset:0x00000000
: QUADSPI_LPTR_TIMEOUT ( %bbbbbbbbbbbbbbbb -- x addr ) QUADSPI_LPTR ; \ QUADSPI_LPTR_TIMEOUT, Timeout period

\ CEC_CR (read-write) Reset:0x00000000
: CEC_CR_TXEOM ( -- x addr ) 2 bit CEC_CR ; \ CEC_CR_TXEOM, Tx End Of Message
: CEC_CR_TXSOM ( -- x addr ) 1 bit CEC_CR ; \ CEC_CR_TXSOM, Tx start of message
: CEC_CR_CECEN ( -- x addr ) 0 bit CEC_CR ; \ CEC_CR_CECEN, CEC Enable

\ CEC_CFGR (read-write) Reset:0x00000000
: CEC_CFGR_SFT ( %bbb -- x addr ) CEC_CFGR ; \ CEC_CFGR_SFT, Signal Free Time
: CEC_CFGR_RXTOL ( -- x addr ) 3 bit CEC_CFGR ; \ CEC_CFGR_RXTOL, Rx-Tolerance
: CEC_CFGR_BRESTP ( -- x addr ) 4 bit CEC_CFGR ; \ CEC_CFGR_BRESTP, Rx-stop on bit rising error
: CEC_CFGR_BREGEN ( -- x addr ) 5 bit CEC_CFGR ; \ CEC_CFGR_BREGEN, Generate error-bit on bit rising error
: CEC_CFGR_LBPEGEN ( -- x addr ) 6 bit CEC_CFGR ; \ CEC_CFGR_LBPEGEN, Generate Error-Bit on Long Bit Period Error
: CEC_CFGR_BRDNOGEN ( -- x addr ) 7 bit CEC_CFGR ; \ CEC_CFGR_BRDNOGEN, Avoid Error-Bit Generation in Broadcast
: CEC_CFGR_SFTOP ( -- x addr ) 8 bit CEC_CFGR ; \ CEC_CFGR_SFTOP, SFT Option Bit
: CEC_CFGR_OAR ( %bbbbbbbbbbbbbbb -- x addr ) 16 lshift CEC_CFGR ; \ CEC_CFGR_OAR, Own addresses configuration
: CEC_CFGR_LSTN ( -- x addr ) 31 bit CEC_CFGR ; \ CEC_CFGR_LSTN, Listen mode

\ CEC_TXDR (write-only) Reset:0x00000000
: CEC_TXDR_TXD ( %bbbbbbbb -- x addr ) CEC_TXDR ; \ CEC_TXDR_TXD, Tx Data register

\ CEC_RXDR (read-only) Reset:0x00000000
: CEC_RXDR_RXDR? ( --  x ) CEC_RXDR @ ; \ CEC_RXDR_RXDR, CEC Rx Data Register

\ CEC_ISR (read-write) Reset:0x00000000
: CEC_ISR_TXACKE ( -- x addr ) 12 bit CEC_ISR ; \ CEC_ISR_TXACKE, Tx-Missing acknowledge error
: CEC_ISR_TXERR ( -- x addr ) 11 bit CEC_ISR ; \ CEC_ISR_TXERR, Tx-Error
: CEC_ISR_TXUDR ( -- x addr ) 10 bit CEC_ISR ; \ CEC_ISR_TXUDR, Tx-Buffer Underrun
: CEC_ISR_TXEND ( -- x addr ) 9 bit CEC_ISR ; \ CEC_ISR_TXEND, End of Transmission
: CEC_ISR_TXBR ( -- x addr ) 8 bit CEC_ISR ; \ CEC_ISR_TXBR, Tx-Byte Request
: CEC_ISR_ARBLST ( -- x addr ) 7 bit CEC_ISR ; \ CEC_ISR_ARBLST, Arbitration Lost
: CEC_ISR_RXACKE ( -- x addr ) 6 bit CEC_ISR ; \ CEC_ISR_RXACKE, Rx-Missing Acknowledge
: CEC_ISR_LBPE ( -- x addr ) 5 bit CEC_ISR ; \ CEC_ISR_LBPE, Rx-Long Bit Period Error
: CEC_ISR_SBPE ( -- x addr ) 4 bit CEC_ISR ; \ CEC_ISR_SBPE, Rx-Short Bit period error
: CEC_ISR_BRE ( -- x addr ) 3 bit CEC_ISR ; \ CEC_ISR_BRE, Rx-Bit rising error
: CEC_ISR_RXOVR ( -- x addr ) 2 bit CEC_ISR ; \ CEC_ISR_RXOVR, Rx-Overrun
: CEC_ISR_RXEND ( -- x addr ) 1 bit CEC_ISR ; \ CEC_ISR_RXEND, End Of Reception
: CEC_ISR_RXBR ( -- x addr ) 0 bit CEC_ISR ; \ CEC_ISR_RXBR, Rx-Byte Received

\ CEC_IER (read-write) Reset:0x00000000
: CEC_IER_TXACKIE ( -- x addr ) 12 bit CEC_IER ; \ CEC_IER_TXACKIE, Tx-Missing Acknowledge Error Interrupt Enable
: CEC_IER_TXERRIE ( -- x addr ) 11 bit CEC_IER ; \ CEC_IER_TXERRIE, Tx-Error Interrupt Enable
: CEC_IER_TXUDRIE ( -- x addr ) 10 bit CEC_IER ; \ CEC_IER_TXUDRIE, Tx-Underrun interrupt enable
: CEC_IER_TXENDIE ( -- x addr ) 9 bit CEC_IER ; \ CEC_IER_TXENDIE, Tx-End of message interrupt enable
: CEC_IER_TXBRIE ( -- x addr ) 8 bit CEC_IER ; \ CEC_IER_TXBRIE, Tx-Byte Request Interrupt Enable
: CEC_IER_ARBLSTIE ( -- x addr ) 7 bit CEC_IER ; \ CEC_IER_ARBLSTIE, Arbitration Lost Interrupt Enable
: CEC_IER_RXACKIE ( -- x addr ) 6 bit CEC_IER ; \ CEC_IER_RXACKIE, Rx-Missing Acknowledge Error Interrupt Enable
: CEC_IER_LBPEIE ( -- x addr ) 5 bit CEC_IER ; \ CEC_IER_LBPEIE, Long Bit Period Error Interrupt Enable
: CEC_IER_SBPEIE ( -- x addr ) 4 bit CEC_IER ; \ CEC_IER_SBPEIE, Short Bit Period Error Interrupt Enable
: CEC_IER_BREIE ( -- x addr ) 3 bit CEC_IER ; \ CEC_IER_BREIE, Bit Rising Error Interrupt Enable
: CEC_IER_RXOVRIE ( -- x addr ) 2 bit CEC_IER ; \ CEC_IER_RXOVRIE, Rx-Buffer Overrun Interrupt Enable
: CEC_IER_RXENDIE ( -- x addr ) 1 bit CEC_IER ; \ CEC_IER_RXENDIE, End Of Reception Interrupt Enable
: CEC_IER_RXBRIE ( -- x addr ) 0 bit CEC_IER ; \ CEC_IER_RXBRIE, Rx-Byte Received Interrupt Enable

\ SPDIF_RX_CR (read-write) Reset:0x00000000
: SPDIF_RX_CR_SPDIFEN ( %bb -- x addr ) SPDIF_RX_CR ; \ SPDIF_RX_CR_SPDIFEN, Peripheral Block Enable
: SPDIF_RX_CR_RXDMAEN ( -- x addr ) 2 bit SPDIF_RX_CR ; \ SPDIF_RX_CR_RXDMAEN, Receiver DMA ENable for data flow
: SPDIF_RX_CR_RXSTEO ( -- x addr ) 3 bit SPDIF_RX_CR ; \ SPDIF_RX_CR_RXSTEO, STerEO Mode
: SPDIF_RX_CR_DRFMT ( %bb -- x addr ) 4 lshift SPDIF_RX_CR ; \ SPDIF_RX_CR_DRFMT, RX Data format
: SPDIF_RX_CR_PMSK ( -- x addr ) 6 bit SPDIF_RX_CR ; \ SPDIF_RX_CR_PMSK, Mask Parity error bit
: SPDIF_RX_CR_VMSK ( -- x addr ) 7 bit SPDIF_RX_CR ; \ SPDIF_RX_CR_VMSK, Mask of Validity bit
: SPDIF_RX_CR_CUMSK ( -- x addr ) 8 bit SPDIF_RX_CR ; \ SPDIF_RX_CR_CUMSK, Mask of channel status and user bits
: SPDIF_RX_CR_PTMSK ( -- x addr ) 9 bit SPDIF_RX_CR ; \ SPDIF_RX_CR_PTMSK, Mask of Preamble Type bits
: SPDIF_RX_CR_CBDMAEN ( -- x addr ) 10 bit SPDIF_RX_CR ; \ SPDIF_RX_CR_CBDMAEN, Control Buffer DMA ENable for control flow
: SPDIF_RX_CR_CHSEL ( -- x addr ) 11 bit SPDIF_RX_CR ; \ SPDIF_RX_CR_CHSEL, Channel Selection
: SPDIF_RX_CR_NBTR ( %bb -- x addr ) 12 lshift SPDIF_RX_CR ; \ SPDIF_RX_CR_NBTR, Maximum allowed re-tries during synchronization phase
: SPDIF_RX_CR_WFA ( -- x addr ) 14 bit SPDIF_RX_CR ; \ SPDIF_RX_CR_WFA, Wait For Activity
: SPDIF_RX_CR_INSEL ( %bbb -- x addr ) 16 lshift SPDIF_RX_CR ; \ SPDIF_RX_CR_INSEL, input selection

\ SPDIF_RX_IMR (read-write) Reset:0x00000000
: SPDIF_RX_IMR_RXNEIE ( -- x addr ) 0 bit SPDIF_RX_IMR ; \ SPDIF_RX_IMR_RXNEIE, RXNE interrupt enable
: SPDIF_RX_IMR_CSRNEIE ( -- x addr ) 1 bit SPDIF_RX_IMR ; \ SPDIF_RX_IMR_CSRNEIE, Control Buffer Ready Interrupt Enable
: SPDIF_RX_IMR_PERRIE ( -- x addr ) 2 bit SPDIF_RX_IMR ; \ SPDIF_RX_IMR_PERRIE, Parity error interrupt enable
: SPDIF_RX_IMR_OVRIE ( -- x addr ) 3 bit SPDIF_RX_IMR ; \ SPDIF_RX_IMR_OVRIE, Overrun error Interrupt Enable
: SPDIF_RX_IMR_SBLKIE ( -- x addr ) 4 bit SPDIF_RX_IMR ; \ SPDIF_RX_IMR_SBLKIE, Synchronization Block Detected Interrupt Enable
: SPDIF_RX_IMR_SYNCDIE ( -- x addr ) 5 bit SPDIF_RX_IMR ; \ SPDIF_RX_IMR_SYNCDIE, Synchronization Done
: SPDIF_RX_IMR_IFEIE ( -- x addr ) 6 bit SPDIF_RX_IMR ; \ SPDIF_RX_IMR_IFEIE, Serial Interface Error Interrupt Enable

\ SPDIF_RX_SR (read-only) Reset:0x00000000
: SPDIF_RX_SR_RXNE? ( --  1|0 ) 0 bit SPDIF_RX_SR bit@ ; \ SPDIF_RX_SR_RXNE, Read data register not empty
: SPDIF_RX_SR_CSRNE? ( --  1|0 ) 1 bit SPDIF_RX_SR bit@ ; \ SPDIF_RX_SR_CSRNE, Control Buffer register is not empty
: SPDIF_RX_SR_PERR? ( --  1|0 ) 2 bit SPDIF_RX_SR bit@ ; \ SPDIF_RX_SR_PERR, Parity error
: SPDIF_RX_SR_OVR? ( --  1|0 ) 3 bit SPDIF_RX_SR bit@ ; \ SPDIF_RX_SR_OVR, Overrun error
: SPDIF_RX_SR_SBD? ( --  1|0 ) 4 bit SPDIF_RX_SR bit@ ; \ SPDIF_RX_SR_SBD, Synchronization Block Detected
: SPDIF_RX_SR_SYNCD? ( --  1|0 ) 5 bit SPDIF_RX_SR bit@ ; \ SPDIF_RX_SR_SYNCD, Synchronization Done
: SPDIF_RX_SR_FERR? ( --  1|0 ) 6 bit SPDIF_RX_SR bit@ ; \ SPDIF_RX_SR_FERR, Framing error
: SPDIF_RX_SR_SERR? ( --  1|0 ) 7 bit SPDIF_RX_SR bit@ ; \ SPDIF_RX_SR_SERR, Synchronization error
: SPDIF_RX_SR_TERR? ( --  1|0 ) 8 bit SPDIF_RX_SR bit@ ; \ SPDIF_RX_SR_TERR, Time-out error
: SPDIF_RX_SR_WIDTH5? ( --  x ) 16 lshift SPDIF_RX_SR @ ; \ SPDIF_RX_SR_WIDTH5, Duration of 5 symbols counted with SPDIF_CLK

\ SPDIF_RX_IFCR (write-only) Reset:0x00000000
: SPDIF_RX_IFCR_PERRCF ( -- x addr ) 2 bit SPDIF_RX_IFCR ; \ SPDIF_RX_IFCR_PERRCF, Clears the Parity error flag
: SPDIF_RX_IFCR_OVRCF ( -- x addr ) 3 bit SPDIF_RX_IFCR ; \ SPDIF_RX_IFCR_OVRCF, Clears the Overrun error flag
: SPDIF_RX_IFCR_SBDCF ( -- x addr ) 4 bit SPDIF_RX_IFCR ; \ SPDIF_RX_IFCR_SBDCF, Clears the Synchronization Block Detected flag
: SPDIF_RX_IFCR_SYNCDCF ( -- x addr ) 5 bit SPDIF_RX_IFCR ; \ SPDIF_RX_IFCR_SYNCDCF, Clears the Synchronization Done flag

\ SPDIF_RX_DR (read-only) Reset:0x00000000
: SPDIF_RX_DR_DR? ( --  x ) SPDIF_RX_DR @ ; \ SPDIF_RX_DR_DR, Parity Error bit
: SPDIF_RX_DR_PE? ( --  1|0 ) 24 bit SPDIF_RX_DR bit@ ; \ SPDIF_RX_DR_PE, Parity Error bit
: SPDIF_RX_DR_V? ( --  1|0 ) 25 bit SPDIF_RX_DR bit@ ; \ SPDIF_RX_DR_V, Validity bit
: SPDIF_RX_DR_U? ( --  1|0 ) 26 bit SPDIF_RX_DR bit@ ; \ SPDIF_RX_DR_U, User bit
: SPDIF_RX_DR_C? ( --  1|0 ) 27 bit SPDIF_RX_DR bit@ ; \ SPDIF_RX_DR_C, Channel Status bit
: SPDIF_RX_DR_PT? ( --  x ) 28 lshift SPDIF_RX_DR @ ; \ SPDIF_RX_DR_PT, Preamble Type

\ SPDIF_RX_CSR (read-only) Reset:0x00000000
: SPDIF_RX_CSR_USR? ( --  x ) SPDIF_RX_CSR @ ; \ SPDIF_RX_CSR_USR, User data information
: SPDIF_RX_CSR_CS? ( --  x ) 16 lshift SPDIF_RX_CSR @ ; \ SPDIF_RX_CSR_CS, Channel A status information
: SPDIF_RX_CSR_SOB? ( --  1|0 ) 24 bit SPDIF_RX_CSR bit@ ; \ SPDIF_RX_CSR_SOB, Start Of Block

\ SPDIF_RX_DIR (read-only) Reset:0x00000000
: SPDIF_RX_DIR_THI? ( --  x ) SPDIF_RX_DIR @ ; \ SPDIF_RX_DIR_THI, Threshold HIGH
: SPDIF_RX_DIR_TLO? ( --  x ) 16 lshift SPDIF_RX_DIR @ ; \ SPDIF_RX_DIR_TLO, Threshold LOW

\ SDMMC1_POWER (read-write) Reset:0x00000000
: SDMMC1_POWER_PWRCTRL ( %bb -- x addr ) SDMMC1_POWER ; \ SDMMC1_POWER_PWRCTRL, PWRCTRL

\ SDMMC1_CLKCR (read-write) Reset:0x00000000
: SDMMC1_CLKCR_HWFC_EN ( -- x addr ) 14 bit SDMMC1_CLKCR ; \ SDMMC1_CLKCR_HWFC_EN, HW Flow Control enable
: SDMMC1_CLKCR_NEGEDGE ( -- x addr ) 13 bit SDMMC1_CLKCR ; \ SDMMC1_CLKCR_NEGEDGE, SDIO_CK dephasing selection bit
: SDMMC1_CLKCR_WIDBUS ( %bb -- x addr ) 11 lshift SDMMC1_CLKCR ; \ SDMMC1_CLKCR_WIDBUS, Wide bus mode enable bit
: SDMMC1_CLKCR_BYPASS ( -- x addr ) 10 bit SDMMC1_CLKCR ; \ SDMMC1_CLKCR_BYPASS, Clock divider bypass enable bit
: SDMMC1_CLKCR_PWRSAV ( -- x addr ) 9 bit SDMMC1_CLKCR ; \ SDMMC1_CLKCR_PWRSAV, Power saving configuration bit
: SDMMC1_CLKCR_CLKEN ( -- x addr ) 8 bit SDMMC1_CLKCR ; \ SDMMC1_CLKCR_CLKEN, Clock enable bit
: SDMMC1_CLKCR_CLKDIV ( %bbbbbbbb -- x addr ) SDMMC1_CLKCR ; \ SDMMC1_CLKCR_CLKDIV, Clock divide factor

\ SDMMC1_ARG (read-write) Reset:0x00000000
: SDMMC1_ARG_CMDARG ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SDMMC1_ARG ; \ SDMMC1_ARG_CMDARG, Command argument

\ SDMMC1_CMD (read-write) Reset:0x00000000
: SDMMC1_CMD_CE_ATACMD ( -- x addr ) 14 bit SDMMC1_CMD ; \ SDMMC1_CMD_CE_ATACMD, CE-ATA command
: SDMMC1_CMD_nIEN ( -- x addr ) 13 bit SDMMC1_CMD ; \ SDMMC1_CMD_nIEN, not Interrupt Enable
: SDMMC1_CMD_ENCMDcompl ( -- x addr ) 12 bit SDMMC1_CMD ; \ SDMMC1_CMD_ENCMDcompl, Enable CMD completion
: SDMMC1_CMD_SDIOSuspend ( -- x addr ) 11 bit SDMMC1_CMD ; \ SDMMC1_CMD_SDIOSuspend, SD I/O suspend command
: SDMMC1_CMD_CPSMEN ( -- x addr ) 10 bit SDMMC1_CMD ; \ SDMMC1_CMD_CPSMEN, Command path state machine CPSM Enable bit
: SDMMC1_CMD_WAITPEND ( -- x addr ) 9 bit SDMMC1_CMD ; \ SDMMC1_CMD_WAITPEND, CPSM Waits for ends of data transfer CmdPend internal signal
: SDMMC1_CMD_WAITINT ( -- x addr ) 8 bit SDMMC1_CMD ; \ SDMMC1_CMD_WAITINT, CPSM waits for interrupt request
: SDMMC1_CMD_WAITRESP ( %bb -- x addr ) 6 lshift SDMMC1_CMD ; \ SDMMC1_CMD_WAITRESP, Wait for response bits
: SDMMC1_CMD_CMDINDEX ( %bbbbbb -- x addr ) SDMMC1_CMD ; \ SDMMC1_CMD_CMDINDEX, Command index

\ SDMMC1_RESPCMD (read-only) Reset:0x00000000
: SDMMC1_RESPCMD_RESPCMD? ( --  x ) SDMMC1_RESPCMD @ ; \ SDMMC1_RESPCMD_RESPCMD, Response command index

\ SDMMC1_RESP1 (read-only) Reset:0x00000000
: SDMMC1_RESP1_CARDSTATUS1? ( --  x ) SDMMC1_RESP1 @ ; \ SDMMC1_RESP1_CARDSTATUS1, see Table 132

\ SDMMC1_RESP2 (read-only) Reset:0x00000000
: SDMMC1_RESP2_CARDSTATUS2? ( --  x ) SDMMC1_RESP2 @ ; \ SDMMC1_RESP2_CARDSTATUS2, see Table 132

\ SDMMC1_RESP3 (read-only) Reset:0x00000000
: SDMMC1_RESP3_CARDSTATUS3? ( --  x ) SDMMC1_RESP3 @ ; \ SDMMC1_RESP3_CARDSTATUS3, see Table 132

\ SDMMC1_RESP4 (read-only) Reset:0x00000000
: SDMMC1_RESP4_CARDSTATUS4? ( --  x ) SDMMC1_RESP4 @ ; \ SDMMC1_RESP4_CARDSTATUS4, see Table 132

\ SDMMC1_DTIMER (read-write) Reset:0x00000000
: SDMMC1_DTIMER_DATATIME ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SDMMC1_DTIMER ; \ SDMMC1_DTIMER_DATATIME, Data timeout period

\ SDMMC1_DLEN (read-write) Reset:0x00000000
: SDMMC1_DLEN_DATALENGTH x addr ) SDMMC1_DLEN ; \ SDMMC1_DLEN_DATALENGTH, Data length value

\ SDMMC1_DCTRL (read-write) Reset:0x00000000
: SDMMC1_DCTRL_SDIOEN ( -- x addr ) 11 bit SDMMC1_DCTRL ; \ SDMMC1_DCTRL_SDIOEN, SD I/O enable functions
: SDMMC1_DCTRL_RWMOD ( -- x addr ) 10 bit SDMMC1_DCTRL ; \ SDMMC1_DCTRL_RWMOD, Read wait mode
: SDMMC1_DCTRL_RWSTOP ( -- x addr ) 9 bit SDMMC1_DCTRL ; \ SDMMC1_DCTRL_RWSTOP, Read wait stop
: SDMMC1_DCTRL_RWSTART ( -- x addr ) 8 bit SDMMC1_DCTRL ; \ SDMMC1_DCTRL_RWSTART, Read wait start
: SDMMC1_DCTRL_DBLOCKSIZE ( %bbbb -- x addr ) 4 lshift SDMMC1_DCTRL ; \ SDMMC1_DCTRL_DBLOCKSIZE, Data block size
: SDMMC1_DCTRL_DMAEN ( -- x addr ) 3 bit SDMMC1_DCTRL ; \ SDMMC1_DCTRL_DMAEN, DMA enable bit
: SDMMC1_DCTRL_DTMODE ( -- x addr ) 2 bit SDMMC1_DCTRL ; \ SDMMC1_DCTRL_DTMODE, Data transfer mode selection 1: Stream or SDIO multibyte data transfer
: SDMMC1_DCTRL_DTDIR ( -- x addr ) 1 bit SDMMC1_DCTRL ; \ SDMMC1_DCTRL_DTDIR, Data transfer direction selection
: SDMMC1_DCTRL_DTEN ( -- x addr ) 0 bit SDMMC1_DCTRL ; \ SDMMC1_DCTRL_DTEN, DTEN

\ SDMMC1_DCOUNT (read-only) Reset:0x00000000
: SDMMC1_DCOUNT_DATACOUNT? ( --  x ) SDMMC1_DCOUNT @ ; \ SDMMC1_DCOUNT_DATACOUNT, Data count value

\ SDMMC1_STA (read-only) Reset:0x00000000
: SDMMC1_STA_CEATAEND? ( --  1|0 ) 23 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_CEATAEND, CE-ATA command completion signal received for CMD61
: SDMMC1_STA_SDIOIT? ( --  1|0 ) 22 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_SDIOIT, SDIO interrupt received
: SDMMC1_STA_RXDAVL? ( --  1|0 ) 21 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_RXDAVL, Data available in receive FIFO
: SDMMC1_STA_TXDAVL? ( --  1|0 ) 20 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_TXDAVL, Data available in transmit FIFO
: SDMMC1_STA_RXFIFOE? ( --  1|0 ) 19 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_RXFIFOE, Receive FIFO empty
: SDMMC1_STA_TXFIFOE? ( --  1|0 ) 18 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_TXFIFOE, Transmit FIFO empty
: SDMMC1_STA_RXFIFOF? ( --  1|0 ) 17 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_RXFIFOF, Receive FIFO full
: SDMMC1_STA_TXFIFOF? ( --  1|0 ) 16 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_TXFIFOF, Transmit FIFO full
: SDMMC1_STA_RXFIFOHF? ( --  1|0 ) 15 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_RXFIFOHF, Receive FIFO half full: there are at least 8 words in the FIFO
: SDMMC1_STA_TXFIFOHE? ( --  1|0 ) 14 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_TXFIFOHE, Transmit FIFO half empty: at least 8 words can be written into the FIFO
: SDMMC1_STA_RXACT? ( --  1|0 ) 13 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_RXACT, Data receive in progress
: SDMMC1_STA_TXACT? ( --  1|0 ) 12 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_TXACT, Data transmit in progress
: SDMMC1_STA_CMDACT? ( --  1|0 ) 11 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_CMDACT, Command transfer in progress
: SDMMC1_STA_DBCKEND? ( --  1|0 ) 10 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_DBCKEND, Data block sent/received CRC check passed
: SDMMC1_STA_STBITERR? ( --  1|0 ) 9 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_STBITERR, Start bit not detected on all data signals in wide bus mode
: SDMMC1_STA_DATAEND? ( --  1|0 ) 8 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_DATAEND, Data end data counter, SDIDCOUNT, is zero
: SDMMC1_STA_CMDSENT? ( --  1|0 ) 7 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_CMDSENT, Command sent no response required
: SDMMC1_STA_CMDREND? ( --  1|0 ) 6 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_CMDREND, Command response received CRC check passed
: SDMMC1_STA_RXOVERR? ( --  1|0 ) 5 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_RXOVERR, Received FIFO overrun error
: SDMMC1_STA_TXUNDERR? ( --  1|0 ) 4 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_TXUNDERR, Transmit FIFO underrun error
: SDMMC1_STA_DTIMEOUT? ( --  1|0 ) 3 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_DTIMEOUT, Data timeout
: SDMMC1_STA_CTIMEOUT? ( --  1|0 ) 2 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_CTIMEOUT, Command response timeout
: SDMMC1_STA_DCRCFAIL? ( --  1|0 ) 1 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_DCRCFAIL, Data block sent/received CRC check failed
: SDMMC1_STA_CCRCFAIL? ( --  1|0 ) 0 bit SDMMC1_STA bit@ ; \ SDMMC1_STA_CCRCFAIL, Command response received CRC check failed

\ SDMMC1_ICR (read-write) Reset:0x00000000
: SDMMC1_ICR_CEATAENDC ( -- x addr ) 23 bit SDMMC1_ICR ; \ SDMMC1_ICR_CEATAENDC, CEATAEND flag clear bit
: SDMMC1_ICR_SDIOITC ( -- x addr ) 22 bit SDMMC1_ICR ; \ SDMMC1_ICR_SDIOITC, SDIOIT flag clear bit
: SDMMC1_ICR_DBCKENDC ( -- x addr ) 10 bit SDMMC1_ICR ; \ SDMMC1_ICR_DBCKENDC, DBCKEND flag clear bit
: SDMMC1_ICR_STBITERRC ( -- x addr ) 9 bit SDMMC1_ICR ; \ SDMMC1_ICR_STBITERRC, STBITERR flag clear bit
: SDMMC1_ICR_DATAENDC ( -- x addr ) 8 bit SDMMC1_ICR ; \ SDMMC1_ICR_DATAENDC, DATAEND flag clear bit
: SDMMC1_ICR_CMDSENTC ( -- x addr ) 7 bit SDMMC1_ICR ; \ SDMMC1_ICR_CMDSENTC, CMDSENT flag clear bit
: SDMMC1_ICR_CMDRENDC ( -- x addr ) 6 bit SDMMC1_ICR ; \ SDMMC1_ICR_CMDRENDC, CMDREND flag clear bit
: SDMMC1_ICR_RXOVERRC ( -- x addr ) 5 bit SDMMC1_ICR ; \ SDMMC1_ICR_RXOVERRC, RXOVERR flag clear bit
: SDMMC1_ICR_TXUNDERRC ( -- x addr ) 4 bit SDMMC1_ICR ; \ SDMMC1_ICR_TXUNDERRC, TXUNDERR flag clear bit
: SDMMC1_ICR_DTIMEOUTC ( -- x addr ) 3 bit SDMMC1_ICR ; \ SDMMC1_ICR_DTIMEOUTC, DTIMEOUT flag clear bit
: SDMMC1_ICR_CTIMEOUTC ( -- x addr ) 2 bit SDMMC1_ICR ; \ SDMMC1_ICR_CTIMEOUTC, CTIMEOUT flag clear bit
: SDMMC1_ICR_DCRCFAILC ( -- x addr ) 1 bit SDMMC1_ICR ; \ SDMMC1_ICR_DCRCFAILC, DCRCFAIL flag clear bit
: SDMMC1_ICR_CCRCFAILC ( -- x addr ) 0 bit SDMMC1_ICR ; \ SDMMC1_ICR_CCRCFAILC, CCRCFAIL flag clear bit

\ SDMMC1_MASK (read-write) Reset:0x00000000
: SDMMC1_MASK_CEATAENDIE ( -- x addr ) 23 bit SDMMC1_MASK ; \ SDMMC1_MASK_CEATAENDIE, CE-ATA command completion signal received interrupt enable
: SDMMC1_MASK_SDIOITIE ( -- x addr ) 22 bit SDMMC1_MASK ; \ SDMMC1_MASK_SDIOITIE, SDIO mode interrupt received interrupt enable
: SDMMC1_MASK_RXDAVLIE ( -- x addr ) 21 bit SDMMC1_MASK ; \ SDMMC1_MASK_RXDAVLIE, Data available in Rx FIFO interrupt enable
: SDMMC1_MASK_TXDAVLIE ( -- x addr ) 20 bit SDMMC1_MASK ; \ SDMMC1_MASK_TXDAVLIE, Data available in Tx FIFO interrupt enable
: SDMMC1_MASK_RXFIFOEIE ( -- x addr ) 19 bit SDMMC1_MASK ; \ SDMMC1_MASK_RXFIFOEIE, Rx FIFO empty interrupt enable
: SDMMC1_MASK_TXFIFOEIE ( -- x addr ) 18 bit SDMMC1_MASK ; \ SDMMC1_MASK_TXFIFOEIE, Tx FIFO empty interrupt enable
: SDMMC1_MASK_RXFIFOFIE ( -- x addr ) 17 bit SDMMC1_MASK ; \ SDMMC1_MASK_RXFIFOFIE, Rx FIFO full interrupt enable
: SDMMC1_MASK_TXFIFOFIE ( -- x addr ) 16 bit SDMMC1_MASK ; \ SDMMC1_MASK_TXFIFOFIE, Tx FIFO full interrupt enable
: SDMMC1_MASK_RXFIFOHFIE ( -- x addr ) 15 bit SDMMC1_MASK ; \ SDMMC1_MASK_RXFIFOHFIE, Rx FIFO half full interrupt enable
: SDMMC1_MASK_TXFIFOHEIE ( -- x addr ) 14 bit SDMMC1_MASK ; \ SDMMC1_MASK_TXFIFOHEIE, Tx FIFO half empty interrupt enable
: SDMMC1_MASK_RXACTIE ( -- x addr ) 13 bit SDMMC1_MASK ; \ SDMMC1_MASK_RXACTIE, Data receive acting interrupt enable
: SDMMC1_MASK_TXACTIE ( -- x addr ) 12 bit SDMMC1_MASK ; \ SDMMC1_MASK_TXACTIE, Data transmit acting interrupt enable
: SDMMC1_MASK_CMDACTIE ( -- x addr ) 11 bit SDMMC1_MASK ; \ SDMMC1_MASK_CMDACTIE, Command acting interrupt enable
: SDMMC1_MASK_DBCKENDIE ( -- x addr ) 10 bit SDMMC1_MASK ; \ SDMMC1_MASK_DBCKENDIE, Data block end interrupt enable
: SDMMC1_MASK_STBITERRIE ( -- x addr ) 9 bit SDMMC1_MASK ; \ SDMMC1_MASK_STBITERRIE, Start bit error interrupt enable
: SDMMC1_MASK_DATAENDIE ( -- x addr ) 8 bit SDMMC1_MASK ; \ SDMMC1_MASK_DATAENDIE, Data end interrupt enable
: SDMMC1_MASK_CMDSENTIE ( -- x addr ) 7 bit SDMMC1_MASK ; \ SDMMC1_MASK_CMDSENTIE, Command sent interrupt enable
: SDMMC1_MASK_CMDRENDIE ( -- x addr ) 6 bit SDMMC1_MASK ; \ SDMMC1_MASK_CMDRENDIE, Command response received interrupt enable
: SDMMC1_MASK_RXOVERRIE ( -- x addr ) 5 bit SDMMC1_MASK ; \ SDMMC1_MASK_RXOVERRIE, Rx FIFO overrun error interrupt enable
: SDMMC1_MASK_TXUNDERRIE ( -- x addr ) 4 bit SDMMC1_MASK ; \ SDMMC1_MASK_TXUNDERRIE, Tx FIFO underrun error interrupt enable
: SDMMC1_MASK_DTIMEOUTIE ( -- x addr ) 3 bit SDMMC1_MASK ; \ SDMMC1_MASK_DTIMEOUTIE, Data timeout interrupt enable
: SDMMC1_MASK_CTIMEOUTIE ( -- x addr ) 2 bit SDMMC1_MASK ; \ SDMMC1_MASK_CTIMEOUTIE, Command timeout interrupt enable
: SDMMC1_MASK_DCRCFAILIE ( -- x addr ) 1 bit SDMMC1_MASK ; \ SDMMC1_MASK_DCRCFAILIE, Data CRC fail interrupt enable
: SDMMC1_MASK_CCRCFAILIE ( -- x addr ) 0 bit SDMMC1_MASK ; \ SDMMC1_MASK_CCRCFAILIE, Command CRC fail interrupt enable

\ SDMMC1_FIFOCNT (read-only) Reset:0x00000000
: SDMMC1_FIFOCNT_FIFOCOUNT? ( --  x ) SDMMC1_FIFOCNT @ ; \ SDMMC1_FIFOCNT_FIFOCOUNT, Remaining number of words to be written to or read from the FIFO

\ SDMMC1_FIFO (read-write) Reset:0x00000000
: SDMMC1_FIFO_FIFOData ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SDMMC1_FIFO ; \ SDMMC1_FIFO_FIFOData, Receive and transmit FIFO data

\ LPTIM1_ISR (read-only) Reset:0x00000000
: LPTIM1_ISR_DOWN? ( --  1|0 ) 6 bit LPTIM1_ISR bit@ ; \ LPTIM1_ISR_DOWN, Counter direction change up to down
: LPTIM1_ISR_UP? ( --  1|0 ) 5 bit LPTIM1_ISR bit@ ; \ LPTIM1_ISR_UP, Counter direction change down to up
: LPTIM1_ISR_ARROK? ( --  1|0 ) 4 bit LPTIM1_ISR bit@ ; \ LPTIM1_ISR_ARROK, Autoreload register update OK
: LPTIM1_ISR_CMPOK? ( --  1|0 ) 3 bit LPTIM1_ISR bit@ ; \ LPTIM1_ISR_CMPOK, Compare register update OK
: LPTIM1_ISR_EXTTRIG? ( --  1|0 ) 2 bit LPTIM1_ISR bit@ ; \ LPTIM1_ISR_EXTTRIG, External trigger edge event
: LPTIM1_ISR_ARRM? ( --  1|0 ) 1 bit LPTIM1_ISR bit@ ; \ LPTIM1_ISR_ARRM, Autoreload match
: LPTIM1_ISR_CMPM? ( --  1|0 ) 0 bit LPTIM1_ISR bit@ ; \ LPTIM1_ISR_CMPM, Compare match

\ LPTIM1_ICR (write-only) Reset:0x00000000
: LPTIM1_ICR_DOWNCF ( -- x addr ) 6 bit LPTIM1_ICR ; \ LPTIM1_ICR_DOWNCF, Direction change to down Clear Flag
: LPTIM1_ICR_UPCF ( -- x addr ) 5 bit LPTIM1_ICR ; \ LPTIM1_ICR_UPCF, Direction change to UP Clear Flag
: LPTIM1_ICR_ARROKCF ( -- x addr ) 4 bit LPTIM1_ICR ; \ LPTIM1_ICR_ARROKCF, Autoreload register update OK Clear Flag
: LPTIM1_ICR_CMPOKCF ( -- x addr ) 3 bit LPTIM1_ICR ; \ LPTIM1_ICR_CMPOKCF, Compare register update OK Clear Flag
: LPTIM1_ICR_EXTTRIGCF ( -- x addr ) 2 bit LPTIM1_ICR ; \ LPTIM1_ICR_EXTTRIGCF, External trigger valid edge Clear Flag
: LPTIM1_ICR_ARRMCF ( -- x addr ) 1 bit LPTIM1_ICR ; \ LPTIM1_ICR_ARRMCF, Autoreload match Clear Flag
: LPTIM1_ICR_CMPMCF ( -- x addr ) 0 bit LPTIM1_ICR ; \ LPTIM1_ICR_CMPMCF, compare match Clear Flag

\ LPTIM1_IER (read-write) Reset:0x00000000
: LPTIM1_IER_DOWNIE ( -- x addr ) 6 bit LPTIM1_IER ; \ LPTIM1_IER_DOWNIE, Direction change to down Interrupt Enable
: LPTIM1_IER_UPIE ( -- x addr ) 5 bit LPTIM1_IER ; \ LPTIM1_IER_UPIE, Direction change to UP Interrupt Enable
: LPTIM1_IER_ARROKIE ( -- x addr ) 4 bit LPTIM1_IER ; \ LPTIM1_IER_ARROKIE, Autoreload register update OK Interrupt Enable
: LPTIM1_IER_CMPOKIE ( -- x addr ) 3 bit LPTIM1_IER ; \ LPTIM1_IER_CMPOKIE, Compare register update OK Interrupt Enable
: LPTIM1_IER_EXTTRIGIE ( -- x addr ) 2 bit LPTIM1_IER ; \ LPTIM1_IER_EXTTRIGIE, External trigger valid edge Interrupt Enable
: LPTIM1_IER_ARRMIE ( -- x addr ) 1 bit LPTIM1_IER ; \ LPTIM1_IER_ARRMIE, Autoreload match Interrupt Enable
: LPTIM1_IER_CMPMIE ( -- x addr ) 0 bit LPTIM1_IER ; \ LPTIM1_IER_CMPMIE, Compare match Interrupt Enable

\ LPTIM1_CFGR (read-write) Reset:0x00000000
: LPTIM1_CFGR_ENC ( -- x addr ) 24 bit LPTIM1_CFGR ; \ LPTIM1_CFGR_ENC, Encoder mode enable
: LPTIM1_CFGR_COUNTMODE ( -- x addr ) 23 bit LPTIM1_CFGR ; \ LPTIM1_CFGR_COUNTMODE, counter mode enabled
: LPTIM1_CFGR_PRELOAD ( -- x addr ) 22 bit LPTIM1_CFGR ; \ LPTIM1_CFGR_PRELOAD, Registers update mode
: LPTIM1_CFGR_WAVPOL ( -- x addr ) 21 bit LPTIM1_CFGR ; \ LPTIM1_CFGR_WAVPOL, Waveform shape polarity
: LPTIM1_CFGR_WAVE ( -- x addr ) 20 bit LPTIM1_CFGR ; \ LPTIM1_CFGR_WAVE, Waveform shape
: LPTIM1_CFGR_TIMOUT ( -- x addr ) 19 bit LPTIM1_CFGR ; \ LPTIM1_CFGR_TIMOUT, Timeout enable
: LPTIM1_CFGR_TRIGEN ( %bb -- x addr ) 17 lshift LPTIM1_CFGR ; \ LPTIM1_CFGR_TRIGEN, Trigger enable and polarity
: LPTIM1_CFGR_TRIGSEL ( %bbb -- x addr ) 13 lshift LPTIM1_CFGR ; \ LPTIM1_CFGR_TRIGSEL, Trigger selector
: LPTIM1_CFGR_PRESC ( %bbb -- x addr ) 9 lshift LPTIM1_CFGR ; \ LPTIM1_CFGR_PRESC, Clock prescaler
: LPTIM1_CFGR_TRGFLT ( %bb -- x addr ) 6 lshift LPTIM1_CFGR ; \ LPTIM1_CFGR_TRGFLT, Configurable digital filter for trigger
: LPTIM1_CFGR_CKFLT ( %bb -- x addr ) 3 lshift LPTIM1_CFGR ; \ LPTIM1_CFGR_CKFLT, Configurable digital filter for external clock
: LPTIM1_CFGR_CKPOL ( %bb -- x addr ) 1 lshift LPTIM1_CFGR ; \ LPTIM1_CFGR_CKPOL, Clock Polarity
: LPTIM1_CFGR_CKSEL ( -- x addr ) 0 bit LPTIM1_CFGR ; \ LPTIM1_CFGR_CKSEL, Clock selector

\ LPTIM1_CR (read-write) Reset:0x00000000
: LPTIM1_CR_CNTSTRT ( -- x addr ) 2 bit LPTIM1_CR ; \ LPTIM1_CR_CNTSTRT, Timer start in continuous mode
: LPTIM1_CR_SNGSTRT ( -- x addr ) 1 bit LPTIM1_CR ; \ LPTIM1_CR_SNGSTRT, LPTIM start in single mode
: LPTIM1_CR_ENABLE ( -- x addr ) 0 bit LPTIM1_CR ; \ LPTIM1_CR_ENABLE, LPTIM Enable

\ LPTIM1_CMP (read-write) Reset:0x00000000
: LPTIM1_CMP_CMP ( %bbbbbbbbbbbbbbbb -- x addr ) LPTIM1_CMP ; \ LPTIM1_CMP_CMP, Compare value

\ LPTIM1_ARR (read-write) Reset:0x00000001
: LPTIM1_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) LPTIM1_ARR ; \ LPTIM1_ARR_ARR, Auto reload value

\ LPTIM1_CNT (read-only) Reset:0x00000000
: LPTIM1_CNT_CNT? ( --  x ) LPTIM1_CNT @ ; \ LPTIM1_CNT_CNT, Counter value

\ I2C1_CR1 (read-write) Reset:0x00000000
: I2C1_CR1_PE ( -- x addr ) 0 bit I2C1_CR1 ; \ I2C1_CR1_PE, Peripheral enable
: I2C1_CR1_TXIE ( -- x addr ) 1 bit I2C1_CR1 ; \ I2C1_CR1_TXIE, TX Interrupt enable
: I2C1_CR1_RXIE ( -- x addr ) 2 bit I2C1_CR1 ; \ I2C1_CR1_RXIE, RX Interrupt enable
: I2C1_CR1_ADDRIE ( -- x addr ) 3 bit I2C1_CR1 ; \ I2C1_CR1_ADDRIE, Address match interrupt enable slave only
: I2C1_CR1_NACKIE ( -- x addr ) 4 bit I2C1_CR1 ; \ I2C1_CR1_NACKIE, Not acknowledge received interrupt enable
: I2C1_CR1_STOPIE ( -- x addr ) 5 bit I2C1_CR1 ; \ I2C1_CR1_STOPIE, STOP detection Interrupt enable
: I2C1_CR1_TCIE ( -- x addr ) 6 bit I2C1_CR1 ; \ I2C1_CR1_TCIE, Transfer Complete interrupt enable
: I2C1_CR1_ERRIE ( -- x addr ) 7 bit I2C1_CR1 ; \ I2C1_CR1_ERRIE, Error interrupts enable
: I2C1_CR1_DNF ( %bbbb -- x addr ) 8 lshift I2C1_CR1 ; \ I2C1_CR1_DNF, Digital noise filter
: I2C1_CR1_ANFOFF ( -- x addr ) 12 bit I2C1_CR1 ; \ I2C1_CR1_ANFOFF, Analog noise filter OFF
: I2C1_CR1_TXDMAEN ( -- x addr ) 14 bit I2C1_CR1 ; \ I2C1_CR1_TXDMAEN, DMA transmission requests enable
: I2C1_CR1_RXDMAEN ( -- x addr ) 15 bit I2C1_CR1 ; \ I2C1_CR1_RXDMAEN, DMA reception requests enable
: I2C1_CR1_SBC ( -- x addr ) 16 bit I2C1_CR1 ; \ I2C1_CR1_SBC, Slave byte control
: I2C1_CR1_NOSTRETCH ( -- x addr ) 17 bit I2C1_CR1 ; \ I2C1_CR1_NOSTRETCH, Clock stretching disable
: I2C1_CR1_WUPEN ( -- x addr ) 18 bit I2C1_CR1 ; \ I2C1_CR1_WUPEN, Wakeup from STOP enable
: I2C1_CR1_GCEN ( -- x addr ) 19 bit I2C1_CR1 ; \ I2C1_CR1_GCEN, General call enable
: I2C1_CR1_SMBHEN ( -- x addr ) 20 bit I2C1_CR1 ; \ I2C1_CR1_SMBHEN, SMBus Host address enable
: I2C1_CR1_SMBDEN ( -- x addr ) 21 bit I2C1_CR1 ; \ I2C1_CR1_SMBDEN, SMBus Device Default address enable
: I2C1_CR1_ALERTEN ( -- x addr ) 22 bit I2C1_CR1 ; \ I2C1_CR1_ALERTEN, SMBUS alert enable
: I2C1_CR1_PECEN ( -- x addr ) 23 bit I2C1_CR1 ; \ I2C1_CR1_PECEN, PEC enable

\ I2C1_CR2 (read-write) Reset:0x00000000
: I2C1_CR2_PECBYTE ( -- x addr ) 26 bit I2C1_CR2 ; \ I2C1_CR2_PECBYTE, Packet error checking byte
: I2C1_CR2_AUTOEND ( -- x addr ) 25 bit I2C1_CR2 ; \ I2C1_CR2_AUTOEND, Automatic end mode master mode
: I2C1_CR2_RELOAD ( -- x addr ) 24 bit I2C1_CR2 ; \ I2C1_CR2_RELOAD, NBYTES reload mode
: I2C1_CR2_NBYTES ( %bbbbbbbb -- x addr ) 16 lshift I2C1_CR2 ; \ I2C1_CR2_NBYTES, Number of bytes
: I2C1_CR2_NACK ( -- x addr ) 15 bit I2C1_CR2 ; \ I2C1_CR2_NACK, NACK generation slave mode
: I2C1_CR2_STOP ( -- x addr ) 14 bit I2C1_CR2 ; \ I2C1_CR2_STOP, Stop generation master mode
: I2C1_CR2_START ( -- x addr ) 13 bit I2C1_CR2 ; \ I2C1_CR2_START, Start generation
: I2C1_CR2_HEAD10R ( -- x addr ) 12 bit I2C1_CR2 ; \ I2C1_CR2_HEAD10R, 10-bit address header only read direction master receiver mode
: I2C1_CR2_ADD10 ( -- x addr ) 11 bit I2C1_CR2 ; \ I2C1_CR2_ADD10, 10-bit addressing mode master mode
: I2C1_CR2_RD_WRN ( -- x addr ) 10 bit I2C1_CR2 ; \ I2C1_CR2_RD_WRN, Transfer direction master mode
: I2C1_CR2_SADD ( %bbbbbbbbbb -- x addr ) I2C1_CR2 ; \ I2C1_CR2_SADD, Slave address bit master mode

\ I2C1_OAR1 (read-write) Reset:0x00000000
: I2C1_OAR1_OA1 ( %bbbbbbbbbb -- x addr ) I2C1_OAR1 ; \ I2C1_OAR1_OA1, Interface address
: I2C1_OAR1_OA1MODE ( -- x addr ) 10 bit I2C1_OAR1 ; \ I2C1_OAR1_OA1MODE, Own Address 1 10-bit mode
: I2C1_OAR1_OA1EN ( -- x addr ) 15 bit I2C1_OAR1 ; \ I2C1_OAR1_OA1EN, Own Address 1 enable

\ I2C1_OAR2 (read-write) Reset:0x00000000
: I2C1_OAR2_OA2 ( %bbbbbbb -- x addr ) 1 lshift I2C1_OAR2 ; \ I2C1_OAR2_OA2, Interface address
: I2C1_OAR2_OA2MSK ( %bbb -- x addr ) 8 lshift I2C1_OAR2 ; \ I2C1_OAR2_OA2MSK, Own Address 2 masks
: I2C1_OAR2_OA2EN ( -- x addr ) 15 bit I2C1_OAR2 ; \ I2C1_OAR2_OA2EN, Own Address 2 enable

\ I2C1_TIMINGR (read-write) Reset:0x00000000
: I2C1_TIMINGR_SCLL ( %bbbbbbbb -- x addr ) I2C1_TIMINGR ; \ I2C1_TIMINGR_SCLL, SCL low period master mode
: I2C1_TIMINGR_SCLH ( %bbbbbbbb -- x addr ) 8 lshift I2C1_TIMINGR ; \ I2C1_TIMINGR_SCLH, SCL high period master mode
: I2C1_TIMINGR_SDADEL ( %bbbb -- x addr ) 16 lshift I2C1_TIMINGR ; \ I2C1_TIMINGR_SDADEL, Data hold time
: I2C1_TIMINGR_SCLDEL ( %bbbb -- x addr ) 20 lshift I2C1_TIMINGR ; \ I2C1_TIMINGR_SCLDEL, Data setup time
: I2C1_TIMINGR_PRESC ( %bbbb -- x addr ) 28 lshift I2C1_TIMINGR ; \ I2C1_TIMINGR_PRESC, Timing prescaler

\ I2C1_TIMEOUTR (read-write) Reset:0x00000000
: I2C1_TIMEOUTR_TIMEOUTA ( %bbbbbbbbbbb -- x addr ) I2C1_TIMEOUTR ; \ I2C1_TIMEOUTR_TIMEOUTA, Bus timeout A
: I2C1_TIMEOUTR_TIDLE ( -- x addr ) 12 bit I2C1_TIMEOUTR ; \ I2C1_TIMEOUTR_TIDLE, Idle clock timeout detection
: I2C1_TIMEOUTR_TIMOUTEN ( -- x addr ) 15 bit I2C1_TIMEOUTR ; \ I2C1_TIMEOUTR_TIMOUTEN, Clock timeout enable
: I2C1_TIMEOUTR_TIMEOUTB ( %bbbbbbbbbbb -- x addr ) 16 lshift I2C1_TIMEOUTR ; \ I2C1_TIMEOUTR_TIMEOUTB, Bus timeout B
: I2C1_TIMEOUTR_TEXTEN ( -- x addr ) 31 bit I2C1_TIMEOUTR ; \ I2C1_TIMEOUTR_TEXTEN, Extended clock timeout enable

\ I2C1_ISR (multiple-access)  Reset:0x00000001
: I2C1_ISR_ADDCODE ( %bbbbbbb -- x addr ) 17 lshift I2C1_ISR ; \ I2C1_ISR_ADDCODE, Address match code Slave mode
: I2C1_ISR_DIR ( -- x addr ) 16 bit I2C1_ISR ; \ I2C1_ISR_DIR, Transfer direction Slave mode
: I2C1_ISR_BUSY ( -- x addr ) 15 bit I2C1_ISR ; \ I2C1_ISR_BUSY, Bus busy
: I2C1_ISR_ALERT ( -- x addr ) 13 bit I2C1_ISR ; \ I2C1_ISR_ALERT, SMBus alert
: I2C1_ISR_TIMEOUT? ( -- 1|0 ) 12 bit I2C1_ISR bit@ ; \ I2C1_ISR_TIMEOUT, Timeout or t_low detection flag
: I2C1_ISR_PECERR ( -- x addr ) 11 bit I2C1_ISR ; \ I2C1_ISR_PECERR, PEC Error in reception
: I2C1_ISR_OVR ( -- x addr ) 10 bit I2C1_ISR ; \ I2C1_ISR_OVR, Overrun/Underrun slave mode
: I2C1_ISR_ARLO ( -- x addr ) 9 bit I2C1_ISR ; \ I2C1_ISR_ARLO, Arbitration lost
: I2C1_ISR_BERR ( -- x addr ) 8 bit I2C1_ISR ; \ I2C1_ISR_BERR, Bus error
: I2C1_ISR_TCR ( -- x addr ) 7 bit I2C1_ISR ; \ I2C1_ISR_TCR, Transfer Complete Reload
: I2C1_ISR_TC ( -- x addr ) 6 bit I2C1_ISR ; \ I2C1_ISR_TC, Transfer Complete master mode
: I2C1_ISR_STOPF? ( -- 1|0 ) 5 bit I2C1_ISR bit@ ; \ I2C1_ISR_STOPF, Stop detection flag
: I2C1_ISR_NACKF? ( -- 1|0 ) 4 bit I2C1_ISR bit@ ; \ I2C1_ISR_NACKF, Not acknowledge received flag
: I2C1_ISR_ADDR ( -- x addr ) 3 bit I2C1_ISR ; \ I2C1_ISR_ADDR, Address matched slave mode
: I2C1_ISR_RXNE ( -- x addr ) 2 bit I2C1_ISR ; \ I2C1_ISR_RXNE, Receive data register not empty receivers
: I2C1_ISR_TXIS? ( -- 1|0 ) 1 bit I2C1_ISR bit@ ; \ I2C1_ISR_TXIS, Transmit interrupt status transmitters
: I2C1_ISR_TXE ( -- x addr ) 0 bit I2C1_ISR ; \ I2C1_ISR_TXE, Transmit data register empty transmitters

\ I2C1_ICR (write-only) Reset:0x00000000
: I2C1_ICR_ALERTCF ( -- x addr ) 13 bit I2C1_ICR ; \ I2C1_ICR_ALERTCF, Alert flag clear
: I2C1_ICR_TIMOUTCF ( -- x addr ) 12 bit I2C1_ICR ; \ I2C1_ICR_TIMOUTCF, Timeout detection flag clear
: I2C1_ICR_PECCF ( -- x addr ) 11 bit I2C1_ICR ; \ I2C1_ICR_PECCF, PEC Error flag clear
: I2C1_ICR_OVRCF ( -- x addr ) 10 bit I2C1_ICR ; \ I2C1_ICR_OVRCF, Overrun/Underrun flag clear
: I2C1_ICR_ARLOCF ( -- x addr ) 9 bit I2C1_ICR ; \ I2C1_ICR_ARLOCF, Arbitration lost flag clear
: I2C1_ICR_BERRCF ( -- x addr ) 8 bit I2C1_ICR ; \ I2C1_ICR_BERRCF, Bus error flag clear
: I2C1_ICR_STOPCF ( -- x addr ) 5 bit I2C1_ICR ; \ I2C1_ICR_STOPCF, Stop detection flag clear
: I2C1_ICR_NACKCF ( -- x addr ) 4 bit I2C1_ICR ; \ I2C1_ICR_NACKCF, Not Acknowledge flag clear
: I2C1_ICR_ADDRCF ( -- x addr ) 3 bit I2C1_ICR ; \ I2C1_ICR_ADDRCF, Address Matched flag clear

\ I2C1_PECR (read-only) Reset:0x00000000
: I2C1_PECR_PEC? ( --  x ) I2C1_PECR @ ; \ I2C1_PECR_PEC, Packet error checking register

\ I2C1_RXDR (read-only) Reset:0x00000000
: I2C1_RXDR_RXDATA? ( --  x ) I2C1_RXDR @ ; \ I2C1_RXDR_RXDATA, 8-bit receive data

\ I2C1_TXDR (read-write) Reset:0x00000000
: I2C1_TXDR_TXDATA ( %bbbbbbbb -- x addr ) I2C1_TXDR ; \ I2C1_TXDR_TXDATA, 8-bit transmit data

\ I2C2_CR1 (read-write) Reset:0x00000000
: I2C2_CR1_PE ( -- x addr ) 0 bit I2C2_CR1 ; \ I2C2_CR1_PE, Peripheral enable
: I2C2_CR1_TXIE ( -- x addr ) 1 bit I2C2_CR1 ; \ I2C2_CR1_TXIE, TX Interrupt enable
: I2C2_CR1_RXIE ( -- x addr ) 2 bit I2C2_CR1 ; \ I2C2_CR1_RXIE, RX Interrupt enable
: I2C2_CR1_ADDRIE ( -- x addr ) 3 bit I2C2_CR1 ; \ I2C2_CR1_ADDRIE, Address match interrupt enable slave only
: I2C2_CR1_NACKIE ( -- x addr ) 4 bit I2C2_CR1 ; \ I2C2_CR1_NACKIE, Not acknowledge received interrupt enable
: I2C2_CR1_STOPIE ( -- x addr ) 5 bit I2C2_CR1 ; \ I2C2_CR1_STOPIE, STOP detection Interrupt enable
: I2C2_CR1_TCIE ( -- x addr ) 6 bit I2C2_CR1 ; \ I2C2_CR1_TCIE, Transfer Complete interrupt enable
: I2C2_CR1_ERRIE ( -- x addr ) 7 bit I2C2_CR1 ; \ I2C2_CR1_ERRIE, Error interrupts enable
: I2C2_CR1_DNF ( %bbbb -- x addr ) 8 lshift I2C2_CR1 ; \ I2C2_CR1_DNF, Digital noise filter
: I2C2_CR1_ANFOFF ( -- x addr ) 12 bit I2C2_CR1 ; \ I2C2_CR1_ANFOFF, Analog noise filter OFF
: I2C2_CR1_TXDMAEN ( -- x addr ) 14 bit I2C2_CR1 ; \ I2C2_CR1_TXDMAEN, DMA transmission requests enable
: I2C2_CR1_RXDMAEN ( -- x addr ) 15 bit I2C2_CR1 ; \ I2C2_CR1_RXDMAEN, DMA reception requests enable
: I2C2_CR1_SBC ( -- x addr ) 16 bit I2C2_CR1 ; \ I2C2_CR1_SBC, Slave byte control
: I2C2_CR1_NOSTRETCH ( -- x addr ) 17 bit I2C2_CR1 ; \ I2C2_CR1_NOSTRETCH, Clock stretching disable
: I2C2_CR1_WUPEN ( -- x addr ) 18 bit I2C2_CR1 ; \ I2C2_CR1_WUPEN, Wakeup from STOP enable
: I2C2_CR1_GCEN ( -- x addr ) 19 bit I2C2_CR1 ; \ I2C2_CR1_GCEN, General call enable
: I2C2_CR1_SMBHEN ( -- x addr ) 20 bit I2C2_CR1 ; \ I2C2_CR1_SMBHEN, SMBus Host address enable
: I2C2_CR1_SMBDEN ( -- x addr ) 21 bit I2C2_CR1 ; \ I2C2_CR1_SMBDEN, SMBus Device Default address enable
: I2C2_CR1_ALERTEN ( -- x addr ) 22 bit I2C2_CR1 ; \ I2C2_CR1_ALERTEN, SMBUS alert enable
: I2C2_CR1_PECEN ( -- x addr ) 23 bit I2C2_CR1 ; \ I2C2_CR1_PECEN, PEC enable

\ I2C2_CR2 (read-write) Reset:0x00000000
: I2C2_CR2_PECBYTE ( -- x addr ) 26 bit I2C2_CR2 ; \ I2C2_CR2_PECBYTE, Packet error checking byte
: I2C2_CR2_AUTOEND ( -- x addr ) 25 bit I2C2_CR2 ; \ I2C2_CR2_AUTOEND, Automatic end mode master mode
: I2C2_CR2_RELOAD ( -- x addr ) 24 bit I2C2_CR2 ; \ I2C2_CR2_RELOAD, NBYTES reload mode
: I2C2_CR2_NBYTES ( %bbbbbbbb -- x addr ) 16 lshift I2C2_CR2 ; \ I2C2_CR2_NBYTES, Number of bytes
: I2C2_CR2_NACK ( -- x addr ) 15 bit I2C2_CR2 ; \ I2C2_CR2_NACK, NACK generation slave mode
: I2C2_CR2_STOP ( -- x addr ) 14 bit I2C2_CR2 ; \ I2C2_CR2_STOP, Stop generation master mode
: I2C2_CR2_START ( -- x addr ) 13 bit I2C2_CR2 ; \ I2C2_CR2_START, Start generation
: I2C2_CR2_HEAD10R ( -- x addr ) 12 bit I2C2_CR2 ; \ I2C2_CR2_HEAD10R, 10-bit address header only read direction master receiver mode
: I2C2_CR2_ADD10 ( -- x addr ) 11 bit I2C2_CR2 ; \ I2C2_CR2_ADD10, 10-bit addressing mode master mode
: I2C2_CR2_RD_WRN ( -- x addr ) 10 bit I2C2_CR2 ; \ I2C2_CR2_RD_WRN, Transfer direction master mode
: I2C2_CR2_SADD ( %bbbbbbbbbb -- x addr ) I2C2_CR2 ; \ I2C2_CR2_SADD, Slave address bit master mode

\ I2C2_OAR1 (read-write) Reset:0x00000000
: I2C2_OAR1_OA1 ( %bbbbbbbbbb -- x addr ) I2C2_OAR1 ; \ I2C2_OAR1_OA1, Interface address
: I2C2_OAR1_OA1MODE ( -- x addr ) 10 bit I2C2_OAR1 ; \ I2C2_OAR1_OA1MODE, Own Address 1 10-bit mode
: I2C2_OAR1_OA1EN ( -- x addr ) 15 bit I2C2_OAR1 ; \ I2C2_OAR1_OA1EN, Own Address 1 enable

\ I2C2_OAR2 (read-write) Reset:0x00000000
: I2C2_OAR2_OA2 ( %bbbbbbb -- x addr ) 1 lshift I2C2_OAR2 ; \ I2C2_OAR2_OA2, Interface address
: I2C2_OAR2_OA2MSK ( %bbb -- x addr ) 8 lshift I2C2_OAR2 ; \ I2C2_OAR2_OA2MSK, Own Address 2 masks
: I2C2_OAR2_OA2EN ( -- x addr ) 15 bit I2C2_OAR2 ; \ I2C2_OAR2_OA2EN, Own Address 2 enable

\ I2C2_TIMINGR (read-write) Reset:0x00000000
: I2C2_TIMINGR_SCLL ( %bbbbbbbb -- x addr ) I2C2_TIMINGR ; \ I2C2_TIMINGR_SCLL, SCL low period master mode
: I2C2_TIMINGR_SCLH ( %bbbbbbbb -- x addr ) 8 lshift I2C2_TIMINGR ; \ I2C2_TIMINGR_SCLH, SCL high period master mode
: I2C2_TIMINGR_SDADEL ( %bbbb -- x addr ) 16 lshift I2C2_TIMINGR ; \ I2C2_TIMINGR_SDADEL, Data hold time
: I2C2_TIMINGR_SCLDEL ( %bbbb -- x addr ) 20 lshift I2C2_TIMINGR ; \ I2C2_TIMINGR_SCLDEL, Data setup time
: I2C2_TIMINGR_PRESC ( %bbbb -- x addr ) 28 lshift I2C2_TIMINGR ; \ I2C2_TIMINGR_PRESC, Timing prescaler

\ I2C2_TIMEOUTR (read-write) Reset:0x00000000
: I2C2_TIMEOUTR_TIMEOUTA ( %bbbbbbbbbbb -- x addr ) I2C2_TIMEOUTR ; \ I2C2_TIMEOUTR_TIMEOUTA, Bus timeout A
: I2C2_TIMEOUTR_TIDLE ( -- x addr ) 12 bit I2C2_TIMEOUTR ; \ I2C2_TIMEOUTR_TIDLE, Idle clock timeout detection
: I2C2_TIMEOUTR_TIMOUTEN ( -- x addr ) 15 bit I2C2_TIMEOUTR ; \ I2C2_TIMEOUTR_TIMOUTEN, Clock timeout enable
: I2C2_TIMEOUTR_TIMEOUTB ( %bbbbbbbbbbb -- x addr ) 16 lshift I2C2_TIMEOUTR ; \ I2C2_TIMEOUTR_TIMEOUTB, Bus timeout B
: I2C2_TIMEOUTR_TEXTEN ( -- x addr ) 31 bit I2C2_TIMEOUTR ; \ I2C2_TIMEOUTR_TEXTEN, Extended clock timeout enable

\ I2C2_ISR (multiple-access)  Reset:0x00000001
: I2C2_ISR_ADDCODE ( %bbbbbbb -- x addr ) 17 lshift I2C2_ISR ; \ I2C2_ISR_ADDCODE, Address match code Slave mode
: I2C2_ISR_DIR ( -- x addr ) 16 bit I2C2_ISR ; \ I2C2_ISR_DIR, Transfer direction Slave mode
: I2C2_ISR_BUSY ( -- x addr ) 15 bit I2C2_ISR ; \ I2C2_ISR_BUSY, Bus busy
: I2C2_ISR_ALERT ( -- x addr ) 13 bit I2C2_ISR ; \ I2C2_ISR_ALERT, SMBus alert
: I2C2_ISR_TIMEOUT? ( -- 1|0 ) 12 bit I2C2_ISR bit@ ; \ I2C2_ISR_TIMEOUT, Timeout or t_low detection flag
: I2C2_ISR_PECERR ( -- x addr ) 11 bit I2C2_ISR ; \ I2C2_ISR_PECERR, PEC Error in reception
: I2C2_ISR_OVR ( -- x addr ) 10 bit I2C2_ISR ; \ I2C2_ISR_OVR, Overrun/Underrun slave mode
: I2C2_ISR_ARLO ( -- x addr ) 9 bit I2C2_ISR ; \ I2C2_ISR_ARLO, Arbitration lost
: I2C2_ISR_BERR ( -- x addr ) 8 bit I2C2_ISR ; \ I2C2_ISR_BERR, Bus error
: I2C2_ISR_TCR ( -- x addr ) 7 bit I2C2_ISR ; \ I2C2_ISR_TCR, Transfer Complete Reload
: I2C2_ISR_TC ( -- x addr ) 6 bit I2C2_ISR ; \ I2C2_ISR_TC, Transfer Complete master mode
: I2C2_ISR_STOPF? ( -- 1|0 ) 5 bit I2C2_ISR bit@ ; \ I2C2_ISR_STOPF, Stop detection flag
: I2C2_ISR_NACKF? ( -- 1|0 ) 4 bit I2C2_ISR bit@ ; \ I2C2_ISR_NACKF, Not acknowledge received flag
: I2C2_ISR_ADDR ( -- x addr ) 3 bit I2C2_ISR ; \ I2C2_ISR_ADDR, Address matched slave mode
: I2C2_ISR_RXNE ( -- x addr ) 2 bit I2C2_ISR ; \ I2C2_ISR_RXNE, Receive data register not empty receivers
: I2C2_ISR_TXIS? ( -- 1|0 ) 1 bit I2C2_ISR bit@ ; \ I2C2_ISR_TXIS, Transmit interrupt status transmitters
: I2C2_ISR_TXE ( -- x addr ) 0 bit I2C2_ISR ; \ I2C2_ISR_TXE, Transmit data register empty transmitters

\ I2C2_ICR (write-only) Reset:0x00000000
: I2C2_ICR_ALERTCF ( -- x addr ) 13 bit I2C2_ICR ; \ I2C2_ICR_ALERTCF, Alert flag clear
: I2C2_ICR_TIMOUTCF ( -- x addr ) 12 bit I2C2_ICR ; \ I2C2_ICR_TIMOUTCF, Timeout detection flag clear
: I2C2_ICR_PECCF ( -- x addr ) 11 bit I2C2_ICR ; \ I2C2_ICR_PECCF, PEC Error flag clear
: I2C2_ICR_OVRCF ( -- x addr ) 10 bit I2C2_ICR ; \ I2C2_ICR_OVRCF, Overrun/Underrun flag clear
: I2C2_ICR_ARLOCF ( -- x addr ) 9 bit I2C2_ICR ; \ I2C2_ICR_ARLOCF, Arbitration lost flag clear
: I2C2_ICR_BERRCF ( -- x addr ) 8 bit I2C2_ICR ; \ I2C2_ICR_BERRCF, Bus error flag clear
: I2C2_ICR_STOPCF ( -- x addr ) 5 bit I2C2_ICR ; \ I2C2_ICR_STOPCF, Stop detection flag clear
: I2C2_ICR_NACKCF ( -- x addr ) 4 bit I2C2_ICR ; \ I2C2_ICR_NACKCF, Not Acknowledge flag clear
: I2C2_ICR_ADDRCF ( -- x addr ) 3 bit I2C2_ICR ; \ I2C2_ICR_ADDRCF, Address Matched flag clear

\ I2C2_PECR (read-only) Reset:0x00000000
: I2C2_PECR_PEC? ( --  x ) I2C2_PECR @ ; \ I2C2_PECR_PEC, Packet error checking register

\ I2C2_RXDR (read-only) Reset:0x00000000
: I2C2_RXDR_RXDATA? ( --  x ) I2C2_RXDR @ ; \ I2C2_RXDR_RXDATA, 8-bit receive data

\ I2C2_TXDR (read-write) Reset:0x00000000
: I2C2_TXDR_TXDATA ( %bbbbbbbb -- x addr ) I2C2_TXDR ; \ I2C2_TXDR_TXDATA, 8-bit transmit data

\ I2C3_CR1 (read-write) Reset:0x00000000
: I2C3_CR1_PE ( -- x addr ) 0 bit I2C3_CR1 ; \ I2C3_CR1_PE, Peripheral enable
: I2C3_CR1_TXIE ( -- x addr ) 1 bit I2C3_CR1 ; \ I2C3_CR1_TXIE, TX Interrupt enable
: I2C3_CR1_RXIE ( -- x addr ) 2 bit I2C3_CR1 ; \ I2C3_CR1_RXIE, RX Interrupt enable
: I2C3_CR1_ADDRIE ( -- x addr ) 3 bit I2C3_CR1 ; \ I2C3_CR1_ADDRIE, Address match interrupt enable slave only
: I2C3_CR1_NACKIE ( -- x addr ) 4 bit I2C3_CR1 ; \ I2C3_CR1_NACKIE, Not acknowledge received interrupt enable
: I2C3_CR1_STOPIE ( -- x addr ) 5 bit I2C3_CR1 ; \ I2C3_CR1_STOPIE, STOP detection Interrupt enable
: I2C3_CR1_TCIE ( -- x addr ) 6 bit I2C3_CR1 ; \ I2C3_CR1_TCIE, Transfer Complete interrupt enable
: I2C3_CR1_ERRIE ( -- x addr ) 7 bit I2C3_CR1 ; \ I2C3_CR1_ERRIE, Error interrupts enable
: I2C3_CR1_DNF ( %bbbb -- x addr ) 8 lshift I2C3_CR1 ; \ I2C3_CR1_DNF, Digital noise filter
: I2C3_CR1_ANFOFF ( -- x addr ) 12 bit I2C3_CR1 ; \ I2C3_CR1_ANFOFF, Analog noise filter OFF
: I2C3_CR1_TXDMAEN ( -- x addr ) 14 bit I2C3_CR1 ; \ I2C3_CR1_TXDMAEN, DMA transmission requests enable
: I2C3_CR1_RXDMAEN ( -- x addr ) 15 bit I2C3_CR1 ; \ I2C3_CR1_RXDMAEN, DMA reception requests enable
: I2C3_CR1_SBC ( -- x addr ) 16 bit I2C3_CR1 ; \ I2C3_CR1_SBC, Slave byte control
: I2C3_CR1_NOSTRETCH ( -- x addr ) 17 bit I2C3_CR1 ; \ I2C3_CR1_NOSTRETCH, Clock stretching disable
: I2C3_CR1_WUPEN ( -- x addr ) 18 bit I2C3_CR1 ; \ I2C3_CR1_WUPEN, Wakeup from STOP enable
: I2C3_CR1_GCEN ( -- x addr ) 19 bit I2C3_CR1 ; \ I2C3_CR1_GCEN, General call enable
: I2C3_CR1_SMBHEN ( -- x addr ) 20 bit I2C3_CR1 ; \ I2C3_CR1_SMBHEN, SMBus Host address enable
: I2C3_CR1_SMBDEN ( -- x addr ) 21 bit I2C3_CR1 ; \ I2C3_CR1_SMBDEN, SMBus Device Default address enable
: I2C3_CR1_ALERTEN ( -- x addr ) 22 bit I2C3_CR1 ; \ I2C3_CR1_ALERTEN, SMBUS alert enable
: I2C3_CR1_PECEN ( -- x addr ) 23 bit I2C3_CR1 ; \ I2C3_CR1_PECEN, PEC enable

\ I2C3_CR2 (read-write) Reset:0x00000000
: I2C3_CR2_PECBYTE ( -- x addr ) 26 bit I2C3_CR2 ; \ I2C3_CR2_PECBYTE, Packet error checking byte
: I2C3_CR2_AUTOEND ( -- x addr ) 25 bit I2C3_CR2 ; \ I2C3_CR2_AUTOEND, Automatic end mode master mode
: I2C3_CR2_RELOAD ( -- x addr ) 24 bit I2C3_CR2 ; \ I2C3_CR2_RELOAD, NBYTES reload mode
: I2C3_CR2_NBYTES ( %bbbbbbbb -- x addr ) 16 lshift I2C3_CR2 ; \ I2C3_CR2_NBYTES, Number of bytes
: I2C3_CR2_NACK ( -- x addr ) 15 bit I2C3_CR2 ; \ I2C3_CR2_NACK, NACK generation slave mode
: I2C3_CR2_STOP ( -- x addr ) 14 bit I2C3_CR2 ; \ I2C3_CR2_STOP, Stop generation master mode
: I2C3_CR2_START ( -- x addr ) 13 bit I2C3_CR2 ; \ I2C3_CR2_START, Start generation
: I2C3_CR2_HEAD10R ( -- x addr ) 12 bit I2C3_CR2 ; \ I2C3_CR2_HEAD10R, 10-bit address header only read direction master receiver mode
: I2C3_CR2_ADD10 ( -- x addr ) 11 bit I2C3_CR2 ; \ I2C3_CR2_ADD10, 10-bit addressing mode master mode
: I2C3_CR2_RD_WRN ( -- x addr ) 10 bit I2C3_CR2 ; \ I2C3_CR2_RD_WRN, Transfer direction master mode
: I2C3_CR2_SADD ( %bbbbbbbbbb -- x addr ) I2C3_CR2 ; \ I2C3_CR2_SADD, Slave address bit master mode

\ I2C3_OAR1 (read-write) Reset:0x00000000
: I2C3_OAR1_OA1 ( %bbbbbbbbbb -- x addr ) I2C3_OAR1 ; \ I2C3_OAR1_OA1, Interface address
: I2C3_OAR1_OA1MODE ( -- x addr ) 10 bit I2C3_OAR1 ; \ I2C3_OAR1_OA1MODE, Own Address 1 10-bit mode
: I2C3_OAR1_OA1EN ( -- x addr ) 15 bit I2C3_OAR1 ; \ I2C3_OAR1_OA1EN, Own Address 1 enable

\ I2C3_OAR2 (read-write) Reset:0x00000000
: I2C3_OAR2_OA2 ( %bbbbbbb -- x addr ) 1 lshift I2C3_OAR2 ; \ I2C3_OAR2_OA2, Interface address
: I2C3_OAR2_OA2MSK ( %bbb -- x addr ) 8 lshift I2C3_OAR2 ; \ I2C3_OAR2_OA2MSK, Own Address 2 masks
: I2C3_OAR2_OA2EN ( -- x addr ) 15 bit I2C3_OAR2 ; \ I2C3_OAR2_OA2EN, Own Address 2 enable

\ I2C3_TIMINGR (read-write) Reset:0x00000000
: I2C3_TIMINGR_SCLL ( %bbbbbbbb -- x addr ) I2C3_TIMINGR ; \ I2C3_TIMINGR_SCLL, SCL low period master mode
: I2C3_TIMINGR_SCLH ( %bbbbbbbb -- x addr ) 8 lshift I2C3_TIMINGR ; \ I2C3_TIMINGR_SCLH, SCL high period master mode
: I2C3_TIMINGR_SDADEL ( %bbbb -- x addr ) 16 lshift I2C3_TIMINGR ; \ I2C3_TIMINGR_SDADEL, Data hold time
: I2C3_TIMINGR_SCLDEL ( %bbbb -- x addr ) 20 lshift I2C3_TIMINGR ; \ I2C3_TIMINGR_SCLDEL, Data setup time
: I2C3_TIMINGR_PRESC ( %bbbb -- x addr ) 28 lshift I2C3_TIMINGR ; \ I2C3_TIMINGR_PRESC, Timing prescaler

\ I2C3_TIMEOUTR (read-write) Reset:0x00000000
: I2C3_TIMEOUTR_TIMEOUTA ( %bbbbbbbbbbb -- x addr ) I2C3_TIMEOUTR ; \ I2C3_TIMEOUTR_TIMEOUTA, Bus timeout A
: I2C3_TIMEOUTR_TIDLE ( -- x addr ) 12 bit I2C3_TIMEOUTR ; \ I2C3_TIMEOUTR_TIDLE, Idle clock timeout detection
: I2C3_TIMEOUTR_TIMOUTEN ( -- x addr ) 15 bit I2C3_TIMEOUTR ; \ I2C3_TIMEOUTR_TIMOUTEN, Clock timeout enable
: I2C3_TIMEOUTR_TIMEOUTB ( %bbbbbbbbbbb -- x addr ) 16 lshift I2C3_TIMEOUTR ; \ I2C3_TIMEOUTR_TIMEOUTB, Bus timeout B
: I2C3_TIMEOUTR_TEXTEN ( -- x addr ) 31 bit I2C3_TIMEOUTR ; \ I2C3_TIMEOUTR_TEXTEN, Extended clock timeout enable

\ I2C3_ISR (multiple-access)  Reset:0x00000001
: I2C3_ISR_ADDCODE ( %bbbbbbb -- x addr ) 17 lshift I2C3_ISR ; \ I2C3_ISR_ADDCODE, Address match code Slave mode
: I2C3_ISR_DIR ( -- x addr ) 16 bit I2C3_ISR ; \ I2C3_ISR_DIR, Transfer direction Slave mode
: I2C3_ISR_BUSY ( -- x addr ) 15 bit I2C3_ISR ; \ I2C3_ISR_BUSY, Bus busy
: I2C3_ISR_ALERT ( -- x addr ) 13 bit I2C3_ISR ; \ I2C3_ISR_ALERT, SMBus alert
: I2C3_ISR_TIMEOUT? ( -- 1|0 ) 12 bit I2C3_ISR bit@ ; \ I2C3_ISR_TIMEOUT, Timeout or t_low detection flag
: I2C3_ISR_PECERR ( -- x addr ) 11 bit I2C3_ISR ; \ I2C3_ISR_PECERR, PEC Error in reception
: I2C3_ISR_OVR ( -- x addr ) 10 bit I2C3_ISR ; \ I2C3_ISR_OVR, Overrun/Underrun slave mode
: I2C3_ISR_ARLO ( -- x addr ) 9 bit I2C3_ISR ; \ I2C3_ISR_ARLO, Arbitration lost
: I2C3_ISR_BERR ( -- x addr ) 8 bit I2C3_ISR ; \ I2C3_ISR_BERR, Bus error
: I2C3_ISR_TCR ( -- x addr ) 7 bit I2C3_ISR ; \ I2C3_ISR_TCR, Transfer Complete Reload
: I2C3_ISR_TC ( -- x addr ) 6 bit I2C3_ISR ; \ I2C3_ISR_TC, Transfer Complete master mode
: I2C3_ISR_STOPF? ( -- 1|0 ) 5 bit I2C3_ISR bit@ ; \ I2C3_ISR_STOPF, Stop detection flag
: I2C3_ISR_NACKF? ( -- 1|0 ) 4 bit I2C3_ISR bit@ ; \ I2C3_ISR_NACKF, Not acknowledge received flag
: I2C3_ISR_ADDR ( -- x addr ) 3 bit I2C3_ISR ; \ I2C3_ISR_ADDR, Address matched slave mode
: I2C3_ISR_RXNE ( -- x addr ) 2 bit I2C3_ISR ; \ I2C3_ISR_RXNE, Receive data register not empty receivers
: I2C3_ISR_TXIS? ( -- 1|0 ) 1 bit I2C3_ISR bit@ ; \ I2C3_ISR_TXIS, Transmit interrupt status transmitters
: I2C3_ISR_TXE ( -- x addr ) 0 bit I2C3_ISR ; \ I2C3_ISR_TXE, Transmit data register empty transmitters

\ I2C3_ICR (write-only) Reset:0x00000000
: I2C3_ICR_ALERTCF ( -- x addr ) 13 bit I2C3_ICR ; \ I2C3_ICR_ALERTCF, Alert flag clear
: I2C3_ICR_TIMOUTCF ( -- x addr ) 12 bit I2C3_ICR ; \ I2C3_ICR_TIMOUTCF, Timeout detection flag clear
: I2C3_ICR_PECCF ( -- x addr ) 11 bit I2C3_ICR ; \ I2C3_ICR_PECCF, PEC Error flag clear
: I2C3_ICR_OVRCF ( -- x addr ) 10 bit I2C3_ICR ; \ I2C3_ICR_OVRCF, Overrun/Underrun flag clear
: I2C3_ICR_ARLOCF ( -- x addr ) 9 bit I2C3_ICR ; \ I2C3_ICR_ARLOCF, Arbitration lost flag clear
: I2C3_ICR_BERRCF ( -- x addr ) 8 bit I2C3_ICR ; \ I2C3_ICR_BERRCF, Bus error flag clear
: I2C3_ICR_STOPCF ( -- x addr ) 5 bit I2C3_ICR ; \ I2C3_ICR_STOPCF, Stop detection flag clear
: I2C3_ICR_NACKCF ( -- x addr ) 4 bit I2C3_ICR ; \ I2C3_ICR_NACKCF, Not Acknowledge flag clear
: I2C3_ICR_ADDRCF ( -- x addr ) 3 bit I2C3_ICR ; \ I2C3_ICR_ADDRCF, Address Matched flag clear

\ I2C3_PECR (read-only) Reset:0x00000000
: I2C3_PECR_PEC? ( --  x ) I2C3_PECR @ ; \ I2C3_PECR_PEC, Packet error checking register

\ I2C3_RXDR (read-only) Reset:0x00000000
: I2C3_RXDR_RXDATA? ( --  x ) I2C3_RXDR @ ; \ I2C3_RXDR_RXDATA, 8-bit receive data

\ I2C3_TXDR (read-write) Reset:0x00000000
: I2C3_TXDR_TXDATA ( %bbbbbbbb -- x addr ) I2C3_TXDR ; \ I2C3_TXDR_TXDATA, 8-bit transmit data

\ I2C4_CR1 (read-write) Reset:0x00000000
: I2C4_CR1_PE ( -- x addr ) 0 bit I2C4_CR1 ; \ I2C4_CR1_PE, Peripheral enable
: I2C4_CR1_TXIE ( -- x addr ) 1 bit I2C4_CR1 ; \ I2C4_CR1_TXIE, TX Interrupt enable
: I2C4_CR1_RXIE ( -- x addr ) 2 bit I2C4_CR1 ; \ I2C4_CR1_RXIE, RX Interrupt enable
: I2C4_CR1_ADDRIE ( -- x addr ) 3 bit I2C4_CR1 ; \ I2C4_CR1_ADDRIE, Address match interrupt enable slave only
: I2C4_CR1_NACKIE ( -- x addr ) 4 bit I2C4_CR1 ; \ I2C4_CR1_NACKIE, Not acknowledge received interrupt enable
: I2C4_CR1_STOPIE ( -- x addr ) 5 bit I2C4_CR1 ; \ I2C4_CR1_STOPIE, STOP detection Interrupt enable
: I2C4_CR1_TCIE ( -- x addr ) 6 bit I2C4_CR1 ; \ I2C4_CR1_TCIE, Transfer Complete interrupt enable
: I2C4_CR1_ERRIE ( -- x addr ) 7 bit I2C4_CR1 ; \ I2C4_CR1_ERRIE, Error interrupts enable
: I2C4_CR1_DNF ( %bbbb -- x addr ) 8 lshift I2C4_CR1 ; \ I2C4_CR1_DNF, Digital noise filter
: I2C4_CR1_ANFOFF ( -- x addr ) 12 bit I2C4_CR1 ; \ I2C4_CR1_ANFOFF, Analog noise filter OFF
: I2C4_CR1_TXDMAEN ( -- x addr ) 14 bit I2C4_CR1 ; \ I2C4_CR1_TXDMAEN, DMA transmission requests enable
: I2C4_CR1_RXDMAEN ( -- x addr ) 15 bit I2C4_CR1 ; \ I2C4_CR1_RXDMAEN, DMA reception requests enable
: I2C4_CR1_SBC ( -- x addr ) 16 bit I2C4_CR1 ; \ I2C4_CR1_SBC, Slave byte control
: I2C4_CR1_NOSTRETCH ( -- x addr ) 17 bit I2C4_CR1 ; \ I2C4_CR1_NOSTRETCH, Clock stretching disable
: I2C4_CR1_WUPEN ( -- x addr ) 18 bit I2C4_CR1 ; \ I2C4_CR1_WUPEN, Wakeup from STOP enable
: I2C4_CR1_GCEN ( -- x addr ) 19 bit I2C4_CR1 ; \ I2C4_CR1_GCEN, General call enable
: I2C4_CR1_SMBHEN ( -- x addr ) 20 bit I2C4_CR1 ; \ I2C4_CR1_SMBHEN, SMBus Host address enable
: I2C4_CR1_SMBDEN ( -- x addr ) 21 bit I2C4_CR1 ; \ I2C4_CR1_SMBDEN, SMBus Device Default address enable
: I2C4_CR1_ALERTEN ( -- x addr ) 22 bit I2C4_CR1 ; \ I2C4_CR1_ALERTEN, SMBUS alert enable
: I2C4_CR1_PECEN ( -- x addr ) 23 bit I2C4_CR1 ; \ I2C4_CR1_PECEN, PEC enable

\ I2C4_CR2 (read-write) Reset:0x00000000
: I2C4_CR2_PECBYTE ( -- x addr ) 26 bit I2C4_CR2 ; \ I2C4_CR2_PECBYTE, Packet error checking byte
: I2C4_CR2_AUTOEND ( -- x addr ) 25 bit I2C4_CR2 ; \ I2C4_CR2_AUTOEND, Automatic end mode master mode
: I2C4_CR2_RELOAD ( -- x addr ) 24 bit I2C4_CR2 ; \ I2C4_CR2_RELOAD, NBYTES reload mode
: I2C4_CR2_NBYTES ( %bbbbbbbb -- x addr ) 16 lshift I2C4_CR2 ; \ I2C4_CR2_NBYTES, Number of bytes
: I2C4_CR2_NACK ( -- x addr ) 15 bit I2C4_CR2 ; \ I2C4_CR2_NACK, NACK generation slave mode
: I2C4_CR2_STOP ( -- x addr ) 14 bit I2C4_CR2 ; \ I2C4_CR2_STOP, Stop generation master mode
: I2C4_CR2_START ( -- x addr ) 13 bit I2C4_CR2 ; \ I2C4_CR2_START, Start generation
: I2C4_CR2_HEAD10R ( -- x addr ) 12 bit I2C4_CR2 ; \ I2C4_CR2_HEAD10R, 10-bit address header only read direction master receiver mode
: I2C4_CR2_ADD10 ( -- x addr ) 11 bit I2C4_CR2 ; \ I2C4_CR2_ADD10, 10-bit addressing mode master mode
: I2C4_CR2_RD_WRN ( -- x addr ) 10 bit I2C4_CR2 ; \ I2C4_CR2_RD_WRN, Transfer direction master mode
: I2C4_CR2_SADD ( %bbbbbbbbbb -- x addr ) I2C4_CR2 ; \ I2C4_CR2_SADD, Slave address bit master mode

\ I2C4_OAR1 (read-write) Reset:0x00000000
: I2C4_OAR1_OA1 ( %bbbbbbbbbb -- x addr ) I2C4_OAR1 ; \ I2C4_OAR1_OA1, Interface address
: I2C4_OAR1_OA1MODE ( -- x addr ) 10 bit I2C4_OAR1 ; \ I2C4_OAR1_OA1MODE, Own Address 1 10-bit mode
: I2C4_OAR1_OA1EN ( -- x addr ) 15 bit I2C4_OAR1 ; \ I2C4_OAR1_OA1EN, Own Address 1 enable

\ I2C4_OAR2 (read-write) Reset:0x00000000
: I2C4_OAR2_OA2 ( %bbbbbbb -- x addr ) 1 lshift I2C4_OAR2 ; \ I2C4_OAR2_OA2, Interface address
: I2C4_OAR2_OA2MSK ( %bbb -- x addr ) 8 lshift I2C4_OAR2 ; \ I2C4_OAR2_OA2MSK, Own Address 2 masks
: I2C4_OAR2_OA2EN ( -- x addr ) 15 bit I2C4_OAR2 ; \ I2C4_OAR2_OA2EN, Own Address 2 enable

\ I2C4_TIMINGR (read-write) Reset:0x00000000
: I2C4_TIMINGR_SCLL ( %bbbbbbbb -- x addr ) I2C4_TIMINGR ; \ I2C4_TIMINGR_SCLL, SCL low period master mode
: I2C4_TIMINGR_SCLH ( %bbbbbbbb -- x addr ) 8 lshift I2C4_TIMINGR ; \ I2C4_TIMINGR_SCLH, SCL high period master mode
: I2C4_TIMINGR_SDADEL ( %bbbb -- x addr ) 16 lshift I2C4_TIMINGR ; \ I2C4_TIMINGR_SDADEL, Data hold time
: I2C4_TIMINGR_SCLDEL ( %bbbb -- x addr ) 20 lshift I2C4_TIMINGR ; \ I2C4_TIMINGR_SCLDEL, Data setup time
: I2C4_TIMINGR_PRESC ( %bbbb -- x addr ) 28 lshift I2C4_TIMINGR ; \ I2C4_TIMINGR_PRESC, Timing prescaler

\ I2C4_TIMEOUTR (read-write) Reset:0x00000000
: I2C4_TIMEOUTR_TIMEOUTA ( %bbbbbbbbbbb -- x addr ) I2C4_TIMEOUTR ; \ I2C4_TIMEOUTR_TIMEOUTA, Bus timeout A
: I2C4_TIMEOUTR_TIDLE ( -- x addr ) 12 bit I2C4_TIMEOUTR ; \ I2C4_TIMEOUTR_TIDLE, Idle clock timeout detection
: I2C4_TIMEOUTR_TIMOUTEN ( -- x addr ) 15 bit I2C4_TIMEOUTR ; \ I2C4_TIMEOUTR_TIMOUTEN, Clock timeout enable
: I2C4_TIMEOUTR_TIMEOUTB ( %bbbbbbbbbbb -- x addr ) 16 lshift I2C4_TIMEOUTR ; \ I2C4_TIMEOUTR_TIMEOUTB, Bus timeout B
: I2C4_TIMEOUTR_TEXTEN ( -- x addr ) 31 bit I2C4_TIMEOUTR ; \ I2C4_TIMEOUTR_TEXTEN, Extended clock timeout enable

\ I2C4_ISR (multiple-access)  Reset:0x00000001
: I2C4_ISR_ADDCODE ( %bbbbbbb -- x addr ) 17 lshift I2C4_ISR ; \ I2C4_ISR_ADDCODE, Address match code Slave mode
: I2C4_ISR_DIR ( -- x addr ) 16 bit I2C4_ISR ; \ I2C4_ISR_DIR, Transfer direction Slave mode
: I2C4_ISR_BUSY ( -- x addr ) 15 bit I2C4_ISR ; \ I2C4_ISR_BUSY, Bus busy
: I2C4_ISR_ALERT ( -- x addr ) 13 bit I2C4_ISR ; \ I2C4_ISR_ALERT, SMBus alert
: I2C4_ISR_TIMEOUT? ( -- 1|0 ) 12 bit I2C4_ISR bit@ ; \ I2C4_ISR_TIMEOUT, Timeout or t_low detection flag
: I2C4_ISR_PECERR ( -- x addr ) 11 bit I2C4_ISR ; \ I2C4_ISR_PECERR, PEC Error in reception
: I2C4_ISR_OVR ( -- x addr ) 10 bit I2C4_ISR ; \ I2C4_ISR_OVR, Overrun/Underrun slave mode
: I2C4_ISR_ARLO ( -- x addr ) 9 bit I2C4_ISR ; \ I2C4_ISR_ARLO, Arbitration lost
: I2C4_ISR_BERR ( -- x addr ) 8 bit I2C4_ISR ; \ I2C4_ISR_BERR, Bus error
: I2C4_ISR_TCR ( -- x addr ) 7 bit I2C4_ISR ; \ I2C4_ISR_TCR, Transfer Complete Reload
: I2C4_ISR_TC ( -- x addr ) 6 bit I2C4_ISR ; \ I2C4_ISR_TC, Transfer Complete master mode
: I2C4_ISR_STOPF? ( -- 1|0 ) 5 bit I2C4_ISR bit@ ; \ I2C4_ISR_STOPF, Stop detection flag
: I2C4_ISR_NACKF? ( -- 1|0 ) 4 bit I2C4_ISR bit@ ; \ I2C4_ISR_NACKF, Not acknowledge received flag
: I2C4_ISR_ADDR ( -- x addr ) 3 bit I2C4_ISR ; \ I2C4_ISR_ADDR, Address matched slave mode
: I2C4_ISR_RXNE ( -- x addr ) 2 bit I2C4_ISR ; \ I2C4_ISR_RXNE, Receive data register not empty receivers
: I2C4_ISR_TXIS? ( -- 1|0 ) 1 bit I2C4_ISR bit@ ; \ I2C4_ISR_TXIS, Transmit interrupt status transmitters
: I2C4_ISR_TXE ( -- x addr ) 0 bit I2C4_ISR ; \ I2C4_ISR_TXE, Transmit data register empty transmitters

\ I2C4_ICR (write-only) Reset:0x00000000
: I2C4_ICR_ALERTCF ( -- x addr ) 13 bit I2C4_ICR ; \ I2C4_ICR_ALERTCF, Alert flag clear
: I2C4_ICR_TIMOUTCF ( -- x addr ) 12 bit I2C4_ICR ; \ I2C4_ICR_TIMOUTCF, Timeout detection flag clear
: I2C4_ICR_PECCF ( -- x addr ) 11 bit I2C4_ICR ; \ I2C4_ICR_PECCF, PEC Error flag clear
: I2C4_ICR_OVRCF ( -- x addr ) 10 bit I2C4_ICR ; \ I2C4_ICR_OVRCF, Overrun/Underrun flag clear
: I2C4_ICR_ARLOCF ( -- x addr ) 9 bit I2C4_ICR ; \ I2C4_ICR_ARLOCF, Arbitration lost flag clear
: I2C4_ICR_BERRCF ( -- x addr ) 8 bit I2C4_ICR ; \ I2C4_ICR_BERRCF, Bus error flag clear
: I2C4_ICR_STOPCF ( -- x addr ) 5 bit I2C4_ICR ; \ I2C4_ICR_STOPCF, Stop detection flag clear
: I2C4_ICR_NACKCF ( -- x addr ) 4 bit I2C4_ICR ; \ I2C4_ICR_NACKCF, Not Acknowledge flag clear
: I2C4_ICR_ADDRCF ( -- x addr ) 3 bit I2C4_ICR ; \ I2C4_ICR_ADDRCF, Address Matched flag clear

\ I2C4_PECR (read-only) Reset:0x00000000
: I2C4_PECR_PEC? ( --  x ) I2C4_PECR @ ; \ I2C4_PECR_PEC, Packet error checking register

\ I2C4_RXDR (read-only) Reset:0x00000000
: I2C4_RXDR_RXDATA? ( --  x ) I2C4_RXDR @ ; \ I2C4_RXDR_RXDATA, 8-bit receive data

\ I2C4_TXDR (read-write) Reset:0x00000000
: I2C4_TXDR_TXDATA ( %bbbbbbbb -- x addr ) I2C4_TXDR ; \ I2C4_TXDR_TXDATA, 8-bit transmit data

\ RTC_TR (read-write) Reset:0x00000000
: RTC_TR_PM ( -- x addr ) 22 bit RTC_TR ; \ RTC_TR_PM, AM/PM notation
: RTC_TR_HT ( %bb -- x addr ) 20 lshift RTC_TR ; \ RTC_TR_HT, Hour tens in BCD format
: RTC_TR_HU ( %bbbb -- x addr ) 16 lshift RTC_TR ; \ RTC_TR_HU, Hour units in BCD format
: RTC_TR_MNT ( %bbb -- x addr ) 12 lshift RTC_TR ; \ RTC_TR_MNT, Minute tens in BCD format
: RTC_TR_MNU ( %bbbb -- x addr ) 8 lshift RTC_TR ; \ RTC_TR_MNU, Minute units in BCD format
: RTC_TR_ST ( %bbb -- x addr ) 4 lshift RTC_TR ; \ RTC_TR_ST, Second tens in BCD format
: RTC_TR_SU ( %bbbb -- x addr ) RTC_TR ; \ RTC_TR_SU, Second units in BCD format

\ RTC_DR (read-write) Reset:0x00002101
: RTC_DR_YT ( %bbbb -- x addr ) 20 lshift RTC_DR ; \ RTC_DR_YT, Year tens in BCD format
: RTC_DR_YU ( %bbbb -- x addr ) 16 lshift RTC_DR ; \ RTC_DR_YU, Year units in BCD format
: RTC_DR_WDU ( %bbb -- x addr ) 13 lshift RTC_DR ; \ RTC_DR_WDU, Week day units
: RTC_DR_MT ( -- x addr ) 12 bit RTC_DR ; \ RTC_DR_MT, Month tens in BCD format
: RTC_DR_MU ( %bbbb -- x addr ) 8 lshift RTC_DR ; \ RTC_DR_MU, Month units in BCD format
: RTC_DR_DT ( %bb -- x addr ) 4 lshift RTC_DR ; \ RTC_DR_DT, Date tens in BCD format
: RTC_DR_DU ( %bbbb -- x addr ) RTC_DR ; \ RTC_DR_DU, Date units in BCD format

\ RTC_CR (read-write) Reset:0x00000000
: RTC_CR_WCKSEL ( %bbb -- x addr ) RTC_CR ; \ RTC_CR_WCKSEL, Wakeup clock selection
: RTC_CR_TSEDGE ( -- x addr ) 3 bit RTC_CR ; \ RTC_CR_TSEDGE, Time-stamp event active edge
: RTC_CR_REFCKON ( -- x addr ) 4 bit RTC_CR ; \ RTC_CR_REFCKON, Reference clock detection enable 50 or 60 Hz
: RTC_CR_BYPSHAD ( -- x addr ) 5 bit RTC_CR ; \ RTC_CR_BYPSHAD, Bypass the shadow registers
: RTC_CR_FMT ( -- x addr ) 6 bit RTC_CR ; \ RTC_CR_FMT, Hour format
: RTC_CR_ALRAE ( -- x addr ) 8 bit RTC_CR ; \ RTC_CR_ALRAE, Alarm A enable
: RTC_CR_ALRBE ( -- x addr ) 9 bit RTC_CR ; \ RTC_CR_ALRBE, Alarm B enable
: RTC_CR_WUTE ( -- x addr ) 10 bit RTC_CR ; \ RTC_CR_WUTE, Wakeup timer enable
: RTC_CR_TSE ( -- x addr ) 11 bit RTC_CR ; \ RTC_CR_TSE, Time stamp enable
: RTC_CR_ALRAIE ( -- x addr ) 12 bit RTC_CR ; \ RTC_CR_ALRAIE, Alarm A interrupt enable
: RTC_CR_ALRBIE ( -- x addr ) 13 bit RTC_CR ; \ RTC_CR_ALRBIE, Alarm B interrupt enable
: RTC_CR_WUTIE ( -- x addr ) 14 bit RTC_CR ; \ RTC_CR_WUTIE, Wakeup timer interrupt enable
: RTC_CR_TSIE ( -- x addr ) 15 bit RTC_CR ; \ RTC_CR_TSIE, Time-stamp interrupt enable
: RTC_CR_ADD1H ( -- x addr ) 16 bit RTC_CR ; \ RTC_CR_ADD1H, Add 1 hour summer time change
: RTC_CR_SUB1H ( -- x addr ) 17 bit RTC_CR ; \ RTC_CR_SUB1H, Subtract 1 hour winter time change
: RTC_CR_BKP ( -- x addr ) 18 bit RTC_CR ; \ RTC_CR_BKP, Backup
: RTC_CR_COSEL ( -- x addr ) 19 bit RTC_CR ; \ RTC_CR_COSEL, Calibration output selection
: RTC_CR_POL ( -- x addr ) 20 bit RTC_CR ; \ RTC_CR_POL, Output polarity
: RTC_CR_OSEL ( %bb -- x addr ) 21 lshift RTC_CR ; \ RTC_CR_OSEL, Output selection
: RTC_CR_COE ( -- x addr ) 23 bit RTC_CR ; \ RTC_CR_COE, Calibration output enable
: RTC_CR_ITSE ( -- x addr ) 24 bit RTC_CR ; \ RTC_CR_ITSE, timestamp on internal event enable

\ RTC_ISR (multiple-access)  Reset:0x00000007
: RTC_ISR_ALRAWF? ( -- 1|0 ) 0 bit RTC_ISR bit@ ; \ RTC_ISR_ALRAWF, Alarm A write flag
: RTC_ISR_ALRBWF? ( -- 1|0 ) 1 bit RTC_ISR bit@ ; \ RTC_ISR_ALRBWF, Alarm B write flag
: RTC_ISR_WUTWF? ( -- 1|0 ) 2 bit RTC_ISR bit@ ; \ RTC_ISR_WUTWF, Wakeup timer write flag
: RTC_ISR_SHPF ( -- x addr ) 3 bit RTC_ISR ; \ RTC_ISR_SHPF, Shift operation pending
: RTC_ISR_INITS? ( -- 1|0 ) 4 bit RTC_ISR bit@ ; \ RTC_ISR_INITS, Initialization status flag
: RTC_ISR_RSF? ( -- 1|0 ) 5 bit RTC_ISR bit@ ; \ RTC_ISR_RSF, Registers synchronization flag
: RTC_ISR_INITF? ( -- 1|0 ) 6 bit RTC_ISR bit@ ; \ RTC_ISR_INITF, Initialization flag
: RTC_ISR_INIT ( -- x addr ) 7 bit RTC_ISR ; \ RTC_ISR_INIT, Initialization mode
: RTC_ISR_ALRAF? ( -- 1|0 ) 8 bit RTC_ISR bit@ ; \ RTC_ISR_ALRAF, Alarm A flag
: RTC_ISR_ALRBF? ( -- 1|0 ) 9 bit RTC_ISR bit@ ; \ RTC_ISR_ALRBF, Alarm B flag
: RTC_ISR_WUTF? ( -- 1|0 ) 10 bit RTC_ISR bit@ ; \ RTC_ISR_WUTF, Wakeup timer flag
: RTC_ISR_TSF? ( -- 1|0 ) 11 bit RTC_ISR bit@ ; \ RTC_ISR_TSF, Time-stamp flag
: RTC_ISR_TSOVF? ( -- 1|0 ) 12 bit RTC_ISR bit@ ; \ RTC_ISR_TSOVF, Time-stamp overflow flag
: RTC_ISR_TAMP1F? ( -- 1|0 ) 13 bit RTC_ISR bit@ ; \ RTC_ISR_TAMP1F, Tamper detection flag
: RTC_ISR_TAMP2F? ( -- 1|0 ) 14 bit RTC_ISR bit@ ; \ RTC_ISR_TAMP2F, RTC_TAMP2 detection flag
: RTC_ISR_TAMP3F? ( -- 1|0 ) 15 bit RTC_ISR bit@ ; \ RTC_ISR_TAMP3F, RTC_TAMP3 detection flag
: RTC_ISR_RECALPF ( -- x addr ) 16 bit RTC_ISR ; \ RTC_ISR_RECALPF, Recalibration pending Flag

\ RTC_PRER (read-write) Reset:0x007F00FF
: RTC_PRER_PREDIV_A ( %bbbbbbb -- x addr ) 16 lshift RTC_PRER ; \ RTC_PRER_PREDIV_A, Asynchronous prescaler factor
: RTC_PRER_PREDIV_S ( %bbbbbbbbbbbbbbb -- x addr ) RTC_PRER ; \ RTC_PRER_PREDIV_S, Synchronous prescaler factor

\ RTC_WUTR (read-write) Reset:0x0000FFFF
: RTC_WUTR_WUT ( %bbbbbbbbbbbbbbbb -- x addr ) RTC_WUTR ; \ RTC_WUTR_WUT, Wakeup auto-reload value bits

\ RTC_ALRMAR (read-write) Reset:0x00000000
: RTC_ALRMAR_MSK4 ( -- x addr ) 31 bit RTC_ALRMAR ; \ RTC_ALRMAR_MSK4, Alarm A date mask
: RTC_ALRMAR_WDSEL ( -- x addr ) 30 bit RTC_ALRMAR ; \ RTC_ALRMAR_WDSEL, Week day selection
: RTC_ALRMAR_DT ( %bb -- x addr ) 28 lshift RTC_ALRMAR ; \ RTC_ALRMAR_DT, Date tens in BCD format
: RTC_ALRMAR_DU ( %bbbb -- x addr ) 24 lshift RTC_ALRMAR ; \ RTC_ALRMAR_DU, Date units or day in BCD format
: RTC_ALRMAR_MSK3 ( -- x addr ) 23 bit RTC_ALRMAR ; \ RTC_ALRMAR_MSK3, Alarm A hours mask
: RTC_ALRMAR_PM ( -- x addr ) 22 bit RTC_ALRMAR ; \ RTC_ALRMAR_PM, AM/PM notation
: RTC_ALRMAR_HT ( %bb -- x addr ) 20 lshift RTC_ALRMAR ; \ RTC_ALRMAR_HT, Hour tens in BCD format
: RTC_ALRMAR_HU ( %bbbb -- x addr ) 16 lshift RTC_ALRMAR ; \ RTC_ALRMAR_HU, Hour units in BCD format
: RTC_ALRMAR_MSK2 ( -- x addr ) 15 bit RTC_ALRMAR ; \ RTC_ALRMAR_MSK2, Alarm A minutes mask
: RTC_ALRMAR_MNT ( %bbb -- x addr ) 12 lshift RTC_ALRMAR ; \ RTC_ALRMAR_MNT, Minute tens in BCD format
: RTC_ALRMAR_MNU ( %bbbb -- x addr ) 8 lshift RTC_ALRMAR ; \ RTC_ALRMAR_MNU, Minute units in BCD format
: RTC_ALRMAR_MSK1 ( -- x addr ) 7 bit RTC_ALRMAR ; \ RTC_ALRMAR_MSK1, Alarm A seconds mask
: RTC_ALRMAR_ST ( %bbb -- x addr ) 4 lshift RTC_ALRMAR ; \ RTC_ALRMAR_ST, Second tens in BCD format
: RTC_ALRMAR_SU ( %bbbb -- x addr ) RTC_ALRMAR ; \ RTC_ALRMAR_SU, Second units in BCD format

\ RTC_ALRMBR (read-write) Reset:0x00000000
: RTC_ALRMBR_MSK4 ( -- x addr ) 31 bit RTC_ALRMBR ; \ RTC_ALRMBR_MSK4, Alarm B date mask
: RTC_ALRMBR_WDSEL ( -- x addr ) 30 bit RTC_ALRMBR ; \ RTC_ALRMBR_WDSEL, Week day selection
: RTC_ALRMBR_DT ( %bb -- x addr ) 28 lshift RTC_ALRMBR ; \ RTC_ALRMBR_DT, Date tens in BCD format
: RTC_ALRMBR_DU ( %bbbb -- x addr ) 24 lshift RTC_ALRMBR ; \ RTC_ALRMBR_DU, Date units or day in BCD format
: RTC_ALRMBR_MSK3 ( -- x addr ) 23 bit RTC_ALRMBR ; \ RTC_ALRMBR_MSK3, Alarm B hours mask
: RTC_ALRMBR_PM ( -- x addr ) 22 bit RTC_ALRMBR ; \ RTC_ALRMBR_PM, AM/PM notation
: RTC_ALRMBR_HT ( %bb -- x addr ) 20 lshift RTC_ALRMBR ; \ RTC_ALRMBR_HT, Hour tens in BCD format
: RTC_ALRMBR_HU ( %bbbb -- x addr ) 16 lshift RTC_ALRMBR ; \ RTC_ALRMBR_HU, Hour units in BCD format
: RTC_ALRMBR_MSK2 ( -- x addr ) 15 bit RTC_ALRMBR ; \ RTC_ALRMBR_MSK2, Alarm B minutes mask
: RTC_ALRMBR_MNT ( %bbb -- x addr ) 12 lshift RTC_ALRMBR ; \ RTC_ALRMBR_MNT, Minute tens in BCD format
: RTC_ALRMBR_MNU ( %bbbb -- x addr ) 8 lshift RTC_ALRMBR ; \ RTC_ALRMBR_MNU, Minute units in BCD format
: RTC_ALRMBR_MSK1 ( -- x addr ) 7 bit RTC_ALRMBR ; \ RTC_ALRMBR_MSK1, Alarm B seconds mask
: RTC_ALRMBR_ST ( %bbb -- x addr ) 4 lshift RTC_ALRMBR ; \ RTC_ALRMBR_ST, Second tens in BCD format
: RTC_ALRMBR_SU ( %bbbb -- x addr ) RTC_ALRMBR ; \ RTC_ALRMBR_SU, Second units in BCD format

\ RTC_WPR (write-only) Reset:0x00000000
: RTC_WPR_KEY ( %bbbbbbbb -- x addr ) RTC_WPR ; \ RTC_WPR_KEY, Write protection key

\ RTC_SSR (read-only) Reset:0x00000000
: RTC_SSR_SS? ( --  x ) RTC_SSR @ ; \ RTC_SSR_SS, Sub second value

\ RTC_SHIFTR (write-only) Reset:0x00000000
: RTC_SHIFTR_ADD1S ( -- x addr ) 31 bit RTC_SHIFTR ; \ RTC_SHIFTR_ADD1S, Add one second
: RTC_SHIFTR_SUBFS ( %bbbbbbbbbbbbbbb -- x addr ) RTC_SHIFTR ; \ RTC_SHIFTR_SUBFS, Subtract a fraction of a second

\ RTC_TSTR (read-only) Reset:0x00000000
: RTC_TSTR_SU? ( --  x ) RTC_TSTR @ ; \ RTC_TSTR_SU, Second units in BCD format
: RTC_TSTR_ST? ( --  x ) 4 lshift RTC_TSTR @ ; \ RTC_TSTR_ST, Second tens in BCD format
: RTC_TSTR_MNU? ( --  x ) 8 lshift RTC_TSTR @ ; \ RTC_TSTR_MNU, Minute units in BCD format
: RTC_TSTR_MNT? ( --  x ) 12 lshift RTC_TSTR @ ; \ RTC_TSTR_MNT, Minute tens in BCD format
: RTC_TSTR_HU? ( --  x ) 16 lshift RTC_TSTR @ ; \ RTC_TSTR_HU, Hour units in BCD format
: RTC_TSTR_HT? ( --  x ) 20 lshift RTC_TSTR @ ; \ RTC_TSTR_HT, Hour tens in BCD format
: RTC_TSTR_PM? ( --  1|0 ) 22 bit RTC_TSTR bit@ ; \ RTC_TSTR_PM, AM/PM notation

\ RTC_TSDR (read-only) Reset:0x00000000
: RTC_TSDR_WDU? ( --  x ) 13 lshift RTC_TSDR @ ; \ RTC_TSDR_WDU, Week day units
: RTC_TSDR_MT? ( --  1|0 ) 12 bit RTC_TSDR bit@ ; \ RTC_TSDR_MT, Month tens in BCD format
: RTC_TSDR_MU? ( --  x ) 8 lshift RTC_TSDR @ ; \ RTC_TSDR_MU, Month units in BCD format
: RTC_TSDR_DT? ( --  x ) 4 lshift RTC_TSDR @ ; \ RTC_TSDR_DT, Date tens in BCD format
: RTC_TSDR_DU? ( --  x ) RTC_TSDR @ ; \ RTC_TSDR_DU, Date units in BCD format

\ RTC_TSSSR (read-only) Reset:0x00000000
: RTC_TSSSR_SS? ( --  x ) RTC_TSSSR @ ; \ RTC_TSSSR_SS, Sub second value

\ RTC_CALR (read-write) Reset:0x00000000
: RTC_CALR_CALP ( -- x addr ) 15 bit RTC_CALR ; \ RTC_CALR_CALP, Increase frequency of RTC by 488.5 ppm
: RTC_CALR_CALW8 ( -- x addr ) 14 bit RTC_CALR ; \ RTC_CALR_CALW8, Use an 8-second calibration cycle period
: RTC_CALR_CALW16 ( -- x addr ) 13 bit RTC_CALR ; \ RTC_CALR_CALW16, Use a 16-second calibration cycle period
: RTC_CALR_CALM ( %bbbbbbbbb -- x addr ) RTC_CALR ; \ RTC_CALR_CALM, Calibration minus

\ RTC_TAMPCR (read-write) Reset:0x00000000
: RTC_TAMPCR_TAMP1E ( -- x addr ) 0 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP1E, Tamper 1 detection enable
: RTC_TAMPCR_TAMP1TRG ( -- x addr ) 1 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP1TRG, Active level for tamper 1
: RTC_TAMPCR_TAMPIE ( -- x addr ) 2 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMPIE, Tamper interrupt enable
: RTC_TAMPCR_TAMP2E ( -- x addr ) 3 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP2E, Tamper 2 detection enable
: RTC_TAMPCR_TAMP2TRG ( -- x addr ) 4 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP2TRG, Active level for tamper 2
: RTC_TAMPCR_TAMP3E ( -- x addr ) 5 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP3E, Tamper 3 detection enable
: RTC_TAMPCR_TAMP3TRG ( -- x addr ) 6 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP3TRG, Active level for tamper 3
: RTC_TAMPCR_TAMPTS ( -- x addr ) 7 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMPTS, Activate timestamp on tamper detection event
: RTC_TAMPCR_TAMPFREQ ( %bbb -- x addr ) 8 lshift RTC_TAMPCR ; \ RTC_TAMPCR_TAMPFREQ, Tamper sampling frequency
: RTC_TAMPCR_TAMPFLT ( %bb -- x addr ) 11 lshift RTC_TAMPCR ; \ RTC_TAMPCR_TAMPFLT, Tamper filter count
: RTC_TAMPCR_TAMPPRCH ( %bb -- x addr ) 13 lshift RTC_TAMPCR ; \ RTC_TAMPCR_TAMPPRCH, Tamper precharge duration
: RTC_TAMPCR_TAMPPUDIS ( -- x addr ) 15 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMPPUDIS, TAMPER pull-up disable
: RTC_TAMPCR_TAMP1IE ( -- x addr ) 16 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP1IE, Tamper 1 interrupt enable
: RTC_TAMPCR_TAMP1NOERASE ( -- x addr ) 17 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP1NOERASE, Tamper 1 no erase
: RTC_TAMPCR_TAMP1MF ( -- x addr ) 18 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP1MF, Tamper 1 mask flag
: RTC_TAMPCR_TAMP2IE ( -- x addr ) 19 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP2IE, Tamper 2 interrupt enable
: RTC_TAMPCR_TAMP2NOERASE ( -- x addr ) 20 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP2NOERASE, Tamper 2 no erase
: RTC_TAMPCR_TAMP2MF ( -- x addr ) 21 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP2MF, Tamper 2 mask flag
: RTC_TAMPCR_TAMP3IE ( -- x addr ) 22 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP3IE, Tamper 3 interrupt enable
: RTC_TAMPCR_TAMP3NOERASE ( -- x addr ) 23 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP3NOERASE, Tamper 3 no erase
: RTC_TAMPCR_TAMP3MF ( -- x addr ) 24 bit RTC_TAMPCR ; \ RTC_TAMPCR_TAMP3MF, Tamper 3 mask flag

\ RTC_ALRMASSR (read-write) Reset:0x00000000
: RTC_ALRMASSR_MASKSS ( %bbbb -- x addr ) 24 lshift RTC_ALRMASSR ; \ RTC_ALRMASSR_MASKSS, Mask the most-significant bits starting at this bit
: RTC_ALRMASSR_SS ( %bbbbbbbbbbbbbbb -- x addr ) RTC_ALRMASSR ; \ RTC_ALRMASSR_SS, Sub seconds value

\ RTC_ALRMBSSR (read-write) Reset:0x00000000
: RTC_ALRMBSSR_MASKSS ( %bbbb -- x addr ) 24 lshift RTC_ALRMBSSR ; \ RTC_ALRMBSSR_MASKSS, Mask the most-significant bits starting at this bit
: RTC_ALRMBSSR_SS ( %bbbbbbbbbbbbbbb -- x addr ) RTC_ALRMBSSR ; \ RTC_ALRMBSSR_SS, Sub seconds value

\ RTC_OR (read-write) Reset:0x00000000
: RTC_OR_RTC_ALARM_TYPE ( -- x addr ) 0 bit RTC_OR ; \ RTC_OR_RTC_ALARM_TYPE, RTC_ALARM on PC13 output type
: RTC_OR_RTC_OUT_RMP ( -- x addr ) 1 bit RTC_OR ; \ RTC_OR_RTC_OUT_RMP, RTC_OUT remap

\ RTC_BKP0R (read-write) Reset:0x00000000
: RTC_BKP0R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP0R ; \ RTC_BKP0R_BKP, BKP

\ RTC_BKP1R (read-write) Reset:0x00000000
: RTC_BKP1R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP1R ; \ RTC_BKP1R_BKP, BKP

\ RTC_BKP2R (read-write) Reset:0x00000000
: RTC_BKP2R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP2R ; \ RTC_BKP2R_BKP, BKP

\ RTC_BKP3R (read-write) Reset:0x00000000
: RTC_BKP3R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP3R ; \ RTC_BKP3R_BKP, BKP

\ RTC_BKP4R (read-write) Reset:0x00000000
: RTC_BKP4R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP4R ; \ RTC_BKP4R_BKP, BKP

\ RTC_BKP5R (read-write) Reset:0x00000000
: RTC_BKP5R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP5R ; \ RTC_BKP5R_BKP, BKP

\ RTC_BKP6R (read-write) Reset:0x00000000
: RTC_BKP6R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP6R ; \ RTC_BKP6R_BKP, BKP

\ RTC_BKP7R (read-write) Reset:0x00000000
: RTC_BKP7R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP7R ; \ RTC_BKP7R_BKP, BKP

\ RTC_BKP8R (read-write) Reset:0x00000000
: RTC_BKP8R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP8R ; \ RTC_BKP8R_BKP, BKP

\ RTC_BKP9R (read-write) Reset:0x00000000
: RTC_BKP9R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP9R ; \ RTC_BKP9R_BKP, BKP

\ RTC_BKP10R (read-write) Reset:0x00000000
: RTC_BKP10R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP10R ; \ RTC_BKP10R_BKP, BKP

\ RTC_BKP11R (read-write) Reset:0x00000000
: RTC_BKP11R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP11R ; \ RTC_BKP11R_BKP, BKP

\ RTC_BKP12R (read-write) Reset:0x00000000
: RTC_BKP12R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP12R ; \ RTC_BKP12R_BKP, BKP

\ RTC_BKP13R (read-write) Reset:0x00000000
: RTC_BKP13R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP13R ; \ RTC_BKP13R_BKP, BKP

\ RTC_BKP14R (read-write) Reset:0x00000000
: RTC_BKP14R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP14R ; \ RTC_BKP14R_BKP, BKP

\ RTC_BKP15R (read-write) Reset:0x00000000
: RTC_BKP15R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP15R ; \ RTC_BKP15R_BKP, BKP

\ RTC_BKP16R (read-write) Reset:0x00000000
: RTC_BKP16R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP16R ; \ RTC_BKP16R_BKP, BKP

\ RTC_BKP17R (read-write) Reset:0x00000000
: RTC_BKP17R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP17R ; \ RTC_BKP17R_BKP, BKP

\ RTC_BKP18R (read-write) Reset:0x00000000
: RTC_BKP18R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP18R ; \ RTC_BKP18R_BKP, BKP

\ RTC_BKP19R (read-write) Reset:0x00000000
: RTC_BKP19R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP19R ; \ RTC_BKP19R_BKP, BKP

\ RTC_BKP20R (read-write) Reset:0x00000000
: RTC_BKP20R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP20R ; \ RTC_BKP20R_BKP, BKP

\ RTC_BKP21R (read-write) Reset:0x00000000
: RTC_BKP21R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP21R ; \ RTC_BKP21R_BKP, BKP

\ RTC_BKP22R (read-write) Reset:0x00000000
: RTC_BKP22R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP22R ; \ RTC_BKP22R_BKP, BKP

\ RTC_BKP23R (read-write) Reset:0x00000000
: RTC_BKP23R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP23R ; \ RTC_BKP23R_BKP, BKP

\ RTC_BKP24R (read-write) Reset:0x00000000
: RTC_BKP24R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP24R ; \ RTC_BKP24R_BKP, BKP

\ RTC_BKP25R (read-write) Reset:0x00000000
: RTC_BKP25R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP25R ; \ RTC_BKP25R_BKP, BKP

\ RTC_BKP26R (read-write) Reset:0x00000000
: RTC_BKP26R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP26R ; \ RTC_BKP26R_BKP, BKP

\ RTC_BKP27R (read-write) Reset:0x00000000
: RTC_BKP27R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP27R ; \ RTC_BKP27R_BKP, BKP

\ RTC_BKP28R (read-write) Reset:0x00000000
: RTC_BKP28R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP28R ; \ RTC_BKP28R_BKP, BKP

\ RTC_BKP29R (read-write) Reset:0x00000000
: RTC_BKP29R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP29R ; \ RTC_BKP29R_BKP, BKP

\ RTC_BKP30R (read-write) Reset:0x00000000
: RTC_BKP30R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP30R ; \ RTC_BKP30R_BKP, BKP

\ RTC_BKP31R (read-write) Reset:0x00000000
: RTC_BKP31R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP31R ; \ RTC_BKP31R_BKP, BKP

\ USART6_CR1 (read-write) Reset:0x0000
: USART6_CR1_M1 ( -- x addr ) 28 bit USART6_CR1 ; \ USART6_CR1_M1, Word length
: USART6_CR1_EOBIE ( -- x addr ) 27 bit USART6_CR1 ; \ USART6_CR1_EOBIE, End of Block interrupt enable
: USART6_CR1_RTOIE ( -- x addr ) 26 bit USART6_CR1 ; \ USART6_CR1_RTOIE, Receiver timeout interrupt enable
: USART6_CR1_DEAT4 ( -- x addr ) 25 bit USART6_CR1 ; \ USART6_CR1_DEAT4, Driver Enable assertion time
: USART6_CR1_DEAT3 ( -- x addr ) 24 bit USART6_CR1 ; \ USART6_CR1_DEAT3, DEAT3
: USART6_CR1_DEAT2 ( -- x addr ) 23 bit USART6_CR1 ; \ USART6_CR1_DEAT2, DEAT2
: USART6_CR1_DEAT1 ( -- x addr ) 22 bit USART6_CR1 ; \ USART6_CR1_DEAT1, DEAT1
: USART6_CR1_DEAT0 ( -- x addr ) 21 bit USART6_CR1 ; \ USART6_CR1_DEAT0, DEAT0
: USART6_CR1_DEDT4 ( -- x addr ) 20 bit USART6_CR1 ; \ USART6_CR1_DEDT4, Driver Enable de-assertion time
: USART6_CR1_DEDT3 ( -- x addr ) 19 bit USART6_CR1 ; \ USART6_CR1_DEDT3, DEDT3
: USART6_CR1_DEDT2 ( -- x addr ) 18 bit USART6_CR1 ; \ USART6_CR1_DEDT2, DEDT2
: USART6_CR1_DEDT1 ( -- x addr ) 17 bit USART6_CR1 ; \ USART6_CR1_DEDT1, DEDT1
: USART6_CR1_DEDT0 ( -- x addr ) 16 bit USART6_CR1 ; \ USART6_CR1_DEDT0, DEDT0
: USART6_CR1_OVER8 ( -- x addr ) 15 bit USART6_CR1 ; \ USART6_CR1_OVER8, Oversampling mode
: USART6_CR1_CMIE ( -- x addr ) 14 bit USART6_CR1 ; \ USART6_CR1_CMIE, Character match interrupt enable
: USART6_CR1_MME ( -- x addr ) 13 bit USART6_CR1 ; \ USART6_CR1_MME, Mute mode enable
: USART6_CR1_M0 ( -- x addr ) 12 bit USART6_CR1 ; \ USART6_CR1_M0, Word length
: USART6_CR1_WAKE ( -- x addr ) 11 bit USART6_CR1 ; \ USART6_CR1_WAKE, Receiver wakeup method
: USART6_CR1_PCE ( -- x addr ) 10 bit USART6_CR1 ; \ USART6_CR1_PCE, Parity control enable
: USART6_CR1_PS ( -- x addr ) 9 bit USART6_CR1 ; \ USART6_CR1_PS, Parity selection
: USART6_CR1_PEIE ( -- x addr ) 8 bit USART6_CR1 ; \ USART6_CR1_PEIE, PE interrupt enable
: USART6_CR1_TXEIE ( -- x addr ) 7 bit USART6_CR1 ; \ USART6_CR1_TXEIE, interrupt enable
: USART6_CR1_TCIE ( -- x addr ) 6 bit USART6_CR1 ; \ USART6_CR1_TCIE, Transmission complete interrupt enable
: USART6_CR1_RXNEIE ( -- x addr ) 5 bit USART6_CR1 ; \ USART6_CR1_RXNEIE, RXNE interrupt enable
: USART6_CR1_IDLEIE ( -- x addr ) 4 bit USART6_CR1 ; \ USART6_CR1_IDLEIE, IDLE interrupt enable
: USART6_CR1_TE ( -- x addr ) 3 bit USART6_CR1 ; \ USART6_CR1_TE, Transmitter enable
: USART6_CR1_RE ( -- x addr ) 2 bit USART6_CR1 ; \ USART6_CR1_RE, Receiver enable
: USART6_CR1_UESM ( -- x addr ) 1 bit USART6_CR1 ; \ USART6_CR1_UESM, USART enable in Stop mode
: USART6_CR1_UE ( -- x addr ) 0 bit USART6_CR1 ; \ USART6_CR1_UE, USART enable

\ USART6_CR2 (read-write) Reset:0x0000
: USART6_CR2_ADD4_7 ( %bbbb -- x addr ) 28 lshift USART6_CR2 ; \ USART6_CR2_ADD4_7, Address of the USART node
: USART6_CR2_ADD0_3 ( %bbbb -- x addr ) 24 lshift USART6_CR2 ; \ USART6_CR2_ADD0_3, Address of the USART node
: USART6_CR2_RTOEN ( -- x addr ) 23 bit USART6_CR2 ; \ USART6_CR2_RTOEN, Receiver timeout enable
: USART6_CR2_ABRMOD1 ( -- x addr ) 22 bit USART6_CR2 ; \ USART6_CR2_ABRMOD1, Auto baud rate mode
: USART6_CR2_ABRMOD0 ( -- x addr ) 21 bit USART6_CR2 ; \ USART6_CR2_ABRMOD0, ABRMOD0
: USART6_CR2_ABREN ( -- x addr ) 20 bit USART6_CR2 ; \ USART6_CR2_ABREN, Auto baud rate enable
: USART6_CR2_MSBFIRST ( -- x addr ) 19 bit USART6_CR2 ; \ USART6_CR2_MSBFIRST, Most significant bit first
: USART6_CR2_TAINV ( -- x addr ) 18 bit USART6_CR2 ; \ USART6_CR2_TAINV, Binary data inversion
: USART6_CR2_TXINV ( -- x addr ) 17 bit USART6_CR2 ; \ USART6_CR2_TXINV, TX pin active level inversion
: USART6_CR2_RXINV ( -- x addr ) 16 bit USART6_CR2 ; \ USART6_CR2_RXINV, RX pin active level inversion
: USART6_CR2_SWAP ( -- x addr ) 15 bit USART6_CR2 ; \ USART6_CR2_SWAP, Swap TX/RX pins
: USART6_CR2_LINEN ( -- x addr ) 14 bit USART6_CR2 ; \ USART6_CR2_LINEN, LIN mode enable
: USART6_CR2_STOP ( %bb -- x addr ) 12 lshift USART6_CR2 ; \ USART6_CR2_STOP, STOP bits
: USART6_CR2_CLKEN ( -- x addr ) 11 bit USART6_CR2 ; \ USART6_CR2_CLKEN, Clock enable
: USART6_CR2_CPOL ( -- x addr ) 10 bit USART6_CR2 ; \ USART6_CR2_CPOL, Clock polarity
: USART6_CR2_CPHA ( -- x addr ) 9 bit USART6_CR2 ; \ USART6_CR2_CPHA, Clock phase
: USART6_CR2_LBCL ( -- x addr ) 8 bit USART6_CR2 ; \ USART6_CR2_LBCL, Last bit clock pulse
: USART6_CR2_LBDIE ( -- x addr ) 6 bit USART6_CR2 ; \ USART6_CR2_LBDIE, LIN break detection interrupt enable
: USART6_CR2_LBDL ( -- x addr ) 5 bit USART6_CR2 ; \ USART6_CR2_LBDL, LIN break detection length
: USART6_CR2_ADDM7 ( -- x addr ) 4 bit USART6_CR2 ; \ USART6_CR2_ADDM7, 7-bit Address Detection/4-bit Address Detection

\ USART6_CR3 (read-write) Reset:0x0000
: USART6_CR3_WUFIE ( -- x addr ) 22 bit USART6_CR3 ; \ USART6_CR3_WUFIE, Wakeup from Stop mode interrupt enable
: USART6_CR3_WUS ( %bb -- x addr ) 20 lshift USART6_CR3 ; \ USART6_CR3_WUS, Wakeup from Stop mode interrupt flag selection
: USART6_CR3_SCARCNT ( %bbb -- x addr ) 17 lshift USART6_CR3 ; \ USART6_CR3_SCARCNT, Smartcard auto-retry count
: USART6_CR3_DEP ( -- x addr ) 15 bit USART6_CR3 ; \ USART6_CR3_DEP, Driver enable polarity selection
: USART6_CR3_DEM ( -- x addr ) 14 bit USART6_CR3 ; \ USART6_CR3_DEM, Driver enable mode
: USART6_CR3_DDRE ( -- x addr ) 13 bit USART6_CR3 ; \ USART6_CR3_DDRE, DMA Disable on Reception Error
: USART6_CR3_OVRDIS ( -- x addr ) 12 bit USART6_CR3 ; \ USART6_CR3_OVRDIS, Overrun Disable
: USART6_CR3_ONEBIT ( -- x addr ) 11 bit USART6_CR3 ; \ USART6_CR3_ONEBIT, One sample bit method enable
: USART6_CR3_CTSIE ( -- x addr ) 10 bit USART6_CR3 ; \ USART6_CR3_CTSIE, CTS interrupt enable
: USART6_CR3_CTSE ( -- x addr ) 9 bit USART6_CR3 ; \ USART6_CR3_CTSE, CTS enable
: USART6_CR3_RTSE ( -- x addr ) 8 bit USART6_CR3 ; \ USART6_CR3_RTSE, RTS enable
: USART6_CR3_DMAT ( -- x addr ) 7 bit USART6_CR3 ; \ USART6_CR3_DMAT, DMA enable transmitter
: USART6_CR3_DMAR ( -- x addr ) 6 bit USART6_CR3 ; \ USART6_CR3_DMAR, DMA enable receiver
: USART6_CR3_SCEN ( -- x addr ) 5 bit USART6_CR3 ; \ USART6_CR3_SCEN, Smartcard mode enable
: USART6_CR3_NACK ( -- x addr ) 4 bit USART6_CR3 ; \ USART6_CR3_NACK, Smartcard NACK enable
: USART6_CR3_HDSEL ( -- x addr ) 3 bit USART6_CR3 ; \ USART6_CR3_HDSEL, Half-duplex selection
: USART6_CR3_IRLP ( -- x addr ) 2 bit USART6_CR3 ; \ USART6_CR3_IRLP, Ir low-power
: USART6_CR3_IREN ( -- x addr ) 1 bit USART6_CR3 ; \ USART6_CR3_IREN, Ir mode enable
: USART6_CR3_EIE ( -- x addr ) 0 bit USART6_CR3 ; \ USART6_CR3_EIE, Error interrupt enable

\ USART6_BRR (read-write) Reset:0x0000
: USART6_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift USART6_BRR ; \ USART6_BRR_DIV_Mantissa, DIV_Mantissa
: USART6_BRR_DIV_Fraction ( %bbbb -- x addr ) USART6_BRR ; \ USART6_BRR_DIV_Fraction, DIV_Fraction

\ USART6_GTPR (read-write) Reset:0x0000
: USART6_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift USART6_GTPR ; \ USART6_GTPR_GT, Guard time value
: USART6_GTPR_PSC ( %bbbbbbbb -- x addr ) USART6_GTPR ; \ USART6_GTPR_PSC, Prescaler value

\ USART6_RTOR (read-write) Reset:0x0000
: USART6_RTOR_BLEN ( %bbbbbbbb -- x addr ) 24 lshift USART6_RTOR ; \ USART6_RTOR_BLEN, Block Length
: USART6_RTOR_RTO ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) USART6_RTOR ; \ USART6_RTOR_RTO, Receiver timeout value

\ USART6_RQR (write-only) Reset:0x0000
: USART6_RQR_TXFRQ ( -- x addr ) 4 bit USART6_RQR ; \ USART6_RQR_TXFRQ, Transmit data flush request
: USART6_RQR_RXFRQ ( -- x addr ) 3 bit USART6_RQR ; \ USART6_RQR_RXFRQ, Receive data flush request
: USART6_RQR_MMRQ ( -- x addr ) 2 bit USART6_RQR ; \ USART6_RQR_MMRQ, Mute mode request
: USART6_RQR_SBKRQ ( -- x addr ) 1 bit USART6_RQR ; \ USART6_RQR_SBKRQ, Send break request
: USART6_RQR_ABRRQ ( -- x addr ) 0 bit USART6_RQR ; \ USART6_RQR_ABRRQ, Auto baud rate request

\ USART6_ISR (read-only) Reset:0x00C0
: USART6_ISR_REACK? ( --  1|0 ) 22 bit USART6_ISR bit@ ; \ USART6_ISR_REACK, REACK
: USART6_ISR_TEACK? ( --  1|0 ) 21 bit USART6_ISR bit@ ; \ USART6_ISR_TEACK, TEACK
: USART6_ISR_WUF? ( --  1|0 ) 20 bit USART6_ISR bit@ ; \ USART6_ISR_WUF, WUF
: USART6_ISR_RWU? ( --  1|0 ) 19 bit USART6_ISR bit@ ; \ USART6_ISR_RWU, RWU
: USART6_ISR_SBKF? ( --  1|0 ) 18 bit USART6_ISR bit@ ; \ USART6_ISR_SBKF, SBKF
: USART6_ISR_CMF? ( --  1|0 ) 17 bit USART6_ISR bit@ ; \ USART6_ISR_CMF, CMF
: USART6_ISR_BUSY? ( --  1|0 ) 16 bit USART6_ISR bit@ ; \ USART6_ISR_BUSY, BUSY
: USART6_ISR_ABRF? ( --  1|0 ) 15 bit USART6_ISR bit@ ; \ USART6_ISR_ABRF, ABRF
: USART6_ISR_ABRE? ( --  1|0 ) 14 bit USART6_ISR bit@ ; \ USART6_ISR_ABRE, ABRE
: USART6_ISR_EOBF? ( --  1|0 ) 12 bit USART6_ISR bit@ ; \ USART6_ISR_EOBF, EOBF
: USART6_ISR_RTOF? ( --  1|0 ) 11 bit USART6_ISR bit@ ; \ USART6_ISR_RTOF, RTOF
: USART6_ISR_CTS? ( --  1|0 ) 10 bit USART6_ISR bit@ ; \ USART6_ISR_CTS, CTS
: USART6_ISR_CTSIF? ( --  1|0 ) 9 bit USART6_ISR bit@ ; \ USART6_ISR_CTSIF, CTSIF
: USART6_ISR_LBDF? ( --  1|0 ) 8 bit USART6_ISR bit@ ; \ USART6_ISR_LBDF, LBDF
: USART6_ISR_TXE? ( --  1|0 ) 7 bit USART6_ISR bit@ ; \ USART6_ISR_TXE, TXE
: USART6_ISR_TC? ( --  1|0 ) 6 bit USART6_ISR bit@ ; \ USART6_ISR_TC, TC
: USART6_ISR_RXNE? ( --  1|0 ) 5 bit USART6_ISR bit@ ; \ USART6_ISR_RXNE, RXNE
: USART6_ISR_IDLE? ( --  1|0 ) 4 bit USART6_ISR bit@ ; \ USART6_ISR_IDLE, IDLE
: USART6_ISR_ORE? ( --  1|0 ) 3 bit USART6_ISR bit@ ; \ USART6_ISR_ORE, ORE
: USART6_ISR_NF? ( --  1|0 ) 2 bit USART6_ISR bit@ ; \ USART6_ISR_NF, NF
: USART6_ISR_FE? ( --  1|0 ) 1 bit USART6_ISR bit@ ; \ USART6_ISR_FE, FE
: USART6_ISR_PE? ( --  1|0 ) 0 bit USART6_ISR bit@ ; \ USART6_ISR_PE, PE

\ USART6_ICR (write-only) Reset:0x0000
: USART6_ICR_WUCF ( -- x addr ) 20 bit USART6_ICR ; \ USART6_ICR_WUCF, Wakeup from Stop mode clear flag
: USART6_ICR_CMCF ( -- x addr ) 17 bit USART6_ICR ; \ USART6_ICR_CMCF, Character match clear flag
: USART6_ICR_EOBCF ( -- x addr ) 12 bit USART6_ICR ; \ USART6_ICR_EOBCF, End of block clear flag
: USART6_ICR_RTOCF ( -- x addr ) 11 bit USART6_ICR ; \ USART6_ICR_RTOCF, Receiver timeout clear flag
: USART6_ICR_CTSCF ( -- x addr ) 9 bit USART6_ICR ; \ USART6_ICR_CTSCF, CTS clear flag
: USART6_ICR_LBDCF ( -- x addr ) 8 bit USART6_ICR ; \ USART6_ICR_LBDCF, LIN break detection clear flag
: USART6_ICR_TCCF ( -- x addr ) 6 bit USART6_ICR ; \ USART6_ICR_TCCF, Transmission complete clear flag
: USART6_ICR_IDLECF ( -- x addr ) 4 bit USART6_ICR ; \ USART6_ICR_IDLECF, Idle line detected clear flag
: USART6_ICR_ORECF ( -- x addr ) 3 bit USART6_ICR ; \ USART6_ICR_ORECF, Overrun error clear flag
: USART6_ICR_NCF ( -- x addr ) 2 bit USART6_ICR ; \ USART6_ICR_NCF, Noise detected clear flag
: USART6_ICR_FECF ( -- x addr ) 1 bit USART6_ICR ; \ USART6_ICR_FECF, Framing error clear flag
: USART6_ICR_PECF ( -- x addr ) 0 bit USART6_ICR ; \ USART6_ICR_PECF, Parity error clear flag

\ USART6_RDR (read-only) Reset:0x0000
: USART6_RDR_RDR? ( --  x ) USART6_RDR @ ; \ USART6_RDR_RDR, Receive data value

\ USART6_TDR (read-write) Reset:0x0000
: USART6_TDR_TDR ( %bbbbbbbbb -- x addr ) USART6_TDR ; \ USART6_TDR_TDR, Transmit data value

\ USART1_CR1 (read-write) Reset:0x0000
: USART1_CR1_M1 ( -- x addr ) 28 bit USART1_CR1 ; \ USART1_CR1_M1, Word length
: USART1_CR1_EOBIE ( -- x addr ) 27 bit USART1_CR1 ; \ USART1_CR1_EOBIE, End of Block interrupt enable
: USART1_CR1_RTOIE ( -- x addr ) 26 bit USART1_CR1 ; \ USART1_CR1_RTOIE, Receiver timeout interrupt enable
: USART1_CR1_DEAT4 ( -- x addr ) 25 bit USART1_CR1 ; \ USART1_CR1_DEAT4, Driver Enable assertion time
: USART1_CR1_DEAT3 ( -- x addr ) 24 bit USART1_CR1 ; \ USART1_CR1_DEAT3, DEAT3
: USART1_CR1_DEAT2 ( -- x addr ) 23 bit USART1_CR1 ; \ USART1_CR1_DEAT2, DEAT2
: USART1_CR1_DEAT1 ( -- x addr ) 22 bit USART1_CR1 ; \ USART1_CR1_DEAT1, DEAT1
: USART1_CR1_DEAT0 ( -- x addr ) 21 bit USART1_CR1 ; \ USART1_CR1_DEAT0, DEAT0
: USART1_CR1_DEDT4 ( -- x addr ) 20 bit USART1_CR1 ; \ USART1_CR1_DEDT4, Driver Enable de-assertion time
: USART1_CR1_DEDT3 ( -- x addr ) 19 bit USART1_CR1 ; \ USART1_CR1_DEDT3, DEDT3
: USART1_CR1_DEDT2 ( -- x addr ) 18 bit USART1_CR1 ; \ USART1_CR1_DEDT2, DEDT2
: USART1_CR1_DEDT1 ( -- x addr ) 17 bit USART1_CR1 ; \ USART1_CR1_DEDT1, DEDT1
: USART1_CR1_DEDT0 ( -- x addr ) 16 bit USART1_CR1 ; \ USART1_CR1_DEDT0, DEDT0
: USART1_CR1_OVER8 ( -- x addr ) 15 bit USART1_CR1 ; \ USART1_CR1_OVER8, Oversampling mode
: USART1_CR1_CMIE ( -- x addr ) 14 bit USART1_CR1 ; \ USART1_CR1_CMIE, Character match interrupt enable
: USART1_CR1_MME ( -- x addr ) 13 bit USART1_CR1 ; \ USART1_CR1_MME, Mute mode enable
: USART1_CR1_M0 ( -- x addr ) 12 bit USART1_CR1 ; \ USART1_CR1_M0, Word length
: USART1_CR1_WAKE ( -- x addr ) 11 bit USART1_CR1 ; \ USART1_CR1_WAKE, Receiver wakeup method
: USART1_CR1_PCE ( -- x addr ) 10 bit USART1_CR1 ; \ USART1_CR1_PCE, Parity control enable
: USART1_CR1_PS ( -- x addr ) 9 bit USART1_CR1 ; \ USART1_CR1_PS, Parity selection
: USART1_CR1_PEIE ( -- x addr ) 8 bit USART1_CR1 ; \ USART1_CR1_PEIE, PE interrupt enable
: USART1_CR1_TXEIE ( -- x addr ) 7 bit USART1_CR1 ; \ USART1_CR1_TXEIE, interrupt enable
: USART1_CR1_TCIE ( -- x addr ) 6 bit USART1_CR1 ; \ USART1_CR1_TCIE, Transmission complete interrupt enable
: USART1_CR1_RXNEIE ( -- x addr ) 5 bit USART1_CR1 ; \ USART1_CR1_RXNEIE, RXNE interrupt enable
: USART1_CR1_IDLEIE ( -- x addr ) 4 bit USART1_CR1 ; \ USART1_CR1_IDLEIE, IDLE interrupt enable
: USART1_CR1_TE ( -- x addr ) 3 bit USART1_CR1 ; \ USART1_CR1_TE, Transmitter enable
: USART1_CR1_RE ( -- x addr ) 2 bit USART1_CR1 ; \ USART1_CR1_RE, Receiver enable
: USART1_CR1_UESM ( -- x addr ) 1 bit USART1_CR1 ; \ USART1_CR1_UESM, USART enable in Stop mode
: USART1_CR1_UE ( -- x addr ) 0 bit USART1_CR1 ; \ USART1_CR1_UE, USART enable

\ USART1_CR2 (read-write) Reset:0x0000
: USART1_CR2_ADD4_7 ( %bbbb -- x addr ) 28 lshift USART1_CR2 ; \ USART1_CR2_ADD4_7, Address of the USART node
: USART1_CR2_ADD0_3 ( %bbbb -- x addr ) 24 lshift USART1_CR2 ; \ USART1_CR2_ADD0_3, Address of the USART node
: USART1_CR2_RTOEN ( -- x addr ) 23 bit USART1_CR2 ; \ USART1_CR2_RTOEN, Receiver timeout enable
: USART1_CR2_ABRMOD1 ( -- x addr ) 22 bit USART1_CR2 ; \ USART1_CR2_ABRMOD1, Auto baud rate mode
: USART1_CR2_ABRMOD0 ( -- x addr ) 21 bit USART1_CR2 ; \ USART1_CR2_ABRMOD0, ABRMOD0
: USART1_CR2_ABREN ( -- x addr ) 20 bit USART1_CR2 ; \ USART1_CR2_ABREN, Auto baud rate enable
: USART1_CR2_MSBFIRST ( -- x addr ) 19 bit USART1_CR2 ; \ USART1_CR2_MSBFIRST, Most significant bit first
: USART1_CR2_TAINV ( -- x addr ) 18 bit USART1_CR2 ; \ USART1_CR2_TAINV, Binary data inversion
: USART1_CR2_TXINV ( -- x addr ) 17 bit USART1_CR2 ; \ USART1_CR2_TXINV, TX pin active level inversion
: USART1_CR2_RXINV ( -- x addr ) 16 bit USART1_CR2 ; \ USART1_CR2_RXINV, RX pin active level inversion
: USART1_CR2_SWAP ( -- x addr ) 15 bit USART1_CR2 ; \ USART1_CR2_SWAP, Swap TX/RX pins
: USART1_CR2_LINEN ( -- x addr ) 14 bit USART1_CR2 ; \ USART1_CR2_LINEN, LIN mode enable
: USART1_CR2_STOP ( %bb -- x addr ) 12 lshift USART1_CR2 ; \ USART1_CR2_STOP, STOP bits
: USART1_CR2_CLKEN ( -- x addr ) 11 bit USART1_CR2 ; \ USART1_CR2_CLKEN, Clock enable
: USART1_CR2_CPOL ( -- x addr ) 10 bit USART1_CR2 ; \ USART1_CR2_CPOL, Clock polarity
: USART1_CR2_CPHA ( -- x addr ) 9 bit USART1_CR2 ; \ USART1_CR2_CPHA, Clock phase
: USART1_CR2_LBCL ( -- x addr ) 8 bit USART1_CR2 ; \ USART1_CR2_LBCL, Last bit clock pulse
: USART1_CR2_LBDIE ( -- x addr ) 6 bit USART1_CR2 ; \ USART1_CR2_LBDIE, LIN break detection interrupt enable
: USART1_CR2_LBDL ( -- x addr ) 5 bit USART1_CR2 ; \ USART1_CR2_LBDL, LIN break detection length
: USART1_CR2_ADDM7 ( -- x addr ) 4 bit USART1_CR2 ; \ USART1_CR2_ADDM7, 7-bit Address Detection/4-bit Address Detection

\ USART1_CR3 (read-write) Reset:0x0000
: USART1_CR3_WUFIE ( -- x addr ) 22 bit USART1_CR3 ; \ USART1_CR3_WUFIE, Wakeup from Stop mode interrupt enable
: USART1_CR3_WUS ( %bb -- x addr ) 20 lshift USART1_CR3 ; \ USART1_CR3_WUS, Wakeup from Stop mode interrupt flag selection
: USART1_CR3_SCARCNT ( %bbb -- x addr ) 17 lshift USART1_CR3 ; \ USART1_CR3_SCARCNT, Smartcard auto-retry count
: USART1_CR3_DEP ( -- x addr ) 15 bit USART1_CR3 ; \ USART1_CR3_DEP, Driver enable polarity selection
: USART1_CR3_DEM ( -- x addr ) 14 bit USART1_CR3 ; \ USART1_CR3_DEM, Driver enable mode
: USART1_CR3_DDRE ( -- x addr ) 13 bit USART1_CR3 ; \ USART1_CR3_DDRE, DMA Disable on Reception Error
: USART1_CR3_OVRDIS ( -- x addr ) 12 bit USART1_CR3 ; \ USART1_CR3_OVRDIS, Overrun Disable
: USART1_CR3_ONEBIT ( -- x addr ) 11 bit USART1_CR3 ; \ USART1_CR3_ONEBIT, One sample bit method enable
: USART1_CR3_CTSIE ( -- x addr ) 10 bit USART1_CR3 ; \ USART1_CR3_CTSIE, CTS interrupt enable
: USART1_CR3_CTSE ( -- x addr ) 9 bit USART1_CR3 ; \ USART1_CR3_CTSE, CTS enable
: USART1_CR3_RTSE ( -- x addr ) 8 bit USART1_CR3 ; \ USART1_CR3_RTSE, RTS enable
: USART1_CR3_DMAT ( -- x addr ) 7 bit USART1_CR3 ; \ USART1_CR3_DMAT, DMA enable transmitter
: USART1_CR3_DMAR ( -- x addr ) 6 bit USART1_CR3 ; \ USART1_CR3_DMAR, DMA enable receiver
: USART1_CR3_SCEN ( -- x addr ) 5 bit USART1_CR3 ; \ USART1_CR3_SCEN, Smartcard mode enable
: USART1_CR3_NACK ( -- x addr ) 4 bit USART1_CR3 ; \ USART1_CR3_NACK, Smartcard NACK enable
: USART1_CR3_HDSEL ( -- x addr ) 3 bit USART1_CR3 ; \ USART1_CR3_HDSEL, Half-duplex selection
: USART1_CR3_IRLP ( -- x addr ) 2 bit USART1_CR3 ; \ USART1_CR3_IRLP, Ir low-power
: USART1_CR3_IREN ( -- x addr ) 1 bit USART1_CR3 ; \ USART1_CR3_IREN, Ir mode enable
: USART1_CR3_EIE ( -- x addr ) 0 bit USART1_CR3 ; \ USART1_CR3_EIE, Error interrupt enable

\ USART1_BRR (read-write) Reset:0x0000
: USART1_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift USART1_BRR ; \ USART1_BRR_DIV_Mantissa, DIV_Mantissa
: USART1_BRR_DIV_Fraction ( %bbbb -- x addr ) USART1_BRR ; \ USART1_BRR_DIV_Fraction, DIV_Fraction

\ USART1_GTPR (read-write) Reset:0x0000
: USART1_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift USART1_GTPR ; \ USART1_GTPR_GT, Guard time value
: USART1_GTPR_PSC ( %bbbbbbbb -- x addr ) USART1_GTPR ; \ USART1_GTPR_PSC, Prescaler value

\ USART1_RTOR (read-write) Reset:0x0000
: USART1_RTOR_BLEN ( %bbbbbbbb -- x addr ) 24 lshift USART1_RTOR ; \ USART1_RTOR_BLEN, Block Length
: USART1_RTOR_RTO ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) USART1_RTOR ; \ USART1_RTOR_RTO, Receiver timeout value

\ USART1_RQR (write-only) Reset:0x0000
: USART1_RQR_TXFRQ ( -- x addr ) 4 bit USART1_RQR ; \ USART1_RQR_TXFRQ, Transmit data flush request
: USART1_RQR_RXFRQ ( -- x addr ) 3 bit USART1_RQR ; \ USART1_RQR_RXFRQ, Receive data flush request
: USART1_RQR_MMRQ ( -- x addr ) 2 bit USART1_RQR ; \ USART1_RQR_MMRQ, Mute mode request
: USART1_RQR_SBKRQ ( -- x addr ) 1 bit USART1_RQR ; \ USART1_RQR_SBKRQ, Send break request
: USART1_RQR_ABRRQ ( -- x addr ) 0 bit USART1_RQR ; \ USART1_RQR_ABRRQ, Auto baud rate request

\ USART1_ISR (read-only) Reset:0x00C0
: USART1_ISR_REACK? ( --  1|0 ) 22 bit USART1_ISR bit@ ; \ USART1_ISR_REACK, REACK
: USART1_ISR_TEACK? ( --  1|0 ) 21 bit USART1_ISR bit@ ; \ USART1_ISR_TEACK, TEACK
: USART1_ISR_WUF? ( --  1|0 ) 20 bit USART1_ISR bit@ ; \ USART1_ISR_WUF, WUF
: USART1_ISR_RWU? ( --  1|0 ) 19 bit USART1_ISR bit@ ; \ USART1_ISR_RWU, RWU
: USART1_ISR_SBKF? ( --  1|0 ) 18 bit USART1_ISR bit@ ; \ USART1_ISR_SBKF, SBKF
: USART1_ISR_CMF? ( --  1|0 ) 17 bit USART1_ISR bit@ ; \ USART1_ISR_CMF, CMF
: USART1_ISR_BUSY? ( --  1|0 ) 16 bit USART1_ISR bit@ ; \ USART1_ISR_BUSY, BUSY
: USART1_ISR_ABRF? ( --  1|0 ) 15 bit USART1_ISR bit@ ; \ USART1_ISR_ABRF, ABRF
: USART1_ISR_ABRE? ( --  1|0 ) 14 bit USART1_ISR bit@ ; \ USART1_ISR_ABRE, ABRE
: USART1_ISR_EOBF? ( --  1|0 ) 12 bit USART1_ISR bit@ ; \ USART1_ISR_EOBF, EOBF
: USART1_ISR_RTOF? ( --  1|0 ) 11 bit USART1_ISR bit@ ; \ USART1_ISR_RTOF, RTOF
: USART1_ISR_CTS? ( --  1|0 ) 10 bit USART1_ISR bit@ ; \ USART1_ISR_CTS, CTS
: USART1_ISR_CTSIF? ( --  1|0 ) 9 bit USART1_ISR bit@ ; \ USART1_ISR_CTSIF, CTSIF
: USART1_ISR_LBDF? ( --  1|0 ) 8 bit USART1_ISR bit@ ; \ USART1_ISR_LBDF, LBDF
: USART1_ISR_TXE? ( --  1|0 ) 7 bit USART1_ISR bit@ ; \ USART1_ISR_TXE, TXE
: USART1_ISR_TC? ( --  1|0 ) 6 bit USART1_ISR bit@ ; \ USART1_ISR_TC, TC
: USART1_ISR_RXNE? ( --  1|0 ) 5 bit USART1_ISR bit@ ; \ USART1_ISR_RXNE, RXNE
: USART1_ISR_IDLE? ( --  1|0 ) 4 bit USART1_ISR bit@ ; \ USART1_ISR_IDLE, IDLE
: USART1_ISR_ORE? ( --  1|0 ) 3 bit USART1_ISR bit@ ; \ USART1_ISR_ORE, ORE
: USART1_ISR_NF? ( --  1|0 ) 2 bit USART1_ISR bit@ ; \ USART1_ISR_NF, NF
: USART1_ISR_FE? ( --  1|0 ) 1 bit USART1_ISR bit@ ; \ USART1_ISR_FE, FE
: USART1_ISR_PE? ( --  1|0 ) 0 bit USART1_ISR bit@ ; \ USART1_ISR_PE, PE

\ USART1_ICR (write-only) Reset:0x0000
: USART1_ICR_WUCF ( -- x addr ) 20 bit USART1_ICR ; \ USART1_ICR_WUCF, Wakeup from Stop mode clear flag
: USART1_ICR_CMCF ( -- x addr ) 17 bit USART1_ICR ; \ USART1_ICR_CMCF, Character match clear flag
: USART1_ICR_EOBCF ( -- x addr ) 12 bit USART1_ICR ; \ USART1_ICR_EOBCF, End of block clear flag
: USART1_ICR_RTOCF ( -- x addr ) 11 bit USART1_ICR ; \ USART1_ICR_RTOCF, Receiver timeout clear flag
: USART1_ICR_CTSCF ( -- x addr ) 9 bit USART1_ICR ; \ USART1_ICR_CTSCF, CTS clear flag
: USART1_ICR_LBDCF ( -- x addr ) 8 bit USART1_ICR ; \ USART1_ICR_LBDCF, LIN break detection clear flag
: USART1_ICR_TCCF ( -- x addr ) 6 bit USART1_ICR ; \ USART1_ICR_TCCF, Transmission complete clear flag
: USART1_ICR_IDLECF ( -- x addr ) 4 bit USART1_ICR ; \ USART1_ICR_IDLECF, Idle line detected clear flag
: USART1_ICR_ORECF ( -- x addr ) 3 bit USART1_ICR ; \ USART1_ICR_ORECF, Overrun error clear flag
: USART1_ICR_NCF ( -- x addr ) 2 bit USART1_ICR ; \ USART1_ICR_NCF, Noise detected clear flag
: USART1_ICR_FECF ( -- x addr ) 1 bit USART1_ICR ; \ USART1_ICR_FECF, Framing error clear flag
: USART1_ICR_PECF ( -- x addr ) 0 bit USART1_ICR ; \ USART1_ICR_PECF, Parity error clear flag

\ USART1_RDR (read-only) Reset:0x0000
: USART1_RDR_RDR? ( --  x ) USART1_RDR @ ; \ USART1_RDR_RDR, Receive data value

\ USART1_TDR (read-write) Reset:0x0000
: USART1_TDR_TDR ( %bbbbbbbbb -- x addr ) USART1_TDR ; \ USART1_TDR_TDR, Transmit data value

\ USART3_CR1 (read-write) Reset:0x0000
: USART3_CR1_M1 ( -- x addr ) 28 bit USART3_CR1 ; \ USART3_CR1_M1, Word length
: USART3_CR1_EOBIE ( -- x addr ) 27 bit USART3_CR1 ; \ USART3_CR1_EOBIE, End of Block interrupt enable
: USART3_CR1_RTOIE ( -- x addr ) 26 bit USART3_CR1 ; \ USART3_CR1_RTOIE, Receiver timeout interrupt enable
: USART3_CR1_DEAT4 ( -- x addr ) 25 bit USART3_CR1 ; \ USART3_CR1_DEAT4, Driver Enable assertion time
: USART3_CR1_DEAT3 ( -- x addr ) 24 bit USART3_CR1 ; \ USART3_CR1_DEAT3, DEAT3
: USART3_CR1_DEAT2 ( -- x addr ) 23 bit USART3_CR1 ; \ USART3_CR1_DEAT2, DEAT2
: USART3_CR1_DEAT1 ( -- x addr ) 22 bit USART3_CR1 ; \ USART3_CR1_DEAT1, DEAT1
: USART3_CR1_DEAT0 ( -- x addr ) 21 bit USART3_CR1 ; \ USART3_CR1_DEAT0, DEAT0
: USART3_CR1_DEDT4 ( -- x addr ) 20 bit USART3_CR1 ; \ USART3_CR1_DEDT4, Driver Enable de-assertion time
: USART3_CR1_DEDT3 ( -- x addr ) 19 bit USART3_CR1 ; \ USART3_CR1_DEDT3, DEDT3
: USART3_CR1_DEDT2 ( -- x addr ) 18 bit USART3_CR1 ; \ USART3_CR1_DEDT2, DEDT2
: USART3_CR1_DEDT1 ( -- x addr ) 17 bit USART3_CR1 ; \ USART3_CR1_DEDT1, DEDT1
: USART3_CR1_DEDT0 ( -- x addr ) 16 bit USART3_CR1 ; \ USART3_CR1_DEDT0, DEDT0
: USART3_CR1_OVER8 ( -- x addr ) 15 bit USART3_CR1 ; \ USART3_CR1_OVER8, Oversampling mode
: USART3_CR1_CMIE ( -- x addr ) 14 bit USART3_CR1 ; \ USART3_CR1_CMIE, Character match interrupt enable
: USART3_CR1_MME ( -- x addr ) 13 bit USART3_CR1 ; \ USART3_CR1_MME, Mute mode enable
: USART3_CR1_M0 ( -- x addr ) 12 bit USART3_CR1 ; \ USART3_CR1_M0, Word length
: USART3_CR1_WAKE ( -- x addr ) 11 bit USART3_CR1 ; \ USART3_CR1_WAKE, Receiver wakeup method
: USART3_CR1_PCE ( -- x addr ) 10 bit USART3_CR1 ; \ USART3_CR1_PCE, Parity control enable
: USART3_CR1_PS ( -- x addr ) 9 bit USART3_CR1 ; \ USART3_CR1_PS, Parity selection
: USART3_CR1_PEIE ( -- x addr ) 8 bit USART3_CR1 ; \ USART3_CR1_PEIE, PE interrupt enable
: USART3_CR1_TXEIE ( -- x addr ) 7 bit USART3_CR1 ; \ USART3_CR1_TXEIE, interrupt enable
: USART3_CR1_TCIE ( -- x addr ) 6 bit USART3_CR1 ; \ USART3_CR1_TCIE, Transmission complete interrupt enable
: USART3_CR1_RXNEIE ( -- x addr ) 5 bit USART3_CR1 ; \ USART3_CR1_RXNEIE, RXNE interrupt enable
: USART3_CR1_IDLEIE ( -- x addr ) 4 bit USART3_CR1 ; \ USART3_CR1_IDLEIE, IDLE interrupt enable
: USART3_CR1_TE ( -- x addr ) 3 bit USART3_CR1 ; \ USART3_CR1_TE, Transmitter enable
: USART3_CR1_RE ( -- x addr ) 2 bit USART3_CR1 ; \ USART3_CR1_RE, Receiver enable
: USART3_CR1_UESM ( -- x addr ) 1 bit USART3_CR1 ; \ USART3_CR1_UESM, USART enable in Stop mode
: USART3_CR1_UE ( -- x addr ) 0 bit USART3_CR1 ; \ USART3_CR1_UE, USART enable

\ USART3_CR2 (read-write) Reset:0x0000
: USART3_CR2_ADD4_7 ( %bbbb -- x addr ) 28 lshift USART3_CR2 ; \ USART3_CR2_ADD4_7, Address of the USART node
: USART3_CR2_ADD0_3 ( %bbbb -- x addr ) 24 lshift USART3_CR2 ; \ USART3_CR2_ADD0_3, Address of the USART node
: USART3_CR2_RTOEN ( -- x addr ) 23 bit USART3_CR2 ; \ USART3_CR2_RTOEN, Receiver timeout enable
: USART3_CR2_ABRMOD1 ( -- x addr ) 22 bit USART3_CR2 ; \ USART3_CR2_ABRMOD1, Auto baud rate mode
: USART3_CR2_ABRMOD0 ( -- x addr ) 21 bit USART3_CR2 ; \ USART3_CR2_ABRMOD0, ABRMOD0
: USART3_CR2_ABREN ( -- x addr ) 20 bit USART3_CR2 ; \ USART3_CR2_ABREN, Auto baud rate enable
: USART3_CR2_MSBFIRST ( -- x addr ) 19 bit USART3_CR2 ; \ USART3_CR2_MSBFIRST, Most significant bit first
: USART3_CR2_TAINV ( -- x addr ) 18 bit USART3_CR2 ; \ USART3_CR2_TAINV, Binary data inversion
: USART3_CR2_TXINV ( -- x addr ) 17 bit USART3_CR2 ; \ USART3_CR2_TXINV, TX pin active level inversion
: USART3_CR2_RXINV ( -- x addr ) 16 bit USART3_CR2 ; \ USART3_CR2_RXINV, RX pin active level inversion
: USART3_CR2_SWAP ( -- x addr ) 15 bit USART3_CR2 ; \ USART3_CR2_SWAP, Swap TX/RX pins
: USART3_CR2_LINEN ( -- x addr ) 14 bit USART3_CR2 ; \ USART3_CR2_LINEN, LIN mode enable
: USART3_CR2_STOP ( %bb -- x addr ) 12 lshift USART3_CR2 ; \ USART3_CR2_STOP, STOP bits
: USART3_CR2_CLKEN ( -- x addr ) 11 bit USART3_CR2 ; \ USART3_CR2_CLKEN, Clock enable
: USART3_CR2_CPOL ( -- x addr ) 10 bit USART3_CR2 ; \ USART3_CR2_CPOL, Clock polarity
: USART3_CR2_CPHA ( -- x addr ) 9 bit USART3_CR2 ; \ USART3_CR2_CPHA, Clock phase
: USART3_CR2_LBCL ( -- x addr ) 8 bit USART3_CR2 ; \ USART3_CR2_LBCL, Last bit clock pulse
: USART3_CR2_LBDIE ( -- x addr ) 6 bit USART3_CR2 ; \ USART3_CR2_LBDIE, LIN break detection interrupt enable
: USART3_CR2_LBDL ( -- x addr ) 5 bit USART3_CR2 ; \ USART3_CR2_LBDL, LIN break detection length
: USART3_CR2_ADDM7 ( -- x addr ) 4 bit USART3_CR2 ; \ USART3_CR2_ADDM7, 7-bit Address Detection/4-bit Address Detection

\ USART3_CR3 (read-write) Reset:0x0000
: USART3_CR3_WUFIE ( -- x addr ) 22 bit USART3_CR3 ; \ USART3_CR3_WUFIE, Wakeup from Stop mode interrupt enable
: USART3_CR3_WUS ( %bb -- x addr ) 20 lshift USART3_CR3 ; \ USART3_CR3_WUS, Wakeup from Stop mode interrupt flag selection
: USART3_CR3_SCARCNT ( %bbb -- x addr ) 17 lshift USART3_CR3 ; \ USART3_CR3_SCARCNT, Smartcard auto-retry count
: USART3_CR3_DEP ( -- x addr ) 15 bit USART3_CR3 ; \ USART3_CR3_DEP, Driver enable polarity selection
: USART3_CR3_DEM ( -- x addr ) 14 bit USART3_CR3 ; \ USART3_CR3_DEM, Driver enable mode
: USART3_CR3_DDRE ( -- x addr ) 13 bit USART3_CR3 ; \ USART3_CR3_DDRE, DMA Disable on Reception Error
: USART3_CR3_OVRDIS ( -- x addr ) 12 bit USART3_CR3 ; \ USART3_CR3_OVRDIS, Overrun Disable
: USART3_CR3_ONEBIT ( -- x addr ) 11 bit USART3_CR3 ; \ USART3_CR3_ONEBIT, One sample bit method enable
: USART3_CR3_CTSIE ( -- x addr ) 10 bit USART3_CR3 ; \ USART3_CR3_CTSIE, CTS interrupt enable
: USART3_CR3_CTSE ( -- x addr ) 9 bit USART3_CR3 ; \ USART3_CR3_CTSE, CTS enable
: USART3_CR3_RTSE ( -- x addr ) 8 bit USART3_CR3 ; \ USART3_CR3_RTSE, RTS enable
: USART3_CR3_DMAT ( -- x addr ) 7 bit USART3_CR3 ; \ USART3_CR3_DMAT, DMA enable transmitter
: USART3_CR3_DMAR ( -- x addr ) 6 bit USART3_CR3 ; \ USART3_CR3_DMAR, DMA enable receiver
: USART3_CR3_SCEN ( -- x addr ) 5 bit USART3_CR3 ; \ USART3_CR3_SCEN, Smartcard mode enable
: USART3_CR3_NACK ( -- x addr ) 4 bit USART3_CR3 ; \ USART3_CR3_NACK, Smartcard NACK enable
: USART3_CR3_HDSEL ( -- x addr ) 3 bit USART3_CR3 ; \ USART3_CR3_HDSEL, Half-duplex selection
: USART3_CR3_IRLP ( -- x addr ) 2 bit USART3_CR3 ; \ USART3_CR3_IRLP, Ir low-power
: USART3_CR3_IREN ( -- x addr ) 1 bit USART3_CR3 ; \ USART3_CR3_IREN, Ir mode enable
: USART3_CR3_EIE ( -- x addr ) 0 bit USART3_CR3 ; \ USART3_CR3_EIE, Error interrupt enable

\ USART3_BRR (read-write) Reset:0x0000
: USART3_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift USART3_BRR ; \ USART3_BRR_DIV_Mantissa, DIV_Mantissa
: USART3_BRR_DIV_Fraction ( %bbbb -- x addr ) USART3_BRR ; \ USART3_BRR_DIV_Fraction, DIV_Fraction

\ USART3_GTPR (read-write) Reset:0x0000
: USART3_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift USART3_GTPR ; \ USART3_GTPR_GT, Guard time value
: USART3_GTPR_PSC ( %bbbbbbbb -- x addr ) USART3_GTPR ; \ USART3_GTPR_PSC, Prescaler value

\ USART3_RTOR (read-write) Reset:0x0000
: USART3_RTOR_BLEN ( %bbbbbbbb -- x addr ) 24 lshift USART3_RTOR ; \ USART3_RTOR_BLEN, Block Length
: USART3_RTOR_RTO ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) USART3_RTOR ; \ USART3_RTOR_RTO, Receiver timeout value

\ USART3_RQR (write-only) Reset:0x0000
: USART3_RQR_TXFRQ ( -- x addr ) 4 bit USART3_RQR ; \ USART3_RQR_TXFRQ, Transmit data flush request
: USART3_RQR_RXFRQ ( -- x addr ) 3 bit USART3_RQR ; \ USART3_RQR_RXFRQ, Receive data flush request
: USART3_RQR_MMRQ ( -- x addr ) 2 bit USART3_RQR ; \ USART3_RQR_MMRQ, Mute mode request
: USART3_RQR_SBKRQ ( -- x addr ) 1 bit USART3_RQR ; \ USART3_RQR_SBKRQ, Send break request
: USART3_RQR_ABRRQ ( -- x addr ) 0 bit USART3_RQR ; \ USART3_RQR_ABRRQ, Auto baud rate request

\ USART3_ISR (read-only) Reset:0x00C0
: USART3_ISR_REACK? ( --  1|0 ) 22 bit USART3_ISR bit@ ; \ USART3_ISR_REACK, REACK
: USART3_ISR_TEACK? ( --  1|0 ) 21 bit USART3_ISR bit@ ; \ USART3_ISR_TEACK, TEACK
: USART3_ISR_WUF? ( --  1|0 ) 20 bit USART3_ISR bit@ ; \ USART3_ISR_WUF, WUF
: USART3_ISR_RWU? ( --  1|0 ) 19 bit USART3_ISR bit@ ; \ USART3_ISR_RWU, RWU
: USART3_ISR_SBKF? ( --  1|0 ) 18 bit USART3_ISR bit@ ; \ USART3_ISR_SBKF, SBKF
: USART3_ISR_CMF? ( --  1|0 ) 17 bit USART3_ISR bit@ ; \ USART3_ISR_CMF, CMF
: USART3_ISR_BUSY? ( --  1|0 ) 16 bit USART3_ISR bit@ ; \ USART3_ISR_BUSY, BUSY
: USART3_ISR_ABRF? ( --  1|0 ) 15 bit USART3_ISR bit@ ; \ USART3_ISR_ABRF, ABRF
: USART3_ISR_ABRE? ( --  1|0 ) 14 bit USART3_ISR bit@ ; \ USART3_ISR_ABRE, ABRE
: USART3_ISR_EOBF? ( --  1|0 ) 12 bit USART3_ISR bit@ ; \ USART3_ISR_EOBF, EOBF
: USART3_ISR_RTOF? ( --  1|0 ) 11 bit USART3_ISR bit@ ; \ USART3_ISR_RTOF, RTOF
: USART3_ISR_CTS? ( --  1|0 ) 10 bit USART3_ISR bit@ ; \ USART3_ISR_CTS, CTS
: USART3_ISR_CTSIF? ( --  1|0 ) 9 bit USART3_ISR bit@ ; \ USART3_ISR_CTSIF, CTSIF
: USART3_ISR_LBDF? ( --  1|0 ) 8 bit USART3_ISR bit@ ; \ USART3_ISR_LBDF, LBDF
: USART3_ISR_TXE? ( --  1|0 ) 7 bit USART3_ISR bit@ ; \ USART3_ISR_TXE, TXE
: USART3_ISR_TC? ( --  1|0 ) 6 bit USART3_ISR bit@ ; \ USART3_ISR_TC, TC
: USART3_ISR_RXNE? ( --  1|0 ) 5 bit USART3_ISR bit@ ; \ USART3_ISR_RXNE, RXNE
: USART3_ISR_IDLE? ( --  1|0 ) 4 bit USART3_ISR bit@ ; \ USART3_ISR_IDLE, IDLE
: USART3_ISR_ORE? ( --  1|0 ) 3 bit USART3_ISR bit@ ; \ USART3_ISR_ORE, ORE
: USART3_ISR_NF? ( --  1|0 ) 2 bit USART3_ISR bit@ ; \ USART3_ISR_NF, NF
: USART3_ISR_FE? ( --  1|0 ) 1 bit USART3_ISR bit@ ; \ USART3_ISR_FE, FE
: USART3_ISR_PE? ( --  1|0 ) 0 bit USART3_ISR bit@ ; \ USART3_ISR_PE, PE

\ USART3_ICR (write-only) Reset:0x0000
: USART3_ICR_WUCF ( -- x addr ) 20 bit USART3_ICR ; \ USART3_ICR_WUCF, Wakeup from Stop mode clear flag
: USART3_ICR_CMCF ( -- x addr ) 17 bit USART3_ICR ; \ USART3_ICR_CMCF, Character match clear flag
: USART3_ICR_EOBCF ( -- x addr ) 12 bit USART3_ICR ; \ USART3_ICR_EOBCF, End of block clear flag
: USART3_ICR_RTOCF ( -- x addr ) 11 bit USART3_ICR ; \ USART3_ICR_RTOCF, Receiver timeout clear flag
: USART3_ICR_CTSCF ( -- x addr ) 9 bit USART3_ICR ; \ USART3_ICR_CTSCF, CTS clear flag
: USART3_ICR_LBDCF ( -- x addr ) 8 bit USART3_ICR ; \ USART3_ICR_LBDCF, LIN break detection clear flag
: USART3_ICR_TCCF ( -- x addr ) 6 bit USART3_ICR ; \ USART3_ICR_TCCF, Transmission complete clear flag
: USART3_ICR_IDLECF ( -- x addr ) 4 bit USART3_ICR ; \ USART3_ICR_IDLECF, Idle line detected clear flag
: USART3_ICR_ORECF ( -- x addr ) 3 bit USART3_ICR ; \ USART3_ICR_ORECF, Overrun error clear flag
: USART3_ICR_NCF ( -- x addr ) 2 bit USART3_ICR ; \ USART3_ICR_NCF, Noise detected clear flag
: USART3_ICR_FECF ( -- x addr ) 1 bit USART3_ICR ; \ USART3_ICR_FECF, Framing error clear flag
: USART3_ICR_PECF ( -- x addr ) 0 bit USART3_ICR ; \ USART3_ICR_PECF, Parity error clear flag

\ USART3_RDR (read-only) Reset:0x0000
: USART3_RDR_RDR? ( --  x ) USART3_RDR @ ; \ USART3_RDR_RDR, Receive data value

\ USART3_TDR (read-write) Reset:0x0000
: USART3_TDR_TDR ( %bbbbbbbbb -- x addr ) USART3_TDR ; \ USART3_TDR_TDR, Transmit data value

\ USART2_CR1 (read-write) Reset:0x0000
: USART2_CR1_M1 ( -- x addr ) 28 bit USART2_CR1 ; \ USART2_CR1_M1, Word length
: USART2_CR1_EOBIE ( -- x addr ) 27 bit USART2_CR1 ; \ USART2_CR1_EOBIE, End of Block interrupt enable
: USART2_CR1_RTOIE ( -- x addr ) 26 bit USART2_CR1 ; \ USART2_CR1_RTOIE, Receiver timeout interrupt enable
: USART2_CR1_DEAT4 ( -- x addr ) 25 bit USART2_CR1 ; \ USART2_CR1_DEAT4, Driver Enable assertion time
: USART2_CR1_DEAT3 ( -- x addr ) 24 bit USART2_CR1 ; \ USART2_CR1_DEAT3, DEAT3
: USART2_CR1_DEAT2 ( -- x addr ) 23 bit USART2_CR1 ; \ USART2_CR1_DEAT2, DEAT2
: USART2_CR1_DEAT1 ( -- x addr ) 22 bit USART2_CR1 ; \ USART2_CR1_DEAT1, DEAT1
: USART2_CR1_DEAT0 ( -- x addr ) 21 bit USART2_CR1 ; \ USART2_CR1_DEAT0, DEAT0
: USART2_CR1_DEDT4 ( -- x addr ) 20 bit USART2_CR1 ; \ USART2_CR1_DEDT4, Driver Enable de-assertion time
: USART2_CR1_DEDT3 ( -- x addr ) 19 bit USART2_CR1 ; \ USART2_CR1_DEDT3, DEDT3
: USART2_CR1_DEDT2 ( -- x addr ) 18 bit USART2_CR1 ; \ USART2_CR1_DEDT2, DEDT2
: USART2_CR1_DEDT1 ( -- x addr ) 17 bit USART2_CR1 ; \ USART2_CR1_DEDT1, DEDT1
: USART2_CR1_DEDT0 ( -- x addr ) 16 bit USART2_CR1 ; \ USART2_CR1_DEDT0, DEDT0
: USART2_CR1_OVER8 ( -- x addr ) 15 bit USART2_CR1 ; \ USART2_CR1_OVER8, Oversampling mode
: USART2_CR1_CMIE ( -- x addr ) 14 bit USART2_CR1 ; \ USART2_CR1_CMIE, Character match interrupt enable
: USART2_CR1_MME ( -- x addr ) 13 bit USART2_CR1 ; \ USART2_CR1_MME, Mute mode enable
: USART2_CR1_M0 ( -- x addr ) 12 bit USART2_CR1 ; \ USART2_CR1_M0, Word length
: USART2_CR1_WAKE ( -- x addr ) 11 bit USART2_CR1 ; \ USART2_CR1_WAKE, Receiver wakeup method
: USART2_CR1_PCE ( -- x addr ) 10 bit USART2_CR1 ; \ USART2_CR1_PCE, Parity control enable
: USART2_CR1_PS ( -- x addr ) 9 bit USART2_CR1 ; \ USART2_CR1_PS, Parity selection
: USART2_CR1_PEIE ( -- x addr ) 8 bit USART2_CR1 ; \ USART2_CR1_PEIE, PE interrupt enable
: USART2_CR1_TXEIE ( -- x addr ) 7 bit USART2_CR1 ; \ USART2_CR1_TXEIE, interrupt enable
: USART2_CR1_TCIE ( -- x addr ) 6 bit USART2_CR1 ; \ USART2_CR1_TCIE, Transmission complete interrupt enable
: USART2_CR1_RXNEIE ( -- x addr ) 5 bit USART2_CR1 ; \ USART2_CR1_RXNEIE, RXNE interrupt enable
: USART2_CR1_IDLEIE ( -- x addr ) 4 bit USART2_CR1 ; \ USART2_CR1_IDLEIE, IDLE interrupt enable
: USART2_CR1_TE ( -- x addr ) 3 bit USART2_CR1 ; \ USART2_CR1_TE, Transmitter enable
: USART2_CR1_RE ( -- x addr ) 2 bit USART2_CR1 ; \ USART2_CR1_RE, Receiver enable
: USART2_CR1_UESM ( -- x addr ) 1 bit USART2_CR1 ; \ USART2_CR1_UESM, USART enable in Stop mode
: USART2_CR1_UE ( -- x addr ) 0 bit USART2_CR1 ; \ USART2_CR1_UE, USART enable

\ USART2_CR2 (read-write) Reset:0x0000
: USART2_CR2_ADD4_7 ( %bbbb -- x addr ) 28 lshift USART2_CR2 ; \ USART2_CR2_ADD4_7, Address of the USART node
: USART2_CR2_ADD0_3 ( %bbbb -- x addr ) 24 lshift USART2_CR2 ; \ USART2_CR2_ADD0_3, Address of the USART node
: USART2_CR2_RTOEN ( -- x addr ) 23 bit USART2_CR2 ; \ USART2_CR2_RTOEN, Receiver timeout enable
: USART2_CR2_ABRMOD1 ( -- x addr ) 22 bit USART2_CR2 ; \ USART2_CR2_ABRMOD1, Auto baud rate mode
: USART2_CR2_ABRMOD0 ( -- x addr ) 21 bit USART2_CR2 ; \ USART2_CR2_ABRMOD0, ABRMOD0
: USART2_CR2_ABREN ( -- x addr ) 20 bit USART2_CR2 ; \ USART2_CR2_ABREN, Auto baud rate enable
: USART2_CR2_MSBFIRST ( -- x addr ) 19 bit USART2_CR2 ; \ USART2_CR2_MSBFIRST, Most significant bit first
: USART2_CR2_TAINV ( -- x addr ) 18 bit USART2_CR2 ; \ USART2_CR2_TAINV, Binary data inversion
: USART2_CR2_TXINV ( -- x addr ) 17 bit USART2_CR2 ; \ USART2_CR2_TXINV, TX pin active level inversion
: USART2_CR2_RXINV ( -- x addr ) 16 bit USART2_CR2 ; \ USART2_CR2_RXINV, RX pin active level inversion
: USART2_CR2_SWAP ( -- x addr ) 15 bit USART2_CR2 ; \ USART2_CR2_SWAP, Swap TX/RX pins
: USART2_CR2_LINEN ( -- x addr ) 14 bit USART2_CR2 ; \ USART2_CR2_LINEN, LIN mode enable
: USART2_CR2_STOP ( %bb -- x addr ) 12 lshift USART2_CR2 ; \ USART2_CR2_STOP, STOP bits
: USART2_CR2_CLKEN ( -- x addr ) 11 bit USART2_CR2 ; \ USART2_CR2_CLKEN, Clock enable
: USART2_CR2_CPOL ( -- x addr ) 10 bit USART2_CR2 ; \ USART2_CR2_CPOL, Clock polarity
: USART2_CR2_CPHA ( -- x addr ) 9 bit USART2_CR2 ; \ USART2_CR2_CPHA, Clock phase
: USART2_CR2_LBCL ( -- x addr ) 8 bit USART2_CR2 ; \ USART2_CR2_LBCL, Last bit clock pulse
: USART2_CR2_LBDIE ( -- x addr ) 6 bit USART2_CR2 ; \ USART2_CR2_LBDIE, LIN break detection interrupt enable
: USART2_CR2_LBDL ( -- x addr ) 5 bit USART2_CR2 ; \ USART2_CR2_LBDL, LIN break detection length
: USART2_CR2_ADDM7 ( -- x addr ) 4 bit USART2_CR2 ; \ USART2_CR2_ADDM7, 7-bit Address Detection/4-bit Address Detection

\ USART2_CR3 (read-write) Reset:0x0000
: USART2_CR3_WUFIE ( -- x addr ) 22 bit USART2_CR3 ; \ USART2_CR3_WUFIE, Wakeup from Stop mode interrupt enable
: USART2_CR3_WUS ( %bb -- x addr ) 20 lshift USART2_CR3 ; \ USART2_CR3_WUS, Wakeup from Stop mode interrupt flag selection
: USART2_CR3_SCARCNT ( %bbb -- x addr ) 17 lshift USART2_CR3 ; \ USART2_CR3_SCARCNT, Smartcard auto-retry count
: USART2_CR3_DEP ( -- x addr ) 15 bit USART2_CR3 ; \ USART2_CR3_DEP, Driver enable polarity selection
: USART2_CR3_DEM ( -- x addr ) 14 bit USART2_CR3 ; \ USART2_CR3_DEM, Driver enable mode
: USART2_CR3_DDRE ( -- x addr ) 13 bit USART2_CR3 ; \ USART2_CR3_DDRE, DMA Disable on Reception Error
: USART2_CR3_OVRDIS ( -- x addr ) 12 bit USART2_CR3 ; \ USART2_CR3_OVRDIS, Overrun Disable
: USART2_CR3_ONEBIT ( -- x addr ) 11 bit USART2_CR3 ; \ USART2_CR3_ONEBIT, One sample bit method enable
: USART2_CR3_CTSIE ( -- x addr ) 10 bit USART2_CR3 ; \ USART2_CR3_CTSIE, CTS interrupt enable
: USART2_CR3_CTSE ( -- x addr ) 9 bit USART2_CR3 ; \ USART2_CR3_CTSE, CTS enable
: USART2_CR3_RTSE ( -- x addr ) 8 bit USART2_CR3 ; \ USART2_CR3_RTSE, RTS enable
: USART2_CR3_DMAT ( -- x addr ) 7 bit USART2_CR3 ; \ USART2_CR3_DMAT, DMA enable transmitter
: USART2_CR3_DMAR ( -- x addr ) 6 bit USART2_CR3 ; \ USART2_CR3_DMAR, DMA enable receiver
: USART2_CR3_SCEN ( -- x addr ) 5 bit USART2_CR3 ; \ USART2_CR3_SCEN, Smartcard mode enable
: USART2_CR3_NACK ( -- x addr ) 4 bit USART2_CR3 ; \ USART2_CR3_NACK, Smartcard NACK enable
: USART2_CR3_HDSEL ( -- x addr ) 3 bit USART2_CR3 ; \ USART2_CR3_HDSEL, Half-duplex selection
: USART2_CR3_IRLP ( -- x addr ) 2 bit USART2_CR3 ; \ USART2_CR3_IRLP, Ir low-power
: USART2_CR3_IREN ( -- x addr ) 1 bit USART2_CR3 ; \ USART2_CR3_IREN, Ir mode enable
: USART2_CR3_EIE ( -- x addr ) 0 bit USART2_CR3 ; \ USART2_CR3_EIE, Error interrupt enable

\ USART2_BRR (read-write) Reset:0x0000
: USART2_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift USART2_BRR ; \ USART2_BRR_DIV_Mantissa, DIV_Mantissa
: USART2_BRR_DIV_Fraction ( %bbbb -- x addr ) USART2_BRR ; \ USART2_BRR_DIV_Fraction, DIV_Fraction

\ USART2_GTPR (read-write) Reset:0x0000
: USART2_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift USART2_GTPR ; \ USART2_GTPR_GT, Guard time value
: USART2_GTPR_PSC ( %bbbbbbbb -- x addr ) USART2_GTPR ; \ USART2_GTPR_PSC, Prescaler value

\ USART2_RTOR (read-write) Reset:0x0000
: USART2_RTOR_BLEN ( %bbbbbbbb -- x addr ) 24 lshift USART2_RTOR ; \ USART2_RTOR_BLEN, Block Length
: USART2_RTOR_RTO ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) USART2_RTOR ; \ USART2_RTOR_RTO, Receiver timeout value

\ USART2_RQR (write-only) Reset:0x0000
: USART2_RQR_TXFRQ ( -- x addr ) 4 bit USART2_RQR ; \ USART2_RQR_TXFRQ, Transmit data flush request
: USART2_RQR_RXFRQ ( -- x addr ) 3 bit USART2_RQR ; \ USART2_RQR_RXFRQ, Receive data flush request
: USART2_RQR_MMRQ ( -- x addr ) 2 bit USART2_RQR ; \ USART2_RQR_MMRQ, Mute mode request
: USART2_RQR_SBKRQ ( -- x addr ) 1 bit USART2_RQR ; \ USART2_RQR_SBKRQ, Send break request
: USART2_RQR_ABRRQ ( -- x addr ) 0 bit USART2_RQR ; \ USART2_RQR_ABRRQ, Auto baud rate request

\ USART2_ISR (read-only) Reset:0x00C0
: USART2_ISR_REACK? ( --  1|0 ) 22 bit USART2_ISR bit@ ; \ USART2_ISR_REACK, REACK
: USART2_ISR_TEACK? ( --  1|0 ) 21 bit USART2_ISR bit@ ; \ USART2_ISR_TEACK, TEACK
: USART2_ISR_WUF? ( --  1|0 ) 20 bit USART2_ISR bit@ ; \ USART2_ISR_WUF, WUF
: USART2_ISR_RWU? ( --  1|0 ) 19 bit USART2_ISR bit@ ; \ USART2_ISR_RWU, RWU
: USART2_ISR_SBKF? ( --  1|0 ) 18 bit USART2_ISR bit@ ; \ USART2_ISR_SBKF, SBKF
: USART2_ISR_CMF? ( --  1|0 ) 17 bit USART2_ISR bit@ ; \ USART2_ISR_CMF, CMF
: USART2_ISR_BUSY? ( --  1|0 ) 16 bit USART2_ISR bit@ ; \ USART2_ISR_BUSY, BUSY
: USART2_ISR_ABRF? ( --  1|0 ) 15 bit USART2_ISR bit@ ; \ USART2_ISR_ABRF, ABRF
: USART2_ISR_ABRE? ( --  1|0 ) 14 bit USART2_ISR bit@ ; \ USART2_ISR_ABRE, ABRE
: USART2_ISR_EOBF? ( --  1|0 ) 12 bit USART2_ISR bit@ ; \ USART2_ISR_EOBF, EOBF
: USART2_ISR_RTOF? ( --  1|0 ) 11 bit USART2_ISR bit@ ; \ USART2_ISR_RTOF, RTOF
: USART2_ISR_CTS? ( --  1|0 ) 10 bit USART2_ISR bit@ ; \ USART2_ISR_CTS, CTS
: USART2_ISR_CTSIF? ( --  1|0 ) 9 bit USART2_ISR bit@ ; \ USART2_ISR_CTSIF, CTSIF
: USART2_ISR_LBDF? ( --  1|0 ) 8 bit USART2_ISR bit@ ; \ USART2_ISR_LBDF, LBDF
: USART2_ISR_TXE? ( --  1|0 ) 7 bit USART2_ISR bit@ ; \ USART2_ISR_TXE, TXE
: USART2_ISR_TC? ( --  1|0 ) 6 bit USART2_ISR bit@ ; \ USART2_ISR_TC, TC
: USART2_ISR_RXNE? ( --  1|0 ) 5 bit USART2_ISR bit@ ; \ USART2_ISR_RXNE, RXNE
: USART2_ISR_IDLE? ( --  1|0 ) 4 bit USART2_ISR bit@ ; \ USART2_ISR_IDLE, IDLE
: USART2_ISR_ORE? ( --  1|0 ) 3 bit USART2_ISR bit@ ; \ USART2_ISR_ORE, ORE
: USART2_ISR_NF? ( --  1|0 ) 2 bit USART2_ISR bit@ ; \ USART2_ISR_NF, NF
: USART2_ISR_FE? ( --  1|0 ) 1 bit USART2_ISR bit@ ; \ USART2_ISR_FE, FE
: USART2_ISR_PE? ( --  1|0 ) 0 bit USART2_ISR bit@ ; \ USART2_ISR_PE, PE

\ USART2_ICR (write-only) Reset:0x0000
: USART2_ICR_WUCF ( -- x addr ) 20 bit USART2_ICR ; \ USART2_ICR_WUCF, Wakeup from Stop mode clear flag
: USART2_ICR_CMCF ( -- x addr ) 17 bit USART2_ICR ; \ USART2_ICR_CMCF, Character match clear flag
: USART2_ICR_EOBCF ( -- x addr ) 12 bit USART2_ICR ; \ USART2_ICR_EOBCF, End of block clear flag
: USART2_ICR_RTOCF ( -- x addr ) 11 bit USART2_ICR ; \ USART2_ICR_RTOCF, Receiver timeout clear flag
: USART2_ICR_CTSCF ( -- x addr ) 9 bit USART2_ICR ; \ USART2_ICR_CTSCF, CTS clear flag
: USART2_ICR_LBDCF ( -- x addr ) 8 bit USART2_ICR ; \ USART2_ICR_LBDCF, LIN break detection clear flag
: USART2_ICR_TCCF ( -- x addr ) 6 bit USART2_ICR ; \ USART2_ICR_TCCF, Transmission complete clear flag
: USART2_ICR_IDLECF ( -- x addr ) 4 bit USART2_ICR ; \ USART2_ICR_IDLECF, Idle line detected clear flag
: USART2_ICR_ORECF ( -- x addr ) 3 bit USART2_ICR ; \ USART2_ICR_ORECF, Overrun error clear flag
: USART2_ICR_NCF ( -- x addr ) 2 bit USART2_ICR ; \ USART2_ICR_NCF, Noise detected clear flag
: USART2_ICR_FECF ( -- x addr ) 1 bit USART2_ICR ; \ USART2_ICR_FECF, Framing error clear flag
: USART2_ICR_PECF ( -- x addr ) 0 bit USART2_ICR ; \ USART2_ICR_PECF, Parity error clear flag

\ USART2_RDR (read-only) Reset:0x0000
: USART2_RDR_RDR? ( --  x ) USART2_RDR @ ; \ USART2_RDR_RDR, Receive data value

\ USART2_TDR (read-write) Reset:0x0000
: USART2_TDR_TDR ( %bbbbbbbbb -- x addr ) USART2_TDR ; \ USART2_TDR_TDR, Transmit data value

\ UART5_CR1 (read-write) Reset:0x0000
: UART5_CR1_M1 ( -- x addr ) 28 bit UART5_CR1 ; \ UART5_CR1_M1, Word length
: UART5_CR1_EOBIE ( -- x addr ) 27 bit UART5_CR1 ; \ UART5_CR1_EOBIE, End of Block interrupt enable
: UART5_CR1_RTOIE ( -- x addr ) 26 bit UART5_CR1 ; \ UART5_CR1_RTOIE, Receiver timeout interrupt enable
: UART5_CR1_DEAT4 ( -- x addr ) 25 bit UART5_CR1 ; \ UART5_CR1_DEAT4, Driver Enable assertion time
: UART5_CR1_DEAT3 ( -- x addr ) 24 bit UART5_CR1 ; \ UART5_CR1_DEAT3, DEAT3
: UART5_CR1_DEAT2 ( -- x addr ) 23 bit UART5_CR1 ; \ UART5_CR1_DEAT2, DEAT2
: UART5_CR1_DEAT1 ( -- x addr ) 22 bit UART5_CR1 ; \ UART5_CR1_DEAT1, DEAT1
: UART5_CR1_DEAT0 ( -- x addr ) 21 bit UART5_CR1 ; \ UART5_CR1_DEAT0, DEAT0
: UART5_CR1_DEDT4 ( -- x addr ) 20 bit UART5_CR1 ; \ UART5_CR1_DEDT4, Driver Enable de-assertion time
: UART5_CR1_DEDT3 ( -- x addr ) 19 bit UART5_CR1 ; \ UART5_CR1_DEDT3, DEDT3
: UART5_CR1_DEDT2 ( -- x addr ) 18 bit UART5_CR1 ; \ UART5_CR1_DEDT2, DEDT2
: UART5_CR1_DEDT1 ( -- x addr ) 17 bit UART5_CR1 ; \ UART5_CR1_DEDT1, DEDT1
: UART5_CR1_DEDT0 ( -- x addr ) 16 bit UART5_CR1 ; \ UART5_CR1_DEDT0, DEDT0
: UART5_CR1_OVER8 ( -- x addr ) 15 bit UART5_CR1 ; \ UART5_CR1_OVER8, Oversampling mode
: UART5_CR1_CMIE ( -- x addr ) 14 bit UART5_CR1 ; \ UART5_CR1_CMIE, Character match interrupt enable
: UART5_CR1_MME ( -- x addr ) 13 bit UART5_CR1 ; \ UART5_CR1_MME, Mute mode enable
: UART5_CR1_M0 ( -- x addr ) 12 bit UART5_CR1 ; \ UART5_CR1_M0, Word length
: UART5_CR1_WAKE ( -- x addr ) 11 bit UART5_CR1 ; \ UART5_CR1_WAKE, Receiver wakeup method
: UART5_CR1_PCE ( -- x addr ) 10 bit UART5_CR1 ; \ UART5_CR1_PCE, Parity control enable
: UART5_CR1_PS ( -- x addr ) 9 bit UART5_CR1 ; \ UART5_CR1_PS, Parity selection
: UART5_CR1_PEIE ( -- x addr ) 8 bit UART5_CR1 ; \ UART5_CR1_PEIE, PE interrupt enable
: UART5_CR1_TXEIE ( -- x addr ) 7 bit UART5_CR1 ; \ UART5_CR1_TXEIE, interrupt enable
: UART5_CR1_TCIE ( -- x addr ) 6 bit UART5_CR1 ; \ UART5_CR1_TCIE, Transmission complete interrupt enable
: UART5_CR1_RXNEIE ( -- x addr ) 5 bit UART5_CR1 ; \ UART5_CR1_RXNEIE, RXNE interrupt enable
: UART5_CR1_IDLEIE ( -- x addr ) 4 bit UART5_CR1 ; \ UART5_CR1_IDLEIE, IDLE interrupt enable
: UART5_CR1_TE ( -- x addr ) 3 bit UART5_CR1 ; \ UART5_CR1_TE, Transmitter enable
: UART5_CR1_RE ( -- x addr ) 2 bit UART5_CR1 ; \ UART5_CR1_RE, Receiver enable
: UART5_CR1_UESM ( -- x addr ) 1 bit UART5_CR1 ; \ UART5_CR1_UESM, USART enable in Stop mode
: UART5_CR1_UE ( -- x addr ) 0 bit UART5_CR1 ; \ UART5_CR1_UE, USART enable

\ UART5_CR2 (read-write) Reset:0x0000
: UART5_CR2_ADD4_7 ( %bbbb -- x addr ) 28 lshift UART5_CR2 ; \ UART5_CR2_ADD4_7, Address of the USART node
: UART5_CR2_ADD0_3 ( %bbbb -- x addr ) 24 lshift UART5_CR2 ; \ UART5_CR2_ADD0_3, Address of the USART node
: UART5_CR2_RTOEN ( -- x addr ) 23 bit UART5_CR2 ; \ UART5_CR2_RTOEN, Receiver timeout enable
: UART5_CR2_ABRMOD1 ( -- x addr ) 22 bit UART5_CR2 ; \ UART5_CR2_ABRMOD1, Auto baud rate mode
: UART5_CR2_ABRMOD0 ( -- x addr ) 21 bit UART5_CR2 ; \ UART5_CR2_ABRMOD0, ABRMOD0
: UART5_CR2_ABREN ( -- x addr ) 20 bit UART5_CR2 ; \ UART5_CR2_ABREN, Auto baud rate enable
: UART5_CR2_MSBFIRST ( -- x addr ) 19 bit UART5_CR2 ; \ UART5_CR2_MSBFIRST, Most significant bit first
: UART5_CR2_TAINV ( -- x addr ) 18 bit UART5_CR2 ; \ UART5_CR2_TAINV, Binary data inversion
: UART5_CR2_TXINV ( -- x addr ) 17 bit UART5_CR2 ; \ UART5_CR2_TXINV, TX pin active level inversion
: UART5_CR2_RXINV ( -- x addr ) 16 bit UART5_CR2 ; \ UART5_CR2_RXINV, RX pin active level inversion
: UART5_CR2_SWAP ( -- x addr ) 15 bit UART5_CR2 ; \ UART5_CR2_SWAP, Swap TX/RX pins
: UART5_CR2_LINEN ( -- x addr ) 14 bit UART5_CR2 ; \ UART5_CR2_LINEN, LIN mode enable
: UART5_CR2_STOP ( %bb -- x addr ) 12 lshift UART5_CR2 ; \ UART5_CR2_STOP, STOP bits
: UART5_CR2_CLKEN ( -- x addr ) 11 bit UART5_CR2 ; \ UART5_CR2_CLKEN, Clock enable
: UART5_CR2_CPOL ( -- x addr ) 10 bit UART5_CR2 ; \ UART5_CR2_CPOL, Clock polarity
: UART5_CR2_CPHA ( -- x addr ) 9 bit UART5_CR2 ; \ UART5_CR2_CPHA, Clock phase
: UART5_CR2_LBCL ( -- x addr ) 8 bit UART5_CR2 ; \ UART5_CR2_LBCL, Last bit clock pulse
: UART5_CR2_LBDIE ( -- x addr ) 6 bit UART5_CR2 ; \ UART5_CR2_LBDIE, LIN break detection interrupt enable
: UART5_CR2_LBDL ( -- x addr ) 5 bit UART5_CR2 ; \ UART5_CR2_LBDL, LIN break detection length
: UART5_CR2_ADDM7 ( -- x addr ) 4 bit UART5_CR2 ; \ UART5_CR2_ADDM7, 7-bit Address Detection/4-bit Address Detection

\ UART5_CR3 (read-write) Reset:0x0000
: UART5_CR3_WUFIE ( -- x addr ) 22 bit UART5_CR3 ; \ UART5_CR3_WUFIE, Wakeup from Stop mode interrupt enable
: UART5_CR3_WUS ( %bb -- x addr ) 20 lshift UART5_CR3 ; \ UART5_CR3_WUS, Wakeup from Stop mode interrupt flag selection
: UART5_CR3_SCARCNT ( %bbb -- x addr ) 17 lshift UART5_CR3 ; \ UART5_CR3_SCARCNT, Smartcard auto-retry count
: UART5_CR3_DEP ( -- x addr ) 15 bit UART5_CR3 ; \ UART5_CR3_DEP, Driver enable polarity selection
: UART5_CR3_DEM ( -- x addr ) 14 bit UART5_CR3 ; \ UART5_CR3_DEM, Driver enable mode
: UART5_CR3_DDRE ( -- x addr ) 13 bit UART5_CR3 ; \ UART5_CR3_DDRE, DMA Disable on Reception Error
: UART5_CR3_OVRDIS ( -- x addr ) 12 bit UART5_CR3 ; \ UART5_CR3_OVRDIS, Overrun Disable
: UART5_CR3_ONEBIT ( -- x addr ) 11 bit UART5_CR3 ; \ UART5_CR3_ONEBIT, One sample bit method enable
: UART5_CR3_CTSIE ( -- x addr ) 10 bit UART5_CR3 ; \ UART5_CR3_CTSIE, CTS interrupt enable
: UART5_CR3_CTSE ( -- x addr ) 9 bit UART5_CR3 ; \ UART5_CR3_CTSE, CTS enable
: UART5_CR3_RTSE ( -- x addr ) 8 bit UART5_CR3 ; \ UART5_CR3_RTSE, RTS enable
: UART5_CR3_DMAT ( -- x addr ) 7 bit UART5_CR3 ; \ UART5_CR3_DMAT, DMA enable transmitter
: UART5_CR3_DMAR ( -- x addr ) 6 bit UART5_CR3 ; \ UART5_CR3_DMAR, DMA enable receiver
: UART5_CR3_SCEN ( -- x addr ) 5 bit UART5_CR3 ; \ UART5_CR3_SCEN, Smartcard mode enable
: UART5_CR3_NACK ( -- x addr ) 4 bit UART5_CR3 ; \ UART5_CR3_NACK, Smartcard NACK enable
: UART5_CR3_HDSEL ( -- x addr ) 3 bit UART5_CR3 ; \ UART5_CR3_HDSEL, Half-duplex selection
: UART5_CR3_IRLP ( -- x addr ) 2 bit UART5_CR3 ; \ UART5_CR3_IRLP, Ir low-power
: UART5_CR3_IREN ( -- x addr ) 1 bit UART5_CR3 ; \ UART5_CR3_IREN, Ir mode enable
: UART5_CR3_EIE ( -- x addr ) 0 bit UART5_CR3 ; \ UART5_CR3_EIE, Error interrupt enable

\ UART5_BRR (read-write) Reset:0x0000
: UART5_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift UART5_BRR ; \ UART5_BRR_DIV_Mantissa, DIV_Mantissa
: UART5_BRR_DIV_Fraction ( %bbbb -- x addr ) UART5_BRR ; \ UART5_BRR_DIV_Fraction, DIV_Fraction

\ UART5_GTPR (read-write) Reset:0x0000
: UART5_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift UART5_GTPR ; \ UART5_GTPR_GT, Guard time value
: UART5_GTPR_PSC ( %bbbbbbbb -- x addr ) UART5_GTPR ; \ UART5_GTPR_PSC, Prescaler value

\ UART5_RTOR (read-write) Reset:0x0000
: UART5_RTOR_BLEN ( %bbbbbbbb -- x addr ) 24 lshift UART5_RTOR ; \ UART5_RTOR_BLEN, Block Length
: UART5_RTOR_RTO ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) UART5_RTOR ; \ UART5_RTOR_RTO, Receiver timeout value

\ UART5_RQR (write-only) Reset:0x0000
: UART5_RQR_TXFRQ ( -- x addr ) 4 bit UART5_RQR ; \ UART5_RQR_TXFRQ, Transmit data flush request
: UART5_RQR_RXFRQ ( -- x addr ) 3 bit UART5_RQR ; \ UART5_RQR_RXFRQ, Receive data flush request
: UART5_RQR_MMRQ ( -- x addr ) 2 bit UART5_RQR ; \ UART5_RQR_MMRQ, Mute mode request
: UART5_RQR_SBKRQ ( -- x addr ) 1 bit UART5_RQR ; \ UART5_RQR_SBKRQ, Send break request
: UART5_RQR_ABRRQ ( -- x addr ) 0 bit UART5_RQR ; \ UART5_RQR_ABRRQ, Auto baud rate request

\ UART5_ISR (read-only) Reset:0x00C0
: UART5_ISR_REACK? ( --  1|0 ) 22 bit UART5_ISR bit@ ; \ UART5_ISR_REACK, REACK
: UART5_ISR_TEACK? ( --  1|0 ) 21 bit UART5_ISR bit@ ; \ UART5_ISR_TEACK, TEACK
: UART5_ISR_WUF? ( --  1|0 ) 20 bit UART5_ISR bit@ ; \ UART5_ISR_WUF, WUF
: UART5_ISR_RWU? ( --  1|0 ) 19 bit UART5_ISR bit@ ; \ UART5_ISR_RWU, RWU
: UART5_ISR_SBKF? ( --  1|0 ) 18 bit UART5_ISR bit@ ; \ UART5_ISR_SBKF, SBKF
: UART5_ISR_CMF? ( --  1|0 ) 17 bit UART5_ISR bit@ ; \ UART5_ISR_CMF, CMF
: UART5_ISR_BUSY? ( --  1|0 ) 16 bit UART5_ISR bit@ ; \ UART5_ISR_BUSY, BUSY
: UART5_ISR_ABRF? ( --  1|0 ) 15 bit UART5_ISR bit@ ; \ UART5_ISR_ABRF, ABRF
: UART5_ISR_ABRE? ( --  1|0 ) 14 bit UART5_ISR bit@ ; \ UART5_ISR_ABRE, ABRE
: UART5_ISR_EOBF? ( --  1|0 ) 12 bit UART5_ISR bit@ ; \ UART5_ISR_EOBF, EOBF
: UART5_ISR_RTOF? ( --  1|0 ) 11 bit UART5_ISR bit@ ; \ UART5_ISR_RTOF, RTOF
: UART5_ISR_CTS? ( --  1|0 ) 10 bit UART5_ISR bit@ ; \ UART5_ISR_CTS, CTS
: UART5_ISR_CTSIF? ( --  1|0 ) 9 bit UART5_ISR bit@ ; \ UART5_ISR_CTSIF, CTSIF
: UART5_ISR_LBDF? ( --  1|0 ) 8 bit UART5_ISR bit@ ; \ UART5_ISR_LBDF, LBDF
: UART5_ISR_TXE? ( --  1|0 ) 7 bit UART5_ISR bit@ ; \ UART5_ISR_TXE, TXE
: UART5_ISR_TC? ( --  1|0 ) 6 bit UART5_ISR bit@ ; \ UART5_ISR_TC, TC
: UART5_ISR_RXNE? ( --  1|0 ) 5 bit UART5_ISR bit@ ; \ UART5_ISR_RXNE, RXNE
: UART5_ISR_IDLE? ( --  1|0 ) 4 bit UART5_ISR bit@ ; \ UART5_ISR_IDLE, IDLE
: UART5_ISR_ORE? ( --  1|0 ) 3 bit UART5_ISR bit@ ; \ UART5_ISR_ORE, ORE
: UART5_ISR_NF? ( --  1|0 ) 2 bit UART5_ISR bit@ ; \ UART5_ISR_NF, NF
: UART5_ISR_FE? ( --  1|0 ) 1 bit UART5_ISR bit@ ; \ UART5_ISR_FE, FE
: UART5_ISR_PE? ( --  1|0 ) 0 bit UART5_ISR bit@ ; \ UART5_ISR_PE, PE

\ UART5_ICR (write-only) Reset:0x0000
: UART5_ICR_WUCF ( -- x addr ) 20 bit UART5_ICR ; \ UART5_ICR_WUCF, Wakeup from Stop mode clear flag
: UART5_ICR_CMCF ( -- x addr ) 17 bit UART5_ICR ; \ UART5_ICR_CMCF, Character match clear flag
: UART5_ICR_EOBCF ( -- x addr ) 12 bit UART5_ICR ; \ UART5_ICR_EOBCF, End of block clear flag
: UART5_ICR_RTOCF ( -- x addr ) 11 bit UART5_ICR ; \ UART5_ICR_RTOCF, Receiver timeout clear flag
: UART5_ICR_CTSCF ( -- x addr ) 9 bit UART5_ICR ; \ UART5_ICR_CTSCF, CTS clear flag
: UART5_ICR_LBDCF ( -- x addr ) 8 bit UART5_ICR ; \ UART5_ICR_LBDCF, LIN break detection clear flag
: UART5_ICR_TCCF ( -- x addr ) 6 bit UART5_ICR ; \ UART5_ICR_TCCF, Transmission complete clear flag
: UART5_ICR_IDLECF ( -- x addr ) 4 bit UART5_ICR ; \ UART5_ICR_IDLECF, Idle line detected clear flag
: UART5_ICR_ORECF ( -- x addr ) 3 bit UART5_ICR ; \ UART5_ICR_ORECF, Overrun error clear flag
: UART5_ICR_NCF ( -- x addr ) 2 bit UART5_ICR ; \ UART5_ICR_NCF, Noise detected clear flag
: UART5_ICR_FECF ( -- x addr ) 1 bit UART5_ICR ; \ UART5_ICR_FECF, Framing error clear flag
: UART5_ICR_PECF ( -- x addr ) 0 bit UART5_ICR ; \ UART5_ICR_PECF, Parity error clear flag

\ UART5_RDR (read-only) Reset:0x0000
: UART5_RDR_RDR? ( --  x ) UART5_RDR @ ; \ UART5_RDR_RDR, Receive data value

\ UART5_TDR (read-write) Reset:0x0000
: UART5_TDR_TDR ( %bbbbbbbbb -- x addr ) UART5_TDR ; \ UART5_TDR_TDR, Transmit data value

\ UART4_CR1 (read-write) Reset:0x0000
: UART4_CR1_M1 ( -- x addr ) 28 bit UART4_CR1 ; \ UART4_CR1_M1, Word length
: UART4_CR1_EOBIE ( -- x addr ) 27 bit UART4_CR1 ; \ UART4_CR1_EOBIE, End of Block interrupt enable
: UART4_CR1_RTOIE ( -- x addr ) 26 bit UART4_CR1 ; \ UART4_CR1_RTOIE, Receiver timeout interrupt enable
: UART4_CR1_DEAT4 ( -- x addr ) 25 bit UART4_CR1 ; \ UART4_CR1_DEAT4, Driver Enable assertion time
: UART4_CR1_DEAT3 ( -- x addr ) 24 bit UART4_CR1 ; \ UART4_CR1_DEAT3, DEAT3
: UART4_CR1_DEAT2 ( -- x addr ) 23 bit UART4_CR1 ; \ UART4_CR1_DEAT2, DEAT2
: UART4_CR1_DEAT1 ( -- x addr ) 22 bit UART4_CR1 ; \ UART4_CR1_DEAT1, DEAT1
: UART4_CR1_DEAT0 ( -- x addr ) 21 bit UART4_CR1 ; \ UART4_CR1_DEAT0, DEAT0
: UART4_CR1_DEDT4 ( -- x addr ) 20 bit UART4_CR1 ; \ UART4_CR1_DEDT4, Driver Enable de-assertion time
: UART4_CR1_DEDT3 ( -- x addr ) 19 bit UART4_CR1 ; \ UART4_CR1_DEDT3, DEDT3
: UART4_CR1_DEDT2 ( -- x addr ) 18 bit UART4_CR1 ; \ UART4_CR1_DEDT2, DEDT2
: UART4_CR1_DEDT1 ( -- x addr ) 17 bit UART4_CR1 ; \ UART4_CR1_DEDT1, DEDT1
: UART4_CR1_DEDT0 ( -- x addr ) 16 bit UART4_CR1 ; \ UART4_CR1_DEDT0, DEDT0
: UART4_CR1_OVER8 ( -- x addr ) 15 bit UART4_CR1 ; \ UART4_CR1_OVER8, Oversampling mode
: UART4_CR1_CMIE ( -- x addr ) 14 bit UART4_CR1 ; \ UART4_CR1_CMIE, Character match interrupt enable
: UART4_CR1_MME ( -- x addr ) 13 bit UART4_CR1 ; \ UART4_CR1_MME, Mute mode enable
: UART4_CR1_M0 ( -- x addr ) 12 bit UART4_CR1 ; \ UART4_CR1_M0, Word length
: UART4_CR1_WAKE ( -- x addr ) 11 bit UART4_CR1 ; \ UART4_CR1_WAKE, Receiver wakeup method
: UART4_CR1_PCE ( -- x addr ) 10 bit UART4_CR1 ; \ UART4_CR1_PCE, Parity control enable
: UART4_CR1_PS ( -- x addr ) 9 bit UART4_CR1 ; \ UART4_CR1_PS, Parity selection
: UART4_CR1_PEIE ( -- x addr ) 8 bit UART4_CR1 ; \ UART4_CR1_PEIE, PE interrupt enable
: UART4_CR1_TXEIE ( -- x addr ) 7 bit UART4_CR1 ; \ UART4_CR1_TXEIE, interrupt enable
: UART4_CR1_TCIE ( -- x addr ) 6 bit UART4_CR1 ; \ UART4_CR1_TCIE, Transmission complete interrupt enable
: UART4_CR1_RXNEIE ( -- x addr ) 5 bit UART4_CR1 ; \ UART4_CR1_RXNEIE, RXNE interrupt enable
: UART4_CR1_IDLEIE ( -- x addr ) 4 bit UART4_CR1 ; \ UART4_CR1_IDLEIE, IDLE interrupt enable
: UART4_CR1_TE ( -- x addr ) 3 bit UART4_CR1 ; \ UART4_CR1_TE, Transmitter enable
: UART4_CR1_RE ( -- x addr ) 2 bit UART4_CR1 ; \ UART4_CR1_RE, Receiver enable
: UART4_CR1_UESM ( -- x addr ) 1 bit UART4_CR1 ; \ UART4_CR1_UESM, USART enable in Stop mode
: UART4_CR1_UE ( -- x addr ) 0 bit UART4_CR1 ; \ UART4_CR1_UE, USART enable

\ UART4_CR2 (read-write) Reset:0x0000
: UART4_CR2_ADD4_7 ( %bbbb -- x addr ) 28 lshift UART4_CR2 ; \ UART4_CR2_ADD4_7, Address of the USART node
: UART4_CR2_ADD0_3 ( %bbbb -- x addr ) 24 lshift UART4_CR2 ; \ UART4_CR2_ADD0_3, Address of the USART node
: UART4_CR2_RTOEN ( -- x addr ) 23 bit UART4_CR2 ; \ UART4_CR2_RTOEN, Receiver timeout enable
: UART4_CR2_ABRMOD1 ( -- x addr ) 22 bit UART4_CR2 ; \ UART4_CR2_ABRMOD1, Auto baud rate mode
: UART4_CR2_ABRMOD0 ( -- x addr ) 21 bit UART4_CR2 ; \ UART4_CR2_ABRMOD0, ABRMOD0
: UART4_CR2_ABREN ( -- x addr ) 20 bit UART4_CR2 ; \ UART4_CR2_ABREN, Auto baud rate enable
: UART4_CR2_MSBFIRST ( -- x addr ) 19 bit UART4_CR2 ; \ UART4_CR2_MSBFIRST, Most significant bit first
: UART4_CR2_TAINV ( -- x addr ) 18 bit UART4_CR2 ; \ UART4_CR2_TAINV, Binary data inversion
: UART4_CR2_TXINV ( -- x addr ) 17 bit UART4_CR2 ; \ UART4_CR2_TXINV, TX pin active level inversion
: UART4_CR2_RXINV ( -- x addr ) 16 bit UART4_CR2 ; \ UART4_CR2_RXINV, RX pin active level inversion
: UART4_CR2_SWAP ( -- x addr ) 15 bit UART4_CR2 ; \ UART4_CR2_SWAP, Swap TX/RX pins
: UART4_CR2_LINEN ( -- x addr ) 14 bit UART4_CR2 ; \ UART4_CR2_LINEN, LIN mode enable
: UART4_CR2_STOP ( %bb -- x addr ) 12 lshift UART4_CR2 ; \ UART4_CR2_STOP, STOP bits
: UART4_CR2_CLKEN ( -- x addr ) 11 bit UART4_CR2 ; \ UART4_CR2_CLKEN, Clock enable
: UART4_CR2_CPOL ( -- x addr ) 10 bit UART4_CR2 ; \ UART4_CR2_CPOL, Clock polarity
: UART4_CR2_CPHA ( -- x addr ) 9 bit UART4_CR2 ; \ UART4_CR2_CPHA, Clock phase
: UART4_CR2_LBCL ( -- x addr ) 8 bit UART4_CR2 ; \ UART4_CR2_LBCL, Last bit clock pulse
: UART4_CR2_LBDIE ( -- x addr ) 6 bit UART4_CR2 ; \ UART4_CR2_LBDIE, LIN break detection interrupt enable
: UART4_CR2_LBDL ( -- x addr ) 5 bit UART4_CR2 ; \ UART4_CR2_LBDL, LIN break detection length
: UART4_CR2_ADDM7 ( -- x addr ) 4 bit UART4_CR2 ; \ UART4_CR2_ADDM7, 7-bit Address Detection/4-bit Address Detection

\ UART4_CR3 (read-write) Reset:0x0000
: UART4_CR3_WUFIE ( -- x addr ) 22 bit UART4_CR3 ; \ UART4_CR3_WUFIE, Wakeup from Stop mode interrupt enable
: UART4_CR3_WUS ( %bb -- x addr ) 20 lshift UART4_CR3 ; \ UART4_CR3_WUS, Wakeup from Stop mode interrupt flag selection
: UART4_CR3_SCARCNT ( %bbb -- x addr ) 17 lshift UART4_CR3 ; \ UART4_CR3_SCARCNT, Smartcard auto-retry count
: UART4_CR3_DEP ( -- x addr ) 15 bit UART4_CR3 ; \ UART4_CR3_DEP, Driver enable polarity selection
: UART4_CR3_DEM ( -- x addr ) 14 bit UART4_CR3 ; \ UART4_CR3_DEM, Driver enable mode
: UART4_CR3_DDRE ( -- x addr ) 13 bit UART4_CR3 ; \ UART4_CR3_DDRE, DMA Disable on Reception Error
: UART4_CR3_OVRDIS ( -- x addr ) 12 bit UART4_CR3 ; \ UART4_CR3_OVRDIS, Overrun Disable
: UART4_CR3_ONEBIT ( -- x addr ) 11 bit UART4_CR3 ; \ UART4_CR3_ONEBIT, One sample bit method enable
: UART4_CR3_CTSIE ( -- x addr ) 10 bit UART4_CR3 ; \ UART4_CR3_CTSIE, CTS interrupt enable
: UART4_CR3_CTSE ( -- x addr ) 9 bit UART4_CR3 ; \ UART4_CR3_CTSE, CTS enable
: UART4_CR3_RTSE ( -- x addr ) 8 bit UART4_CR3 ; \ UART4_CR3_RTSE, RTS enable
: UART4_CR3_DMAT ( -- x addr ) 7 bit UART4_CR3 ; \ UART4_CR3_DMAT, DMA enable transmitter
: UART4_CR3_DMAR ( -- x addr ) 6 bit UART4_CR3 ; \ UART4_CR3_DMAR, DMA enable receiver
: UART4_CR3_SCEN ( -- x addr ) 5 bit UART4_CR3 ; \ UART4_CR3_SCEN, Smartcard mode enable
: UART4_CR3_NACK ( -- x addr ) 4 bit UART4_CR3 ; \ UART4_CR3_NACK, Smartcard NACK enable
: UART4_CR3_HDSEL ( -- x addr ) 3 bit UART4_CR3 ; \ UART4_CR3_HDSEL, Half-duplex selection
: UART4_CR3_IRLP ( -- x addr ) 2 bit UART4_CR3 ; \ UART4_CR3_IRLP, Ir low-power
: UART4_CR3_IREN ( -- x addr ) 1 bit UART4_CR3 ; \ UART4_CR3_IREN, Ir mode enable
: UART4_CR3_EIE ( -- x addr ) 0 bit UART4_CR3 ; \ UART4_CR3_EIE, Error interrupt enable

\ UART4_BRR (read-write) Reset:0x0000
: UART4_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift UART4_BRR ; \ UART4_BRR_DIV_Mantissa, DIV_Mantissa
: UART4_BRR_DIV_Fraction ( %bbbb -- x addr ) UART4_BRR ; \ UART4_BRR_DIV_Fraction, DIV_Fraction

\ UART4_GTPR (read-write) Reset:0x0000
: UART4_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift UART4_GTPR ; \ UART4_GTPR_GT, Guard time value
: UART4_GTPR_PSC ( %bbbbbbbb -- x addr ) UART4_GTPR ; \ UART4_GTPR_PSC, Prescaler value

\ UART4_RTOR (read-write) Reset:0x0000
: UART4_RTOR_BLEN ( %bbbbbbbb -- x addr ) 24 lshift UART4_RTOR ; \ UART4_RTOR_BLEN, Block Length
: UART4_RTOR_RTO ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) UART4_RTOR ; \ UART4_RTOR_RTO, Receiver timeout value

\ UART4_RQR (write-only) Reset:0x0000
: UART4_RQR_TXFRQ ( -- x addr ) 4 bit UART4_RQR ; \ UART4_RQR_TXFRQ, Transmit data flush request
: UART4_RQR_RXFRQ ( -- x addr ) 3 bit UART4_RQR ; \ UART4_RQR_RXFRQ, Receive data flush request
: UART4_RQR_MMRQ ( -- x addr ) 2 bit UART4_RQR ; \ UART4_RQR_MMRQ, Mute mode request
: UART4_RQR_SBKRQ ( -- x addr ) 1 bit UART4_RQR ; \ UART4_RQR_SBKRQ, Send break request
: UART4_RQR_ABRRQ ( -- x addr ) 0 bit UART4_RQR ; \ UART4_RQR_ABRRQ, Auto baud rate request

\ UART4_ISR (read-only) Reset:0x00C0
: UART4_ISR_REACK? ( --  1|0 ) 22 bit UART4_ISR bit@ ; \ UART4_ISR_REACK, REACK
: UART4_ISR_TEACK? ( --  1|0 ) 21 bit UART4_ISR bit@ ; \ UART4_ISR_TEACK, TEACK
: UART4_ISR_WUF? ( --  1|0 ) 20 bit UART4_ISR bit@ ; \ UART4_ISR_WUF, WUF
: UART4_ISR_RWU? ( --  1|0 ) 19 bit UART4_ISR bit@ ; \ UART4_ISR_RWU, RWU
: UART4_ISR_SBKF? ( --  1|0 ) 18 bit UART4_ISR bit@ ; \ UART4_ISR_SBKF, SBKF
: UART4_ISR_CMF? ( --  1|0 ) 17 bit UART4_ISR bit@ ; \ UART4_ISR_CMF, CMF
: UART4_ISR_BUSY? ( --  1|0 ) 16 bit UART4_ISR bit@ ; \ UART4_ISR_BUSY, BUSY
: UART4_ISR_ABRF? ( --  1|0 ) 15 bit UART4_ISR bit@ ; \ UART4_ISR_ABRF, ABRF
: UART4_ISR_ABRE? ( --  1|0 ) 14 bit UART4_ISR bit@ ; \ UART4_ISR_ABRE, ABRE
: UART4_ISR_EOBF? ( --  1|0 ) 12 bit UART4_ISR bit@ ; \ UART4_ISR_EOBF, EOBF
: UART4_ISR_RTOF? ( --  1|0 ) 11 bit UART4_ISR bit@ ; \ UART4_ISR_RTOF, RTOF
: UART4_ISR_CTS? ( --  1|0 ) 10 bit UART4_ISR bit@ ; \ UART4_ISR_CTS, CTS
: UART4_ISR_CTSIF? ( --  1|0 ) 9 bit UART4_ISR bit@ ; \ UART4_ISR_CTSIF, CTSIF
: UART4_ISR_LBDF? ( --  1|0 ) 8 bit UART4_ISR bit@ ; \ UART4_ISR_LBDF, LBDF
: UART4_ISR_TXE? ( --  1|0 ) 7 bit UART4_ISR bit@ ; \ UART4_ISR_TXE, TXE
: UART4_ISR_TC? ( --  1|0 ) 6 bit UART4_ISR bit@ ; \ UART4_ISR_TC, TC
: UART4_ISR_RXNE? ( --  1|0 ) 5 bit UART4_ISR bit@ ; \ UART4_ISR_RXNE, RXNE
: UART4_ISR_IDLE? ( --  1|0 ) 4 bit UART4_ISR bit@ ; \ UART4_ISR_IDLE, IDLE
: UART4_ISR_ORE? ( --  1|0 ) 3 bit UART4_ISR bit@ ; \ UART4_ISR_ORE, ORE
: UART4_ISR_NF? ( --  1|0 ) 2 bit UART4_ISR bit@ ; \ UART4_ISR_NF, NF
: UART4_ISR_FE? ( --  1|0 ) 1 bit UART4_ISR bit@ ; \ UART4_ISR_FE, FE
: UART4_ISR_PE? ( --  1|0 ) 0 bit UART4_ISR bit@ ; \ UART4_ISR_PE, PE

\ UART4_ICR (write-only) Reset:0x0000
: UART4_ICR_WUCF ( -- x addr ) 20 bit UART4_ICR ; \ UART4_ICR_WUCF, Wakeup from Stop mode clear flag
: UART4_ICR_CMCF ( -- x addr ) 17 bit UART4_ICR ; \ UART4_ICR_CMCF, Character match clear flag
: UART4_ICR_EOBCF ( -- x addr ) 12 bit UART4_ICR ; \ UART4_ICR_EOBCF, End of block clear flag
: UART4_ICR_RTOCF ( -- x addr ) 11 bit UART4_ICR ; \ UART4_ICR_RTOCF, Receiver timeout clear flag
: UART4_ICR_CTSCF ( -- x addr ) 9 bit UART4_ICR ; \ UART4_ICR_CTSCF, CTS clear flag
: UART4_ICR_LBDCF ( -- x addr ) 8 bit UART4_ICR ; \ UART4_ICR_LBDCF, LIN break detection clear flag
: UART4_ICR_TCCF ( -- x addr ) 6 bit UART4_ICR ; \ UART4_ICR_TCCF, Transmission complete clear flag
: UART4_ICR_IDLECF ( -- x addr ) 4 bit UART4_ICR ; \ UART4_ICR_IDLECF, Idle line detected clear flag
: UART4_ICR_ORECF ( -- x addr ) 3 bit UART4_ICR ; \ UART4_ICR_ORECF, Overrun error clear flag
: UART4_ICR_NCF ( -- x addr ) 2 bit UART4_ICR ; \ UART4_ICR_NCF, Noise detected clear flag
: UART4_ICR_FECF ( -- x addr ) 1 bit UART4_ICR ; \ UART4_ICR_FECF, Framing error clear flag
: UART4_ICR_PECF ( -- x addr ) 0 bit UART4_ICR ; \ UART4_ICR_PECF, Parity error clear flag

\ UART4_RDR (read-only) Reset:0x0000
: UART4_RDR_RDR? ( --  x ) UART4_RDR @ ; \ UART4_RDR_RDR, Receive data value

\ UART4_TDR (read-write) Reset:0x0000
: UART4_TDR_TDR ( %bbbbbbbbb -- x addr ) UART4_TDR ; \ UART4_TDR_TDR, Transmit data value

\ UART8_CR1 (read-write) Reset:0x0000
: UART8_CR1_M1 ( -- x addr ) 28 bit UART8_CR1 ; \ UART8_CR1_M1, Word length
: UART8_CR1_EOBIE ( -- x addr ) 27 bit UART8_CR1 ; \ UART8_CR1_EOBIE, End of Block interrupt enable
: UART8_CR1_RTOIE ( -- x addr ) 26 bit UART8_CR1 ; \ UART8_CR1_RTOIE, Receiver timeout interrupt enable
: UART8_CR1_DEAT4 ( -- x addr ) 25 bit UART8_CR1 ; \ UART8_CR1_DEAT4, Driver Enable assertion time
: UART8_CR1_DEAT3 ( -- x addr ) 24 bit UART8_CR1 ; \ UART8_CR1_DEAT3, DEAT3
: UART8_CR1_DEAT2 ( -- x addr ) 23 bit UART8_CR1 ; \ UART8_CR1_DEAT2, DEAT2
: UART8_CR1_DEAT1 ( -- x addr ) 22 bit UART8_CR1 ; \ UART8_CR1_DEAT1, DEAT1
: UART8_CR1_DEAT0 ( -- x addr ) 21 bit UART8_CR1 ; \ UART8_CR1_DEAT0, DEAT0
: UART8_CR1_DEDT4 ( -- x addr ) 20 bit UART8_CR1 ; \ UART8_CR1_DEDT4, Driver Enable de-assertion time
: UART8_CR1_DEDT3 ( -- x addr ) 19 bit UART8_CR1 ; \ UART8_CR1_DEDT3, DEDT3
: UART8_CR1_DEDT2 ( -- x addr ) 18 bit UART8_CR1 ; \ UART8_CR1_DEDT2, DEDT2
: UART8_CR1_DEDT1 ( -- x addr ) 17 bit UART8_CR1 ; \ UART8_CR1_DEDT1, DEDT1
: UART8_CR1_DEDT0 ( -- x addr ) 16 bit UART8_CR1 ; \ UART8_CR1_DEDT0, DEDT0
: UART8_CR1_OVER8 ( -- x addr ) 15 bit UART8_CR1 ; \ UART8_CR1_OVER8, Oversampling mode
: UART8_CR1_CMIE ( -- x addr ) 14 bit UART8_CR1 ; \ UART8_CR1_CMIE, Character match interrupt enable
: UART8_CR1_MME ( -- x addr ) 13 bit UART8_CR1 ; \ UART8_CR1_MME, Mute mode enable
: UART8_CR1_M0 ( -- x addr ) 12 bit UART8_CR1 ; \ UART8_CR1_M0, Word length
: UART8_CR1_WAKE ( -- x addr ) 11 bit UART8_CR1 ; \ UART8_CR1_WAKE, Receiver wakeup method
: UART8_CR1_PCE ( -- x addr ) 10 bit UART8_CR1 ; \ UART8_CR1_PCE, Parity control enable
: UART8_CR1_PS ( -- x addr ) 9 bit UART8_CR1 ; \ UART8_CR1_PS, Parity selection
: UART8_CR1_PEIE ( -- x addr ) 8 bit UART8_CR1 ; \ UART8_CR1_PEIE, PE interrupt enable
: UART8_CR1_TXEIE ( -- x addr ) 7 bit UART8_CR1 ; \ UART8_CR1_TXEIE, interrupt enable
: UART8_CR1_TCIE ( -- x addr ) 6 bit UART8_CR1 ; \ UART8_CR1_TCIE, Transmission complete interrupt enable
: UART8_CR1_RXNEIE ( -- x addr ) 5 bit UART8_CR1 ; \ UART8_CR1_RXNEIE, RXNE interrupt enable
: UART8_CR1_IDLEIE ( -- x addr ) 4 bit UART8_CR1 ; \ UART8_CR1_IDLEIE, IDLE interrupt enable
: UART8_CR1_TE ( -- x addr ) 3 bit UART8_CR1 ; \ UART8_CR1_TE, Transmitter enable
: UART8_CR1_RE ( -- x addr ) 2 bit UART8_CR1 ; \ UART8_CR1_RE, Receiver enable
: UART8_CR1_UESM ( -- x addr ) 1 bit UART8_CR1 ; \ UART8_CR1_UESM, USART enable in Stop mode
: UART8_CR1_UE ( -- x addr ) 0 bit UART8_CR1 ; \ UART8_CR1_UE, USART enable

\ UART8_CR2 (read-write) Reset:0x0000
: UART8_CR2_ADD4_7 ( %bbbb -- x addr ) 28 lshift UART8_CR2 ; \ UART8_CR2_ADD4_7, Address of the USART node
: UART8_CR2_ADD0_3 ( %bbbb -- x addr ) 24 lshift UART8_CR2 ; \ UART8_CR2_ADD0_3, Address of the USART node
: UART8_CR2_RTOEN ( -- x addr ) 23 bit UART8_CR2 ; \ UART8_CR2_RTOEN, Receiver timeout enable
: UART8_CR2_ABRMOD1 ( -- x addr ) 22 bit UART8_CR2 ; \ UART8_CR2_ABRMOD1, Auto baud rate mode
: UART8_CR2_ABRMOD0 ( -- x addr ) 21 bit UART8_CR2 ; \ UART8_CR2_ABRMOD0, ABRMOD0
: UART8_CR2_ABREN ( -- x addr ) 20 bit UART8_CR2 ; \ UART8_CR2_ABREN, Auto baud rate enable
: UART8_CR2_MSBFIRST ( -- x addr ) 19 bit UART8_CR2 ; \ UART8_CR2_MSBFIRST, Most significant bit first
: UART8_CR2_TAINV ( -- x addr ) 18 bit UART8_CR2 ; \ UART8_CR2_TAINV, Binary data inversion
: UART8_CR2_TXINV ( -- x addr ) 17 bit UART8_CR2 ; \ UART8_CR2_TXINV, TX pin active level inversion
: UART8_CR2_RXINV ( -- x addr ) 16 bit UART8_CR2 ; \ UART8_CR2_RXINV, RX pin active level inversion
: UART8_CR2_SWAP ( -- x addr ) 15 bit UART8_CR2 ; \ UART8_CR2_SWAP, Swap TX/RX pins
: UART8_CR2_LINEN ( -- x addr ) 14 bit UART8_CR2 ; \ UART8_CR2_LINEN, LIN mode enable
: UART8_CR2_STOP ( %bb -- x addr ) 12 lshift UART8_CR2 ; \ UART8_CR2_STOP, STOP bits
: UART8_CR2_CLKEN ( -- x addr ) 11 bit UART8_CR2 ; \ UART8_CR2_CLKEN, Clock enable
: UART8_CR2_CPOL ( -- x addr ) 10 bit UART8_CR2 ; \ UART8_CR2_CPOL, Clock polarity
: UART8_CR2_CPHA ( -- x addr ) 9 bit UART8_CR2 ; \ UART8_CR2_CPHA, Clock phase
: UART8_CR2_LBCL ( -- x addr ) 8 bit UART8_CR2 ; \ UART8_CR2_LBCL, Last bit clock pulse
: UART8_CR2_LBDIE ( -- x addr ) 6 bit UART8_CR2 ; \ UART8_CR2_LBDIE, LIN break detection interrupt enable
: UART8_CR2_LBDL ( -- x addr ) 5 bit UART8_CR2 ; \ UART8_CR2_LBDL, LIN break detection length
: UART8_CR2_ADDM7 ( -- x addr ) 4 bit UART8_CR2 ; \ UART8_CR2_ADDM7, 7-bit Address Detection/4-bit Address Detection

\ UART8_CR3 (read-write) Reset:0x0000
: UART8_CR3_WUFIE ( -- x addr ) 22 bit UART8_CR3 ; \ UART8_CR3_WUFIE, Wakeup from Stop mode interrupt enable
: UART8_CR3_WUS ( %bb -- x addr ) 20 lshift UART8_CR3 ; \ UART8_CR3_WUS, Wakeup from Stop mode interrupt flag selection
: UART8_CR3_SCARCNT ( %bbb -- x addr ) 17 lshift UART8_CR3 ; \ UART8_CR3_SCARCNT, Smartcard auto-retry count
: UART8_CR3_DEP ( -- x addr ) 15 bit UART8_CR3 ; \ UART8_CR3_DEP, Driver enable polarity selection
: UART8_CR3_DEM ( -- x addr ) 14 bit UART8_CR3 ; \ UART8_CR3_DEM, Driver enable mode
: UART8_CR3_DDRE ( -- x addr ) 13 bit UART8_CR3 ; \ UART8_CR3_DDRE, DMA Disable on Reception Error
: UART8_CR3_OVRDIS ( -- x addr ) 12 bit UART8_CR3 ; \ UART8_CR3_OVRDIS, Overrun Disable
: UART8_CR3_ONEBIT ( -- x addr ) 11 bit UART8_CR3 ; \ UART8_CR3_ONEBIT, One sample bit method enable
: UART8_CR3_CTSIE ( -- x addr ) 10 bit UART8_CR3 ; \ UART8_CR3_CTSIE, CTS interrupt enable
: UART8_CR3_CTSE ( -- x addr ) 9 bit UART8_CR3 ; \ UART8_CR3_CTSE, CTS enable
: UART8_CR3_RTSE ( -- x addr ) 8 bit UART8_CR3 ; \ UART8_CR3_RTSE, RTS enable
: UART8_CR3_DMAT ( -- x addr ) 7 bit UART8_CR3 ; \ UART8_CR3_DMAT, DMA enable transmitter
: UART8_CR3_DMAR ( -- x addr ) 6 bit UART8_CR3 ; \ UART8_CR3_DMAR, DMA enable receiver
: UART8_CR3_SCEN ( -- x addr ) 5 bit UART8_CR3 ; \ UART8_CR3_SCEN, Smartcard mode enable
: UART8_CR3_NACK ( -- x addr ) 4 bit UART8_CR3 ; \ UART8_CR3_NACK, Smartcard NACK enable
: UART8_CR3_HDSEL ( -- x addr ) 3 bit UART8_CR3 ; \ UART8_CR3_HDSEL, Half-duplex selection
: UART8_CR3_IRLP ( -- x addr ) 2 bit UART8_CR3 ; \ UART8_CR3_IRLP, Ir low-power
: UART8_CR3_IREN ( -- x addr ) 1 bit UART8_CR3 ; \ UART8_CR3_IREN, Ir mode enable
: UART8_CR3_EIE ( -- x addr ) 0 bit UART8_CR3 ; \ UART8_CR3_EIE, Error interrupt enable

\ UART8_BRR (read-write) Reset:0x0000
: UART8_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift UART8_BRR ; \ UART8_BRR_DIV_Mantissa, DIV_Mantissa
: UART8_BRR_DIV_Fraction ( %bbbb -- x addr ) UART8_BRR ; \ UART8_BRR_DIV_Fraction, DIV_Fraction

\ UART8_GTPR (read-write) Reset:0x0000
: UART8_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift UART8_GTPR ; \ UART8_GTPR_GT, Guard time value
: UART8_GTPR_PSC ( %bbbbbbbb -- x addr ) UART8_GTPR ; \ UART8_GTPR_PSC, Prescaler value

\ UART8_RTOR (read-write) Reset:0x0000
: UART8_RTOR_BLEN ( %bbbbbbbb -- x addr ) 24 lshift UART8_RTOR ; \ UART8_RTOR_BLEN, Block Length
: UART8_RTOR_RTO ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) UART8_RTOR ; \ UART8_RTOR_RTO, Receiver timeout value

\ UART8_RQR (write-only) Reset:0x0000
: UART8_RQR_TXFRQ ( -- x addr ) 4 bit UART8_RQR ; \ UART8_RQR_TXFRQ, Transmit data flush request
: UART8_RQR_RXFRQ ( -- x addr ) 3 bit UART8_RQR ; \ UART8_RQR_RXFRQ, Receive data flush request
: UART8_RQR_MMRQ ( -- x addr ) 2 bit UART8_RQR ; \ UART8_RQR_MMRQ, Mute mode request
: UART8_RQR_SBKRQ ( -- x addr ) 1 bit UART8_RQR ; \ UART8_RQR_SBKRQ, Send break request
: UART8_RQR_ABRRQ ( -- x addr ) 0 bit UART8_RQR ; \ UART8_RQR_ABRRQ, Auto baud rate request

\ UART8_ISR (read-only) Reset:0x00C0
: UART8_ISR_REACK? ( --  1|0 ) 22 bit UART8_ISR bit@ ; \ UART8_ISR_REACK, REACK
: UART8_ISR_TEACK? ( --  1|0 ) 21 bit UART8_ISR bit@ ; \ UART8_ISR_TEACK, TEACK
: UART8_ISR_WUF? ( --  1|0 ) 20 bit UART8_ISR bit@ ; \ UART8_ISR_WUF, WUF
: UART8_ISR_RWU? ( --  1|0 ) 19 bit UART8_ISR bit@ ; \ UART8_ISR_RWU, RWU
: UART8_ISR_SBKF? ( --  1|0 ) 18 bit UART8_ISR bit@ ; \ UART8_ISR_SBKF, SBKF
: UART8_ISR_CMF? ( --  1|0 ) 17 bit UART8_ISR bit@ ; \ UART8_ISR_CMF, CMF
: UART8_ISR_BUSY? ( --  1|0 ) 16 bit UART8_ISR bit@ ; \ UART8_ISR_BUSY, BUSY
: UART8_ISR_ABRF? ( --  1|0 ) 15 bit UART8_ISR bit@ ; \ UART8_ISR_ABRF, ABRF
: UART8_ISR_ABRE? ( --  1|0 ) 14 bit UART8_ISR bit@ ; \ UART8_ISR_ABRE, ABRE
: UART8_ISR_EOBF? ( --  1|0 ) 12 bit UART8_ISR bit@ ; \ UART8_ISR_EOBF, EOBF
: UART8_ISR_RTOF? ( --  1|0 ) 11 bit UART8_ISR bit@ ; \ UART8_ISR_RTOF, RTOF
: UART8_ISR_CTS? ( --  1|0 ) 10 bit UART8_ISR bit@ ; \ UART8_ISR_CTS, CTS
: UART8_ISR_CTSIF? ( --  1|0 ) 9 bit UART8_ISR bit@ ; \ UART8_ISR_CTSIF, CTSIF
: UART8_ISR_LBDF? ( --  1|0 ) 8 bit UART8_ISR bit@ ; \ UART8_ISR_LBDF, LBDF
: UART8_ISR_TXE? ( --  1|0 ) 7 bit UART8_ISR bit@ ; \ UART8_ISR_TXE, TXE
: UART8_ISR_TC? ( --  1|0 ) 6 bit UART8_ISR bit@ ; \ UART8_ISR_TC, TC
: UART8_ISR_RXNE? ( --  1|0 ) 5 bit UART8_ISR bit@ ; \ UART8_ISR_RXNE, RXNE
: UART8_ISR_IDLE? ( --  1|0 ) 4 bit UART8_ISR bit@ ; \ UART8_ISR_IDLE, IDLE
: UART8_ISR_ORE? ( --  1|0 ) 3 bit UART8_ISR bit@ ; \ UART8_ISR_ORE, ORE
: UART8_ISR_NF? ( --  1|0 ) 2 bit UART8_ISR bit@ ; \ UART8_ISR_NF, NF
: UART8_ISR_FE? ( --  1|0 ) 1 bit UART8_ISR bit@ ; \ UART8_ISR_FE, FE
: UART8_ISR_PE? ( --  1|0 ) 0 bit UART8_ISR bit@ ; \ UART8_ISR_PE, PE

\ UART8_ICR (write-only) Reset:0x0000
: UART8_ICR_WUCF ( -- x addr ) 20 bit UART8_ICR ; \ UART8_ICR_WUCF, Wakeup from Stop mode clear flag
: UART8_ICR_CMCF ( -- x addr ) 17 bit UART8_ICR ; \ UART8_ICR_CMCF, Character match clear flag
: UART8_ICR_EOBCF ( -- x addr ) 12 bit UART8_ICR ; \ UART8_ICR_EOBCF, End of block clear flag
: UART8_ICR_RTOCF ( -- x addr ) 11 bit UART8_ICR ; \ UART8_ICR_RTOCF, Receiver timeout clear flag
: UART8_ICR_CTSCF ( -- x addr ) 9 bit UART8_ICR ; \ UART8_ICR_CTSCF, CTS clear flag
: UART8_ICR_LBDCF ( -- x addr ) 8 bit UART8_ICR ; \ UART8_ICR_LBDCF, LIN break detection clear flag
: UART8_ICR_TCCF ( -- x addr ) 6 bit UART8_ICR ; \ UART8_ICR_TCCF, Transmission complete clear flag
: UART8_ICR_IDLECF ( -- x addr ) 4 bit UART8_ICR ; \ UART8_ICR_IDLECF, Idle line detected clear flag
: UART8_ICR_ORECF ( -- x addr ) 3 bit UART8_ICR ; \ UART8_ICR_ORECF, Overrun error clear flag
: UART8_ICR_NCF ( -- x addr ) 2 bit UART8_ICR ; \ UART8_ICR_NCF, Noise detected clear flag
: UART8_ICR_FECF ( -- x addr ) 1 bit UART8_ICR ; \ UART8_ICR_FECF, Framing error clear flag
: UART8_ICR_PECF ( -- x addr ) 0 bit UART8_ICR ; \ UART8_ICR_PECF, Parity error clear flag

\ UART8_RDR (read-only) Reset:0x0000
: UART8_RDR_RDR? ( --  x ) UART8_RDR @ ; \ UART8_RDR_RDR, Receive data value

\ UART8_TDR (read-write) Reset:0x0000
: UART8_TDR_TDR ( %bbbbbbbbb -- x addr ) UART8_TDR ; \ UART8_TDR_TDR, Transmit data value

\ UART7_CR1 (read-write) Reset:0x0000
: UART7_CR1_M1 ( -- x addr ) 28 bit UART7_CR1 ; \ UART7_CR1_M1, Word length
: UART7_CR1_EOBIE ( -- x addr ) 27 bit UART7_CR1 ; \ UART7_CR1_EOBIE, End of Block interrupt enable
: UART7_CR1_RTOIE ( -- x addr ) 26 bit UART7_CR1 ; \ UART7_CR1_RTOIE, Receiver timeout interrupt enable
: UART7_CR1_DEAT4 ( -- x addr ) 25 bit UART7_CR1 ; \ UART7_CR1_DEAT4, Driver Enable assertion time
: UART7_CR1_DEAT3 ( -- x addr ) 24 bit UART7_CR1 ; \ UART7_CR1_DEAT3, DEAT3
: UART7_CR1_DEAT2 ( -- x addr ) 23 bit UART7_CR1 ; \ UART7_CR1_DEAT2, DEAT2
: UART7_CR1_DEAT1 ( -- x addr ) 22 bit UART7_CR1 ; \ UART7_CR1_DEAT1, DEAT1
: UART7_CR1_DEAT0 ( -- x addr ) 21 bit UART7_CR1 ; \ UART7_CR1_DEAT0, DEAT0
: UART7_CR1_DEDT4 ( -- x addr ) 20 bit UART7_CR1 ; \ UART7_CR1_DEDT4, Driver Enable de-assertion time
: UART7_CR1_DEDT3 ( -- x addr ) 19 bit UART7_CR1 ; \ UART7_CR1_DEDT3, DEDT3
: UART7_CR1_DEDT2 ( -- x addr ) 18 bit UART7_CR1 ; \ UART7_CR1_DEDT2, DEDT2
: UART7_CR1_DEDT1 ( -- x addr ) 17 bit UART7_CR1 ; \ UART7_CR1_DEDT1, DEDT1
: UART7_CR1_DEDT0 ( -- x addr ) 16 bit UART7_CR1 ; \ UART7_CR1_DEDT0, DEDT0
: UART7_CR1_OVER8 ( -- x addr ) 15 bit UART7_CR1 ; \ UART7_CR1_OVER8, Oversampling mode
: UART7_CR1_CMIE ( -- x addr ) 14 bit UART7_CR1 ; \ UART7_CR1_CMIE, Character match interrupt enable
: UART7_CR1_MME ( -- x addr ) 13 bit UART7_CR1 ; \ UART7_CR1_MME, Mute mode enable
: UART7_CR1_M0 ( -- x addr ) 12 bit UART7_CR1 ; \ UART7_CR1_M0, Word length
: UART7_CR1_WAKE ( -- x addr ) 11 bit UART7_CR1 ; \ UART7_CR1_WAKE, Receiver wakeup method
: UART7_CR1_PCE ( -- x addr ) 10 bit UART7_CR1 ; \ UART7_CR1_PCE, Parity control enable
: UART7_CR1_PS ( -- x addr ) 9 bit UART7_CR1 ; \ UART7_CR1_PS, Parity selection
: UART7_CR1_PEIE ( -- x addr ) 8 bit UART7_CR1 ; \ UART7_CR1_PEIE, PE interrupt enable
: UART7_CR1_TXEIE ( -- x addr ) 7 bit UART7_CR1 ; \ UART7_CR1_TXEIE, interrupt enable
: UART7_CR1_TCIE ( -- x addr ) 6 bit UART7_CR1 ; \ UART7_CR1_TCIE, Transmission complete interrupt enable
: UART7_CR1_RXNEIE ( -- x addr ) 5 bit UART7_CR1 ; \ UART7_CR1_RXNEIE, RXNE interrupt enable
: UART7_CR1_IDLEIE ( -- x addr ) 4 bit UART7_CR1 ; \ UART7_CR1_IDLEIE, IDLE interrupt enable
: UART7_CR1_TE ( -- x addr ) 3 bit UART7_CR1 ; \ UART7_CR1_TE, Transmitter enable
: UART7_CR1_RE ( -- x addr ) 2 bit UART7_CR1 ; \ UART7_CR1_RE, Receiver enable
: UART7_CR1_UESM ( -- x addr ) 1 bit UART7_CR1 ; \ UART7_CR1_UESM, USART enable in Stop mode
: UART7_CR1_UE ( -- x addr ) 0 bit UART7_CR1 ; \ UART7_CR1_UE, USART enable

\ UART7_CR2 (read-write) Reset:0x0000
: UART7_CR2_ADD4_7 ( %bbbb -- x addr ) 28 lshift UART7_CR2 ; \ UART7_CR2_ADD4_7, Address of the USART node
: UART7_CR2_ADD0_3 ( %bbbb -- x addr ) 24 lshift UART7_CR2 ; \ UART7_CR2_ADD0_3, Address of the USART node
: UART7_CR2_RTOEN ( -- x addr ) 23 bit UART7_CR2 ; \ UART7_CR2_RTOEN, Receiver timeout enable
: UART7_CR2_ABRMOD1 ( -- x addr ) 22 bit UART7_CR2 ; \ UART7_CR2_ABRMOD1, Auto baud rate mode
: UART7_CR2_ABRMOD0 ( -- x addr ) 21 bit UART7_CR2 ; \ UART7_CR2_ABRMOD0, ABRMOD0
: UART7_CR2_ABREN ( -- x addr ) 20 bit UART7_CR2 ; \ UART7_CR2_ABREN, Auto baud rate enable
: UART7_CR2_MSBFIRST ( -- x addr ) 19 bit UART7_CR2 ; \ UART7_CR2_MSBFIRST, Most significant bit first
: UART7_CR2_TAINV ( -- x addr ) 18 bit UART7_CR2 ; \ UART7_CR2_TAINV, Binary data inversion
: UART7_CR2_TXINV ( -- x addr ) 17 bit UART7_CR2 ; \ UART7_CR2_TXINV, TX pin active level inversion
: UART7_CR2_RXINV ( -- x addr ) 16 bit UART7_CR2 ; \ UART7_CR2_RXINV, RX pin active level inversion
: UART7_CR2_SWAP ( -- x addr ) 15 bit UART7_CR2 ; \ UART7_CR2_SWAP, Swap TX/RX pins
: UART7_CR2_LINEN ( -- x addr ) 14 bit UART7_CR2 ; \ UART7_CR2_LINEN, LIN mode enable
: UART7_CR2_STOP ( %bb -- x addr ) 12 lshift UART7_CR2 ; \ UART7_CR2_STOP, STOP bits
: UART7_CR2_CLKEN ( -- x addr ) 11 bit UART7_CR2 ; \ UART7_CR2_CLKEN, Clock enable
: UART7_CR2_CPOL ( -- x addr ) 10 bit UART7_CR2 ; \ UART7_CR2_CPOL, Clock polarity
: UART7_CR2_CPHA ( -- x addr ) 9 bit UART7_CR2 ; \ UART7_CR2_CPHA, Clock phase
: UART7_CR2_LBCL ( -- x addr ) 8 bit UART7_CR2 ; \ UART7_CR2_LBCL, Last bit clock pulse
: UART7_CR2_LBDIE ( -- x addr ) 6 bit UART7_CR2 ; \ UART7_CR2_LBDIE, LIN break detection interrupt enable
: UART7_CR2_LBDL ( -- x addr ) 5 bit UART7_CR2 ; \ UART7_CR2_LBDL, LIN break detection length
: UART7_CR2_ADDM7 ( -- x addr ) 4 bit UART7_CR2 ; \ UART7_CR2_ADDM7, 7-bit Address Detection/4-bit Address Detection

\ UART7_CR3 (read-write) Reset:0x0000
: UART7_CR3_WUFIE ( -- x addr ) 22 bit UART7_CR3 ; \ UART7_CR3_WUFIE, Wakeup from Stop mode interrupt enable
: UART7_CR3_WUS ( %bb -- x addr ) 20 lshift UART7_CR3 ; \ UART7_CR3_WUS, Wakeup from Stop mode interrupt flag selection
: UART7_CR3_SCARCNT ( %bbb -- x addr ) 17 lshift UART7_CR3 ; \ UART7_CR3_SCARCNT, Smartcard auto-retry count
: UART7_CR3_DEP ( -- x addr ) 15 bit UART7_CR3 ; \ UART7_CR3_DEP, Driver enable polarity selection
: UART7_CR3_DEM ( -- x addr ) 14 bit UART7_CR3 ; \ UART7_CR3_DEM, Driver enable mode
: UART7_CR3_DDRE ( -- x addr ) 13 bit UART7_CR3 ; \ UART7_CR3_DDRE, DMA Disable on Reception Error
: UART7_CR3_OVRDIS ( -- x addr ) 12 bit UART7_CR3 ; \ UART7_CR3_OVRDIS, Overrun Disable
: UART7_CR3_ONEBIT ( -- x addr ) 11 bit UART7_CR3 ; \ UART7_CR3_ONEBIT, One sample bit method enable
: UART7_CR3_CTSIE ( -- x addr ) 10 bit UART7_CR3 ; \ UART7_CR3_CTSIE, CTS interrupt enable
: UART7_CR3_CTSE ( -- x addr ) 9 bit UART7_CR3 ; \ UART7_CR3_CTSE, CTS enable
: UART7_CR3_RTSE ( -- x addr ) 8 bit UART7_CR3 ; \ UART7_CR3_RTSE, RTS enable
: UART7_CR3_DMAT ( -- x addr ) 7 bit UART7_CR3 ; \ UART7_CR3_DMAT, DMA enable transmitter
: UART7_CR3_DMAR ( -- x addr ) 6 bit UART7_CR3 ; \ UART7_CR3_DMAR, DMA enable receiver
: UART7_CR3_SCEN ( -- x addr ) 5 bit UART7_CR3 ; \ UART7_CR3_SCEN, Smartcard mode enable
: UART7_CR3_NACK ( -- x addr ) 4 bit UART7_CR3 ; \ UART7_CR3_NACK, Smartcard NACK enable
: UART7_CR3_HDSEL ( -- x addr ) 3 bit UART7_CR3 ; \ UART7_CR3_HDSEL, Half-duplex selection
: UART7_CR3_IRLP ( -- x addr ) 2 bit UART7_CR3 ; \ UART7_CR3_IRLP, Ir low-power
: UART7_CR3_IREN ( -- x addr ) 1 bit UART7_CR3 ; \ UART7_CR3_IREN, Ir mode enable
: UART7_CR3_EIE ( -- x addr ) 0 bit UART7_CR3 ; \ UART7_CR3_EIE, Error interrupt enable

\ UART7_BRR (read-write) Reset:0x0000
: UART7_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift UART7_BRR ; \ UART7_BRR_DIV_Mantissa, DIV_Mantissa
: UART7_BRR_DIV_Fraction ( %bbbb -- x addr ) UART7_BRR ; \ UART7_BRR_DIV_Fraction, DIV_Fraction

\ UART7_GTPR (read-write) Reset:0x0000
: UART7_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift UART7_GTPR ; \ UART7_GTPR_GT, Guard time value
: UART7_GTPR_PSC ( %bbbbbbbb -- x addr ) UART7_GTPR ; \ UART7_GTPR_PSC, Prescaler value

\ UART7_RTOR (read-write) Reset:0x0000
: UART7_RTOR_BLEN ( %bbbbbbbb -- x addr ) 24 lshift UART7_RTOR ; \ UART7_RTOR_BLEN, Block Length
: UART7_RTOR_RTO ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) UART7_RTOR ; \ UART7_RTOR_RTO, Receiver timeout value

\ UART7_RQR (write-only) Reset:0x0000
: UART7_RQR_TXFRQ ( -- x addr ) 4 bit UART7_RQR ; \ UART7_RQR_TXFRQ, Transmit data flush request
: UART7_RQR_RXFRQ ( -- x addr ) 3 bit UART7_RQR ; \ UART7_RQR_RXFRQ, Receive data flush request
: UART7_RQR_MMRQ ( -- x addr ) 2 bit UART7_RQR ; \ UART7_RQR_MMRQ, Mute mode request
: UART7_RQR_SBKRQ ( -- x addr ) 1 bit UART7_RQR ; \ UART7_RQR_SBKRQ, Send break request
: UART7_RQR_ABRRQ ( -- x addr ) 0 bit UART7_RQR ; \ UART7_RQR_ABRRQ, Auto baud rate request

\ UART7_ISR (read-only) Reset:0x00C0
: UART7_ISR_REACK? ( --  1|0 ) 22 bit UART7_ISR bit@ ; \ UART7_ISR_REACK, REACK
: UART7_ISR_TEACK? ( --  1|0 ) 21 bit UART7_ISR bit@ ; \ UART7_ISR_TEACK, TEACK
: UART7_ISR_WUF? ( --  1|0 ) 20 bit UART7_ISR bit@ ; \ UART7_ISR_WUF, WUF
: UART7_ISR_RWU? ( --  1|0 ) 19 bit UART7_ISR bit@ ; \ UART7_ISR_RWU, RWU
: UART7_ISR_SBKF? ( --  1|0 ) 18 bit UART7_ISR bit@ ; \ UART7_ISR_SBKF, SBKF
: UART7_ISR_CMF? ( --  1|0 ) 17 bit UART7_ISR bit@ ; \ UART7_ISR_CMF, CMF
: UART7_ISR_BUSY? ( --  1|0 ) 16 bit UART7_ISR bit@ ; \ UART7_ISR_BUSY, BUSY
: UART7_ISR_ABRF? ( --  1|0 ) 15 bit UART7_ISR bit@ ; \ UART7_ISR_ABRF, ABRF
: UART7_ISR_ABRE? ( --  1|0 ) 14 bit UART7_ISR bit@ ; \ UART7_ISR_ABRE, ABRE
: UART7_ISR_EOBF? ( --  1|0 ) 12 bit UART7_ISR bit@ ; \ UART7_ISR_EOBF, EOBF
: UART7_ISR_RTOF? ( --  1|0 ) 11 bit UART7_ISR bit@ ; \ UART7_ISR_RTOF, RTOF
: UART7_ISR_CTS? ( --  1|0 ) 10 bit UART7_ISR bit@ ; \ UART7_ISR_CTS, CTS
: UART7_ISR_CTSIF? ( --  1|0 ) 9 bit UART7_ISR bit@ ; \ UART7_ISR_CTSIF, CTSIF
: UART7_ISR_LBDF? ( --  1|0 ) 8 bit UART7_ISR bit@ ; \ UART7_ISR_LBDF, LBDF
: UART7_ISR_TXE? ( --  1|0 ) 7 bit UART7_ISR bit@ ; \ UART7_ISR_TXE, TXE
: UART7_ISR_TC? ( --  1|0 ) 6 bit UART7_ISR bit@ ; \ UART7_ISR_TC, TC
: UART7_ISR_RXNE? ( --  1|0 ) 5 bit UART7_ISR bit@ ; \ UART7_ISR_RXNE, RXNE
: UART7_ISR_IDLE? ( --  1|0 ) 4 bit UART7_ISR bit@ ; \ UART7_ISR_IDLE, IDLE
: UART7_ISR_ORE? ( --  1|0 ) 3 bit UART7_ISR bit@ ; \ UART7_ISR_ORE, ORE
: UART7_ISR_NF? ( --  1|0 ) 2 bit UART7_ISR bit@ ; \ UART7_ISR_NF, NF
: UART7_ISR_FE? ( --  1|0 ) 1 bit UART7_ISR bit@ ; \ UART7_ISR_FE, FE
: UART7_ISR_PE? ( --  1|0 ) 0 bit UART7_ISR bit@ ; \ UART7_ISR_PE, PE

\ UART7_ICR (write-only) Reset:0x0000
: UART7_ICR_WUCF ( -- x addr ) 20 bit UART7_ICR ; \ UART7_ICR_WUCF, Wakeup from Stop mode clear flag
: UART7_ICR_CMCF ( -- x addr ) 17 bit UART7_ICR ; \ UART7_ICR_CMCF, Character match clear flag
: UART7_ICR_EOBCF ( -- x addr ) 12 bit UART7_ICR ; \ UART7_ICR_EOBCF, End of block clear flag
: UART7_ICR_RTOCF ( -- x addr ) 11 bit UART7_ICR ; \ UART7_ICR_RTOCF, Receiver timeout clear flag
: UART7_ICR_CTSCF ( -- x addr ) 9 bit UART7_ICR ; \ UART7_ICR_CTSCF, CTS clear flag
: UART7_ICR_LBDCF ( -- x addr ) 8 bit UART7_ICR ; \ UART7_ICR_LBDCF, LIN break detection clear flag
: UART7_ICR_TCCF ( -- x addr ) 6 bit UART7_ICR ; \ UART7_ICR_TCCF, Transmission complete clear flag
: UART7_ICR_IDLECF ( -- x addr ) 4 bit UART7_ICR ; \ UART7_ICR_IDLECF, Idle line detected clear flag
: UART7_ICR_ORECF ( -- x addr ) 3 bit UART7_ICR ; \ UART7_ICR_ORECF, Overrun error clear flag
: UART7_ICR_NCF ( -- x addr ) 2 bit UART7_ICR ; \ UART7_ICR_NCF, Noise detected clear flag
: UART7_ICR_FECF ( -- x addr ) 1 bit UART7_ICR ; \ UART7_ICR_FECF, Framing error clear flag
: UART7_ICR_PECF ( -- x addr ) 0 bit UART7_ICR ; \ UART7_ICR_PECF, Parity error clear flag

\ UART7_RDR (read-only) Reset:0x0000
: UART7_RDR_RDR? ( --  x ) UART7_RDR @ ; \ UART7_RDR_RDR, Receive data value

\ UART7_TDR (read-write) Reset:0x0000
: UART7_TDR_TDR ( %bbbbbbbbb -- x addr ) UART7_TDR ; \ UART7_TDR_TDR, Transmit data value

\ OTG_FS_GLOBAL_OTG_FS_GOTGCTL (multiple-access)  Reset:0x00000800
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQSCS ( -- x addr ) 0 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQSCS, Session request success
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQ ( -- x addr ) 1 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQ, Session request
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HNGSCS ( -- x addr ) 8 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HNGSCS, Host negotiation success
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HNPRQ ( -- x addr ) 9 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HNPRQ, HNP request
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HSHNPEN ( -- x addr ) 10 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HSHNPEN, Host set HNP enable
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_DHNPEN ( -- x addr ) 11 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_DHNPEN, Device HNP enabled
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_CIDSTS? ( -- 1|0 ) 16 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL bit@ ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_CIDSTS, Connector ID status
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_DBCT ( -- x addr ) 17 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_DBCT, Long/short debounce time
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_ASVLD ( -- x addr ) 18 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_ASVLD, A-session valid
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BSVLD ( -- x addr ) 19 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BSVLD, B-session valid
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_VBVALOEN ( -- x addr ) 2 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_VBVALOEN, VBUS valid override enable
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_VBVALOVAL ( -- x addr ) 3 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_VBVALOVAL, VBUS valid override value
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_AVALOEN ( -- x addr ) 4 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_AVALOEN, A-peripheral session valid override enable
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_AVALOVAL ( -- x addr ) 5 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_AVALOVAL, A-peripheral session valid override value
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BVALOEN ( -- x addr ) 6 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BVALOEN, B-peripheral session valid override enable
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BVALOVAL ( -- x addr ) 7 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BVALOVAL, B-peripheral session valid override value
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_EHEN ( -- x addr ) 12 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_EHEN, Embedded host enable
: OTG_FS_GLOBAL_OTG_FS_GOTGCTL_OTGVER ( -- x addr ) 20 bit OTG_FS_GLOBAL_OTG_FS_GOTGCTL ; \ OTG_FS_GLOBAL_OTG_FS_GOTGCTL_OTGVER, OTG version

\ OTG_FS_GLOBAL_OTG_FS_GOTGINT (read-write) Reset:0x00000000
: OTG_FS_GLOBAL_OTG_FS_GOTGINT_SEDET ( -- x addr ) 2 bit OTG_FS_GLOBAL_OTG_FS_GOTGINT ; \ OTG_FS_GLOBAL_OTG_FS_GOTGINT_SEDET, Session end detected
: OTG_FS_GLOBAL_OTG_FS_GOTGINT_SRSSCHG ( -- x addr ) 8 bit OTG_FS_GLOBAL_OTG_FS_GOTGINT ; \ OTG_FS_GLOBAL_OTG_FS_GOTGINT_SRSSCHG, Session request success status change
: OTG_FS_GLOBAL_OTG_FS_GOTGINT_HNSSCHG ( -- x addr ) 9 bit OTG_FS_GLOBAL_OTG_FS_GOTGINT ; \ OTG_FS_GLOBAL_OTG_FS_GOTGINT_HNSSCHG, Host negotiation success status change
: OTG_FS_GLOBAL_OTG_FS_GOTGINT_HNGDET ( -- x addr ) 17 bit OTG_FS_GLOBAL_OTG_FS_GOTGINT ; \ OTG_FS_GLOBAL_OTG_FS_GOTGINT_HNGDET, Host negotiation detected
: OTG_FS_GLOBAL_OTG_FS_GOTGINT_ADTOCHG ( -- x addr ) 18 bit OTG_FS_GLOBAL_OTG_FS_GOTGINT ; \ OTG_FS_GLOBAL_OTG_FS_GOTGINT_ADTOCHG, A-device timeout change
: OTG_FS_GLOBAL_OTG_FS_GOTGINT_DBCDNE ( -- x addr ) 19 bit OTG_FS_GLOBAL_OTG_FS_GOTGINT ; \ OTG_FS_GLOBAL_OTG_FS_GOTGINT_DBCDNE, Debounce done
: OTG_FS_GLOBAL_OTG_FS_GOTGINT_IDCHNG ( -- x addr ) 20 bit OTG_FS_GLOBAL_OTG_FS_GOTGINT ; \ OTG_FS_GLOBAL_OTG_FS_GOTGINT_IDCHNG, ID input pin changed

\ OTG_FS_GLOBAL_OTG_FS_GAHBCFG (read-write) Reset:0x00000000
: OTG_FS_GLOBAL_OTG_FS_GAHBCFG_GINT ( -- x addr ) 0 bit OTG_FS_GLOBAL_OTG_FS_GAHBCFG ; \ OTG_FS_GLOBAL_OTG_FS_GAHBCFG_GINT, Global interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GAHBCFG_TXFELVL ( -- x addr ) 7 bit OTG_FS_GLOBAL_OTG_FS_GAHBCFG ; \ OTG_FS_GLOBAL_OTG_FS_GAHBCFG_TXFELVL, TxFIFO empty level
: OTG_FS_GLOBAL_OTG_FS_GAHBCFG_PTXFELVL ( -- x addr ) 8 bit OTG_FS_GLOBAL_OTG_FS_GAHBCFG ; \ OTG_FS_GLOBAL_OTG_FS_GAHBCFG_PTXFELVL, Periodic TxFIFO empty level

\ OTG_FS_GLOBAL_OTG_FS_GUSBCFG (multiple-access)  Reset:0x00000A00
: OTG_FS_GLOBAL_OTG_FS_GUSBCFG_TOCAL ( %bbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_GUSBCFG ; \ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_TOCAL, FS timeout calibration
: OTG_FS_GLOBAL_OTG_FS_GUSBCFG_PHYSEL ( -- x addr ) 6 bit OTG_FS_GLOBAL_OTG_FS_GUSBCFG ; \ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_PHYSEL, Full Speed serial transceiver select
: OTG_FS_GLOBAL_OTG_FS_GUSBCFG_SRPCAP ( -- x addr ) 8 bit OTG_FS_GLOBAL_OTG_FS_GUSBCFG ; \ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_SRPCAP, SRP-capable
: OTG_FS_GLOBAL_OTG_FS_GUSBCFG_HNPCAP ( -- x addr ) 9 bit OTG_FS_GLOBAL_OTG_FS_GUSBCFG ; \ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_HNPCAP, HNP-capable
: OTG_FS_GLOBAL_OTG_FS_GUSBCFG_TRDT ( %bbbb -- x addr ) 10 lshift OTG_FS_GLOBAL_OTG_FS_GUSBCFG ; \ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_TRDT, USB turnaround time
: OTG_FS_GLOBAL_OTG_FS_GUSBCFG_FHMOD ( -- x addr ) 29 bit OTG_FS_GLOBAL_OTG_FS_GUSBCFG ; \ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_FHMOD, Force host mode
: OTG_FS_GLOBAL_OTG_FS_GUSBCFG_FDMOD ( -- x addr ) 30 bit OTG_FS_GLOBAL_OTG_FS_GUSBCFG ; \ OTG_FS_GLOBAL_OTG_FS_GUSBCFG_FDMOD, Force device mode

\ OTG_FS_GLOBAL_OTG_FS_GRSTCTL (multiple-access)  Reset:0x20000000
: OTG_FS_GLOBAL_OTG_FS_GRSTCTL_CSRST ( -- x addr ) 0 bit OTG_FS_GLOBAL_OTG_FS_GRSTCTL ; \ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_CSRST, Core soft reset
: OTG_FS_GLOBAL_OTG_FS_GRSTCTL_HSRST ( -- x addr ) 1 bit OTG_FS_GLOBAL_OTG_FS_GRSTCTL ; \ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_HSRST, HCLK soft reset
: OTG_FS_GLOBAL_OTG_FS_GRSTCTL_FCRST ( -- x addr ) 2 bit OTG_FS_GLOBAL_OTG_FS_GRSTCTL ; \ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_FCRST, Host frame counter reset
: OTG_FS_GLOBAL_OTG_FS_GRSTCTL_RXFFLSH ( -- x addr ) 4 bit OTG_FS_GLOBAL_OTG_FS_GRSTCTL ; \ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_RXFFLSH, RxFIFO flush
: OTG_FS_GLOBAL_OTG_FS_GRSTCTL_TXFFLSH ( -- x addr ) 5 bit OTG_FS_GLOBAL_OTG_FS_GRSTCTL ; \ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_TXFFLSH, TxFIFO flush
: OTG_FS_GLOBAL_OTG_FS_GRSTCTL_TXFNUM ( %bbbbb -- x addr ) 6 lshift OTG_FS_GLOBAL_OTG_FS_GRSTCTL ; \ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_TXFNUM, TxFIFO number
: OTG_FS_GLOBAL_OTG_FS_GRSTCTL_AHBIDL ( -- x addr ) 31 bit OTG_FS_GLOBAL_OTG_FS_GRSTCTL ; \ OTG_FS_GLOBAL_OTG_FS_GRSTCTL_AHBIDL, AHB master idle

\ OTG_FS_GLOBAL_OTG_FS_GINTSTS (multiple-access)  Reset:0x04000020
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_CMOD ( -- x addr ) 0 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_CMOD, Current mode of operation
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_MMIS ( -- x addr ) 1 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_MMIS, Mode mismatch interrupt
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_OTGINT ( -- x addr ) 2 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_OTGINT, OTG interrupt
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_SOF ( -- x addr ) 3 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_SOF, Start of frame
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_RXFLVL ( -- x addr ) 4 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_RXFLVL, RxFIFO non-empty
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_NPTXFE ( -- x addr ) 5 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_NPTXFE, Non-periodic TxFIFO empty
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_GINAKEFF ( -- x addr ) 6 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_GINAKEFF, Global IN non-periodic NAK effective
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_GOUTNAKEFF ( -- x addr ) 7 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_GOUTNAKEFF, Global OUT NAK effective
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_ESUSP ( -- x addr ) 10 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_ESUSP, Early suspend
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_USBSUSP ( -- x addr ) 11 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_USBSUSP, USB suspend
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_USBRST ( -- x addr ) 12 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_USBRST, USB reset
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_ENUMDNE ( -- x addr ) 13 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_ENUMDNE, Enumeration done
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_ISOODRP ( -- x addr ) 14 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_ISOODRP, Isochronous OUT packet dropped interrupt
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_EOPF ( -- x addr ) 15 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_EOPF, End of periodic frame interrupt
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_IEPINT ( -- x addr ) 18 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_IEPINT, IN endpoint interrupt
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_OEPINT ( -- x addr ) 19 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_OEPINT, OUT endpoint interrupt
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_IISOIXFR ( -- x addr ) 20 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_IISOIXFR, Incomplete isochronous IN transfer
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_IPXFR_INCOMPISOOUT ( -- x addr ) 21 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_IPXFR_INCOMPISOOUT, Incomplete periodic transferHost mode/Incomplete isochronous OUT transferDevice mode
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_HPRTINT ( -- x addr ) 24 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_HPRTINT, Host port interrupt
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_HCINT ( -- x addr ) 25 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_HCINT, Host channels interrupt
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_PTXFE ( -- x addr ) 26 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_PTXFE, Periodic TxFIFO empty
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_CIDSCHG? ( -- 1|0 ) 28 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS bit@ ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_CIDSCHG, Connector ID status change
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_DISCINT ( -- x addr ) 29 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_DISCINT, Disconnect detected interrupt
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_SRQINT ( -- x addr ) 30 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_SRQINT, Session request/new session detected interrupt
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_WKUPINT ( -- x addr ) 31 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_WKUPINT, Resume/remote wakeup detected interrupt
: OTG_FS_GLOBAL_OTG_FS_GINTSTS_RSTDET ( -- x addr ) 23 bit OTG_FS_GLOBAL_OTG_FS_GINTSTS ; \ OTG_FS_GLOBAL_OTG_FS_GINTSTS_RSTDET, Reset detected interrupt

\ OTG_FS_GLOBAL_OTG_FS_GINTMSK (multiple-access)  Reset:0x00000000
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_MMISM ( -- x addr ) 1 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_MMISM, Mode mismatch interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_OTGINT ( -- x addr ) 2 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_OTGINT, OTG interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_SOFM ( -- x addr ) 3 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_SOFM, Start of frame mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_RXFLVLM ( -- x addr ) 4 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_RXFLVLM, Receive FIFO non-empty mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_NPTXFEM ( -- x addr ) 5 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_NPTXFEM, Non-periodic TxFIFO empty mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_GINAKEFFM ( -- x addr ) 6 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_GINAKEFFM, Global non-periodic IN NAK effective mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_GONAKEFFM ( -- x addr ) 7 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_GONAKEFFM, Global OUT NAK effective mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_ESUSPM ( -- x addr ) 10 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_ESUSPM, Early suspend mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_USBSUSPM ( -- x addr ) 11 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_USBSUSPM, USB suspend mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_USBRST ( -- x addr ) 12 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_USBRST, USB reset mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_ENUMDNEM ( -- x addr ) 13 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_ENUMDNEM, Enumeration done mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_ISOODRPM ( -- x addr ) 14 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_ISOODRPM, Isochronous OUT packet dropped interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_EOPFM ( -- x addr ) 15 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_EOPFM, End of periodic frame interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_IEPINT ( -- x addr ) 18 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_IEPINT, IN endpoints interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_OEPINT ( -- x addr ) 19 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_OEPINT, OUT endpoints interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_IISOIXFRM ( -- x addr ) 20 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_IISOIXFRM, Incomplete isochronous IN transfer mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_IPXFRM_IISOOXFRM ( -- x addr ) 21 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_IPXFRM_IISOOXFRM, Incomplete periodic transfer maskHost mode/Incomplete isochronous OUT transfer maskDevice mode
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_PRTIM ( -- x addr ) 24 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_PRTIM, Host port interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_HCIM ( -- x addr ) 25 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_HCIM, Host channels interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_PTXFEM ( -- x addr ) 26 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_PTXFEM, Periodic TxFIFO empty mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_CIDSCHGM? ( -- 1|0 ) 28 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK bit@ ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_CIDSCHGM, Connector ID status change mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_DISCINT ( -- x addr ) 29 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_DISCINT, Disconnect detected interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_SRQIM ( -- x addr ) 30 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_SRQIM, Session request/new session detected interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_WUIM ( -- x addr ) 31 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_WUIM, Resume/remote wakeup detected interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_RSTDETM ( -- x addr ) 23 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_RSTDETM, Reset detected interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GINTMSK_LPMIN ( -- x addr ) 27 bit OTG_FS_GLOBAL_OTG_FS_GINTMSK ; \ OTG_FS_GLOBAL_OTG_FS_GINTMSK_LPMIN, LPM interrupt mask

\ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device (read-only) Reset:0x00000000
: OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_EPNUM? ( --  x ) OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_EPNUM, Endpoint number
: OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_BCNT? ( --  x ) 4 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_BCNT, Byte count
: OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_DPID? ( --  x ) 15 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_DPID, Data PID
: OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_PKTSTS? ( --  x ) 17 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_PKTSTS, Packet status
: OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_FRMNUM? ( --  x ) 21 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_FRMNUM, Frame number

\ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host (read-only) Reset:0x00000000
: OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_CHNUM? ( --  x ) OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_CHNUM, Endpoint number
: OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_BCNT? ( --  x ) 4 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_BCNT, Byte count
: OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_DPID? ( --  x ) 15 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_DPID, Data PID
: OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_PKTSTS? ( --  x ) 17 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_PKTSTS, Packet status

\ OTG_FS_GLOBAL_OTG_FS_GRXFSIZ (read-write) Reset:0x00000200
: OTG_FS_GLOBAL_OTG_FS_GRXFSIZ_RXFD ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_GRXFSIZ ; \ OTG_FS_GLOBAL_OTG_FS_GRXFSIZ_RXFD, RxFIFO depth

\ OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device (read-write) Reset:0x00000200
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device_TX0FSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device_TX0FSA, Endpoint 0 transmit RAM start address
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device_TX0FD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device_TX0FD, Endpoint 0 TxFIFO depth

\ OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host (read-write) Reset:0x00000200
: OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host_NPTXFSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host ; \ OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host_NPTXFSA, Non-periodic transmit RAM start address
: OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host_NPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host ; \ OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host_NPTXFD, Non-periodic TxFIFO depth

\ OTG_FS_GLOBAL_OTG_FS_HNPTXSTS (read-only) Reset:0x00080200
: OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTXFSAV? ( --  x ) OTG_FS_GLOBAL_OTG_FS_HNPTXSTS @ ; \ OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTXFSAV, Non-periodic TxFIFO space available
: OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTQXSAV? ( --  x ) 16 lshift OTG_FS_GLOBAL_OTG_FS_HNPTXSTS @ ; \ OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTQXSAV, Non-periodic transmit request queue space available
: OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTXQTOP? ( --  x ) 24 lshift OTG_FS_GLOBAL_OTG_FS_HNPTXSTS @ ; \ OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTXQTOP, Top of the non-periodic transmit request queue

\ OTG_FS_GLOBAL_OTG_FS_GCCFG (read-write) Reset:0x00000000
: OTG_FS_GLOBAL_OTG_FS_GCCFG_PWRDWN ( -- x addr ) 16 bit OTG_FS_GLOBAL_OTG_FS_GCCFG ; \ OTG_FS_GLOBAL_OTG_FS_GCCFG_PWRDWN, Power down
: OTG_FS_GLOBAL_OTG_FS_GCCFG_BCDEN ( -- x addr ) 17 bit OTG_FS_GLOBAL_OTG_FS_GCCFG ; \ OTG_FS_GLOBAL_OTG_FS_GCCFG_BCDEN, Battery charging detector BCD enable
: OTG_FS_GLOBAL_OTG_FS_GCCFG_DCDEN ( -- x addr ) 18 bit OTG_FS_GLOBAL_OTG_FS_GCCFG ; \ OTG_FS_GLOBAL_OTG_FS_GCCFG_DCDEN, Data contact detection DCD mode enable
: OTG_FS_GLOBAL_OTG_FS_GCCFG_PDEN ( -- x addr ) 19 bit OTG_FS_GLOBAL_OTG_FS_GCCFG ; \ OTG_FS_GLOBAL_OTG_FS_GCCFG_PDEN, Primary detection PD mode enable
: OTG_FS_GLOBAL_OTG_FS_GCCFG_SDEN ( -- x addr ) 20 bit OTG_FS_GLOBAL_OTG_FS_GCCFG ; \ OTG_FS_GLOBAL_OTG_FS_GCCFG_SDEN, Secondary detection SD mode enable
: OTG_FS_GLOBAL_OTG_FS_GCCFG_VBDEN ( -- x addr ) 21 bit OTG_FS_GLOBAL_OTG_FS_GCCFG ; \ OTG_FS_GLOBAL_OTG_FS_GCCFG_VBDEN, USB VBUS detection enable
: OTG_FS_GLOBAL_OTG_FS_GCCFG_DCDET ( -- x addr ) 0 bit OTG_FS_GLOBAL_OTG_FS_GCCFG ; \ OTG_FS_GLOBAL_OTG_FS_GCCFG_DCDET, Data contact detection DCD status
: OTG_FS_GLOBAL_OTG_FS_GCCFG_PDET ( -- x addr ) 1 bit OTG_FS_GLOBAL_OTG_FS_GCCFG ; \ OTG_FS_GLOBAL_OTG_FS_GCCFG_PDET, Primary detection PD status
: OTG_FS_GLOBAL_OTG_FS_GCCFG_SDET ( -- x addr ) 2 bit OTG_FS_GLOBAL_OTG_FS_GCCFG ; \ OTG_FS_GLOBAL_OTG_FS_GCCFG_SDET, Secondary detection SD status
: OTG_FS_GLOBAL_OTG_FS_GCCFG_PS2DET ( -- x addr ) 3 bit OTG_FS_GLOBAL_OTG_FS_GCCFG ; \ OTG_FS_GLOBAL_OTG_FS_GCCFG_PS2DET, DM pull-up detection status

\ OTG_FS_GLOBAL_OTG_FS_CID (read-write) Reset:0x00001000
: OTG_FS_GLOBAL_OTG_FS_CID_PRODUCT_ID ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_CID ; \ OTG_FS_GLOBAL_OTG_FS_CID_PRODUCT_ID, Product ID field

\ OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ (read-write) Reset:0x02000600
: OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ_PTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ ; \ OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ_PTXSA, Host periodic TxFIFO start address
: OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ_PTXFSIZ ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ ; \ OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ_PTXFSIZ, Host periodic TxFIFO depth

\ OTG_FS_GLOBAL_OTG_FS_DIEPTXF1 (read-write) Reset:0x02000400
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF1_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_DIEPTXF1 ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF1_INEPTXSA, IN endpoint FIFO2 transmit RAM start address
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF1_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_OTG_FS_DIEPTXF1 ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF1_INEPTXFD, IN endpoint TxFIFO depth

\ OTG_FS_GLOBAL_OTG_FS_DIEPTXF2 (read-write) Reset:0x02000400
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF2_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_DIEPTXF2 ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF2_INEPTXSA, IN endpoint FIFO3 transmit RAM start address
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF2_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_OTG_FS_DIEPTXF2 ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF2_INEPTXFD, IN endpoint TxFIFO depth

\ OTG_FS_GLOBAL_OTG_FS_DIEPTXF3 (read-write) Reset:0x02000400
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF3_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_DIEPTXF3 ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF3_INEPTXSA, IN endpoint FIFO4 transmit RAM start address
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF3_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_OTG_FS_DIEPTXF3 ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF3_INEPTXFD, IN endpoint TxFIFO depth

\ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device (read-only) Reset:0x02000400
: OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_EPNUM? ( --  x ) OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_EPNUM, Endpoint number
: OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_BCNT? ( --  x ) 4 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_BCNT, Byte count
: OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_DPID? ( --  x ) 15 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_DPID, Data PID
: OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_PKTSTS? ( --  x ) 17 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_PKTSTS, Packet status
: OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_FRMNUM? ( --  x ) 21 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_FRMNUM, Frame number

\ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host (read-only) Reset:0x02000400
: OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_CHNUM? ( --  x ) OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_CHNUM, Channel number
: OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_BCNT? ( --  x ) 4 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_BCNT, Byte count
: OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_DPID? ( --  x ) 15 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_DPID, Data PID
: OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_PKTSTS? ( --  x ) 17 lshift OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host @ ; \ OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_PKTSTS, Packet status

\ OTG_FS_GLOBAL_OTG_FS_GI2CCTL (read-write) Reset:0x02000400
: OTG_FS_GLOBAL_OTG_FS_GI2CCTL_RWDATA ( %bbbbbbbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_GI2CCTL ; \ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_RWDATA, I2C Read/Write Data
: OTG_FS_GLOBAL_OTG_FS_GI2CCTL_REGADDR ( %bbbbbbbb -- x addr ) 8 lshift OTG_FS_GLOBAL_OTG_FS_GI2CCTL ; \ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_REGADDR, I2C Register Address
: OTG_FS_GLOBAL_OTG_FS_GI2CCTL_ADDR ( %bbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_OTG_FS_GI2CCTL ; \ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_ADDR, I2C Address
: OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CEN ( -- x addr ) 23 bit OTG_FS_GLOBAL_OTG_FS_GI2CCTL ; \ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CEN, I2C Enable
: OTG_FS_GLOBAL_OTG_FS_GI2CCTL_ACK ( -- x addr ) 24 bit OTG_FS_GLOBAL_OTG_FS_GI2CCTL ; \ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_ACK, I2C ACK
: OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CDEVADR ( %bb -- x addr ) 26 lshift OTG_FS_GLOBAL_OTG_FS_GI2CCTL ; \ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CDEVADR, I2C Device Address
: OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CDATSE0 ( -- x addr ) 28 bit OTG_FS_GLOBAL_OTG_FS_GI2CCTL ; \ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CDATSE0, I2C DatSe0 USB mode
: OTG_FS_GLOBAL_OTG_FS_GI2CCTL_RW ( -- x addr ) 30 bit OTG_FS_GLOBAL_OTG_FS_GI2CCTL ; \ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_RW, Read/Write Indicator
: OTG_FS_GLOBAL_OTG_FS_GI2CCTL_BSYDNE ( -- x addr ) 31 bit OTG_FS_GLOBAL_OTG_FS_GI2CCTL ; \ OTG_FS_GLOBAL_OTG_FS_GI2CCTL_BSYDNE, I2C Busy/Done

\ OTG_FS_GLOBAL_OTG_FS_GPWRDN (read-write) Reset:0x02000400
: OTG_FS_GLOBAL_OTG_FS_GPWRDN_ADPMEN ( -- x addr ) 0 bit OTG_FS_GLOBAL_OTG_FS_GPWRDN ; \ OTG_FS_GLOBAL_OTG_FS_GPWRDN_ADPMEN, ADP module enable
: OTG_FS_GLOBAL_OTG_FS_GPWRDN_ADPIF ( -- x addr ) 23 bit OTG_FS_GLOBAL_OTG_FS_GPWRDN ; \ OTG_FS_GLOBAL_OTG_FS_GPWRDN_ADPIF, ADP interrupt flag

\ OTG_FS_GLOBAL_OTG_FS_GADPCTL (multiple-access)  Reset:0x02000400
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBDSCHG ( %bb -- x addr ) OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBDSCHG, Probe discharge
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBDELTA ( %bb -- x addr ) 2 lshift OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBDELTA, Probe delta
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBPER ( %bb -- x addr ) 4 lshift OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBPER, Probe period
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_RTIM x addr ) 6 lshift OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_RTIM, Ramp time
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_ENAPRB ( -- x addr ) 17 bit OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ENAPRB, Enable probe
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_ENASNS ( -- x addr ) 18 bit OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ENASNS, Enable sense
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPRST ( -- x addr ) 19 bit OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPRST, ADP reset
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPEN ( -- x addr ) 20 bit OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPEN, ADP enable
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPPRBIF? ( -- 1|0 ) 21 bit OTG_FS_GLOBAL_OTG_FS_GADPCTL bit@ ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPPRBIF, ADP probe interrupt flag
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPSNSIF? ( -- 1|0 ) 22 bit OTG_FS_GLOBAL_OTG_FS_GADPCTL bit@ ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPSNSIF, ADP sense interrupt flag
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPTOIF? ( -- 1|0 ) 23 bit OTG_FS_GLOBAL_OTG_FS_GADPCTL bit@ ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPTOIF, ADP timeout interrupt flag
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPPRBIM ( -- x addr ) 24 bit OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPPRBIM, ADP probe interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPSNSIM ( -- x addr ) 25 bit OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPSNSIM, ADP sense interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPTOIM ( -- x addr ) 26 bit OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPTOIM, ADP timeout interrupt mask
: OTG_FS_GLOBAL_OTG_FS_GADPCTL_AR ( %bb -- x addr ) 27 lshift OTG_FS_GLOBAL_OTG_FS_GADPCTL ; \ OTG_FS_GLOBAL_OTG_FS_GADPCTL_AR, Access request

\ OTG_FS_GLOBAL_OTG_FS_DIEPTXF4 (read-write) Reset:0x02000400
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF4_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_DIEPTXF4 ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF4_INEPTXSA, IN endpoint FIFOx transmit RAM start address
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF4_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_OTG_FS_DIEPTXF4 ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF4_INEPTXFD, IN endpoint Tx FIFO depth

\ OTG_FS_GLOBAL_OTG_FS_DIEPTXF5 (read-write) Reset:0x02000400
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF5_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_OTG_FS_DIEPTXF5 ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF5_INEPTXSA, IN endpoint FIFOx transmit RAM start address
: OTG_FS_GLOBAL_OTG_FS_DIEPTXF5_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_OTG_FS_DIEPTXF5 ; \ OTG_FS_GLOBAL_OTG_FS_DIEPTXF5_INEPTXFD, IN endpoint Tx FIFO depth

\ OTG_FS_GLOBAL_OTG_FS_GLPMCFG (multiple-access)  Reset:0x02000400
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMEN ( -- x addr ) 0 bit OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMEN, LPM support enable
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMACK ( -- x addr ) 1 bit OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMACK, LPM token acknowledge enable
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_BESL ( %bbbb -- x addr ) 2 lshift OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_BESL, Best effort service latency
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_REMWAKE ( -- x addr ) 6 bit OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_REMWAKE, bRemoteWake value
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1SSEN ( -- x addr ) 7 bit OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1SSEN, L1 Shallow Sleep enable
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_BESLTHRS ( %bbbb -- x addr ) 8 lshift OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_BESLTHRS, BESL threshold
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1DSEN ( -- x addr ) 12 bit OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1DSEN, L1 deep sleep enable
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRST ( %bb -- x addr ) 13 lshift OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRST, LPM response
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_SLPSTS? ( -- 1|0 ) 15 bit OTG_FS_GLOBAL_OTG_FS_GLPMCFG bit@ ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_SLPSTS, Port sleep status
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1RSMOK ( -- x addr ) 16 bit OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1RSMOK, Sleep State Resume OK
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMCHIDX ( %bbbb -- x addr ) 17 lshift OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMCHIDX, LPM Channel Index
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRCNT ( %bbb -- x addr ) 21 lshift OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRCNT, LPM retry count
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_SNDLPM ( -- x addr ) 24 bit OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_SNDLPM, Send LPM transaction
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRCNTSTS? ( %bbb -- 1|0 ) 25 lshift OTG_FS_GLOBAL_OTG_FS_GLPMCFG bit@ ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRCNTSTS, LPM retry count status
: OTG_FS_GLOBAL_OTG_FS_GLPMCFG_ENBESL ( -- x addr ) 28 bit OTG_FS_GLOBAL_OTG_FS_GLPMCFG ; \ OTG_FS_GLOBAL_OTG_FS_GLPMCFG_ENBESL, Enable best effort service latency

\ OTG_FS_HOST_OTG_FS_HCFG (multiple-access)  Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCFG_FSLSPCS ( %bb -- x addr ) OTG_FS_HOST_OTG_FS_HCFG ; \ OTG_FS_HOST_OTG_FS_HCFG_FSLSPCS, FS/LS PHY clock select
: OTG_FS_HOST_OTG_FS_HCFG_FSLSS ( -- x addr ) 2 bit OTG_FS_HOST_OTG_FS_HCFG ; \ OTG_FS_HOST_OTG_FS_HCFG_FSLSS, FS- and LS-only support

\ OTG_FS_HOST_OTG_FS_HFIR (read-write) Reset:0x0000EA60
: OTG_FS_HOST_OTG_FS_HFIR_FRIVL ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_HOST_OTG_FS_HFIR ; \ OTG_FS_HOST_OTG_FS_HFIR_FRIVL, Frame interval

\ OTG_FS_HOST_OTG_FS_HFNUM (read-only) Reset:0x00003FFF
: OTG_FS_HOST_OTG_FS_HFNUM_FRNUM? ( --  x ) OTG_FS_HOST_OTG_FS_HFNUM @ ; \ OTG_FS_HOST_OTG_FS_HFNUM_FRNUM, Frame number
: OTG_FS_HOST_OTG_FS_HFNUM_FTREM? ( --  x ) 16 lshift OTG_FS_HOST_OTG_FS_HFNUM @ ; \ OTG_FS_HOST_OTG_FS_HFNUM_FTREM, Frame time remaining

\ OTG_FS_HOST_OTG_FS_HPTXSTS (multiple-access)  Reset:0x00080100
: OTG_FS_HOST_OTG_FS_HPTXSTS_PTXFSAVL ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_HOST_OTG_FS_HPTXSTS ; \ OTG_FS_HOST_OTG_FS_HPTXSTS_PTXFSAVL, Periodic transmit data FIFO space available
: OTG_FS_HOST_OTG_FS_HPTXSTS_PTXQSAV ( %bbbbbbbb -- x addr ) 16 lshift OTG_FS_HOST_OTG_FS_HPTXSTS ; \ OTG_FS_HOST_OTG_FS_HPTXSTS_PTXQSAV, Periodic transmit request queue space available
: OTG_FS_HOST_OTG_FS_HPTXSTS_PTXQTOP ( %bbbbbbbb -- x addr ) 24 lshift OTG_FS_HOST_OTG_FS_HPTXSTS ; \ OTG_FS_HOST_OTG_FS_HPTXSTS_PTXQTOP, Top of the periodic transmit request queue

\ OTG_FS_HOST_OTG_FS_HAINT (read-only) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HAINT_HAINT? ( --  x ) OTG_FS_HOST_OTG_FS_HAINT @ ; \ OTG_FS_HOST_OTG_FS_HAINT_HAINT, Channel interrupts

\ OTG_FS_HOST_OTG_FS_HAINTMSK (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HAINTMSK_HAINTM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_HOST_OTG_FS_HAINTMSK ; \ OTG_FS_HOST_OTG_FS_HAINTMSK_HAINTM, Channel interrupt mask

\ OTG_FS_HOST_OTG_FS_HPRT (multiple-access)  Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HPRT_PCSTS? ( -- 1|0 ) 0 bit OTG_FS_HOST_OTG_FS_HPRT bit@ ; \ OTG_FS_HOST_OTG_FS_HPRT_PCSTS, Port connect status
: OTG_FS_HOST_OTG_FS_HPRT_PCDET ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HPRT ; \ OTG_FS_HOST_OTG_FS_HPRT_PCDET, Port connect detected
: OTG_FS_HOST_OTG_FS_HPRT_PENA ( -- x addr ) 2 bit OTG_FS_HOST_OTG_FS_HPRT ; \ OTG_FS_HOST_OTG_FS_HPRT_PENA, Port enable
: OTG_FS_HOST_OTG_FS_HPRT_PENCHNG ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HPRT ; \ OTG_FS_HOST_OTG_FS_HPRT_PENCHNG, Port enable/disable change
: OTG_FS_HOST_OTG_FS_HPRT_POCA ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HPRT ; \ OTG_FS_HOST_OTG_FS_HPRT_POCA, Port overcurrent active
: OTG_FS_HOST_OTG_FS_HPRT_POCCHNG ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HPRT ; \ OTG_FS_HOST_OTG_FS_HPRT_POCCHNG, Port overcurrent change
: OTG_FS_HOST_OTG_FS_HPRT_PRES ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HPRT ; \ OTG_FS_HOST_OTG_FS_HPRT_PRES, Port resume
: OTG_FS_HOST_OTG_FS_HPRT_PSUSP ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HPRT ; \ OTG_FS_HOST_OTG_FS_HPRT_PSUSP, Port suspend
: OTG_FS_HOST_OTG_FS_HPRT_PRST ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HPRT ; \ OTG_FS_HOST_OTG_FS_HPRT_PRST, Port reset
: OTG_FS_HOST_OTG_FS_HPRT_PLSTS? ( %bb -- 1|0 ) 10 lshift OTG_FS_HOST_OTG_FS_HPRT bit@ ; \ OTG_FS_HOST_OTG_FS_HPRT_PLSTS, Port line status
: OTG_FS_HOST_OTG_FS_HPRT_PPWR ( -- x addr ) 12 bit OTG_FS_HOST_OTG_FS_HPRT ; \ OTG_FS_HOST_OTG_FS_HPRT_PPWR, Port power
: OTG_FS_HOST_OTG_FS_HPRT_PTCTL ( %bbbb -- x addr ) 13 lshift OTG_FS_HOST_OTG_FS_HPRT ; \ OTG_FS_HOST_OTG_FS_HPRT_PTCTL, Port test control
: OTG_FS_HOST_OTG_FS_HPRT_PSPD ( %bb -- x addr ) 17 lshift OTG_FS_HOST_OTG_FS_HPRT ; \ OTG_FS_HOST_OTG_FS_HPRT_PSPD, Port speed

\ OTG_FS_HOST_OTG_FS_HCCHAR0 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR0_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR0 ; \ OTG_FS_HOST_OTG_FS_HCCHAR0_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR0_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR0 ; \ OTG_FS_HOST_OTG_FS_HCCHAR0_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR0_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR0 ; \ OTG_FS_HOST_OTG_FS_HCCHAR0_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR0_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR0 ; \ OTG_FS_HOST_OTG_FS_HCCHAR0_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR0_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR0 ; \ OTG_FS_HOST_OTG_FS_HCCHAR0_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR0_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR0 ; \ OTG_FS_HOST_OTG_FS_HCCHAR0_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR0_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR0 ; \ OTG_FS_HOST_OTG_FS_HCCHAR0_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR0_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR0 ; \ OTG_FS_HOST_OTG_FS_HCCHAR0_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR0_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR0 ; \ OTG_FS_HOST_OTG_FS_HCCHAR0_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR0_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR0 ; \ OTG_FS_HOST_OTG_FS_HCCHAR0_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCCHAR1 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR1_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR1 ; \ OTG_FS_HOST_OTG_FS_HCCHAR1_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR1_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR1 ; \ OTG_FS_HOST_OTG_FS_HCCHAR1_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR1_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR1 ; \ OTG_FS_HOST_OTG_FS_HCCHAR1_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR1_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR1 ; \ OTG_FS_HOST_OTG_FS_HCCHAR1_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR1_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR1 ; \ OTG_FS_HOST_OTG_FS_HCCHAR1_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR1_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR1 ; \ OTG_FS_HOST_OTG_FS_HCCHAR1_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR1_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR1 ; \ OTG_FS_HOST_OTG_FS_HCCHAR1_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR1_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR1 ; \ OTG_FS_HOST_OTG_FS_HCCHAR1_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR1_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR1 ; \ OTG_FS_HOST_OTG_FS_HCCHAR1_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR1_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR1 ; \ OTG_FS_HOST_OTG_FS_HCCHAR1_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCCHAR2 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR2_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR2 ; \ OTG_FS_HOST_OTG_FS_HCCHAR2_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR2_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR2 ; \ OTG_FS_HOST_OTG_FS_HCCHAR2_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR2_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR2 ; \ OTG_FS_HOST_OTG_FS_HCCHAR2_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR2_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR2 ; \ OTG_FS_HOST_OTG_FS_HCCHAR2_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR2_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR2 ; \ OTG_FS_HOST_OTG_FS_HCCHAR2_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR2_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR2 ; \ OTG_FS_HOST_OTG_FS_HCCHAR2_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR2_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR2 ; \ OTG_FS_HOST_OTG_FS_HCCHAR2_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR2_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR2 ; \ OTG_FS_HOST_OTG_FS_HCCHAR2_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR2_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR2 ; \ OTG_FS_HOST_OTG_FS_HCCHAR2_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR2_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR2 ; \ OTG_FS_HOST_OTG_FS_HCCHAR2_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCCHAR3 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR3_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR3 ; \ OTG_FS_HOST_OTG_FS_HCCHAR3_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR3_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR3 ; \ OTG_FS_HOST_OTG_FS_HCCHAR3_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR3_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR3 ; \ OTG_FS_HOST_OTG_FS_HCCHAR3_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR3_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR3 ; \ OTG_FS_HOST_OTG_FS_HCCHAR3_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR3_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR3 ; \ OTG_FS_HOST_OTG_FS_HCCHAR3_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR3_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR3 ; \ OTG_FS_HOST_OTG_FS_HCCHAR3_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR3_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR3 ; \ OTG_FS_HOST_OTG_FS_HCCHAR3_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR3_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR3 ; \ OTG_FS_HOST_OTG_FS_HCCHAR3_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR3_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR3 ; \ OTG_FS_HOST_OTG_FS_HCCHAR3_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR3_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR3 ; \ OTG_FS_HOST_OTG_FS_HCCHAR3_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCCHAR4 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR4_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR4 ; \ OTG_FS_HOST_OTG_FS_HCCHAR4_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR4_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR4 ; \ OTG_FS_HOST_OTG_FS_HCCHAR4_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR4_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR4 ; \ OTG_FS_HOST_OTG_FS_HCCHAR4_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR4_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR4 ; \ OTG_FS_HOST_OTG_FS_HCCHAR4_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR4_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR4 ; \ OTG_FS_HOST_OTG_FS_HCCHAR4_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR4_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR4 ; \ OTG_FS_HOST_OTG_FS_HCCHAR4_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR4_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR4 ; \ OTG_FS_HOST_OTG_FS_HCCHAR4_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR4_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR4 ; \ OTG_FS_HOST_OTG_FS_HCCHAR4_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR4_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR4 ; \ OTG_FS_HOST_OTG_FS_HCCHAR4_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR4_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR4 ; \ OTG_FS_HOST_OTG_FS_HCCHAR4_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCCHAR5 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR5_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR5 ; \ OTG_FS_HOST_OTG_FS_HCCHAR5_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR5_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR5 ; \ OTG_FS_HOST_OTG_FS_HCCHAR5_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR5_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR5 ; \ OTG_FS_HOST_OTG_FS_HCCHAR5_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR5_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR5 ; \ OTG_FS_HOST_OTG_FS_HCCHAR5_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR5_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR5 ; \ OTG_FS_HOST_OTG_FS_HCCHAR5_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR5_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR5 ; \ OTG_FS_HOST_OTG_FS_HCCHAR5_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR5_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR5 ; \ OTG_FS_HOST_OTG_FS_HCCHAR5_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR5_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR5 ; \ OTG_FS_HOST_OTG_FS_HCCHAR5_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR5_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR5 ; \ OTG_FS_HOST_OTG_FS_HCCHAR5_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR5_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR5 ; \ OTG_FS_HOST_OTG_FS_HCCHAR5_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCCHAR6 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR6_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR6 ; \ OTG_FS_HOST_OTG_FS_HCCHAR6_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR6_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR6 ; \ OTG_FS_HOST_OTG_FS_HCCHAR6_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR6_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR6 ; \ OTG_FS_HOST_OTG_FS_HCCHAR6_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR6_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR6 ; \ OTG_FS_HOST_OTG_FS_HCCHAR6_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR6_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR6 ; \ OTG_FS_HOST_OTG_FS_HCCHAR6_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR6_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR6 ; \ OTG_FS_HOST_OTG_FS_HCCHAR6_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR6_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR6 ; \ OTG_FS_HOST_OTG_FS_HCCHAR6_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR6_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR6 ; \ OTG_FS_HOST_OTG_FS_HCCHAR6_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR6_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR6 ; \ OTG_FS_HOST_OTG_FS_HCCHAR6_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR6_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR6 ; \ OTG_FS_HOST_OTG_FS_HCCHAR6_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCCHAR7 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR7_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR7 ; \ OTG_FS_HOST_OTG_FS_HCCHAR7_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR7_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR7 ; \ OTG_FS_HOST_OTG_FS_HCCHAR7_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR7_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR7 ; \ OTG_FS_HOST_OTG_FS_HCCHAR7_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR7_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR7 ; \ OTG_FS_HOST_OTG_FS_HCCHAR7_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR7_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR7 ; \ OTG_FS_HOST_OTG_FS_HCCHAR7_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR7_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR7 ; \ OTG_FS_HOST_OTG_FS_HCCHAR7_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR7_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR7 ; \ OTG_FS_HOST_OTG_FS_HCCHAR7_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR7_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR7 ; \ OTG_FS_HOST_OTG_FS_HCCHAR7_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR7_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR7 ; \ OTG_FS_HOST_OTG_FS_HCCHAR7_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR7_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR7 ; \ OTG_FS_HOST_OTG_FS_HCCHAR7_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCINT0 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT0_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT0 ; \ OTG_FS_HOST_OTG_FS_HCINT0_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT0_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT0 ; \ OTG_FS_HOST_OTG_FS_HCINT0_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT0_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT0 ; \ OTG_FS_HOST_OTG_FS_HCINT0_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT0_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT0 ; \ OTG_FS_HOST_OTG_FS_HCINT0_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT0_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT0 ; \ OTG_FS_HOST_OTG_FS_HCINT0_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT0_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT0 ; \ OTG_FS_HOST_OTG_FS_HCINT0_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT0_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT0 ; \ OTG_FS_HOST_OTG_FS_HCINT0_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT0_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT0 ; \ OTG_FS_HOST_OTG_FS_HCINT0_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT0_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT0 ; \ OTG_FS_HOST_OTG_FS_HCINT0_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINT1 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT1_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT1 ; \ OTG_FS_HOST_OTG_FS_HCINT1_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT1_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT1 ; \ OTG_FS_HOST_OTG_FS_HCINT1_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT1_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT1 ; \ OTG_FS_HOST_OTG_FS_HCINT1_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT1_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT1 ; \ OTG_FS_HOST_OTG_FS_HCINT1_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT1_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT1 ; \ OTG_FS_HOST_OTG_FS_HCINT1_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT1_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT1 ; \ OTG_FS_HOST_OTG_FS_HCINT1_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT1_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT1 ; \ OTG_FS_HOST_OTG_FS_HCINT1_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT1_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT1 ; \ OTG_FS_HOST_OTG_FS_HCINT1_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT1_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT1 ; \ OTG_FS_HOST_OTG_FS_HCINT1_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINT2 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT2_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT2 ; \ OTG_FS_HOST_OTG_FS_HCINT2_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT2_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT2 ; \ OTG_FS_HOST_OTG_FS_HCINT2_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT2_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT2 ; \ OTG_FS_HOST_OTG_FS_HCINT2_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT2_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT2 ; \ OTG_FS_HOST_OTG_FS_HCINT2_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT2_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT2 ; \ OTG_FS_HOST_OTG_FS_HCINT2_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT2_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT2 ; \ OTG_FS_HOST_OTG_FS_HCINT2_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT2_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT2 ; \ OTG_FS_HOST_OTG_FS_HCINT2_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT2_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT2 ; \ OTG_FS_HOST_OTG_FS_HCINT2_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT2_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT2 ; \ OTG_FS_HOST_OTG_FS_HCINT2_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINT3 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT3_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT3 ; \ OTG_FS_HOST_OTG_FS_HCINT3_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT3_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT3 ; \ OTG_FS_HOST_OTG_FS_HCINT3_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT3_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT3 ; \ OTG_FS_HOST_OTG_FS_HCINT3_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT3_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT3 ; \ OTG_FS_HOST_OTG_FS_HCINT3_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT3_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT3 ; \ OTG_FS_HOST_OTG_FS_HCINT3_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT3_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT3 ; \ OTG_FS_HOST_OTG_FS_HCINT3_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT3_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT3 ; \ OTG_FS_HOST_OTG_FS_HCINT3_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT3_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT3 ; \ OTG_FS_HOST_OTG_FS_HCINT3_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT3_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT3 ; \ OTG_FS_HOST_OTG_FS_HCINT3_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINT4 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT4_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT4 ; \ OTG_FS_HOST_OTG_FS_HCINT4_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT4_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT4 ; \ OTG_FS_HOST_OTG_FS_HCINT4_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT4_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT4 ; \ OTG_FS_HOST_OTG_FS_HCINT4_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT4_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT4 ; \ OTG_FS_HOST_OTG_FS_HCINT4_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT4_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT4 ; \ OTG_FS_HOST_OTG_FS_HCINT4_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT4_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT4 ; \ OTG_FS_HOST_OTG_FS_HCINT4_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT4_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT4 ; \ OTG_FS_HOST_OTG_FS_HCINT4_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT4_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT4 ; \ OTG_FS_HOST_OTG_FS_HCINT4_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT4_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT4 ; \ OTG_FS_HOST_OTG_FS_HCINT4_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINT5 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT5_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT5 ; \ OTG_FS_HOST_OTG_FS_HCINT5_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT5_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT5 ; \ OTG_FS_HOST_OTG_FS_HCINT5_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT5_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT5 ; \ OTG_FS_HOST_OTG_FS_HCINT5_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT5_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT5 ; \ OTG_FS_HOST_OTG_FS_HCINT5_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT5_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT5 ; \ OTG_FS_HOST_OTG_FS_HCINT5_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT5_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT5 ; \ OTG_FS_HOST_OTG_FS_HCINT5_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT5_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT5 ; \ OTG_FS_HOST_OTG_FS_HCINT5_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT5_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT5 ; \ OTG_FS_HOST_OTG_FS_HCINT5_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT5_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT5 ; \ OTG_FS_HOST_OTG_FS_HCINT5_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINT6 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT6_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT6 ; \ OTG_FS_HOST_OTG_FS_HCINT6_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT6_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT6 ; \ OTG_FS_HOST_OTG_FS_HCINT6_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT6_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT6 ; \ OTG_FS_HOST_OTG_FS_HCINT6_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT6_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT6 ; \ OTG_FS_HOST_OTG_FS_HCINT6_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT6_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT6 ; \ OTG_FS_HOST_OTG_FS_HCINT6_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT6_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT6 ; \ OTG_FS_HOST_OTG_FS_HCINT6_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT6_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT6 ; \ OTG_FS_HOST_OTG_FS_HCINT6_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT6_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT6 ; \ OTG_FS_HOST_OTG_FS_HCINT6_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT6_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT6 ; \ OTG_FS_HOST_OTG_FS_HCINT6_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINT7 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT7_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT7 ; \ OTG_FS_HOST_OTG_FS_HCINT7_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT7_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT7 ; \ OTG_FS_HOST_OTG_FS_HCINT7_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT7_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT7 ; \ OTG_FS_HOST_OTG_FS_HCINT7_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT7_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT7 ; \ OTG_FS_HOST_OTG_FS_HCINT7_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT7_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT7 ; \ OTG_FS_HOST_OTG_FS_HCINT7_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT7_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT7 ; \ OTG_FS_HOST_OTG_FS_HCINT7_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT7_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT7 ; \ OTG_FS_HOST_OTG_FS_HCINT7_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT7_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT7 ; \ OTG_FS_HOST_OTG_FS_HCINT7_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT7_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT7 ; \ OTG_FS_HOST_OTG_FS_HCINT7_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINTMSK0 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK0_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK0 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK0_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK0_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK0 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK0_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK0_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK0 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK0_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK0_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK0 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK0_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK0_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK0 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK0_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK0_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK0 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK0_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK0_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK0 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK0_TXERRM, Transaction error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK0_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK0 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK0_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK0_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK0 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK0_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK0_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK0 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK0_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCINTMSK1 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK1_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK1 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK1_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK1_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK1 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK1_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK1_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK1 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK1_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK1_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK1 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK1_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK1_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK1 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK1_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK1_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK1 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK1_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK1_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK1 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK1_TXERRM, Transaction error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK1_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK1 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK1_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK1_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK1 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK1_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK1_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK1 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK1_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCINTMSK2 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK2_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK2 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK2_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK2_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK2 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK2_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK2_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK2 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK2_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK2_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK2 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK2_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK2_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK2 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK2_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK2_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK2 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK2_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK2_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK2 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK2_TXERRM, Transaction error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK2_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK2 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK2_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK2_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK2 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK2_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK2_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK2 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK2_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCINTMSK3 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK3_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK3 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK3_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK3_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK3 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK3_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK3_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK3 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK3_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK3_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK3 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK3_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK3_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK3 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK3_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK3_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK3 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK3_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK3_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK3 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK3_TXERRM, Transaction error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK3_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK3 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK3_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK3_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK3 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK3_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK3_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK3 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK3_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCINTMSK4 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK4_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK4 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK4_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK4_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK4 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK4_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK4_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK4 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK4_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK4_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK4 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK4_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK4_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK4 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK4_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK4_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK4 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK4_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK4_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK4 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK4_TXERRM, Transaction error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK4_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK4 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK4_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK4_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK4 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK4_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK4_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK4 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK4_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCINTMSK5 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK5_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK5 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK5_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK5_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK5 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK5_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK5_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK5 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK5_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK5_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK5 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK5_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK5_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK5 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK5_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK5_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK5 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK5_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK5_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK5 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK5_TXERRM, Transaction error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK5_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK5 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK5_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK5_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK5 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK5_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK5_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK5 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK5_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCINTMSK6 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK6_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK6 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK6_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK6_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK6 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK6_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK6_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK6 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK6_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK6_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK6 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK6_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK6_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK6 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK6_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK6_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK6 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK6_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK6_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK6 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK6_TXERRM, Transaction error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK6_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK6 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK6_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK6_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK6 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK6_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK6_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK6 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK6_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCINTMSK7 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK7_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK7 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK7_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK7_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK7 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK7_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK7_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK7 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK7_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK7_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK7 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK7_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK7_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK7 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK7_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK7_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK7 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK7_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK7_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK7 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK7_TXERRM, Transaction error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK7_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK7 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK7_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK7_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK7 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK7_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK7_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK7 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK7_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCTSIZ0 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ0_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ0 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ0_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ0_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ0 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ0_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ0_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ0 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ0_DPID, Data PID

\ OTG_FS_HOST_OTG_FS_HCTSIZ1 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ1_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ1 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ1_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ1 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ1_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ1_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ1 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ1_DPID, Data PID

\ OTG_FS_HOST_OTG_FS_HCTSIZ2 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ2_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ2 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ2_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ2 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ2_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ2_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ2 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ2_DPID, Data PID

\ OTG_FS_HOST_OTG_FS_HCTSIZ3 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ3_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ3 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ3_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ3 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ3_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ3_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ3 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ3_DPID, Data PID

\ OTG_FS_HOST_OTG_FS_HCTSIZ4 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ4_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ4 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ4_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ4_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ4 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ4_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ4_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ4 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ4_DPID, Data PID

\ OTG_FS_HOST_OTG_FS_HCTSIZ5 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ5_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ5 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ5_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ5_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ5 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ5_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ5_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ5 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ5_DPID, Data PID

\ OTG_FS_HOST_OTG_FS_HCTSIZ6 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ6_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ6 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ6_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ6_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ6 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ6_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ6_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ6 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ6_DPID, Data PID

\ OTG_FS_HOST_OTG_FS_HCTSIZ7 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ7_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ7 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ7_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ7_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ7 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ7_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ7_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ7 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ7_DPID, Data PID

\ OTG_FS_HOST_OTG_FS_HCCHAR8 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR8_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR8 ; \ OTG_FS_HOST_OTG_FS_HCCHAR8_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR8_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR8 ; \ OTG_FS_HOST_OTG_FS_HCCHAR8_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR8_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR8 ; \ OTG_FS_HOST_OTG_FS_HCCHAR8_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR8_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR8 ; \ OTG_FS_HOST_OTG_FS_HCCHAR8_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR8_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR8 ; \ OTG_FS_HOST_OTG_FS_HCCHAR8_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR8_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR8 ; \ OTG_FS_HOST_OTG_FS_HCCHAR8_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR8_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR8 ; \ OTG_FS_HOST_OTG_FS_HCCHAR8_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR8_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR8 ; \ OTG_FS_HOST_OTG_FS_HCCHAR8_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR8_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR8 ; \ OTG_FS_HOST_OTG_FS_HCCHAR8_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR8_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR8 ; \ OTG_FS_HOST_OTG_FS_HCCHAR8_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCINT8 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT8_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT8 ; \ OTG_FS_HOST_OTG_FS_HCINT8_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT8_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT8 ; \ OTG_FS_HOST_OTG_FS_HCINT8_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT8_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT8 ; \ OTG_FS_HOST_OTG_FS_HCINT8_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT8_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT8 ; \ OTG_FS_HOST_OTG_FS_HCINT8_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT8_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT8 ; \ OTG_FS_HOST_OTG_FS_HCINT8_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT8_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT8 ; \ OTG_FS_HOST_OTG_FS_HCINT8_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT8_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT8 ; \ OTG_FS_HOST_OTG_FS_HCINT8_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT8_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT8 ; \ OTG_FS_HOST_OTG_FS_HCINT8_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT8_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT8 ; \ OTG_FS_HOST_OTG_FS_HCINT8_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINTMSK8 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK8_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK8 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK8_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK8_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK8 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK8_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK8_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK8 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK8_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK8_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK8 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK8_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK8_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK8 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK8_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK8_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK8 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK8_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK8_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK8 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK8_TXERRM, Transaction error
: OTG_FS_HOST_OTG_FS_HCINTMSK8_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK8 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK8_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK8_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK8 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK8_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK8_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK8 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK8_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCTSIZ8 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ8_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ8 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ8_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ8_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ8 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ8_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ8_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ8 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ8_DPID, Data PID

\ OTG_FS_HOST_OTG_FS_HCCHAR9 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR9_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR9 ; \ OTG_FS_HOST_OTG_FS_HCCHAR9_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR9_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR9 ; \ OTG_FS_HOST_OTG_FS_HCCHAR9_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR9_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR9 ; \ OTG_FS_HOST_OTG_FS_HCCHAR9_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR9_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR9 ; \ OTG_FS_HOST_OTG_FS_HCCHAR9_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR9_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR9 ; \ OTG_FS_HOST_OTG_FS_HCCHAR9_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR9_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR9 ; \ OTG_FS_HOST_OTG_FS_HCCHAR9_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR9_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR9 ; \ OTG_FS_HOST_OTG_FS_HCCHAR9_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR9_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR9 ; \ OTG_FS_HOST_OTG_FS_HCCHAR9_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR9_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR9 ; \ OTG_FS_HOST_OTG_FS_HCCHAR9_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR9_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR9 ; \ OTG_FS_HOST_OTG_FS_HCCHAR9_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCINT9 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT9_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT9 ; \ OTG_FS_HOST_OTG_FS_HCINT9_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT9_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT9 ; \ OTG_FS_HOST_OTG_FS_HCINT9_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT9_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT9 ; \ OTG_FS_HOST_OTG_FS_HCINT9_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT9_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT9 ; \ OTG_FS_HOST_OTG_FS_HCINT9_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT9_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT9 ; \ OTG_FS_HOST_OTG_FS_HCINT9_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT9_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT9 ; \ OTG_FS_HOST_OTG_FS_HCINT9_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT9_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT9 ; \ OTG_FS_HOST_OTG_FS_HCINT9_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT9_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT9 ; \ OTG_FS_HOST_OTG_FS_HCINT9_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT9_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT9 ; \ OTG_FS_HOST_OTG_FS_HCINT9_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINTMSK9 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK9_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK9 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK9_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK9_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK9 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK9_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK9_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK9 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK9_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK9_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK9 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK9_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK9_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK9 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK9_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK9_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK9 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK9_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK9_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK9 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK9_TXERRM, Transaction error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK9_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK9 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK9_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK9_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK9 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK9_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK9_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK9 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK9_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCTSIZ9 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ9_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ9 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ9_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ9_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ9 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ9_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ9_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ9 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ9_DPID, Data PID

\ OTG_FS_HOST_OTG_FS_HCCHAR10 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR10_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR10 ; \ OTG_FS_HOST_OTG_FS_HCCHAR10_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR10_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR10 ; \ OTG_FS_HOST_OTG_FS_HCCHAR10_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR10_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR10 ; \ OTG_FS_HOST_OTG_FS_HCCHAR10_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR10_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR10 ; \ OTG_FS_HOST_OTG_FS_HCCHAR10_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR10_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR10 ; \ OTG_FS_HOST_OTG_FS_HCCHAR10_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR10_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR10 ; \ OTG_FS_HOST_OTG_FS_HCCHAR10_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR10_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR10 ; \ OTG_FS_HOST_OTG_FS_HCCHAR10_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR10_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR10 ; \ OTG_FS_HOST_OTG_FS_HCCHAR10_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR10_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR10 ; \ OTG_FS_HOST_OTG_FS_HCCHAR10_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR10_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR10 ; \ OTG_FS_HOST_OTG_FS_HCCHAR10_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCINT10 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT10_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT10 ; \ OTG_FS_HOST_OTG_FS_HCINT10_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT10_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT10 ; \ OTG_FS_HOST_OTG_FS_HCINT10_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT10_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT10 ; \ OTG_FS_HOST_OTG_FS_HCINT10_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT10_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT10 ; \ OTG_FS_HOST_OTG_FS_HCINT10_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT10_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT10 ; \ OTG_FS_HOST_OTG_FS_HCINT10_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT10_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT10 ; \ OTG_FS_HOST_OTG_FS_HCINT10_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT10_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT10 ; \ OTG_FS_HOST_OTG_FS_HCINT10_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT10_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT10 ; \ OTG_FS_HOST_OTG_FS_HCINT10_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT10_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT10 ; \ OTG_FS_HOST_OTG_FS_HCINT10_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINTMSK10 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK10_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK10 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK10_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK10_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK10 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK10_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK10_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK10 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK10_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK10_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK10 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK10_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK10_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK10 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK10_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK10_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK10 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK10_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK10_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK10 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK10_TXERRM, Transaction error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK10_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK10 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK10_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK10_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK10 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK10_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK10_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK10 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK10_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCTSIZ10 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ10_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ10 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ10_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ10_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ10 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ10_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ10_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ10 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ10_DPID, Data PID

\ OTG_FS_HOST_OTG_FS_HCCHAR11 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCCHAR11_MPSIZ x addr ) OTG_FS_HOST_OTG_FS_HCCHAR11 ; \ OTG_FS_HOST_OTG_FS_HCCHAR11_MPSIZ, Maximum packet size
: OTG_FS_HOST_OTG_FS_HCCHAR11_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_OTG_FS_HCCHAR11 ; \ OTG_FS_HOST_OTG_FS_HCCHAR11_EPNUM, Endpoint number
: OTG_FS_HOST_OTG_FS_HCCHAR11_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_OTG_FS_HCCHAR11 ; \ OTG_FS_HOST_OTG_FS_HCCHAR11_EPDIR, Endpoint direction
: OTG_FS_HOST_OTG_FS_HCCHAR11_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_OTG_FS_HCCHAR11 ; \ OTG_FS_HOST_OTG_FS_HCCHAR11_LSDEV, Low-speed device
: OTG_FS_HOST_OTG_FS_HCCHAR11_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_OTG_FS_HCCHAR11 ; \ OTG_FS_HOST_OTG_FS_HCCHAR11_EPTYP, Endpoint type
: OTG_FS_HOST_OTG_FS_HCCHAR11_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_OTG_FS_HCCHAR11 ; \ OTG_FS_HOST_OTG_FS_HCCHAR11_MCNT, Multicount
: OTG_FS_HOST_OTG_FS_HCCHAR11_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_OTG_FS_HCCHAR11 ; \ OTG_FS_HOST_OTG_FS_HCCHAR11_DAD, Device address
: OTG_FS_HOST_OTG_FS_HCCHAR11_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_OTG_FS_HCCHAR11 ; \ OTG_FS_HOST_OTG_FS_HCCHAR11_ODDFRM, Odd frame
: OTG_FS_HOST_OTG_FS_HCCHAR11_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_OTG_FS_HCCHAR11 ; \ OTG_FS_HOST_OTG_FS_HCCHAR11_CHDIS, Channel disable
: OTG_FS_HOST_OTG_FS_HCCHAR11_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_OTG_FS_HCCHAR11 ; \ OTG_FS_HOST_OTG_FS_HCCHAR11_CHENA, Channel enable

\ OTG_FS_HOST_OTG_FS_HCINT11 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINT11_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINT11 ; \ OTG_FS_HOST_OTG_FS_HCINT11_XFRC, Transfer completed
: OTG_FS_HOST_OTG_FS_HCINT11_CHH ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINT11 ; \ OTG_FS_HOST_OTG_FS_HCINT11_CHH, Channel halted
: OTG_FS_HOST_OTG_FS_HCINT11_STALL ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINT11 ; \ OTG_FS_HOST_OTG_FS_HCINT11_STALL, STALL response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT11_NAK ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINT11 ; \ OTG_FS_HOST_OTG_FS_HCINT11_NAK, NAK response received interrupt
: OTG_FS_HOST_OTG_FS_HCINT11_ACK ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINT11 ; \ OTG_FS_HOST_OTG_FS_HCINT11_ACK, ACK response received/transmitted interrupt
: OTG_FS_HOST_OTG_FS_HCINT11_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINT11 ; \ OTG_FS_HOST_OTG_FS_HCINT11_TXERR, Transaction error
: OTG_FS_HOST_OTG_FS_HCINT11_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINT11 ; \ OTG_FS_HOST_OTG_FS_HCINT11_BBERR, Babble error
: OTG_FS_HOST_OTG_FS_HCINT11_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINT11 ; \ OTG_FS_HOST_OTG_FS_HCINT11_FRMOR, Frame overrun
: OTG_FS_HOST_OTG_FS_HCINT11_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINT11 ; \ OTG_FS_HOST_OTG_FS_HCINT11_DTERR, Data toggle error

\ OTG_FS_HOST_OTG_FS_HCINTMSK11 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCINTMSK11_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_OTG_FS_HCINTMSK11 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK11_XFRCM, Transfer completed mask
: OTG_FS_HOST_OTG_FS_HCINTMSK11_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_OTG_FS_HCINTMSK11 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK11_CHHM, Channel halted mask
: OTG_FS_HOST_OTG_FS_HCINTMSK11_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_OTG_FS_HCINTMSK11 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK11_STALLM, STALL response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK11_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_OTG_FS_HCINTMSK11 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK11_NAKM, NAK response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK11_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_OTG_FS_HCINTMSK11 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK11_ACKM, ACK response received/transmitted interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK11_NYET ( -- x addr ) 6 bit OTG_FS_HOST_OTG_FS_HCINTMSK11 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK11_NYET, response received interrupt mask
: OTG_FS_HOST_OTG_FS_HCINTMSK11_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_OTG_FS_HCINTMSK11 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK11_TXERRM, Transaction error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK11_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_OTG_FS_HCINTMSK11 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK11_BBERRM, Babble error mask
: OTG_FS_HOST_OTG_FS_HCINTMSK11_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_OTG_FS_HCINTMSK11 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK11_FRMORM, Frame overrun mask
: OTG_FS_HOST_OTG_FS_HCINTMSK11_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_OTG_FS_HCINTMSK11 ; \ OTG_FS_HOST_OTG_FS_HCINTMSK11_DTERRM, Data toggle error mask

\ OTG_FS_HOST_OTG_FS_HCTSIZ11 (read-write) Reset:0x00000000
: OTG_FS_HOST_OTG_FS_HCTSIZ11_XFRSIZ x addr ) OTG_FS_HOST_OTG_FS_HCTSIZ11 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ11_XFRSIZ, Transfer size
: OTG_FS_HOST_OTG_FS_HCTSIZ11_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_OTG_FS_HCTSIZ11 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ11_PKTCNT, Packet count
: OTG_FS_HOST_OTG_FS_HCTSIZ11_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_OTG_FS_HCTSIZ11 ; \ OTG_FS_HOST_OTG_FS_HCTSIZ11_DPID, Data PID

\ OTG_FS_DEVICE_OTG_FS_DCFG (read-write) Reset:0x02200000
: OTG_FS_DEVICE_OTG_FS_DCFG_DSPD ( %bb -- x addr ) OTG_FS_DEVICE_OTG_FS_DCFG ; \ OTG_FS_DEVICE_OTG_FS_DCFG_DSPD, Device speed
: OTG_FS_DEVICE_OTG_FS_DCFG_NZLSOHSK ( -- x addr ) 2 bit OTG_FS_DEVICE_OTG_FS_DCFG ; \ OTG_FS_DEVICE_OTG_FS_DCFG_NZLSOHSK, Non-zero-length status OUT handshake
: OTG_FS_DEVICE_OTG_FS_DCFG_DAD ( %bbbbbbb -- x addr ) 4 lshift OTG_FS_DEVICE_OTG_FS_DCFG ; \ OTG_FS_DEVICE_OTG_FS_DCFG_DAD, Device address
: OTG_FS_DEVICE_OTG_FS_DCFG_PFIVL ( %bb -- x addr ) 11 lshift OTG_FS_DEVICE_OTG_FS_DCFG ; \ OTG_FS_DEVICE_OTG_FS_DCFG_PFIVL, Periodic frame interval

\ OTG_FS_DEVICE_OTG_FS_DCTL (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DCTL_RWUSIG ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DCTL ; \ OTG_FS_DEVICE_OTG_FS_DCTL_RWUSIG, Remote wakeup signaling
: OTG_FS_DEVICE_OTG_FS_DCTL_SDIS ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DCTL ; \ OTG_FS_DEVICE_OTG_FS_DCTL_SDIS, Soft disconnect
: OTG_FS_DEVICE_OTG_FS_DCTL_GINSTS? ( -- 1|0 ) 2 bit OTG_FS_DEVICE_OTG_FS_DCTL bit@ ; \ OTG_FS_DEVICE_OTG_FS_DCTL_GINSTS, Global IN NAK status
: OTG_FS_DEVICE_OTG_FS_DCTL_GONSTS? ( -- 1|0 ) 3 bit OTG_FS_DEVICE_OTG_FS_DCTL bit@ ; \ OTG_FS_DEVICE_OTG_FS_DCTL_GONSTS, Global OUT NAK status
: OTG_FS_DEVICE_OTG_FS_DCTL_TCTL ( %bbb -- x addr ) 4 lshift OTG_FS_DEVICE_OTG_FS_DCTL ; \ OTG_FS_DEVICE_OTG_FS_DCTL_TCTL, Test control
: OTG_FS_DEVICE_OTG_FS_DCTL_SGINAK ( -- x addr ) 7 bit OTG_FS_DEVICE_OTG_FS_DCTL ; \ OTG_FS_DEVICE_OTG_FS_DCTL_SGINAK, Set global IN NAK
: OTG_FS_DEVICE_OTG_FS_DCTL_CGINAK ( -- x addr ) 8 bit OTG_FS_DEVICE_OTG_FS_DCTL ; \ OTG_FS_DEVICE_OTG_FS_DCTL_CGINAK, Clear global IN NAK
: OTG_FS_DEVICE_OTG_FS_DCTL_SGONAK ( -- x addr ) 9 bit OTG_FS_DEVICE_OTG_FS_DCTL ; \ OTG_FS_DEVICE_OTG_FS_DCTL_SGONAK, Set global OUT NAK
: OTG_FS_DEVICE_OTG_FS_DCTL_CGONAK ( -- x addr ) 10 bit OTG_FS_DEVICE_OTG_FS_DCTL ; \ OTG_FS_DEVICE_OTG_FS_DCTL_CGONAK, Clear global OUT NAK
: OTG_FS_DEVICE_OTG_FS_DCTL_POPRGDNE ( -- x addr ) 11 bit OTG_FS_DEVICE_OTG_FS_DCTL ; \ OTG_FS_DEVICE_OTG_FS_DCTL_POPRGDNE, Power-on programming done

\ OTG_FS_DEVICE_OTG_FS_DSTS (read-only) Reset:0x00000010
: OTG_FS_DEVICE_OTG_FS_DSTS_SUSPSTS? ( --  1|0 ) 0 bit OTG_FS_DEVICE_OTG_FS_DSTS bit@ ; \ OTG_FS_DEVICE_OTG_FS_DSTS_SUSPSTS, Suspend status
: OTG_FS_DEVICE_OTG_FS_DSTS_ENUMSPD? ( --  x ) 1 lshift OTG_FS_DEVICE_OTG_FS_DSTS @ ; \ OTG_FS_DEVICE_OTG_FS_DSTS_ENUMSPD, Enumerated speed
: OTG_FS_DEVICE_OTG_FS_DSTS_EERR? ( --  1|0 ) 3 bit OTG_FS_DEVICE_OTG_FS_DSTS bit@ ; \ OTG_FS_DEVICE_OTG_FS_DSTS_EERR, Erratic error
: OTG_FS_DEVICE_OTG_FS_DSTS_FNSOF? ( --  x ) 8 lshift OTG_FS_DEVICE_OTG_FS_DSTS @ ; \ OTG_FS_DEVICE_OTG_FS_DSTS_FNSOF, Frame number of the received SOF

\ OTG_FS_DEVICE_OTG_FS_DIEPMSK (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPMSK_XFRCM ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DIEPMSK ; \ OTG_FS_DEVICE_OTG_FS_DIEPMSK_XFRCM, Transfer completed interrupt mask
: OTG_FS_DEVICE_OTG_FS_DIEPMSK_EPDM ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DIEPMSK ; \ OTG_FS_DEVICE_OTG_FS_DIEPMSK_EPDM, Endpoint disabled interrupt mask
: OTG_FS_DEVICE_OTG_FS_DIEPMSK_TOM ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DIEPMSK ; \ OTG_FS_DEVICE_OTG_FS_DIEPMSK_TOM, Timeout condition mask Non-isochronous endpoints
: OTG_FS_DEVICE_OTG_FS_DIEPMSK_ITTXFEMSK ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DIEPMSK ; \ OTG_FS_DEVICE_OTG_FS_DIEPMSK_ITTXFEMSK, IN token received when TxFIFO empty mask
: OTG_FS_DEVICE_OTG_FS_DIEPMSK_INEPNMM ( -- x addr ) 5 bit OTG_FS_DEVICE_OTG_FS_DIEPMSK ; \ OTG_FS_DEVICE_OTG_FS_DIEPMSK_INEPNMM, IN token received with EP mismatch mask
: OTG_FS_DEVICE_OTG_FS_DIEPMSK_INEPNEM ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DIEPMSK ; \ OTG_FS_DEVICE_OTG_FS_DIEPMSK_INEPNEM, IN endpoint NAK effective mask

\ OTG_FS_DEVICE_OTG_FS_DOEPMSK (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPMSK_XFRCM ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DOEPMSK ; \ OTG_FS_DEVICE_OTG_FS_DOEPMSK_XFRCM, Transfer completed interrupt mask
: OTG_FS_DEVICE_OTG_FS_DOEPMSK_EPDM ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DOEPMSK ; \ OTG_FS_DEVICE_OTG_FS_DOEPMSK_EPDM, Endpoint disabled interrupt mask
: OTG_FS_DEVICE_OTG_FS_DOEPMSK_STUPM ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DOEPMSK ; \ OTG_FS_DEVICE_OTG_FS_DOEPMSK_STUPM, SETUP phase done mask
: OTG_FS_DEVICE_OTG_FS_DOEPMSK_OTEPDM ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DOEPMSK ; \ OTG_FS_DEVICE_OTG_FS_DOEPMSK_OTEPDM, OUT token received when endpoint disabled mask

\ OTG_FS_DEVICE_OTG_FS_DAINT (read-only) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DAINT_IEPINT? ( --  x ) OTG_FS_DEVICE_OTG_FS_DAINT @ ; \ OTG_FS_DEVICE_OTG_FS_DAINT_IEPINT, IN endpoint interrupt bits
: OTG_FS_DEVICE_OTG_FS_DAINT_OEPINT? ( --  x ) 16 lshift OTG_FS_DEVICE_OTG_FS_DAINT @ ; \ OTG_FS_DEVICE_OTG_FS_DAINT_OEPINT, OUT endpoint interrupt bits

\ OTG_FS_DEVICE_OTG_FS_DAINTMSK (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DAINTMSK_IEPM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_DEVICE_OTG_FS_DAINTMSK ; \ OTG_FS_DEVICE_OTG_FS_DAINTMSK_IEPM, IN EP interrupt mask bits
: OTG_FS_DEVICE_OTG_FS_DAINTMSK_OEPINT ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_DEVICE_OTG_FS_DAINTMSK ; \ OTG_FS_DEVICE_OTG_FS_DAINTMSK_OEPINT, OUT endpoint interrupt bits

\ OTG_FS_DEVICE_OTG_FS_DVBUSDIS (read-write) Reset:0x000017D7
: OTG_FS_DEVICE_OTG_FS_DVBUSDIS_VBUSDT ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_DEVICE_OTG_FS_DVBUSDIS ; \ OTG_FS_DEVICE_OTG_FS_DVBUSDIS_VBUSDT, Device VBUS discharge time

\ OTG_FS_DEVICE_OTG_FS_DVBUSPULSE (read-write) Reset:0x000005B8
: OTG_FS_DEVICE_OTG_FS_DVBUSPULSE_DVBUSP ( %bbbbbbbbbbb -- x addr ) OTG_FS_DEVICE_OTG_FS_DVBUSPULSE ; \ OTG_FS_DEVICE_OTG_FS_DVBUSPULSE_DVBUSP, Device VBUS pulsing time

\ OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK_INEPTXFEM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK ; \ OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK_INEPTXFEM, IN EP Tx FIFO empty interrupt mask bits

\ OTG_FS_DEVICE_OTG_FS_DIEPCTL0 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPCTL0_MPSIZ ( %bb -- x addr ) OTG_FS_DEVICE_OTG_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_MPSIZ, Maximum packet size
: OTG_FS_DEVICE_OTG_FS_DIEPCTL0_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_USBAEP, USB active endpoint
: OTG_FS_DEVICE_OTG_FS_DIEPCTL0_NAKSTS? ( -- 1|0 ) 17 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL0 bit@ ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_NAKSTS, NAK status
: OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPTYP, Endpoint type
: OTG_FS_DEVICE_OTG_FS_DIEPCTL0_STALL ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_STALL, STALL handshake
: OTG_FS_DEVICE_OTG_FS_DIEPCTL0_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_TXFNUM, TxFIFO number
: OTG_FS_DEVICE_OTG_FS_DIEPCTL0_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_CNAK, Clear NAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL0_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_SNAK, Set NAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPDIS, Endpoint disable
: OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPENA, Endpoint enable

\ OTG_FS_DEVICE_OTG_FS_DIEPCTL1 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPENA, EPENA
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPDIS, EPDIS
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SODDFRM_SD1PID ( -- x addr ) 29 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SODDFRM_SD1PID, SODDFRM/SD1PID
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SD0PID_SEVNFRM, SD0PID/SEVNFRM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SNAK, SNAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_CNAK, CNAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_TXFNUM, TXFNUM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_Stall, Stall
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPTYP, EPTYP
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_NAKSTS, NAKSTS
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EONUM_DPID, EONUM/DPID
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_USBAEP, USBAEP
: OTG_FS_DEVICE_OTG_FS_DIEPCTL1_MPSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DIEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL1_MPSIZ, MPSIZ

\ OTG_FS_DEVICE_OTG_FS_DIEPCTL2 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPENA, EPENA
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPDIS, EPDIS
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SODDFRM, SODDFRM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SD0PID_SEVNFRM, SD0PID/SEVNFRM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SNAK, SNAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_CNAK, CNAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_TXFNUM, TXFNUM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_Stall, Stall
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPTYP, EPTYP
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_NAKSTS, NAKSTS
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EONUM_DPID, EONUM/DPID
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_USBAEP, USBAEP
: OTG_FS_DEVICE_OTG_FS_DIEPCTL2_MPSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DIEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL2_MPSIZ, MPSIZ

\ OTG_FS_DEVICE_OTG_FS_DIEPCTL3 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPENA, EPENA
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPDIS, EPDIS
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SODDFRM, SODDFRM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SD0PID_SEVNFRM, SD0PID/SEVNFRM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SNAK, SNAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_CNAK, CNAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_TXFNUM, TXFNUM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_Stall, Stall
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPTYP, EPTYP
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_NAKSTS, NAKSTS
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EONUM_DPID, EONUM/DPID
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_USBAEP, USBAEP
: OTG_FS_DEVICE_OTG_FS_DIEPCTL3_MPSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DIEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL3_MPSIZ, MPSIZ

\ OTG_FS_DEVICE_OTG_FS_DOEPCTL0 (multiple-access)  Reset:0x00008000
: OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPENA, EPENA
: OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPDIS, EPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL0_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_SNAK, SNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL0_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_CNAK, CNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL0_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_Stall, Stall
: OTG_FS_DEVICE_OTG_FS_DOEPCTL0_SNPM ( -- x addr ) 20 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_SNPM, SNPM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DOEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPTYP, EPTYP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL0_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_NAKSTS, NAKSTS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL0_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_USBAEP, USBAEP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL0_MPSIZ ( %bb -- x addr ) OTG_FS_DEVICE_OTG_FS_DOEPCTL0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL0_MPSIZ, MPSIZ

\ OTG_FS_DEVICE_OTG_FS_DOEPCTL1 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPENA, EPENA
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPDIS, EPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SODDFRM, SODDFRM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SD0PID_SEVNFRM, SD0PID/SEVNFRM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SNAK, SNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_CNAK, CNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_Stall, Stall
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SNPM ( -- x addr ) 20 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SNPM, SNPM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPTYP, EPTYP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_NAKSTS, NAKSTS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EONUM_DPID, EONUM/DPID
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_USBAEP, USBAEP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL1_MPSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DOEPCTL1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL1_MPSIZ, MPSIZ

\ OTG_FS_DEVICE_OTG_FS_DOEPCTL2 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPENA, EPENA
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPDIS, EPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SODDFRM, SODDFRM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SD0PID_SEVNFRM, SD0PID/SEVNFRM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SNAK, SNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_CNAK, CNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_Stall, Stall
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SNPM ( -- x addr ) 20 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SNPM, SNPM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPTYP, EPTYP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_NAKSTS, NAKSTS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EONUM_DPID, EONUM/DPID
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_USBAEP, USBAEP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL2_MPSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DOEPCTL2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL2_MPSIZ, MPSIZ

\ OTG_FS_DEVICE_OTG_FS_DOEPCTL3 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPENA, EPENA
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPDIS, EPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SODDFRM, SODDFRM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SD0PID_SEVNFRM, SD0PID/SEVNFRM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SNAK, SNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_CNAK, CNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_Stall, Stall
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SNPM ( -- x addr ) 20 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SNPM, SNPM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPTYP, EPTYP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_NAKSTS, NAKSTS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EONUM_DPID, EONUM/DPID
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_USBAEP, USBAEP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL3_MPSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DOEPCTL3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL3_MPSIZ, MPSIZ

\ OTG_FS_DEVICE_OTG_FS_DIEPINT0 (multiple-access)  Reset:0x00000080
: OTG_FS_DEVICE_OTG_FS_DIEPINT0_TXFE ( -- x addr ) 7 bit OTG_FS_DEVICE_OTG_FS_DIEPINT0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT0_TXFE, TXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT0_INEPNE ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DIEPINT0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT0_INEPNE, INEPNE
: OTG_FS_DEVICE_OTG_FS_DIEPINT0_ITTXFE ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DIEPINT0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT0_ITTXFE, ITTXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT0_TOC ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DIEPINT0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT0_TOC, TOC
: OTG_FS_DEVICE_OTG_FS_DIEPINT0_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DIEPINT0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT0_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DIEPINT0_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DIEPINT0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT0_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DIEPINT1 (multiple-access)  Reset:0x00000080
: OTG_FS_DEVICE_OTG_FS_DIEPINT1_TXFE ( -- x addr ) 7 bit OTG_FS_DEVICE_OTG_FS_DIEPINT1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT1_TXFE, TXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT1_INEPNE ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DIEPINT1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT1_INEPNE, INEPNE
: OTG_FS_DEVICE_OTG_FS_DIEPINT1_ITTXFE ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DIEPINT1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT1_ITTXFE, ITTXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT1_TOC ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DIEPINT1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT1_TOC, TOC
: OTG_FS_DEVICE_OTG_FS_DIEPINT1_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DIEPINT1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT1_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DIEPINT1_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DIEPINT1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT1_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DIEPINT2 (multiple-access)  Reset:0x00000080
: OTG_FS_DEVICE_OTG_FS_DIEPINT2_TXFE ( -- x addr ) 7 bit OTG_FS_DEVICE_OTG_FS_DIEPINT2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT2_TXFE, TXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT2_INEPNE ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DIEPINT2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT2_INEPNE, INEPNE
: OTG_FS_DEVICE_OTG_FS_DIEPINT2_ITTXFE ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DIEPINT2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT2_ITTXFE, ITTXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT2_TOC ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DIEPINT2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT2_TOC, TOC
: OTG_FS_DEVICE_OTG_FS_DIEPINT2_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DIEPINT2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT2_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DIEPINT2_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DIEPINT2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT2_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DIEPINT3 (multiple-access)  Reset:0x00000080
: OTG_FS_DEVICE_OTG_FS_DIEPINT3_TXFE ( -- x addr ) 7 bit OTG_FS_DEVICE_OTG_FS_DIEPINT3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT3_TXFE, TXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT3_INEPNE ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DIEPINT3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT3_INEPNE, INEPNE
: OTG_FS_DEVICE_OTG_FS_DIEPINT3_ITTXFE ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DIEPINT3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT3_ITTXFE, ITTXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT3_TOC ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DIEPINT3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT3_TOC, TOC
: OTG_FS_DEVICE_OTG_FS_DIEPINT3_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DIEPINT3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT3_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DIEPINT3_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DIEPINT3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT3_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DOEPINT0 (read-write) Reset:0x00000080
: OTG_FS_DEVICE_OTG_FS_DOEPINT0_B2BSTUP ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DOEPINT0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT0_B2BSTUP, B2BSTUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT0_OTEPDIS ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DOEPINT0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT0_OTEPDIS, OTEPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPINT0_STUP ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DOEPINT0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT0_STUP, STUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT0_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DOEPINT0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT0_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DOEPINT0_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DOEPINT0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT0_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DOEPINT1 (read-write) Reset:0x00000080
: OTG_FS_DEVICE_OTG_FS_DOEPINT1_B2BSTUP ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DOEPINT1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT1_B2BSTUP, B2BSTUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT1_OTEPDIS ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DOEPINT1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT1_OTEPDIS, OTEPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPINT1_STUP ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DOEPINT1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT1_STUP, STUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT1_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DOEPINT1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT1_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DOEPINT1_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DOEPINT1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT1_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DOEPINT2 (read-write) Reset:0x00000080
: OTG_FS_DEVICE_OTG_FS_DOEPINT2_B2BSTUP ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DOEPINT2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT2_B2BSTUP, B2BSTUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT2_OTEPDIS ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DOEPINT2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT2_OTEPDIS, OTEPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPINT2_STUP ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DOEPINT2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT2_STUP, STUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT2_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DOEPINT2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT2_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DOEPINT2_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DOEPINT2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT2_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DOEPINT3 (read-write) Reset:0x00000080
: OTG_FS_DEVICE_OTG_FS_DOEPINT3_B2BSTUP ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DOEPINT3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT3_B2BSTUP, B2BSTUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT3_OTEPDIS ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DOEPINT3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT3_OTEPDIS, OTEPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPINT3_STUP ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DOEPINT3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT3_STUP, STUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT3_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DOEPINT3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT3_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DOEPINT3_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DOEPINT3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT3_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0_PKTCNT ( %bb -- x addr ) 19 lshift OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0_XFRSIZ ( %bbbbbbb -- x addr ) OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0_XFRSIZ, Transfer size

\ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_STUPCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_STUPCNT, SETUP packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_PKTCNT ( -- x addr ) 19 bit OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_XFRSIZ ( %bbbbbbb -- x addr ) OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_XFRSIZ, Transfer size

\ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_MCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_MCNT, Multi count
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_XFRSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_XFRSIZ, Transfer size

\ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_MCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_MCNT, Multi count
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_XFRSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_XFRSIZ, Transfer size

\ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_MCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_MCNT, Multi count
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_XFRSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_XFRSIZ, Transfer size

\ OTG_FS_DEVICE_OTG_FS_DTXFSTS0 (read-only) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DTXFSTS0_INEPTFSAV? ( --  x ) OTG_FS_DEVICE_OTG_FS_DTXFSTS0 @ ; \ OTG_FS_DEVICE_OTG_FS_DTXFSTS0_INEPTFSAV, IN endpoint TxFIFO space available

\ OTG_FS_DEVICE_OTG_FS_DTXFSTS1 (read-only) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DTXFSTS1_INEPTFSAV? ( --  x ) OTG_FS_DEVICE_OTG_FS_DTXFSTS1 @ ; \ OTG_FS_DEVICE_OTG_FS_DTXFSTS1_INEPTFSAV, IN endpoint TxFIFO space available

\ OTG_FS_DEVICE_OTG_FS_DTXFSTS2 (read-only) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DTXFSTS2_INEPTFSAV? ( --  x ) OTG_FS_DEVICE_OTG_FS_DTXFSTS2 @ ; \ OTG_FS_DEVICE_OTG_FS_DTXFSTS2_INEPTFSAV, IN endpoint TxFIFO space available

\ OTG_FS_DEVICE_OTG_FS_DTXFSTS3 (read-only) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DTXFSTS3_INEPTFSAV? ( --  x ) OTG_FS_DEVICE_OTG_FS_DTXFSTS3 @ ; \ OTG_FS_DEVICE_OTG_FS_DTXFSTS3_INEPTFSAV, IN endpoint TxFIFO space available

\ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_RXDPID_STUPCNT, Received data PID/SETUP packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_XFRSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_XFRSIZ, Transfer size

\ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_RXDPID_STUPCNT, Received data PID/SETUP packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_XFRSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_XFRSIZ, Transfer size

\ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_RXDPID_STUPCNT, Received data PID/SETUP packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_XFRSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_XFRSIZ, Transfer size

\ OTG_FS_DEVICE_OTG_FS_DIEPCTL4 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPENA, EPENA
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPDIS, EPDIS
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SODDFRM, SODDFRM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SD0PID_SEVNFRM, SD0PID/SEVNFRM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SNAK, SNAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_CNAK, CNAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_TXFNUM, TXFNUM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_Stall, Stall
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPTYP, EPTYP
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_NAKSTS, NAKSTS
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EONUM_DPID, EONUM/DPID
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_USBAEP, USBAEP
: OTG_FS_DEVICE_OTG_FS_DIEPCTL4_MPSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DIEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL4_MPSIZ, MPSIZ

\ OTG_FS_DEVICE_OTG_FS_DIEPINT4 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPINT4_TXFE ( -- x addr ) 7 bit OTG_FS_DEVICE_OTG_FS_DIEPINT4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT4_TXFE, TXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT4_INEPNE ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DIEPINT4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT4_INEPNE, INEPNE
: OTG_FS_DEVICE_OTG_FS_DIEPINT4_ITTXFE ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DIEPINT4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT4_ITTXFE, ITTXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT4_TOC ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DIEPINT4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT4_TOC, TOC
: OTG_FS_DEVICE_OTG_FS_DIEPINT4_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DIEPINT4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT4_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DIEPINT4_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DIEPINT4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT4_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_MCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_MCNT, Multi count
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_XFRSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_XFRSIZ, Transfer size

\ OTG_FS_DEVICE_OTG_FS_DTXFSTS4 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DTXFSTS4_INEPTFSAV ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_DEVICE_OTG_FS_DTXFSTS4 ; \ OTG_FS_DEVICE_OTG_FS_DTXFSTS4_INEPTFSAV, IN endpoint TxFIFO space available

\ OTG_FS_DEVICE_OTG_FS_DIEPCTL5 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPENA, EPENA
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPDIS, EPDIS
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SODDFRM, SODDFRM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SD0PID_SEVNFRM, SD0PID/SEVNFRM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SNAK, SNAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_CNAK, CNAK
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_TXFNUM, TXFNUM
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_Stall, Stall
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPTYP, EPTYP
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_NAKSTS, NAKSTS
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EONUM_DPID, EONUM/DPID
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_USBAEP, USBAEP
: OTG_FS_DEVICE_OTG_FS_DIEPCTL5_MPSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DIEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPCTL5_MPSIZ, MPSIZ

\ OTG_FS_DEVICE_OTG_FS_DIEPINT5 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPINT5_TXFE ( -- x addr ) 7 bit OTG_FS_DEVICE_OTG_FS_DIEPINT5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT5_TXFE, TXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT5_INEPNE ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DIEPINT5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT5_INEPNE, INEPNE
: OTG_FS_DEVICE_OTG_FS_DIEPINT5_ITTXFE ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DIEPINT5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT5_ITTXFE, ITTXFE
: OTG_FS_DEVICE_OTG_FS_DIEPINT5_TOC ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DIEPINT5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT5_TOC, TOC
: OTG_FS_DEVICE_OTG_FS_DIEPINT5_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DIEPINT5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT5_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DIEPINT5_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DIEPINT5 ; \ OTG_FS_DEVICE_OTG_FS_DIEPINT5_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_MCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_MCNT, Multi count
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_XFRSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55 ; \ OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_XFRSIZ, Transfer size

\ OTG_FS_DEVICE_OTG_FS_DTXFSTS55 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DTXFSTS55_INEPTFSAV ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_DEVICE_OTG_FS_DTXFSTS55 ; \ OTG_FS_DEVICE_OTG_FS_DTXFSTS55_INEPTFSAV, IN endpoint TxFIFO space available

\ OTG_FS_DEVICE_OTG_FS_DOEPCTL4 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPENA, EPENA
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPDIS, EPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SODDFRM, SODDFRM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SD0PID_SEVNFRM, SD0PID/SEVNFRM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SNAK, SNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_CNAK, CNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_Stall, Stall
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SNPM ( -- x addr ) 20 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SNPM, SNPM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPTYP, EPTYP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_NAKSTS, NAKSTS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EONUM_DPID, EONUM/DPID
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_USBAEP, USBAEP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL4_MPSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DOEPCTL4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL4_MPSIZ, MPSIZ

\ OTG_FS_DEVICE_OTG_FS_DOEPINT4 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPINT4_B2BSTUP ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DOEPINT4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT4_B2BSTUP, B2BSTUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT4_OTEPDIS ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DOEPINT4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT4_OTEPDIS, OTEPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPINT4_STUP ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DOEPINT4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT4_STUP, STUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT4_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DOEPINT4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT4_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DOEPINT4_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DOEPINT4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT4_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_RXDPID_STUPCNT, Received data PID/SETUP packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_XFRSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_XFRSIZ, Transfer size

\ OTG_FS_DEVICE_OTG_FS_DOEPCTL5 (multiple-access)  Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPENA, EPENA
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPDIS, EPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SODDFRM, SODDFRM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SD0PID_SEVNFRM, SD0PID/SEVNFRM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SNAK, SNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_CNAK, CNAK
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_Stall, Stall
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SNPM ( -- x addr ) 20 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SNPM, SNPM
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPTYP, EPTYP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_NAKSTS, NAKSTS
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EONUM_DPID, EONUM/DPID
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_USBAEP, USBAEP
: OTG_FS_DEVICE_OTG_FS_DOEPCTL5_MPSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DOEPCTL5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPCTL5_MPSIZ, MPSIZ

\ OTG_FS_DEVICE_OTG_FS_DOEPINT5 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPINT5_B2BSTUP ( -- x addr ) 6 bit OTG_FS_DEVICE_OTG_FS_DOEPINT5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT5_B2BSTUP, B2BSTUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT5_OTEPDIS ( -- x addr ) 4 bit OTG_FS_DEVICE_OTG_FS_DOEPINT5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT5_OTEPDIS, OTEPDIS
: OTG_FS_DEVICE_OTG_FS_DOEPINT5_STUP ( -- x addr ) 3 bit OTG_FS_DEVICE_OTG_FS_DOEPINT5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT5_STUP, STUP
: OTG_FS_DEVICE_OTG_FS_DOEPINT5_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_OTG_FS_DOEPINT5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT5_EPDISD, EPDISD
: OTG_FS_DEVICE_OTG_FS_DOEPINT5_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_OTG_FS_DOEPINT5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPINT5_XFRC, XFRC

\ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5 (read-write) Reset:0x00000000
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_RXDPID_STUPCNT, Received data PID/SETUP packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_PKTCNT, Packet count
: OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_XFRSIZ x addr ) OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5 ; \ OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_XFRSIZ, Transfer size

\ OTG_FS_PWRCLK_OTG_FS_PCGCCTL (read-write) Reset:0x00000000
: OTG_FS_PWRCLK_OTG_FS_PCGCCTL_STPPCLK ( -- x addr ) 0 bit OTG_FS_PWRCLK_OTG_FS_PCGCCTL ; \ OTG_FS_PWRCLK_OTG_FS_PCGCCTL_STPPCLK, Stop PHY clock
: OTG_FS_PWRCLK_OTG_FS_PCGCCTL_GATEHCLK ( -- x addr ) 1 bit OTG_FS_PWRCLK_OTG_FS_PCGCCTL ; \ OTG_FS_PWRCLK_OTG_FS_PCGCCTL_GATEHCLK, Gate HCLK
: OTG_FS_PWRCLK_OTG_FS_PCGCCTL_PHYSUSP ( -- x addr ) 4 bit OTG_FS_PWRCLK_OTG_FS_PCGCCTL ; \ OTG_FS_PWRCLK_OTG_FS_PCGCCTL_PHYSUSP, PHY Suspended

\ OTG_HS_GLOBAL_OTG_HS_GOTGCTL (multiple-access)  Reset:0x00000800
: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQSCS ( -- x addr ) 0 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQSCS, Session request success
: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQ ( -- x addr ) 1 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQ, Session request
: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNGSCS ( -- x addr ) 8 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNGSCS, Host negotiation success
: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNPRQ ( -- x addr ) 9 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNPRQ, HNP request
: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HSHNPEN ( -- x addr ) 10 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HSHNPEN, Host set HNP enable
: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DHNPEN ( -- x addr ) 11 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DHNPEN, Device HNP enabled
: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_CIDSTS? ( -- 1|0 ) 16 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL bit@ ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_CIDSTS, Connector ID status
: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DBCT ( -- x addr ) 17 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DBCT, Long/short debounce time
: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_ASVLD ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_ASVLD, A-session valid
: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_BSVLD ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_BSVLD, B-session valid
: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_EHEN ( -- x addr ) 12 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_EHEN, Embedded host enable

\ OTG_HS_GLOBAL_OTG_HS_GOTGINT (read-write) Reset:0x0
: OTG_HS_GLOBAL_OTG_HS_GOTGINT_SEDET ( -- x addr ) 2 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_SEDET, Session end detected
: OTG_HS_GLOBAL_OTG_HS_GOTGINT_SRSSCHG ( -- x addr ) 8 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_SRSSCHG, Session request success status change
: OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNSSCHG ( -- x addr ) 9 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNSSCHG, Host negotiation success status change
: OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNGDET ( -- x addr ) 17 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNGDET, Host negotiation detected
: OTG_HS_GLOBAL_OTG_HS_GOTGINT_ADTOCHG ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_ADTOCHG, A-device timeout change
: OTG_HS_GLOBAL_OTG_HS_GOTGINT_DBCDNE ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_DBCDNE, Debounce done
: OTG_HS_GLOBAL_OTG_HS_GOTGINT_IDCHNG ( -- x addr ) 20 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_IDCHNG, ID input pin changed

\ OTG_HS_GLOBAL_OTG_HS_GAHBCFG (read-write) Reset:0x0
: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_GINT ( -- x addr ) 0 bit OTG_HS_GLOBAL_OTG_HS_GAHBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_GINT, Global interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_HBSTLEN ( %bbbb -- x addr ) 1 lshift OTG_HS_GLOBAL_OTG_HS_GAHBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_HBSTLEN, Burst length/type
: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_DMAEN ( -- x addr ) 5 bit OTG_HS_GLOBAL_OTG_HS_GAHBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_DMAEN, DMA enable
: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_TXFELVL ( -- x addr ) 7 bit OTG_HS_GLOBAL_OTG_HS_GAHBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_TXFELVL, TxFIFO empty level
: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_PTXFELVL ( -- x addr ) 8 bit OTG_HS_GLOBAL_OTG_HS_GAHBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_PTXFELVL, Periodic TxFIFO empty level

\ OTG_HS_GLOBAL_OTG_HS_GUSBCFG (multiple-access)  Reset:0x00000A00
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TOCAL ( %bbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TOCAL, FS timeout calibration
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYSEL ( -- x addr ) 6 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYSEL, USB 2.0 high-speed ULPI PHY or USB 1.1 full-speed serial transceiver select
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_SRPCAP ( -- x addr ) 8 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_SRPCAP, SRP-capable
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_HNPCAP ( -- x addr ) 9 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_HNPCAP, HNP-capable
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TRDT ( %bbbb -- x addr ) 10 lshift OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TRDT, USB turnaround time
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYLPCS ( -- x addr ) 15 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYLPCS, PHY Low-power clock select
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIFSLS ( -- x addr ) 17 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIFSLS, ULPI FS/LS select
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIAR ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIAR, ULPI Auto-resume
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPICSM ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPICSM, ULPI Clock SuspendM
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSD ( -- x addr ) 20 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSD, ULPI External VBUS Drive
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSI ( -- x addr ) 21 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSI, ULPI external VBUS indicator
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TSDPS ( -- x addr ) 22 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TSDPS, TermSel DLine pulsing selection
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PCCI ( -- x addr ) 23 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PCCI, Indicator complement
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PTCI ( -- x addr ) 24 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PTCI, Indicator pass through
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIIPD ( -- x addr ) 25 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIIPD, ULPI interface protect disable
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FHMOD ( -- x addr ) 29 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FHMOD, Forced host mode
: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FDMOD ( -- x addr ) 30 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FDMOD, Forced peripheral mode

\ OTG_HS_GLOBAL_OTG_HS_GRSTCTL (multiple-access)  Reset:0x20000000
: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_CSRST ( -- x addr ) 0 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_CSRST, Core soft reset
: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_HSRST ( -- x addr ) 1 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_HSRST, HCLK soft reset
: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_FCRST ( -- x addr ) 2 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_FCRST, Host frame counter reset
: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_RXFFLSH ( -- x addr ) 4 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_RXFFLSH, RxFIFO flush
: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFFLSH ( -- x addr ) 5 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFFLSH, TxFIFO flush
: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFNUM ( %bbbbb -- x addr ) 6 lshift OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFNUM, TxFIFO number
: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_AHBIDL ( -- x addr ) 31 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_AHBIDL, AHB master idle
: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_DMAREQ ( -- x addr ) 30 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_DMAREQ, DMA request signal enabled for USB OTG HS

\ OTG_HS_GLOBAL_OTG_HS_GINTSTS (multiple-access)  Reset:0x04000020
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_CMOD ( -- x addr ) 0 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_CMOD, Current mode of operation
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_MMIS ( -- x addr ) 1 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_MMIS, Mode mismatch interrupt
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_OTGINT ( -- x addr ) 2 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_OTGINT, OTG interrupt
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_SOF ( -- x addr ) 3 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_SOF, Start of frame
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_RXFLVL ( -- x addr ) 4 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_RXFLVL, RxFIFO nonempty
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_NPTXFE ( -- x addr ) 5 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_NPTXFE, Nonperiodic TxFIFO empty
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_GINAKEFF ( -- x addr ) 6 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_GINAKEFF, Global IN nonperiodic NAK effective
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_BOUTNAKEFF ( -- x addr ) 7 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_BOUTNAKEFF, Global OUT NAK effective
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_ESUSP ( -- x addr ) 10 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ESUSP, Early suspend
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBSUSP ( -- x addr ) 11 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBSUSP, USB suspend
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBRST ( -- x addr ) 12 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBRST, USB reset
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_ENUMDNE ( -- x addr ) 13 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ENUMDNE, Enumeration done
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_ISOODRP ( -- x addr ) 14 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ISOODRP, Isochronous OUT packet dropped interrupt
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_EOPF ( -- x addr ) 15 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_EOPF, End of periodic frame interrupt
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_IEPINT ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_IEPINT, IN endpoint interrupt
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_OEPINT ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_OEPINT, OUT endpoint interrupt
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_IISOIXFR ( -- x addr ) 20 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_IISOIXFR, Incomplete isochronous IN transfer
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_PXFR_INCOMPISOOUT ( -- x addr ) 21 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_PXFR_INCOMPISOOUT, Incomplete periodic transfer
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_DATAFSUSP ( -- x addr ) 22 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_DATAFSUSP, Data fetch suspended
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_HPRTINT ( -- x addr ) 24 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_HPRTINT, Host port interrupt
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_HCINT ( -- x addr ) 25 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_HCINT, Host channels interrupt
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_PTXFE ( -- x addr ) 26 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_PTXFE, Periodic TxFIFO empty
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_CIDSCHG? ( -- 1|0 ) 28 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS bit@ ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_CIDSCHG, Connector ID status change
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_DISCINT ( -- x addr ) 29 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_DISCINT, Disconnect detected interrupt
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_SRQINT ( -- x addr ) 30 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_SRQINT, Session request/new session detected interrupt
: OTG_HS_GLOBAL_OTG_HS_GINTSTS_WKUINT ( -- x addr ) 31 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_WKUINT, Resume/remote wakeup detected interrupt

\ OTG_HS_GLOBAL_OTG_HS_GINTMSK (multiple-access)  Reset:0x0
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_MMISM ( -- x addr ) 1 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_MMISM, Mode mismatch interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_OTGINT ( -- x addr ) 2 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_OTGINT, OTG interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_SOFM ( -- x addr ) 3 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_SOFM, Start of frame mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_RXFLVLM ( -- x addr ) 4 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_RXFLVLM, Receive FIFO nonempty mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_NPTXFEM ( -- x addr ) 5 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_NPTXFEM, Nonperiodic TxFIFO empty mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_GINAKEFFM ( -- x addr ) 6 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_GINAKEFFM, Global nonperiodic IN NAK effective mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_GONAKEFFM ( -- x addr ) 7 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_GONAKEFFM, Global OUT NAK effective mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_ESUSPM ( -- x addr ) 10 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ESUSPM, Early suspend mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBSUSPM ( -- x addr ) 11 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBSUSPM, USB suspend mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBRST ( -- x addr ) 12 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBRST, USB reset mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_ENUMDNEM ( -- x addr ) 13 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ENUMDNEM, Enumeration done mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_ISOODRPM ( -- x addr ) 14 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ISOODRPM, Isochronous OUT packet dropped interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_EOPFM ( -- x addr ) 15 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_EOPFM, End of periodic frame interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_IEPINT ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_IEPINT, IN endpoints interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_OEPINT ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_OEPINT, OUT endpoints interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_IISOIXFRM ( -- x addr ) 20 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_IISOIXFRM, Incomplete isochronous IN transfer mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_PXFRM_IISOOXFRM ( -- x addr ) 21 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PXFRM_IISOOXFRM, Incomplete periodic transfer mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_FSUSPM ( -- x addr ) 22 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_FSUSPM, Data fetch suspended mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_PRTIM ( -- x addr ) 24 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PRTIM, Host port interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_HCIM ( -- x addr ) 25 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_HCIM, Host channels interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_PTXFEM ( -- x addr ) 26 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PTXFEM, Periodic TxFIFO empty mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_CIDSCHGM? ( -- 1|0 ) 28 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK bit@ ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_CIDSCHGM, Connector ID status change mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_DISCINT ( -- x addr ) 29 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_DISCINT, Disconnect detected interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_SRQIM ( -- x addr ) 30 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_SRQIM, Session request/new session detected interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_WUIM ( -- x addr ) 31 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_WUIM, Resume/remote wakeup detected interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_RSTDE ( -- x addr ) 23 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_RSTDE, Reset detected interrupt mask
: OTG_HS_GLOBAL_OTG_HS_GINTMSK_LPMINTM ( -- x addr ) 27 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_LPMINTM, LPM interrupt mask

\ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host (read-only) Reset:0x0
: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_CHNUM? ( --  x ) OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_CHNUM, Channel number
: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_BCNT? ( --  x ) 4 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_BCNT, Byte count
: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_DPID? ( --  x ) 15 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_DPID, Data PID
: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_PKTSTS? ( --  x ) 17 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_PKTSTS, Packet status

\ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host (read-only) Reset:0x0
: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_CHNUM? ( --  x ) OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_CHNUM, Channel number
: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_BCNT? ( --  x ) 4 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_BCNT, Byte count
: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_DPID? ( --  x ) 15 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_DPID, Data PID
: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_PKTSTS? ( --  x ) 17 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_PKTSTS, Packet status

\ OTG_HS_GLOBAL_OTG_HS_GRXFSIZ (read-write) Reset:0x00000200
: OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_RXFD ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_GRXFSIZ ; \ OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_RXFD, RxFIFO depth

\ OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host (read-write) Reset:0x00000200
: OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host ; \ OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFSA, Nonperiodic transmit RAM start address
: OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host ; \ OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFD, Nonperiodic TxFIFO depth

\ OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device (read-write) Reset:0x00000200
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FSA, Endpoint 0 transmit RAM start address
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FD, Endpoint 0 TxFIFO depth

\ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS (read-only) Reset:0x00080200
: OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXFSAV? ( --  x ) OTG_HS_GLOBAL_OTG_HS_GNPTXSTS @ ; \ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXFSAV, Nonperiodic TxFIFO space available
: OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTQXSAV? ( --  x ) 16 lshift OTG_HS_GLOBAL_OTG_HS_GNPTXSTS @ ; \ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTQXSAV, Nonperiodic transmit request queue space available
: OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXQTOP? ( --  x ) 24 lshift OTG_HS_GLOBAL_OTG_HS_GNPTXSTS @ ; \ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXQTOP, Top of the nonperiodic transmit request queue

\ OTG_HS_GLOBAL_OTG_HS_GCCFG (read-write) Reset:0x0
: OTG_HS_GLOBAL_OTG_HS_GCCFG_PWRDWN ( -- x addr ) 16 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_PWRDWN, Power down
: OTG_HS_GLOBAL_OTG_HS_GCCFG_BCDEN ( -- x addr ) 17 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_BCDEN, Battery charging detector BCD enable
: OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDEN ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDEN, Data contact detection DCD mode enable
: OTG_HS_GLOBAL_OTG_HS_GCCFG_PDEN ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_PDEN, Primary detection PD mode enable
: OTG_HS_GLOBAL_OTG_HS_GCCFG_SDEN ( -- x addr ) 20 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_SDEN, Secondary detection SD mode enable
: OTG_HS_GLOBAL_OTG_HS_GCCFG_VBDEN ( -- x addr ) 21 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_VBDEN, USB VBUS detection enable
: OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDET ( -- x addr ) 0 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDET, Data contact detection DCD status
: OTG_HS_GLOBAL_OTG_HS_GCCFG_PDET ( -- x addr ) 1 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_PDET, Primary detection PD status
: OTG_HS_GLOBAL_OTG_HS_GCCFG_SDET ( -- x addr ) 2 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_SDET, Secondary detection SD status
: OTG_HS_GLOBAL_OTG_HS_GCCFG_PS2DET ( -- x addr ) 3 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_PS2DET, DM pull-up detection status

\ OTG_HS_GLOBAL_OTG_HS_CID (read-write) Reset:0x00001200
: OTG_HS_GLOBAL_OTG_HS_CID_PRODUCT_ID ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_CID ; \ OTG_HS_GLOBAL_OTG_HS_CID_PRODUCT_ID, Product ID field

\ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ (read-write) Reset:0x02000600
: OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ ; \ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXSA, Host periodic TxFIFO start address
: OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ ; \ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXFD, Host periodic TxFIFO depth

\ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1 (read-write) Reset:0x02000400
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF1 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXSA, IN endpoint FIFOx transmit RAM start address
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF1 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXFD, IN endpoint TxFIFO depth

\ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2 (read-write) Reset:0x02000400
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF2 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXSA, IN endpoint FIFOx transmit RAM start address
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF2 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXFD, IN endpoint TxFIFO depth

\ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3 (read-write) Reset:0x02000400
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF3 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXSA, IN endpoint FIFOx transmit RAM start address
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF3 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXFD, IN endpoint TxFIFO depth

\ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4 (read-write) Reset:0x02000400
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF4 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXSA, IN endpoint FIFOx transmit RAM start address
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF4 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXFD, IN endpoint TxFIFO depth

\ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5 (read-write) Reset:0x02000400
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF5 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXSA, IN endpoint FIFOx transmit RAM start address
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF5 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXFD, IN endpoint TxFIFO depth

\ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6 (read-write) Reset:0x02000400
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF6 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXSA, IN endpoint FIFOx transmit RAM start address
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF6 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXFD, IN endpoint TxFIFO depth

\ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7 (read-write) Reset:0x02000400
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF7 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXSA, IN endpoint FIFOx transmit RAM start address
: OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF7 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXFD, IN endpoint TxFIFO depth

\ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device (read-only) Reset:0x0
: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_EPNUM? ( --  x ) OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_EPNUM, Endpoint number
: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_BCNT? ( --  x ) 4 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_BCNT, Byte count
: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_DPID? ( --  x ) 15 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_DPID, Data PID
: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_PKTSTS? ( --  x ) 17 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_PKTSTS, Packet status
: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_FRMNUM? ( --  x ) 21 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_FRMNUM, Frame number

\ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device (read-only) Reset:0x0
: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_EPNUM? ( --  x ) OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_EPNUM, Endpoint number
: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_BCNT? ( --  x ) 4 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_BCNT, Byte count
: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_DPID? ( --  x ) 15 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_DPID, Data PID
: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_PKTSTS? ( --  x ) 17 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_PKTSTS, Packet status
: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_FRMNUM? ( --  x ) 21 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_FRMNUM, Frame number

\ OTG_HS_GLOBAL_OTG_HS_GLPMCFG (multiple-access)  Reset:0x0
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMEN ( -- x addr ) 0 bit OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMEN, LPM support enable
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMACK ( -- x addr ) 1 bit OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMACK, LPM token acknowledge enable
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESL ( %bbbb -- x addr ) 2 lshift OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESL, Best effort service latency
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_REMWAKE ( -- x addr ) 6 bit OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_REMWAKE, bRemoteWake value
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1SSEN ( -- x addr ) 7 bit OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1SSEN, L1 Shallow Sleep enable
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESLTHRS ( %bbbb -- x addr ) 8 lshift OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESLTHRS, BESL threshold
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1DSEN ( -- x addr ) 12 bit OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1DSEN, L1 deep sleep enable
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRST ( %bb -- x addr ) 13 lshift OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRST, LPM response
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SLPSTS? ( -- 1|0 ) 15 bit OTG_HS_GLOBAL_OTG_HS_GLPMCFG bit@ ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SLPSTS, Port sleep status
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1RSMOK ( -- x addr ) 16 bit OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1RSMOK, Sleep State Resume OK
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMCHIDX ( %bbbb -- x addr ) 17 lshift OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMCHIDX, LPM Channel Index
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNT ( %bbb -- x addr ) 21 lshift OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNT, LPM retry count
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SNDLPM ( -- x addr ) 24 bit OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SNDLPM, Send LPM transaction
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNTSTS? ( %bbb -- 1|0 ) 25 lshift OTG_HS_GLOBAL_OTG_HS_GLPMCFG bit@ ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNTSTS, LPM retry count status
: OTG_HS_GLOBAL_OTG_HS_GLPMCFG_ENBESL ( -- x addr ) 28 bit OTG_HS_GLOBAL_OTG_HS_GLPMCFG ; \ OTG_HS_GLOBAL_OTG_HS_GLPMCFG_ENBESL, Enable best effort service latency

\ OTG_HS_HOST_OTG_HS_HCFG (multiple-access)  Reset:0x0
: OTG_HS_HOST_OTG_HS_HCFG_FSLSPCS ( %bb -- x addr ) OTG_HS_HOST_OTG_HS_HCFG ; \ OTG_HS_HOST_OTG_HS_HCFG_FSLSPCS, FS/LS PHY clock select
: OTG_HS_HOST_OTG_HS_HCFG_FSLSS ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCFG ; \ OTG_HS_HOST_OTG_HS_HCFG_FSLSS, FS- and LS-only support

\ OTG_HS_HOST_OTG_HS_HFIR (read-write) Reset:0x0000EA60
: OTG_HS_HOST_OTG_HS_HFIR_FRIVL ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HFIR ; \ OTG_HS_HOST_OTG_HS_HFIR_FRIVL, Frame interval

\ OTG_HS_HOST_OTG_HS_HFNUM (read-only) Reset:0x00003FFF
: OTG_HS_HOST_OTG_HS_HFNUM_FRNUM? ( --  x ) OTG_HS_HOST_OTG_HS_HFNUM @ ; \ OTG_HS_HOST_OTG_HS_HFNUM_FRNUM, Frame number
: OTG_HS_HOST_OTG_HS_HFNUM_FTREM? ( --  x ) 16 lshift OTG_HS_HOST_OTG_HS_HFNUM @ ; \ OTG_HS_HOST_OTG_HS_HFNUM_FTREM, Frame time remaining

\ OTG_HS_HOST_OTG_HS_HPTXSTS (multiple-access)  Reset:0x00080100
: OTG_HS_HOST_OTG_HS_HPTXSTS_PTXFSAVL ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HPTXSTS ; \ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXFSAVL, Periodic transmit data FIFO space available
: OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQSAV ( %bbbbbbbb -- x addr ) 16 lshift OTG_HS_HOST_OTG_HS_HPTXSTS ; \ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQSAV, Periodic transmit request queue space available
: OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQTOP ( %bbbbbbbb -- x addr ) 24 lshift OTG_HS_HOST_OTG_HS_HPTXSTS ; \ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQTOP, Top of the periodic transmit request queue

\ OTG_HS_HOST_OTG_HS_HAINT (read-only) Reset:0x0
: OTG_HS_HOST_OTG_HS_HAINT_HAINT? ( --  x ) OTG_HS_HOST_OTG_HS_HAINT @ ; \ OTG_HS_HOST_OTG_HS_HAINT_HAINT, Channel interrupts

\ OTG_HS_HOST_OTG_HS_HAINTMSK (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HAINTMSK_HAINTM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HAINTMSK ; \ OTG_HS_HOST_OTG_HS_HAINTMSK_HAINTM, Channel interrupt mask

\ OTG_HS_HOST_OTG_HS_HPRT (multiple-access)  Reset:0x0
: OTG_HS_HOST_OTG_HS_HPRT_PCSTS? ( -- 1|0 ) 0 bit OTG_HS_HOST_OTG_HS_HPRT bit@ ; \ OTG_HS_HOST_OTG_HS_HPRT_PCSTS, Port connect status
: OTG_HS_HOST_OTG_HS_HPRT_PCDET ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PCDET, Port connect detected
: OTG_HS_HOST_OTG_HS_HPRT_PENA ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PENA, Port enable
: OTG_HS_HOST_OTG_HS_HPRT_PENCHNG ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PENCHNG, Port enable/disable change
: OTG_HS_HOST_OTG_HS_HPRT_POCA ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_POCA, Port overcurrent active
: OTG_HS_HOST_OTG_HS_HPRT_POCCHNG ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_POCCHNG, Port overcurrent change
: OTG_HS_HOST_OTG_HS_HPRT_PRES ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PRES, Port resume
: OTG_HS_HOST_OTG_HS_HPRT_PSUSP ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PSUSP, Port suspend
: OTG_HS_HOST_OTG_HS_HPRT_PRST ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PRST, Port reset
: OTG_HS_HOST_OTG_HS_HPRT_PLSTS? ( %bb -- 1|0 ) 10 lshift OTG_HS_HOST_OTG_HS_HPRT bit@ ; \ OTG_HS_HOST_OTG_HS_HPRT_PLSTS, Port line status
: OTG_HS_HOST_OTG_HS_HPRT_PPWR ( -- x addr ) 12 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PPWR, Port power
: OTG_HS_HOST_OTG_HS_HPRT_PTCTL ( %bbbb -- x addr ) 13 lshift OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PTCTL, Port test control
: OTG_HS_HOST_OTG_HS_HPRT_PSPD ( %bb -- x addr ) 17 lshift OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PSPD, Port speed

\ OTG_HS_HOST_OTG_HS_HCCHAR0 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR0_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR0_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR0_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR0_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR0_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR0_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR0_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR0_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR0_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR0_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCCHAR1 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR1_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR1_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR1_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR1_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR1_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR1_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR1_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR1_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR1_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR1_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCCHAR2 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR2_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR2_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR2_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR2_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR2_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR2_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR2_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR2_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR2_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR2_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCCHAR3 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR3_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR3_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR3_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR3_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR3_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR3_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR3_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR3_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR3_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR3_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCCHAR4 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR4_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR4_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR4_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR4_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR4_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR4_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR4_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR4_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR4_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR4_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCCHAR5 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR5_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR5_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR5_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR5_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR5_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR5_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR5_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR5_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR5_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR5_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCCHAR6 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR6_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR6_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR6_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR6_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR6_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR6_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR6_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR6_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR6_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR6_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCCHAR7 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR7_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR7_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR7_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR7_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR7_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR7_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR7_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR7_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR7_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR7_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCCHAR8 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR8_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR8_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR8_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR8_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR8_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR8_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR8_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR8_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR8_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR8_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCCHAR9 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR9_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR9_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR9_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR9_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR9_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR9_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR9_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR9_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR9_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR9_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCCHAR10 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR10_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR10_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR10_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR10_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR10_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR10_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR10_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR10_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR10_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR10_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCCHAR11 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR11_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR11_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR11_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR11_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR11_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR11_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR11_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR11_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR11_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR11_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCSPLT0 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT0_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT0 ; \ OTG_HS_HOST_OTG_HS_HCSPLT0_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT0_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT0 ; \ OTG_HS_HOST_OTG_HS_HCSPLT0_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT0_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT0 ; \ OTG_HS_HOST_OTG_HS_HCSPLT0_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT0_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT0 ; \ OTG_HS_HOST_OTG_HS_HCSPLT0_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT0_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT0 ; \ OTG_HS_HOST_OTG_HS_HCSPLT0_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCSPLT1 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT1_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT1 ; \ OTG_HS_HOST_OTG_HS_HCSPLT1_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT1_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT1 ; \ OTG_HS_HOST_OTG_HS_HCSPLT1_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT1_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT1 ; \ OTG_HS_HOST_OTG_HS_HCSPLT1_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT1_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT1 ; \ OTG_HS_HOST_OTG_HS_HCSPLT1_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT1_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT1 ; \ OTG_HS_HOST_OTG_HS_HCSPLT1_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCSPLT2 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT2_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT2 ; \ OTG_HS_HOST_OTG_HS_HCSPLT2_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT2_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT2 ; \ OTG_HS_HOST_OTG_HS_HCSPLT2_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT2_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT2 ; \ OTG_HS_HOST_OTG_HS_HCSPLT2_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT2_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT2 ; \ OTG_HS_HOST_OTG_HS_HCSPLT2_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT2_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT2 ; \ OTG_HS_HOST_OTG_HS_HCSPLT2_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCSPLT3 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT3_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT3 ; \ OTG_HS_HOST_OTG_HS_HCSPLT3_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT3_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT3 ; \ OTG_HS_HOST_OTG_HS_HCSPLT3_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT3_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT3 ; \ OTG_HS_HOST_OTG_HS_HCSPLT3_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT3_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT3 ; \ OTG_HS_HOST_OTG_HS_HCSPLT3_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT3_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT3 ; \ OTG_HS_HOST_OTG_HS_HCSPLT3_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCSPLT4 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT4_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT4 ; \ OTG_HS_HOST_OTG_HS_HCSPLT4_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT4_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT4 ; \ OTG_HS_HOST_OTG_HS_HCSPLT4_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT4_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT4 ; \ OTG_HS_HOST_OTG_HS_HCSPLT4_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT4_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT4 ; \ OTG_HS_HOST_OTG_HS_HCSPLT4_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT4_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT4 ; \ OTG_HS_HOST_OTG_HS_HCSPLT4_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCSPLT5 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT5_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT5 ; \ OTG_HS_HOST_OTG_HS_HCSPLT5_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT5_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT5 ; \ OTG_HS_HOST_OTG_HS_HCSPLT5_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT5_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT5 ; \ OTG_HS_HOST_OTG_HS_HCSPLT5_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT5_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT5 ; \ OTG_HS_HOST_OTG_HS_HCSPLT5_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT5_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT5 ; \ OTG_HS_HOST_OTG_HS_HCSPLT5_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCSPLT6 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT6_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT6 ; \ OTG_HS_HOST_OTG_HS_HCSPLT6_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT6_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT6 ; \ OTG_HS_HOST_OTG_HS_HCSPLT6_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT6_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT6 ; \ OTG_HS_HOST_OTG_HS_HCSPLT6_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT6_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT6 ; \ OTG_HS_HOST_OTG_HS_HCSPLT6_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT6_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT6 ; \ OTG_HS_HOST_OTG_HS_HCSPLT6_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCSPLT7 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT7_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT7 ; \ OTG_HS_HOST_OTG_HS_HCSPLT7_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT7_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT7 ; \ OTG_HS_HOST_OTG_HS_HCSPLT7_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT7_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT7 ; \ OTG_HS_HOST_OTG_HS_HCSPLT7_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT7_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT7 ; \ OTG_HS_HOST_OTG_HS_HCSPLT7_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT7_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT7 ; \ OTG_HS_HOST_OTG_HS_HCSPLT7_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCSPLT8 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT8_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT8 ; \ OTG_HS_HOST_OTG_HS_HCSPLT8_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT8_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT8 ; \ OTG_HS_HOST_OTG_HS_HCSPLT8_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT8_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT8 ; \ OTG_HS_HOST_OTG_HS_HCSPLT8_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT8_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT8 ; \ OTG_HS_HOST_OTG_HS_HCSPLT8_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT8_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT8 ; \ OTG_HS_HOST_OTG_HS_HCSPLT8_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCSPLT9 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT9_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT9 ; \ OTG_HS_HOST_OTG_HS_HCSPLT9_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT9_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT9 ; \ OTG_HS_HOST_OTG_HS_HCSPLT9_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT9_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT9 ; \ OTG_HS_HOST_OTG_HS_HCSPLT9_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT9_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT9 ; \ OTG_HS_HOST_OTG_HS_HCSPLT9_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT9_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT9 ; \ OTG_HS_HOST_OTG_HS_HCSPLT9_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCSPLT10 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT10_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT10 ; \ OTG_HS_HOST_OTG_HS_HCSPLT10_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT10_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT10 ; \ OTG_HS_HOST_OTG_HS_HCSPLT10_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT10_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT10 ; \ OTG_HS_HOST_OTG_HS_HCSPLT10_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT10_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT10 ; \ OTG_HS_HOST_OTG_HS_HCSPLT10_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT10_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT10 ; \ OTG_HS_HOST_OTG_HS_HCSPLT10_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCSPLT11 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT11_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT11 ; \ OTG_HS_HOST_OTG_HS_HCSPLT11_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT11_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT11 ; \ OTG_HS_HOST_OTG_HS_HCSPLT11_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT11_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT11 ; \ OTG_HS_HOST_OTG_HS_HCSPLT11_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT11_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT11 ; \ OTG_HS_HOST_OTG_HS_HCSPLT11_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT11_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT11 ; \ OTG_HS_HOST_OTG_HS_HCSPLT11_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCINT0 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT0_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT0_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT0_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT0_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT0_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT0_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT0_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT0_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT0_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT0_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT0_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINT1 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT1_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT1_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT1_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT1_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT1_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT1_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT1_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT1_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT1_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT1_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT1_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINT2 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT2_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT2_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT2_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT2_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT2_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT2_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT2_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT2_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT2_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT2_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT2_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINT3 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT3_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT3_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT3_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT3_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT3_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT3_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT3_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT3_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT3_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT3_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT3_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINT4 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT4_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT4_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT4_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT4_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT4_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT4_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT4_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT4_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT4_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT4_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT4_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINT5 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT5_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT5_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT5_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT5_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT5_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT5_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT5_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT5_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT5_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT5_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT5_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINT6 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT6_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT6_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT6_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT6_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT6_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT6_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT6_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT6_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT6_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT6_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT6_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINT7 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT7_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT7_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT7_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT7_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT7_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT7_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT7_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT7_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT7_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT7_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT7_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINT8 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT8_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT8_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT8_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT8_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT8_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT8_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT8_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT8_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT8_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT8_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT8_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINT9 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT9_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT9_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT9_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT9_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT9_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT9_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT9_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT9_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT9_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT9_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT9_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINT10 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT10_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT10_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT10_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT10_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT10_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT10_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT10_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT10_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT10_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT10_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT10_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINT11 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT11_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT11_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT11_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT11_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT11_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT11_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT11_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT11_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT11_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT11_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT11_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINTMSK0 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK0_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK0_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK0_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK0_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK0_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK0_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK0_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK0_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK0_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK0_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK0_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCINTMSK1 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK1_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK1_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK1_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK1_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK1_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK1_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK1_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK1_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK1_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK1_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK1_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCINTMSK2 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK2_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK2_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK2_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK2_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK2_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK2_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK2_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK2_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK2_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK2_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK2_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCINTMSK3 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK3_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK3_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK3_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK3_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK3_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK3_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK3_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK3_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK3_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK3_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK3_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCINTMSK4 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK4_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK4_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK4_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK4_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK4_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK4_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK4_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK4_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK4_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK4_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK4_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCINTMSK5 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK5_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK5_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK5_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK5_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK5_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK5_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK5_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK5_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK5_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK5_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK5_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCINTMSK6 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK6_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK6_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK6_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK6_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK6_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK6_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK6_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK6_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK6_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK6_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK6_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCINTMSK7 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK7_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK7_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK7_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK7_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK7_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK7_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK7_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK7_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK7_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK7_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK7_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCINTMSK8 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK8_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK8_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK8_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK8_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK8_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK8_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK8_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK8_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK8_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK8_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK8_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCINTMSK9 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK9_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK9_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK9_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK9_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK9_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK9_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK9_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK9_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK9_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK9_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK9_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCINTMSK10 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK10_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK10_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK10_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK10_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK10_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK10_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK10_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK10_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK10_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK10_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK10_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCINTMSK11 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK11_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK11_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK11_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK11_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK11_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK11_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK11_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_NYET, response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK11_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_TXERRM, Transaction error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK11_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_BBERRM, Babble error mask
: OTG_HS_HOST_OTG_HS_HCINTMSK11_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK11_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCTSIZ0 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ0_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ0 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ0_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ0_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ0 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ0_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ0_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ0 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ0_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCTSIZ1 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ1_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ1 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ1_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ1 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ1_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ1_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ1 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ1_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCTSIZ2 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ2_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ2 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ2_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ2 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ2_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ2_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ2 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ2_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCTSIZ3 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ3_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ3 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ3_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ3 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ3_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ3_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ3 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ3_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCTSIZ4 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ4_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ4 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ4_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ4_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ4 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ4_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ4_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ4 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ4_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCTSIZ5 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ5_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ5 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ5_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ5_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ5 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ5_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ5_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ5 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ5_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCTSIZ6 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ6_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ6 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ6_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ6_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ6 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ6_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ6_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ6 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ6_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCTSIZ7 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ7_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ7 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ7_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ7_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ7 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ7_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ7_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ7 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ7_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCTSIZ8 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ8_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ8 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ8_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ8_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ8 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ8_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ8_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ8 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ8_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCTSIZ9 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ9_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ9 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ9_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ9_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ9 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ9_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ9_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ9 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ9_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCTSIZ10 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ10_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ10 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ10_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ10_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ10 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ10_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ10_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ10 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ10_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCTSIZ11 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ11_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ11 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ11_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ11_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ11 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ11_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ11_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ11 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ11_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCDMA0 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA0_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA0 ; \ OTG_HS_HOST_OTG_HS_HCDMA0_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCDMA1 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA1_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA1 ; \ OTG_HS_HOST_OTG_HS_HCDMA1_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCDMA2 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA2_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA2 ; \ OTG_HS_HOST_OTG_HS_HCDMA2_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCDMA3 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA3_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA3 ; \ OTG_HS_HOST_OTG_HS_HCDMA3_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCDMA4 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA4_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA4 ; \ OTG_HS_HOST_OTG_HS_HCDMA4_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCDMA5 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA5_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA5 ; \ OTG_HS_HOST_OTG_HS_HCDMA5_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCDMA6 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA6_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA6 ; \ OTG_HS_HOST_OTG_HS_HCDMA6_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCDMA7 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA7_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA7 ; \ OTG_HS_HOST_OTG_HS_HCDMA7_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCDMA8 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA8_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA8 ; \ OTG_HS_HOST_OTG_HS_HCDMA8_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCDMA9 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA9_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA9 ; \ OTG_HS_HOST_OTG_HS_HCDMA9_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCDMA10 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA10_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA10 ; \ OTG_HS_HOST_OTG_HS_HCDMA10_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCDMA11 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA11_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA11 ; \ OTG_HS_HOST_OTG_HS_HCDMA11_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCCHAR12 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR12_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR12 ; \ OTG_HS_HOST_OTG_HS_HCCHAR12_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR12_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR12 ; \ OTG_HS_HOST_OTG_HS_HCCHAR12_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR12_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR12 ; \ OTG_HS_HOST_OTG_HS_HCCHAR12_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR12_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR12 ; \ OTG_HS_HOST_OTG_HS_HCCHAR12_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR12_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR12 ; \ OTG_HS_HOST_OTG_HS_HCCHAR12_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR12_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR12 ; \ OTG_HS_HOST_OTG_HS_HCCHAR12_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR12_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR12 ; \ OTG_HS_HOST_OTG_HS_HCCHAR12_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR12_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR12 ; \ OTG_HS_HOST_OTG_HS_HCCHAR12_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR12_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR12 ; \ OTG_HS_HOST_OTG_HS_HCCHAR12_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR12_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR12 ; \ OTG_HS_HOST_OTG_HS_HCCHAR12_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCSPLT12 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT12_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT12 ; \ OTG_HS_HOST_OTG_HS_HCSPLT12_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT12_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT12 ; \ OTG_HS_HOST_OTG_HS_HCSPLT12_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT12_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT12 ; \ OTG_HS_HOST_OTG_HS_HCSPLT12_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT12_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT12 ; \ OTG_HS_HOST_OTG_HS_HCSPLT12_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT12_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT12 ; \ OTG_HS_HOST_OTG_HS_HCSPLT12_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCINT12 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT12_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT12 ; \ OTG_HS_HOST_OTG_HS_HCINT12_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT12_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT12 ; \ OTG_HS_HOST_OTG_HS_HCINT12_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT12_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT12 ; \ OTG_HS_HOST_OTG_HS_HCINT12_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT12_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT12 ; \ OTG_HS_HOST_OTG_HS_HCINT12_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT12_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT12 ; \ OTG_HS_HOST_OTG_HS_HCINT12_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT12_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT12 ; \ OTG_HS_HOST_OTG_HS_HCINT12_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT12_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT12 ; \ OTG_HS_HOST_OTG_HS_HCINT12_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT12_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT12 ; \ OTG_HS_HOST_OTG_HS_HCINT12_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT12_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT12 ; \ OTG_HS_HOST_OTG_HS_HCINT12_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT12_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT12 ; \ OTG_HS_HOST_OTG_HS_HCINT12_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT12_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT12 ; \ OTG_HS_HOST_OTG_HS_HCINT12_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINTMSK12 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK12_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK12 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK12_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK12_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK12 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK12_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK12_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK12 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK12_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK12_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK12 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK12_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK12_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK12 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK12_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK12_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK12 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK12_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK12_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK12 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK12_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINTMSK12_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK12 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK12_TXERRM, Transaction error
: OTG_HS_HOST_OTG_HS_HCINTMSK12_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK12 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK12_BBERRM, Babble error
: OTG_HS_HOST_OTG_HS_HCINTMSK12_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK12 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK12_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK12_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK12 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK12_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCTSIZ12 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ12_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ12 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ12_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ12_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ12 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ12_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ12_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ12 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ12_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCDMA12 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA12_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA12 ; \ OTG_HS_HOST_OTG_HS_HCDMA12_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCCHAR13 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR13_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR13 ; \ OTG_HS_HOST_OTG_HS_HCCHAR13_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR13_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR13 ; \ OTG_HS_HOST_OTG_HS_HCCHAR13_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR13_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR13 ; \ OTG_HS_HOST_OTG_HS_HCCHAR13_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR13_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR13 ; \ OTG_HS_HOST_OTG_HS_HCCHAR13_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR13_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR13 ; \ OTG_HS_HOST_OTG_HS_HCCHAR13_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR13_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR13 ; \ OTG_HS_HOST_OTG_HS_HCCHAR13_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR13_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR13 ; \ OTG_HS_HOST_OTG_HS_HCCHAR13_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR13_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR13 ; \ OTG_HS_HOST_OTG_HS_HCCHAR13_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR13_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR13 ; \ OTG_HS_HOST_OTG_HS_HCCHAR13_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR13_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR13 ; \ OTG_HS_HOST_OTG_HS_HCCHAR13_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCSPLT13 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT13_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT13 ; \ OTG_HS_HOST_OTG_HS_HCSPLT13_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT13_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT13 ; \ OTG_HS_HOST_OTG_HS_HCSPLT13_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT13_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT13 ; \ OTG_HS_HOST_OTG_HS_HCSPLT13_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT13_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT13 ; \ OTG_HS_HOST_OTG_HS_HCSPLT13_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT13_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT13 ; \ OTG_HS_HOST_OTG_HS_HCSPLT13_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCINT13 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT13_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT13 ; \ OTG_HS_HOST_OTG_HS_HCINT13_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT13_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT13 ; \ OTG_HS_HOST_OTG_HS_HCINT13_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT13_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT13 ; \ OTG_HS_HOST_OTG_HS_HCINT13_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT13_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT13 ; \ OTG_HS_HOST_OTG_HS_HCINT13_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT13_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT13 ; \ OTG_HS_HOST_OTG_HS_HCINT13_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT13_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT13 ; \ OTG_HS_HOST_OTG_HS_HCINT13_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT13_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT13 ; \ OTG_HS_HOST_OTG_HS_HCINT13_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT13_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT13 ; \ OTG_HS_HOST_OTG_HS_HCINT13_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT13_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT13 ; \ OTG_HS_HOST_OTG_HS_HCINT13_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT13_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT13 ; \ OTG_HS_HOST_OTG_HS_HCINT13_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT13_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT13 ; \ OTG_HS_HOST_OTG_HS_HCINT13_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINTMSK13 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK13_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK13 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK13_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK13_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK13 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK13_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK13_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK13 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK13_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK13_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK13 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK13_STALLM, STALLM response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK13_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK13 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK13_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK13_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK13 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK13_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK13_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK13 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK13_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINTMSK13_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK13 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK13_TXERRM, Transaction error
: OTG_HS_HOST_OTG_HS_HCINTMSK13_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK13 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK13_BBERRM, Babble error
: OTG_HS_HOST_OTG_HS_HCINTMSK13_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK13 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK13_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK13_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK13 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK13_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCTSIZ13 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ13_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ13 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ13_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ13_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ13 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ13_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ13_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ13 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ13_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCDMA13 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA13_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA13 ; \ OTG_HS_HOST_OTG_HS_HCDMA13_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCCHAR14 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR14_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR14 ; \ OTG_HS_HOST_OTG_HS_HCCHAR14_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR14_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR14 ; \ OTG_HS_HOST_OTG_HS_HCCHAR14_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR14_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR14 ; \ OTG_HS_HOST_OTG_HS_HCCHAR14_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR14_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR14 ; \ OTG_HS_HOST_OTG_HS_HCCHAR14_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR14_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR14 ; \ OTG_HS_HOST_OTG_HS_HCCHAR14_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR14_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR14 ; \ OTG_HS_HOST_OTG_HS_HCCHAR14_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR14_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR14 ; \ OTG_HS_HOST_OTG_HS_HCCHAR14_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR14_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR14 ; \ OTG_HS_HOST_OTG_HS_HCCHAR14_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR14_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR14 ; \ OTG_HS_HOST_OTG_HS_HCCHAR14_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR14_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR14 ; \ OTG_HS_HOST_OTG_HS_HCCHAR14_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCSPLT14 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT14_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT14 ; \ OTG_HS_HOST_OTG_HS_HCSPLT14_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT14_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT14 ; \ OTG_HS_HOST_OTG_HS_HCSPLT14_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT14_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT14 ; \ OTG_HS_HOST_OTG_HS_HCSPLT14_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT14_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT14 ; \ OTG_HS_HOST_OTG_HS_HCSPLT14_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT14_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT14 ; \ OTG_HS_HOST_OTG_HS_HCSPLT14_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCINT14 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT14_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT14 ; \ OTG_HS_HOST_OTG_HS_HCINT14_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT14_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT14 ; \ OTG_HS_HOST_OTG_HS_HCINT14_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT14_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT14 ; \ OTG_HS_HOST_OTG_HS_HCINT14_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT14_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT14 ; \ OTG_HS_HOST_OTG_HS_HCINT14_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT14_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT14 ; \ OTG_HS_HOST_OTG_HS_HCINT14_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT14_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT14 ; \ OTG_HS_HOST_OTG_HS_HCINT14_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT14_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT14 ; \ OTG_HS_HOST_OTG_HS_HCINT14_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT14_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT14 ; \ OTG_HS_HOST_OTG_HS_HCINT14_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT14_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT14 ; \ OTG_HS_HOST_OTG_HS_HCINT14_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT14_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT14 ; \ OTG_HS_HOST_OTG_HS_HCINT14_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT14_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT14 ; \ OTG_HS_HOST_OTG_HS_HCINT14_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINTMSK14 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK14_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK14 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK14_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK14_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK14 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK14_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK14_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK14 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK14_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK14_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK14 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK14_STALLM, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK14_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK14 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK14_NAKM, NAKM response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK14_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK14 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK14_ACKM, ACKM response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK14_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK14 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK14_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINTMSK14_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK14 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK14_TXERRM, Transaction error
: OTG_HS_HOST_OTG_HS_HCINTMSK14_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK14 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK14_BBERRM, Babble error
: OTG_HS_HOST_OTG_HS_HCINTMSK14_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK14 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK14_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK14_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK14 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK14_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCTSIZ14 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ14_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ14 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ14_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ14_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ14 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ14_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ14_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ14 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ14_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCDMA14 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA14_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA14 ; \ OTG_HS_HOST_OTG_HS_HCDMA14_DMAADDR, DMA address

\ OTG_HS_HOST_OTG_HS_HCCHAR15 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCCHAR15_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR15 ; \ OTG_HS_HOST_OTG_HS_HCCHAR15_MPSIZ, Maximum packet size
: OTG_HS_HOST_OTG_HS_HCCHAR15_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR15 ; \ OTG_HS_HOST_OTG_HS_HCCHAR15_EPNUM, Endpoint number
: OTG_HS_HOST_OTG_HS_HCCHAR15_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR15 ; \ OTG_HS_HOST_OTG_HS_HCCHAR15_EPDIR, Endpoint direction
: OTG_HS_HOST_OTG_HS_HCCHAR15_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR15 ; \ OTG_HS_HOST_OTG_HS_HCCHAR15_LSDEV, Low-speed device
: OTG_HS_HOST_OTG_HS_HCCHAR15_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR15 ; \ OTG_HS_HOST_OTG_HS_HCCHAR15_EPTYP, Endpoint type
: OTG_HS_HOST_OTG_HS_HCCHAR15_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR15 ; \ OTG_HS_HOST_OTG_HS_HCCHAR15_MC, Multi Count MC / Error Count EC
: OTG_HS_HOST_OTG_HS_HCCHAR15_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR15 ; \ OTG_HS_HOST_OTG_HS_HCCHAR15_DAD, Device address
: OTG_HS_HOST_OTG_HS_HCCHAR15_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR15 ; \ OTG_HS_HOST_OTG_HS_HCCHAR15_ODDFRM, Odd frame
: OTG_HS_HOST_OTG_HS_HCCHAR15_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR15 ; \ OTG_HS_HOST_OTG_HS_HCCHAR15_CHDIS, Channel disable
: OTG_HS_HOST_OTG_HS_HCCHAR15_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR15 ; \ OTG_HS_HOST_OTG_HS_HCCHAR15_CHENA, Channel enable

\ OTG_HS_HOST_OTG_HS_HCSPLT15 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCSPLT15_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT15 ; \ OTG_HS_HOST_OTG_HS_HCSPLT15_PRTADDR, Port address
: OTG_HS_HOST_OTG_HS_HCSPLT15_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT15 ; \ OTG_HS_HOST_OTG_HS_HCSPLT15_HUBADDR, Hub address
: OTG_HS_HOST_OTG_HS_HCSPLT15_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT15 ; \ OTG_HS_HOST_OTG_HS_HCSPLT15_XACTPOS, XACTPOS
: OTG_HS_HOST_OTG_HS_HCSPLT15_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT15 ; \ OTG_HS_HOST_OTG_HS_HCSPLT15_COMPLSPLT, Do complete split
: OTG_HS_HOST_OTG_HS_HCSPLT15_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT15 ; \ OTG_HS_HOST_OTG_HS_HCSPLT15_SPLITEN, Split enable

\ OTG_HS_HOST_OTG_HS_HCINT15 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINT15_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT15 ; \ OTG_HS_HOST_OTG_HS_HCINT15_XFRC, Transfer completed
: OTG_HS_HOST_OTG_HS_HCINT15_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT15 ; \ OTG_HS_HOST_OTG_HS_HCINT15_CHH, Channel halted
: OTG_HS_HOST_OTG_HS_HCINT15_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT15 ; \ OTG_HS_HOST_OTG_HS_HCINT15_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINT15_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT15 ; \ OTG_HS_HOST_OTG_HS_HCINT15_STALL, STALL response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT15_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT15 ; \ OTG_HS_HOST_OTG_HS_HCINT15_NAK, NAK response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT15_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT15 ; \ OTG_HS_HOST_OTG_HS_HCINT15_ACK, ACK response received/transmitted interrupt
: OTG_HS_HOST_OTG_HS_HCINT15_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT15 ; \ OTG_HS_HOST_OTG_HS_HCINT15_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINT15_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT15 ; \ OTG_HS_HOST_OTG_HS_HCINT15_TXERR, Transaction error
: OTG_HS_HOST_OTG_HS_HCINT15_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT15 ; \ OTG_HS_HOST_OTG_HS_HCINT15_BBERR, Babble error
: OTG_HS_HOST_OTG_HS_HCINT15_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT15 ; \ OTG_HS_HOST_OTG_HS_HCINT15_FRMOR, Frame overrun
: OTG_HS_HOST_OTG_HS_HCINT15_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT15 ; \ OTG_HS_HOST_OTG_HS_HCINT15_DTERR, Data toggle error

\ OTG_HS_HOST_OTG_HS_HCINTMSK15 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCINTMSK15_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK15 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK15_XFRCM, Transfer completed mask
: OTG_HS_HOST_OTG_HS_HCINTMSK15_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK15 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK15_CHHM, Channel halted mask
: OTG_HS_HOST_OTG_HS_HCINTMSK15_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK15 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK15_AHBERR, AHB error
: OTG_HS_HOST_OTG_HS_HCINTMSK15_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK15 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK15_STALL, STALL response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK15_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK15 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK15_NAKM, NAK response received interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK15_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK15 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK15_ACKM, ACK response received/transmitted interrupt mask
: OTG_HS_HOST_OTG_HS_HCINTMSK15_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK15 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK15_NYET, Response received interrupt
: OTG_HS_HOST_OTG_HS_HCINTMSK15_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK15 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK15_TXERRM, Transaction error
: OTG_HS_HOST_OTG_HS_HCINTMSK15_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK15 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK15_BBERRM, Babble error
: OTG_HS_HOST_OTG_HS_HCINTMSK15_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK15 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK15_FRMORM, Frame overrun mask
: OTG_HS_HOST_OTG_HS_HCINTMSK15_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK15 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK15_DTERRM, Data toggle error mask

\ OTG_HS_HOST_OTG_HS_HCTSIZ15 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCTSIZ15_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ15 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ15_XFRSIZ, Transfer size
: OTG_HS_HOST_OTG_HS_HCTSIZ15_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ15 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ15_PKTCNT, Packet count
: OTG_HS_HOST_OTG_HS_HCTSIZ15_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ15 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ15_DPID, Data PID

\ OTG_HS_HOST_OTG_HS_HCDMA15 (read-write) Reset:0x0
: OTG_HS_HOST_OTG_HS_HCDMA15_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA15 ; \ OTG_HS_HOST_OTG_HS_HCDMA15_DMAADDR, DMA address

\ OTG_HS_DEVICE_OTG_HS_DCFG (read-write) Reset:0x02200000
: OTG_HS_DEVICE_OTG_HS_DCFG_DSPD ( %bb -- x addr ) OTG_HS_DEVICE_OTG_HS_DCFG ; \ OTG_HS_DEVICE_OTG_HS_DCFG_DSPD, Device speed
: OTG_HS_DEVICE_OTG_HS_DCFG_NZLSOHSK ( -- x addr ) 2 bit OTG_HS_DEVICE_OTG_HS_DCFG ; \ OTG_HS_DEVICE_OTG_HS_DCFG_NZLSOHSK, Nonzero-length status OUT handshake
: OTG_HS_DEVICE_OTG_HS_DCFG_DAD ( %bbbbbbb -- x addr ) 4 lshift OTG_HS_DEVICE_OTG_HS_DCFG ; \ OTG_HS_DEVICE_OTG_HS_DCFG_DAD, Device address
: OTG_HS_DEVICE_OTG_HS_DCFG_PFIVL ( %bb -- x addr ) 11 lshift OTG_HS_DEVICE_OTG_HS_DCFG ; \ OTG_HS_DEVICE_OTG_HS_DCFG_PFIVL, Periodic microframe interval
: OTG_HS_DEVICE_OTG_HS_DCFG_PERSCHIVL ( %bb -- x addr ) 24 lshift OTG_HS_DEVICE_OTG_HS_DCFG ; \ OTG_HS_DEVICE_OTG_HS_DCFG_PERSCHIVL, Periodic scheduling interval

\ OTG_HS_DEVICE_OTG_HS_DCTL (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DCTL_RWUSIG ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_RWUSIG, Remote wakeup signaling
: OTG_HS_DEVICE_OTG_HS_DCTL_SDIS ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_SDIS, Soft disconnect
: OTG_HS_DEVICE_OTG_HS_DCTL_GINSTS? ( -- 1|0 ) 2 bit OTG_HS_DEVICE_OTG_HS_DCTL bit@ ; \ OTG_HS_DEVICE_OTG_HS_DCTL_GINSTS, Global IN NAK status
: OTG_HS_DEVICE_OTG_HS_DCTL_GONSTS? ( -- 1|0 ) 3 bit OTG_HS_DEVICE_OTG_HS_DCTL bit@ ; \ OTG_HS_DEVICE_OTG_HS_DCTL_GONSTS, Global OUT NAK status
: OTG_HS_DEVICE_OTG_HS_DCTL_TCTL ( %bbb -- x addr ) 4 lshift OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_TCTL, Test control
: OTG_HS_DEVICE_OTG_HS_DCTL_SGINAK ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_SGINAK, Set global IN NAK
: OTG_HS_DEVICE_OTG_HS_DCTL_CGINAK ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_CGINAK, Clear global IN NAK
: OTG_HS_DEVICE_OTG_HS_DCTL_SGONAK ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_SGONAK, Set global OUT NAK
: OTG_HS_DEVICE_OTG_HS_DCTL_CGONAK ( -- x addr ) 10 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_CGONAK, Clear global OUT NAK
: OTG_HS_DEVICE_OTG_HS_DCTL_POPRGDNE ( -- x addr ) 11 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_POPRGDNE, Power-on programming done

\ OTG_HS_DEVICE_OTG_HS_DSTS (read-only) Reset:0x00000010
: OTG_HS_DEVICE_OTG_HS_DSTS_SUSPSTS? ( --  1|0 ) 0 bit OTG_HS_DEVICE_OTG_HS_DSTS bit@ ; \ OTG_HS_DEVICE_OTG_HS_DSTS_SUSPSTS, Suspend status
: OTG_HS_DEVICE_OTG_HS_DSTS_ENUMSPD? ( --  x ) 1 lshift OTG_HS_DEVICE_OTG_HS_DSTS @ ; \ OTG_HS_DEVICE_OTG_HS_DSTS_ENUMSPD, Enumerated speed
: OTG_HS_DEVICE_OTG_HS_DSTS_EERR? ( --  1|0 ) 3 bit OTG_HS_DEVICE_OTG_HS_DSTS bit@ ; \ OTG_HS_DEVICE_OTG_HS_DSTS_EERR, Erratic error
: OTG_HS_DEVICE_OTG_HS_DSTS_FNSOF? ( --  x ) 8 lshift OTG_HS_DEVICE_OTG_HS_DSTS @ ; \ OTG_HS_DEVICE_OTG_HS_DSTS_FNSOF, Frame number of the received SOF

\ OTG_HS_DEVICE_OTG_HS_DIEPMSK (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPMSK_XFRCM ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_XFRCM, Transfer completed interrupt mask
: OTG_HS_DEVICE_OTG_HS_DIEPMSK_EPDM ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_EPDM, Endpoint disabled interrupt mask
: OTG_HS_DEVICE_OTG_HS_DIEPMSK_TOM ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_TOM, Timeout condition mask nonisochronous endpoints
: OTG_HS_DEVICE_OTG_HS_DIEPMSK_ITTXFEMSK ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_ITTXFEMSK, IN token received when TxFIFO empty mask
: OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNMM ( -- x addr ) 5 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNMM, IN token received with EP mismatch mask
: OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNEM ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNEM, IN endpoint NAK effective mask
: OTG_HS_DEVICE_OTG_HS_DIEPMSK_TXFURM ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_TXFURM, FIFO underrun mask
: OTG_HS_DEVICE_OTG_HS_DIEPMSK_BIM ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_BIM, BNA interrupt mask

\ OTG_HS_DEVICE_OTG_HS_DOEPMSK (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPMSK_XFRCM ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_XFRCM, Transfer completed interrupt mask
: OTG_HS_DEVICE_OTG_HS_DOEPMSK_EPDM ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_EPDM, Endpoint disabled interrupt mask
: OTG_HS_DEVICE_OTG_HS_DOEPMSK_STUPM ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_STUPM, SETUP phase done mask
: OTG_HS_DEVICE_OTG_HS_DOEPMSK_OTEPDM ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_OTEPDM, OUT token received when endpoint disabled mask
: OTG_HS_DEVICE_OTG_HS_DOEPMSK_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_B2BSTUP, Back-to-back SETUP packets received mask
: OTG_HS_DEVICE_OTG_HS_DOEPMSK_OPEM ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_OPEM, OUT packet error mask
: OTG_HS_DEVICE_OTG_HS_DOEPMSK_BOIM ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_BOIM, BNA interrupt mask

\ OTG_HS_DEVICE_OTG_HS_DAINT (read-only) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DAINT_IEPINT? ( --  x ) OTG_HS_DEVICE_OTG_HS_DAINT @ ; \ OTG_HS_DEVICE_OTG_HS_DAINT_IEPINT, IN endpoint interrupt bits
: OTG_HS_DEVICE_OTG_HS_DAINT_OEPINT? ( --  x ) 16 lshift OTG_HS_DEVICE_OTG_HS_DAINT @ ; \ OTG_HS_DEVICE_OTG_HS_DAINT_OEPINT, OUT endpoint interrupt bits

\ OTG_HS_DEVICE_OTG_HS_DAINTMSK (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DAINTMSK_IEPM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DAINTMSK ; \ OTG_HS_DEVICE_OTG_HS_DAINTMSK_IEPM, IN EP interrupt mask bits
: OTG_HS_DEVICE_OTG_HS_DAINTMSK_OEPM ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_DEVICE_OTG_HS_DAINTMSK ; \ OTG_HS_DEVICE_OTG_HS_DAINTMSK_OEPM, OUT EP interrupt mask bits

\ OTG_HS_DEVICE_OTG_HS_DVBUSDIS (read-write) Reset:0x000017D7
: OTG_HS_DEVICE_OTG_HS_DVBUSDIS_VBUSDT ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DVBUSDIS ; \ OTG_HS_DEVICE_OTG_HS_DVBUSDIS_VBUSDT, Device VBUS discharge time

\ OTG_HS_DEVICE_OTG_HS_DVBUSPULSE (read-write) Reset:0x000005B8
: OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_DVBUSP ( %bbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DVBUSPULSE ; \ OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_DVBUSP, Device VBUS pulsing time

\ OTG_HS_DEVICE_OTG_HS_DTHRCTL (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DTHRCTL_NONISOTHREN ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_NONISOTHREN, Nonisochronous IN endpoints threshold enable
: OTG_HS_DEVICE_OTG_HS_DTHRCTL_ISOTHREN ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_ISOTHREN, ISO IN endpoint threshold enable
: OTG_HS_DEVICE_OTG_HS_DTHRCTL_TXTHRLEN ( %bbbbbbbbb -- x addr ) 2 lshift OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_TXTHRLEN, Transmit threshold length
: OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHREN ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHREN, Receive threshold enable
: OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHRLEN ( %bbbbbbbbb -- x addr ) 17 lshift OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHRLEN, Receive threshold length
: OTG_HS_DEVICE_OTG_HS_DTHRCTL_ARPEN ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_ARPEN, Arbiter parking enable

\ OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_INEPTXFEM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_INEPTXFEM, IN EP Tx FIFO empty interrupt mask bits

\ OTG_HS_DEVICE_OTG_HS_DEACHINT (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DEACHINT_IEP1INT ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DEACHINT ; \ OTG_HS_DEVICE_OTG_HS_DEACHINT_IEP1INT, IN endpoint 1interrupt bit
: OTG_HS_DEVICE_OTG_HS_DEACHINT_OEP1INT ( -- x addr ) 17 bit OTG_HS_DEVICE_OTG_HS_DEACHINT ; \ OTG_HS_DEVICE_OTG_HS_DEACHINT_OEP1INT, OUT endpoint 1 interrupt bit

\ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_IEP1INTM ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DEACHINTMSK ; \ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_IEP1INTM, IN Endpoint 1 interrupt mask bit
: OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_OEP1INTM ( -- x addr ) 17 bit OTG_HS_DEVICE_OTG_HS_DEACHINTMSK ; \ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_OEP1INTM, OUT Endpoint 1 interrupt mask bit

\ OTG_HS_DEVICE_OTG_HS_DIEPCTL0 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EONUM_DPID, Even/odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_TXFNUM, TxFIFO number
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SD0PID_SEVNFRM, Set DATA0 PID
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DIEPCTL1 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EONUM_DPID, Even/odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_TXFNUM, TxFIFO number
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SD0PID_SEVNFRM, Set DATA0 PID
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DIEPCTL2 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EONUM_DPID, Even/odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_TXFNUM, TxFIFO number
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SD0PID_SEVNFRM, Set DATA0 PID
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DIEPCTL3 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EONUM_DPID, Even/odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_TXFNUM, TxFIFO number
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SD0PID_SEVNFRM, Set DATA0 PID
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DIEPCTL4 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EONUM_DPID, Even/odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_TXFNUM, TxFIFO number
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SD0PID_SEVNFRM, Set DATA0 PID
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DIEPCTL5 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EONUM_DPID, Even/odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_TXFNUM, TxFIFO number
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SD0PID_SEVNFRM, Set DATA0 PID
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DIEPCTL6 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EONUM_DPID, Even/odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_TXFNUM, TxFIFO number
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SD0PID_SEVNFRM, Set DATA0 PID
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DIEPCTL7 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EONUM_DPID, Even/odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_TXFNUM, TxFIFO number
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SD0PID_SEVNFRM, Set DATA0 PID
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DIEPINT0 (multiple-access)  Reset:0x00000080
: OTG_HS_DEVICE_OTG_HS_DIEPINT0_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT0_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT0_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TOC, Timeout condition
: OTG_HS_DEVICE_OTG_HS_DIEPINT0_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_ITTXFE, IN token received when TxFIFO is empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT0_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_INEPNE, IN endpoint NAK effective
: OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFE, Transmit FIFO empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFIFOUDRN, Transmit Fifo Underrun
: OTG_HS_DEVICE_OTG_HS_DIEPINT0_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_BNA, Buffer not available interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT0_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_PKTDRPSTS, Packet dropped status
: OTG_HS_DEVICE_OTG_HS_DIEPINT0_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_BERR, Babble error interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT0_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_NAK, NAK interrupt

\ OTG_HS_DEVICE_OTG_HS_DIEPINT1 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPINT1_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT1_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT1_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TOC, Timeout condition
: OTG_HS_DEVICE_OTG_HS_DIEPINT1_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_ITTXFE, IN token received when TxFIFO is empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT1_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_INEPNE, IN endpoint NAK effective
: OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFE, Transmit FIFO empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFIFOUDRN, Transmit Fifo Underrun
: OTG_HS_DEVICE_OTG_HS_DIEPINT1_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_BNA, Buffer not available interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT1_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_PKTDRPSTS, Packet dropped status
: OTG_HS_DEVICE_OTG_HS_DIEPINT1_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_BERR, Babble error interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT1_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_NAK, NAK interrupt

\ OTG_HS_DEVICE_OTG_HS_DIEPINT2 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPINT2_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT2_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT2_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TOC, Timeout condition
: OTG_HS_DEVICE_OTG_HS_DIEPINT2_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_ITTXFE, IN token received when TxFIFO is empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT2_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_INEPNE, IN endpoint NAK effective
: OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFE, Transmit FIFO empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFIFOUDRN, Transmit Fifo Underrun
: OTG_HS_DEVICE_OTG_HS_DIEPINT2_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_BNA, Buffer not available interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT2_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_PKTDRPSTS, Packet dropped status
: OTG_HS_DEVICE_OTG_HS_DIEPINT2_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_BERR, Babble error interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT2_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_NAK, NAK interrupt

\ OTG_HS_DEVICE_OTG_HS_DIEPINT3 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPINT3_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT3_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT3_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TOC, Timeout condition
: OTG_HS_DEVICE_OTG_HS_DIEPINT3_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_ITTXFE, IN token received when TxFIFO is empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT3_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_INEPNE, IN endpoint NAK effective
: OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFE, Transmit FIFO empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFIFOUDRN, Transmit Fifo Underrun
: OTG_HS_DEVICE_OTG_HS_DIEPINT3_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_BNA, Buffer not available interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT3_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_PKTDRPSTS, Packet dropped status
: OTG_HS_DEVICE_OTG_HS_DIEPINT3_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_BERR, Babble error interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT3_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_NAK, NAK interrupt

\ OTG_HS_DEVICE_OTG_HS_DIEPINT4 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPINT4_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT4_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT4_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TOC, Timeout condition
: OTG_HS_DEVICE_OTG_HS_DIEPINT4_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_ITTXFE, IN token received when TxFIFO is empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT4_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_INEPNE, IN endpoint NAK effective
: OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFE, Transmit FIFO empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFIFOUDRN, Transmit Fifo Underrun
: OTG_HS_DEVICE_OTG_HS_DIEPINT4_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_BNA, Buffer not available interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT4_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_PKTDRPSTS, Packet dropped status
: OTG_HS_DEVICE_OTG_HS_DIEPINT4_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_BERR, Babble error interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT4_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_NAK, NAK interrupt

\ OTG_HS_DEVICE_OTG_HS_DIEPINT5 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPINT5_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT5_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT5_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TOC, Timeout condition
: OTG_HS_DEVICE_OTG_HS_DIEPINT5_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_ITTXFE, IN token received when TxFIFO is empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT5_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_INEPNE, IN endpoint NAK effective
: OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFE, Transmit FIFO empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFIFOUDRN, Transmit Fifo Underrun
: OTG_HS_DEVICE_OTG_HS_DIEPINT5_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_BNA, Buffer not available interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT5_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_PKTDRPSTS, Packet dropped status
: OTG_HS_DEVICE_OTG_HS_DIEPINT5_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_BERR, Babble error interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT5_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_NAK, NAK interrupt

\ OTG_HS_DEVICE_OTG_HS_DIEPINT6 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPINT6_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT6_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT6_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TOC, Timeout condition
: OTG_HS_DEVICE_OTG_HS_DIEPINT6_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_ITTXFE, IN token received when TxFIFO is empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT6_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_INEPNE, IN endpoint NAK effective
: OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFE, Transmit FIFO empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFIFOUDRN, Transmit Fifo Underrun
: OTG_HS_DEVICE_OTG_HS_DIEPINT6_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_BNA, Buffer not available interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT6_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_PKTDRPSTS, Packet dropped status
: OTG_HS_DEVICE_OTG_HS_DIEPINT6_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_BERR, Babble error interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT6_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_NAK, NAK interrupt

\ OTG_HS_DEVICE_OTG_HS_DIEPINT7 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPINT7_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT7_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT7_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TOC, Timeout condition
: OTG_HS_DEVICE_OTG_HS_DIEPINT7_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_ITTXFE, IN token received when TxFIFO is empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT7_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_INEPNE, IN endpoint NAK effective
: OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFE, Transmit FIFO empty
: OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFIFOUDRN, Transmit Fifo Underrun
: OTG_HS_DEVICE_OTG_HS_DIEPINT7_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_BNA, Buffer not available interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT7_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_PKTDRPSTS, Packet dropped status
: OTG_HS_DEVICE_OTG_HS_DIEPINT7_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_BERR, Babble error interrupt
: OTG_HS_DEVICE_OTG_HS_DIEPINT7_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_NAK, NAK interrupt

\ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_XFRSIZ ( %bbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_PKTCNT ( %bb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_PKTCNT, Packet count

\ OTG_HS_DEVICE_OTG_HS_DIEPDMA1 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPDMA1_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPDMA1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPDMA1_DMAADDR, DMA address

\ OTG_HS_DEVICE_OTG_HS_DIEPDMA2 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPDMA2_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPDMA2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPDMA2_DMAADDR, DMA address

\ OTG_HS_DEVICE_OTG_HS_DIEPDMA3 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPDMA3_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPDMA3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPDMA3_DMAADDR, DMA address

\ OTG_HS_DEVICE_OTG_HS_DIEPDMA4 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPDMA4_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPDMA4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPDMA4_DMAADDR, DMA address

\ OTG_HS_DEVICE_OTG_HS_DIEPDMA5 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPDMA5_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPDMA5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPDMA5_DMAADDR, DMA address

\ OTG_HS_DEVICE_OTG_HS_DTXFSTS0 (read-only) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DTXFSTS0_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS0 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS0_INEPTFSAV, IN endpoint TxFIFO space avail

\ OTG_HS_DEVICE_OTG_HS_DTXFSTS1 (read-only) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DTXFSTS1_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS1 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS1_INEPTFSAV, IN endpoint TxFIFO space avail

\ OTG_HS_DEVICE_OTG_HS_DTXFSTS2 (read-only) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DTXFSTS2_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS2 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS2_INEPTFSAV, IN endpoint TxFIFO space avail

\ OTG_HS_DEVICE_OTG_HS_DTXFSTS3 (read-only) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DTXFSTS3_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS3 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS3_INEPTFSAV, IN endpoint TxFIFO space avail

\ OTG_HS_DEVICE_OTG_HS_DTXFSTS4 (read-only) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DTXFSTS4_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS4 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS4_INEPTFSAV, IN endpoint TxFIFO space avail

\ OTG_HS_DEVICE_OTG_HS_DTXFSTS5 (read-only) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DTXFSTS5_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS5 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS5_INEPTFSAV, IN endpoint TxFIFO space avail

\ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_MCNT, Multi count

\ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_MCNT, Multi count

\ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_MCNT, Multi count

\ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_MCNT, Multi count

\ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_MCNT, Multi count

\ OTG_HS_DEVICE_OTG_HS_DOEPCTL0 (multiple-access)  Reset:0x00008000
: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_MPSIZ ( %bb -- x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNPM, Snoop mode
: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DOEPCTL1 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EONUM_DPID, Even odd frame/Endpoint data PID
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNPM, Snoop mode
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SD0PID_SEVNFRM, Set DATA0 PID/Set even frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DOEPCTL2 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EONUM_DPID, Even odd frame/Endpoint data PID
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNPM, Snoop mode
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SD0PID_SEVNFRM, Set DATA0 PID/Set even frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DOEPCTL3 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EONUM_DPID, Even odd frame/Endpoint data PID
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNPM, Snoop mode
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SD0PID_SEVNFRM, Set DATA0 PID/Set even frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DOEPINT0 (read-write) Reset:0x00000080
: OTG_HS_DEVICE_OTG_HS_DOEPINT0_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT0_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT0_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_STUP, SETUP phase done
: OTG_HS_DEVICE_OTG_HS_DOEPINT0_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_OTEPDIS, OUT token received when endpoint disabled
: OTG_HS_DEVICE_OTG_HS_DOEPINT0_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_B2BSTUP, Back-to-back SETUP packets received
: OTG_HS_DEVICE_OTG_HS_DOEPINT0_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_NYET, NYET interrupt

\ OTG_HS_DEVICE_OTG_HS_DOEPINT1 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPINT1_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT1_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT1_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_STUP, SETUP phase done
: OTG_HS_DEVICE_OTG_HS_DOEPINT1_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_OTEPDIS, OUT token received when endpoint disabled
: OTG_HS_DEVICE_OTG_HS_DOEPINT1_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_B2BSTUP, Back-to-back SETUP packets received
: OTG_HS_DEVICE_OTG_HS_DOEPINT1_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_NYET, NYET interrupt

\ OTG_HS_DEVICE_OTG_HS_DOEPINT2 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPINT2_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT2_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT2_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_STUP, SETUP phase done
: OTG_HS_DEVICE_OTG_HS_DOEPINT2_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_OTEPDIS, OUT token received when endpoint disabled
: OTG_HS_DEVICE_OTG_HS_DOEPINT2_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_B2BSTUP, Back-to-back SETUP packets received
: OTG_HS_DEVICE_OTG_HS_DOEPINT2_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_NYET, NYET interrupt

\ OTG_HS_DEVICE_OTG_HS_DOEPINT3 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPINT3_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT3_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT3_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_STUP, SETUP phase done
: OTG_HS_DEVICE_OTG_HS_DOEPINT3_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_OTEPDIS, OUT token received when endpoint disabled
: OTG_HS_DEVICE_OTG_HS_DOEPINT3_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_B2BSTUP, Back-to-back SETUP packets received
: OTG_HS_DEVICE_OTG_HS_DOEPINT3_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_NYET, NYET interrupt

\ OTG_HS_DEVICE_OTG_HS_DOEPINT4 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPINT4_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT4_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT4_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_STUP, SETUP phase done
: OTG_HS_DEVICE_OTG_HS_DOEPINT4_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_OTEPDIS, OUT token received when endpoint disabled
: OTG_HS_DEVICE_OTG_HS_DOEPINT4_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_B2BSTUP, Back-to-back SETUP packets received
: OTG_HS_DEVICE_OTG_HS_DOEPINT4_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_NYET, NYET interrupt

\ OTG_HS_DEVICE_OTG_HS_DOEPINT5 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPINT5_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT5_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT5_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_STUP, SETUP phase done
: OTG_HS_DEVICE_OTG_HS_DOEPINT5_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_OTEPDIS, OUT token received when endpoint disabled
: OTG_HS_DEVICE_OTG_HS_DOEPINT5_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_B2BSTUP, Back-to-back SETUP packets received
: OTG_HS_DEVICE_OTG_HS_DOEPINT5_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_NYET, NYET interrupt

\ OTG_HS_DEVICE_OTG_HS_DOEPINT6 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPINT6_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT6_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT6_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_STUP, SETUP phase done
: OTG_HS_DEVICE_OTG_HS_DOEPINT6_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_OTEPDIS, OUT token received when endpoint disabled
: OTG_HS_DEVICE_OTG_HS_DOEPINT6_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_B2BSTUP, Back-to-back SETUP packets received
: OTG_HS_DEVICE_OTG_HS_DOEPINT6_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_NYET, NYET interrupt

\ OTG_HS_DEVICE_OTG_HS_DOEPINT7 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPINT7_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_XFRC, Transfer completed interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT7_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_EPDISD, Endpoint disabled interrupt
: OTG_HS_DEVICE_OTG_HS_DOEPINT7_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_STUP, SETUP phase done
: OTG_HS_DEVICE_OTG_HS_DOEPINT7_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_OTEPDIS, OUT token received when endpoint disabled
: OTG_HS_DEVICE_OTG_HS_DOEPINT7_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_B2BSTUP, Back-to-back SETUP packets received
: OTG_HS_DEVICE_OTG_HS_DOEPINT7_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_NYET, NYET interrupt

\ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_XFRSIZ ( %bbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_PKTCNT ( -- x addr ) 19 bit OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_STUPCNT, SETUP packet count

\ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_RXDPID_STUPCNT, Received data PID/SETUP packet count

\ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_RXDPID_STUPCNT, Received data PID/SETUP packet count

\ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_RXDPID_STUPCNT, Received data PID/SETUP packet count

\ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_RXDPID_STUPCNT, Received data PID/SETUP packet count

\ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_MCNT, Multi count

\ OTG_HS_DEVICE_OTG_HS_DTXFSTS6 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DTXFSTS6_INEPTFSAV ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DTXFSTS6 ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS6_INEPTFSAV, IN endpoint TxFIFO space avail

\ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_MCNT, Multi count

\ OTG_HS_DEVICE_OTG_HS_DTXFSTS7 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DTXFSTS7_INEPTFSAV ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DTXFSTS7 ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS7_INEPTFSAV, IN endpoint TxFIFO space avail

\ OTG_HS_DEVICE_OTG_HS_DOEPCTL4 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EONUM_DPID, Even odd frame/Endpoint data PID
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL4 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNPM, Snoop mode
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SD0PID_SEVNFRM, Set DATA0 PID/Set even frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DOEPCTL5 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EONUM_DPID, Even odd frame/Endpoint data PID
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL5 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNPM, Snoop mode
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SD0PID_SEVNFRM, Set DATA0 PID/Set even frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DOEPCTL6 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EONUM_DPID, Even odd frame/Endpoint data PID
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL6 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNPM, Snoop mode
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SD0PID_SEVNFRM, Set DATA0 PID/Set even frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DOEPCTL7 (multiple-access)  Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_MPSIZ, Maximum packet size
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_USBAEP, USB active endpoint
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EONUM_DPID, Even odd frame/Endpoint data PID
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL7 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_NAKSTS, NAK status
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPTYP, Endpoint type
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNPM, Snoop mode
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_Stall, STALL handshake
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_CNAK, Clear NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNAK, Set NAK
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SD0PID_SEVNFRM, Set DATA0 PID/Set even frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SODDFRM, Set odd frame
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPDIS, Endpoint disable
: OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPENA, Endpoint enable

\ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_RXDPID_STUPCNT, Received data PID/SETUP packet count

\ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_RXDPID_STUPCNT, Received data PID/SETUP packet count

\ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7 (read-write) Reset:0x0
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_XFRSIZ, Transfer size
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_PKTCNT, Packet count
: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_RXDPID_STUPCNT, Received data PID/SETUP packet count

\ OTG_HS_PWRCLK_OTG_HS_PCGCR (read-write) Reset:0x0
: OTG_HS_PWRCLK_OTG_HS_PCGCR_STPPCLK ( -- x addr ) 0 bit OTG_HS_PWRCLK_OTG_HS_PCGCR ; \ OTG_HS_PWRCLK_OTG_HS_PCGCR_STPPCLK, Stop PHY clock
: OTG_HS_PWRCLK_OTG_HS_PCGCR_GATEHCLK ( -- x addr ) 1 bit OTG_HS_PWRCLK_OTG_HS_PCGCR ; \ OTG_HS_PWRCLK_OTG_HS_PCGCR_GATEHCLK, Gate HCLK
: OTG_HS_PWRCLK_OTG_HS_PCGCR_PHYSUSP ( -- x addr ) 4 bit OTG_HS_PWRCLK_OTG_HS_PCGCR ; \ OTG_HS_PWRCLK_OTG_HS_PCGCR_PHYSUSP, PHY suspended

\ NVIC_ISER0 (read-write) Reset:0x00000000
: NVIC_ISER0_SETENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISER0 ; \ NVIC_ISER0_SETENA, SETENA

\ NVIC_ISER1 (read-write) Reset:0x00000000
: NVIC_ISER1_SETENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISER1 ; \ NVIC_ISER1_SETENA, SETENA

\ NVIC_ISER2 (read-write) Reset:0x00000000
: NVIC_ISER2_SETENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISER2 ; \ NVIC_ISER2_SETENA, SETENA

\ NVIC_ICER0 (read-write) Reset:0x00000000
: NVIC_ICER0_CLRENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICER0 ; \ NVIC_ICER0_CLRENA, CLRENA

\ NVIC_ICER1 (read-write) Reset:0x00000000
: NVIC_ICER1_CLRENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICER1 ; \ NVIC_ICER1_CLRENA, CLRENA

\ NVIC_ICER2 (read-write) Reset:0x00000000
: NVIC_ICER2_CLRENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICER2 ; \ NVIC_ICER2_CLRENA, CLRENA

\ NVIC_ISPR0 (read-write) Reset:0x00000000
: NVIC_ISPR0_SETPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISPR0 ; \ NVIC_ISPR0_SETPEND, SETPEND

\ NVIC_ISPR1 (read-write) Reset:0x00000000
: NVIC_ISPR1_SETPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISPR1 ; \ NVIC_ISPR1_SETPEND, SETPEND

\ NVIC_ISPR2 (read-write) Reset:0x00000000
: NVIC_ISPR2_SETPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISPR2 ; \ NVIC_ISPR2_SETPEND, SETPEND

\ NVIC_ICPR0 (read-write) Reset:0x00000000
: NVIC_ICPR0_CLRPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICPR0 ; \ NVIC_ICPR0_CLRPEND, CLRPEND

\ NVIC_ICPR1 (read-write) Reset:0x00000000
: NVIC_ICPR1_CLRPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICPR1 ; \ NVIC_ICPR1_CLRPEND, CLRPEND

\ NVIC_ICPR2 (read-write) Reset:0x00000000
: NVIC_ICPR2_CLRPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICPR2 ; \ NVIC_ICPR2_CLRPEND, CLRPEND

\ NVIC_IABR0 (read-only) Reset:0x00000000
: NVIC_IABR0_ACTIVE? ( --  x ) NVIC_IABR0 @ ; \ NVIC_IABR0_ACTIVE, ACTIVE

\ NVIC_IABR1 (read-only) Reset:0x00000000
: NVIC_IABR1_ACTIVE? ( --  x ) NVIC_IABR1 @ ; \ NVIC_IABR1_ACTIVE, ACTIVE

\ NVIC_IABR2 (read-only) Reset:0x00000000
: NVIC_IABR2_ACTIVE? ( --  x ) NVIC_IABR2 @ ; \ NVIC_IABR2_ACTIVE, ACTIVE

\ NVIC_IPR0 (read-write) Reset:0x00000000
: NVIC_IPR0_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR0 ; \ NVIC_IPR0_IPR_N0, IPR_N0
: NVIC_IPR0_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR0 ; \ NVIC_IPR0_IPR_N1, IPR_N1
: NVIC_IPR0_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR0 ; \ NVIC_IPR0_IPR_N2, IPR_N2
: NVIC_IPR0_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR0 ; \ NVIC_IPR0_IPR_N3, IPR_N3

\ NVIC_IPR1 (read-write) Reset:0x00000000
: NVIC_IPR1_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR1 ; \ NVIC_IPR1_IPR_N0, IPR_N0
: NVIC_IPR1_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR1 ; \ NVIC_IPR1_IPR_N1, IPR_N1
: NVIC_IPR1_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR1 ; \ NVIC_IPR1_IPR_N2, IPR_N2
: NVIC_IPR1_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR1 ; \ NVIC_IPR1_IPR_N3, IPR_N3

\ NVIC_IPR2 (read-write) Reset:0x00000000
: NVIC_IPR2_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR2 ; \ NVIC_IPR2_IPR_N0, IPR_N0
: NVIC_IPR2_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR2 ; \ NVIC_IPR2_IPR_N1, IPR_N1
: NVIC_IPR2_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR2 ; \ NVIC_IPR2_IPR_N2, IPR_N2
: NVIC_IPR2_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR2 ; \ NVIC_IPR2_IPR_N3, IPR_N3

\ NVIC_IPR3 (read-write) Reset:0x00000000
: NVIC_IPR3_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR3 ; \ NVIC_IPR3_IPR_N0, IPR_N0
: NVIC_IPR3_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR3 ; \ NVIC_IPR3_IPR_N1, IPR_N1
: NVIC_IPR3_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR3 ; \ NVIC_IPR3_IPR_N2, IPR_N2
: NVIC_IPR3_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR3 ; \ NVIC_IPR3_IPR_N3, IPR_N3

\ NVIC_IPR4 (read-write) Reset:0x00000000
: NVIC_IPR4_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR4 ; \ NVIC_IPR4_IPR_N0, IPR_N0
: NVIC_IPR4_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR4 ; \ NVIC_IPR4_IPR_N1, IPR_N1
: NVIC_IPR4_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR4 ; \ NVIC_IPR4_IPR_N2, IPR_N2
: NVIC_IPR4_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR4 ; \ NVIC_IPR4_IPR_N3, IPR_N3

\ NVIC_IPR5 (read-write) Reset:0x00000000
: NVIC_IPR5_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR5 ; \ NVIC_IPR5_IPR_N0, IPR_N0
: NVIC_IPR5_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR5 ; \ NVIC_IPR5_IPR_N1, IPR_N1
: NVIC_IPR5_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR5 ; \ NVIC_IPR5_IPR_N2, IPR_N2
: NVIC_IPR5_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR5 ; \ NVIC_IPR5_IPR_N3, IPR_N3

\ NVIC_IPR6 (read-write) Reset:0x00000000
: NVIC_IPR6_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR6 ; \ NVIC_IPR6_IPR_N0, IPR_N0
: NVIC_IPR6_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR6 ; \ NVIC_IPR6_IPR_N1, IPR_N1
: NVIC_IPR6_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR6 ; \ NVIC_IPR6_IPR_N2, IPR_N2
: NVIC_IPR6_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR6 ; \ NVIC_IPR6_IPR_N3, IPR_N3

\ NVIC_IPR7 (read-write) Reset:0x00000000
: NVIC_IPR7_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR7 ; \ NVIC_IPR7_IPR_N0, IPR_N0
: NVIC_IPR7_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR7 ; \ NVIC_IPR7_IPR_N1, IPR_N1
: NVIC_IPR7_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR7 ; \ NVIC_IPR7_IPR_N2, IPR_N2
: NVIC_IPR7_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR7 ; \ NVIC_IPR7_IPR_N3, IPR_N3

\ NVIC_IPR8 (read-write) Reset:0x00000000
: NVIC_IPR8_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR8 ; \ NVIC_IPR8_IPR_N0, IPR_N0
: NVIC_IPR8_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR8 ; \ NVIC_IPR8_IPR_N1, IPR_N1
: NVIC_IPR8_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR8 ; \ NVIC_IPR8_IPR_N2, IPR_N2
: NVIC_IPR8_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR8 ; \ NVIC_IPR8_IPR_N3, IPR_N3

\ NVIC_IPR9 (read-write) Reset:0x00000000
: NVIC_IPR9_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR9 ; \ NVIC_IPR9_IPR_N0, IPR_N0
: NVIC_IPR9_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR9 ; \ NVIC_IPR9_IPR_N1, IPR_N1
: NVIC_IPR9_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR9 ; \ NVIC_IPR9_IPR_N2, IPR_N2
: NVIC_IPR9_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR9 ; \ NVIC_IPR9_IPR_N3, IPR_N3

\ NVIC_IPR10 (read-write) Reset:0x00000000
: NVIC_IPR10_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR10 ; \ NVIC_IPR10_IPR_N0, IPR_N0
: NVIC_IPR10_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR10 ; \ NVIC_IPR10_IPR_N1, IPR_N1
: NVIC_IPR10_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR10 ; \ NVIC_IPR10_IPR_N2, IPR_N2
: NVIC_IPR10_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR10 ; \ NVIC_IPR10_IPR_N3, IPR_N3

\ NVIC_IPR11 (read-write) Reset:0x00000000
: NVIC_IPR11_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR11 ; \ NVIC_IPR11_IPR_N0, IPR_N0
: NVIC_IPR11_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR11 ; \ NVIC_IPR11_IPR_N1, IPR_N1
: NVIC_IPR11_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR11 ; \ NVIC_IPR11_IPR_N2, IPR_N2
: NVIC_IPR11_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR11 ; \ NVIC_IPR11_IPR_N3, IPR_N3

\ NVIC_IPR12 (read-write) Reset:0x00000000
: NVIC_IPR12_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR12 ; \ NVIC_IPR12_IPR_N0, IPR_N0
: NVIC_IPR12_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR12 ; \ NVIC_IPR12_IPR_N1, IPR_N1
: NVIC_IPR12_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR12 ; \ NVIC_IPR12_IPR_N2, IPR_N2
: NVIC_IPR12_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR12 ; \ NVIC_IPR12_IPR_N3, IPR_N3

\ NVIC_IPR13 (read-write) Reset:0x00000000
: NVIC_IPR13_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR13 ; \ NVIC_IPR13_IPR_N0, IPR_N0
: NVIC_IPR13_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR13 ; \ NVIC_IPR13_IPR_N1, IPR_N1
: NVIC_IPR13_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR13 ; \ NVIC_IPR13_IPR_N2, IPR_N2
: NVIC_IPR13_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR13 ; \ NVIC_IPR13_IPR_N3, IPR_N3

\ NVIC_IPR14 (read-write) Reset:0x00000000
: NVIC_IPR14_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR14 ; \ NVIC_IPR14_IPR_N0, IPR_N0
: NVIC_IPR14_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR14 ; \ NVIC_IPR14_IPR_N1, IPR_N1
: NVIC_IPR14_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR14 ; \ NVIC_IPR14_IPR_N2, IPR_N2
: NVIC_IPR14_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR14 ; \ NVIC_IPR14_IPR_N3, IPR_N3

\ NVIC_IPR15 (read-write) Reset:0x00000000
: NVIC_IPR15_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR15 ; \ NVIC_IPR15_IPR_N0, IPR_N0
: NVIC_IPR15_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR15 ; \ NVIC_IPR15_IPR_N1, IPR_N1
: NVIC_IPR15_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR15 ; \ NVIC_IPR15_IPR_N2, IPR_N2
: NVIC_IPR15_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR15 ; \ NVIC_IPR15_IPR_N3, IPR_N3

\ NVIC_IPR16 (read-write) Reset:0x00000000
: NVIC_IPR16_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR16 ; \ NVIC_IPR16_IPR_N0, IPR_N0
: NVIC_IPR16_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR16 ; \ NVIC_IPR16_IPR_N1, IPR_N1
: NVIC_IPR16_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR16 ; \ NVIC_IPR16_IPR_N2, IPR_N2
: NVIC_IPR16_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR16 ; \ NVIC_IPR16_IPR_N3, IPR_N3

\ NVIC_IPR17 (read-write) Reset:0x00000000
: NVIC_IPR17_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR17 ; \ NVIC_IPR17_IPR_N0, IPR_N0
: NVIC_IPR17_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR17 ; \ NVIC_IPR17_IPR_N1, IPR_N1
: NVIC_IPR17_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR17 ; \ NVIC_IPR17_IPR_N2, IPR_N2
: NVIC_IPR17_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR17 ; \ NVIC_IPR17_IPR_N3, IPR_N3

\ NVIC_IPR18 (read-write) Reset:0x00000000
: NVIC_IPR18_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR18 ; \ NVIC_IPR18_IPR_N0, IPR_N0
: NVIC_IPR18_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR18 ; \ NVIC_IPR18_IPR_N1, IPR_N1
: NVIC_IPR18_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR18 ; \ NVIC_IPR18_IPR_N2, IPR_N2
: NVIC_IPR18_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR18 ; \ NVIC_IPR18_IPR_N3, IPR_N3

\ NVIC_IPR19 (read-write) Reset:0x00000000
: NVIC_IPR19_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR19 ; \ NVIC_IPR19_IPR_N0, IPR_N0
: NVIC_IPR19_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR19 ; \ NVIC_IPR19_IPR_N1, IPR_N1
: NVIC_IPR19_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR19 ; \ NVIC_IPR19_IPR_N2, IPR_N2
: NVIC_IPR19_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR19 ; \ NVIC_IPR19_IPR_N3, IPR_N3

\ NVIC_IPR20 (read-write) Reset:0x00000000
: NVIC_IPR20_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR20 ; \ NVIC_IPR20_IPR_N0, IPR_N0
: NVIC_IPR20_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR20 ; \ NVIC_IPR20_IPR_N1, IPR_N1
: NVIC_IPR20_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR20 ; \ NVIC_IPR20_IPR_N2, IPR_N2
: NVIC_IPR20_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR20 ; \ NVIC_IPR20_IPR_N3, IPR_N3

\ NVIC_IPR21 (read-write) Reset:0x00000000
: NVIC_IPR21_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR21 ; \ NVIC_IPR21_IPR_N0, IPR_N0
: NVIC_IPR21_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR21 ; \ NVIC_IPR21_IPR_N1, IPR_N1
: NVIC_IPR21_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR21 ; \ NVIC_IPR21_IPR_N2, IPR_N2
: NVIC_IPR21_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR21 ; \ NVIC_IPR21_IPR_N3, IPR_N3

\ NVIC_IPR22 (read-write) Reset:0x00000000
: NVIC_IPR22_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR22 ; \ NVIC_IPR22_IPR_N0, IPR_N0
: NVIC_IPR22_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR22 ; \ NVIC_IPR22_IPR_N1, IPR_N1
: NVIC_IPR22_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR22 ; \ NVIC_IPR22_IPR_N2, IPR_N2
: NVIC_IPR22_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR22 ; \ NVIC_IPR22_IPR_N3, IPR_N3

\ NVIC_IPR23 (read-write) Reset:0x00000000
: NVIC_IPR23_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR23 ; \ NVIC_IPR23_IPR_N0, IPR_N0
: NVIC_IPR23_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR23 ; \ NVIC_IPR23_IPR_N1, IPR_N1
: NVIC_IPR23_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR23 ; \ NVIC_IPR23_IPR_N2, IPR_N2
: NVIC_IPR23_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR23 ; \ NVIC_IPR23_IPR_N3, IPR_N3

\ NVIC_IPR24 (read-write) Reset:0x00000000
: NVIC_IPR24_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR24 ; \ NVIC_IPR24_IPR_N0, IPR_N0
: NVIC_IPR24_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR24 ; \ NVIC_IPR24_IPR_N1, IPR_N1
: NVIC_IPR24_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR24 ; \ NVIC_IPR24_IPR_N2, IPR_N2
: NVIC_IPR24_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR24 ; \ NVIC_IPR24_IPR_N3, IPR_N3

\ NVIC_IPR25 (read-write) Reset:0x00000000
: NVIC_IPR25_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR25 ; \ NVIC_IPR25_IPR_N0, IPR_N0
: NVIC_IPR25_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR25 ; \ NVIC_IPR25_IPR_N1, IPR_N1
: NVIC_IPR25_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR25 ; \ NVIC_IPR25_IPR_N2, IPR_N2
: NVIC_IPR25_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR25 ; \ NVIC_IPR25_IPR_N3, IPR_N3

\ MPU_MPU_TYPER (read-only) Reset:0X00000800
: MPU_MPU_TYPER_SEPARATE? ( --  1|0 ) 0 bit MPU_MPU_TYPER bit@ ; \ MPU_MPU_TYPER_SEPARATE, Separate flag
: MPU_MPU_TYPER_DREGION? ( --  x ) 8 lshift MPU_MPU_TYPER @ ; \ MPU_MPU_TYPER_DREGION, Number of MPU data regions
: MPU_MPU_TYPER_IREGION? ( --  x ) 16 lshift MPU_MPU_TYPER @ ; \ MPU_MPU_TYPER_IREGION, Number of MPU instruction regions

\ MPU_MPU_CTRL (read-only) Reset:0X00000000
: MPU_MPU_CTRL_ENABLE? ( --  1|0 ) 0 bit MPU_MPU_CTRL bit@ ; \ MPU_MPU_CTRL_ENABLE, Enables the MPU
: MPU_MPU_CTRL_HFNMIENA? ( --  1|0 ) 1 bit MPU_MPU_CTRL bit@ ; \ MPU_MPU_CTRL_HFNMIENA, Enables the operation of MPU during hard fault
: MPU_MPU_CTRL_PRIVDEFENA? ( --  1|0 ) 2 bit MPU_MPU_CTRL bit@ ; \ MPU_MPU_CTRL_PRIVDEFENA, Enable priviliged software access to default memory map

\ MPU_MPU_RNR (read-write) Reset:0X00000000
: MPU_MPU_RNR_REGION ( %bbbbbbbb -- x addr ) MPU_MPU_RNR ; \ MPU_MPU_RNR_REGION, MPU region

\ MPU_MPU_RBAR (read-write) Reset:0X00000000
: MPU_MPU_RBAR_REGION ( %bbbb -- x addr ) MPU_MPU_RBAR ; \ MPU_MPU_RBAR_REGION, MPU region field
: MPU_MPU_RBAR_VALID ( -- x addr ) 4 bit MPU_MPU_RBAR ; \ MPU_MPU_RBAR_VALID, MPU region number valid
: MPU_MPU_RBAR_ADDR x addr ) 5 lshift MPU_MPU_RBAR ; \ MPU_MPU_RBAR_ADDR, Region base address field

\ MPU_MPU_RASR (read-write) Reset:0X00000000
: MPU_MPU_RASR_ENABLE ( -- x addr ) 0 bit MPU_MPU_RASR ; \ MPU_MPU_RASR_ENABLE, Region enable bit.
: MPU_MPU_RASR_SIZE ( %bbbbb -- x addr ) 1 lshift MPU_MPU_RASR ; \ MPU_MPU_RASR_SIZE, Size of the MPU protection region
: MPU_MPU_RASR_SRD ( %bbbbbbbb -- x addr ) 8 lshift MPU_MPU_RASR ; \ MPU_MPU_RASR_SRD, Subregion disable bits
: MPU_MPU_RASR_B ( -- x addr ) 16 bit MPU_MPU_RASR ; \ MPU_MPU_RASR_B, memory attribute
: MPU_MPU_RASR_C ( -- x addr ) 17 bit MPU_MPU_RASR ; \ MPU_MPU_RASR_C, memory attribute
: MPU_MPU_RASR_S ( -- x addr ) 18 bit MPU_MPU_RASR ; \ MPU_MPU_RASR_S, Shareable memory attribute
: MPU_MPU_RASR_TEX ( %bbb -- x addr ) 19 lshift MPU_MPU_RASR ; \ MPU_MPU_RASR_TEX, memory attribute
: MPU_MPU_RASR_AP ( %bbb -- x addr ) 24 lshift MPU_MPU_RASR ; \ MPU_MPU_RASR_AP, Access permission
: MPU_MPU_RASR_XN ( -- x addr ) 28 bit MPU_MPU_RASR ; \ MPU_MPU_RASR_XN, Instruction access disable bit

\ STK_CSR (read-write) Reset:0X00000000
: STK_CSR_ENABLE ( -- x addr ) 0 bit STK_CSR ; \ STK_CSR_ENABLE, Counter enable
: STK_CSR_TICKINT ( -- x addr ) 1 bit STK_CSR ; \ STK_CSR_TICKINT, SysTick exception request enable
: STK_CSR_CLKSOURCE ( -- x addr ) 2 bit STK_CSR ; \ STK_CSR_CLKSOURCE, Clock source selection
: STK_CSR_COUNTFLAG ( -- x addr ) 16 bit STK_CSR ; \ STK_CSR_COUNTFLAG, COUNTFLAG

\ STK_RVR (read-write) Reset:0X00000000
: STK_RVR_RELOAD ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) STK_RVR ; \ STK_RVR_RELOAD, RELOAD value

\ STK_CVR (read-write) Reset:0X00000000
: STK_CVR_CURRENT ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) STK_CVR ; \ STK_CVR_CURRENT, Current counter value

\ STK_CALIB (read-write) Reset:0X00000000
: STK_CALIB_TENMS ( %bbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) STK_CALIB ; \ STK_CALIB_TENMS, Calibration value
: STK_CALIB_SKEW ( -- x addr ) 30 bit STK_CALIB ; \ STK_CALIB_SKEW, SKEW flag: Indicates whether the TENMS value is exact
: STK_CALIB_NOREF ( -- x addr ) 31 bit STK_CALIB ; \ STK_CALIB_NOREF, NOREF flag. Reads as zero

\ NVIC_STIR_STIR (read-write) Reset:0x00000000
: NVIC_STIR_STIR_INTID ( %bbbbbbbbb -- x addr ) NVIC_STIR_STIR ; \ NVIC_STIR_STIR_INTID, Software generated interrupt ID

\ FPU_CPACR_CPACR (read-write) Reset:0x0000000
: FPU_CPACR_CPACR_CP ( %bbbb -- x addr ) 20 lshift FPU_CPACR_CPACR ; \ FPU_CPACR_CPACR_CP, CP

\ SCB_ACTRL_ACTRL (read-write) Reset:0x00000000
: SCB_ACTRL_ACTRL_DISFOLD ( -- x addr ) 2 bit SCB_ACTRL_ACTRL ; \ SCB_ACTRL_ACTRL_DISFOLD, DISFOLD
: SCB_ACTRL_ACTRL_FPEXCODIS ( -- x addr ) 10 bit SCB_ACTRL_ACTRL ; \ SCB_ACTRL_ACTRL_FPEXCODIS, FPEXCODIS
: SCB_ACTRL_ACTRL_DISRAMODE ( -- x addr ) 11 bit SCB_ACTRL_ACTRL ; \ SCB_ACTRL_ACTRL_DISRAMODE, DISRAMODE
: SCB_ACTRL_ACTRL_DISITMATBFLUSH ( -- x addr ) 12 bit SCB_ACTRL_ACTRL ; \ SCB_ACTRL_ACTRL_DISITMATBFLUSH, DISITMATBFLUSH

\ FPU_FPCCR (read-write) Reset:0x00000000
: FPU_FPCCR_LSPACT ( -- x addr ) 0 bit FPU_FPCCR ; \ FPU_FPCCR_LSPACT, LSPACT
: FPU_FPCCR_USER ( -- x addr ) 1 bit FPU_FPCCR ; \ FPU_FPCCR_USER, USER
: FPU_FPCCR_THREAD ( -- x addr ) 3 bit FPU_FPCCR ; \ FPU_FPCCR_THREAD, THREAD
: FPU_FPCCR_HFRDY ( -- x addr ) 4 bit FPU_FPCCR ; \ FPU_FPCCR_HFRDY, HFRDY
: FPU_FPCCR_MMRDY ( -- x addr ) 5 bit FPU_FPCCR ; \ FPU_FPCCR_MMRDY, MMRDY
: FPU_FPCCR_BFRDY ( -- x addr ) 6 bit FPU_FPCCR ; \ FPU_FPCCR_BFRDY, BFRDY
: FPU_FPCCR_MONRDY ( -- x addr ) 8 bit FPU_FPCCR ; \ FPU_FPCCR_MONRDY, MONRDY
: FPU_FPCCR_LSPEN ( -- x addr ) 30 bit FPU_FPCCR ; \ FPU_FPCCR_LSPEN, LSPEN
: FPU_FPCCR_ASPEN ( -- x addr ) 31 bit FPU_FPCCR ; \ FPU_FPCCR_ASPEN, ASPEN

\ FPU_FPCAR (read-write) Reset:0x00000000
: FPU_FPCAR_ADDRESS x addr ) 3 lshift FPU_FPCAR ; \ FPU_FPCAR_ADDRESS, Location of unpopulated floating-point

\ FPU_FPSCR (read-write) Reset:0x00000000
: FPU_FPSCR_IOC ( -- x addr ) 0 bit FPU_FPSCR ; \ FPU_FPSCR_IOC, Invalid operation cumulative exception bit
: FPU_FPSCR_DZC ( -- x addr ) 1 bit FPU_FPSCR ; \ FPU_FPSCR_DZC, Division by zero cumulative exception bit.
: FPU_FPSCR_OFC ( -- x addr ) 2 bit FPU_FPSCR ; \ FPU_FPSCR_OFC, Overflow cumulative exception bit
: FPU_FPSCR_UFC ( -- x addr ) 3 bit FPU_FPSCR ; \ FPU_FPSCR_UFC, Underflow cumulative exception bit
: FPU_FPSCR_IXC ( -- x addr ) 4 bit FPU_FPSCR ; \ FPU_FPSCR_IXC, Inexact cumulative exception bit
: FPU_FPSCR_IDC ( -- x addr ) 7 bit FPU_FPSCR ; \ FPU_FPSCR_IDC, Input denormal cumulative exception bit.
: FPU_FPSCR_RMode ( %bb -- x addr ) 22 lshift FPU_FPSCR ; \ FPU_FPSCR_RMode, Rounding Mode control field
: FPU_FPSCR_FZ ( -- x addr ) 24 bit FPU_FPSCR ; \ FPU_FPSCR_FZ, Flush-to-zero mode control bit:
: FPU_FPSCR_DN ( -- x addr ) 25 bit FPU_FPSCR ; \ FPU_FPSCR_DN, Default NaN mode control bit
: FPU_FPSCR_AHP ( -- x addr ) 26 bit FPU_FPSCR ; \ FPU_FPSCR_AHP, Alternative half-precision control bit
: FPU_FPSCR_V ( -- x addr ) 28 bit FPU_FPSCR ; \ FPU_FPSCR_V, Overflow condition code flag
: FPU_FPSCR_C ( -- x addr ) 29 bit FPU_FPSCR ; \ FPU_FPSCR_C, Carry condition code flag
: FPU_FPSCR_Z ( -- x addr ) 30 bit FPU_FPSCR ; \ FPU_FPSCR_Z, Zero condition code flag
: FPU_FPSCR_N ( -- x addr ) 31 bit FPU_FPSCR ; \ FPU_FPSCR_N, Negative condition code flag

\ SCB_CPUID (read-only) Reset:0x410FC241
: SCB_CPUID_Revision? ( --  x ) SCB_CPUID @ ; \ SCB_CPUID_Revision, Revision number
: SCB_CPUID_PartNo? ( --  x ) 4 lshift SCB_CPUID @ ; \ SCB_CPUID_PartNo, Part number of the processor
: SCB_CPUID_Constant? ( --  x ) 16 lshift SCB_CPUID @ ; \ SCB_CPUID_Constant, Reads as $F
: SCB_CPUID_Variant? ( --  x ) 20 lshift SCB_CPUID @ ; \ SCB_CPUID_Variant, Variant number
: SCB_CPUID_Implementer? ( --  x ) 24 lshift SCB_CPUID @ ; \ SCB_CPUID_Implementer, Implementer code

\ SCB_ICSR (read-write) Reset:0x00000000
: SCB_ICSR_VECTACTIVE ( %bbbbbbbbb -- x addr ) SCB_ICSR ; \ SCB_ICSR_VECTACTIVE, Active vector
: SCB_ICSR_RETTOBASE ( -- x addr ) 11 bit SCB_ICSR ; \ SCB_ICSR_RETTOBASE, Return to base level
: SCB_ICSR_VECTPENDING ( %bbbbbbb -- x addr ) 12 lshift SCB_ICSR ; \ SCB_ICSR_VECTPENDING, Pending vector
: SCB_ICSR_ISRPENDING ( -- x addr ) 22 bit SCB_ICSR ; \ SCB_ICSR_ISRPENDING, Interrupt pending flag
: SCB_ICSR_PENDSTCLR ( -- x addr ) 25 bit SCB_ICSR ; \ SCB_ICSR_PENDSTCLR, SysTick exception clear-pending bit
: SCB_ICSR_PENDSTSET ( -- x addr ) 26 bit SCB_ICSR ; \ SCB_ICSR_PENDSTSET, SysTick exception set-pending bit
: SCB_ICSR_PENDSVCLR ( -- x addr ) 27 bit SCB_ICSR ; \ SCB_ICSR_PENDSVCLR, PendSV clear-pending bit
: SCB_ICSR_PENDSVSET ( -- x addr ) 28 bit SCB_ICSR ; \ SCB_ICSR_PENDSVSET, PendSV set-pending bit
: SCB_ICSR_NMIPENDSET ( -- x addr ) 31 bit SCB_ICSR ; \ SCB_ICSR_NMIPENDSET, NMI set-pending bit.

\ SCB_VTOR (read-write) Reset:0x00000000
: SCB_VTOR_TBLOFF x addr ) 9 lshift SCB_VTOR ; \ SCB_VTOR_TBLOFF, Vector table base offset field

\ SCB_AIRCR (read-write) Reset:0x00000000
: SCB_AIRCR_VECTRESET ( -- x addr ) 0 bit SCB_AIRCR ; \ SCB_AIRCR_VECTRESET, VECTRESET
: SCB_AIRCR_VECTCLRACTIVE ( -- x addr ) 1 bit SCB_AIRCR ; \ SCB_AIRCR_VECTCLRACTIVE, VECTCLRACTIVE
: SCB_AIRCR_SYSRESETREQ ( -- x addr ) 2 bit SCB_AIRCR ; \ SCB_AIRCR_SYSRESETREQ, SYSRESETREQ
: SCB_AIRCR_PRIGROUP ( %bbb -- x addr ) 8 lshift SCB_AIRCR ; \ SCB_AIRCR_PRIGROUP, PRIGROUP
: SCB_AIRCR_ENDIANESS ( -- x addr ) 15 bit SCB_AIRCR ; \ SCB_AIRCR_ENDIANESS, ENDIANESS
: SCB_AIRCR_VECTKEYSTAT ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift SCB_AIRCR ; \ SCB_AIRCR_VECTKEYSTAT, Register key

\ SCB_SCR (read-write) Reset:0x00000000
: SCB_SCR_SLEEPONEXIT ( -- x addr ) 1 bit SCB_SCR ; \ SCB_SCR_SLEEPONEXIT, SLEEPONEXIT
: SCB_SCR_SLEEPDEEP ( -- x addr ) 2 bit SCB_SCR ; \ SCB_SCR_SLEEPDEEP, SLEEPDEEP
: SCB_SCR_SEVEONPEND ( -- x addr ) 4 bit SCB_SCR ; \ SCB_SCR_SEVEONPEND, Send Event on Pending bit

\ SCB_CCR (read-write) Reset:0x00000000
: SCB_CCR_NONBASETHRDENA ( -- x addr ) 0 bit SCB_CCR ; \ SCB_CCR_NONBASETHRDENA, Configures how the processor enters Thread mode
: SCB_CCR_USERSETMPEND ( -- x addr ) 1 bit SCB_CCR ; \ SCB_CCR_USERSETMPEND, USERSETMPEND
: SCB_CCR_UNALIGN__TRP ( -- x addr ) 3 bit SCB_CCR ; \ SCB_CCR_UNALIGN__TRP, UNALIGN_ TRP
: SCB_CCR_DIV_0_TRP ( -- x addr ) 4 bit SCB_CCR ; \ SCB_CCR_DIV_0_TRP, DIV_0_TRP
: SCB_CCR_BFHFNMIGN ( -- x addr ) 8 bit SCB_CCR ; \ SCB_CCR_BFHFNMIGN, BFHFNMIGN
: SCB_CCR_STKALIGN ( -- x addr ) 9 bit SCB_CCR ; \ SCB_CCR_STKALIGN, STKALIGN
: SCB_CCR_DC ( -- x addr ) 16 bit SCB_CCR ; \ SCB_CCR_DC, DC
: SCB_CCR_IC ( -- x addr ) 17 bit SCB_CCR ; \ SCB_CCR_IC, IC
: SCB_CCR_BP ( -- x addr ) 18 bit SCB_CCR ; \ SCB_CCR_BP, BP

\ SCB_SHPR1 (read-write) Reset:0x00000000
: SCB_SHPR1_PRI_4 ( %bbbbbbbb -- x addr ) SCB_SHPR1 ; \ SCB_SHPR1_PRI_4, Priority of system handler 4
: SCB_SHPR1_PRI_5 ( %bbbbbbbb -- x addr ) 8 lshift SCB_SHPR1 ; \ SCB_SHPR1_PRI_5, Priority of system handler 5
: SCB_SHPR1_PRI_6 ( %bbbbbbbb -- x addr ) 16 lshift SCB_SHPR1 ; \ SCB_SHPR1_PRI_6, Priority of system handler 6

\ SCB_SHPR2 (read-write) Reset:0x00000000
: SCB_SHPR2_PRI_11 ( %bbbbbbbb -- x addr ) 24 lshift SCB_SHPR2 ; \ SCB_SHPR2_PRI_11, Priority of system handler 11

\ SCB_SHPR3 (read-write) Reset:0x00000000
: SCB_SHPR3_PRI_14 ( %bbbbbbbb -- x addr ) 16 lshift SCB_SHPR3 ; \ SCB_SHPR3_PRI_14, Priority of system handler 14
: SCB_SHPR3_PRI_15 ( %bbbbbbbb -- x addr ) 24 lshift SCB_SHPR3 ; \ SCB_SHPR3_PRI_15, Priority of system handler 15

\ SCB_SHCRS (read-write) Reset:0x00000000
: SCB_SHCRS_MEMFAULTACT ( -- x addr ) 0 bit SCB_SHCRS ; \ SCB_SHCRS_MEMFAULTACT, Memory management fault exception active bit
: SCB_SHCRS_BUSFAULTACT ( -- x addr ) 1 bit SCB_SHCRS ; \ SCB_SHCRS_BUSFAULTACT, Bus fault exception active bit
: SCB_SHCRS_USGFAULTACT ( -- x addr ) 3 bit SCB_SHCRS ; \ SCB_SHCRS_USGFAULTACT, Usage fault exception active bit
: SCB_SHCRS_SVCALLACT ( -- x addr ) 7 bit SCB_SHCRS ; \ SCB_SHCRS_SVCALLACT, SVC call active bit
: SCB_SHCRS_MONITORACT ( -- x addr ) 8 bit SCB_SHCRS ; \ SCB_SHCRS_MONITORACT, Debug monitor active bit
: SCB_SHCRS_PENDSVACT ( -- x addr ) 10 bit SCB_SHCRS ; \ SCB_SHCRS_PENDSVACT, PendSV exception active bit
: SCB_SHCRS_SYSTICKACT ( -- x addr ) 11 bit SCB_SHCRS ; \ SCB_SHCRS_SYSTICKACT, SysTick exception active bit
: SCB_SHCRS_USGFAULTPENDED ( -- x addr ) 12 bit SCB_SHCRS ; \ SCB_SHCRS_USGFAULTPENDED, Usage fault exception pending bit
: SCB_SHCRS_MEMFAULTPENDED ( -- x addr ) 13 bit SCB_SHCRS ; \ SCB_SHCRS_MEMFAULTPENDED, Memory management fault exception pending bit
: SCB_SHCRS_BUSFAULTPENDED ( -- x addr ) 14 bit SCB_SHCRS ; \ SCB_SHCRS_BUSFAULTPENDED, Bus fault exception pending bit
: SCB_SHCRS_SVCALLPENDED ( -- x addr ) 15 bit SCB_SHCRS ; \ SCB_SHCRS_SVCALLPENDED, SVC call pending bit
: SCB_SHCRS_MEMFAULTENA ( -- x addr ) 16 bit SCB_SHCRS ; \ SCB_SHCRS_MEMFAULTENA, Memory management fault enable bit
: SCB_SHCRS_BUSFAULTENA ( -- x addr ) 17 bit SCB_SHCRS ; \ SCB_SHCRS_BUSFAULTENA, Bus fault enable bit
: SCB_SHCRS_USGFAULTENA ( -- x addr ) 18 bit SCB_SHCRS ; \ SCB_SHCRS_USGFAULTENA, Usage fault enable bit

\ SCB_CFSR_UFSR_BFSR_MMFSR (read-write) Reset:0x00000000
: SCB_CFSR_UFSR_BFSR_MMFSR_IACCVIOL ( -- x addr ) 0 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_IACCVIOL, IACCVIOL
: SCB_CFSR_UFSR_BFSR_MMFSR_DACCVIOL ( -- x addr ) 1 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_DACCVIOL, DACCVIOL
: SCB_CFSR_UFSR_BFSR_MMFSR_MUNSTKERR ( -- x addr ) 3 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_MUNSTKERR, MUNSTKERR
: SCB_CFSR_UFSR_BFSR_MMFSR_MSTKERR ( -- x addr ) 4 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_MSTKERR, MSTKERR
: SCB_CFSR_UFSR_BFSR_MMFSR_MLSPERR ( -- x addr ) 5 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_MLSPERR, MLSPERR
: SCB_CFSR_UFSR_BFSR_MMFSR_MMARVALID ( -- x addr ) 7 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_MMARVALID, MMARVALID
: SCB_CFSR_UFSR_BFSR_MMFSR_IBUSERR ( -- x addr ) 8 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_IBUSERR, Instruction bus error
: SCB_CFSR_UFSR_BFSR_MMFSR_PRECISERR ( -- x addr ) 9 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_PRECISERR, Precise data bus error
: SCB_CFSR_UFSR_BFSR_MMFSR_IMPRECISERR ( -- x addr ) 10 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_IMPRECISERR, Imprecise data bus error
: SCB_CFSR_UFSR_BFSR_MMFSR_UNSTKERR ( -- x addr ) 11 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_UNSTKERR, Bus fault on unstacking for a return from exception
: SCB_CFSR_UFSR_BFSR_MMFSR_STKERR ( -- x addr ) 12 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_STKERR, Bus fault on stacking for exception entry
: SCB_CFSR_UFSR_BFSR_MMFSR_LSPERR ( -- x addr ) 13 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_LSPERR, Bus fault on floating-point lazy state preservation
: SCB_CFSR_UFSR_BFSR_MMFSR_BFARVALID ( -- x addr ) 15 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_BFARVALID, Bus Fault Address Register BFAR valid flag
: SCB_CFSR_UFSR_BFSR_MMFSR_UNDEFINSTR ( -- x addr ) 16 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_UNDEFINSTR, Undefined instruction usage fault
: SCB_CFSR_UFSR_BFSR_MMFSR_INVSTATE ( -- x addr ) 17 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_INVSTATE, Invalid state usage fault
: SCB_CFSR_UFSR_BFSR_MMFSR_INVPC ( -- x addr ) 18 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_INVPC, Invalid PC load usage fault
: SCB_CFSR_UFSR_BFSR_MMFSR_NOCP ( -- x addr ) 19 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_NOCP, No coprocessor usage fault.
: SCB_CFSR_UFSR_BFSR_MMFSR_UNALIGNED ( -- x addr ) 24 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_UNALIGNED, Unaligned access usage fault
: SCB_CFSR_UFSR_BFSR_MMFSR_DIVBYZERO ( -- x addr ) 25 bit SCB_CFSR_UFSR_BFSR_MMFSR ; \ SCB_CFSR_UFSR_BFSR_MMFSR_DIVBYZERO, Divide by zero usage fault

\ SCB_HFSR (read-write) Reset:0x00000000
: SCB_HFSR_VECTTBL ( -- x addr ) 1 bit SCB_HFSR ; \ SCB_HFSR_VECTTBL, Vector table hard fault
: SCB_HFSR_FORCED ( -- x addr ) 30 bit SCB_HFSR ; \ SCB_HFSR_FORCED, Forced hard fault
: SCB_HFSR_DEBUG_VT ( -- x addr ) 31 bit SCB_HFSR ; \ SCB_HFSR_DEBUG_VT, Reserved for Debug use

\ SCB_MMFAR (read-write) Reset:0x00000000
: SCB_MMFAR_ADDRESS ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SCB_MMFAR ; \ SCB_MMFAR_ADDRESS, Memory management fault address

\ SCB_BFAR (read-write) Reset:0x00000000
: SCB_BFAR_ADDRESS ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SCB_BFAR ; \ SCB_BFAR_ADDRESS, Bus fault address

\ PF_CLIDR (read-only) Reset:0x09000003
: PF_CLIDR_CL1? ( --  x ) PF_CLIDR @ ; \ PF_CLIDR_CL1, CL1
: PF_CLIDR_CL2? ( --  x ) 3 lshift PF_CLIDR @ ; \ PF_CLIDR_CL2, CL2
: PF_CLIDR_CL3? ( --  x ) 6 lshift PF_CLIDR @ ; \ PF_CLIDR_CL3, CL3
: PF_CLIDR_CL4? ( --  x ) 9 lshift PF_CLIDR @ ; \ PF_CLIDR_CL4, CL4
: PF_CLIDR_CL5? ( --  x ) 12 lshift PF_CLIDR @ ; \ PF_CLIDR_CL5, CL5
: PF_CLIDR_CL6? ( --  x ) 15 lshift PF_CLIDR @ ; \ PF_CLIDR_CL6, CL6
: PF_CLIDR_CL7? ( --  x ) 18 lshift PF_CLIDR @ ; \ PF_CLIDR_CL7, CL7
: PF_CLIDR_LoUIS? ( --  x ) 21 lshift PF_CLIDR @ ; \ PF_CLIDR_LoUIS, LoUIS
: PF_CLIDR_LoC? ( --  x ) 24 lshift PF_CLIDR @ ; \ PF_CLIDR_LoC, LoC
: PF_CLIDR_LoU? ( --  x ) 27 lshift PF_CLIDR @ ; \ PF_CLIDR_LoU, LoU

\ PF_CTR (read-only) Reset:0X8303C003
: PF_CTR__IminLine? ( --  x ) PF_CTR @ ; \ PF_CTR__IminLine, IminLine
: PF_CTR_DMinLine? ( --  x ) 16 lshift PF_CTR @ ; \ PF_CTR_DMinLine, DMinLine
: PF_CTR_ERG? ( --  x ) 20 lshift PF_CTR @ ; \ PF_CTR_ERG, ERG
: PF_CTR_CWG? ( --  x ) 24 lshift PF_CTR @ ; \ PF_CTR_CWG, CWG
: PF_CTR_Format? ( --  x ) 29 lshift PF_CTR @ ; \ PF_CTR_Format, Format

\ PF_CCSIDR (read-only) Reset:0X00000000
: PF_CCSIDR_LineSize? ( --  x ) PF_CCSIDR @ ; \ PF_CCSIDR_LineSize, LineSize
: PF_CCSIDR_Associativity? ( --  x ) 3 lshift PF_CCSIDR @ ; \ PF_CCSIDR_Associativity, Associativity
: PF_CCSIDR_NumSets? ( --  x ) 13 lshift PF_CCSIDR @ ; \ PF_CCSIDR_NumSets, NumSets
: PF_CCSIDR_WA? ( --  1|0 ) 28 bit PF_CCSIDR bit@ ; \ PF_CCSIDR_WA, WA
: PF_CCSIDR_RA? ( --  1|0 ) 29 bit PF_CCSIDR bit@ ; \ PF_CCSIDR_RA, RA
: PF_CCSIDR_WB? ( --  1|0 ) 30 bit PF_CCSIDR bit@ ; \ PF_CCSIDR_WB, WB
: PF_CCSIDR_WT? ( --  1|0 ) 31 bit PF_CCSIDR bit@ ; \ PF_CCSIDR_WT, WT

\ AC_ITCMCR (read-write) Reset:0X00000000
: AC_ITCMCR_EN ( -- x addr ) 0 bit AC_ITCMCR ; \ AC_ITCMCR_EN, EN
: AC_ITCMCR_RMW ( -- x addr ) 1 bit AC_ITCMCR ; \ AC_ITCMCR_RMW, RMW
: AC_ITCMCR_RETEN ( -- x addr ) 2 bit AC_ITCMCR ; \ AC_ITCMCR_RETEN, RETEN
: AC_ITCMCR_SZ ( %bbbb -- x addr ) 3 lshift AC_ITCMCR ; \ AC_ITCMCR_SZ, SZ

\ AC_DTCMCR (read-write) Reset:0X00000000
: AC_DTCMCR_EN ( -- x addr ) 0 bit AC_DTCMCR ; \ AC_DTCMCR_EN, EN
: AC_DTCMCR_RMW ( -- x addr ) 1 bit AC_DTCMCR ; \ AC_DTCMCR_RMW, RMW
: AC_DTCMCR_RETEN ( -- x addr ) 2 bit AC_DTCMCR ; \ AC_DTCMCR_RETEN, RETEN
: AC_DTCMCR_SZ ( %bbbb -- x addr ) 3 lshift AC_DTCMCR ; \ AC_DTCMCR_SZ, SZ

\ AC_AHBPCR (read-write) Reset:0X00000000
: AC_AHBPCR_EN ( -- x addr ) 0 bit AC_AHBPCR ; \ AC_AHBPCR_EN, EN
: AC_AHBPCR_SZ ( %bbb -- x addr ) 1 lshift AC_AHBPCR ; \ AC_AHBPCR_SZ, SZ

\ AC_CACR (read-write) Reset:0X00000000
: AC_CACR_SIWT ( -- x addr ) 0 bit AC_CACR ; \ AC_CACR_SIWT, SIWT
: AC_CACR_ECCEN ( -- x addr ) 1 bit AC_CACR ; \ AC_CACR_ECCEN, ECCEN
: AC_CACR_FORCEWT ( -- x addr ) 2 bit AC_CACR ; \ AC_CACR_FORCEWT, FORCEWT

\ AC_AHBSCR (read-write) Reset:0X00000000
: AC_AHBSCR_CTL ( %bb -- x addr ) AC_AHBSCR ; \ AC_AHBSCR_CTL, CTL
: AC_AHBSCR_TPRI ( %bbbbbbbbb -- x addr ) 2 lshift AC_AHBSCR ; \ AC_AHBSCR_TPRI, TPRI
: AC_AHBSCR_INITCOUNT ( %bbbbb -- x addr ) 11 lshift AC_AHBSCR ; \ AC_AHBSCR_INITCOUNT, INITCOUNT

\ AC_ABFSR (read-write) Reset:0X00000000
: AC_ABFSR_ITCM ( -- x addr ) 0 bit AC_ABFSR ; \ AC_ABFSR_ITCM, ITCM
: AC_ABFSR_DTCM ( -- x addr ) 1 bit AC_ABFSR ; \ AC_ABFSR_DTCM, DTCM
: AC_ABFSR_AHBP ( -- x addr ) 2 bit AC_ABFSR ; \ AC_ABFSR_AHBP, AHBP
: AC_ABFSR_AXIM ( -- x addr ) 3 bit AC_ABFSR ; \ AC_ABFSR_AXIM, AXIM
: AC_ABFSR_EPPB ( -- x addr ) 4 bit AC_ABFSR ; \ AC_ABFSR_EPPB, EPPB
: AC_ABFSR_AXIMTYPE ( %bb -- x addr ) 8 lshift AC_ABFSR ; \ AC_ABFSR_AXIMTYPE, AXIMTYPE
