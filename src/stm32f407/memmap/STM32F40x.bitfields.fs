\ Copyright (c) 2016-2020 Terry Porter <terry@tjporter.com.au>
\ Copyright (c) 2020-2022 Travis Bemann
\ 
\ Permission is hereby granted, free of charge, to any person obtaining a copy
\ of this software and associated documentation files (the "Software"), to deal
\ in the Software without restriction, including without limitation the rights
\ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
\ copies of the Software, and to permit persons to whom the Software is
\ furnished to do so, subject to the following conditions:
\ 
\ The above copyright notice and this permission notice shall be included in
\ all copies or substantial portions of the Software.
\ 
\ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
\ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
\ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
\ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
\ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
\ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
\ SOFTWARE.

compile-to-flash

begin-module bitfields

  execute-defined? use-RNG [if]
    \ RNG_CR (read-write) Reset:0x00000000
    : RNG_CR_IE ( -- x addr ) 3 bit RNG_CR ; \ RNG_CR_IE, Interrupt enable
    : RNG_CR_RNGEN ( -- x addr ) 2 bit RNG_CR ; \ RNG_CR_RNGEN, Random number generator  enable
  [then]

  execute-defined? use-RNG [if]
    \ RNG_SR (multiple-access)  Reset:0x00000000
    : RNG_SR_SEIS? ( -- 1|0 ) 6 bit RNG_SR bit@ ; \ RNG_SR_SEIS, Seed error interrupt  status
    : RNG_SR_CEIS? ( -- 1|0 ) 5 bit RNG_SR bit@ ; \ RNG_SR_CEIS, Clock error interrupt  status
    : RNG_SR_SECS? ( -- 1|0 ) 2 bit RNG_SR bit@ ; \ RNG_SR_SECS, Seed error current status
    : RNG_SR_CECS? ( -- 1|0 ) 1 bit RNG_SR bit@ ; \ RNG_SR_CECS, Clock error current status
    : RNG_SR_DRDY ( -- x addr ) 0 bit RNG_SR ; \ RNG_SR_DRDY, Data ready
  [then]

  [if]
    \ RNG_DR (read-only) Reset:0x00000000
    : RNG_DR_RNDATA? ( --  x ) RNG_DR @ ; \ RNG_DR_RNDATA, Random data
  [then]

  execute-defined? use-DCMI [if]
    \ DCMI_CR (read-write) Reset:0x0000
    : DCMI_CR_ENABLE ( -- x addr ) 14 bit DCMI_CR ; \ DCMI_CR_ENABLE, DCMI enable
    : DCMI_CR_EDM ( %bb -- x addr ) 10 lshift DCMI_CR ; \ DCMI_CR_EDM, Extended data mode
    : DCMI_CR_FCRC ( %bb -- x addr ) 8 lshift DCMI_CR ; \ DCMI_CR_FCRC, Frame capture rate control
    : DCMI_CR_VSPOL ( -- x addr ) 7 bit DCMI_CR ; \ DCMI_CR_VSPOL, Vertical synchronization  polarity
    : DCMI_CR_HSPOL ( -- x addr ) 6 bit DCMI_CR ; \ DCMI_CR_HSPOL, Horizontal synchronization  polarity
    : DCMI_CR_PCKPOL ( -- x addr ) 5 bit DCMI_CR ; \ DCMI_CR_PCKPOL, Pixel clock polarity
    : DCMI_CR_ESS ( -- x addr ) 4 bit DCMI_CR ; \ DCMI_CR_ESS, Embedded synchronization  select
    : DCMI_CR_JPEG ( -- x addr ) 3 bit DCMI_CR ; \ DCMI_CR_JPEG, JPEG format
    : DCMI_CR_CROP ( -- x addr ) 2 bit DCMI_CR ; \ DCMI_CR_CROP, Crop feature
    : DCMI_CR_CM ( -- x addr ) 1 bit DCMI_CR ; \ DCMI_CR_CM, Capture mode
    : DCMI_CR_CAPTURE ( -- x addr ) 0 bit DCMI_CR ; \ DCMI_CR_CAPTURE, Capture enable
  [then]

  [if]
    \ DCMI_SR (read-only) Reset:0x0000
    : DCMI_SR_FNE? ( --  1|0 ) 2 bit DCMI_SR bit@ ; \ DCMI_SR_FNE, FIFO not empty
    : DCMI_SR_VSYNC? ( --  1|0 ) 1 bit DCMI_SR bit@ ; \ DCMI_SR_VSYNC, VSYNC
    : DCMI_SR_HSYNC? ( --  1|0 ) 0 bit DCMI_SR bit@ ; \ DCMI_SR_HSYNC, HSYNC
  [then]

  execute-defined? use-DCMI [if]
    \ DCMI_RIS (read-only) Reset:0x0000
    : DCMI_RIS_LINE_RIS? ( --  1|0 ) 4 bit DCMI_RIS bit@ ; \ DCMI_RIS_LINE_RIS, Line raw interrupt status
    : DCMI_RIS_VSYNC_RIS? ( --  1|0 ) 3 bit DCMI_RIS bit@ ; \ DCMI_RIS_VSYNC_RIS, VSYNC raw interrupt status
    : DCMI_RIS_ERR_RIS? ( --  1|0 ) 2 bit DCMI_RIS bit@ ; \ DCMI_RIS_ERR_RIS, Synchronization error raw interrupt  status
    : DCMI_RIS_OVR_RIS? ( --  1|0 ) 1 bit DCMI_RIS bit@ ; \ DCMI_RIS_OVR_RIS, Overrun raw interrupt  status
    : DCMI_RIS_FRAME_RIS? ( --  1|0 ) 0 bit DCMI_RIS bit@ ; \ DCMI_RIS_FRAME_RIS, Capture complete raw interrupt  status
  [then]

  [if]
    \ DCMI_IER (read-write) Reset:0x0000
    : DCMI_IER_LINE_IE ( -- x addr ) 4 bit DCMI_IER ; \ DCMI_IER_LINE_IE, Line interrupt enable
    : DCMI_IER_VSYNC_IE ( -- x addr ) 3 bit DCMI_IER ; \ DCMI_IER_VSYNC_IE, VSYNC interrupt enable
    : DCMI_IER_ERR_IE ( -- x addr ) 2 bit DCMI_IER ; \ DCMI_IER_ERR_IE, Synchronization error interrupt  enable
    : DCMI_IER_OVR_IE ( -- x addr ) 1 bit DCMI_IER ; \ DCMI_IER_OVR_IE, Overrun interrupt enable
    : DCMI_IER_FRAME_IE ( -- x addr ) 0 bit DCMI_IER ; \ DCMI_IER_FRAME_IE, Capture complete interrupt  enable
  [then]

  execute-defined? use-DCMI [if]
    \ DCMI_MIS (read-only) Reset:0x0000
    : DCMI_MIS_LINE_MIS? ( --  1|0 ) 4 bit DCMI_MIS bit@ ; \ DCMI_MIS_LINE_MIS, Line masked interrupt  status
    : DCMI_MIS_VSYNC_MIS? ( --  1|0 ) 3 bit DCMI_MIS bit@ ; \ DCMI_MIS_VSYNC_MIS, VSYNC masked interrupt  status
    : DCMI_MIS_ERR_MIS? ( --  1|0 ) 2 bit DCMI_MIS bit@ ; \ DCMI_MIS_ERR_MIS, Synchronization error masked interrupt  status
    : DCMI_MIS_OVR_MIS? ( --  1|0 ) 1 bit DCMI_MIS bit@ ; \ DCMI_MIS_OVR_MIS, Overrun masked interrupt  status
    : DCMI_MIS_FRAME_MIS? ( --  1|0 ) 0 bit DCMI_MIS bit@ ; \ DCMI_MIS_FRAME_MIS, Capture complete masked interrupt  status
  [then]

  [if]
    \ DCMI_ICR (write-only) Reset:0x0000
    : DCMI_ICR_LINE_ISC ( -- x addr ) 4 bit DCMI_ICR ; \ DCMI_ICR_LINE_ISC, line interrupt status  clear
    : DCMI_ICR_VSYNC_ISC ( -- x addr ) 3 bit DCMI_ICR ; \ DCMI_ICR_VSYNC_ISC, Vertical synch interrupt status  clear
    : DCMI_ICR_ERR_ISC ( -- x addr ) 2 bit DCMI_ICR ; \ DCMI_ICR_ERR_ISC, Synchronization error interrupt status  clear
    : DCMI_ICR_OVR_ISC ( -- x addr ) 1 bit DCMI_ICR ; \ DCMI_ICR_OVR_ISC, Overrun interrupt status  clear
    : DCMI_ICR_FRAME_ISC ( -- x addr ) 0 bit DCMI_ICR ; \ DCMI_ICR_FRAME_ISC, Capture complete interrupt status  clear
  [then]

  execute-defined? use-DCMI [if]
    \ DCMI_ESCR (read-write) Reset:0x0000
    : DCMI_ESCR_FEC ( %bbbbbbbb -- x addr ) 24 lshift DCMI_ESCR ; \ DCMI_ESCR_FEC, Frame end delimiter code
    : DCMI_ESCR_LEC ( %bbbbbbbb -- x addr ) 16 lshift DCMI_ESCR ; \ DCMI_ESCR_LEC, Line end delimiter code
    : DCMI_ESCR_LSC ( %bbbbbbbb -- x addr ) 8 lshift DCMI_ESCR ; \ DCMI_ESCR_LSC, Line start delimiter code
    : DCMI_ESCR_FSC ( %bbbbbbbb -- x addr ) DCMI_ESCR ; \ DCMI_ESCR_FSC, Frame start delimiter code
  [then]

  [if]
    \ DCMI_ESUR (read-write) Reset:0x0000
    : DCMI_ESUR_FEU ( %bbbbbbbb -- x addr ) 24 lshift DCMI_ESUR ; \ DCMI_ESUR_FEU, Frame end delimiter unmask
    : DCMI_ESUR_LEU ( %bbbbbbbb -- x addr ) 16 lshift DCMI_ESUR ; \ DCMI_ESUR_LEU, Line end delimiter unmask
    : DCMI_ESUR_LSU ( %bbbbbbbb -- x addr ) 8 lshift DCMI_ESUR ; \ DCMI_ESUR_LSU, Line start delimiter  unmask
    : DCMI_ESUR_FSU ( %bbbbbbbb -- x addr ) DCMI_ESUR ; \ DCMI_ESUR_FSU, Frame start delimiter  unmask
  [then]

  execute-defined? use-DCMI [if]
    \ DCMI_CWSTRT (read-write) Reset:0x0000
    : DCMI_CWSTRT_VST x addr ) 16 lshift DCMI_CWSTRT ; \ DCMI_CWSTRT_VST, Vertical start line count
    : DCMI_CWSTRT_HOFFCNT ( %bbbbbbbbbbbbbb -- x addr ) DCMI_CWSTRT ; \ DCMI_CWSTRT_HOFFCNT, Horizontal offset count
  [then]

  [if]
    \ DCMI_CWSIZE (read-write) Reset:0x0000
    : DCMI_CWSIZE_VLINE ( %bbbbbbbbbbbbbb -- x addr ) 16 lshift DCMI_CWSIZE ; \ DCMI_CWSIZE_VLINE, Vertical line count
    : DCMI_CWSIZE_CAPCNT ( %bbbbbbbbbbbbbb -- x addr ) DCMI_CWSIZE ; \ DCMI_CWSIZE_CAPCNT, Capture count
  [then]

  execute-defined? use-DCMI [if]
    \ DCMI_DR (read-only) Reset:0x0000
    : DCMI_DR_Byte3? ( --  x ) 24 lshift DCMI_DR @ ; \ DCMI_DR_Byte3, Data byte 3
    : DCMI_DR_Byte2? ( --  x ) 16 lshift DCMI_DR @ ; \ DCMI_DR_Byte2, Data byte 2
    : DCMI_DR_Byte1? ( --  x ) 8 lshift DCMI_DR @ ; \ DCMI_DR_Byte1, Data byte 1
    : DCMI_DR_Byte0? ( --  x ) DCMI_DR @ ; \ DCMI_DR_Byte0, Data byte 0
  [then]

  [if]
    \ FSMC_BCR1 (read-write) Reset:0x000030D0
    : FSMC_BCR1_CBURSTRW ( -- x addr ) 19 bit FSMC_BCR1 ; \ FSMC_BCR1_CBURSTRW, CBURSTRW
    : FSMC_BCR1_ASYNCWAIT ( -- x addr ) 15 bit FSMC_BCR1 ; \ FSMC_BCR1_ASYNCWAIT, ASYNCWAIT
    : FSMC_BCR1_EXTMOD ( -- x addr ) 14 bit FSMC_BCR1 ; \ FSMC_BCR1_EXTMOD, EXTMOD
    : FSMC_BCR1_WAITEN ( -- x addr ) 13 bit FSMC_BCR1 ; \ FSMC_BCR1_WAITEN, WAITEN
    : FSMC_BCR1_WREN ( -- x addr ) 12 bit FSMC_BCR1 ; \ FSMC_BCR1_WREN, WREN
    : FSMC_BCR1_WAITCFG ( -- x addr ) 11 bit FSMC_BCR1 ; \ FSMC_BCR1_WAITCFG, WAITCFG
    : FSMC_BCR1_WAITPOL ( -- x addr ) 9 bit FSMC_BCR1 ; \ FSMC_BCR1_WAITPOL, WAITPOL
    : FSMC_BCR1_BURSTEN ( -- x addr ) 8 bit FSMC_BCR1 ; \ FSMC_BCR1_BURSTEN, BURSTEN
    : FSMC_BCR1_FACCEN ( -- x addr ) 6 bit FSMC_BCR1 ; \ FSMC_BCR1_FACCEN, FACCEN
    : FSMC_BCR1_MWID ( %bb -- x addr ) 4 lshift FSMC_BCR1 ; \ FSMC_BCR1_MWID, MWID
    : FSMC_BCR1_MTYP ( %bb -- x addr ) 2 lshift FSMC_BCR1 ; \ FSMC_BCR1_MTYP, MTYP
    : FSMC_BCR1_MUXEN ( -- x addr ) 1 bit FSMC_BCR1 ; \ FSMC_BCR1_MUXEN, MUXEN
    : FSMC_BCR1_MBKEN ( -- x addr ) 0 bit FSMC_BCR1 ; \ FSMC_BCR1_MBKEN, MBKEN
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_BTR1 (read-write) Reset:0xFFFFFFFF
    : FSMC_BTR1_ACCMOD ( %bb -- x addr ) 28 lshift FSMC_BTR1 ; \ FSMC_BTR1_ACCMOD, ACCMOD
    : FSMC_BTR1_DATLAT ( %bbbb -- x addr ) 24 lshift FSMC_BTR1 ; \ FSMC_BTR1_DATLAT, DATLAT
    : FSMC_BTR1_CLKDIV ( %bbbb -- x addr ) 20 lshift FSMC_BTR1 ; \ FSMC_BTR1_CLKDIV, CLKDIV
    : FSMC_BTR1_BUSTURN ( %bbbb -- x addr ) 16 lshift FSMC_BTR1 ; \ FSMC_BTR1_BUSTURN, BUSTURN
    : FSMC_BTR1_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FSMC_BTR1 ; \ FSMC_BTR1_DATAST, DATAST
    : FSMC_BTR1_ADDHLD ( %bbbb -- x addr ) 4 lshift FSMC_BTR1 ; \ FSMC_BTR1_ADDHLD, ADDHLD
    : FSMC_BTR1_ADDSET ( %bbbb -- x addr ) FSMC_BTR1 ; \ FSMC_BTR1_ADDSET, ADDSET
  [then]

  [if]
    \ FSMC_BCR2 (read-write) Reset:0x000030D0
    : FSMC_BCR2_CBURSTRW ( -- x addr ) 19 bit FSMC_BCR2 ; \ FSMC_BCR2_CBURSTRW, CBURSTRW
    : FSMC_BCR2_ASYNCWAIT ( -- x addr ) 15 bit FSMC_BCR2 ; \ FSMC_BCR2_ASYNCWAIT, ASYNCWAIT
    : FSMC_BCR2_EXTMOD ( -- x addr ) 14 bit FSMC_BCR2 ; \ FSMC_BCR2_EXTMOD, EXTMOD
    : FSMC_BCR2_WAITEN ( -- x addr ) 13 bit FSMC_BCR2 ; \ FSMC_BCR2_WAITEN, WAITEN
    : FSMC_BCR2_WREN ( -- x addr ) 12 bit FSMC_BCR2 ; \ FSMC_BCR2_WREN, WREN
    : FSMC_BCR2_WAITCFG ( -- x addr ) 11 bit FSMC_BCR2 ; \ FSMC_BCR2_WAITCFG, WAITCFG
    : FSMC_BCR2_WRAPMOD ( -- x addr ) 10 bit FSMC_BCR2 ; \ FSMC_BCR2_WRAPMOD, WRAPMOD
    : FSMC_BCR2_WAITPOL ( -- x addr ) 9 bit FSMC_BCR2 ; \ FSMC_BCR2_WAITPOL, WAITPOL
    : FSMC_BCR2_BURSTEN ( -- x addr ) 8 bit FSMC_BCR2 ; \ FSMC_BCR2_BURSTEN, BURSTEN
    : FSMC_BCR2_FACCEN ( -- x addr ) 6 bit FSMC_BCR2 ; \ FSMC_BCR2_FACCEN, FACCEN
    : FSMC_BCR2_MWID ( %bb -- x addr ) 4 lshift FSMC_BCR2 ; \ FSMC_BCR2_MWID, MWID
    : FSMC_BCR2_MTYP ( %bb -- x addr ) 2 lshift FSMC_BCR2 ; \ FSMC_BCR2_MTYP, MTYP
    : FSMC_BCR2_MUXEN ( -- x addr ) 1 bit FSMC_BCR2 ; \ FSMC_BCR2_MUXEN, MUXEN
    : FSMC_BCR2_MBKEN ( -- x addr ) 0 bit FSMC_BCR2 ; \ FSMC_BCR2_MBKEN, MBKEN
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_BTR2 (read-write) Reset:0xFFFFFFFF
    : FSMC_BTR2_ACCMOD ( %bb -- x addr ) 28 lshift FSMC_BTR2 ; \ FSMC_BTR2_ACCMOD, ACCMOD
    : FSMC_BTR2_DATLAT ( %bbbb -- x addr ) 24 lshift FSMC_BTR2 ; \ FSMC_BTR2_DATLAT, DATLAT
    : FSMC_BTR2_CLKDIV ( %bbbb -- x addr ) 20 lshift FSMC_BTR2 ; \ FSMC_BTR2_CLKDIV, CLKDIV
    : FSMC_BTR2_BUSTURN ( %bbbb -- x addr ) 16 lshift FSMC_BTR2 ; \ FSMC_BTR2_BUSTURN, BUSTURN
    : FSMC_BTR2_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FSMC_BTR2 ; \ FSMC_BTR2_DATAST, DATAST
    : FSMC_BTR2_ADDHLD ( %bbbb -- x addr ) 4 lshift FSMC_BTR2 ; \ FSMC_BTR2_ADDHLD, ADDHLD
    : FSMC_BTR2_ADDSET ( %bbbb -- x addr ) FSMC_BTR2 ; \ FSMC_BTR2_ADDSET, ADDSET
  [then]

  [if]
    \ FSMC_BCR3 (read-write) Reset:0x000030D0
    : FSMC_BCR3_CBURSTRW ( -- x addr ) 19 bit FSMC_BCR3 ; \ FSMC_BCR3_CBURSTRW, CBURSTRW
    : FSMC_BCR3_ASYNCWAIT ( -- x addr ) 15 bit FSMC_BCR3 ; \ FSMC_BCR3_ASYNCWAIT, ASYNCWAIT
    : FSMC_BCR3_EXTMOD ( -- x addr ) 14 bit FSMC_BCR3 ; \ FSMC_BCR3_EXTMOD, EXTMOD
    : FSMC_BCR3_WAITEN ( -- x addr ) 13 bit FSMC_BCR3 ; \ FSMC_BCR3_WAITEN, WAITEN
    : FSMC_BCR3_WREN ( -- x addr ) 12 bit FSMC_BCR3 ; \ FSMC_BCR3_WREN, WREN
    : FSMC_BCR3_WAITCFG ( -- x addr ) 11 bit FSMC_BCR3 ; \ FSMC_BCR3_WAITCFG, WAITCFG
    : FSMC_BCR3_WRAPMOD ( -- x addr ) 10 bit FSMC_BCR3 ; \ FSMC_BCR3_WRAPMOD, WRAPMOD
    : FSMC_BCR3_WAITPOL ( -- x addr ) 9 bit FSMC_BCR3 ; \ FSMC_BCR3_WAITPOL, WAITPOL
    : FSMC_BCR3_BURSTEN ( -- x addr ) 8 bit FSMC_BCR3 ; \ FSMC_BCR3_BURSTEN, BURSTEN
    : FSMC_BCR3_FACCEN ( -- x addr ) 6 bit FSMC_BCR3 ; \ FSMC_BCR3_FACCEN, FACCEN
    : FSMC_BCR3_MWID ( %bb -- x addr ) 4 lshift FSMC_BCR3 ; \ FSMC_BCR3_MWID, MWID
    : FSMC_BCR3_MTYP ( %bb -- x addr ) 2 lshift FSMC_BCR3 ; \ FSMC_BCR3_MTYP, MTYP
    : FSMC_BCR3_MUXEN ( -- x addr ) 1 bit FSMC_BCR3 ; \ FSMC_BCR3_MUXEN, MUXEN
    : FSMC_BCR3_MBKEN ( -- x addr ) 0 bit FSMC_BCR3 ; \ FSMC_BCR3_MBKEN, MBKEN
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_BTR3 (read-write) Reset:0xFFFFFFFF
    : FSMC_BTR3_ACCMOD ( %bb -- x addr ) 28 lshift FSMC_BTR3 ; \ FSMC_BTR3_ACCMOD, ACCMOD
    : FSMC_BTR3_DATLAT ( %bbbb -- x addr ) 24 lshift FSMC_BTR3 ; \ FSMC_BTR3_DATLAT, DATLAT
    : FSMC_BTR3_CLKDIV ( %bbbb -- x addr ) 20 lshift FSMC_BTR3 ; \ FSMC_BTR3_CLKDIV, CLKDIV
    : FSMC_BTR3_BUSTURN ( %bbbb -- x addr ) 16 lshift FSMC_BTR3 ; \ FSMC_BTR3_BUSTURN, BUSTURN
    : FSMC_BTR3_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FSMC_BTR3 ; \ FSMC_BTR3_DATAST, DATAST
    : FSMC_BTR3_ADDHLD ( %bbbb -- x addr ) 4 lshift FSMC_BTR3 ; \ FSMC_BTR3_ADDHLD, ADDHLD
    : FSMC_BTR3_ADDSET ( %bbbb -- x addr ) FSMC_BTR3 ; \ FSMC_BTR3_ADDSET, ADDSET
  [then]

  [if]
    \ FSMC_BCR4 (read-write) Reset:0x000030D0
    : FSMC_BCR4_CBURSTRW ( -- x addr ) 19 bit FSMC_BCR4 ; \ FSMC_BCR4_CBURSTRW, CBURSTRW
    : FSMC_BCR4_ASYNCWAIT ( -- x addr ) 15 bit FSMC_BCR4 ; \ FSMC_BCR4_ASYNCWAIT, ASYNCWAIT
    : FSMC_BCR4_EXTMOD ( -- x addr ) 14 bit FSMC_BCR4 ; \ FSMC_BCR4_EXTMOD, EXTMOD
    : FSMC_BCR4_WAITEN ( -- x addr ) 13 bit FSMC_BCR4 ; \ FSMC_BCR4_WAITEN, WAITEN
    : FSMC_BCR4_WREN ( -- x addr ) 12 bit FSMC_BCR4 ; \ FSMC_BCR4_WREN, WREN
    : FSMC_BCR4_WAITCFG ( -- x addr ) 11 bit FSMC_BCR4 ; \ FSMC_BCR4_WAITCFG, WAITCFG
    : FSMC_BCR4_WRAPMOD ( -- x addr ) 10 bit FSMC_BCR4 ; \ FSMC_BCR4_WRAPMOD, WRAPMOD
    : FSMC_BCR4_WAITPOL ( -- x addr ) 9 bit FSMC_BCR4 ; \ FSMC_BCR4_WAITPOL, WAITPOL
    : FSMC_BCR4_BURSTEN ( -- x addr ) 8 bit FSMC_BCR4 ; \ FSMC_BCR4_BURSTEN, BURSTEN
    : FSMC_BCR4_FACCEN ( -- x addr ) 6 bit FSMC_BCR4 ; \ FSMC_BCR4_FACCEN, FACCEN
    : FSMC_BCR4_MWID ( %bb -- x addr ) 4 lshift FSMC_BCR4 ; \ FSMC_BCR4_MWID, MWID
    : FSMC_BCR4_MTYP ( %bb -- x addr ) 2 lshift FSMC_BCR4 ; \ FSMC_BCR4_MTYP, MTYP
    : FSMC_BCR4_MUXEN ( -- x addr ) 1 bit FSMC_BCR4 ; \ FSMC_BCR4_MUXEN, MUXEN
    : FSMC_BCR4_MBKEN ( -- x addr ) 0 bit FSMC_BCR4 ; \ FSMC_BCR4_MBKEN, MBKEN
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_BTR4 (read-write) Reset:0xFFFFFFFF
    : FSMC_BTR4_ACCMOD ( %bb -- x addr ) 28 lshift FSMC_BTR4 ; \ FSMC_BTR4_ACCMOD, ACCMOD
    : FSMC_BTR4_DATLAT ( %bbbb -- x addr ) 24 lshift FSMC_BTR4 ; \ FSMC_BTR4_DATLAT, DATLAT
    : FSMC_BTR4_CLKDIV ( %bbbb -- x addr ) 20 lshift FSMC_BTR4 ; \ FSMC_BTR4_CLKDIV, CLKDIV
    : FSMC_BTR4_BUSTURN ( %bbbb -- x addr ) 16 lshift FSMC_BTR4 ; \ FSMC_BTR4_BUSTURN, BUSTURN
    : FSMC_BTR4_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FSMC_BTR4 ; \ FSMC_BTR4_DATAST, DATAST
    : FSMC_BTR4_ADDHLD ( %bbbb -- x addr ) 4 lshift FSMC_BTR4 ; \ FSMC_BTR4_ADDHLD, ADDHLD
    : FSMC_BTR4_ADDSET ( %bbbb -- x addr ) FSMC_BTR4 ; \ FSMC_BTR4_ADDSET, ADDSET
  [then]

  [if]
    \ FSMC_PCR2 (read-write) Reset:0x00000018
    : FSMC_PCR2_ECCPS ( %bbb -- x addr ) 17 lshift FSMC_PCR2 ; \ FSMC_PCR2_ECCPS, ECCPS
    : FSMC_PCR2_TAR ( %bbbb -- x addr ) 13 lshift FSMC_PCR2 ; \ FSMC_PCR2_TAR, TAR
    : FSMC_PCR2_TCLR ( %bbbb -- x addr ) 9 lshift FSMC_PCR2 ; \ FSMC_PCR2_TCLR, TCLR
    : FSMC_PCR2_ECCEN ( -- x addr ) 6 bit FSMC_PCR2 ; \ FSMC_PCR2_ECCEN, ECCEN
    : FSMC_PCR2_PWID ( %bb -- x addr ) 4 lshift FSMC_PCR2 ; \ FSMC_PCR2_PWID, PWID
    : FSMC_PCR2_PTYP ( -- x addr ) 3 bit FSMC_PCR2 ; \ FSMC_PCR2_PTYP, PTYP
    : FSMC_PCR2_PBKEN ( -- x addr ) 2 bit FSMC_PCR2 ; \ FSMC_PCR2_PBKEN, PBKEN
    : FSMC_PCR2_PWAITEN ( -- x addr ) 1 bit FSMC_PCR2 ; \ FSMC_PCR2_PWAITEN, PWAITEN
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_SR2 (multiple-access)  Reset:0x00000040
    : FSMC_SR2_FEMPT ( -- x addr ) 6 bit FSMC_SR2 ; \ FSMC_SR2_FEMPT, FEMPT
    : FSMC_SR2_IFEN ( -- x addr ) 5 bit FSMC_SR2 ; \ FSMC_SR2_IFEN, IFEN
    : FSMC_SR2_ILEN ( -- x addr ) 4 bit FSMC_SR2 ; \ FSMC_SR2_ILEN, ILEN
    : FSMC_SR2_IREN ( -- x addr ) 3 bit FSMC_SR2 ; \ FSMC_SR2_IREN, IREN
    : FSMC_SR2_IFS ( -- x addr ) 2 bit FSMC_SR2 ; \ FSMC_SR2_IFS, IFS
    : FSMC_SR2_ILS ( -- x addr ) 1 bit FSMC_SR2 ; \ FSMC_SR2_ILS, ILS
    : FSMC_SR2_IRS ( -- x addr ) 0 bit FSMC_SR2 ; \ FSMC_SR2_IRS, IRS
  [then]

  [if]
    \ FSMC_PMEM2 (read-write) Reset:0xFCFCFCFC
    : FSMC_PMEM2_MEMHIZx ( %bbbbbbbb -- x addr ) 24 lshift FSMC_PMEM2 ; \ FSMC_PMEM2_MEMHIZx, MEMHIZx
    : FSMC_PMEM2_MEMHOLDx ( %bbbbbbbb -- x addr ) 16 lshift FSMC_PMEM2 ; \ FSMC_PMEM2_MEMHOLDx, MEMHOLDx
    : FSMC_PMEM2_MEMWAITx ( %bbbbbbbb -- x addr ) 8 lshift FSMC_PMEM2 ; \ FSMC_PMEM2_MEMWAITx, MEMWAITx
    : FSMC_PMEM2_MEMSETx ( %bbbbbbbb -- x addr ) FSMC_PMEM2 ; \ FSMC_PMEM2_MEMSETx, MEMSETx
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_PATT2 (read-write) Reset:0xFCFCFCFC
    : FSMC_PATT2_ATTHIZx ( %bbbbbbbb -- x addr ) 24 lshift FSMC_PATT2 ; \ FSMC_PATT2_ATTHIZx, ATTHIZx
    : FSMC_PATT2_ATTHOLDx ( %bbbbbbbb -- x addr ) 16 lshift FSMC_PATT2 ; \ FSMC_PATT2_ATTHOLDx, ATTHOLDx
    : FSMC_PATT2_ATTWAITx ( %bbbbbbbb -- x addr ) 8 lshift FSMC_PATT2 ; \ FSMC_PATT2_ATTWAITx, ATTWAITx
    : FSMC_PATT2_ATTSETx ( %bbbbbbbb -- x addr ) FSMC_PATT2 ; \ FSMC_PATT2_ATTSETx, ATTSETx
  [then]

  [if]
    \ FSMC_ECCR2 (read-only) Reset:0x00000000
    : FSMC_ECCR2_ECCx? ( --  x ) FSMC_ECCR2 @ ; \ FSMC_ECCR2_ECCx, ECCx
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_PCR3 (read-write) Reset:0x00000018
    : FSMC_PCR3_ECCPS ( %bbb -- x addr ) 17 lshift FSMC_PCR3 ; \ FSMC_PCR3_ECCPS, ECCPS
    : FSMC_PCR3_TAR ( %bbbb -- x addr ) 13 lshift FSMC_PCR3 ; \ FSMC_PCR3_TAR, TAR
    : FSMC_PCR3_TCLR ( %bbbb -- x addr ) 9 lshift FSMC_PCR3 ; \ FSMC_PCR3_TCLR, TCLR
    : FSMC_PCR3_ECCEN ( -- x addr ) 6 bit FSMC_PCR3 ; \ FSMC_PCR3_ECCEN, ECCEN
    : FSMC_PCR3_PWID ( %bb -- x addr ) 4 lshift FSMC_PCR3 ; \ FSMC_PCR3_PWID, PWID
    : FSMC_PCR3_PTYP ( -- x addr ) 3 bit FSMC_PCR3 ; \ FSMC_PCR3_PTYP, PTYP
    : FSMC_PCR3_PBKEN ( -- x addr ) 2 bit FSMC_PCR3 ; \ FSMC_PCR3_PBKEN, PBKEN
    : FSMC_PCR3_PWAITEN ( -- x addr ) 1 bit FSMC_PCR3 ; \ FSMC_PCR3_PWAITEN, PWAITEN
  [then]

  [if]
    \ FSMC_SR3 (multiple-access)  Reset:0x00000040
    : FSMC_SR3_FEMPT ( -- x addr ) 6 bit FSMC_SR3 ; \ FSMC_SR3_FEMPT, FEMPT
    : FSMC_SR3_IFEN ( -- x addr ) 5 bit FSMC_SR3 ; \ FSMC_SR3_IFEN, IFEN
    : FSMC_SR3_ILEN ( -- x addr ) 4 bit FSMC_SR3 ; \ FSMC_SR3_ILEN, ILEN
    : FSMC_SR3_IREN ( -- x addr ) 3 bit FSMC_SR3 ; \ FSMC_SR3_IREN, IREN
    : FSMC_SR3_IFS ( -- x addr ) 2 bit FSMC_SR3 ; \ FSMC_SR3_IFS, IFS
    : FSMC_SR3_ILS ( -- x addr ) 1 bit FSMC_SR3 ; \ FSMC_SR3_ILS, ILS
    : FSMC_SR3_IRS ( -- x addr ) 0 bit FSMC_SR3 ; \ FSMC_SR3_IRS, IRS
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_PMEM3 (read-write) Reset:0xFCFCFCFC
    : FSMC_PMEM3_MEMHIZx ( %bbbbbbbb -- x addr ) 24 lshift FSMC_PMEM3 ; \ FSMC_PMEM3_MEMHIZx, MEMHIZx
    : FSMC_PMEM3_MEMHOLDx ( %bbbbbbbb -- x addr ) 16 lshift FSMC_PMEM3 ; \ FSMC_PMEM3_MEMHOLDx, MEMHOLDx
    : FSMC_PMEM3_MEMWAITx ( %bbbbbbbb -- x addr ) 8 lshift FSMC_PMEM3 ; \ FSMC_PMEM3_MEMWAITx, MEMWAITx
    : FSMC_PMEM3_MEMSETx ( %bbbbbbbb -- x addr ) FSMC_PMEM3 ; \ FSMC_PMEM3_MEMSETx, MEMSETx
  [then]

  [if]
    \ FSMC_PATT3 (read-write) Reset:0xFCFCFCFC
    : FSMC_PATT3_ATTHIZx ( %bbbbbbbb -- x addr ) 24 lshift FSMC_PATT3 ; \ FSMC_PATT3_ATTHIZx, ATTHIZx
    : FSMC_PATT3_ATTHOLDx ( %bbbbbbbb -- x addr ) 16 lshift FSMC_PATT3 ; \ FSMC_PATT3_ATTHOLDx, ATTHOLDx
    : FSMC_PATT3_ATTWAITx ( %bbbbbbbb -- x addr ) 8 lshift FSMC_PATT3 ; \ FSMC_PATT3_ATTWAITx, ATTWAITx
    : FSMC_PATT3_ATTSETx ( %bbbbbbbb -- x addr ) FSMC_PATT3 ; \ FSMC_PATT3_ATTSETx, ATTSETx
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_ECCR3 (read-only) Reset:0x00000000
    : FSMC_ECCR3_ECCx? ( --  x ) FSMC_ECCR3 @ ; \ FSMC_ECCR3_ECCx, ECCx
  [then]

  [if]
    \ FSMC_PCR4 (read-write) Reset:0x00000018
    : FSMC_PCR4_ECCPS ( %bbb -- x addr ) 17 lshift FSMC_PCR4 ; \ FSMC_PCR4_ECCPS, ECCPS
    : FSMC_PCR4_TAR ( %bbbb -- x addr ) 13 lshift FSMC_PCR4 ; \ FSMC_PCR4_TAR, TAR
    : FSMC_PCR4_TCLR ( %bbbb -- x addr ) 9 lshift FSMC_PCR4 ; \ FSMC_PCR4_TCLR, TCLR
    : FSMC_PCR4_ECCEN ( -- x addr ) 6 bit FSMC_PCR4 ; \ FSMC_PCR4_ECCEN, ECCEN
    : FSMC_PCR4_PWID ( %bb -- x addr ) 4 lshift FSMC_PCR4 ; \ FSMC_PCR4_PWID, PWID
    : FSMC_PCR4_PTYP ( -- x addr ) 3 bit FSMC_PCR4 ; \ FSMC_PCR4_PTYP, PTYP
    : FSMC_PCR4_PBKEN ( -- x addr ) 2 bit FSMC_PCR4 ; \ FSMC_PCR4_PBKEN, PBKEN
    : FSMC_PCR4_PWAITEN ( -- x addr ) 1 bit FSMC_PCR4 ; \ FSMC_PCR4_PWAITEN, PWAITEN
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_SR4 (multiple-access)  Reset:0x00000040
    : FSMC_SR4_FEMPT ( -- x addr ) 6 bit FSMC_SR4 ; \ FSMC_SR4_FEMPT, FEMPT
    : FSMC_SR4_IFEN ( -- x addr ) 5 bit FSMC_SR4 ; \ FSMC_SR4_IFEN, IFEN
    : FSMC_SR4_ILEN ( -- x addr ) 4 bit FSMC_SR4 ; \ FSMC_SR4_ILEN, ILEN
    : FSMC_SR4_IREN ( -- x addr ) 3 bit FSMC_SR4 ; \ FSMC_SR4_IREN, IREN
    : FSMC_SR4_IFS ( -- x addr ) 2 bit FSMC_SR4 ; \ FSMC_SR4_IFS, IFS
    : FSMC_SR4_ILS ( -- x addr ) 1 bit FSMC_SR4 ; \ FSMC_SR4_ILS, ILS
    : FSMC_SR4_IRS ( -- x addr ) 0 bit FSMC_SR4 ; \ FSMC_SR4_IRS, IRS
  [then]

  [if]
    \ FSMC_PMEM4 (read-write) Reset:0xFCFCFCFC
    : FSMC_PMEM4_MEMHIZx ( %bbbbbbbb -- x addr ) 24 lshift FSMC_PMEM4 ; \ FSMC_PMEM4_MEMHIZx, MEMHIZx
    : FSMC_PMEM4_MEMHOLDx ( %bbbbbbbb -- x addr ) 16 lshift FSMC_PMEM4 ; \ FSMC_PMEM4_MEMHOLDx, MEMHOLDx
    : FSMC_PMEM4_MEMWAITx ( %bbbbbbbb -- x addr ) 8 lshift FSMC_PMEM4 ; \ FSMC_PMEM4_MEMWAITx, MEMWAITx
    : FSMC_PMEM4_MEMSETx ( %bbbbbbbb -- x addr ) FSMC_PMEM4 ; \ FSMC_PMEM4_MEMSETx, MEMSETx
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_PATT4 (read-write) Reset:0xFCFCFCFC
    : FSMC_PATT4_ATTHIZx ( %bbbbbbbb -- x addr ) 24 lshift FSMC_PATT4 ; \ FSMC_PATT4_ATTHIZx, ATTHIZx
    : FSMC_PATT4_ATTHOLDx ( %bbbbbbbb -- x addr ) 16 lshift FSMC_PATT4 ; \ FSMC_PATT4_ATTHOLDx, ATTHOLDx
    : FSMC_PATT4_ATTWAITx ( %bbbbbbbb -- x addr ) 8 lshift FSMC_PATT4 ; \ FSMC_PATT4_ATTWAITx, ATTWAITx
    : FSMC_PATT4_ATTSETx ( %bbbbbbbb -- x addr ) FSMC_PATT4 ; \ FSMC_PATT4_ATTSETx, ATTSETx
  [then]

  [if]
    \ FSMC_PIO4 (read-write) Reset:0xFCFCFCFC
    : FSMC_PIO4_IOHIZx ( %bbbbbbbb -- x addr ) 24 lshift FSMC_PIO4 ; \ FSMC_PIO4_IOHIZx, IOHIZx
    : FSMC_PIO4_IOHOLDx ( %bbbbbbbb -- x addr ) 16 lshift FSMC_PIO4 ; \ FSMC_PIO4_IOHOLDx, IOHOLDx
    : FSMC_PIO4_IOWAITx ( %bbbbbbbb -- x addr ) 8 lshift FSMC_PIO4 ; \ FSMC_PIO4_IOWAITx, IOWAITx
    : FSMC_PIO4_IOSETx ( %bbbbbbbb -- x addr ) FSMC_PIO4 ; \ FSMC_PIO4_IOSETx, IOSETx
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_BWTR1 (read-write) Reset:0x0FFFFFFF
    : FSMC_BWTR1_ACCMOD ( %bb -- x addr ) 28 lshift FSMC_BWTR1 ; \ FSMC_BWTR1_ACCMOD, ACCMOD
    : FSMC_BWTR1_DATLAT ( %bbbb -- x addr ) 24 lshift FSMC_BWTR1 ; \ FSMC_BWTR1_DATLAT, DATLAT
    : FSMC_BWTR1_CLKDIV ( %bbbb -- x addr ) 20 lshift FSMC_BWTR1 ; \ FSMC_BWTR1_CLKDIV, CLKDIV
    : FSMC_BWTR1_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FSMC_BWTR1 ; \ FSMC_BWTR1_DATAST, DATAST
    : FSMC_BWTR1_ADDHLD ( %bbbb -- x addr ) 4 lshift FSMC_BWTR1 ; \ FSMC_BWTR1_ADDHLD, ADDHLD
    : FSMC_BWTR1_ADDSET ( %bbbb -- x addr ) FSMC_BWTR1 ; \ FSMC_BWTR1_ADDSET, ADDSET
  [then]

  [if]
    \ FSMC_BWTR2 (read-write) Reset:0x0FFFFFFF
    : FSMC_BWTR2_ACCMOD ( %bb -- x addr ) 28 lshift FSMC_BWTR2 ; \ FSMC_BWTR2_ACCMOD, ACCMOD
    : FSMC_BWTR2_DATLAT ( %bbbb -- x addr ) 24 lshift FSMC_BWTR2 ; \ FSMC_BWTR2_DATLAT, DATLAT
    : FSMC_BWTR2_CLKDIV ( %bbbb -- x addr ) 20 lshift FSMC_BWTR2 ; \ FSMC_BWTR2_CLKDIV, CLKDIV
    : FSMC_BWTR2_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FSMC_BWTR2 ; \ FSMC_BWTR2_DATAST, DATAST
    : FSMC_BWTR2_ADDHLD ( %bbbb -- x addr ) 4 lshift FSMC_BWTR2 ; \ FSMC_BWTR2_ADDHLD, ADDHLD
    : FSMC_BWTR2_ADDSET ( %bbbb -- x addr ) FSMC_BWTR2 ; \ FSMC_BWTR2_ADDSET, ADDSET
  [then]

  execute-defined? use-FSMC [if]
    \ FSMC_BWTR3 (read-write) Reset:0x0FFFFFFF
    : FSMC_BWTR3_ACCMOD ( %bb -- x addr ) 28 lshift FSMC_BWTR3 ; \ FSMC_BWTR3_ACCMOD, ACCMOD
    : FSMC_BWTR3_DATLAT ( %bbbb -- x addr ) 24 lshift FSMC_BWTR3 ; \ FSMC_BWTR3_DATLAT, DATLAT
    : FSMC_BWTR3_CLKDIV ( %bbbb -- x addr ) 20 lshift FSMC_BWTR3 ; \ FSMC_BWTR3_CLKDIV, CLKDIV
    : FSMC_BWTR3_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FSMC_BWTR3 ; \ FSMC_BWTR3_DATAST, DATAST
    : FSMC_BWTR3_ADDHLD ( %bbbb -- x addr ) 4 lshift FSMC_BWTR3 ; \ FSMC_BWTR3_ADDHLD, ADDHLD
    : FSMC_BWTR3_ADDSET ( %bbbb -- x addr ) FSMC_BWTR3 ; \ FSMC_BWTR3_ADDSET, ADDSET
  [then]

  [if]
    \ FSMC_BWTR4 (read-write) Reset:0x0FFFFFFF
    : FSMC_BWTR4_ACCMOD ( %bb -- x addr ) 28 lshift FSMC_BWTR4 ; \ FSMC_BWTR4_ACCMOD, ACCMOD
    : FSMC_BWTR4_DATLAT ( %bbbb -- x addr ) 24 lshift FSMC_BWTR4 ; \ FSMC_BWTR4_DATLAT, DATLAT
    : FSMC_BWTR4_CLKDIV ( %bbbb -- x addr ) 20 lshift FSMC_BWTR4 ; \ FSMC_BWTR4_CLKDIV, CLKDIV
    : FSMC_BWTR4_DATAST ( %bbbbbbbb -- x addr ) 8 lshift FSMC_BWTR4 ; \ FSMC_BWTR4_DATAST, DATAST
    : FSMC_BWTR4_ADDHLD ( %bbbb -- x addr ) 4 lshift FSMC_BWTR4 ; \ FSMC_BWTR4_ADDHLD, ADDHLD
    : FSMC_BWTR4_ADDSET ( %bbbb -- x addr ) FSMC_BWTR4 ; \ FSMC_BWTR4_ADDSET, ADDSET
  [then]

  execute-defined? use-DBG [if]
    \ DBG_DBGMCU_IDCODE (read-only) Reset:0x10006411
    : DBG_DBGMCU_IDCODE_DEV_ID? ( --  x ) DBG_DBGMCU_IDCODE @ ; \ DBG_DBGMCU_IDCODE_DEV_ID, DEV_ID
    : DBG_DBGMCU_IDCODE_REV_ID? ( --  x ) 16 lshift DBG_DBGMCU_IDCODE @ ; \ DBG_DBGMCU_IDCODE_REV_ID, REV_ID
  [then]

  [if]
    \ DBG_DBGMCU_CR (read-write) Reset:0x00000000
    : DBG_DBGMCU_CR_DBG_SLEEP ( -- x addr ) 0 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_DBG_SLEEP, DBG_SLEEP
    : DBG_DBGMCU_CR_DBG_STOP ( -- x addr ) 1 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_DBG_STOP, DBG_STOP
    : DBG_DBGMCU_CR_DBG_STANDBY ( -- x addr ) 2 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_DBG_STANDBY, DBG_STANDBY
    : DBG_DBGMCU_CR_TRACE_IOEN ( -- x addr ) 5 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_TRACE_IOEN, TRACE_IOEN
    : DBG_DBGMCU_CR_TRACE_MODE ( %bb -- x addr ) 6 lshift DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_TRACE_MODE, TRACE_MODE
    : DBG_DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT ( -- x addr ) 16 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT, DBG_I2C2_SMBUS_TIMEOUT
    : DBG_DBGMCU_CR_DBG_TIM8_STOP ( -- x addr ) 17 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_DBG_TIM8_STOP, DBG_TIM8_STOP
    : DBG_DBGMCU_CR_DBG_TIM5_STOP ( -- x addr ) 18 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_DBG_TIM5_STOP, DBG_TIM5_STOP
    : DBG_DBGMCU_CR_DBG_TIM6_STOP ( -- x addr ) 19 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_DBG_TIM6_STOP, DBG_TIM6_STOP
    : DBG_DBGMCU_CR_DBG_TIM7_STOP ( -- x addr ) 20 bit DBG_DBGMCU_CR ; \ DBG_DBGMCU_CR_DBG_TIM7_STOP, DBG_TIM7_STOP
  [then]

  execute-defined? use-DBG [if]
    \ DBG_DBGMCU_APB1_FZ (read-write) Reset:0x00000000
    : DBG_DBGMCU_APB1_FZ_DBG_TIM2_STOP ( -- x addr ) 0 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM2_STOP, DBG_TIM2_STOP
    : DBG_DBGMCU_APB1_FZ_DBG_TIM3_STOP ( -- x addr ) 1 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM3_STOP, DBG_TIM3 _STOP
    : DBG_DBGMCU_APB1_FZ_DBG_TIM4_STOP ( -- x addr ) 2 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM4_STOP, DBG_TIM4_STOP
    : DBG_DBGMCU_APB1_FZ_DBG_TIM5_STOP ( -- x addr ) 3 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM5_STOP, DBG_TIM5_STOP
    : DBG_DBGMCU_APB1_FZ_DBG_TIM6_STOP ( -- x addr ) 4 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM6_STOP, DBG_TIM6_STOP
    : DBG_DBGMCU_APB1_FZ_DBG_TIM7_STOP ( -- x addr ) 5 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM7_STOP, DBG_TIM7_STOP
    : DBG_DBGMCU_APB1_FZ_DBG_TIM12_STOP ( -- x addr ) 6 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM12_STOP, DBG_TIM12_STOP
    : DBG_DBGMCU_APB1_FZ_DBG_TIM13_STOP ( -- x addr ) 7 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM13_STOP, DBG_TIM13_STOP
    : DBG_DBGMCU_APB1_FZ_DBG_TIM14_STOP ( -- x addr ) 8 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_TIM14_STOP, DBG_TIM14_STOP
    : DBG_DBGMCU_APB1_FZ_DBG_WWDG_STOP ( -- x addr ) 11 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_WWDG_STOP, DBG_WWDG_STOP
    : DBG_DBGMCU_APB1_FZ_DBG_IWDEG_STOP ( -- x addr ) 12 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_IWDEG_STOP, DBG_IWDEG_STOP
    : DBG_DBGMCU_APB1_FZ_DBG_J2C1_SMBUS_TIMEOUT ( -- x addr ) 21 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_J2C1_SMBUS_TIMEOUT, DBG_J2C1_SMBUS_TIMEOUT
    : DBG_DBGMCU_APB1_FZ_DBG_J2C2_SMBUS_TIMEOUT ( -- x addr ) 22 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_J2C2_SMBUS_TIMEOUT, DBG_J2C2_SMBUS_TIMEOUT
    : DBG_DBGMCU_APB1_FZ_DBG_J2C3SMBUS_TIMEOUT ( -- x addr ) 23 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_J2C3SMBUS_TIMEOUT, DBG_J2C3SMBUS_TIMEOUT
    : DBG_DBGMCU_APB1_FZ_DBG_CAN1_STOP ( -- x addr ) 25 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_CAN1_STOP, DBG_CAN1_STOP
    : DBG_DBGMCU_APB1_FZ_DBG_CAN2_STOP ( -- x addr ) 26 bit DBG_DBGMCU_APB1_FZ ; \ DBG_DBGMCU_APB1_FZ_DBG_CAN2_STOP, DBG_CAN2_STOP
  [then]

  [if]
    \ DBG_DBGMCU_APB2_FZ (read-write) Reset:0x00000000
    : DBG_DBGMCU_APB2_FZ_DBG_TIM1_STOP ( -- x addr ) 0 bit DBG_DBGMCU_APB2_FZ ; \ DBG_DBGMCU_APB2_FZ_DBG_TIM1_STOP, TIM1 counter stopped when core is  halted
    : DBG_DBGMCU_APB2_FZ_DBG_TIM8_STOP ( -- x addr ) 1 bit DBG_DBGMCU_APB2_FZ ; \ DBG_DBGMCU_APB2_FZ_DBG_TIM8_STOP, TIM8 counter stopped when core is  halted
    : DBG_DBGMCU_APB2_FZ_DBG_TIM9_STOP ( -- x addr ) 16 bit DBG_DBGMCU_APB2_FZ ; \ DBG_DBGMCU_APB2_FZ_DBG_TIM9_STOP, TIM9 counter stopped when core is  halted
    : DBG_DBGMCU_APB2_FZ_DBG_TIM10_STOP ( -- x addr ) 17 bit DBG_DBGMCU_APB2_FZ ; \ DBG_DBGMCU_APB2_FZ_DBG_TIM10_STOP, TIM10 counter stopped when core is  halted
    : DBG_DBGMCU_APB2_FZ_DBG_TIM11_STOP ( -- x addr ) 18 bit DBG_DBGMCU_APB2_FZ ; \ DBG_DBGMCU_APB2_FZ_DBG_TIM11_STOP, TIM11 counter stopped when core is  halted
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_LISR (read-only) Reset:0x00000000
    : DMA2_LISR_TCIF3? ( --  1|0 ) 27 bit DMA2_LISR bit@ ; \ DMA2_LISR_TCIF3, Stream x transfer complete interrupt  flag x = 3..0
    : DMA2_LISR_HTIF3? ( --  1|0 ) 26 bit DMA2_LISR bit@ ; \ DMA2_LISR_HTIF3, Stream x half transfer interrupt flag  x=3..0
    : DMA2_LISR_TEIF3? ( --  1|0 ) 25 bit DMA2_LISR bit@ ; \ DMA2_LISR_TEIF3, Stream x transfer error interrupt flag  x=3..0
    : DMA2_LISR_DMEIF3? ( --  1|0 ) 24 bit DMA2_LISR bit@ ; \ DMA2_LISR_DMEIF3, Stream x direct mode error interrupt  flag x=3..0
    : DMA2_LISR_FEIF3? ( --  1|0 ) 22 bit DMA2_LISR bit@ ; \ DMA2_LISR_FEIF3, Stream x FIFO error interrupt flag  x=3..0
    : DMA2_LISR_TCIF2? ( --  1|0 ) 21 bit DMA2_LISR bit@ ; \ DMA2_LISR_TCIF2, Stream x transfer complete interrupt  flag x = 3..0
    : DMA2_LISR_HTIF2? ( --  1|0 ) 20 bit DMA2_LISR bit@ ; \ DMA2_LISR_HTIF2, Stream x half transfer interrupt flag  x=3..0
    : DMA2_LISR_TEIF2? ( --  1|0 ) 19 bit DMA2_LISR bit@ ; \ DMA2_LISR_TEIF2, Stream x transfer error interrupt flag  x=3..0
    : DMA2_LISR_DMEIF2? ( --  1|0 ) 18 bit DMA2_LISR bit@ ; \ DMA2_LISR_DMEIF2, Stream x direct mode error interrupt  flag x=3..0
    : DMA2_LISR_FEIF2? ( --  1|0 ) 16 bit DMA2_LISR bit@ ; \ DMA2_LISR_FEIF2, Stream x FIFO error interrupt flag  x=3..0
    : DMA2_LISR_TCIF1? ( --  1|0 ) 11 bit DMA2_LISR bit@ ; \ DMA2_LISR_TCIF1, Stream x transfer complete interrupt  flag x = 3..0
    : DMA2_LISR_HTIF1? ( --  1|0 ) 10 bit DMA2_LISR bit@ ; \ DMA2_LISR_HTIF1, Stream x half transfer interrupt flag  x=3..0
    : DMA2_LISR_TEIF1? ( --  1|0 ) 9 bit DMA2_LISR bit@ ; \ DMA2_LISR_TEIF1, Stream x transfer error interrupt flag  x=3..0
    : DMA2_LISR_DMEIF1? ( --  1|0 ) 8 bit DMA2_LISR bit@ ; \ DMA2_LISR_DMEIF1, Stream x direct mode error interrupt  flag x=3..0
    : DMA2_LISR_FEIF1? ( --  1|0 ) 6 bit DMA2_LISR bit@ ; \ DMA2_LISR_FEIF1, Stream x FIFO error interrupt flag  x=3..0
    : DMA2_LISR_TCIF0? ( --  1|0 ) 5 bit DMA2_LISR bit@ ; \ DMA2_LISR_TCIF0, Stream x transfer complete interrupt  flag x = 3..0
    : DMA2_LISR_HTIF0? ( --  1|0 ) 4 bit DMA2_LISR bit@ ; \ DMA2_LISR_HTIF0, Stream x half transfer interrupt flag  x=3..0
    : DMA2_LISR_TEIF0? ( --  1|0 ) 3 bit DMA2_LISR bit@ ; \ DMA2_LISR_TEIF0, Stream x transfer error interrupt flag  x=3..0
    : DMA2_LISR_DMEIF0? ( --  1|0 ) 2 bit DMA2_LISR bit@ ; \ DMA2_LISR_DMEIF0, Stream x direct mode error interrupt  flag x=3..0
    : DMA2_LISR_FEIF0? ( --  1|0 ) 0 bit DMA2_LISR bit@ ; \ DMA2_LISR_FEIF0, Stream x FIFO error interrupt flag  x=3..0
  [then]

  [if]
    \ DMA2_HISR (read-only) Reset:0x00000000
    : DMA2_HISR_TCIF7? ( --  1|0 ) 27 bit DMA2_HISR bit@ ; \ DMA2_HISR_TCIF7, Stream x transfer complete interrupt  flag x=7..4
    : DMA2_HISR_HTIF7? ( --  1|0 ) 26 bit DMA2_HISR bit@ ; \ DMA2_HISR_HTIF7, Stream x half transfer interrupt flag  x=7..4
    : DMA2_HISR_TEIF7? ( --  1|0 ) 25 bit DMA2_HISR bit@ ; \ DMA2_HISR_TEIF7, Stream x transfer error interrupt flag  x=7..4
    : DMA2_HISR_DMEIF7? ( --  1|0 ) 24 bit DMA2_HISR bit@ ; \ DMA2_HISR_DMEIF7, Stream x direct mode error interrupt  flag x=7..4
    : DMA2_HISR_FEIF7? ( --  1|0 ) 22 bit DMA2_HISR bit@ ; \ DMA2_HISR_FEIF7, Stream x FIFO error interrupt flag  x=7..4
    : DMA2_HISR_TCIF6? ( --  1|0 ) 21 bit DMA2_HISR bit@ ; \ DMA2_HISR_TCIF6, Stream x transfer complete interrupt  flag x=7..4
    : DMA2_HISR_HTIF6? ( --  1|0 ) 20 bit DMA2_HISR bit@ ; \ DMA2_HISR_HTIF6, Stream x half transfer interrupt flag  x=7..4
    : DMA2_HISR_TEIF6? ( --  1|0 ) 19 bit DMA2_HISR bit@ ; \ DMA2_HISR_TEIF6, Stream x transfer error interrupt flag  x=7..4
    : DMA2_HISR_DMEIF6? ( --  1|0 ) 18 bit DMA2_HISR bit@ ; \ DMA2_HISR_DMEIF6, Stream x direct mode error interrupt  flag x=7..4
    : DMA2_HISR_FEIF6? ( --  1|0 ) 16 bit DMA2_HISR bit@ ; \ DMA2_HISR_FEIF6, Stream x FIFO error interrupt flag  x=7..4
    : DMA2_HISR_TCIF5? ( --  1|0 ) 11 bit DMA2_HISR bit@ ; \ DMA2_HISR_TCIF5, Stream x transfer complete interrupt  flag x=7..4
    : DMA2_HISR_HTIF5? ( --  1|0 ) 10 bit DMA2_HISR bit@ ; \ DMA2_HISR_HTIF5, Stream x half transfer interrupt flag  x=7..4
    : DMA2_HISR_TEIF5? ( --  1|0 ) 9 bit DMA2_HISR bit@ ; \ DMA2_HISR_TEIF5, Stream x transfer error interrupt flag  x=7..4
    : DMA2_HISR_DMEIF5? ( --  1|0 ) 8 bit DMA2_HISR bit@ ; \ DMA2_HISR_DMEIF5, Stream x direct mode error interrupt  flag x=7..4
    : DMA2_HISR_FEIF5? ( --  1|0 ) 6 bit DMA2_HISR bit@ ; \ DMA2_HISR_FEIF5, Stream x FIFO error interrupt flag  x=7..4
    : DMA2_HISR_TCIF4? ( --  1|0 ) 5 bit DMA2_HISR bit@ ; \ DMA2_HISR_TCIF4, Stream x transfer complete interrupt  flag x=7..4
    : DMA2_HISR_HTIF4? ( --  1|0 ) 4 bit DMA2_HISR bit@ ; \ DMA2_HISR_HTIF4, Stream x half transfer interrupt flag  x=7..4
    : DMA2_HISR_TEIF4? ( --  1|0 ) 3 bit DMA2_HISR bit@ ; \ DMA2_HISR_TEIF4, Stream x transfer error interrupt flag  x=7..4
    : DMA2_HISR_DMEIF4? ( --  1|0 ) 2 bit DMA2_HISR bit@ ; \ DMA2_HISR_DMEIF4, Stream x direct mode error interrupt  flag x=7..4
    : DMA2_HISR_FEIF4? ( --  1|0 ) 0 bit DMA2_HISR bit@ ; \ DMA2_HISR_FEIF4, Stream x FIFO error interrupt flag  x=7..4
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_LIFCR (read-write) Reset:0x00000000
    : DMA2_LIFCR_CTCIF3 ( -- x addr ) 27 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTCIF3, Stream x clear transfer complete  interrupt flag x = 3..0
    : DMA2_LIFCR_CHTIF3 ( -- x addr ) 26 bit DMA2_LIFCR ; \ DMA2_LIFCR_CHTIF3, Stream x clear half transfer interrupt  flag x = 3..0
    : DMA2_LIFCR_CTEIF3 ( -- x addr ) 25 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTEIF3, Stream x clear transfer error interrupt  flag x = 3..0
    : DMA2_LIFCR_CDMEIF3 ( -- x addr ) 24 bit DMA2_LIFCR ; \ DMA2_LIFCR_CDMEIF3, Stream x clear direct mode error  interrupt flag x = 3..0
    : DMA2_LIFCR_CFEIF3 ( -- x addr ) 22 bit DMA2_LIFCR ; \ DMA2_LIFCR_CFEIF3, Stream x clear FIFO error interrupt flag  x = 3..0
    : DMA2_LIFCR_CTCIF2 ( -- x addr ) 21 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTCIF2, Stream x clear transfer complete  interrupt flag x = 3..0
    : DMA2_LIFCR_CHTIF2 ( -- x addr ) 20 bit DMA2_LIFCR ; \ DMA2_LIFCR_CHTIF2, Stream x clear half transfer interrupt  flag x = 3..0
    : DMA2_LIFCR_CTEIF2 ( -- x addr ) 19 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTEIF2, Stream x clear transfer error interrupt  flag x = 3..0
    : DMA2_LIFCR_CDMEIF2 ( -- x addr ) 18 bit DMA2_LIFCR ; \ DMA2_LIFCR_CDMEIF2, Stream x clear direct mode error  interrupt flag x = 3..0
    : DMA2_LIFCR_CFEIF2 ( -- x addr ) 16 bit DMA2_LIFCR ; \ DMA2_LIFCR_CFEIF2, Stream x clear FIFO error interrupt flag  x = 3..0
    : DMA2_LIFCR_CTCIF1 ( -- x addr ) 11 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTCIF1, Stream x clear transfer complete  interrupt flag x = 3..0
    : DMA2_LIFCR_CHTIF1 ( -- x addr ) 10 bit DMA2_LIFCR ; \ DMA2_LIFCR_CHTIF1, Stream x clear half transfer interrupt  flag x = 3..0
    : DMA2_LIFCR_CTEIF1 ( -- x addr ) 9 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTEIF1, Stream x clear transfer error interrupt  flag x = 3..0
    : DMA2_LIFCR_CDMEIF1 ( -- x addr ) 8 bit DMA2_LIFCR ; \ DMA2_LIFCR_CDMEIF1, Stream x clear direct mode error  interrupt flag x = 3..0
    : DMA2_LIFCR_CFEIF1 ( -- x addr ) 6 bit DMA2_LIFCR ; \ DMA2_LIFCR_CFEIF1, Stream x clear FIFO error interrupt flag  x = 3..0
    : DMA2_LIFCR_CTCIF0 ( -- x addr ) 5 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTCIF0, Stream x clear transfer complete  interrupt flag x = 3..0
    : DMA2_LIFCR_CHTIF0 ( -- x addr ) 4 bit DMA2_LIFCR ; \ DMA2_LIFCR_CHTIF0, Stream x clear half transfer interrupt  flag x = 3..0
    : DMA2_LIFCR_CTEIF0 ( -- x addr ) 3 bit DMA2_LIFCR ; \ DMA2_LIFCR_CTEIF0, Stream x clear transfer error interrupt  flag x = 3..0
    : DMA2_LIFCR_CDMEIF0 ( -- x addr ) 2 bit DMA2_LIFCR ; \ DMA2_LIFCR_CDMEIF0, Stream x clear direct mode error  interrupt flag x = 3..0
    : DMA2_LIFCR_CFEIF0 ( -- x addr ) 0 bit DMA2_LIFCR ; \ DMA2_LIFCR_CFEIF0, Stream x clear FIFO error interrupt flag  x = 3..0
  [then]

  [if]
    \ DMA2_HIFCR (read-write) Reset:0x00000000
    : DMA2_HIFCR_CTCIF7 ( -- x addr ) 27 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTCIF7, Stream x clear transfer complete  interrupt flag x = 7..4
    : DMA2_HIFCR_CHTIF7 ( -- x addr ) 26 bit DMA2_HIFCR ; \ DMA2_HIFCR_CHTIF7, Stream x clear half transfer interrupt  flag x = 7..4
    : DMA2_HIFCR_CTEIF7 ( -- x addr ) 25 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTEIF7, Stream x clear transfer error interrupt  flag x = 7..4
    : DMA2_HIFCR_CDMEIF7 ( -- x addr ) 24 bit DMA2_HIFCR ; \ DMA2_HIFCR_CDMEIF7, Stream x clear direct mode error  interrupt flag x = 7..4
    : DMA2_HIFCR_CFEIF7 ( -- x addr ) 22 bit DMA2_HIFCR ; \ DMA2_HIFCR_CFEIF7, Stream x clear FIFO error interrupt flag  x = 7..4
    : DMA2_HIFCR_CTCIF6 ( -- x addr ) 21 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTCIF6, Stream x clear transfer complete  interrupt flag x = 7..4
    : DMA2_HIFCR_CHTIF6 ( -- x addr ) 20 bit DMA2_HIFCR ; \ DMA2_HIFCR_CHTIF6, Stream x clear half transfer interrupt  flag x = 7..4
    : DMA2_HIFCR_CTEIF6 ( -- x addr ) 19 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTEIF6, Stream x clear transfer error interrupt  flag x = 7..4
    : DMA2_HIFCR_CDMEIF6 ( -- x addr ) 18 bit DMA2_HIFCR ; \ DMA2_HIFCR_CDMEIF6, Stream x clear direct mode error  interrupt flag x = 7..4
    : DMA2_HIFCR_CFEIF6 ( -- x addr ) 16 bit DMA2_HIFCR ; \ DMA2_HIFCR_CFEIF6, Stream x clear FIFO error interrupt flag  x = 7..4
    : DMA2_HIFCR_CTCIF5 ( -- x addr ) 11 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTCIF5, Stream x clear transfer complete  interrupt flag x = 7..4
    : DMA2_HIFCR_CHTIF5 ( -- x addr ) 10 bit DMA2_HIFCR ; \ DMA2_HIFCR_CHTIF5, Stream x clear half transfer interrupt  flag x = 7..4
    : DMA2_HIFCR_CTEIF5 ( -- x addr ) 9 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTEIF5, Stream x clear transfer error interrupt  flag x = 7..4
    : DMA2_HIFCR_CDMEIF5 ( -- x addr ) 8 bit DMA2_HIFCR ; \ DMA2_HIFCR_CDMEIF5, Stream x clear direct mode error  interrupt flag x = 7..4
    : DMA2_HIFCR_CFEIF5 ( -- x addr ) 6 bit DMA2_HIFCR ; \ DMA2_HIFCR_CFEIF5, Stream x clear FIFO error interrupt flag  x = 7..4
    : DMA2_HIFCR_CTCIF4 ( -- x addr ) 5 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTCIF4, Stream x clear transfer complete  interrupt flag x = 7..4
    : DMA2_HIFCR_CHTIF4 ( -- x addr ) 4 bit DMA2_HIFCR ; \ DMA2_HIFCR_CHTIF4, Stream x clear half transfer interrupt  flag x = 7..4
    : DMA2_HIFCR_CTEIF4 ( -- x addr ) 3 bit DMA2_HIFCR ; \ DMA2_HIFCR_CTEIF4, Stream x clear transfer error interrupt  flag x = 7..4
    : DMA2_HIFCR_CDMEIF4 ( -- x addr ) 2 bit DMA2_HIFCR ; \ DMA2_HIFCR_CDMEIF4, Stream x clear direct mode error  interrupt flag x = 7..4
    : DMA2_HIFCR_CFEIF4 ( -- x addr ) 0 bit DMA2_HIFCR ; \ DMA2_HIFCR_CFEIF4, Stream x clear FIFO error interrupt flag  x = 7..4
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S0CR (read-write) Reset:0x00000000
    : DMA2_S0CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S0CR ; \ DMA2_S0CR_CHSEL, Channel selection
    : DMA2_S0CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S0CR ; \ DMA2_S0CR_MBURST, Memory burst transfer  configuration
    : DMA2_S0CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S0CR ; \ DMA2_S0CR_PBURST, Peripheral burst transfer  configuration
    : DMA2_S0CR_CT ( -- x addr ) 19 bit DMA2_S0CR ; \ DMA2_S0CR_CT, Current target only in double buffer  mode
    : DMA2_S0CR_DBM ( -- x addr ) 18 bit DMA2_S0CR ; \ DMA2_S0CR_DBM, Double buffer mode
    : DMA2_S0CR_PL ( %bb -- x addr ) 16 lshift DMA2_S0CR ; \ DMA2_S0CR_PL, Priority level
    : DMA2_S0CR_PINCOS ( -- x addr ) 15 bit DMA2_S0CR ; \ DMA2_S0CR_PINCOS, Peripheral increment offset  size
    : DMA2_S0CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S0CR ; \ DMA2_S0CR_MSIZE, Memory data size
    : DMA2_S0CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S0CR ; \ DMA2_S0CR_PSIZE, Peripheral data size
    : DMA2_S0CR_MINC ( -- x addr ) 10 bit DMA2_S0CR ; \ DMA2_S0CR_MINC, Memory increment mode
    : DMA2_S0CR_PINC ( -- x addr ) 9 bit DMA2_S0CR ; \ DMA2_S0CR_PINC, Peripheral increment mode
    : DMA2_S0CR_CIRC ( -- x addr ) 8 bit DMA2_S0CR ; \ DMA2_S0CR_CIRC, Circular mode
    : DMA2_S0CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S0CR ; \ DMA2_S0CR_DIR, Data transfer direction
    : DMA2_S0CR_PFCTRL ( -- x addr ) 5 bit DMA2_S0CR ; \ DMA2_S0CR_PFCTRL, Peripheral flow controller
    : DMA2_S0CR_TCIE ( -- x addr ) 4 bit DMA2_S0CR ; \ DMA2_S0CR_TCIE, Transfer complete interrupt  enable
    : DMA2_S0CR_HTIE ( -- x addr ) 3 bit DMA2_S0CR ; \ DMA2_S0CR_HTIE, Half transfer interrupt  enable
    : DMA2_S0CR_TEIE ( -- x addr ) 2 bit DMA2_S0CR ; \ DMA2_S0CR_TEIE, Transfer error interrupt  enable
    : DMA2_S0CR_DMEIE ( -- x addr ) 1 bit DMA2_S0CR ; \ DMA2_S0CR_DMEIE, Direct mode error interrupt  enable
    : DMA2_S0CR_EN ( -- x addr ) 0 bit DMA2_S0CR ; \ DMA2_S0CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA2_S0NDTR (read-write) Reset:0x00000000
    : DMA2_S0NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S0NDTR ; \ DMA2_S0NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S0PAR (read-write) Reset:0x00000000
    : DMA2_S0PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S0PAR ; \ DMA2_S0PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA2_S0M0AR (read-write) Reset:0x00000000
    : DMA2_S0M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S0M0AR ; \ DMA2_S0M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S0M1AR (read-write) Reset:0x00000000
    : DMA2_S0M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S0M1AR ; \ DMA2_S0M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA2_S0FCR (multiple-access)  Reset:0x00000021
    : DMA2_S0FCR_FEIE ( -- x addr ) 7 bit DMA2_S0FCR ; \ DMA2_S0FCR_FEIE, FIFO error interrupt  enable
    : DMA2_S0FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S0FCR bit@ ; \ DMA2_S0FCR_FS, FIFO status
    : DMA2_S0FCR_DMDIS ( -- x addr ) 2 bit DMA2_S0FCR ; \ DMA2_S0FCR_DMDIS, Direct mode disable
    : DMA2_S0FCR_FTH ( %bb -- x addr ) DMA2_S0FCR ; \ DMA2_S0FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S1CR (read-write) Reset:0x00000000
    : DMA2_S1CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S1CR ; \ DMA2_S1CR_CHSEL, Channel selection
    : DMA2_S1CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S1CR ; \ DMA2_S1CR_MBURST, Memory burst transfer  configuration
    : DMA2_S1CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S1CR ; \ DMA2_S1CR_PBURST, Peripheral burst transfer  configuration
    : DMA2_S1CR_ACK ( -- x addr ) 20 bit DMA2_S1CR ; \ DMA2_S1CR_ACK, ACK
    : DMA2_S1CR_CT ( -- x addr ) 19 bit DMA2_S1CR ; \ DMA2_S1CR_CT, Current target only in double buffer  mode
    : DMA2_S1CR_DBM ( -- x addr ) 18 bit DMA2_S1CR ; \ DMA2_S1CR_DBM, Double buffer mode
    : DMA2_S1CR_PL ( %bb -- x addr ) 16 lshift DMA2_S1CR ; \ DMA2_S1CR_PL, Priority level
    : DMA2_S1CR_PINCOS ( -- x addr ) 15 bit DMA2_S1CR ; \ DMA2_S1CR_PINCOS, Peripheral increment offset  size
    : DMA2_S1CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S1CR ; \ DMA2_S1CR_MSIZE, Memory data size
    : DMA2_S1CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S1CR ; \ DMA2_S1CR_PSIZE, Peripheral data size
    : DMA2_S1CR_MINC ( -- x addr ) 10 bit DMA2_S1CR ; \ DMA2_S1CR_MINC, Memory increment mode
    : DMA2_S1CR_PINC ( -- x addr ) 9 bit DMA2_S1CR ; \ DMA2_S1CR_PINC, Peripheral increment mode
    : DMA2_S1CR_CIRC ( -- x addr ) 8 bit DMA2_S1CR ; \ DMA2_S1CR_CIRC, Circular mode
    : DMA2_S1CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S1CR ; \ DMA2_S1CR_DIR, Data transfer direction
    : DMA2_S1CR_PFCTRL ( -- x addr ) 5 bit DMA2_S1CR ; \ DMA2_S1CR_PFCTRL, Peripheral flow controller
    : DMA2_S1CR_TCIE ( -- x addr ) 4 bit DMA2_S1CR ; \ DMA2_S1CR_TCIE, Transfer complete interrupt  enable
    : DMA2_S1CR_HTIE ( -- x addr ) 3 bit DMA2_S1CR ; \ DMA2_S1CR_HTIE, Half transfer interrupt  enable
    : DMA2_S1CR_TEIE ( -- x addr ) 2 bit DMA2_S1CR ; \ DMA2_S1CR_TEIE, Transfer error interrupt  enable
    : DMA2_S1CR_DMEIE ( -- x addr ) 1 bit DMA2_S1CR ; \ DMA2_S1CR_DMEIE, Direct mode error interrupt  enable
    : DMA2_S1CR_EN ( -- x addr ) 0 bit DMA2_S1CR ; \ DMA2_S1CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA2_S1NDTR (read-write) Reset:0x00000000
    : DMA2_S1NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S1NDTR ; \ DMA2_S1NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S1PAR (read-write) Reset:0x00000000
    : DMA2_S1PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S1PAR ; \ DMA2_S1PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA2_S1M0AR (read-write) Reset:0x00000000
    : DMA2_S1M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S1M0AR ; \ DMA2_S1M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S1M1AR (read-write) Reset:0x00000000
    : DMA2_S1M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S1M1AR ; \ DMA2_S1M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA2_S1FCR (multiple-access)  Reset:0x00000021
    : DMA2_S1FCR_FEIE ( -- x addr ) 7 bit DMA2_S1FCR ; \ DMA2_S1FCR_FEIE, FIFO error interrupt  enable
    : DMA2_S1FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S1FCR bit@ ; \ DMA2_S1FCR_FS, FIFO status
    : DMA2_S1FCR_DMDIS ( -- x addr ) 2 bit DMA2_S1FCR ; \ DMA2_S1FCR_DMDIS, Direct mode disable
    : DMA2_S1FCR_FTH ( %bb -- x addr ) DMA2_S1FCR ; \ DMA2_S1FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S2CR (read-write) Reset:0x00000000
    : DMA2_S2CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S2CR ; \ DMA2_S2CR_CHSEL, Channel selection
    : DMA2_S2CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S2CR ; \ DMA2_S2CR_MBURST, Memory burst transfer  configuration
    : DMA2_S2CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S2CR ; \ DMA2_S2CR_PBURST, Peripheral burst transfer  configuration
    : DMA2_S2CR_ACK ( -- x addr ) 20 bit DMA2_S2CR ; \ DMA2_S2CR_ACK, ACK
    : DMA2_S2CR_CT ( -- x addr ) 19 bit DMA2_S2CR ; \ DMA2_S2CR_CT, Current target only in double buffer  mode
    : DMA2_S2CR_DBM ( -- x addr ) 18 bit DMA2_S2CR ; \ DMA2_S2CR_DBM, Double buffer mode
    : DMA2_S2CR_PL ( %bb -- x addr ) 16 lshift DMA2_S2CR ; \ DMA2_S2CR_PL, Priority level
    : DMA2_S2CR_PINCOS ( -- x addr ) 15 bit DMA2_S2CR ; \ DMA2_S2CR_PINCOS, Peripheral increment offset  size
    : DMA2_S2CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S2CR ; \ DMA2_S2CR_MSIZE, Memory data size
    : DMA2_S2CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S2CR ; \ DMA2_S2CR_PSIZE, Peripheral data size
    : DMA2_S2CR_MINC ( -- x addr ) 10 bit DMA2_S2CR ; \ DMA2_S2CR_MINC, Memory increment mode
    : DMA2_S2CR_PINC ( -- x addr ) 9 bit DMA2_S2CR ; \ DMA2_S2CR_PINC, Peripheral increment mode
    : DMA2_S2CR_CIRC ( -- x addr ) 8 bit DMA2_S2CR ; \ DMA2_S2CR_CIRC, Circular mode
    : DMA2_S2CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S2CR ; \ DMA2_S2CR_DIR, Data transfer direction
    : DMA2_S2CR_PFCTRL ( -- x addr ) 5 bit DMA2_S2CR ; \ DMA2_S2CR_PFCTRL, Peripheral flow controller
    : DMA2_S2CR_TCIE ( -- x addr ) 4 bit DMA2_S2CR ; \ DMA2_S2CR_TCIE, Transfer complete interrupt  enable
    : DMA2_S2CR_HTIE ( -- x addr ) 3 bit DMA2_S2CR ; \ DMA2_S2CR_HTIE, Half transfer interrupt  enable
    : DMA2_S2CR_TEIE ( -- x addr ) 2 bit DMA2_S2CR ; \ DMA2_S2CR_TEIE, Transfer error interrupt  enable
    : DMA2_S2CR_DMEIE ( -- x addr ) 1 bit DMA2_S2CR ; \ DMA2_S2CR_DMEIE, Direct mode error interrupt  enable
    : DMA2_S2CR_EN ( -- x addr ) 0 bit DMA2_S2CR ; \ DMA2_S2CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA2_S2NDTR (read-write) Reset:0x00000000
    : DMA2_S2NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S2NDTR ; \ DMA2_S2NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S2PAR (read-write) Reset:0x00000000
    : DMA2_S2PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S2PAR ; \ DMA2_S2PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA2_S2M0AR (read-write) Reset:0x00000000
    : DMA2_S2M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S2M0AR ; \ DMA2_S2M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S2M1AR (read-write) Reset:0x00000000
    : DMA2_S2M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S2M1AR ; \ DMA2_S2M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA2_S2FCR (multiple-access)  Reset:0x00000021
    : DMA2_S2FCR_FEIE ( -- x addr ) 7 bit DMA2_S2FCR ; \ DMA2_S2FCR_FEIE, FIFO error interrupt  enable
    : DMA2_S2FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S2FCR bit@ ; \ DMA2_S2FCR_FS, FIFO status
    : DMA2_S2FCR_DMDIS ( -- x addr ) 2 bit DMA2_S2FCR ; \ DMA2_S2FCR_DMDIS, Direct mode disable
    : DMA2_S2FCR_FTH ( %bb -- x addr ) DMA2_S2FCR ; \ DMA2_S2FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S3CR (read-write) Reset:0x00000000
    : DMA2_S3CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S3CR ; \ DMA2_S3CR_CHSEL, Channel selection
    : DMA2_S3CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S3CR ; \ DMA2_S3CR_MBURST, Memory burst transfer  configuration
    : DMA2_S3CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S3CR ; \ DMA2_S3CR_PBURST, Peripheral burst transfer  configuration
    : DMA2_S3CR_ACK ( -- x addr ) 20 bit DMA2_S3CR ; \ DMA2_S3CR_ACK, ACK
    : DMA2_S3CR_CT ( -- x addr ) 19 bit DMA2_S3CR ; \ DMA2_S3CR_CT, Current target only in double buffer  mode
    : DMA2_S3CR_DBM ( -- x addr ) 18 bit DMA2_S3CR ; \ DMA2_S3CR_DBM, Double buffer mode
    : DMA2_S3CR_PL ( %bb -- x addr ) 16 lshift DMA2_S3CR ; \ DMA2_S3CR_PL, Priority level
    : DMA2_S3CR_PINCOS ( -- x addr ) 15 bit DMA2_S3CR ; \ DMA2_S3CR_PINCOS, Peripheral increment offset  size
    : DMA2_S3CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S3CR ; \ DMA2_S3CR_MSIZE, Memory data size
    : DMA2_S3CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S3CR ; \ DMA2_S3CR_PSIZE, Peripheral data size
    : DMA2_S3CR_MINC ( -- x addr ) 10 bit DMA2_S3CR ; \ DMA2_S3CR_MINC, Memory increment mode
    : DMA2_S3CR_PINC ( -- x addr ) 9 bit DMA2_S3CR ; \ DMA2_S3CR_PINC, Peripheral increment mode
    : DMA2_S3CR_CIRC ( -- x addr ) 8 bit DMA2_S3CR ; \ DMA2_S3CR_CIRC, Circular mode
    : DMA2_S3CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S3CR ; \ DMA2_S3CR_DIR, Data transfer direction
    : DMA2_S3CR_PFCTRL ( -- x addr ) 5 bit DMA2_S3CR ; \ DMA2_S3CR_PFCTRL, Peripheral flow controller
    : DMA2_S3CR_TCIE ( -- x addr ) 4 bit DMA2_S3CR ; \ DMA2_S3CR_TCIE, Transfer complete interrupt  enable
    : DMA2_S3CR_HTIE ( -- x addr ) 3 bit DMA2_S3CR ; \ DMA2_S3CR_HTIE, Half transfer interrupt  enable
    : DMA2_S3CR_TEIE ( -- x addr ) 2 bit DMA2_S3CR ; \ DMA2_S3CR_TEIE, Transfer error interrupt  enable
    : DMA2_S3CR_DMEIE ( -- x addr ) 1 bit DMA2_S3CR ; \ DMA2_S3CR_DMEIE, Direct mode error interrupt  enable
    : DMA2_S3CR_EN ( -- x addr ) 0 bit DMA2_S3CR ; \ DMA2_S3CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA2_S3NDTR (read-write) Reset:0x00000000
    : DMA2_S3NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S3NDTR ; \ DMA2_S3NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S3PAR (read-write) Reset:0x00000000
    : DMA2_S3PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S3PAR ; \ DMA2_S3PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA2_S3M0AR (read-write) Reset:0x00000000
    : DMA2_S3M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S3M0AR ; \ DMA2_S3M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S3M1AR (read-write) Reset:0x00000000
    : DMA2_S3M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S3M1AR ; \ DMA2_S3M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA2_S3FCR (multiple-access)  Reset:0x00000021
    : DMA2_S3FCR_FEIE ( -- x addr ) 7 bit DMA2_S3FCR ; \ DMA2_S3FCR_FEIE, FIFO error interrupt  enable
    : DMA2_S3FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S3FCR bit@ ; \ DMA2_S3FCR_FS, FIFO status
    : DMA2_S3FCR_DMDIS ( -- x addr ) 2 bit DMA2_S3FCR ; \ DMA2_S3FCR_DMDIS, Direct mode disable
    : DMA2_S3FCR_FTH ( %bb -- x addr ) DMA2_S3FCR ; \ DMA2_S3FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S4CR (read-write) Reset:0x00000000
    : DMA2_S4CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S4CR ; \ DMA2_S4CR_CHSEL, Channel selection
    : DMA2_S4CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S4CR ; \ DMA2_S4CR_MBURST, Memory burst transfer  configuration
    : DMA2_S4CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S4CR ; \ DMA2_S4CR_PBURST, Peripheral burst transfer  configuration
    : DMA2_S4CR_ACK ( -- x addr ) 20 bit DMA2_S4CR ; \ DMA2_S4CR_ACK, ACK
    : DMA2_S4CR_CT ( -- x addr ) 19 bit DMA2_S4CR ; \ DMA2_S4CR_CT, Current target only in double buffer  mode
    : DMA2_S4CR_DBM ( -- x addr ) 18 bit DMA2_S4CR ; \ DMA2_S4CR_DBM, Double buffer mode
    : DMA2_S4CR_PL ( %bb -- x addr ) 16 lshift DMA2_S4CR ; \ DMA2_S4CR_PL, Priority level
    : DMA2_S4CR_PINCOS ( -- x addr ) 15 bit DMA2_S4CR ; \ DMA2_S4CR_PINCOS, Peripheral increment offset  size
    : DMA2_S4CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S4CR ; \ DMA2_S4CR_MSIZE, Memory data size
    : DMA2_S4CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S4CR ; \ DMA2_S4CR_PSIZE, Peripheral data size
    : DMA2_S4CR_MINC ( -- x addr ) 10 bit DMA2_S4CR ; \ DMA2_S4CR_MINC, Memory increment mode
    : DMA2_S4CR_PINC ( -- x addr ) 9 bit DMA2_S4CR ; \ DMA2_S4CR_PINC, Peripheral increment mode
    : DMA2_S4CR_CIRC ( -- x addr ) 8 bit DMA2_S4CR ; \ DMA2_S4CR_CIRC, Circular mode
    : DMA2_S4CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S4CR ; \ DMA2_S4CR_DIR, Data transfer direction
    : DMA2_S4CR_PFCTRL ( -- x addr ) 5 bit DMA2_S4CR ; \ DMA2_S4CR_PFCTRL, Peripheral flow controller
    : DMA2_S4CR_TCIE ( -- x addr ) 4 bit DMA2_S4CR ; \ DMA2_S4CR_TCIE, Transfer complete interrupt  enable
    : DMA2_S4CR_HTIE ( -- x addr ) 3 bit DMA2_S4CR ; \ DMA2_S4CR_HTIE, Half transfer interrupt  enable
    : DMA2_S4CR_TEIE ( -- x addr ) 2 bit DMA2_S4CR ; \ DMA2_S4CR_TEIE, Transfer error interrupt  enable
    : DMA2_S4CR_DMEIE ( -- x addr ) 1 bit DMA2_S4CR ; \ DMA2_S4CR_DMEIE, Direct mode error interrupt  enable
    : DMA2_S4CR_EN ( -- x addr ) 0 bit DMA2_S4CR ; \ DMA2_S4CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA2_S4NDTR (read-write) Reset:0x00000000
    : DMA2_S4NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S4NDTR ; \ DMA2_S4NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S4PAR (read-write) Reset:0x00000000
    : DMA2_S4PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S4PAR ; \ DMA2_S4PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA2_S4M0AR (read-write) Reset:0x00000000
    : DMA2_S4M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S4M0AR ; \ DMA2_S4M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S4M1AR (read-write) Reset:0x00000000
    : DMA2_S4M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S4M1AR ; \ DMA2_S4M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA2_S4FCR (multiple-access)  Reset:0x00000021
    : DMA2_S4FCR_FEIE ( -- x addr ) 7 bit DMA2_S4FCR ; \ DMA2_S4FCR_FEIE, FIFO error interrupt  enable
    : DMA2_S4FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S4FCR bit@ ; \ DMA2_S4FCR_FS, FIFO status
    : DMA2_S4FCR_DMDIS ( -- x addr ) 2 bit DMA2_S4FCR ; \ DMA2_S4FCR_DMDIS, Direct mode disable
    : DMA2_S4FCR_FTH ( %bb -- x addr ) DMA2_S4FCR ; \ DMA2_S4FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S5CR (read-write) Reset:0x00000000
    : DMA2_S5CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S5CR ; \ DMA2_S5CR_CHSEL, Channel selection
    : DMA2_S5CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S5CR ; \ DMA2_S5CR_MBURST, Memory burst transfer  configuration
    : DMA2_S5CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S5CR ; \ DMA2_S5CR_PBURST, Peripheral burst transfer  configuration
    : DMA2_S5CR_ACK ( -- x addr ) 20 bit DMA2_S5CR ; \ DMA2_S5CR_ACK, ACK
    : DMA2_S5CR_CT ( -- x addr ) 19 bit DMA2_S5CR ; \ DMA2_S5CR_CT, Current target only in double buffer  mode
    : DMA2_S5CR_DBM ( -- x addr ) 18 bit DMA2_S5CR ; \ DMA2_S5CR_DBM, Double buffer mode
    : DMA2_S5CR_PL ( %bb -- x addr ) 16 lshift DMA2_S5CR ; \ DMA2_S5CR_PL, Priority level
    : DMA2_S5CR_PINCOS ( -- x addr ) 15 bit DMA2_S5CR ; \ DMA2_S5CR_PINCOS, Peripheral increment offset  size
    : DMA2_S5CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S5CR ; \ DMA2_S5CR_MSIZE, Memory data size
    : DMA2_S5CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S5CR ; \ DMA2_S5CR_PSIZE, Peripheral data size
    : DMA2_S5CR_MINC ( -- x addr ) 10 bit DMA2_S5CR ; \ DMA2_S5CR_MINC, Memory increment mode
    : DMA2_S5CR_PINC ( -- x addr ) 9 bit DMA2_S5CR ; \ DMA2_S5CR_PINC, Peripheral increment mode
    : DMA2_S5CR_CIRC ( -- x addr ) 8 bit DMA2_S5CR ; \ DMA2_S5CR_CIRC, Circular mode
    : DMA2_S5CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S5CR ; \ DMA2_S5CR_DIR, Data transfer direction
    : DMA2_S5CR_PFCTRL ( -- x addr ) 5 bit DMA2_S5CR ; \ DMA2_S5CR_PFCTRL, Peripheral flow controller
    : DMA2_S5CR_TCIE ( -- x addr ) 4 bit DMA2_S5CR ; \ DMA2_S5CR_TCIE, Transfer complete interrupt  enable
    : DMA2_S5CR_HTIE ( -- x addr ) 3 bit DMA2_S5CR ; \ DMA2_S5CR_HTIE, Half transfer interrupt  enable
    : DMA2_S5CR_TEIE ( -- x addr ) 2 bit DMA2_S5CR ; \ DMA2_S5CR_TEIE, Transfer error interrupt  enable
    : DMA2_S5CR_DMEIE ( -- x addr ) 1 bit DMA2_S5CR ; \ DMA2_S5CR_DMEIE, Direct mode error interrupt  enable
    : DMA2_S5CR_EN ( -- x addr ) 0 bit DMA2_S5CR ; \ DMA2_S5CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA2_S5NDTR (read-write) Reset:0x00000000
    : DMA2_S5NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S5NDTR ; \ DMA2_S5NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S5PAR (read-write) Reset:0x00000000
    : DMA2_S5PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S5PAR ; \ DMA2_S5PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA2_S5M0AR (read-write) Reset:0x00000000
    : DMA2_S5M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S5M0AR ; \ DMA2_S5M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S5M1AR (read-write) Reset:0x00000000
    : DMA2_S5M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S5M1AR ; \ DMA2_S5M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA2_S5FCR (multiple-access)  Reset:0x00000021
    : DMA2_S5FCR_FEIE ( -- x addr ) 7 bit DMA2_S5FCR ; \ DMA2_S5FCR_FEIE, FIFO error interrupt  enable
    : DMA2_S5FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S5FCR bit@ ; \ DMA2_S5FCR_FS, FIFO status
    : DMA2_S5FCR_DMDIS ( -- x addr ) 2 bit DMA2_S5FCR ; \ DMA2_S5FCR_DMDIS, Direct mode disable
    : DMA2_S5FCR_FTH ( %bb -- x addr ) DMA2_S5FCR ; \ DMA2_S5FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S6CR (read-write) Reset:0x00000000
    : DMA2_S6CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S6CR ; \ DMA2_S6CR_CHSEL, Channel selection
    : DMA2_S6CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S6CR ; \ DMA2_S6CR_MBURST, Memory burst transfer  configuration
    : DMA2_S6CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S6CR ; \ DMA2_S6CR_PBURST, Peripheral burst transfer  configuration
    : DMA2_S6CR_ACK ( -- x addr ) 20 bit DMA2_S6CR ; \ DMA2_S6CR_ACK, ACK
    : DMA2_S6CR_CT ( -- x addr ) 19 bit DMA2_S6CR ; \ DMA2_S6CR_CT, Current target only in double buffer  mode
    : DMA2_S6CR_DBM ( -- x addr ) 18 bit DMA2_S6CR ; \ DMA2_S6CR_DBM, Double buffer mode
    : DMA2_S6CR_PL ( %bb -- x addr ) 16 lshift DMA2_S6CR ; \ DMA2_S6CR_PL, Priority level
    : DMA2_S6CR_PINCOS ( -- x addr ) 15 bit DMA2_S6CR ; \ DMA2_S6CR_PINCOS, Peripheral increment offset  size
    : DMA2_S6CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S6CR ; \ DMA2_S6CR_MSIZE, Memory data size
    : DMA2_S6CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S6CR ; \ DMA2_S6CR_PSIZE, Peripheral data size
    : DMA2_S6CR_MINC ( -- x addr ) 10 bit DMA2_S6CR ; \ DMA2_S6CR_MINC, Memory increment mode
    : DMA2_S6CR_PINC ( -- x addr ) 9 bit DMA2_S6CR ; \ DMA2_S6CR_PINC, Peripheral increment mode
    : DMA2_S6CR_CIRC ( -- x addr ) 8 bit DMA2_S6CR ; \ DMA2_S6CR_CIRC, Circular mode
    : DMA2_S6CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S6CR ; \ DMA2_S6CR_DIR, Data transfer direction
    : DMA2_S6CR_PFCTRL ( -- x addr ) 5 bit DMA2_S6CR ; \ DMA2_S6CR_PFCTRL, Peripheral flow controller
    : DMA2_S6CR_TCIE ( -- x addr ) 4 bit DMA2_S6CR ; \ DMA2_S6CR_TCIE, Transfer complete interrupt  enable
    : DMA2_S6CR_HTIE ( -- x addr ) 3 bit DMA2_S6CR ; \ DMA2_S6CR_HTIE, Half transfer interrupt  enable
    : DMA2_S6CR_TEIE ( -- x addr ) 2 bit DMA2_S6CR ; \ DMA2_S6CR_TEIE, Transfer error interrupt  enable
    : DMA2_S6CR_DMEIE ( -- x addr ) 1 bit DMA2_S6CR ; \ DMA2_S6CR_DMEIE, Direct mode error interrupt  enable
    : DMA2_S6CR_EN ( -- x addr ) 0 bit DMA2_S6CR ; \ DMA2_S6CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA2_S6NDTR (read-write) Reset:0x00000000
    : DMA2_S6NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S6NDTR ; \ DMA2_S6NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S6PAR (read-write) Reset:0x00000000
    : DMA2_S6PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S6PAR ; \ DMA2_S6PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA2_S6M0AR (read-write) Reset:0x00000000
    : DMA2_S6M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S6M0AR ; \ DMA2_S6M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S6M1AR (read-write) Reset:0x00000000
    : DMA2_S6M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S6M1AR ; \ DMA2_S6M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA2_S6FCR (multiple-access)  Reset:0x00000021
    : DMA2_S6FCR_FEIE ( -- x addr ) 7 bit DMA2_S6FCR ; \ DMA2_S6FCR_FEIE, FIFO error interrupt  enable
    : DMA2_S6FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S6FCR bit@ ; \ DMA2_S6FCR_FS, FIFO status
    : DMA2_S6FCR_DMDIS ( -- x addr ) 2 bit DMA2_S6FCR ; \ DMA2_S6FCR_DMDIS, Direct mode disable
    : DMA2_S6FCR_FTH ( %bb -- x addr ) DMA2_S6FCR ; \ DMA2_S6FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S7CR (read-write) Reset:0x00000000
    : DMA2_S7CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA2_S7CR ; \ DMA2_S7CR_CHSEL, Channel selection
    : DMA2_S7CR_MBURST ( %bb -- x addr ) 23 lshift DMA2_S7CR ; \ DMA2_S7CR_MBURST, Memory burst transfer  configuration
    : DMA2_S7CR_PBURST ( %bb -- x addr ) 21 lshift DMA2_S7CR ; \ DMA2_S7CR_PBURST, Peripheral burst transfer  configuration
    : DMA2_S7CR_ACK ( -- x addr ) 20 bit DMA2_S7CR ; \ DMA2_S7CR_ACK, ACK
    : DMA2_S7CR_CT ( -- x addr ) 19 bit DMA2_S7CR ; \ DMA2_S7CR_CT, Current target only in double buffer  mode
    : DMA2_S7CR_DBM ( -- x addr ) 18 bit DMA2_S7CR ; \ DMA2_S7CR_DBM, Double buffer mode
    : DMA2_S7CR_PL ( %bb -- x addr ) 16 lshift DMA2_S7CR ; \ DMA2_S7CR_PL, Priority level
    : DMA2_S7CR_PINCOS ( -- x addr ) 15 bit DMA2_S7CR ; \ DMA2_S7CR_PINCOS, Peripheral increment offset  size
    : DMA2_S7CR_MSIZE ( %bb -- x addr ) 13 lshift DMA2_S7CR ; \ DMA2_S7CR_MSIZE, Memory data size
    : DMA2_S7CR_PSIZE ( %bb -- x addr ) 11 lshift DMA2_S7CR ; \ DMA2_S7CR_PSIZE, Peripheral data size
    : DMA2_S7CR_MINC ( -- x addr ) 10 bit DMA2_S7CR ; \ DMA2_S7CR_MINC, Memory increment mode
    : DMA2_S7CR_PINC ( -- x addr ) 9 bit DMA2_S7CR ; \ DMA2_S7CR_PINC, Peripheral increment mode
    : DMA2_S7CR_CIRC ( -- x addr ) 8 bit DMA2_S7CR ; \ DMA2_S7CR_CIRC, Circular mode
    : DMA2_S7CR_DIR ( %bb -- x addr ) 6 lshift DMA2_S7CR ; \ DMA2_S7CR_DIR, Data transfer direction
    : DMA2_S7CR_PFCTRL ( -- x addr ) 5 bit DMA2_S7CR ; \ DMA2_S7CR_PFCTRL, Peripheral flow controller
    : DMA2_S7CR_TCIE ( -- x addr ) 4 bit DMA2_S7CR ; \ DMA2_S7CR_TCIE, Transfer complete interrupt  enable
    : DMA2_S7CR_HTIE ( -- x addr ) 3 bit DMA2_S7CR ; \ DMA2_S7CR_HTIE, Half transfer interrupt  enable
    : DMA2_S7CR_TEIE ( -- x addr ) 2 bit DMA2_S7CR ; \ DMA2_S7CR_TEIE, Transfer error interrupt  enable
    : DMA2_S7CR_DMEIE ( -- x addr ) 1 bit DMA2_S7CR ; \ DMA2_S7CR_DMEIE, Direct mode error interrupt  enable
    : DMA2_S7CR_EN ( -- x addr ) 0 bit DMA2_S7CR ; \ DMA2_S7CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA2_S7NDTR (read-write) Reset:0x00000000
    : DMA2_S7NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA2_S7NDTR ; \ DMA2_S7NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S7PAR (read-write) Reset:0x00000000
    : DMA2_S7PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S7PAR ; \ DMA2_S7PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA2_S7M0AR (read-write) Reset:0x00000000
    : DMA2_S7M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S7M0AR ; \ DMA2_S7M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA2 [if]
    \ DMA2_S7M1AR (read-write) Reset:0x00000000
    : DMA2_S7M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA2_S7M1AR ; \ DMA2_S7M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA2_S7FCR (multiple-access)  Reset:0x00000021
    : DMA2_S7FCR_FEIE ( -- x addr ) 7 bit DMA2_S7FCR ; \ DMA2_S7FCR_FEIE, FIFO error interrupt  enable
    : DMA2_S7FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA2_S7FCR bit@ ; \ DMA2_S7FCR_FS, FIFO status
    : DMA2_S7FCR_DMDIS ( -- x addr ) 2 bit DMA2_S7FCR ; \ DMA2_S7FCR_DMDIS, Direct mode disable
    : DMA2_S7FCR_FTH ( %bb -- x addr ) DMA2_S7FCR ; \ DMA2_S7FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_LISR (read-only) Reset:0x00000000
    : DMA1_LISR_TCIF3? ( --  1|0 ) 27 bit DMA1_LISR bit@ ; \ DMA1_LISR_TCIF3, Stream x transfer complete interrupt  flag x = 3..0
    : DMA1_LISR_HTIF3? ( --  1|0 ) 26 bit DMA1_LISR bit@ ; \ DMA1_LISR_HTIF3, Stream x half transfer interrupt flag  x=3..0
    : DMA1_LISR_TEIF3? ( --  1|0 ) 25 bit DMA1_LISR bit@ ; \ DMA1_LISR_TEIF3, Stream x transfer error interrupt flag  x=3..0
    : DMA1_LISR_DMEIF3? ( --  1|0 ) 24 bit DMA1_LISR bit@ ; \ DMA1_LISR_DMEIF3, Stream x direct mode error interrupt  flag x=3..0
    : DMA1_LISR_FEIF3? ( --  1|0 ) 22 bit DMA1_LISR bit@ ; \ DMA1_LISR_FEIF3, Stream x FIFO error interrupt flag  x=3..0
    : DMA1_LISR_TCIF2? ( --  1|0 ) 21 bit DMA1_LISR bit@ ; \ DMA1_LISR_TCIF2, Stream x transfer complete interrupt  flag x = 3..0
    : DMA1_LISR_HTIF2? ( --  1|0 ) 20 bit DMA1_LISR bit@ ; \ DMA1_LISR_HTIF2, Stream x half transfer interrupt flag  x=3..0
    : DMA1_LISR_TEIF2? ( --  1|0 ) 19 bit DMA1_LISR bit@ ; \ DMA1_LISR_TEIF2, Stream x transfer error interrupt flag  x=3..0
    : DMA1_LISR_DMEIF2? ( --  1|0 ) 18 bit DMA1_LISR bit@ ; \ DMA1_LISR_DMEIF2, Stream x direct mode error interrupt  flag x=3..0
    : DMA1_LISR_FEIF2? ( --  1|0 ) 16 bit DMA1_LISR bit@ ; \ DMA1_LISR_FEIF2, Stream x FIFO error interrupt flag  x=3..0
    : DMA1_LISR_TCIF1? ( --  1|0 ) 11 bit DMA1_LISR bit@ ; \ DMA1_LISR_TCIF1, Stream x transfer complete interrupt  flag x = 3..0
    : DMA1_LISR_HTIF1? ( --  1|0 ) 10 bit DMA1_LISR bit@ ; \ DMA1_LISR_HTIF1, Stream x half transfer interrupt flag  x=3..0
    : DMA1_LISR_TEIF1? ( --  1|0 ) 9 bit DMA1_LISR bit@ ; \ DMA1_LISR_TEIF1, Stream x transfer error interrupt flag  x=3..0
    : DMA1_LISR_DMEIF1? ( --  1|0 ) 8 bit DMA1_LISR bit@ ; \ DMA1_LISR_DMEIF1, Stream x direct mode error interrupt  flag x=3..0
    : DMA1_LISR_FEIF1? ( --  1|0 ) 6 bit DMA1_LISR bit@ ; \ DMA1_LISR_FEIF1, Stream x FIFO error interrupt flag  x=3..0
    : DMA1_LISR_TCIF0? ( --  1|0 ) 5 bit DMA1_LISR bit@ ; \ DMA1_LISR_TCIF0, Stream x transfer complete interrupt  flag x = 3..0
    : DMA1_LISR_HTIF0? ( --  1|0 ) 4 bit DMA1_LISR bit@ ; \ DMA1_LISR_HTIF0, Stream x half transfer interrupt flag  x=3..0
    : DMA1_LISR_TEIF0? ( --  1|0 ) 3 bit DMA1_LISR bit@ ; \ DMA1_LISR_TEIF0, Stream x transfer error interrupt flag  x=3..0
    : DMA1_LISR_DMEIF0? ( --  1|0 ) 2 bit DMA1_LISR bit@ ; \ DMA1_LISR_DMEIF0, Stream x direct mode error interrupt  flag x=3..0
    : DMA1_LISR_FEIF0? ( --  1|0 ) 0 bit DMA1_LISR bit@ ; \ DMA1_LISR_FEIF0, Stream x FIFO error interrupt flag  x=3..0
  [then]

  [if]
    \ DMA1_HISR (read-only) Reset:0x00000000
    : DMA1_HISR_TCIF7? ( --  1|0 ) 27 bit DMA1_HISR bit@ ; \ DMA1_HISR_TCIF7, Stream x transfer complete interrupt  flag x=7..4
    : DMA1_HISR_HTIF7? ( --  1|0 ) 26 bit DMA1_HISR bit@ ; \ DMA1_HISR_HTIF7, Stream x half transfer interrupt flag  x=7..4
    : DMA1_HISR_TEIF7? ( --  1|0 ) 25 bit DMA1_HISR bit@ ; \ DMA1_HISR_TEIF7, Stream x transfer error interrupt flag  x=7..4
    : DMA1_HISR_DMEIF7? ( --  1|0 ) 24 bit DMA1_HISR bit@ ; \ DMA1_HISR_DMEIF7, Stream x direct mode error interrupt  flag x=7..4
    : DMA1_HISR_FEIF7? ( --  1|0 ) 22 bit DMA1_HISR bit@ ; \ DMA1_HISR_FEIF7, Stream x FIFO error interrupt flag  x=7..4
    : DMA1_HISR_TCIF6? ( --  1|0 ) 21 bit DMA1_HISR bit@ ; \ DMA1_HISR_TCIF6, Stream x transfer complete interrupt  flag x=7..4
    : DMA1_HISR_HTIF6? ( --  1|0 ) 20 bit DMA1_HISR bit@ ; \ DMA1_HISR_HTIF6, Stream x half transfer interrupt flag  x=7..4
    : DMA1_HISR_TEIF6? ( --  1|0 ) 19 bit DMA1_HISR bit@ ; \ DMA1_HISR_TEIF6, Stream x transfer error interrupt flag  x=7..4
    : DMA1_HISR_DMEIF6? ( --  1|0 ) 18 bit DMA1_HISR bit@ ; \ DMA1_HISR_DMEIF6, Stream x direct mode error interrupt  flag x=7..4
    : DMA1_HISR_FEIF6? ( --  1|0 ) 16 bit DMA1_HISR bit@ ; \ DMA1_HISR_FEIF6, Stream x FIFO error interrupt flag  x=7..4
    : DMA1_HISR_TCIF5? ( --  1|0 ) 11 bit DMA1_HISR bit@ ; \ DMA1_HISR_TCIF5, Stream x transfer complete interrupt  flag x=7..4
    : DMA1_HISR_HTIF5? ( --  1|0 ) 10 bit DMA1_HISR bit@ ; \ DMA1_HISR_HTIF5, Stream x half transfer interrupt flag  x=7..4
    : DMA1_HISR_TEIF5? ( --  1|0 ) 9 bit DMA1_HISR bit@ ; \ DMA1_HISR_TEIF5, Stream x transfer error interrupt flag  x=7..4
    : DMA1_HISR_DMEIF5? ( --  1|0 ) 8 bit DMA1_HISR bit@ ; \ DMA1_HISR_DMEIF5, Stream x direct mode error interrupt  flag x=7..4
    : DMA1_HISR_FEIF5? ( --  1|0 ) 6 bit DMA1_HISR bit@ ; \ DMA1_HISR_FEIF5, Stream x FIFO error interrupt flag  x=7..4
    : DMA1_HISR_TCIF4? ( --  1|0 ) 5 bit DMA1_HISR bit@ ; \ DMA1_HISR_TCIF4, Stream x transfer complete interrupt  flag x=7..4
    : DMA1_HISR_HTIF4? ( --  1|0 ) 4 bit DMA1_HISR bit@ ; \ DMA1_HISR_HTIF4, Stream x half transfer interrupt flag  x=7..4
    : DMA1_HISR_TEIF4? ( --  1|0 ) 3 bit DMA1_HISR bit@ ; \ DMA1_HISR_TEIF4, Stream x transfer error interrupt flag  x=7..4
    : DMA1_HISR_DMEIF4? ( --  1|0 ) 2 bit DMA1_HISR bit@ ; \ DMA1_HISR_DMEIF4, Stream x direct mode error interrupt  flag x=7..4
    : DMA1_HISR_FEIF4? ( --  1|0 ) 0 bit DMA1_HISR bit@ ; \ DMA1_HISR_FEIF4, Stream x FIFO error interrupt flag  x=7..4
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_LIFCR (read-write) Reset:0x00000000
    : DMA1_LIFCR_CTCIF3 ( -- x addr ) 27 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTCIF3, Stream x clear transfer complete  interrupt flag x = 3..0
    : DMA1_LIFCR_CHTIF3 ( -- x addr ) 26 bit DMA1_LIFCR ; \ DMA1_LIFCR_CHTIF3, Stream x clear half transfer interrupt  flag x = 3..0
    : DMA1_LIFCR_CTEIF3 ( -- x addr ) 25 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTEIF3, Stream x clear transfer error interrupt  flag x = 3..0
    : DMA1_LIFCR_CDMEIF3 ( -- x addr ) 24 bit DMA1_LIFCR ; \ DMA1_LIFCR_CDMEIF3, Stream x clear direct mode error  interrupt flag x = 3..0
    : DMA1_LIFCR_CFEIF3 ( -- x addr ) 22 bit DMA1_LIFCR ; \ DMA1_LIFCR_CFEIF3, Stream x clear FIFO error interrupt flag  x = 3..0
    : DMA1_LIFCR_CTCIF2 ( -- x addr ) 21 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTCIF2, Stream x clear transfer complete  interrupt flag x = 3..0
    : DMA1_LIFCR_CHTIF2 ( -- x addr ) 20 bit DMA1_LIFCR ; \ DMA1_LIFCR_CHTIF2, Stream x clear half transfer interrupt  flag x = 3..0
    : DMA1_LIFCR_CTEIF2 ( -- x addr ) 19 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTEIF2, Stream x clear transfer error interrupt  flag x = 3..0
    : DMA1_LIFCR_CDMEIF2 ( -- x addr ) 18 bit DMA1_LIFCR ; \ DMA1_LIFCR_CDMEIF2, Stream x clear direct mode error  interrupt flag x = 3..0
    : DMA1_LIFCR_CFEIF2 ( -- x addr ) 16 bit DMA1_LIFCR ; \ DMA1_LIFCR_CFEIF2, Stream x clear FIFO error interrupt flag  x = 3..0
    : DMA1_LIFCR_CTCIF1 ( -- x addr ) 11 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTCIF1, Stream x clear transfer complete  interrupt flag x = 3..0
    : DMA1_LIFCR_CHTIF1 ( -- x addr ) 10 bit DMA1_LIFCR ; \ DMA1_LIFCR_CHTIF1, Stream x clear half transfer interrupt  flag x = 3..0
    : DMA1_LIFCR_CTEIF1 ( -- x addr ) 9 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTEIF1, Stream x clear transfer error interrupt  flag x = 3..0
    : DMA1_LIFCR_CDMEIF1 ( -- x addr ) 8 bit DMA1_LIFCR ; \ DMA1_LIFCR_CDMEIF1, Stream x clear direct mode error  interrupt flag x = 3..0
    : DMA1_LIFCR_CFEIF1 ( -- x addr ) 6 bit DMA1_LIFCR ; \ DMA1_LIFCR_CFEIF1, Stream x clear FIFO error interrupt flag  x = 3..0
    : DMA1_LIFCR_CTCIF0 ( -- x addr ) 5 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTCIF0, Stream x clear transfer complete  interrupt flag x = 3..0
    : DMA1_LIFCR_CHTIF0 ( -- x addr ) 4 bit DMA1_LIFCR ; \ DMA1_LIFCR_CHTIF0, Stream x clear half transfer interrupt  flag x = 3..0
    : DMA1_LIFCR_CTEIF0 ( -- x addr ) 3 bit DMA1_LIFCR ; \ DMA1_LIFCR_CTEIF0, Stream x clear transfer error interrupt  flag x = 3..0
    : DMA1_LIFCR_CDMEIF0 ( -- x addr ) 2 bit DMA1_LIFCR ; \ DMA1_LIFCR_CDMEIF0, Stream x clear direct mode error  interrupt flag x = 3..0
    : DMA1_LIFCR_CFEIF0 ( -- x addr ) 0 bit DMA1_LIFCR ; \ DMA1_LIFCR_CFEIF0, Stream x clear FIFO error interrupt flag  x = 3..0
  [then]

  [if]
    \ DMA1_HIFCR (read-write) Reset:0x00000000
    : DMA1_HIFCR_CTCIF7 ( -- x addr ) 27 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTCIF7, Stream x clear transfer complete  interrupt flag x = 7..4
    : DMA1_HIFCR_CHTIF7 ( -- x addr ) 26 bit DMA1_HIFCR ; \ DMA1_HIFCR_CHTIF7, Stream x clear half transfer interrupt  flag x = 7..4
    : DMA1_HIFCR_CTEIF7 ( -- x addr ) 25 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTEIF7, Stream x clear transfer error interrupt  flag x = 7..4
    : DMA1_HIFCR_CDMEIF7 ( -- x addr ) 24 bit DMA1_HIFCR ; \ DMA1_HIFCR_CDMEIF7, Stream x clear direct mode error  interrupt flag x = 7..4
    : DMA1_HIFCR_CFEIF7 ( -- x addr ) 22 bit DMA1_HIFCR ; \ DMA1_HIFCR_CFEIF7, Stream x clear FIFO error interrupt flag  x = 7..4
    : DMA1_HIFCR_CTCIF6 ( -- x addr ) 21 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTCIF6, Stream x clear transfer complete  interrupt flag x = 7..4
    : DMA1_HIFCR_CHTIF6 ( -- x addr ) 20 bit DMA1_HIFCR ; \ DMA1_HIFCR_CHTIF6, Stream x clear half transfer interrupt  flag x = 7..4
    : DMA1_HIFCR_CTEIF6 ( -- x addr ) 19 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTEIF6, Stream x clear transfer error interrupt  flag x = 7..4
    : DMA1_HIFCR_CDMEIF6 ( -- x addr ) 18 bit DMA1_HIFCR ; \ DMA1_HIFCR_CDMEIF6, Stream x clear direct mode error  interrupt flag x = 7..4
    : DMA1_HIFCR_CFEIF6 ( -- x addr ) 16 bit DMA1_HIFCR ; \ DMA1_HIFCR_CFEIF6, Stream x clear FIFO error interrupt flag  x = 7..4
    : DMA1_HIFCR_CTCIF5 ( -- x addr ) 11 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTCIF5, Stream x clear transfer complete  interrupt flag x = 7..4
    : DMA1_HIFCR_CHTIF5 ( -- x addr ) 10 bit DMA1_HIFCR ; \ DMA1_HIFCR_CHTIF5, Stream x clear half transfer interrupt  flag x = 7..4
    : DMA1_HIFCR_CTEIF5 ( -- x addr ) 9 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTEIF5, Stream x clear transfer error interrupt  flag x = 7..4
    : DMA1_HIFCR_CDMEIF5 ( -- x addr ) 8 bit DMA1_HIFCR ; \ DMA1_HIFCR_CDMEIF5, Stream x clear direct mode error  interrupt flag x = 7..4
    : DMA1_HIFCR_CFEIF5 ( -- x addr ) 6 bit DMA1_HIFCR ; \ DMA1_HIFCR_CFEIF5, Stream x clear FIFO error interrupt flag  x = 7..4
    : DMA1_HIFCR_CTCIF4 ( -- x addr ) 5 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTCIF4, Stream x clear transfer complete  interrupt flag x = 7..4
    : DMA1_HIFCR_CHTIF4 ( -- x addr ) 4 bit DMA1_HIFCR ; \ DMA1_HIFCR_CHTIF4, Stream x clear half transfer interrupt  flag x = 7..4
    : DMA1_HIFCR_CTEIF4 ( -- x addr ) 3 bit DMA1_HIFCR ; \ DMA1_HIFCR_CTEIF4, Stream x clear transfer error interrupt  flag x = 7..4
    : DMA1_HIFCR_CDMEIF4 ( -- x addr ) 2 bit DMA1_HIFCR ; \ DMA1_HIFCR_CDMEIF4, Stream x clear direct mode error  interrupt flag x = 7..4
    : DMA1_HIFCR_CFEIF4 ( -- x addr ) 0 bit DMA1_HIFCR ; \ DMA1_HIFCR_CFEIF4, Stream x clear FIFO error interrupt flag  x = 7..4
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S0CR (read-write) Reset:0x00000000
    : DMA1_S0CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S0CR ; \ DMA1_S0CR_CHSEL, Channel selection
    : DMA1_S0CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S0CR ; \ DMA1_S0CR_MBURST, Memory burst transfer  configuration
    : DMA1_S0CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S0CR ; \ DMA1_S0CR_PBURST, Peripheral burst transfer  configuration
    : DMA1_S0CR_CT ( -- x addr ) 19 bit DMA1_S0CR ; \ DMA1_S0CR_CT, Current target only in double buffer  mode
    : DMA1_S0CR_DBM ( -- x addr ) 18 bit DMA1_S0CR ; \ DMA1_S0CR_DBM, Double buffer mode
    : DMA1_S0CR_PL ( %bb -- x addr ) 16 lshift DMA1_S0CR ; \ DMA1_S0CR_PL, Priority level
    : DMA1_S0CR_PINCOS ( -- x addr ) 15 bit DMA1_S0CR ; \ DMA1_S0CR_PINCOS, Peripheral increment offset  size
    : DMA1_S0CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S0CR ; \ DMA1_S0CR_MSIZE, Memory data size
    : DMA1_S0CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S0CR ; \ DMA1_S0CR_PSIZE, Peripheral data size
    : DMA1_S0CR_MINC ( -- x addr ) 10 bit DMA1_S0CR ; \ DMA1_S0CR_MINC, Memory increment mode
    : DMA1_S0CR_PINC ( -- x addr ) 9 bit DMA1_S0CR ; \ DMA1_S0CR_PINC, Peripheral increment mode
    : DMA1_S0CR_CIRC ( -- x addr ) 8 bit DMA1_S0CR ; \ DMA1_S0CR_CIRC, Circular mode
    : DMA1_S0CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S0CR ; \ DMA1_S0CR_DIR, Data transfer direction
    : DMA1_S0CR_PFCTRL ( -- x addr ) 5 bit DMA1_S0CR ; \ DMA1_S0CR_PFCTRL, Peripheral flow controller
    : DMA1_S0CR_TCIE ( -- x addr ) 4 bit DMA1_S0CR ; \ DMA1_S0CR_TCIE, Transfer complete interrupt  enable
    : DMA1_S0CR_HTIE ( -- x addr ) 3 bit DMA1_S0CR ; \ DMA1_S0CR_HTIE, Half transfer interrupt  enable
    : DMA1_S0CR_TEIE ( -- x addr ) 2 bit DMA1_S0CR ; \ DMA1_S0CR_TEIE, Transfer error interrupt  enable
    : DMA1_S0CR_DMEIE ( -- x addr ) 1 bit DMA1_S0CR ; \ DMA1_S0CR_DMEIE, Direct mode error interrupt  enable
    : DMA1_S0CR_EN ( -- x addr ) 0 bit DMA1_S0CR ; \ DMA1_S0CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA1_S0NDTR (read-write) Reset:0x00000000
    : DMA1_S0NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S0NDTR ; \ DMA1_S0NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S0PAR (read-write) Reset:0x00000000
    : DMA1_S0PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S0PAR ; \ DMA1_S0PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA1_S0M0AR (read-write) Reset:0x00000000
    : DMA1_S0M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S0M0AR ; \ DMA1_S0M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S0M1AR (read-write) Reset:0x00000000
    : DMA1_S0M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S0M1AR ; \ DMA1_S0M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA1_S0FCR (multiple-access)  Reset:0x00000021
    : DMA1_S0FCR_FEIE ( -- x addr ) 7 bit DMA1_S0FCR ; \ DMA1_S0FCR_FEIE, FIFO error interrupt  enable
    : DMA1_S0FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S0FCR bit@ ; \ DMA1_S0FCR_FS, FIFO status
    : DMA1_S0FCR_DMDIS ( -- x addr ) 2 bit DMA1_S0FCR ; \ DMA1_S0FCR_DMDIS, Direct mode disable
    : DMA1_S0FCR_FTH ( %bb -- x addr ) DMA1_S0FCR ; \ DMA1_S0FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S1CR (read-write) Reset:0x00000000
    : DMA1_S1CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S1CR ; \ DMA1_S1CR_CHSEL, Channel selection
    : DMA1_S1CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S1CR ; \ DMA1_S1CR_MBURST, Memory burst transfer  configuration
    : DMA1_S1CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S1CR ; \ DMA1_S1CR_PBURST, Peripheral burst transfer  configuration
    : DMA1_S1CR_ACK ( -- x addr ) 20 bit DMA1_S1CR ; \ DMA1_S1CR_ACK, ACK
    : DMA1_S1CR_CT ( -- x addr ) 19 bit DMA1_S1CR ; \ DMA1_S1CR_CT, Current target only in double buffer  mode
    : DMA1_S1CR_DBM ( -- x addr ) 18 bit DMA1_S1CR ; \ DMA1_S1CR_DBM, Double buffer mode
    : DMA1_S1CR_PL ( %bb -- x addr ) 16 lshift DMA1_S1CR ; \ DMA1_S1CR_PL, Priority level
    : DMA1_S1CR_PINCOS ( -- x addr ) 15 bit DMA1_S1CR ; \ DMA1_S1CR_PINCOS, Peripheral increment offset  size
    : DMA1_S1CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S1CR ; \ DMA1_S1CR_MSIZE, Memory data size
    : DMA1_S1CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S1CR ; \ DMA1_S1CR_PSIZE, Peripheral data size
    : DMA1_S1CR_MINC ( -- x addr ) 10 bit DMA1_S1CR ; \ DMA1_S1CR_MINC, Memory increment mode
    : DMA1_S1CR_PINC ( -- x addr ) 9 bit DMA1_S1CR ; \ DMA1_S1CR_PINC, Peripheral increment mode
    : DMA1_S1CR_CIRC ( -- x addr ) 8 bit DMA1_S1CR ; \ DMA1_S1CR_CIRC, Circular mode
    : DMA1_S1CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S1CR ; \ DMA1_S1CR_DIR, Data transfer direction
    : DMA1_S1CR_PFCTRL ( -- x addr ) 5 bit DMA1_S1CR ; \ DMA1_S1CR_PFCTRL, Peripheral flow controller
    : DMA1_S1CR_TCIE ( -- x addr ) 4 bit DMA1_S1CR ; \ DMA1_S1CR_TCIE, Transfer complete interrupt  enable
    : DMA1_S1CR_HTIE ( -- x addr ) 3 bit DMA1_S1CR ; \ DMA1_S1CR_HTIE, Half transfer interrupt  enable
    : DMA1_S1CR_TEIE ( -- x addr ) 2 bit DMA1_S1CR ; \ DMA1_S1CR_TEIE, Transfer error interrupt  enable
    : DMA1_S1CR_DMEIE ( -- x addr ) 1 bit DMA1_S1CR ; \ DMA1_S1CR_DMEIE, Direct mode error interrupt  enable
    : DMA1_S1CR_EN ( -- x addr ) 0 bit DMA1_S1CR ; \ DMA1_S1CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA1_S1NDTR (read-write) Reset:0x00000000
    : DMA1_S1NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S1NDTR ; \ DMA1_S1NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S1PAR (read-write) Reset:0x00000000
    : DMA1_S1PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S1PAR ; \ DMA1_S1PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA1_S1M0AR (read-write) Reset:0x00000000
    : DMA1_S1M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S1M0AR ; \ DMA1_S1M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S1M1AR (read-write) Reset:0x00000000
    : DMA1_S1M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S1M1AR ; \ DMA1_S1M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA1_S1FCR (multiple-access)  Reset:0x00000021
    : DMA1_S1FCR_FEIE ( -- x addr ) 7 bit DMA1_S1FCR ; \ DMA1_S1FCR_FEIE, FIFO error interrupt  enable
    : DMA1_S1FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S1FCR bit@ ; \ DMA1_S1FCR_FS, FIFO status
    : DMA1_S1FCR_DMDIS ( -- x addr ) 2 bit DMA1_S1FCR ; \ DMA1_S1FCR_DMDIS, Direct mode disable
    : DMA1_S1FCR_FTH ( %bb -- x addr ) DMA1_S1FCR ; \ DMA1_S1FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S2CR (read-write) Reset:0x00000000
    : DMA1_S2CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S2CR ; \ DMA1_S2CR_CHSEL, Channel selection
    : DMA1_S2CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S2CR ; \ DMA1_S2CR_MBURST, Memory burst transfer  configuration
    : DMA1_S2CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S2CR ; \ DMA1_S2CR_PBURST, Peripheral burst transfer  configuration
    : DMA1_S2CR_ACK ( -- x addr ) 20 bit DMA1_S2CR ; \ DMA1_S2CR_ACK, ACK
    : DMA1_S2CR_CT ( -- x addr ) 19 bit DMA1_S2CR ; \ DMA1_S2CR_CT, Current target only in double buffer  mode
    : DMA1_S2CR_DBM ( -- x addr ) 18 bit DMA1_S2CR ; \ DMA1_S2CR_DBM, Double buffer mode
    : DMA1_S2CR_PL ( %bb -- x addr ) 16 lshift DMA1_S2CR ; \ DMA1_S2CR_PL, Priority level
    : DMA1_S2CR_PINCOS ( -- x addr ) 15 bit DMA1_S2CR ; \ DMA1_S2CR_PINCOS, Peripheral increment offset  size
    : DMA1_S2CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S2CR ; \ DMA1_S2CR_MSIZE, Memory data size
    : DMA1_S2CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S2CR ; \ DMA1_S2CR_PSIZE, Peripheral data size
    : DMA1_S2CR_MINC ( -- x addr ) 10 bit DMA1_S2CR ; \ DMA1_S2CR_MINC, Memory increment mode
    : DMA1_S2CR_PINC ( -- x addr ) 9 bit DMA1_S2CR ; \ DMA1_S2CR_PINC, Peripheral increment mode
    : DMA1_S2CR_CIRC ( -- x addr ) 8 bit DMA1_S2CR ; \ DMA1_S2CR_CIRC, Circular mode
    : DMA1_S2CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S2CR ; \ DMA1_S2CR_DIR, Data transfer direction
    : DMA1_S2CR_PFCTRL ( -- x addr ) 5 bit DMA1_S2CR ; \ DMA1_S2CR_PFCTRL, Peripheral flow controller
    : DMA1_S2CR_TCIE ( -- x addr ) 4 bit DMA1_S2CR ; \ DMA1_S2CR_TCIE, Transfer complete interrupt  enable
    : DMA1_S2CR_HTIE ( -- x addr ) 3 bit DMA1_S2CR ; \ DMA1_S2CR_HTIE, Half transfer interrupt  enable
    : DMA1_S2CR_TEIE ( -- x addr ) 2 bit DMA1_S2CR ; \ DMA1_S2CR_TEIE, Transfer error interrupt  enable
    : DMA1_S2CR_DMEIE ( -- x addr ) 1 bit DMA1_S2CR ; \ DMA1_S2CR_DMEIE, Direct mode error interrupt  enable
    : DMA1_S2CR_EN ( -- x addr ) 0 bit DMA1_S2CR ; \ DMA1_S2CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA1_S2NDTR (read-write) Reset:0x00000000
    : DMA1_S2NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S2NDTR ; \ DMA1_S2NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S2PAR (read-write) Reset:0x00000000
    : DMA1_S2PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S2PAR ; \ DMA1_S2PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA1_S2M0AR (read-write) Reset:0x00000000
    : DMA1_S2M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S2M0AR ; \ DMA1_S2M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S2M1AR (read-write) Reset:0x00000000
    : DMA1_S2M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S2M1AR ; \ DMA1_S2M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA1_S2FCR (multiple-access)  Reset:0x00000021
    : DMA1_S2FCR_FEIE ( -- x addr ) 7 bit DMA1_S2FCR ; \ DMA1_S2FCR_FEIE, FIFO error interrupt  enable
    : DMA1_S2FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S2FCR bit@ ; \ DMA1_S2FCR_FS, FIFO status
    : DMA1_S2FCR_DMDIS ( -- x addr ) 2 bit DMA1_S2FCR ; \ DMA1_S2FCR_DMDIS, Direct mode disable
    : DMA1_S2FCR_FTH ( %bb -- x addr ) DMA1_S2FCR ; \ DMA1_S2FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S3CR (read-write) Reset:0x00000000
    : DMA1_S3CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S3CR ; \ DMA1_S3CR_CHSEL, Channel selection
    : DMA1_S3CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S3CR ; \ DMA1_S3CR_MBURST, Memory burst transfer  configuration
    : DMA1_S3CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S3CR ; \ DMA1_S3CR_PBURST, Peripheral burst transfer  configuration
    : DMA1_S3CR_ACK ( -- x addr ) 20 bit DMA1_S3CR ; \ DMA1_S3CR_ACK, ACK
    : DMA1_S3CR_CT ( -- x addr ) 19 bit DMA1_S3CR ; \ DMA1_S3CR_CT, Current target only in double buffer  mode
    : DMA1_S3CR_DBM ( -- x addr ) 18 bit DMA1_S3CR ; \ DMA1_S3CR_DBM, Double buffer mode
    : DMA1_S3CR_PL ( %bb -- x addr ) 16 lshift DMA1_S3CR ; \ DMA1_S3CR_PL, Priority level
    : DMA1_S3CR_PINCOS ( -- x addr ) 15 bit DMA1_S3CR ; \ DMA1_S3CR_PINCOS, Peripheral increment offset  size
    : DMA1_S3CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S3CR ; \ DMA1_S3CR_MSIZE, Memory data size
    : DMA1_S3CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S3CR ; \ DMA1_S3CR_PSIZE, Peripheral data size
    : DMA1_S3CR_MINC ( -- x addr ) 10 bit DMA1_S3CR ; \ DMA1_S3CR_MINC, Memory increment mode
    : DMA1_S3CR_PINC ( -- x addr ) 9 bit DMA1_S3CR ; \ DMA1_S3CR_PINC, Peripheral increment mode
    : DMA1_S3CR_CIRC ( -- x addr ) 8 bit DMA1_S3CR ; \ DMA1_S3CR_CIRC, Circular mode
    : DMA1_S3CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S3CR ; \ DMA1_S3CR_DIR, Data transfer direction
    : DMA1_S3CR_PFCTRL ( -- x addr ) 5 bit DMA1_S3CR ; \ DMA1_S3CR_PFCTRL, Peripheral flow controller
    : DMA1_S3CR_TCIE ( -- x addr ) 4 bit DMA1_S3CR ; \ DMA1_S3CR_TCIE, Transfer complete interrupt  enable
    : DMA1_S3CR_HTIE ( -- x addr ) 3 bit DMA1_S3CR ; \ DMA1_S3CR_HTIE, Half transfer interrupt  enable
    : DMA1_S3CR_TEIE ( -- x addr ) 2 bit DMA1_S3CR ; \ DMA1_S3CR_TEIE, Transfer error interrupt  enable
    : DMA1_S3CR_DMEIE ( -- x addr ) 1 bit DMA1_S3CR ; \ DMA1_S3CR_DMEIE, Direct mode error interrupt  enable
    : DMA1_S3CR_EN ( -- x addr ) 0 bit DMA1_S3CR ; \ DMA1_S3CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA1_S3NDTR (read-write) Reset:0x00000000
    : DMA1_S3NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S3NDTR ; \ DMA1_S3NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S3PAR (read-write) Reset:0x00000000
    : DMA1_S3PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S3PAR ; \ DMA1_S3PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA1_S3M0AR (read-write) Reset:0x00000000
    : DMA1_S3M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S3M0AR ; \ DMA1_S3M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S3M1AR (read-write) Reset:0x00000000
    : DMA1_S3M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S3M1AR ; \ DMA1_S3M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA1_S3FCR (multiple-access)  Reset:0x00000021
    : DMA1_S3FCR_FEIE ( -- x addr ) 7 bit DMA1_S3FCR ; \ DMA1_S3FCR_FEIE, FIFO error interrupt  enable
    : DMA1_S3FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S3FCR bit@ ; \ DMA1_S3FCR_FS, FIFO status
    : DMA1_S3FCR_DMDIS ( -- x addr ) 2 bit DMA1_S3FCR ; \ DMA1_S3FCR_DMDIS, Direct mode disable
    : DMA1_S3FCR_FTH ( %bb -- x addr ) DMA1_S3FCR ; \ DMA1_S3FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S4CR (read-write) Reset:0x00000000
    : DMA1_S4CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S4CR ; \ DMA1_S4CR_CHSEL, Channel selection
    : DMA1_S4CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S4CR ; \ DMA1_S4CR_MBURST, Memory burst transfer  configuration
    : DMA1_S4CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S4CR ; \ DMA1_S4CR_PBURST, Peripheral burst transfer  configuration
    : DMA1_S4CR_ACK ( -- x addr ) 20 bit DMA1_S4CR ; \ DMA1_S4CR_ACK, ACK
    : DMA1_S4CR_CT ( -- x addr ) 19 bit DMA1_S4CR ; \ DMA1_S4CR_CT, Current target only in double buffer  mode
    : DMA1_S4CR_DBM ( -- x addr ) 18 bit DMA1_S4CR ; \ DMA1_S4CR_DBM, Double buffer mode
    : DMA1_S4CR_PL ( %bb -- x addr ) 16 lshift DMA1_S4CR ; \ DMA1_S4CR_PL, Priority level
    : DMA1_S4CR_PINCOS ( -- x addr ) 15 bit DMA1_S4CR ; \ DMA1_S4CR_PINCOS, Peripheral increment offset  size
    : DMA1_S4CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S4CR ; \ DMA1_S4CR_MSIZE, Memory data size
    : DMA1_S4CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S4CR ; \ DMA1_S4CR_PSIZE, Peripheral data size
    : DMA1_S4CR_MINC ( -- x addr ) 10 bit DMA1_S4CR ; \ DMA1_S4CR_MINC, Memory increment mode
    : DMA1_S4CR_PINC ( -- x addr ) 9 bit DMA1_S4CR ; \ DMA1_S4CR_PINC, Peripheral increment mode
    : DMA1_S4CR_CIRC ( -- x addr ) 8 bit DMA1_S4CR ; \ DMA1_S4CR_CIRC, Circular mode
    : DMA1_S4CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S4CR ; \ DMA1_S4CR_DIR, Data transfer direction
    : DMA1_S4CR_PFCTRL ( -- x addr ) 5 bit DMA1_S4CR ; \ DMA1_S4CR_PFCTRL, Peripheral flow controller
    : DMA1_S4CR_TCIE ( -- x addr ) 4 bit DMA1_S4CR ; \ DMA1_S4CR_TCIE, Transfer complete interrupt  enable
    : DMA1_S4CR_HTIE ( -- x addr ) 3 bit DMA1_S4CR ; \ DMA1_S4CR_HTIE, Half transfer interrupt  enable
    : DMA1_S4CR_TEIE ( -- x addr ) 2 bit DMA1_S4CR ; \ DMA1_S4CR_TEIE, Transfer error interrupt  enable
    : DMA1_S4CR_DMEIE ( -- x addr ) 1 bit DMA1_S4CR ; \ DMA1_S4CR_DMEIE, Direct mode error interrupt  enable
    : DMA1_S4CR_EN ( -- x addr ) 0 bit DMA1_S4CR ; \ DMA1_S4CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA1_S4NDTR (read-write) Reset:0x00000000
    : DMA1_S4NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S4NDTR ; \ DMA1_S4NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S4PAR (read-write) Reset:0x00000000
    : DMA1_S4PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S4PAR ; \ DMA1_S4PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA1_S4M0AR (read-write) Reset:0x00000000
    : DMA1_S4M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S4M0AR ; \ DMA1_S4M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S4M1AR (read-write) Reset:0x00000000
    : DMA1_S4M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S4M1AR ; \ DMA1_S4M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA1_S4FCR (multiple-access)  Reset:0x00000021
    : DMA1_S4FCR_FEIE ( -- x addr ) 7 bit DMA1_S4FCR ; \ DMA1_S4FCR_FEIE, FIFO error interrupt  enable
    : DMA1_S4FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S4FCR bit@ ; \ DMA1_S4FCR_FS, FIFO status
    : DMA1_S4FCR_DMDIS ( -- x addr ) 2 bit DMA1_S4FCR ; \ DMA1_S4FCR_DMDIS, Direct mode disable
    : DMA1_S4FCR_FTH ( %bb -- x addr ) DMA1_S4FCR ; \ DMA1_S4FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S5CR (read-write) Reset:0x00000000
    : DMA1_S5CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S5CR ; \ DMA1_S5CR_CHSEL, Channel selection
    : DMA1_S5CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S5CR ; \ DMA1_S5CR_MBURST, Memory burst transfer  configuration
    : DMA1_S5CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S5CR ; \ DMA1_S5CR_PBURST, Peripheral burst transfer  configuration
    : DMA1_S5CR_ACK ( -- x addr ) 20 bit DMA1_S5CR ; \ DMA1_S5CR_ACK, ACK
    : DMA1_S5CR_CT ( -- x addr ) 19 bit DMA1_S5CR ; \ DMA1_S5CR_CT, Current target only in double buffer  mode
    : DMA1_S5CR_DBM ( -- x addr ) 18 bit DMA1_S5CR ; \ DMA1_S5CR_DBM, Double buffer mode
    : DMA1_S5CR_PL ( %bb -- x addr ) 16 lshift DMA1_S5CR ; \ DMA1_S5CR_PL, Priority level
    : DMA1_S5CR_PINCOS ( -- x addr ) 15 bit DMA1_S5CR ; \ DMA1_S5CR_PINCOS, Peripheral increment offset  size
    : DMA1_S5CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S5CR ; \ DMA1_S5CR_MSIZE, Memory data size
    : DMA1_S5CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S5CR ; \ DMA1_S5CR_PSIZE, Peripheral data size
    : DMA1_S5CR_MINC ( -- x addr ) 10 bit DMA1_S5CR ; \ DMA1_S5CR_MINC, Memory increment mode
    : DMA1_S5CR_PINC ( -- x addr ) 9 bit DMA1_S5CR ; \ DMA1_S5CR_PINC, Peripheral increment mode
    : DMA1_S5CR_CIRC ( -- x addr ) 8 bit DMA1_S5CR ; \ DMA1_S5CR_CIRC, Circular mode
    : DMA1_S5CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S5CR ; \ DMA1_S5CR_DIR, Data transfer direction
    : DMA1_S5CR_PFCTRL ( -- x addr ) 5 bit DMA1_S5CR ; \ DMA1_S5CR_PFCTRL, Peripheral flow controller
    : DMA1_S5CR_TCIE ( -- x addr ) 4 bit DMA1_S5CR ; \ DMA1_S5CR_TCIE, Transfer complete interrupt  enable
    : DMA1_S5CR_HTIE ( -- x addr ) 3 bit DMA1_S5CR ; \ DMA1_S5CR_HTIE, Half transfer interrupt  enable
    : DMA1_S5CR_TEIE ( -- x addr ) 2 bit DMA1_S5CR ; \ DMA1_S5CR_TEIE, Transfer error interrupt  enable
    : DMA1_S5CR_DMEIE ( -- x addr ) 1 bit DMA1_S5CR ; \ DMA1_S5CR_DMEIE, Direct mode error interrupt  enable
    : DMA1_S5CR_EN ( -- x addr ) 0 bit DMA1_S5CR ; \ DMA1_S5CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA1_S5NDTR (read-write) Reset:0x00000000
    : DMA1_S5NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S5NDTR ; \ DMA1_S5NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S5PAR (read-write) Reset:0x00000000
    : DMA1_S5PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S5PAR ; \ DMA1_S5PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA1_S5M0AR (read-write) Reset:0x00000000
    : DMA1_S5M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S5M0AR ; \ DMA1_S5M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S5M1AR (read-write) Reset:0x00000000
    : DMA1_S5M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S5M1AR ; \ DMA1_S5M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA1_S5FCR (multiple-access)  Reset:0x00000021
    : DMA1_S5FCR_FEIE ( -- x addr ) 7 bit DMA1_S5FCR ; \ DMA1_S5FCR_FEIE, FIFO error interrupt  enable
    : DMA1_S5FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S5FCR bit@ ; \ DMA1_S5FCR_FS, FIFO status
    : DMA1_S5FCR_DMDIS ( -- x addr ) 2 bit DMA1_S5FCR ; \ DMA1_S5FCR_DMDIS, Direct mode disable
    : DMA1_S5FCR_FTH ( %bb -- x addr ) DMA1_S5FCR ; \ DMA1_S5FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S6CR (read-write) Reset:0x00000000
    : DMA1_S6CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S6CR ; \ DMA1_S6CR_CHSEL, Channel selection
    : DMA1_S6CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S6CR ; \ DMA1_S6CR_MBURST, Memory burst transfer  configuration
    : DMA1_S6CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S6CR ; \ DMA1_S6CR_PBURST, Peripheral burst transfer  configuration
    : DMA1_S6CR_ACK ( -- x addr ) 20 bit DMA1_S6CR ; \ DMA1_S6CR_ACK, ACK
    : DMA1_S6CR_CT ( -- x addr ) 19 bit DMA1_S6CR ; \ DMA1_S6CR_CT, Current target only in double buffer  mode
    : DMA1_S6CR_DBM ( -- x addr ) 18 bit DMA1_S6CR ; \ DMA1_S6CR_DBM, Double buffer mode
    : DMA1_S6CR_PL ( %bb -- x addr ) 16 lshift DMA1_S6CR ; \ DMA1_S6CR_PL, Priority level
    : DMA1_S6CR_PINCOS ( -- x addr ) 15 bit DMA1_S6CR ; \ DMA1_S6CR_PINCOS, Peripheral increment offset  size
    : DMA1_S6CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S6CR ; \ DMA1_S6CR_MSIZE, Memory data size
    : DMA1_S6CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S6CR ; \ DMA1_S6CR_PSIZE, Peripheral data size
    : DMA1_S6CR_MINC ( -- x addr ) 10 bit DMA1_S6CR ; \ DMA1_S6CR_MINC, Memory increment mode
    : DMA1_S6CR_PINC ( -- x addr ) 9 bit DMA1_S6CR ; \ DMA1_S6CR_PINC, Peripheral increment mode
    : DMA1_S6CR_CIRC ( -- x addr ) 8 bit DMA1_S6CR ; \ DMA1_S6CR_CIRC, Circular mode
    : DMA1_S6CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S6CR ; \ DMA1_S6CR_DIR, Data transfer direction
    : DMA1_S6CR_PFCTRL ( -- x addr ) 5 bit DMA1_S6CR ; \ DMA1_S6CR_PFCTRL, Peripheral flow controller
    : DMA1_S6CR_TCIE ( -- x addr ) 4 bit DMA1_S6CR ; \ DMA1_S6CR_TCIE, Transfer complete interrupt  enable
    : DMA1_S6CR_HTIE ( -- x addr ) 3 bit DMA1_S6CR ; \ DMA1_S6CR_HTIE, Half transfer interrupt  enable
    : DMA1_S6CR_TEIE ( -- x addr ) 2 bit DMA1_S6CR ; \ DMA1_S6CR_TEIE, Transfer error interrupt  enable
    : DMA1_S6CR_DMEIE ( -- x addr ) 1 bit DMA1_S6CR ; \ DMA1_S6CR_DMEIE, Direct mode error interrupt  enable
    : DMA1_S6CR_EN ( -- x addr ) 0 bit DMA1_S6CR ; \ DMA1_S6CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA1_S6NDTR (read-write) Reset:0x00000000
    : DMA1_S6NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S6NDTR ; \ DMA1_S6NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S6PAR (read-write) Reset:0x00000000
    : DMA1_S6PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S6PAR ; \ DMA1_S6PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA1_S6M0AR (read-write) Reset:0x00000000
    : DMA1_S6M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S6M0AR ; \ DMA1_S6M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S6M1AR (read-write) Reset:0x00000000
    : DMA1_S6M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S6M1AR ; \ DMA1_S6M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA1_S6FCR (multiple-access)  Reset:0x00000021
    : DMA1_S6FCR_FEIE ( -- x addr ) 7 bit DMA1_S6FCR ; \ DMA1_S6FCR_FEIE, FIFO error interrupt  enable
    : DMA1_S6FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S6FCR bit@ ; \ DMA1_S6FCR_FS, FIFO status
    : DMA1_S6FCR_DMDIS ( -- x addr ) 2 bit DMA1_S6FCR ; \ DMA1_S6FCR_DMDIS, Direct mode disable
    : DMA1_S6FCR_FTH ( %bb -- x addr ) DMA1_S6FCR ; \ DMA1_S6FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S7CR (read-write) Reset:0x00000000
    : DMA1_S7CR_CHSEL ( %bbb -- x addr ) 25 lshift DMA1_S7CR ; \ DMA1_S7CR_CHSEL, Channel selection
    : DMA1_S7CR_MBURST ( %bb -- x addr ) 23 lshift DMA1_S7CR ; \ DMA1_S7CR_MBURST, Memory burst transfer  configuration
    : DMA1_S7CR_PBURST ( %bb -- x addr ) 21 lshift DMA1_S7CR ; \ DMA1_S7CR_PBURST, Peripheral burst transfer  configuration
    : DMA1_S7CR_ACK ( -- x addr ) 20 bit DMA1_S7CR ; \ DMA1_S7CR_ACK, ACK
    : DMA1_S7CR_CT ( -- x addr ) 19 bit DMA1_S7CR ; \ DMA1_S7CR_CT, Current target only in double buffer  mode
    : DMA1_S7CR_DBM ( -- x addr ) 18 bit DMA1_S7CR ; \ DMA1_S7CR_DBM, Double buffer mode
    : DMA1_S7CR_PL ( %bb -- x addr ) 16 lshift DMA1_S7CR ; \ DMA1_S7CR_PL, Priority level
    : DMA1_S7CR_PINCOS ( -- x addr ) 15 bit DMA1_S7CR ; \ DMA1_S7CR_PINCOS, Peripheral increment offset  size
    : DMA1_S7CR_MSIZE ( %bb -- x addr ) 13 lshift DMA1_S7CR ; \ DMA1_S7CR_MSIZE, Memory data size
    : DMA1_S7CR_PSIZE ( %bb -- x addr ) 11 lshift DMA1_S7CR ; \ DMA1_S7CR_PSIZE, Peripheral data size
    : DMA1_S7CR_MINC ( -- x addr ) 10 bit DMA1_S7CR ; \ DMA1_S7CR_MINC, Memory increment mode
    : DMA1_S7CR_PINC ( -- x addr ) 9 bit DMA1_S7CR ; \ DMA1_S7CR_PINC, Peripheral increment mode
    : DMA1_S7CR_CIRC ( -- x addr ) 8 bit DMA1_S7CR ; \ DMA1_S7CR_CIRC, Circular mode
    : DMA1_S7CR_DIR ( %bb -- x addr ) 6 lshift DMA1_S7CR ; \ DMA1_S7CR_DIR, Data transfer direction
    : DMA1_S7CR_PFCTRL ( -- x addr ) 5 bit DMA1_S7CR ; \ DMA1_S7CR_PFCTRL, Peripheral flow controller
    : DMA1_S7CR_TCIE ( -- x addr ) 4 bit DMA1_S7CR ; \ DMA1_S7CR_TCIE, Transfer complete interrupt  enable
    : DMA1_S7CR_HTIE ( -- x addr ) 3 bit DMA1_S7CR ; \ DMA1_S7CR_HTIE, Half transfer interrupt  enable
    : DMA1_S7CR_TEIE ( -- x addr ) 2 bit DMA1_S7CR ; \ DMA1_S7CR_TEIE, Transfer error interrupt  enable
    : DMA1_S7CR_DMEIE ( -- x addr ) 1 bit DMA1_S7CR ; \ DMA1_S7CR_DMEIE, Direct mode error interrupt  enable
    : DMA1_S7CR_EN ( -- x addr ) 0 bit DMA1_S7CR ; \ DMA1_S7CR_EN, Stream enable / flag stream ready when  read low
  [then]

  [if]
    \ DMA1_S7NDTR (read-write) Reset:0x00000000
    : DMA1_S7NDTR_NDT ( %bbbbbbbbbbbbbbbb -- x addr ) DMA1_S7NDTR ; \ DMA1_S7NDTR_NDT, Number of data items to  transfer
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S7PAR (read-write) Reset:0x00000000
    : DMA1_S7PAR_PA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S7PAR ; \ DMA1_S7PAR_PA, Peripheral address
  [then]

  [if]
    \ DMA1_S7M0AR (read-write) Reset:0x00000000
    : DMA1_S7M0AR_M0A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S7M0AR ; \ DMA1_S7M0AR_M0A, Memory 0 address
  [then]

  execute-defined? use-DMA1 [if]
    \ DMA1_S7M1AR (read-write) Reset:0x00000000
    : DMA1_S7M1AR_M1A ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) DMA1_S7M1AR ; \ DMA1_S7M1AR_M1A, Memory 1 address used in case of Double  buffer mode
  [then]

  [if]
    \ DMA1_S7FCR (multiple-access)  Reset:0x00000021
    : DMA1_S7FCR_FEIE ( -- x addr ) 7 bit DMA1_S7FCR ; \ DMA1_S7FCR_FEIE, FIFO error interrupt  enable
    : DMA1_S7FCR_FS? ( %bbb -- 1|0 ) 3 lshift DMA1_S7FCR bit@ ; \ DMA1_S7FCR_FS, FIFO status
    : DMA1_S7FCR_DMDIS ( -- x addr ) 2 bit DMA1_S7FCR ; \ DMA1_S7FCR_DMDIS, Direct mode disable
    : DMA1_S7FCR_FTH ( %bb -- x addr ) DMA1_S7FCR ; \ DMA1_S7FCR_FTH, FIFO threshold selection
  [then]

  execute-defined? use-RCC [if]
    \ RCC_CR (multiple-access)  Reset:0x00000083
    : RCC_CR_PLLI2SRDY? ( -- 1|0 ) 27 bit RCC_CR bit@ ; \ RCC_CR_PLLI2SRDY, PLLI2S clock ready flag
    : RCC_CR_PLLI2SON ( -- x addr ) 26 bit RCC_CR ; \ RCC_CR_PLLI2SON, PLLI2S enable
    : RCC_CR_PLLRDY? ( -- 1|0 ) 25 bit RCC_CR bit@ ; \ RCC_CR_PLLRDY, Main PLL PLL clock ready  flag
    : RCC_CR_PLLON ( -- x addr ) 24 bit RCC_CR ; \ RCC_CR_PLLON, Main PLL PLL enable
    : RCC_CR_CSSON ( -- x addr ) 19 bit RCC_CR ; \ RCC_CR_CSSON, Clock security system  enable
    : RCC_CR_HSEBYP ( -- x addr ) 18 bit RCC_CR ; \ RCC_CR_HSEBYP, HSE clock bypass
    : RCC_CR_HSERDY? ( -- 1|0 ) 17 bit RCC_CR bit@ ; \ RCC_CR_HSERDY, HSE clock ready flag
    : RCC_CR_HSEON ( -- x addr ) 16 bit RCC_CR ; \ RCC_CR_HSEON, HSE clock enable
    : RCC_CR_HSICAL ( %bbbbbbbb -- x addr ) 8 lshift RCC_CR ; \ RCC_CR_HSICAL, Internal high-speed clock  calibration
    : RCC_CR_HSITRIM ( %bbbbb -- x addr ) 3 lshift RCC_CR ; \ RCC_CR_HSITRIM, Internal high-speed clock  trimming
    : RCC_CR_HSIRDY? ( -- 1|0 ) 1 bit RCC_CR bit@ ; \ RCC_CR_HSIRDY, Internal high-speed clock ready  flag
    : RCC_CR_HSION ( -- x addr ) 0 bit RCC_CR ; \ RCC_CR_HSION, Internal high-speed clock  enable
  [then]

  [if]
    \ RCC_PLLCFGR (read-write) Reset:0x24003010
    : RCC_PLLCFGR_PLLQ3 ( -- x addr ) 27 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLQ3, Main PLL PLL division factor for USB  OTG FS, SDIO and random number generator  clocks
    : RCC_PLLCFGR_PLLQ2 ( -- x addr ) 26 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLQ2, Main PLL PLL division factor for USB  OTG FS, SDIO and random number generator  clocks
    : RCC_PLLCFGR_PLLQ1 ( -- x addr ) 25 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLQ1, Main PLL PLL division factor for USB  OTG FS, SDIO and random number generator  clocks
    : RCC_PLLCFGR_PLLQ0 ( -- x addr ) 24 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLQ0, Main PLL PLL division factor for USB  OTG FS, SDIO and random number generator  clocks
    : RCC_PLLCFGR_PLLSRC ( -- x addr ) 22 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLSRC, Main PLLPLL and audio PLL PLLI2S  entry clock source
    : RCC_PLLCFGR_PLLP1 ( -- x addr ) 17 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLP1, Main PLL PLL division factor for main  system clock
    : RCC_PLLCFGR_PLLP0 ( -- x addr ) 16 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLP0, Main PLL PLL division factor for main  system clock
    : RCC_PLLCFGR_PLLN8 ( -- x addr ) 14 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN8, Main PLL PLL multiplication factor for  VCO
    : RCC_PLLCFGR_PLLN7 ( -- x addr ) 13 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN7, Main PLL PLL multiplication factor for  VCO
    : RCC_PLLCFGR_PLLN6 ( -- x addr ) 12 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN6, Main PLL PLL multiplication factor for  VCO
    : RCC_PLLCFGR_PLLN5 ( -- x addr ) 11 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN5, Main PLL PLL multiplication factor for  VCO
    : RCC_PLLCFGR_PLLN4 ( -- x addr ) 10 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN4, Main PLL PLL multiplication factor for  VCO
    : RCC_PLLCFGR_PLLN3 ( -- x addr ) 9 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN3, Main PLL PLL multiplication factor for  VCO
    : RCC_PLLCFGR_PLLN2 ( -- x addr ) 8 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN2, Main PLL PLL multiplication factor for  VCO
    : RCC_PLLCFGR_PLLN1 ( -- x addr ) 7 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN1, Main PLL PLL multiplication factor for  VCO
    : RCC_PLLCFGR_PLLN0 ( -- x addr ) 6 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLN0, Main PLL PLL multiplication factor for  VCO
    : RCC_PLLCFGR_PLLM5 ( -- x addr ) 5 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM5, Division factor for the main PLL PLL  and audio PLL PLLI2S input clock
    : RCC_PLLCFGR_PLLM4 ( -- x addr ) 4 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM4, Division factor for the main PLL PLL  and audio PLL PLLI2S input clock
    : RCC_PLLCFGR_PLLM3 ( -- x addr ) 3 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM3, Division factor for the main PLL PLL  and audio PLL PLLI2S input clock
    : RCC_PLLCFGR_PLLM2 ( -- x addr ) 2 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM2, Division factor for the main PLL PLL  and audio PLL PLLI2S input clock
    : RCC_PLLCFGR_PLLM1 ( -- x addr ) 1 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM1, Division factor for the main PLL PLL  and audio PLL PLLI2S input clock
    : RCC_PLLCFGR_PLLM0 ( -- x addr ) 0 bit RCC_PLLCFGR ; \ RCC_PLLCFGR_PLLM0, Division factor for the main PLL PLL  and audio PLL PLLI2S input clock
  [then]

  execute-defined? use-RCC [if]
    \ RCC_CFGR (multiple-access)  Reset:0x00000000
    : RCC_CFGR_MCO2 ( %bb -- x addr ) 30 lshift RCC_CFGR ; \ RCC_CFGR_MCO2, Microcontroller clock output  2
    : RCC_CFGR_MCO2PRE ( %bbb -- x addr ) 27 lshift RCC_CFGR ; \ RCC_CFGR_MCO2PRE, MCO2 prescaler
    : RCC_CFGR_MCO1PRE ( %bbb -- x addr ) 24 lshift RCC_CFGR ; \ RCC_CFGR_MCO1PRE, MCO1 prescaler
    : RCC_CFGR_I2SSRC ( -- x addr ) 23 bit RCC_CFGR ; \ RCC_CFGR_I2SSRC, I2S clock selection
    : RCC_CFGR_MCO1 ( %bb -- x addr ) 21 lshift RCC_CFGR ; \ RCC_CFGR_MCO1, Microcontroller clock output  1
    : RCC_CFGR_RTCPRE ( %bbbbb -- x addr ) 16 lshift RCC_CFGR ; \ RCC_CFGR_RTCPRE, HSE division factor for RTC  clock
    : RCC_CFGR_PPRE2 ( %bbb -- x addr ) 13 lshift RCC_CFGR ; \ RCC_CFGR_PPRE2, APB high-speed prescaler  APB2
    : RCC_CFGR_PPRE1 ( %bbb -- x addr ) 10 lshift RCC_CFGR ; \ RCC_CFGR_PPRE1, APB Low speed prescaler  APB1
    : RCC_CFGR_HPRE ( %bbbb -- x addr ) 4 lshift RCC_CFGR ; \ RCC_CFGR_HPRE, AHB prescaler
    : RCC_CFGR_SWS1? ( -- 1|0 ) 3 bit RCC_CFGR bit@ ; \ RCC_CFGR_SWS1, System clock switch status
    : RCC_CFGR_SWS0? ( -- 1|0 ) 2 bit RCC_CFGR bit@ ; \ RCC_CFGR_SWS0, System clock switch status
    : RCC_CFGR_SW1 ( -- x addr ) 1 bit RCC_CFGR ; \ RCC_CFGR_SW1, System clock switch
    : RCC_CFGR_SW0 ( -- x addr ) 0 bit RCC_CFGR ; \ RCC_CFGR_SW0, System clock switch
  [then]

  [if]
    \ RCC_CIR (multiple-access)  Reset:0x00000000
    : RCC_CIR_CSSC ( -- x addr ) 23 bit RCC_CIR ; \ RCC_CIR_CSSC, Clock security system interrupt  clear
    : RCC_CIR_PLLI2SRDYC ( -- x addr ) 21 bit RCC_CIR ; \ RCC_CIR_PLLI2SRDYC, PLLI2S ready interrupt  clear
    : RCC_CIR_PLLRDYC ( -- x addr ) 20 bit RCC_CIR ; \ RCC_CIR_PLLRDYC, Main PLLPLL ready interrupt  clear
    : RCC_CIR_HSERDYC ( -- x addr ) 19 bit RCC_CIR ; \ RCC_CIR_HSERDYC, HSE ready interrupt clear
    : RCC_CIR_HSIRDYC ( -- x addr ) 18 bit RCC_CIR ; \ RCC_CIR_HSIRDYC, HSI ready interrupt clear
    : RCC_CIR_LSERDYC ( -- x addr ) 17 bit RCC_CIR ; \ RCC_CIR_LSERDYC, LSE ready interrupt clear
    : RCC_CIR_LSIRDYC ( -- x addr ) 16 bit RCC_CIR ; \ RCC_CIR_LSIRDYC, LSI ready interrupt clear
    : RCC_CIR_PLLI2SRDYIE ( -- x addr ) 13 bit RCC_CIR ; \ RCC_CIR_PLLI2SRDYIE, PLLI2S ready interrupt  enable
    : RCC_CIR_PLLRDYIE ( -- x addr ) 12 bit RCC_CIR ; \ RCC_CIR_PLLRDYIE, Main PLL PLL ready interrupt  enable
    : RCC_CIR_HSERDYIE ( -- x addr ) 11 bit RCC_CIR ; \ RCC_CIR_HSERDYIE, HSE ready interrupt enable
    : RCC_CIR_HSIRDYIE ( -- x addr ) 10 bit RCC_CIR ; \ RCC_CIR_HSIRDYIE, HSI ready interrupt enable
    : RCC_CIR_LSERDYIE ( -- x addr ) 9 bit RCC_CIR ; \ RCC_CIR_LSERDYIE, LSE ready interrupt enable
    : RCC_CIR_LSIRDYIE ( -- x addr ) 8 bit RCC_CIR ; \ RCC_CIR_LSIRDYIE, LSI ready interrupt enable
    : RCC_CIR_CSSF? ( -- 1|0 ) 7 bit RCC_CIR bit@ ; \ RCC_CIR_CSSF, Clock security system interrupt  flag
    : RCC_CIR_PLLI2SRDYF? ( -- 1|0 ) 5 bit RCC_CIR bit@ ; \ RCC_CIR_PLLI2SRDYF, PLLI2S ready interrupt  flag
    : RCC_CIR_PLLRDYF? ( -- 1|0 ) 4 bit RCC_CIR bit@ ; \ RCC_CIR_PLLRDYF, Main PLL PLL ready interrupt  flag
    : RCC_CIR_HSERDYF? ( -- 1|0 ) 3 bit RCC_CIR bit@ ; \ RCC_CIR_HSERDYF, HSE ready interrupt flag
    : RCC_CIR_HSIRDYF? ( -- 1|0 ) 2 bit RCC_CIR bit@ ; \ RCC_CIR_HSIRDYF, HSI ready interrupt flag
    : RCC_CIR_LSERDYF? ( -- 1|0 ) 1 bit RCC_CIR bit@ ; \ RCC_CIR_LSERDYF, LSE ready interrupt flag
    : RCC_CIR_LSIRDYF? ( -- 1|0 ) 0 bit RCC_CIR bit@ ; \ RCC_CIR_LSIRDYF, LSI ready interrupt flag
  [then]

  execute-defined? use-RCC [if]
    \ RCC_AHB1RSTR (read-write) Reset:0x00000000
    : RCC_AHB1RSTR_OTGHSRST ( -- x addr ) 29 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_OTGHSRST, USB OTG HS module reset
    : RCC_AHB1RSTR_ETHMACRST ( -- x addr ) 25 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_ETHMACRST, Ethernet MAC reset
    : RCC_AHB1RSTR_DMA2RST ( -- x addr ) 22 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_DMA2RST, DMA2 reset
    : RCC_AHB1RSTR_DMA1RST ( -- x addr ) 21 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_DMA1RST, DMA2 reset
    : RCC_AHB1RSTR_CRCRST ( -- x addr ) 12 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_CRCRST, CRC reset
    : RCC_AHB1RSTR_GPIOIRST ( -- x addr ) 8 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOIRST, IO port I reset
    : RCC_AHB1RSTR_GPIOHRST ( -- x addr ) 7 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOHRST, IO port H reset
    : RCC_AHB1RSTR_GPIOGRST ( -- x addr ) 6 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOGRST, IO port G reset
    : RCC_AHB1RSTR_GPIOFRST ( -- x addr ) 5 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOFRST, IO port F reset
    : RCC_AHB1RSTR_GPIOERST ( -- x addr ) 4 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOERST, IO port E reset
    : RCC_AHB1RSTR_GPIODRST ( -- x addr ) 3 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIODRST, IO port D reset
    : RCC_AHB1RSTR_GPIOCRST ( -- x addr ) 2 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOCRST, IO port C reset
    : RCC_AHB1RSTR_GPIOBRST ( -- x addr ) 1 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOBRST, IO port B reset
    : RCC_AHB1RSTR_GPIOARST ( -- x addr ) 0 bit RCC_AHB1RSTR ; \ RCC_AHB1RSTR_GPIOARST, IO port A reset
  [then]

  [if]
    \ RCC_AHB2RSTR (read-write) Reset:0x00000000
    : RCC_AHB2RSTR_OTGFSRST ( -- x addr ) 7 bit RCC_AHB2RSTR ; \ RCC_AHB2RSTR_OTGFSRST, USB OTG FS module reset
    : RCC_AHB2RSTR_RNGRST ( -- x addr ) 6 bit RCC_AHB2RSTR ; \ RCC_AHB2RSTR_RNGRST, Random number generator module  reset
    : RCC_AHB2RSTR_DCMIRST ( -- x addr ) 0 bit RCC_AHB2RSTR ; \ RCC_AHB2RSTR_DCMIRST, Camera interface reset
  [then]

  execute-defined? use-RCC [if]
    \ RCC_AHB3RSTR (read-write) Reset:0x00000000
    : RCC_AHB3RSTR_FSMCRST ( -- x addr ) 0 bit RCC_AHB3RSTR ; \ RCC_AHB3RSTR_FSMCRST, Flexible static memory controller module  reset
  [then]

  [if]
    \ RCC_APB1RSTR (read-write) Reset:0x00000000
    : RCC_APB1RSTR_DACRST ( -- x addr ) 29 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_DACRST, DAC reset
    : RCC_APB1RSTR_PWRRST ( -- x addr ) 28 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_PWRRST, Power interface reset
    : RCC_APB1RSTR_CAN2RST ( -- x addr ) 26 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_CAN2RST, CAN2 reset
    : RCC_APB1RSTR_CAN1RST ( -- x addr ) 25 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_CAN1RST, CAN1 reset
    : RCC_APB1RSTR_I2C3RST ( -- x addr ) 23 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_I2C3RST, I2C3 reset
    : RCC_APB1RSTR_I2C2RST ( -- x addr ) 22 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_I2C2RST, I2C 2 reset
    : RCC_APB1RSTR_I2C1RST ( -- x addr ) 21 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_I2C1RST, I2C 1 reset
    : RCC_APB1RSTR_UART5RST ( -- x addr ) 20 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_UART5RST, USART 5 reset
    : RCC_APB1RSTR_UART4RST ( -- x addr ) 19 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_UART4RST, USART 4 reset
    : RCC_APB1RSTR_UART3RST ( -- x addr ) 18 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_UART3RST, USART 3 reset
    : RCC_APB1RSTR_UART2RST ( -- x addr ) 17 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_UART2RST, USART 2 reset
    : RCC_APB1RSTR_SPI3RST ( -- x addr ) 15 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_SPI3RST, SPI 3 reset
    : RCC_APB1RSTR_SPI2RST ( -- x addr ) 14 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_SPI2RST, SPI 2 reset
    : RCC_APB1RSTR_WWDGRST ( -- x addr ) 11 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_WWDGRST, Window watchdog reset
    : RCC_APB1RSTR_TIM14RST ( -- x addr ) 8 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM14RST, TIM14 reset
    : RCC_APB1RSTR_TIM13RST ( -- x addr ) 7 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM13RST, TIM13 reset
    : RCC_APB1RSTR_TIM12RST ( -- x addr ) 6 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM12RST, TIM12 reset
    : RCC_APB1RSTR_TIM7RST ( -- x addr ) 5 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM7RST, TIM7 reset
    : RCC_APB1RSTR_TIM6RST ( -- x addr ) 4 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM6RST, TIM6 reset
    : RCC_APB1RSTR_TIM5RST ( -- x addr ) 3 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM5RST, TIM5 reset
    : RCC_APB1RSTR_TIM4RST ( -- x addr ) 2 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM4RST, TIM4 reset
    : RCC_APB1RSTR_TIM3RST ( -- x addr ) 1 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM3RST, TIM3 reset
    : RCC_APB1RSTR_TIM2RST ( -- x addr ) 0 bit RCC_APB1RSTR ; \ RCC_APB1RSTR_TIM2RST, TIM2 reset
  [then]

  execute-defined? use-RCC [if]
    \ RCC_APB2RSTR (read-write) Reset:0x00000000
    : RCC_APB2RSTR_TIM11RST ( -- x addr ) 18 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_TIM11RST, TIM11 reset
    : RCC_APB2RSTR_TIM10RST ( -- x addr ) 17 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_TIM10RST, TIM10 reset
    : RCC_APB2RSTR_TIM9RST ( -- x addr ) 16 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_TIM9RST, TIM9 reset
    : RCC_APB2RSTR_SYSCFGRST ( -- x addr ) 14 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_SYSCFGRST, System configuration controller  reset
    : RCC_APB2RSTR_SPI1RST ( -- x addr ) 12 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_SPI1RST, SPI 1 reset
    : RCC_APB2RSTR_SDIORST ( -- x addr ) 11 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_SDIORST, SDIO reset
    : RCC_APB2RSTR_ADCRST ( -- x addr ) 8 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_ADCRST, ADC interface reset common to all  ADCs
    : RCC_APB2RSTR_USART6RST ( -- x addr ) 5 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_USART6RST, USART6 reset
    : RCC_APB2RSTR_USART1RST ( -- x addr ) 4 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_USART1RST, USART1 reset
    : RCC_APB2RSTR_TIM8RST ( -- x addr ) 1 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_TIM8RST, TIM8 reset
    : RCC_APB2RSTR_TIM1RST ( -- x addr ) 0 bit RCC_APB2RSTR ; \ RCC_APB2RSTR_TIM1RST, TIM1 reset
  [then]

  [if]
    \ RCC_AHB1ENR (read-write) Reset:0x00100000
    : RCC_AHB1ENR_OTGHSULPIEN ( -- x addr ) 30 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_OTGHSULPIEN, USB OTG HSULPI clock  enable
    : RCC_AHB1ENR_OTGHSEN ( -- x addr ) 29 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_OTGHSEN, USB OTG HS clock enable
    : RCC_AHB1ENR_ETHMACPTPEN ( -- x addr ) 28 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_ETHMACPTPEN, Ethernet PTP clock enable
    : RCC_AHB1ENR_ETHMACRXEN ( -- x addr ) 27 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_ETHMACRXEN, Ethernet Reception clock  enable
    : RCC_AHB1ENR_ETHMACTXEN ( -- x addr ) 26 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_ETHMACTXEN, Ethernet Transmission clock  enable
    : RCC_AHB1ENR_ETHMACEN ( -- x addr ) 25 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_ETHMACEN, Ethernet MAC clock enable
    : RCC_AHB1ENR_DMA2EN ( -- x addr ) 22 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_DMA2EN, DMA2 clock enable
    : RCC_AHB1ENR_DMA1EN ( -- x addr ) 21 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_DMA1EN, DMA1 clock enable
    : RCC_AHB1ENR_BKPSRAMEN ( -- x addr ) 18 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_BKPSRAMEN, Backup SRAM interface clock  enable
    : RCC_AHB1ENR_CRCEN ( -- x addr ) 12 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_CRCEN, CRC clock enable
    : RCC_AHB1ENR_GPIOIEN ( -- x addr ) 8 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOIEN, IO port I clock enable
    : RCC_AHB1ENR_GPIOHEN ( -- x addr ) 7 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOHEN, IO port H clock enable
    : RCC_AHB1ENR_GPIOGEN ( -- x addr ) 6 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOGEN, IO port G clock enable
    : RCC_AHB1ENR_GPIOFEN ( -- x addr ) 5 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOFEN, IO port F clock enable
    : RCC_AHB1ENR_GPIOEEN ( -- x addr ) 4 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOEEN, IO port E clock enable
    : RCC_AHB1ENR_GPIODEN ( -- x addr ) 3 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIODEN, IO port D clock enable
    : RCC_AHB1ENR_GPIOCEN ( -- x addr ) 2 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOCEN, IO port C clock enable
    : RCC_AHB1ENR_GPIOBEN ( -- x addr ) 1 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOBEN, IO port B clock enable
    : RCC_AHB1ENR_GPIOAEN ( -- x addr ) 0 bit RCC_AHB1ENR ; \ RCC_AHB1ENR_GPIOAEN, IO port A clock enable
  [then]

  execute-defined? use-RCC [if]
    \ RCC_AHB2ENR (read-write) Reset:0x00000000
    : RCC_AHB2ENR_OTGFSEN ( -- x addr ) 7 bit RCC_AHB2ENR ; \ RCC_AHB2ENR_OTGFSEN, USB OTG FS clock enable
    : RCC_AHB2ENR_RNGEN ( -- x addr ) 6 bit RCC_AHB2ENR ; \ RCC_AHB2ENR_RNGEN, Random number generator clock  enable
    : RCC_AHB2ENR_DCMIEN ( -- x addr ) 0 bit RCC_AHB2ENR ; \ RCC_AHB2ENR_DCMIEN, Camera interface enable
  [then]

  [if]
    \ RCC_AHB3ENR (read-write) Reset:0x00000000
    : RCC_AHB3ENR_FSMCEN ( -- x addr ) 0 bit RCC_AHB3ENR ; \ RCC_AHB3ENR_FSMCEN, Flexible static memory controller module  clock enable
  [then]

  execute-defined? use-RCC [if]
    \ RCC_APB1ENR (read-write) Reset:0x00000000
    : RCC_APB1ENR_DACEN ( -- x addr ) 29 bit RCC_APB1ENR ; \ RCC_APB1ENR_DACEN, DAC interface clock enable
    : RCC_APB1ENR_PWREN ( -- x addr ) 28 bit RCC_APB1ENR ; \ RCC_APB1ENR_PWREN, Power interface clock  enable
    : RCC_APB1ENR_CAN2EN ( -- x addr ) 26 bit RCC_APB1ENR ; \ RCC_APB1ENR_CAN2EN, CAN 2 clock enable
    : RCC_APB1ENR_CAN1EN ( -- x addr ) 25 bit RCC_APB1ENR ; \ RCC_APB1ENR_CAN1EN, CAN 1 clock enable
    : RCC_APB1ENR_I2C3EN ( -- x addr ) 23 bit RCC_APB1ENR ; \ RCC_APB1ENR_I2C3EN, I2C3 clock enable
    : RCC_APB1ENR_I2C2EN ( -- x addr ) 22 bit RCC_APB1ENR ; \ RCC_APB1ENR_I2C2EN, I2C2 clock enable
    : RCC_APB1ENR_I2C1EN ( -- x addr ) 21 bit RCC_APB1ENR ; \ RCC_APB1ENR_I2C1EN, I2C1 clock enable
    : RCC_APB1ENR_UART5EN ( -- x addr ) 20 bit RCC_APB1ENR ; \ RCC_APB1ENR_UART5EN, UART5 clock enable
    : RCC_APB1ENR_UART4EN ( -- x addr ) 19 bit RCC_APB1ENR ; \ RCC_APB1ENR_UART4EN, UART4 clock enable
    : RCC_APB1ENR_USART3EN ( -- x addr ) 18 bit RCC_APB1ENR ; \ RCC_APB1ENR_USART3EN, USART3 clock enable
    : RCC_APB1ENR_USART2EN ( -- x addr ) 17 bit RCC_APB1ENR ; \ RCC_APB1ENR_USART2EN, USART 2 clock enable
    : RCC_APB1ENR_SPI3EN ( -- x addr ) 15 bit RCC_APB1ENR ; \ RCC_APB1ENR_SPI3EN, SPI3 clock enable
    : RCC_APB1ENR_SPI2EN ( -- x addr ) 14 bit RCC_APB1ENR ; \ RCC_APB1ENR_SPI2EN, SPI2 clock enable
    : RCC_APB1ENR_WWDGEN ( -- x addr ) 11 bit RCC_APB1ENR ; \ RCC_APB1ENR_WWDGEN, Window watchdog clock  enable
    : RCC_APB1ENR_TIM14EN ( -- x addr ) 8 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM14EN, TIM14 clock enable
    : RCC_APB1ENR_TIM13EN ( -- x addr ) 7 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM13EN, TIM13 clock enable
    : RCC_APB1ENR_TIM12EN ( -- x addr ) 6 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM12EN, TIM12 clock enable
    : RCC_APB1ENR_TIM7EN ( -- x addr ) 5 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM7EN, TIM7 clock enable
    : RCC_APB1ENR_TIM6EN ( -- x addr ) 4 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM6EN, TIM6 clock enable
    : RCC_APB1ENR_TIM5EN ( -- x addr ) 3 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM5EN, TIM5 clock enable
    : RCC_APB1ENR_TIM4EN ( -- x addr ) 2 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM4EN, TIM4 clock enable
    : RCC_APB1ENR_TIM3EN ( -- x addr ) 1 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM3EN, TIM3 clock enable
    : RCC_APB1ENR_TIM2EN ( -- x addr ) 0 bit RCC_APB1ENR ; \ RCC_APB1ENR_TIM2EN, TIM2 clock enable
  [then]

  [if]
    \ RCC_APB2ENR (read-write) Reset:0x00000000
    : RCC_APB2ENR_TIM11EN ( -- x addr ) 18 bit RCC_APB2ENR ; \ RCC_APB2ENR_TIM11EN, TIM11 clock enable
    : RCC_APB2ENR_TIM10EN ( -- x addr ) 17 bit RCC_APB2ENR ; \ RCC_APB2ENR_TIM10EN, TIM10 clock enable
    : RCC_APB2ENR_TIM9EN ( -- x addr ) 16 bit RCC_APB2ENR ; \ RCC_APB2ENR_TIM9EN, TIM9 clock enable
    : RCC_APB2ENR_SYSCFGEN ( -- x addr ) 14 bit RCC_APB2ENR ; \ RCC_APB2ENR_SYSCFGEN, System configuration controller clock  enable
    : RCC_APB2ENR_SPI1EN ( -- x addr ) 12 bit RCC_APB2ENR ; \ RCC_APB2ENR_SPI1EN, SPI1 clock enable
    : RCC_APB2ENR_SDIOEN ( -- x addr ) 11 bit RCC_APB2ENR ; \ RCC_APB2ENR_SDIOEN, SDIO clock enable
    : RCC_APB2ENR_ADC3EN ( -- x addr ) 10 bit RCC_APB2ENR ; \ RCC_APB2ENR_ADC3EN, ADC3 clock enable
    : RCC_APB2ENR_ADC2EN ( -- x addr ) 9 bit RCC_APB2ENR ; \ RCC_APB2ENR_ADC2EN, ADC2 clock enable
    : RCC_APB2ENR_ADC1EN ( -- x addr ) 8 bit RCC_APB2ENR ; \ RCC_APB2ENR_ADC1EN, ADC1 clock enable
    : RCC_APB2ENR_USART6EN ( -- x addr ) 5 bit RCC_APB2ENR ; \ RCC_APB2ENR_USART6EN, USART6 clock enable
    : RCC_APB2ENR_USART1EN ( -- x addr ) 4 bit RCC_APB2ENR ; \ RCC_APB2ENR_USART1EN, USART1 clock enable
    : RCC_APB2ENR_TIM8EN ( -- x addr ) 1 bit RCC_APB2ENR ; \ RCC_APB2ENR_TIM8EN, TIM8 clock enable
    : RCC_APB2ENR_TIM1EN ( -- x addr ) 0 bit RCC_APB2ENR ; \ RCC_APB2ENR_TIM1EN, TIM1 clock enable
  [then]

  execute-defined? use-RCC [if]
    \ RCC_AHB1LPENR (read-write) Reset:0x7E6791FF
    : RCC_AHB1LPENR_OTGHSULPILPEN ( -- x addr ) 30 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_OTGHSULPILPEN, USB OTG HS ULPI clock enable during  Sleep mode
    : RCC_AHB1LPENR_OTGHSLPEN ( -- x addr ) 29 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_OTGHSLPEN, USB OTG HS clock enable during Sleep  mode
    : RCC_AHB1LPENR_ETHMACPTPLPEN ( -- x addr ) 28 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_ETHMACPTPLPEN, Ethernet PTP clock enable during Sleep  mode
    : RCC_AHB1LPENR_ETHMACRXLPEN ( -- x addr ) 27 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_ETHMACRXLPEN, Ethernet reception clock enable during  Sleep mode
    : RCC_AHB1LPENR_ETHMACTXLPEN ( -- x addr ) 26 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_ETHMACTXLPEN, Ethernet transmission clock enable  during Sleep mode
    : RCC_AHB1LPENR_ETHMACLPEN ( -- x addr ) 25 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_ETHMACLPEN, Ethernet MAC clock enable during Sleep  mode
    : RCC_AHB1LPENR_DMA2LPEN ( -- x addr ) 22 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_DMA2LPEN, DMA2 clock enable during Sleep  mode
    : RCC_AHB1LPENR_DMA1LPEN ( -- x addr ) 21 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_DMA1LPEN, DMA1 clock enable during Sleep  mode
    : RCC_AHB1LPENR_BKPSRAMLPEN ( -- x addr ) 18 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_BKPSRAMLPEN, Backup SRAM interface clock enable  during Sleep mode
    : RCC_AHB1LPENR_SRAM2LPEN ( -- x addr ) 17 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_SRAM2LPEN, SRAM 2 interface clock enable during  Sleep mode
    : RCC_AHB1LPENR_SRAM1LPEN ( -- x addr ) 16 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_SRAM1LPEN, SRAM 1interface clock enable during  Sleep mode
    : RCC_AHB1LPENR_FLITFLPEN ( -- x addr ) 15 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_FLITFLPEN, Flash interface clock enable during  Sleep mode
    : RCC_AHB1LPENR_CRCLPEN ( -- x addr ) 12 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_CRCLPEN, CRC clock enable during Sleep  mode
    : RCC_AHB1LPENR_GPIOILPEN ( -- x addr ) 8 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOILPEN, IO port I clock enable during Sleep  mode
    : RCC_AHB1LPENR_GPIOHLPEN ( -- x addr ) 7 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOHLPEN, IO port H clock enable during Sleep  mode
    : RCC_AHB1LPENR_GPIOGLPEN ( -- x addr ) 6 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOGLPEN, IO port G clock enable during Sleep  mode
    : RCC_AHB1LPENR_GPIOFLPEN ( -- x addr ) 5 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOFLPEN, IO port F clock enable during Sleep  mode
    : RCC_AHB1LPENR_GPIOELPEN ( -- x addr ) 4 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOELPEN, IO port E clock enable during Sleep  mode
    : RCC_AHB1LPENR_GPIODLPEN ( -- x addr ) 3 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIODLPEN, IO port D clock enable during Sleep  mode
    : RCC_AHB1LPENR_GPIOCLPEN ( -- x addr ) 2 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOCLPEN, IO port C clock enable during Sleep  mode
    : RCC_AHB1LPENR_GPIOBLPEN ( -- x addr ) 1 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOBLPEN, IO port B clock enable during Sleep  mode
    : RCC_AHB1LPENR_GPIOALPEN ( -- x addr ) 0 bit RCC_AHB1LPENR ; \ RCC_AHB1LPENR_GPIOALPEN, IO port A clock enable during sleep  mode
  [then]

  [if]
    \ RCC_AHB2LPENR (read-write) Reset:0x000000F1
    : RCC_AHB2LPENR_OTGFSLPEN ( -- x addr ) 7 bit RCC_AHB2LPENR ; \ RCC_AHB2LPENR_OTGFSLPEN, USB OTG FS clock enable during Sleep  mode
    : RCC_AHB2LPENR_RNGLPEN ( -- x addr ) 6 bit RCC_AHB2LPENR ; \ RCC_AHB2LPENR_RNGLPEN, Random number generator clock enable  during Sleep mode
    : RCC_AHB2LPENR_DCMILPEN ( -- x addr ) 0 bit RCC_AHB2LPENR ; \ RCC_AHB2LPENR_DCMILPEN, Camera interface enable during Sleep  mode
  [then]

  execute-defined? use-RCC [if]
    \ RCC_AHB3LPENR (read-write) Reset:0x00000001
    : RCC_AHB3LPENR_FSMCLPEN ( -- x addr ) 0 bit RCC_AHB3LPENR ; \ RCC_AHB3LPENR_FSMCLPEN, Flexible static memory controller module  clock enable during Sleep mode
  [then]

  [if]
    \ RCC_APB1LPENR (read-write) Reset:0x36FEC9FF
    : RCC_APB1LPENR_DACLPEN ( -- x addr ) 29 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_DACLPEN, DAC interface clock enable during Sleep  mode
    : RCC_APB1LPENR_PWRLPEN ( -- x addr ) 28 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_PWRLPEN, Power interface clock enable during  Sleep mode
    : RCC_APB1LPENR_CAN2LPEN ( -- x addr ) 26 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_CAN2LPEN, CAN 2 clock enable during Sleep  mode
    : RCC_APB1LPENR_CAN1LPEN ( -- x addr ) 25 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_CAN1LPEN, CAN 1 clock enable during Sleep  mode
    : RCC_APB1LPENR_I2C3LPEN ( -- x addr ) 23 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_I2C3LPEN, I2C3 clock enable during Sleep  mode
    : RCC_APB1LPENR_I2C2LPEN ( -- x addr ) 22 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_I2C2LPEN, I2C2 clock enable during Sleep  mode
    : RCC_APB1LPENR_I2C1LPEN ( -- x addr ) 21 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_I2C1LPEN, I2C1 clock enable during Sleep  mode
    : RCC_APB1LPENR_UART5LPEN ( -- x addr ) 20 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_UART5LPEN, UART5 clock enable during Sleep  mode
    : RCC_APB1LPENR_UART4LPEN ( -- x addr ) 19 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_UART4LPEN, UART4 clock enable during Sleep  mode
    : RCC_APB1LPENR_USART3LPEN ( -- x addr ) 18 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_USART3LPEN, USART3 clock enable during Sleep  mode
    : RCC_APB1LPENR_USART2LPEN ( -- x addr ) 17 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_USART2LPEN, USART2 clock enable during Sleep  mode
    : RCC_APB1LPENR_SPI3LPEN ( -- x addr ) 15 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_SPI3LPEN, SPI3 clock enable during Sleep  mode
    : RCC_APB1LPENR_SPI2LPEN ( -- x addr ) 14 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_SPI2LPEN, SPI2 clock enable during Sleep  mode
    : RCC_APB1LPENR_WWDGLPEN ( -- x addr ) 11 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_WWDGLPEN, Window watchdog clock enable during  Sleep mode
    : RCC_APB1LPENR_TIM14LPEN ( -- x addr ) 8 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM14LPEN, TIM14 clock enable during Sleep  mode
    : RCC_APB1LPENR_TIM13LPEN ( -- x addr ) 7 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM13LPEN, TIM13 clock enable during Sleep  mode
    : RCC_APB1LPENR_TIM12LPEN ( -- x addr ) 6 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM12LPEN, TIM12 clock enable during Sleep  mode
    : RCC_APB1LPENR_TIM7LPEN ( -- x addr ) 5 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM7LPEN, TIM7 clock enable during Sleep  mode
    : RCC_APB1LPENR_TIM6LPEN ( -- x addr ) 4 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM6LPEN, TIM6 clock enable during Sleep  mode
    : RCC_APB1LPENR_TIM5LPEN ( -- x addr ) 3 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM5LPEN, TIM5 clock enable during Sleep  mode
    : RCC_APB1LPENR_TIM4LPEN ( -- x addr ) 2 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM4LPEN, TIM4 clock enable during Sleep  mode
    : RCC_APB1LPENR_TIM3LPEN ( -- x addr ) 1 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM3LPEN, TIM3 clock enable during Sleep  mode
    : RCC_APB1LPENR_TIM2LPEN ( -- x addr ) 0 bit RCC_APB1LPENR ; \ RCC_APB1LPENR_TIM2LPEN, TIM2 clock enable during Sleep  mode
  [then]

  execute-defined? use-RCC [if]
    \ RCC_APB2LPENR (read-write) Reset:0x00075F33
    : RCC_APB2LPENR_TIM11LPEN ( -- x addr ) 18 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_TIM11LPEN, TIM11 clock enable during Sleep  mode
    : RCC_APB2LPENR_TIM10LPEN ( -- x addr ) 17 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_TIM10LPEN, TIM10 clock enable during Sleep  mode
    : RCC_APB2LPENR_TIM9LPEN ( -- x addr ) 16 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_TIM9LPEN, TIM9 clock enable during sleep  mode
    : RCC_APB2LPENR_SYSCFGLPEN ( -- x addr ) 14 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_SYSCFGLPEN, System configuration controller clock  enable during Sleep mode
    : RCC_APB2LPENR_SPI1LPEN ( -- x addr ) 12 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_SPI1LPEN, SPI 1 clock enable during Sleep  mode
    : RCC_APB2LPENR_SDIOLPEN ( -- x addr ) 11 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_SDIOLPEN, SDIO clock enable during Sleep  mode
    : RCC_APB2LPENR_ADC3LPEN ( -- x addr ) 10 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_ADC3LPEN, ADC 3 clock enable during Sleep  mode
    : RCC_APB2LPENR_ADC2LPEN ( -- x addr ) 9 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_ADC2LPEN, ADC2 clock enable during Sleep  mode
    : RCC_APB2LPENR_ADC1LPEN ( -- x addr ) 8 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_ADC1LPEN, ADC1 clock enable during Sleep  mode
    : RCC_APB2LPENR_USART6LPEN ( -- x addr ) 5 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_USART6LPEN, USART6 clock enable during Sleep  mode
    : RCC_APB2LPENR_USART1LPEN ( -- x addr ) 4 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_USART1LPEN, USART1 clock enable during Sleep  mode
    : RCC_APB2LPENR_TIM8LPEN ( -- x addr ) 1 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_TIM8LPEN, TIM8 clock enable during Sleep  mode
    : RCC_APB2LPENR_TIM1LPEN ( -- x addr ) 0 bit RCC_APB2LPENR ; \ RCC_APB2LPENR_TIM1LPEN, TIM1 clock enable during Sleep  mode
  [then]

  [if]
    \ RCC_BDCR (multiple-access)  Reset:0x00000000
    : RCC_BDCR_BDRST ( -- x addr ) 16 bit RCC_BDCR ; \ RCC_BDCR_BDRST, Backup domain software  reset
    : RCC_BDCR_RTCEN ( -- x addr ) 15 bit RCC_BDCR ; \ RCC_BDCR_RTCEN, RTC clock enable
    : RCC_BDCR_RTCSEL1 ( -- x addr ) 9 bit RCC_BDCR ; \ RCC_BDCR_RTCSEL1, RTC clock source selection
    : RCC_BDCR_RTCSEL0 ( -- x addr ) 8 bit RCC_BDCR ; \ RCC_BDCR_RTCSEL0, RTC clock source selection
    : RCC_BDCR_LSEBYP ( -- x addr ) 2 bit RCC_BDCR ; \ RCC_BDCR_LSEBYP, External low-speed oscillator  bypass
    : RCC_BDCR_LSERDY ( -- x addr ) 1 bit RCC_BDCR ; \ RCC_BDCR_LSERDY, External low-speed oscillator  ready
    : RCC_BDCR_LSEON ( -- x addr ) 0 bit RCC_BDCR ; \ RCC_BDCR_LSEON, External low-speed oscillator  enable
  [then]

  execute-defined? use-RCC [if]
    \ RCC_CSR (multiple-access)  Reset:0x0E000000
    : RCC_CSR_LPWRRSTF? ( -- 1|0 ) 31 bit RCC_CSR bit@ ; \ RCC_CSR_LPWRRSTF, Low-power reset flag
    : RCC_CSR_WWDGRSTF? ( -- 1|0 ) 30 bit RCC_CSR bit@ ; \ RCC_CSR_WWDGRSTF, Window watchdog reset flag
    : RCC_CSR_WDGRSTF? ( -- 1|0 ) 29 bit RCC_CSR bit@ ; \ RCC_CSR_WDGRSTF, Independent watchdog reset  flag
    : RCC_CSR_SFTRSTF? ( -- 1|0 ) 28 bit RCC_CSR bit@ ; \ RCC_CSR_SFTRSTF, Software reset flag
    : RCC_CSR_PORRSTF? ( -- 1|0 ) 27 bit RCC_CSR bit@ ; \ RCC_CSR_PORRSTF, POR/PDR reset flag
    : RCC_CSR_PADRSTF? ( -- 1|0 ) 26 bit RCC_CSR bit@ ; \ RCC_CSR_PADRSTF, PIN reset flag
    : RCC_CSR_BORRSTF? ( -- 1|0 ) 25 bit RCC_CSR bit@ ; \ RCC_CSR_BORRSTF, BOR reset flag
    : RCC_CSR_RMVF? ( -- 1|0 ) 24 bit RCC_CSR bit@ ; \ RCC_CSR_RMVF, Remove reset flag
    : RCC_CSR_LSIRDY ( -- x addr ) 1 bit RCC_CSR ; \ RCC_CSR_LSIRDY, Internal low-speed oscillator  ready
    : RCC_CSR_LSION ( -- x addr ) 0 bit RCC_CSR ; \ RCC_CSR_LSION, Internal low-speed oscillator  enable
  [then]

  [if]
    \ RCC_SSCGR (read-write) Reset:0x00000000
    : RCC_SSCGR_SSCGEN ( -- x addr ) 31 bit RCC_SSCGR ; \ RCC_SSCGR_SSCGEN, Spread spectrum modulation  enable
    : RCC_SSCGR_SPREADSEL ( -- x addr ) 30 bit RCC_SSCGR ; \ RCC_SSCGR_SPREADSEL, Spread Select
    : RCC_SSCGR_INCSTEP ( %bbbbbbbbbbbbbbb -- x addr ) 13 lshift RCC_SSCGR ; \ RCC_SSCGR_INCSTEP, Incrementation step
    : RCC_SSCGR_MODPER x addr ) RCC_SSCGR ; \ RCC_SSCGR_MODPER, Modulation period
  [then]

  execute-defined? use-RCC [if]
    \ RCC_PLLI2SCFGR (read-write) Reset:0x20003000
    : RCC_PLLI2SCFGR_PLLI2SRx ( %bbb -- x addr ) 28 lshift RCC_PLLI2SCFGR ; \ RCC_PLLI2SCFGR_PLLI2SRx, PLLI2S division factor for I2S  clocks
    : RCC_PLLI2SCFGR_PLLI2SNx ( %bbbbbbbbb -- x addr ) 6 lshift RCC_PLLI2SCFGR ; \ RCC_PLLI2SCFGR_PLLI2SNx, PLLI2S multiplication factor for  VCO
  [then]

  [if]
    \ GPIOI_MODER (read-write) Reset:0x00000000
    : GPIOI_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER15, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER14, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER13, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER12, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER11, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER10, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER9, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER8, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER7, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER6, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER5, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER4, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER3, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER2, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOI_MODER ; \ GPIOI_MODER_MODER1, Port x configuration bits y =  0..15
    : GPIOI_MODER_MODER0 ( %bb -- x addr ) GPIOI_MODER ; \ GPIOI_MODER_MODER0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOI [if]
    \ GPIOI_OTYPER (read-write) Reset:0x00000000
    : GPIOI_OTYPER_OT15 ( -- x addr ) 15 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT15, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT14 ( -- x addr ) 14 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT14, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT13 ( -- x addr ) 13 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT13, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT12 ( -- x addr ) 12 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT12, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT11 ( -- x addr ) 11 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT11, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT10 ( -- x addr ) 10 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT10, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT9 ( -- x addr ) 9 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT9, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT8 ( -- x addr ) 8 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT8, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT7 ( -- x addr ) 7 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT7, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT6 ( -- x addr ) 6 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT6, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT5 ( -- x addr ) 5 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT5, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT4 ( -- x addr ) 4 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT4, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT3 ( -- x addr ) 3 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT3, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT2 ( -- x addr ) 2 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT2, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT1 ( -- x addr ) 1 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT1, Port x configuration bits y =  0..15
    : GPIOI_OTYPER_OT0 ( -- x addr ) 0 bit GPIOI_OTYPER ; \ GPIOI_OTYPER_OT0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOI_OSPEEDR (read-write) Reset:0x00000000
    : GPIOI_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR15, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR14, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR13, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR12, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR11, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR10, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR9, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR8, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR7, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR6, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR5, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR4, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR3, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR2, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR1, Port x configuration bits y =  0..15
    : GPIOI_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOI_OSPEEDR ; \ GPIOI_OSPEEDR_OSPEEDR0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOI [if]
    \ GPIOI_PUPDR (read-write) Reset:0x00000000
    : GPIOI_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR15, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR14, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR13, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR12, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR11, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR10, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR9, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR8, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR7, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR6, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR5, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR4, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR3, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR2, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR1, Port x configuration bits y =  0..15
    : GPIOI_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOI_PUPDR ; \ GPIOI_PUPDR_PUPDR0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOI_IDR (read-only) Reset:0x00000000
    : GPIOI_IDR_IDR15? ( --  1|0 ) 15 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR15, Port input data y =  0..15
    : GPIOI_IDR_IDR14? ( --  1|0 ) 14 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR14, Port input data y =  0..15
    : GPIOI_IDR_IDR13? ( --  1|0 ) 13 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR13, Port input data y =  0..15
    : GPIOI_IDR_IDR12? ( --  1|0 ) 12 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR12, Port input data y =  0..15
    : GPIOI_IDR_IDR11? ( --  1|0 ) 11 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR11, Port input data y =  0..15
    : GPIOI_IDR_IDR10? ( --  1|0 ) 10 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR10, Port input data y =  0..15
    : GPIOI_IDR_IDR9? ( --  1|0 ) 9 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR9, Port input data y =  0..15
    : GPIOI_IDR_IDR8? ( --  1|0 ) 8 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR8, Port input data y =  0..15
    : GPIOI_IDR_IDR7? ( --  1|0 ) 7 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR7, Port input data y =  0..15
    : GPIOI_IDR_IDR6? ( --  1|0 ) 6 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR6, Port input data y =  0..15
    : GPIOI_IDR_IDR5? ( --  1|0 ) 5 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR5, Port input data y =  0..15
    : GPIOI_IDR_IDR4? ( --  1|0 ) 4 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR4, Port input data y =  0..15
    : GPIOI_IDR_IDR3? ( --  1|0 ) 3 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR3, Port input data y =  0..15
    : GPIOI_IDR_IDR2? ( --  1|0 ) 2 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR2, Port input data y =  0..15
    : GPIOI_IDR_IDR1? ( --  1|0 ) 1 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR1, Port input data y =  0..15
    : GPIOI_IDR_IDR0? ( --  1|0 ) 0 bit GPIOI_IDR bit@ ; \ GPIOI_IDR_IDR0, Port input data y =  0..15
  [then]

  execute-defined? use-GPIOI [if]
    \ GPIOI_ODR (read-write) Reset:0x00000000
    : GPIOI_ODR_ODR15 ( -- x addr ) 15 bit GPIOI_ODR ; \ GPIOI_ODR_ODR15, Port output data y =  0..15
    : GPIOI_ODR_ODR14 ( -- x addr ) 14 bit GPIOI_ODR ; \ GPIOI_ODR_ODR14, Port output data y =  0..15
    : GPIOI_ODR_ODR13 ( -- x addr ) 13 bit GPIOI_ODR ; \ GPIOI_ODR_ODR13, Port output data y =  0..15
    : GPIOI_ODR_ODR12 ( -- x addr ) 12 bit GPIOI_ODR ; \ GPIOI_ODR_ODR12, Port output data y =  0..15
    : GPIOI_ODR_ODR11 ( -- x addr ) 11 bit GPIOI_ODR ; \ GPIOI_ODR_ODR11, Port output data y =  0..15
    : GPIOI_ODR_ODR10 ( -- x addr ) 10 bit GPIOI_ODR ; \ GPIOI_ODR_ODR10, Port output data y =  0..15
    : GPIOI_ODR_ODR9 ( -- x addr ) 9 bit GPIOI_ODR ; \ GPIOI_ODR_ODR9, Port output data y =  0..15
    : GPIOI_ODR_ODR8 ( -- x addr ) 8 bit GPIOI_ODR ; \ GPIOI_ODR_ODR8, Port output data y =  0..15
    : GPIOI_ODR_ODR7 ( -- x addr ) 7 bit GPIOI_ODR ; \ GPIOI_ODR_ODR7, Port output data y =  0..15
    : GPIOI_ODR_ODR6 ( -- x addr ) 6 bit GPIOI_ODR ; \ GPIOI_ODR_ODR6, Port output data y =  0..15
    : GPIOI_ODR_ODR5 ( -- x addr ) 5 bit GPIOI_ODR ; \ GPIOI_ODR_ODR5, Port output data y =  0..15
    : GPIOI_ODR_ODR4 ( -- x addr ) 4 bit GPIOI_ODR ; \ GPIOI_ODR_ODR4, Port output data y =  0..15
    : GPIOI_ODR_ODR3 ( -- x addr ) 3 bit GPIOI_ODR ; \ GPIOI_ODR_ODR3, Port output data y =  0..15
    : GPIOI_ODR_ODR2 ( -- x addr ) 2 bit GPIOI_ODR ; \ GPIOI_ODR_ODR2, Port output data y =  0..15
    : GPIOI_ODR_ODR1 ( -- x addr ) 1 bit GPIOI_ODR ; \ GPIOI_ODR_ODR1, Port output data y =  0..15
    : GPIOI_ODR_ODR0 ( -- x addr ) 0 bit GPIOI_ODR ; \ GPIOI_ODR_ODR0, Port output data y =  0..15
  [then]

  [if]
    \ GPIOI_BSRR (write-only) Reset:0x00000000
    : GPIOI_BSRR_BR15 ( -- ) 31 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR15, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR14 ( -- ) 30 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR14, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR13 ( -- ) 29 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR13, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR12 ( -- ) 28 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR12, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR11 ( -- ) 27 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR11, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR10 ( -- ) 26 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR10, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR9 ( -- ) 25 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR9, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR8 ( -- ) 24 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR8, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR7 ( -- ) 23 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR7, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR6 ( -- ) 22 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR6, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR5 ( -- ) 21 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR5, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR4 ( -- ) 20 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR4, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR3 ( -- ) 19 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR3, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR2 ( -- ) 18 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR2, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR1 ( -- ) 17 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR1, Port x reset bit y y =  0..15
    : GPIOI_BSRR_BR0 ( -- ) 16 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BR0, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS15 ( -- ) 15 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS15, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS14 ( -- ) 14 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS14, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS13 ( -- ) 13 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS13, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS12 ( -- ) 12 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS12, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS11 ( -- ) 11 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS11, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS10 ( -- ) 10 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS10, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS9 ( -- ) 9 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS9, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS8 ( -- ) 8 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS8, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS7 ( -- ) 7 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS7, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS6 ( -- ) 6 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS6, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS5 ( -- ) 5 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS5, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS4 ( -- ) 4 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS4, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS3 ( -- ) 3 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS3, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS2 ( -- ) 2 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS2, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS1 ( -- ) 1 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS1, Port x set bit y y=  0..15
    : GPIOI_BSRR_BS0 ( -- ) 0 bit GPIOI_BSRR ! ; \ GPIOI_BSRR_BS0, Port x set bit y y=  0..15
  [then]

  execute-defined? use-GPIOI [if]
    \ GPIOI_LCKR (read-write) Reset:0x00000000
    : GPIOI_LCKR_LCKK ( -- x addr ) 16 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCKK, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK15 ( -- x addr ) 15 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK15, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK14 ( -- x addr ) 14 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK14, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK13 ( -- x addr ) 13 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK13, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK12 ( -- x addr ) 12 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK12, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK11 ( -- x addr ) 11 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK11, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK10 ( -- x addr ) 10 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK10, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK9 ( -- x addr ) 9 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK9, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK8 ( -- x addr ) 8 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK8, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK7 ( -- x addr ) 7 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK7, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK6 ( -- x addr ) 6 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK6, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK5 ( -- x addr ) 5 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK5, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK4 ( -- x addr ) 4 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK4, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK3 ( -- x addr ) 3 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK3, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK2 ( -- x addr ) 2 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK2, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK1 ( -- x addr ) 1 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK1, Port x lock bit y y=  0..15
    : GPIOI_LCKR_LCK0 ( -- x addr ) 0 bit GPIOI_LCKR ; \ GPIOI_LCKR_LCK0, Port x lock bit y y=  0..15
  [then]

  [if]
    \ GPIOI_AFRL (read-write) Reset:0x00000000
    : GPIOI_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL7, Alternate function selection for port x  bit y y = 0..7
    : GPIOI_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL6, Alternate function selection for port x  bit y y = 0..7
    : GPIOI_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL5, Alternate function selection for port x  bit y y = 0..7
    : GPIOI_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL4, Alternate function selection for port x  bit y y = 0..7
    : GPIOI_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL3, Alternate function selection for port x  bit y y = 0..7
    : GPIOI_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL2, Alternate function selection for port x  bit y y = 0..7
    : GPIOI_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOI_AFRL ; \ GPIOI_AFRL_AFRL1, Alternate function selection for port x  bit y y = 0..7
    : GPIOI_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOI_AFRL ; \ GPIOI_AFRL_AFRL0, Alternate function selection for port x  bit y y = 0..7
  [then]

  execute-defined? use-GPIOI [if]
    \ GPIOI_AFRH (read-write) Reset:0x00000000
    : GPIOI_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH15, Alternate function selection for port x  bit y y = 8..15
    : GPIOI_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH14, Alternate function selection for port x  bit y y = 8..15
    : GPIOI_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH13, Alternate function selection for port x  bit y y = 8..15
    : GPIOI_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH12, Alternate function selection for port x  bit y y = 8..15
    : GPIOI_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH11, Alternate function selection for port x  bit y y = 8..15
    : GPIOI_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH10, Alternate function selection for port x  bit y y = 8..15
    : GPIOI_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOI_AFRH ; \ GPIOI_AFRH_AFRH9, Alternate function selection for port x  bit y y = 8..15
    : GPIOI_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOI_AFRH ; \ GPIOI_AFRH_AFRH8, Alternate function selection for port x  bit y y = 8..15
  [then]

  [if]
    \ GPIOH_MODER (read-write) Reset:0x00000000
    : GPIOH_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER15, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER14, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER13, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER12, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER11, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER10, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER9, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER8, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER7, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER6, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER5, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER4, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER3, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER2, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOH_MODER ; \ GPIOH_MODER_MODER1, Port x configuration bits y =  0..15
    : GPIOH_MODER_MODER0 ( %bb -- x addr ) GPIOH_MODER ; \ GPIOH_MODER_MODER0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOH [if]
    \ GPIOH_OTYPER (read-write) Reset:0x00000000
    : GPIOH_OTYPER_OT15 ( -- x addr ) 15 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT15, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT14 ( -- x addr ) 14 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT14, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT13 ( -- x addr ) 13 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT13, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT12 ( -- x addr ) 12 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT12, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT11 ( -- x addr ) 11 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT11, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT10 ( -- x addr ) 10 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT10, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT9 ( -- x addr ) 9 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT9, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT8 ( -- x addr ) 8 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT8, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT7 ( -- x addr ) 7 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT7, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT6 ( -- x addr ) 6 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT6, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT5 ( -- x addr ) 5 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT5, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT4 ( -- x addr ) 4 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT4, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT3 ( -- x addr ) 3 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT3, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT2 ( -- x addr ) 2 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT2, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT1 ( -- x addr ) 1 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT1, Port x configuration bits y =  0..15
    : GPIOH_OTYPER_OT0 ( -- x addr ) 0 bit GPIOH_OTYPER ; \ GPIOH_OTYPER_OT0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOH_OSPEEDR (read-write) Reset:0x00000000
    : GPIOH_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR15, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR14, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR13, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR12, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR11, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR10, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR9, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR8, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR7, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR6, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR5, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR4, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR3, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR2, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR1, Port x configuration bits y =  0..15
    : GPIOH_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOH_OSPEEDR ; \ GPIOH_OSPEEDR_OSPEEDR0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOH [if]
    \ GPIOH_PUPDR (read-write) Reset:0x00000000
    : GPIOH_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR15, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR14, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR13, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR12, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR11, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR10, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR9, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR8, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR7, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR6, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR5, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR4, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR3, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR2, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR1, Port x configuration bits y =  0..15
    : GPIOH_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOH_PUPDR ; \ GPIOH_PUPDR_PUPDR0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOH_IDR (read-only) Reset:0x00000000
    : GPIOH_IDR_IDR15? ( --  1|0 ) 15 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR15, Port input data y =  0..15
    : GPIOH_IDR_IDR14? ( --  1|0 ) 14 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR14, Port input data y =  0..15
    : GPIOH_IDR_IDR13? ( --  1|0 ) 13 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR13, Port input data y =  0..15
    : GPIOH_IDR_IDR12? ( --  1|0 ) 12 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR12, Port input data y =  0..15
    : GPIOH_IDR_IDR11? ( --  1|0 ) 11 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR11, Port input data y =  0..15
    : GPIOH_IDR_IDR10? ( --  1|0 ) 10 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR10, Port input data y =  0..15
    : GPIOH_IDR_IDR9? ( --  1|0 ) 9 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR9, Port input data y =  0..15
    : GPIOH_IDR_IDR8? ( --  1|0 ) 8 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR8, Port input data y =  0..15
    : GPIOH_IDR_IDR7? ( --  1|0 ) 7 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR7, Port input data y =  0..15
    : GPIOH_IDR_IDR6? ( --  1|0 ) 6 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR6, Port input data y =  0..15
    : GPIOH_IDR_IDR5? ( --  1|0 ) 5 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR5, Port input data y =  0..15
    : GPIOH_IDR_IDR4? ( --  1|0 ) 4 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR4, Port input data y =  0..15
    : GPIOH_IDR_IDR3? ( --  1|0 ) 3 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR3, Port input data y =  0..15
    : GPIOH_IDR_IDR2? ( --  1|0 ) 2 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR2, Port input data y =  0..15
    : GPIOH_IDR_IDR1? ( --  1|0 ) 1 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR1, Port input data y =  0..15
    : GPIOH_IDR_IDR0? ( --  1|0 ) 0 bit GPIOH_IDR bit@ ; \ GPIOH_IDR_IDR0, Port input data y =  0..15
  [then]

  execute-defined? use-GPIOH [if]
    \ GPIOH_ODR (read-write) Reset:0x00000000
    : GPIOH_ODR_ODR15 ( -- x addr ) 15 bit GPIOH_ODR ; \ GPIOH_ODR_ODR15, Port output data y =  0..15
    : GPIOH_ODR_ODR14 ( -- x addr ) 14 bit GPIOH_ODR ; \ GPIOH_ODR_ODR14, Port output data y =  0..15
    : GPIOH_ODR_ODR13 ( -- x addr ) 13 bit GPIOH_ODR ; \ GPIOH_ODR_ODR13, Port output data y =  0..15
    : GPIOH_ODR_ODR12 ( -- x addr ) 12 bit GPIOH_ODR ; \ GPIOH_ODR_ODR12, Port output data y =  0..15
    : GPIOH_ODR_ODR11 ( -- x addr ) 11 bit GPIOH_ODR ; \ GPIOH_ODR_ODR11, Port output data y =  0..15
    : GPIOH_ODR_ODR10 ( -- x addr ) 10 bit GPIOH_ODR ; \ GPIOH_ODR_ODR10, Port output data y =  0..15
    : GPIOH_ODR_ODR9 ( -- x addr ) 9 bit GPIOH_ODR ; \ GPIOH_ODR_ODR9, Port output data y =  0..15
    : GPIOH_ODR_ODR8 ( -- x addr ) 8 bit GPIOH_ODR ; \ GPIOH_ODR_ODR8, Port output data y =  0..15
    : GPIOH_ODR_ODR7 ( -- x addr ) 7 bit GPIOH_ODR ; \ GPIOH_ODR_ODR7, Port output data y =  0..15
    : GPIOH_ODR_ODR6 ( -- x addr ) 6 bit GPIOH_ODR ; \ GPIOH_ODR_ODR6, Port output data y =  0..15
    : GPIOH_ODR_ODR5 ( -- x addr ) 5 bit GPIOH_ODR ; \ GPIOH_ODR_ODR5, Port output data y =  0..15
    : GPIOH_ODR_ODR4 ( -- x addr ) 4 bit GPIOH_ODR ; \ GPIOH_ODR_ODR4, Port output data y =  0..15
    : GPIOH_ODR_ODR3 ( -- x addr ) 3 bit GPIOH_ODR ; \ GPIOH_ODR_ODR3, Port output data y =  0..15
    : GPIOH_ODR_ODR2 ( -- x addr ) 2 bit GPIOH_ODR ; \ GPIOH_ODR_ODR2, Port output data y =  0..15
    : GPIOH_ODR_ODR1 ( -- x addr ) 1 bit GPIOH_ODR ; \ GPIOH_ODR_ODR1, Port output data y =  0..15
    : GPIOH_ODR_ODR0 ( -- x addr ) 0 bit GPIOH_ODR ; \ GPIOH_ODR_ODR0, Port output data y =  0..15
  [then]

  [if]
    \ GPIOH_BSRR (write-only) Reset:0x00000000
    : GPIOH_BSRR_BR15 ( -- ) 31 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR15, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR14 ( -- ) 30 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR14, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR13 ( -- ) 29 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR13, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR12 ( -- ) 28 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR12, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR11 ( -- ) 27 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR11, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR10 ( -- ) 26 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR10, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR9 ( -- ) 25 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR9, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR8 ( -- ) 24 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR8, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR7 ( -- ) 23 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR7, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR6 ( -- ) 22 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR6, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR5 ( -- ) 21 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR5, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR4 ( -- ) 20 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR4, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR3 ( -- ) 19 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR3, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR2 ( -- ) 18 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR2, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR1 ( -- ) 17 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR1, Port x reset bit y y =  0..15
    : GPIOH_BSRR_BR0 ( -- ) 16 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BR0, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS15 ( -- ) 15 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS15, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS14 ( -- ) 14 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS14, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS13 ( -- ) 13 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS13, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS12 ( -- ) 12 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS12, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS11 ( -- ) 11 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS11, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS10 ( -- ) 10 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS10, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS9 ( -- ) 9 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS9, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS8 ( -- ) 8 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS8, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS7 ( -- ) 7 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS7, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS6 ( -- ) 6 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS6, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS5 ( -- ) 5 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS5, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS4 ( -- ) 4 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS4, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS3 ( -- ) 3 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS3, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS2 ( -- ) 2 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS2, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS1 ( -- ) 1 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS1, Port x set bit y y=  0..15
    : GPIOH_BSRR_BS0 ( -- ) 0 bit GPIOH_BSRR ! ; \ GPIOH_BSRR_BS0, Port x set bit y y=  0..15
  [then]

  execute-defined? use-GPIOH [if]
    \ GPIOH_LCKR (read-write) Reset:0x00000000
    : GPIOH_LCKR_LCKK ( -- x addr ) 16 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCKK, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK15 ( -- x addr ) 15 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK15, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK14 ( -- x addr ) 14 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK14, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK13 ( -- x addr ) 13 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK13, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK12 ( -- x addr ) 12 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK12, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK11 ( -- x addr ) 11 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK11, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK10 ( -- x addr ) 10 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK10, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK9 ( -- x addr ) 9 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK9, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK8 ( -- x addr ) 8 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK8, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK7 ( -- x addr ) 7 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK7, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK6 ( -- x addr ) 6 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK6, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK5 ( -- x addr ) 5 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK5, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK4 ( -- x addr ) 4 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK4, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK3 ( -- x addr ) 3 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK3, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK2 ( -- x addr ) 2 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK2, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK1 ( -- x addr ) 1 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK1, Port x lock bit y y=  0..15
    : GPIOH_LCKR_LCK0 ( -- x addr ) 0 bit GPIOH_LCKR ; \ GPIOH_LCKR_LCK0, Port x lock bit y y=  0..15
  [then]

  [if]
    \ GPIOH_AFRL (read-write) Reset:0x00000000
    : GPIOH_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL7, Alternate function selection for port x  bit y y = 0..7
    : GPIOH_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL6, Alternate function selection for port x  bit y y = 0..7
    : GPIOH_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL5, Alternate function selection for port x  bit y y = 0..7
    : GPIOH_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL4, Alternate function selection for port x  bit y y = 0..7
    : GPIOH_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL3, Alternate function selection for port x  bit y y = 0..7
    : GPIOH_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL2, Alternate function selection for port x  bit y y = 0..7
    : GPIOH_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOH_AFRL ; \ GPIOH_AFRL_AFRL1, Alternate function selection for port x  bit y y = 0..7
    : GPIOH_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOH_AFRL ; \ GPIOH_AFRL_AFRL0, Alternate function selection for port x  bit y y = 0..7
  [then]

  execute-defined? use-GPIOH [if]
    \ GPIOH_AFRH (read-write) Reset:0x00000000
    : GPIOH_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH15, Alternate function selection for port x  bit y y = 8..15
    : GPIOH_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH14, Alternate function selection for port x  bit y y = 8..15
    : GPIOH_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH13, Alternate function selection for port x  bit y y = 8..15
    : GPIOH_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH12, Alternate function selection for port x  bit y y = 8..15
    : GPIOH_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH11, Alternate function selection for port x  bit y y = 8..15
    : GPIOH_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH10, Alternate function selection for port x  bit y y = 8..15
    : GPIOH_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOH_AFRH ; \ GPIOH_AFRH_AFRH9, Alternate function selection for port x  bit y y = 8..15
    : GPIOH_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOH_AFRH ; \ GPIOH_AFRH_AFRH8, Alternate function selection for port x  bit y y = 8..15
  [then]

  [if]
    \ GPIOG_MODER (read-write) Reset:0x00000000
    : GPIOG_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER15, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER14, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER13, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER12, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER11, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER10, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER9, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER8, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER7, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER6, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER5, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER4, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER3, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER2, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOG_MODER ; \ GPIOG_MODER_MODER1, Port x configuration bits y =  0..15
    : GPIOG_MODER_MODER0 ( %bb -- x addr ) GPIOG_MODER ; \ GPIOG_MODER_MODER0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOG [if]
    \ GPIOG_OTYPER (read-write) Reset:0x00000000
    : GPIOG_OTYPER_OT15 ( -- x addr ) 15 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT15, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT14 ( -- x addr ) 14 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT14, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT13 ( -- x addr ) 13 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT13, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT12 ( -- x addr ) 12 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT12, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT11 ( -- x addr ) 11 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT11, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT10 ( -- x addr ) 10 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT10, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT9 ( -- x addr ) 9 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT9, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT8 ( -- x addr ) 8 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT8, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT7 ( -- x addr ) 7 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT7, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT6 ( -- x addr ) 6 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT6, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT5 ( -- x addr ) 5 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT5, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT4 ( -- x addr ) 4 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT4, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT3 ( -- x addr ) 3 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT3, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT2 ( -- x addr ) 2 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT2, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT1 ( -- x addr ) 1 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT1, Port x configuration bits y =  0..15
    : GPIOG_OTYPER_OT0 ( -- x addr ) 0 bit GPIOG_OTYPER ; \ GPIOG_OTYPER_OT0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOG_OSPEEDR (read-write) Reset:0x00000000
    : GPIOG_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR15, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR14, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR13, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR12, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR11, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR10, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR9, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR8, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR7, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR6, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR5, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR4, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR3, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR2, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR1, Port x configuration bits y =  0..15
    : GPIOG_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOG_OSPEEDR ; \ GPIOG_OSPEEDR_OSPEEDR0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOG [if]
    \ GPIOG_PUPDR (read-write) Reset:0x00000000
    : GPIOG_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR15, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR14, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR13, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR12, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR11, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR10, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR9, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR8, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR7, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR6, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR5, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR4, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR3, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR2, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR1, Port x configuration bits y =  0..15
    : GPIOG_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOG_PUPDR ; \ GPIOG_PUPDR_PUPDR0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOG_IDR (read-only) Reset:0x00000000
    : GPIOG_IDR_IDR15? ( --  1|0 ) 15 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR15, Port input data y =  0..15
    : GPIOG_IDR_IDR14? ( --  1|0 ) 14 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR14, Port input data y =  0..15
    : GPIOG_IDR_IDR13? ( --  1|0 ) 13 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR13, Port input data y =  0..15
    : GPIOG_IDR_IDR12? ( --  1|0 ) 12 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR12, Port input data y =  0..15
    : GPIOG_IDR_IDR11? ( --  1|0 ) 11 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR11, Port input data y =  0..15
    : GPIOG_IDR_IDR10? ( --  1|0 ) 10 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR10, Port input data y =  0..15
    : GPIOG_IDR_IDR9? ( --  1|0 ) 9 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR9, Port input data y =  0..15
    : GPIOG_IDR_IDR8? ( --  1|0 ) 8 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR8, Port input data y =  0..15
    : GPIOG_IDR_IDR7? ( --  1|0 ) 7 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR7, Port input data y =  0..15
    : GPIOG_IDR_IDR6? ( --  1|0 ) 6 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR6, Port input data y =  0..15
    : GPIOG_IDR_IDR5? ( --  1|0 ) 5 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR5, Port input data y =  0..15
    : GPIOG_IDR_IDR4? ( --  1|0 ) 4 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR4, Port input data y =  0..15
    : GPIOG_IDR_IDR3? ( --  1|0 ) 3 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR3, Port input data y =  0..15
    : GPIOG_IDR_IDR2? ( --  1|0 ) 2 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR2, Port input data y =  0..15
    : GPIOG_IDR_IDR1? ( --  1|0 ) 1 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR1, Port input data y =  0..15
    : GPIOG_IDR_IDR0? ( --  1|0 ) 0 bit GPIOG_IDR bit@ ; \ GPIOG_IDR_IDR0, Port input data y =  0..15
  [then]

  execute-defined? use-GPIOG [if]
    \ GPIOG_ODR (read-write) Reset:0x00000000
    : GPIOG_ODR_ODR15 ( -- x addr ) 15 bit GPIOG_ODR ; \ GPIOG_ODR_ODR15, Port output data y =  0..15
    : GPIOG_ODR_ODR14 ( -- x addr ) 14 bit GPIOG_ODR ; \ GPIOG_ODR_ODR14, Port output data y =  0..15
    : GPIOG_ODR_ODR13 ( -- x addr ) 13 bit GPIOG_ODR ; \ GPIOG_ODR_ODR13, Port output data y =  0..15
    : GPIOG_ODR_ODR12 ( -- x addr ) 12 bit GPIOG_ODR ; \ GPIOG_ODR_ODR12, Port output data y =  0..15
    : GPIOG_ODR_ODR11 ( -- x addr ) 11 bit GPIOG_ODR ; \ GPIOG_ODR_ODR11, Port output data y =  0..15
    : GPIOG_ODR_ODR10 ( -- x addr ) 10 bit GPIOG_ODR ; \ GPIOG_ODR_ODR10, Port output data y =  0..15
    : GPIOG_ODR_ODR9 ( -- x addr ) 9 bit GPIOG_ODR ; \ GPIOG_ODR_ODR9, Port output data y =  0..15
    : GPIOG_ODR_ODR8 ( -- x addr ) 8 bit GPIOG_ODR ; \ GPIOG_ODR_ODR8, Port output data y =  0..15
    : GPIOG_ODR_ODR7 ( -- x addr ) 7 bit GPIOG_ODR ; \ GPIOG_ODR_ODR7, Port output data y =  0..15
    : GPIOG_ODR_ODR6 ( -- x addr ) 6 bit GPIOG_ODR ; \ GPIOG_ODR_ODR6, Port output data y =  0..15
    : GPIOG_ODR_ODR5 ( -- x addr ) 5 bit GPIOG_ODR ; \ GPIOG_ODR_ODR5, Port output data y =  0..15
    : GPIOG_ODR_ODR4 ( -- x addr ) 4 bit GPIOG_ODR ; \ GPIOG_ODR_ODR4, Port output data y =  0..15
    : GPIOG_ODR_ODR3 ( -- x addr ) 3 bit GPIOG_ODR ; \ GPIOG_ODR_ODR3, Port output data y =  0..15
    : GPIOG_ODR_ODR2 ( -- x addr ) 2 bit GPIOG_ODR ; \ GPIOG_ODR_ODR2, Port output data y =  0..15
    : GPIOG_ODR_ODR1 ( -- x addr ) 1 bit GPIOG_ODR ; \ GPIOG_ODR_ODR1, Port output data y =  0..15
    : GPIOG_ODR_ODR0 ( -- x addr ) 0 bit GPIOG_ODR ; \ GPIOG_ODR_ODR0, Port output data y =  0..15
  [then]

  [if]
    \ GPIOG_BSRR (write-only) Reset:0x00000000
    : GPIOG_BSRR_BR15 ( -- ) 31 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR15, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR14 ( -- ) 30 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR14, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR13 ( -- ) 29 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR13, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR12 ( -- ) 28 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR12, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR11 ( -- ) 27 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR11, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR10 ( -- ) 26 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR10, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR9 ( -- ) 25 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR9, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR8 ( -- ) 24 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR8, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR7 ( -- ) 23 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR7, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR6 ( -- ) 22 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR6, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR5 ( -- ) 21 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR5, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR4 ( -- ) 20 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR4, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR3 ( -- ) 19 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR3, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR2 ( -- ) 18 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR2, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR1 ( -- ) 17 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR1, Port x reset bit y y =  0..15
    : GPIOG_BSRR_BR0 ( -- ) 16 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BR0, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS15 ( -- ) 15 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS15, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS14 ( -- ) 14 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS14, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS13 ( -- ) 13 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS13, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS12 ( -- ) 12 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS12, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS11 ( -- ) 11 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS11, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS10 ( -- ) 10 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS10, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS9 ( -- ) 9 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS9, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS8 ( -- ) 8 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS8, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS7 ( -- ) 7 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS7, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS6 ( -- ) 6 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS6, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS5 ( -- ) 5 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS5, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS4 ( -- ) 4 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS4, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS3 ( -- ) 3 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS3, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS2 ( -- ) 2 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS2, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS1 ( -- ) 1 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS1, Port x set bit y y=  0..15
    : GPIOG_BSRR_BS0 ( -- ) 0 bit GPIOG_BSRR ! ; \ GPIOG_BSRR_BS0, Port x set bit y y=  0..15
  [then]

  execute-defined? use-GPIOG [if]
    \ GPIOG_LCKR (read-write) Reset:0x00000000
    : GPIOG_LCKR_LCKK ( -- x addr ) 16 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCKK, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK15 ( -- x addr ) 15 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK15, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK14 ( -- x addr ) 14 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK14, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK13 ( -- x addr ) 13 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK13, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK12 ( -- x addr ) 12 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK12, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK11 ( -- x addr ) 11 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK11, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK10 ( -- x addr ) 10 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK10, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK9 ( -- x addr ) 9 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK9, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK8 ( -- x addr ) 8 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK8, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK7 ( -- x addr ) 7 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK7, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK6 ( -- x addr ) 6 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK6, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK5 ( -- x addr ) 5 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK5, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK4 ( -- x addr ) 4 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK4, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK3 ( -- x addr ) 3 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK3, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK2 ( -- x addr ) 2 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK2, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK1 ( -- x addr ) 1 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK1, Port x lock bit y y=  0..15
    : GPIOG_LCKR_LCK0 ( -- x addr ) 0 bit GPIOG_LCKR ; \ GPIOG_LCKR_LCK0, Port x lock bit y y=  0..15
  [then]

  [if]
    \ GPIOG_AFRL (read-write) Reset:0x00000000
    : GPIOG_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL7, Alternate function selection for port x  bit y y = 0..7
    : GPIOG_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL6, Alternate function selection for port x  bit y y = 0..7
    : GPIOG_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL5, Alternate function selection for port x  bit y y = 0..7
    : GPIOG_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL4, Alternate function selection for port x  bit y y = 0..7
    : GPIOG_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL3, Alternate function selection for port x  bit y y = 0..7
    : GPIOG_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL2, Alternate function selection for port x  bit y y = 0..7
    : GPIOG_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOG_AFRL ; \ GPIOG_AFRL_AFRL1, Alternate function selection for port x  bit y y = 0..7
    : GPIOG_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOG_AFRL ; \ GPIOG_AFRL_AFRL0, Alternate function selection for port x  bit y y = 0..7
  [then]

  execute-defined? use-GPIOG [if]
    \ GPIOG_AFRH (read-write) Reset:0x00000000
    : GPIOG_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH15, Alternate function selection for port x  bit y y = 8..15
    : GPIOG_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH14, Alternate function selection for port x  bit y y = 8..15
    : GPIOG_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH13, Alternate function selection for port x  bit y y = 8..15
    : GPIOG_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH12, Alternate function selection for port x  bit y y = 8..15
    : GPIOG_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH11, Alternate function selection for port x  bit y y = 8..15
    : GPIOG_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH10, Alternate function selection for port x  bit y y = 8..15
    : GPIOG_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOG_AFRH ; \ GPIOG_AFRH_AFRH9, Alternate function selection for port x  bit y y = 8..15
    : GPIOG_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOG_AFRH ; \ GPIOG_AFRH_AFRH8, Alternate function selection for port x  bit y y = 8..15
  [then]

  [if]
    \ GPIOF_MODER (read-write) Reset:0x00000000
    : GPIOF_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER15, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER14, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER13, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER12, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER11, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER10, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER9, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER8, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER7, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER6, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER5, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER4, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER3, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER2, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOF_MODER ; \ GPIOF_MODER_MODER1, Port x configuration bits y =  0..15
    : GPIOF_MODER_MODER0 ( %bb -- x addr ) GPIOF_MODER ; \ GPIOF_MODER_MODER0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOF [if]
    \ GPIOF_OTYPER (read-write) Reset:0x00000000
    : GPIOF_OTYPER_OT15 ( -- x addr ) 15 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT15, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT14 ( -- x addr ) 14 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT14, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT13 ( -- x addr ) 13 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT13, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT12 ( -- x addr ) 12 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT12, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT11 ( -- x addr ) 11 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT11, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT10 ( -- x addr ) 10 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT10, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT9 ( -- x addr ) 9 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT9, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT8 ( -- x addr ) 8 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT8, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT7 ( -- x addr ) 7 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT7, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT6 ( -- x addr ) 6 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT6, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT5 ( -- x addr ) 5 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT5, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT4 ( -- x addr ) 4 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT4, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT3 ( -- x addr ) 3 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT3, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT2 ( -- x addr ) 2 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT2, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT1 ( -- x addr ) 1 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT1, Port x configuration bits y =  0..15
    : GPIOF_OTYPER_OT0 ( -- x addr ) 0 bit GPIOF_OTYPER ; \ GPIOF_OTYPER_OT0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOF_OSPEEDR (read-write) Reset:0x00000000
    : GPIOF_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR15, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR14, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR13, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR12, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR11, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR10, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR9, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR8, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR7, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR6, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR5, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR4, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR3, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR2, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR1, Port x configuration bits y =  0..15
    : GPIOF_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOF_OSPEEDR ; \ GPIOF_OSPEEDR_OSPEEDR0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOF [if]
    \ GPIOF_PUPDR (read-write) Reset:0x00000000
    : GPIOF_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR15, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR14, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR13, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR12, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR11, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR10, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR9, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR8, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR7, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR6, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR5, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR4, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR3, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR2, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR1, Port x configuration bits y =  0..15
    : GPIOF_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOF_PUPDR ; \ GPIOF_PUPDR_PUPDR0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOF_IDR (read-only) Reset:0x00000000
    : GPIOF_IDR_IDR15? ( --  1|0 ) 15 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR15, Port input data y =  0..15
    : GPIOF_IDR_IDR14? ( --  1|0 ) 14 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR14, Port input data y =  0..15
    : GPIOF_IDR_IDR13? ( --  1|0 ) 13 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR13, Port input data y =  0..15
    : GPIOF_IDR_IDR12? ( --  1|0 ) 12 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR12, Port input data y =  0..15
    : GPIOF_IDR_IDR11? ( --  1|0 ) 11 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR11, Port input data y =  0..15
    : GPIOF_IDR_IDR10? ( --  1|0 ) 10 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR10, Port input data y =  0..15
    : GPIOF_IDR_IDR9? ( --  1|0 ) 9 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR9, Port input data y =  0..15
    : GPIOF_IDR_IDR8? ( --  1|0 ) 8 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR8, Port input data y =  0..15
    : GPIOF_IDR_IDR7? ( --  1|0 ) 7 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR7, Port input data y =  0..15
    : GPIOF_IDR_IDR6? ( --  1|0 ) 6 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR6, Port input data y =  0..15
    : GPIOF_IDR_IDR5? ( --  1|0 ) 5 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR5, Port input data y =  0..15
    : GPIOF_IDR_IDR4? ( --  1|0 ) 4 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR4, Port input data y =  0..15
    : GPIOF_IDR_IDR3? ( --  1|0 ) 3 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR3, Port input data y =  0..15
    : GPIOF_IDR_IDR2? ( --  1|0 ) 2 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR2, Port input data y =  0..15
    : GPIOF_IDR_IDR1? ( --  1|0 ) 1 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR1, Port input data y =  0..15
    : GPIOF_IDR_IDR0? ( --  1|0 ) 0 bit GPIOF_IDR bit@ ; \ GPIOF_IDR_IDR0, Port input data y =  0..15
  [then]

  execute-defined? use-GPIOF [if]
    \ GPIOF_ODR (read-write) Reset:0x00000000
    : GPIOF_ODR_ODR15 ( -- x addr ) 15 bit GPIOF_ODR ; \ GPIOF_ODR_ODR15, Port output data y =  0..15
    : GPIOF_ODR_ODR14 ( -- x addr ) 14 bit GPIOF_ODR ; \ GPIOF_ODR_ODR14, Port output data y =  0..15
    : GPIOF_ODR_ODR13 ( -- x addr ) 13 bit GPIOF_ODR ; \ GPIOF_ODR_ODR13, Port output data y =  0..15
    : GPIOF_ODR_ODR12 ( -- x addr ) 12 bit GPIOF_ODR ; \ GPIOF_ODR_ODR12, Port output data y =  0..15
    : GPIOF_ODR_ODR11 ( -- x addr ) 11 bit GPIOF_ODR ; \ GPIOF_ODR_ODR11, Port output data y =  0..15
    : GPIOF_ODR_ODR10 ( -- x addr ) 10 bit GPIOF_ODR ; \ GPIOF_ODR_ODR10, Port output data y =  0..15
    : GPIOF_ODR_ODR9 ( -- x addr ) 9 bit GPIOF_ODR ; \ GPIOF_ODR_ODR9, Port output data y =  0..15
    : GPIOF_ODR_ODR8 ( -- x addr ) 8 bit GPIOF_ODR ; \ GPIOF_ODR_ODR8, Port output data y =  0..15
    : GPIOF_ODR_ODR7 ( -- x addr ) 7 bit GPIOF_ODR ; \ GPIOF_ODR_ODR7, Port output data y =  0..15
    : GPIOF_ODR_ODR6 ( -- x addr ) 6 bit GPIOF_ODR ; \ GPIOF_ODR_ODR6, Port output data y =  0..15
    : GPIOF_ODR_ODR5 ( -- x addr ) 5 bit GPIOF_ODR ; \ GPIOF_ODR_ODR5, Port output data y =  0..15
    : GPIOF_ODR_ODR4 ( -- x addr ) 4 bit GPIOF_ODR ; \ GPIOF_ODR_ODR4, Port output data y =  0..15
    : GPIOF_ODR_ODR3 ( -- x addr ) 3 bit GPIOF_ODR ; \ GPIOF_ODR_ODR3, Port output data y =  0..15
    : GPIOF_ODR_ODR2 ( -- x addr ) 2 bit GPIOF_ODR ; \ GPIOF_ODR_ODR2, Port output data y =  0..15
    : GPIOF_ODR_ODR1 ( -- x addr ) 1 bit GPIOF_ODR ; \ GPIOF_ODR_ODR1, Port output data y =  0..15
    : GPIOF_ODR_ODR0 ( -- x addr ) 0 bit GPIOF_ODR ; \ GPIOF_ODR_ODR0, Port output data y =  0..15
  [then]

  [if]
    \ GPIOF_BSRR (write-only) Reset:0x00000000
    : GPIOF_BSRR_BR15 ( -- ) 31 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR15, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR14 ( -- ) 30 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR14, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR13 ( -- ) 29 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR13, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR12 ( -- ) 28 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR12, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR11 ( -- ) 27 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR11, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR10 ( -- ) 26 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR10, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR9 ( -- ) 25 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR9, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR8 ( -- ) 24 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR8, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR7 ( -- ) 23 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR7, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR6 ( -- ) 22 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR6, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR5 ( -- ) 21 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR5, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR4 ( -- ) 20 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR4, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR3 ( -- ) 19 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR3, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR2 ( -- ) 18 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR2, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR1 ( -- ) 17 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR1, Port x reset bit y y =  0..15
    : GPIOF_BSRR_BR0 ( -- ) 16 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BR0, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS15 ( -- ) 15 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS15, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS14 ( -- ) 14 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS14, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS13 ( -- ) 13 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS13, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS12 ( -- ) 12 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS12, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS11 ( -- ) 11 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS11, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS10 ( -- ) 10 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS10, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS9 ( -- ) 9 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS9, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS8 ( -- ) 8 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS8, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS7 ( -- ) 7 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS7, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS6 ( -- ) 6 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS6, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS5 ( -- ) 5 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS5, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS4 ( -- ) 4 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS4, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS3 ( -- ) 3 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS3, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS2 ( -- ) 2 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS2, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS1 ( -- ) 1 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS1, Port x set bit y y=  0..15
    : GPIOF_BSRR_BS0 ( -- ) 0 bit GPIOF_BSRR ! ; \ GPIOF_BSRR_BS0, Port x set bit y y=  0..15
  [then]

  execute-defined? use-GPIOF [if]
    \ GPIOF_LCKR (read-write) Reset:0x00000000
    : GPIOF_LCKR_LCKK ( -- x addr ) 16 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCKK, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK15 ( -- x addr ) 15 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK15, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK14 ( -- x addr ) 14 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK14, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK13 ( -- x addr ) 13 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK13, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK12 ( -- x addr ) 12 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK12, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK11 ( -- x addr ) 11 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK11, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK10 ( -- x addr ) 10 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK10, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK9 ( -- x addr ) 9 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK9, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK8 ( -- x addr ) 8 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK8, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK7 ( -- x addr ) 7 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK7, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK6 ( -- x addr ) 6 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK6, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK5 ( -- x addr ) 5 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK5, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK4 ( -- x addr ) 4 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK4, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK3 ( -- x addr ) 3 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK3, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK2 ( -- x addr ) 2 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK2, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK1 ( -- x addr ) 1 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK1, Port x lock bit y y=  0..15
    : GPIOF_LCKR_LCK0 ( -- x addr ) 0 bit GPIOF_LCKR ; \ GPIOF_LCKR_LCK0, Port x lock bit y y=  0..15
  [then]

  [if]
    \ GPIOF_AFRL (read-write) Reset:0x00000000
    : GPIOF_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL7, Alternate function selection for port x  bit y y = 0..7
    : GPIOF_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL6, Alternate function selection for port x  bit y y = 0..7
    : GPIOF_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL5, Alternate function selection for port x  bit y y = 0..7
    : GPIOF_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL4, Alternate function selection for port x  bit y y = 0..7
    : GPIOF_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL3, Alternate function selection for port x  bit y y = 0..7
    : GPIOF_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL2, Alternate function selection for port x  bit y y = 0..7
    : GPIOF_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOF_AFRL ; \ GPIOF_AFRL_AFRL1, Alternate function selection for port x  bit y y = 0..7
    : GPIOF_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOF_AFRL ; \ GPIOF_AFRL_AFRL0, Alternate function selection for port x  bit y y = 0..7
  [then]

  execute-defined? use-GPIOF [if]
    \ GPIOF_AFRH (read-write) Reset:0x00000000
    : GPIOF_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH15, Alternate function selection for port x  bit y y = 8..15
    : GPIOF_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH14, Alternate function selection for port x  bit y y = 8..15
    : GPIOF_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH13, Alternate function selection for port x  bit y y = 8..15
    : GPIOF_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH12, Alternate function selection for port x  bit y y = 8..15
    : GPIOF_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH11, Alternate function selection for port x  bit y y = 8..15
    : GPIOF_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH10, Alternate function selection for port x  bit y y = 8..15
    : GPIOF_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOF_AFRH ; \ GPIOF_AFRH_AFRH9, Alternate function selection for port x  bit y y = 8..15
    : GPIOF_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOF_AFRH ; \ GPIOF_AFRH_AFRH8, Alternate function selection for port x  bit y y = 8..15
  [then]

  [if]
    \ GPIOE_MODER (read-write) Reset:0x00000000
    : GPIOE_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER15, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER14, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER13, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER12, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER11, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER10, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER9, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER8, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER7, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER6, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER5, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER4, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER3, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER2, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOE_MODER ; \ GPIOE_MODER_MODER1, Port x configuration bits y =  0..15
    : GPIOE_MODER_MODER0 ( %bb -- x addr ) GPIOE_MODER ; \ GPIOE_MODER_MODER0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOE [if]
    \ GPIOE_OTYPER (read-write) Reset:0x00000000
    : GPIOE_OTYPER_OT15 ( -- x addr ) 15 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT15, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT14 ( -- x addr ) 14 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT14, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT13 ( -- x addr ) 13 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT13, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT12 ( -- x addr ) 12 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT12, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT11 ( -- x addr ) 11 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT11, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT10 ( -- x addr ) 10 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT10, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT9 ( -- x addr ) 9 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT9, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT8 ( -- x addr ) 8 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT8, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT7 ( -- x addr ) 7 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT7, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT6 ( -- x addr ) 6 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT6, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT5 ( -- x addr ) 5 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT5, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT4 ( -- x addr ) 4 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT4, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT3 ( -- x addr ) 3 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT3, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT2 ( -- x addr ) 2 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT2, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT1 ( -- x addr ) 1 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT1, Port x configuration bits y =  0..15
    : GPIOE_OTYPER_OT0 ( -- x addr ) 0 bit GPIOE_OTYPER ; \ GPIOE_OTYPER_OT0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOE_OSPEEDR (read-write) Reset:0x00000000
    : GPIOE_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR15, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR14, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR13, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR12, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR11, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR10, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR9, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR8, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR7, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR6, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR5, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR4, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR3, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR2, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR1, Port x configuration bits y =  0..15
    : GPIOE_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOE_OSPEEDR ; \ GPIOE_OSPEEDR_OSPEEDR0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOE [if]
    \ GPIOE_PUPDR (read-write) Reset:0x00000000
    : GPIOE_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR15, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR14, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR13, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR12, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR11, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR10, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR9, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR8, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR7, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR6, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR5, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR4, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR3, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR2, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR1, Port x configuration bits y =  0..15
    : GPIOE_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOE_PUPDR ; \ GPIOE_PUPDR_PUPDR0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOE_IDR (read-only) Reset:0x00000000
    : GPIOE_IDR_IDR15? ( --  1|0 ) 15 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR15, Port input data y =  0..15
    : GPIOE_IDR_IDR14? ( --  1|0 ) 14 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR14, Port input data y =  0..15
    : GPIOE_IDR_IDR13? ( --  1|0 ) 13 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR13, Port input data y =  0..15
    : GPIOE_IDR_IDR12? ( --  1|0 ) 12 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR12, Port input data y =  0..15
    : GPIOE_IDR_IDR11? ( --  1|0 ) 11 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR11, Port input data y =  0..15
    : GPIOE_IDR_IDR10? ( --  1|0 ) 10 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR10, Port input data y =  0..15
    : GPIOE_IDR_IDR9? ( --  1|0 ) 9 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR9, Port input data y =  0..15
    : GPIOE_IDR_IDR8? ( --  1|0 ) 8 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR8, Port input data y =  0..15
    : GPIOE_IDR_IDR7? ( --  1|0 ) 7 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR7, Port input data y =  0..15
    : GPIOE_IDR_IDR6? ( --  1|0 ) 6 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR6, Port input data y =  0..15
    : GPIOE_IDR_IDR5? ( --  1|0 ) 5 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR5, Port input data y =  0..15
    : GPIOE_IDR_IDR4? ( --  1|0 ) 4 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR4, Port input data y =  0..15
    : GPIOE_IDR_IDR3? ( --  1|0 ) 3 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR3, Port input data y =  0..15
    : GPIOE_IDR_IDR2? ( --  1|0 ) 2 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR2, Port input data y =  0..15
    : GPIOE_IDR_IDR1? ( --  1|0 ) 1 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR1, Port input data y =  0..15
    : GPIOE_IDR_IDR0? ( --  1|0 ) 0 bit GPIOE_IDR bit@ ; \ GPIOE_IDR_IDR0, Port input data y =  0..15
  [then]

  execute-defined? use-GPIOE [if]
    \ GPIOE_ODR (read-write) Reset:0x00000000
    : GPIOE_ODR_ODR15 ( -- x addr ) 15 bit GPIOE_ODR ; \ GPIOE_ODR_ODR15, Port output data y =  0..15
    : GPIOE_ODR_ODR14 ( -- x addr ) 14 bit GPIOE_ODR ; \ GPIOE_ODR_ODR14, Port output data y =  0..15
    : GPIOE_ODR_ODR13 ( -- x addr ) 13 bit GPIOE_ODR ; \ GPIOE_ODR_ODR13, Port output data y =  0..15
    : GPIOE_ODR_ODR12 ( -- x addr ) 12 bit GPIOE_ODR ; \ GPIOE_ODR_ODR12, Port output data y =  0..15
    : GPIOE_ODR_ODR11 ( -- x addr ) 11 bit GPIOE_ODR ; \ GPIOE_ODR_ODR11, Port output data y =  0..15
    : GPIOE_ODR_ODR10 ( -- x addr ) 10 bit GPIOE_ODR ; \ GPIOE_ODR_ODR10, Port output data y =  0..15
    : GPIOE_ODR_ODR9 ( -- x addr ) 9 bit GPIOE_ODR ; \ GPIOE_ODR_ODR9, Port output data y =  0..15
    : GPIOE_ODR_ODR8 ( -- x addr ) 8 bit GPIOE_ODR ; \ GPIOE_ODR_ODR8, Port output data y =  0..15
    : GPIOE_ODR_ODR7 ( -- x addr ) 7 bit GPIOE_ODR ; \ GPIOE_ODR_ODR7, Port output data y =  0..15
    : GPIOE_ODR_ODR6 ( -- x addr ) 6 bit GPIOE_ODR ; \ GPIOE_ODR_ODR6, Port output data y =  0..15
    : GPIOE_ODR_ODR5 ( -- x addr ) 5 bit GPIOE_ODR ; \ GPIOE_ODR_ODR5, Port output data y =  0..15
    : GPIOE_ODR_ODR4 ( -- x addr ) 4 bit GPIOE_ODR ; \ GPIOE_ODR_ODR4, Port output data y =  0..15
    : GPIOE_ODR_ODR3 ( -- x addr ) 3 bit GPIOE_ODR ; \ GPIOE_ODR_ODR3, Port output data y =  0..15
    : GPIOE_ODR_ODR2 ( -- x addr ) 2 bit GPIOE_ODR ; \ GPIOE_ODR_ODR2, Port output data y =  0..15
    : GPIOE_ODR_ODR1 ( -- x addr ) 1 bit GPIOE_ODR ; \ GPIOE_ODR_ODR1, Port output data y =  0..15
    : GPIOE_ODR_ODR0 ( -- x addr ) 0 bit GPIOE_ODR ; \ GPIOE_ODR_ODR0, Port output data y =  0..15
  [then]

  [if]
    \ GPIOE_BSRR (write-only) Reset:0x00000000
    : GPIOE_BSRR_BR15 ( -- ) 31 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR15, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR14 ( -- ) 30 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR14, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR13 ( -- ) 29 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR13, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR12 ( -- ) 28 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR12, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR11 ( -- ) 27 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR11, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR10 ( -- ) 26 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR10, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR9 ( -- ) 25 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR9, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR8 ( -- ) 24 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR8, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR7 ( -- ) 23 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR7, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR6 ( -- ) 22 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR6, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR5 ( -- ) 21 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR5, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR4 ( -- ) 20 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR4, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR3 ( -- ) 19 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR3, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR2 ( -- ) 18 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR2, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR1 ( -- ) 17 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR1, Port x reset bit y y =  0..15
    : GPIOE_BSRR_BR0 ( -- ) 16 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BR0, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS15 ( -- ) 15 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS15, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS14 ( -- ) 14 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS14, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS13 ( -- ) 13 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS13, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS12 ( -- ) 12 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS12, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS11 ( -- ) 11 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS11, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS10 ( -- ) 10 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS10, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS9 ( -- ) 9 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS9, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS8 ( -- ) 8 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS8, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS7 ( -- ) 7 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS7, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS6 ( -- ) 6 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS6, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS5 ( -- ) 5 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS5, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS4 ( -- ) 4 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS4, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS3 ( -- ) 3 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS3, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS2 ( -- ) 2 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS2, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS1 ( -- ) 1 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS1, Port x set bit y y=  0..15
    : GPIOE_BSRR_BS0 ( -- ) 0 bit GPIOE_BSRR ! ; \ GPIOE_BSRR_BS0, Port x set bit y y=  0..15
  [then]

  execute-defined? use-GPIOE [if]
    \ GPIOE_LCKR (read-write) Reset:0x00000000
    : GPIOE_LCKR_LCKK ( -- x addr ) 16 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCKK, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK15 ( -- x addr ) 15 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK15, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK14 ( -- x addr ) 14 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK14, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK13 ( -- x addr ) 13 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK13, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK12 ( -- x addr ) 12 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK12, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK11 ( -- x addr ) 11 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK11, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK10 ( -- x addr ) 10 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK10, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK9 ( -- x addr ) 9 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK9, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK8 ( -- x addr ) 8 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK8, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK7 ( -- x addr ) 7 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK7, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK6 ( -- x addr ) 6 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK6, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK5 ( -- x addr ) 5 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK5, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK4 ( -- x addr ) 4 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK4, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK3 ( -- x addr ) 3 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK3, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK2 ( -- x addr ) 2 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK2, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK1 ( -- x addr ) 1 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK1, Port x lock bit y y=  0..15
    : GPIOE_LCKR_LCK0 ( -- x addr ) 0 bit GPIOE_LCKR ; \ GPIOE_LCKR_LCK0, Port x lock bit y y=  0..15
  [then]

  [if]
    \ GPIOE_AFRL (read-write) Reset:0x00000000
    : GPIOE_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL7, Alternate function selection for port x  bit y y = 0..7
    : GPIOE_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL6, Alternate function selection for port x  bit y y = 0..7
    : GPIOE_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL5, Alternate function selection for port x  bit y y = 0..7
    : GPIOE_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL4, Alternate function selection for port x  bit y y = 0..7
    : GPIOE_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL3, Alternate function selection for port x  bit y y = 0..7
    : GPIOE_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL2, Alternate function selection for port x  bit y y = 0..7
    : GPIOE_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOE_AFRL ; \ GPIOE_AFRL_AFRL1, Alternate function selection for port x  bit y y = 0..7
    : GPIOE_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOE_AFRL ; \ GPIOE_AFRL_AFRL0, Alternate function selection for port x  bit y y = 0..7
  [then]

  execute-defined? use-GPIOE [if]
    \ GPIOE_AFRH (read-write) Reset:0x00000000
    : GPIOE_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH15, Alternate function selection for port x  bit y y = 8..15
    : GPIOE_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH14, Alternate function selection for port x  bit y y = 8..15
    : GPIOE_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH13, Alternate function selection for port x  bit y y = 8..15
    : GPIOE_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH12, Alternate function selection for port x  bit y y = 8..15
    : GPIOE_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH11, Alternate function selection for port x  bit y y = 8..15
    : GPIOE_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH10, Alternate function selection for port x  bit y y = 8..15
    : GPIOE_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOE_AFRH ; \ GPIOE_AFRH_AFRH9, Alternate function selection for port x  bit y y = 8..15
    : GPIOE_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOE_AFRH ; \ GPIOE_AFRH_AFRH8, Alternate function selection for port x  bit y y = 8..15
  [then]

  [if]
    \ GPIOD_MODER (read-write) Reset:0x00000000
    : GPIOD_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER15, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER14, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER13, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER12, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER11, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER10, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER9, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER8, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER7, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER6, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER5, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER4, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER3, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER2, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOD_MODER ; \ GPIOD_MODER_MODER1, Port x configuration bits y =  0..15
    : GPIOD_MODER_MODER0 ( %bb -- x addr ) GPIOD_MODER ; \ GPIOD_MODER_MODER0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOD [if]
    \ GPIOD_OTYPER (read-write) Reset:0x00000000
    : GPIOD_OTYPER_OT15 ( -- x addr ) 15 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT15, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT14 ( -- x addr ) 14 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT14, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT13 ( -- x addr ) 13 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT13, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT12 ( -- x addr ) 12 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT12, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT11 ( -- x addr ) 11 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT11, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT10 ( -- x addr ) 10 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT10, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT9 ( -- x addr ) 9 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT9, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT8 ( -- x addr ) 8 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT8, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT7 ( -- x addr ) 7 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT7, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT6 ( -- x addr ) 6 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT6, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT5 ( -- x addr ) 5 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT5, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT4 ( -- x addr ) 4 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT4, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT3 ( -- x addr ) 3 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT3, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT2 ( -- x addr ) 2 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT2, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT1 ( -- x addr ) 1 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT1, Port x configuration bits y =  0..15
    : GPIOD_OTYPER_OT0 ( -- x addr ) 0 bit GPIOD_OTYPER ; \ GPIOD_OTYPER_OT0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOD_OSPEEDR (read-write) Reset:0x00000000
    : GPIOD_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR15, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR14, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR13, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR12, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR11, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR10, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR9, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR8, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR7, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR6, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR5, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR4, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR3, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR2, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR1, Port x configuration bits y =  0..15
    : GPIOD_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOD_OSPEEDR ; \ GPIOD_OSPEEDR_OSPEEDR0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOD [if]
    \ GPIOD_PUPDR (read-write) Reset:0x00000000
    : GPIOD_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR15, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR14, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR13, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR12, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR11, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR10, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR9, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR8, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR7, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR6, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR5, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR4, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR3, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR2, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR1, Port x configuration bits y =  0..15
    : GPIOD_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOD_PUPDR ; \ GPIOD_PUPDR_PUPDR0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOD_IDR (read-only) Reset:0x00000000
    : GPIOD_IDR_IDR15? ( --  1|0 ) 15 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR15, Port input data y =  0..15
    : GPIOD_IDR_IDR14? ( --  1|0 ) 14 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR14, Port input data y =  0..15
    : GPIOD_IDR_IDR13? ( --  1|0 ) 13 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR13, Port input data y =  0..15
    : GPIOD_IDR_IDR12? ( --  1|0 ) 12 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR12, Port input data y =  0..15
    : GPIOD_IDR_IDR11? ( --  1|0 ) 11 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR11, Port input data y =  0..15
    : GPIOD_IDR_IDR10? ( --  1|0 ) 10 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR10, Port input data y =  0..15
    : GPIOD_IDR_IDR9? ( --  1|0 ) 9 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR9, Port input data y =  0..15
    : GPIOD_IDR_IDR8? ( --  1|0 ) 8 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR8, Port input data y =  0..15
    : GPIOD_IDR_IDR7? ( --  1|0 ) 7 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR7, Port input data y =  0..15
    : GPIOD_IDR_IDR6? ( --  1|0 ) 6 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR6, Port input data y =  0..15
    : GPIOD_IDR_IDR5? ( --  1|0 ) 5 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR5, Port input data y =  0..15
    : GPIOD_IDR_IDR4? ( --  1|0 ) 4 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR4, Port input data y =  0..15
    : GPIOD_IDR_IDR3? ( --  1|0 ) 3 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR3, Port input data y =  0..15
    : GPIOD_IDR_IDR2? ( --  1|0 ) 2 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR2, Port input data y =  0..15
    : GPIOD_IDR_IDR1? ( --  1|0 ) 1 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR1, Port input data y =  0..15
    : GPIOD_IDR_IDR0? ( --  1|0 ) 0 bit GPIOD_IDR bit@ ; \ GPIOD_IDR_IDR0, Port input data y =  0..15
  [then]

  execute-defined? use-GPIOD [if]
    \ GPIOD_ODR (read-write) Reset:0x00000000
    : GPIOD_ODR_ODR15 ( -- x addr ) 15 bit GPIOD_ODR ; \ GPIOD_ODR_ODR15, Port output data y =  0..15
    : GPIOD_ODR_ODR14 ( -- x addr ) 14 bit GPIOD_ODR ; \ GPIOD_ODR_ODR14, Port output data y =  0..15
    : GPIOD_ODR_ODR13 ( -- x addr ) 13 bit GPIOD_ODR ; \ GPIOD_ODR_ODR13, Port output data y =  0..15
    : GPIOD_ODR_ODR12 ( -- x addr ) 12 bit GPIOD_ODR ; \ GPIOD_ODR_ODR12, Port output data y =  0..15
    : GPIOD_ODR_ODR11 ( -- x addr ) 11 bit GPIOD_ODR ; \ GPIOD_ODR_ODR11, Port output data y =  0..15
    : GPIOD_ODR_ODR10 ( -- x addr ) 10 bit GPIOD_ODR ; \ GPIOD_ODR_ODR10, Port output data y =  0..15
    : GPIOD_ODR_ODR9 ( -- x addr ) 9 bit GPIOD_ODR ; \ GPIOD_ODR_ODR9, Port output data y =  0..15
    : GPIOD_ODR_ODR8 ( -- x addr ) 8 bit GPIOD_ODR ; \ GPIOD_ODR_ODR8, Port output data y =  0..15
    : GPIOD_ODR_ODR7 ( -- x addr ) 7 bit GPIOD_ODR ; \ GPIOD_ODR_ODR7, Port output data y =  0..15
    : GPIOD_ODR_ODR6 ( -- x addr ) 6 bit GPIOD_ODR ; \ GPIOD_ODR_ODR6, Port output data y =  0..15
    : GPIOD_ODR_ODR5 ( -- x addr ) 5 bit GPIOD_ODR ; \ GPIOD_ODR_ODR5, Port output data y =  0..15
    : GPIOD_ODR_ODR4 ( -- x addr ) 4 bit GPIOD_ODR ; \ GPIOD_ODR_ODR4, Port output data y =  0..15
    : GPIOD_ODR_ODR3 ( -- x addr ) 3 bit GPIOD_ODR ; \ GPIOD_ODR_ODR3, Port output data y =  0..15
    : GPIOD_ODR_ODR2 ( -- x addr ) 2 bit GPIOD_ODR ; \ GPIOD_ODR_ODR2, Port output data y =  0..15
    : GPIOD_ODR_ODR1 ( -- x addr ) 1 bit GPIOD_ODR ; \ GPIOD_ODR_ODR1, Port output data y =  0..15
    : GPIOD_ODR_ODR0 ( -- x addr ) 0 bit GPIOD_ODR ; \ GPIOD_ODR_ODR0, Port output data y =  0..15
  [then]

  [if]
    \ GPIOD_BSRR (write-only) Reset:0x00000000
    : GPIOD_BSRR_BR15 ( -- ) 31 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR15, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR14 ( -- ) 30 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR14, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR13 ( -- ) 29 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR13, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR12 ( -- ) 28 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR12, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR11 ( -- ) 27 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR11, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR10 ( -- ) 26 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR10, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR9 ( -- ) 25 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR9, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR8 ( -- ) 24 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR8, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR7 ( -- ) 23 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR7, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR6 ( -- ) 22 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR6, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR5 ( -- ) 21 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR5, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR4 ( -- ) 20 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR4, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR3 ( -- ) 19 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR3, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR2 ( -- ) 18 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR2, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR1 ( -- ) 17 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR1, Port x reset bit y y =  0..15
    : GPIOD_BSRR_BR0 ( -- ) 16 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BR0, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS15 ( -- ) 15 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS15, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS14 ( -- ) 14 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS14, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS13 ( -- ) 13 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS13, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS12 ( -- ) 12 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS12, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS11 ( -- ) 11 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS11, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS10 ( -- ) 10 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS10, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS9 ( -- ) 9 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS9, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS8 ( -- ) 8 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS8, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS7 ( -- ) 7 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS7, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS6 ( -- ) 6 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS6, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS5 ( -- ) 5 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS5, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS4 ( -- ) 4 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS4, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS3 ( -- ) 3 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS3, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS2 ( -- ) 2 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS2, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS1 ( -- ) 1 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS1, Port x set bit y y=  0..15
    : GPIOD_BSRR_BS0 ( -- ) 0 bit GPIOD_BSRR ! ; \ GPIOD_BSRR_BS0, Port x set bit y y=  0..15
  [then]

  execute-defined? use-GPIOD [if]
    \ GPIOD_LCKR (read-write) Reset:0x00000000
    : GPIOD_LCKR_LCKK ( -- x addr ) 16 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCKK, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK15 ( -- x addr ) 15 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK15, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK14 ( -- x addr ) 14 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK14, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK13 ( -- x addr ) 13 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK13, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK12 ( -- x addr ) 12 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK12, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK11 ( -- x addr ) 11 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK11, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK10 ( -- x addr ) 10 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK10, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK9 ( -- x addr ) 9 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK9, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK8 ( -- x addr ) 8 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK8, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK7 ( -- x addr ) 7 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK7, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK6 ( -- x addr ) 6 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK6, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK5 ( -- x addr ) 5 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK5, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK4 ( -- x addr ) 4 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK4, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK3 ( -- x addr ) 3 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK3, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK2 ( -- x addr ) 2 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK2, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK1 ( -- x addr ) 1 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK1, Port x lock bit y y=  0..15
    : GPIOD_LCKR_LCK0 ( -- x addr ) 0 bit GPIOD_LCKR ; \ GPIOD_LCKR_LCK0, Port x lock bit y y=  0..15
  [then]

  [if]
    \ GPIOD_AFRL (read-write) Reset:0x00000000
    : GPIOD_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL7, Alternate function selection for port x  bit y y = 0..7
    : GPIOD_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL6, Alternate function selection for port x  bit y y = 0..7
    : GPIOD_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL5, Alternate function selection for port x  bit y y = 0..7
    : GPIOD_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL4, Alternate function selection for port x  bit y y = 0..7
    : GPIOD_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL3, Alternate function selection for port x  bit y y = 0..7
    : GPIOD_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL2, Alternate function selection for port x  bit y y = 0..7
    : GPIOD_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOD_AFRL ; \ GPIOD_AFRL_AFRL1, Alternate function selection for port x  bit y y = 0..7
    : GPIOD_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOD_AFRL ; \ GPIOD_AFRL_AFRL0, Alternate function selection for port x  bit y y = 0..7
  [then]

  execute-defined? use-GPIOD [if]
    \ GPIOD_AFRH (read-write) Reset:0x00000000
    : GPIOD_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH15, Alternate function selection for port x  bit y y = 8..15
    : GPIOD_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH14, Alternate function selection for port x  bit y y = 8..15
    : GPIOD_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH13, Alternate function selection for port x  bit y y = 8..15
    : GPIOD_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH12, Alternate function selection for port x  bit y y = 8..15
    : GPIOD_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH11, Alternate function selection for port x  bit y y = 8..15
    : GPIOD_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH10, Alternate function selection for port x  bit y y = 8..15
    : GPIOD_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOD_AFRH ; \ GPIOD_AFRH_AFRH9, Alternate function selection for port x  bit y y = 8..15
    : GPIOD_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOD_AFRH ; \ GPIOD_AFRH_AFRH8, Alternate function selection for port x  bit y y = 8..15
  [then]

  [if]
    \ GPIOC_MODER (read-write) Reset:0x00000000
    : GPIOC_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER15, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER14, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER13, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER12, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER11, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER10, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER9, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER8, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER7, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER6, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER5, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER4, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER3, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER2, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOC_MODER ; \ GPIOC_MODER_MODER1, Port x configuration bits y =  0..15
    : GPIOC_MODER_MODER0 ( %bb -- x addr ) GPIOC_MODER ; \ GPIOC_MODER_MODER0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOC [if]
    \ GPIOC_OTYPER (read-write) Reset:0x00000000
    : GPIOC_OTYPER_OT15 ( -- x addr ) 15 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT15, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT14 ( -- x addr ) 14 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT14, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT13 ( -- x addr ) 13 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT13, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT12 ( -- x addr ) 12 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT12, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT11 ( -- x addr ) 11 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT11, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT10 ( -- x addr ) 10 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT10, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT9 ( -- x addr ) 9 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT9, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT8 ( -- x addr ) 8 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT8, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT7 ( -- x addr ) 7 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT7, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT6 ( -- x addr ) 6 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT6, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT5 ( -- x addr ) 5 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT5, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT4 ( -- x addr ) 4 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT4, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT3 ( -- x addr ) 3 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT3, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT2 ( -- x addr ) 2 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT2, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT1 ( -- x addr ) 1 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT1, Port x configuration bits y =  0..15
    : GPIOC_OTYPER_OT0 ( -- x addr ) 0 bit GPIOC_OTYPER ; \ GPIOC_OTYPER_OT0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOC_OSPEEDR (read-write) Reset:0x00000000
    : GPIOC_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR15, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR14, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR13, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR12, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR11, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR10, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR9, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR8, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR7, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR6, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR5, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR4, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR3, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR2, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR1, Port x configuration bits y =  0..15
    : GPIOC_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOC_OSPEEDR ; \ GPIOC_OSPEEDR_OSPEEDR0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOC [if]
    \ GPIOC_PUPDR (read-write) Reset:0x00000000
    : GPIOC_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR15, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR14, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR13, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR12, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR11, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR10, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR9, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR8, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR7, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR6, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR5, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR4, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR3, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR2, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR1, Port x configuration bits y =  0..15
    : GPIOC_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOC_PUPDR ; \ GPIOC_PUPDR_PUPDR0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOC_IDR (read-only) Reset:0x00000000
    : GPIOC_IDR_IDR15? ( --  1|0 ) 15 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR15, Port input data y =  0..15
    : GPIOC_IDR_IDR14? ( --  1|0 ) 14 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR14, Port input data y =  0..15
    : GPIOC_IDR_IDR13? ( --  1|0 ) 13 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR13, Port input data y =  0..15
    : GPIOC_IDR_IDR12? ( --  1|0 ) 12 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR12, Port input data y =  0..15
    : GPIOC_IDR_IDR11? ( --  1|0 ) 11 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR11, Port input data y =  0..15
    : GPIOC_IDR_IDR10? ( --  1|0 ) 10 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR10, Port input data y =  0..15
    : GPIOC_IDR_IDR9? ( --  1|0 ) 9 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR9, Port input data y =  0..15
    : GPIOC_IDR_IDR8? ( --  1|0 ) 8 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR8, Port input data y =  0..15
    : GPIOC_IDR_IDR7? ( --  1|0 ) 7 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR7, Port input data y =  0..15
    : GPIOC_IDR_IDR6? ( --  1|0 ) 6 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR6, Port input data y =  0..15
    : GPIOC_IDR_IDR5? ( --  1|0 ) 5 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR5, Port input data y =  0..15
    : GPIOC_IDR_IDR4? ( --  1|0 ) 4 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR4, Port input data y =  0..15
    : GPIOC_IDR_IDR3? ( --  1|0 ) 3 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR3, Port input data y =  0..15
    : GPIOC_IDR_IDR2? ( --  1|0 ) 2 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR2, Port input data y =  0..15
    : GPIOC_IDR_IDR1? ( --  1|0 ) 1 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR1, Port input data y =  0..15
    : GPIOC_IDR_IDR0? ( --  1|0 ) 0 bit GPIOC_IDR bit@ ; \ GPIOC_IDR_IDR0, Port input data y =  0..15
  [then]

  execute-defined? use-GPIOC [if]
    \ GPIOC_ODR (read-write) Reset:0x00000000
    : GPIOC_ODR_ODR15 ( -- x addr ) 15 bit GPIOC_ODR ; \ GPIOC_ODR_ODR15, Port output data y =  0..15
    : GPIOC_ODR_ODR14 ( -- x addr ) 14 bit GPIOC_ODR ; \ GPIOC_ODR_ODR14, Port output data y =  0..15
    : GPIOC_ODR_ODR13 ( -- x addr ) 13 bit GPIOC_ODR ; \ GPIOC_ODR_ODR13, Port output data y =  0..15
    : GPIOC_ODR_ODR12 ( -- x addr ) 12 bit GPIOC_ODR ; \ GPIOC_ODR_ODR12, Port output data y =  0..15
    : GPIOC_ODR_ODR11 ( -- x addr ) 11 bit GPIOC_ODR ; \ GPIOC_ODR_ODR11, Port output data y =  0..15
    : GPIOC_ODR_ODR10 ( -- x addr ) 10 bit GPIOC_ODR ; \ GPIOC_ODR_ODR10, Port output data y =  0..15
    : GPIOC_ODR_ODR9 ( -- x addr ) 9 bit GPIOC_ODR ; \ GPIOC_ODR_ODR9, Port output data y =  0..15
    : GPIOC_ODR_ODR8 ( -- x addr ) 8 bit GPIOC_ODR ; \ GPIOC_ODR_ODR8, Port output data y =  0..15
    : GPIOC_ODR_ODR7 ( -- x addr ) 7 bit GPIOC_ODR ; \ GPIOC_ODR_ODR7, Port output data y =  0..15
    : GPIOC_ODR_ODR6 ( -- x addr ) 6 bit GPIOC_ODR ; \ GPIOC_ODR_ODR6, Port output data y =  0..15
    : GPIOC_ODR_ODR5 ( -- x addr ) 5 bit GPIOC_ODR ; \ GPIOC_ODR_ODR5, Port output data y =  0..15
    : GPIOC_ODR_ODR4 ( -- x addr ) 4 bit GPIOC_ODR ; \ GPIOC_ODR_ODR4, Port output data y =  0..15
    : GPIOC_ODR_ODR3 ( -- x addr ) 3 bit GPIOC_ODR ; \ GPIOC_ODR_ODR3, Port output data y =  0..15
    : GPIOC_ODR_ODR2 ( -- x addr ) 2 bit GPIOC_ODR ; \ GPIOC_ODR_ODR2, Port output data y =  0..15
    : GPIOC_ODR_ODR1 ( -- x addr ) 1 bit GPIOC_ODR ; \ GPIOC_ODR_ODR1, Port output data y =  0..15
    : GPIOC_ODR_ODR0 ( -- x addr ) 0 bit GPIOC_ODR ; \ GPIOC_ODR_ODR0, Port output data y =  0..15
  [then]

  [if]
    \ GPIOC_BSRR (write-only) Reset:0x00000000
    : GPIOC_BSRR_BR15 ( -- ) 31 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR15, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR14 ( -- ) 30 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR14, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR13 ( -- ) 29 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR13, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR12 ( -- ) 28 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR12, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR11 ( -- ) 27 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR11, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR10 ( -- ) 26 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR10, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR9 ( -- ) 25 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR9, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR8 ( -- ) 24 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR8, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR7 ( -- ) 23 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR7, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR6 ( -- ) 22 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR6, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR5 ( -- ) 21 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR5, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR4 ( -- ) 20 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR4, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR3 ( -- ) 19 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR3, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR2 ( -- ) 18 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR2, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR1 ( -- ) 17 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR1, Port x reset bit y y =  0..15
    : GPIOC_BSRR_BR0 ( -- ) 16 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BR0, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS15 ( -- ) 15 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS15, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS14 ( -- ) 14 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS14, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS13 ( -- ) 13 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS13, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS12 ( -- ) 12 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS12, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS11 ( -- ) 11 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS11, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS10 ( -- ) 10 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS10, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS9 ( -- ) 9 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS9, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS8 ( -- ) 8 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS8, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS7 ( -- ) 7 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS7, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS6 ( -- ) 6 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS6, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS5 ( -- ) 5 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS5, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS4 ( -- ) 4 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS4, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS3 ( -- ) 3 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS3, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS2 ( -- ) 2 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS2, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS1 ( -- ) 1 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS1, Port x set bit y y=  0..15
    : GPIOC_BSRR_BS0 ( -- ) 0 bit GPIOC_BSRR ! ; \ GPIOC_BSRR_BS0, Port x set bit y y=  0..15
  [then]

  execute-defined? use-GPIOC [if]
    \ GPIOC_LCKR (read-write) Reset:0x00000000
    : GPIOC_LCKR_LCKK ( -- x addr ) 16 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCKK, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK15 ( -- x addr ) 15 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK15, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK14 ( -- x addr ) 14 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK14, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK13 ( -- x addr ) 13 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK13, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK12 ( -- x addr ) 12 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK12, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK11 ( -- x addr ) 11 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK11, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK10 ( -- x addr ) 10 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK10, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK9 ( -- x addr ) 9 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK9, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK8 ( -- x addr ) 8 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK8, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK7 ( -- x addr ) 7 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK7, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK6 ( -- x addr ) 6 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK6, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK5 ( -- x addr ) 5 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK5, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK4 ( -- x addr ) 4 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK4, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK3 ( -- x addr ) 3 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK3, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK2 ( -- x addr ) 2 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK2, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK1 ( -- x addr ) 1 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK1, Port x lock bit y y=  0..15
    : GPIOC_LCKR_LCK0 ( -- x addr ) 0 bit GPIOC_LCKR ; \ GPIOC_LCKR_LCK0, Port x lock bit y y=  0..15
  [then]

  [if]
    \ GPIOC_AFRL (read-write) Reset:0x00000000
    : GPIOC_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL7, Alternate function selection for port x  bit y y = 0..7
    : GPIOC_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL6, Alternate function selection for port x  bit y y = 0..7
    : GPIOC_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL5, Alternate function selection for port x  bit y y = 0..7
    : GPIOC_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL4, Alternate function selection for port x  bit y y = 0..7
    : GPIOC_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL3, Alternate function selection for port x  bit y y = 0..7
    : GPIOC_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL2, Alternate function selection for port x  bit y y = 0..7
    : GPIOC_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOC_AFRL ; \ GPIOC_AFRL_AFRL1, Alternate function selection for port x  bit y y = 0..7
    : GPIOC_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOC_AFRL ; \ GPIOC_AFRL_AFRL0, Alternate function selection for port x  bit y y = 0..7
  [then]

  execute-defined? use-GPIOC [if]
    \ GPIOC_AFRH (read-write) Reset:0x00000000
    : GPIOC_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH15, Alternate function selection for port x  bit y y = 8..15
    : GPIOC_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH14, Alternate function selection for port x  bit y y = 8..15
    : GPIOC_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH13, Alternate function selection for port x  bit y y = 8..15
    : GPIOC_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH12, Alternate function selection for port x  bit y y = 8..15
    : GPIOC_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH11, Alternate function selection for port x  bit y y = 8..15
    : GPIOC_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH10, Alternate function selection for port x  bit y y = 8..15
    : GPIOC_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOC_AFRH ; \ GPIOC_AFRH_AFRH9, Alternate function selection for port x  bit y y = 8..15
    : GPIOC_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOC_AFRH ; \ GPIOC_AFRH_AFRH8, Alternate function selection for port x  bit y y = 8..15
  [then]

  [if]
    \ GPIOB_MODER (read-write) Reset:0x00000280
    : GPIOB_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER15, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER14, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER13, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER12, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER11, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER10, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER9, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER8, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER7, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER6, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER5, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER4, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER3, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER2, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOB_MODER ; \ GPIOB_MODER_MODER1, Port x configuration bits y =  0..15
    : GPIOB_MODER_MODER0 ( %bb -- x addr ) GPIOB_MODER ; \ GPIOB_MODER_MODER0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOB [if]
    \ GPIOB_OTYPER (read-write) Reset:0x00000000
    : GPIOB_OTYPER_OT15 ( -- x addr ) 15 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT15, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT14 ( -- x addr ) 14 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT14, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT13 ( -- x addr ) 13 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT13, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT12 ( -- x addr ) 12 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT12, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT11 ( -- x addr ) 11 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT11, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT10 ( -- x addr ) 10 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT10, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT9 ( -- x addr ) 9 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT9, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT8 ( -- x addr ) 8 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT8, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT7 ( -- x addr ) 7 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT7, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT6 ( -- x addr ) 6 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT6, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT5 ( -- x addr ) 5 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT5, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT4 ( -- x addr ) 4 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT4, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT3 ( -- x addr ) 3 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT3, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT2 ( -- x addr ) 2 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT2, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT1 ( -- x addr ) 1 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT1, Port x configuration bits y =  0..15
    : GPIOB_OTYPER_OT0 ( -- x addr ) 0 bit GPIOB_OTYPER ; \ GPIOB_OTYPER_OT0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOB_OSPEEDR (read-write) Reset:0x000000C0
    : GPIOB_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR15, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR14, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR13, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR12, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR11, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR10, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR9, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR8, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR7, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR6, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR5, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR4, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR3, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR2, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR1, Port x configuration bits y =  0..15
    : GPIOB_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOB_OSPEEDR ; \ GPIOB_OSPEEDR_OSPEEDR0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOB [if]
    \ GPIOB_PUPDR (read-write) Reset:0x00000100
    : GPIOB_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR15, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR14, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR13, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR12, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR11, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR10, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR9, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR8, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR7, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR6, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR5, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR4, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR3, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR2, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR1, Port x configuration bits y =  0..15
    : GPIOB_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOB_PUPDR ; \ GPIOB_PUPDR_PUPDR0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOB_IDR (read-only) Reset:0x00000000
    : GPIOB_IDR_IDR15? ( --  1|0 ) 15 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR15, Port input data y =  0..15
    : GPIOB_IDR_IDR14? ( --  1|0 ) 14 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR14, Port input data y =  0..15
    : GPIOB_IDR_IDR13? ( --  1|0 ) 13 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR13, Port input data y =  0..15
    : GPIOB_IDR_IDR12? ( --  1|0 ) 12 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR12, Port input data y =  0..15
    : GPIOB_IDR_IDR11? ( --  1|0 ) 11 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR11, Port input data y =  0..15
    : GPIOB_IDR_IDR10? ( --  1|0 ) 10 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR10, Port input data y =  0..15
    : GPIOB_IDR_IDR9? ( --  1|0 ) 9 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR9, Port input data y =  0..15
    : GPIOB_IDR_IDR8? ( --  1|0 ) 8 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR8, Port input data y =  0..15
    : GPIOB_IDR_IDR7? ( --  1|0 ) 7 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR7, Port input data y =  0..15
    : GPIOB_IDR_IDR6? ( --  1|0 ) 6 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR6, Port input data y =  0..15
    : GPIOB_IDR_IDR5? ( --  1|0 ) 5 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR5, Port input data y =  0..15
    : GPIOB_IDR_IDR4? ( --  1|0 ) 4 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR4, Port input data y =  0..15
    : GPIOB_IDR_IDR3? ( --  1|0 ) 3 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR3, Port input data y =  0..15
    : GPIOB_IDR_IDR2? ( --  1|0 ) 2 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR2, Port input data y =  0..15
    : GPIOB_IDR_IDR1? ( --  1|0 ) 1 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR1, Port input data y =  0..15
    : GPIOB_IDR_IDR0? ( --  1|0 ) 0 bit GPIOB_IDR bit@ ; \ GPIOB_IDR_IDR0, Port input data y =  0..15
  [then]

  execute-defined? use-GPIOB [if]
    \ GPIOB_ODR (read-write) Reset:0x00000000
    : GPIOB_ODR_ODR15 ( -- x addr ) 15 bit GPIOB_ODR ; \ GPIOB_ODR_ODR15, Port output data y =  0..15
    : GPIOB_ODR_ODR14 ( -- x addr ) 14 bit GPIOB_ODR ; \ GPIOB_ODR_ODR14, Port output data y =  0..15
    : GPIOB_ODR_ODR13 ( -- x addr ) 13 bit GPIOB_ODR ; \ GPIOB_ODR_ODR13, Port output data y =  0..15
    : GPIOB_ODR_ODR12 ( -- x addr ) 12 bit GPIOB_ODR ; \ GPIOB_ODR_ODR12, Port output data y =  0..15
    : GPIOB_ODR_ODR11 ( -- x addr ) 11 bit GPIOB_ODR ; \ GPIOB_ODR_ODR11, Port output data y =  0..15
    : GPIOB_ODR_ODR10 ( -- x addr ) 10 bit GPIOB_ODR ; \ GPIOB_ODR_ODR10, Port output data y =  0..15
    : GPIOB_ODR_ODR9 ( -- x addr ) 9 bit GPIOB_ODR ; \ GPIOB_ODR_ODR9, Port output data y =  0..15
    : GPIOB_ODR_ODR8 ( -- x addr ) 8 bit GPIOB_ODR ; \ GPIOB_ODR_ODR8, Port output data y =  0..15
    : GPIOB_ODR_ODR7 ( -- x addr ) 7 bit GPIOB_ODR ; \ GPIOB_ODR_ODR7, Port output data y =  0..15
    : GPIOB_ODR_ODR6 ( -- x addr ) 6 bit GPIOB_ODR ; \ GPIOB_ODR_ODR6, Port output data y =  0..15
    : GPIOB_ODR_ODR5 ( -- x addr ) 5 bit GPIOB_ODR ; \ GPIOB_ODR_ODR5, Port output data y =  0..15
    : GPIOB_ODR_ODR4 ( -- x addr ) 4 bit GPIOB_ODR ; \ GPIOB_ODR_ODR4, Port output data y =  0..15
    : GPIOB_ODR_ODR3 ( -- x addr ) 3 bit GPIOB_ODR ; \ GPIOB_ODR_ODR3, Port output data y =  0..15
    : GPIOB_ODR_ODR2 ( -- x addr ) 2 bit GPIOB_ODR ; \ GPIOB_ODR_ODR2, Port output data y =  0..15
    : GPIOB_ODR_ODR1 ( -- x addr ) 1 bit GPIOB_ODR ; \ GPIOB_ODR_ODR1, Port output data y =  0..15
    : GPIOB_ODR_ODR0 ( -- x addr ) 0 bit GPIOB_ODR ; \ GPIOB_ODR_ODR0, Port output data y =  0..15
  [then]

  [if]
    \ GPIOB_BSRR (write-only) Reset:0x00000000
    : GPIOB_BSRR_BR15 ( -- ) 31 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR15, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR14 ( -- ) 30 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR14, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR13 ( -- ) 29 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR13, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR12 ( -- ) 28 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR12, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR11 ( -- ) 27 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR11, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR10 ( -- ) 26 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR10, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR9 ( -- ) 25 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR9, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR8 ( -- ) 24 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR8, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR7 ( -- ) 23 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR7, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR6 ( -- ) 22 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR6, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR5 ( -- ) 21 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR5, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR4 ( -- ) 20 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR4, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR3 ( -- ) 19 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR3, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR2 ( -- ) 18 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR2, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR1 ( -- ) 17 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR1, Port x reset bit y y =  0..15
    : GPIOB_BSRR_BR0 ( -- ) 16 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BR0, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS15 ( -- ) 15 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS15, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS14 ( -- ) 14 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS14, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS13 ( -- ) 13 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS13, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS12 ( -- ) 12 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS12, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS11 ( -- ) 11 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS11, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS10 ( -- ) 10 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS10, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS9 ( -- ) 9 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS9, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS8 ( -- ) 8 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS8, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS7 ( -- ) 7 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS7, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS6 ( -- ) 6 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS6, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS5 ( -- ) 5 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS5, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS4 ( -- ) 4 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS4, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS3 ( -- ) 3 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS3, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS2 ( -- ) 2 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS2, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS1 ( -- ) 1 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS1, Port x set bit y y=  0..15
    : GPIOB_BSRR_BS0 ( -- ) 0 bit GPIOB_BSRR ! ; \ GPIOB_BSRR_BS0, Port x set bit y y=  0..15
  [then]

  execute-defined? use-GPIOB [if]
    \ GPIOB_LCKR (read-write) Reset:0x00000000
    : GPIOB_LCKR_LCKK ( -- x addr ) 16 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCKK, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK15 ( -- x addr ) 15 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK15, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK14 ( -- x addr ) 14 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK14, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK13 ( -- x addr ) 13 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK13, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK12 ( -- x addr ) 12 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK12, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK11 ( -- x addr ) 11 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK11, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK10 ( -- x addr ) 10 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK10, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK9 ( -- x addr ) 9 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK9, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK8 ( -- x addr ) 8 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK8, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK7 ( -- x addr ) 7 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK7, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK6 ( -- x addr ) 6 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK6, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK5 ( -- x addr ) 5 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK5, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK4 ( -- x addr ) 4 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK4, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK3 ( -- x addr ) 3 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK3, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK2 ( -- x addr ) 2 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK2, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK1 ( -- x addr ) 1 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK1, Port x lock bit y y=  0..15
    : GPIOB_LCKR_LCK0 ( -- x addr ) 0 bit GPIOB_LCKR ; \ GPIOB_LCKR_LCK0, Port x lock bit y y=  0..15
  [then]

  [if]
    \ GPIOB_AFRL (read-write) Reset:0x00000000
    : GPIOB_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL7, Alternate function selection for port x  bit y y = 0..7
    : GPIOB_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL6, Alternate function selection for port x  bit y y = 0..7
    : GPIOB_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL5, Alternate function selection for port x  bit y y = 0..7
    : GPIOB_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL4, Alternate function selection for port x  bit y y = 0..7
    : GPIOB_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL3, Alternate function selection for port x  bit y y = 0..7
    : GPIOB_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL2, Alternate function selection for port x  bit y y = 0..7
    : GPIOB_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOB_AFRL ; \ GPIOB_AFRL_AFRL1, Alternate function selection for port x  bit y y = 0..7
    : GPIOB_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOB_AFRL ; \ GPIOB_AFRL_AFRL0, Alternate function selection for port x  bit y y = 0..7
  [then]

  execute-defined? use-GPIOB [if]
    \ GPIOB_AFRH (read-write) Reset:0x00000000
    : GPIOB_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH15, Alternate function selection for port x  bit y y = 8..15
    : GPIOB_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH14, Alternate function selection for port x  bit y y = 8..15
    : GPIOB_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH13, Alternate function selection for port x  bit y y = 8..15
    : GPIOB_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH12, Alternate function selection for port x  bit y y = 8..15
    : GPIOB_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH11, Alternate function selection for port x  bit y y = 8..15
    : GPIOB_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH10, Alternate function selection for port x  bit y y = 8..15
    : GPIOB_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOB_AFRH ; \ GPIOB_AFRH_AFRH9, Alternate function selection for port x  bit y y = 8..15
    : GPIOB_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOB_AFRH ; \ GPIOB_AFRH_AFRH8, Alternate function selection for port x  bit y y = 8..15
  [then]

  [if]
    \ GPIOA_MODER (read-write) Reset:0xA8000000
    : GPIOA_MODER_MODER15 ( %bb -- x addr ) 30 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER15, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER14 ( %bb -- x addr ) 28 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER14, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER13 ( %bb -- x addr ) 26 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER13, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER12 ( %bb -- x addr ) 24 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER12, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER11 ( %bb -- x addr ) 22 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER11, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER10 ( %bb -- x addr ) 20 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER10, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER9 ( %bb -- x addr ) 18 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER9, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER8 ( %bb -- x addr ) 16 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER8, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER7 ( %bb -- x addr ) 14 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER7, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER6 ( %bb -- x addr ) 12 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER6, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER5 ( %bb -- x addr ) 10 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER5, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER4 ( %bb -- x addr ) 8 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER4, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER3 ( %bb -- x addr ) 6 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER3, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER2 ( %bb -- x addr ) 4 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER2, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER1 ( %bb -- x addr ) 2 lshift GPIOA_MODER ; \ GPIOA_MODER_MODER1, Port x configuration bits y =  0..15
    : GPIOA_MODER_MODER0 ( %bb -- x addr ) GPIOA_MODER ; \ GPIOA_MODER_MODER0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOA [if]
    \ GPIOA_OTYPER (read-write) Reset:0x00000000
    : GPIOA_OTYPER_OT15 ( -- x addr ) 15 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT15, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT14 ( -- x addr ) 14 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT14, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT13 ( -- x addr ) 13 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT13, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT12 ( -- x addr ) 12 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT12, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT11 ( -- x addr ) 11 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT11, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT10 ( -- x addr ) 10 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT10, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT9 ( -- x addr ) 9 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT9, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT8 ( -- x addr ) 8 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT8, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT7 ( -- x addr ) 7 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT7, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT6 ( -- x addr ) 6 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT6, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT5 ( -- x addr ) 5 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT5, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT4 ( -- x addr ) 4 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT4, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT3 ( -- x addr ) 3 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT3, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT2 ( -- x addr ) 2 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT2, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT1 ( -- x addr ) 1 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT1, Port x configuration bits y =  0..15
    : GPIOA_OTYPER_OT0 ( -- x addr ) 0 bit GPIOA_OTYPER ; \ GPIOA_OTYPER_OT0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOA_OSPEEDR (read-write) Reset:0x00000000
    : GPIOA_OSPEEDR_OSPEEDR15 ( %bb -- x addr ) 30 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR15, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR14 ( %bb -- x addr ) 28 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR14, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR13 ( %bb -- x addr ) 26 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR13, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR12 ( %bb -- x addr ) 24 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR12, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR11 ( %bb -- x addr ) 22 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR11, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR10 ( %bb -- x addr ) 20 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR10, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR9 ( %bb -- x addr ) 18 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR9, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR8 ( %bb -- x addr ) 16 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR8, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR7 ( %bb -- x addr ) 14 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR7, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR6 ( %bb -- x addr ) 12 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR6, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR5 ( %bb -- x addr ) 10 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR5, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR4 ( %bb -- x addr ) 8 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR4, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR3 ( %bb -- x addr ) 6 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR3, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR2 ( %bb -- x addr ) 4 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR2, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR1 ( %bb -- x addr ) 2 lshift GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR1, Port x configuration bits y =  0..15
    : GPIOA_OSPEEDR_OSPEEDR0 ( %bb -- x addr ) GPIOA_OSPEEDR ; \ GPIOA_OSPEEDR_OSPEEDR0, Port x configuration bits y =  0..15
  [then]

  execute-defined? use-GPIOA [if]
    \ GPIOA_PUPDR (read-write) Reset:0x64000000
    : GPIOA_PUPDR_PUPDR15 ( %bb -- x addr ) 30 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR15, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR14 ( %bb -- x addr ) 28 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR14, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR13 ( %bb -- x addr ) 26 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR13, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR12 ( %bb -- x addr ) 24 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR12, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR11 ( %bb -- x addr ) 22 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR11, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR10 ( %bb -- x addr ) 20 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR10, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR9 ( %bb -- x addr ) 18 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR9, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR8 ( %bb -- x addr ) 16 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR8, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR7 ( %bb -- x addr ) 14 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR7, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR6 ( %bb -- x addr ) 12 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR6, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR5 ( %bb -- x addr ) 10 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR5, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR4 ( %bb -- x addr ) 8 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR4, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR3 ( %bb -- x addr ) 6 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR3, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR2 ( %bb -- x addr ) 4 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR2, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR1 ( %bb -- x addr ) 2 lshift GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR1, Port x configuration bits y =  0..15
    : GPIOA_PUPDR_PUPDR0 ( %bb -- x addr ) GPIOA_PUPDR ; \ GPIOA_PUPDR_PUPDR0, Port x configuration bits y =  0..15
  [then]

  [if]
    \ GPIOA_IDR (read-only) Reset:0x00000000
    : GPIOA_IDR_IDR15? ( --  1|0 ) 15 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR15, Port input data y =  0..15
    : GPIOA_IDR_IDR14? ( --  1|0 ) 14 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR14, Port input data y =  0..15
    : GPIOA_IDR_IDR13? ( --  1|0 ) 13 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR13, Port input data y =  0..15
    : GPIOA_IDR_IDR12? ( --  1|0 ) 12 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR12, Port input data y =  0..15
    : GPIOA_IDR_IDR11? ( --  1|0 ) 11 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR11, Port input data y =  0..15
    : GPIOA_IDR_IDR10? ( --  1|0 ) 10 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR10, Port input data y =  0..15
    : GPIOA_IDR_IDR9? ( --  1|0 ) 9 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR9, Port input data y =  0..15
    : GPIOA_IDR_IDR8? ( --  1|0 ) 8 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR8, Port input data y =  0..15
    : GPIOA_IDR_IDR7? ( --  1|0 ) 7 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR7, Port input data y =  0..15
    : GPIOA_IDR_IDR6? ( --  1|0 ) 6 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR6, Port input data y =  0..15
    : GPIOA_IDR_IDR5? ( --  1|0 ) 5 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR5, Port input data y =  0..15
    : GPIOA_IDR_IDR4? ( --  1|0 ) 4 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR4, Port input data y =  0..15
    : GPIOA_IDR_IDR3? ( --  1|0 ) 3 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR3, Port input data y =  0..15
    : GPIOA_IDR_IDR2? ( --  1|0 ) 2 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR2, Port input data y =  0..15
    : GPIOA_IDR_IDR1? ( --  1|0 ) 1 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR1, Port input data y =  0..15
    : GPIOA_IDR_IDR0? ( --  1|0 ) 0 bit GPIOA_IDR bit@ ; \ GPIOA_IDR_IDR0, Port input data y =  0..15
  [then]

  execute-defined? use-GPIOA [if]
    \ GPIOA_ODR (read-write) Reset:0x00000000
    : GPIOA_ODR_ODR15 ( -- x addr ) 15 bit GPIOA_ODR ; \ GPIOA_ODR_ODR15, Port output data y =  0..15
    : GPIOA_ODR_ODR14 ( -- x addr ) 14 bit GPIOA_ODR ; \ GPIOA_ODR_ODR14, Port output data y =  0..15
    : GPIOA_ODR_ODR13 ( -- x addr ) 13 bit GPIOA_ODR ; \ GPIOA_ODR_ODR13, Port output data y =  0..15
    : GPIOA_ODR_ODR12 ( -- x addr ) 12 bit GPIOA_ODR ; \ GPIOA_ODR_ODR12, Port output data y =  0..15
    : GPIOA_ODR_ODR11 ( -- x addr ) 11 bit GPIOA_ODR ; \ GPIOA_ODR_ODR11, Port output data y =  0..15
    : GPIOA_ODR_ODR10 ( -- x addr ) 10 bit GPIOA_ODR ; \ GPIOA_ODR_ODR10, Port output data y =  0..15
    : GPIOA_ODR_ODR9 ( -- x addr ) 9 bit GPIOA_ODR ; \ GPIOA_ODR_ODR9, Port output data y =  0..15
    : GPIOA_ODR_ODR8 ( -- x addr ) 8 bit GPIOA_ODR ; \ GPIOA_ODR_ODR8, Port output data y =  0..15
    : GPIOA_ODR_ODR7 ( -- x addr ) 7 bit GPIOA_ODR ; \ GPIOA_ODR_ODR7, Port output data y =  0..15
    : GPIOA_ODR_ODR6 ( -- x addr ) 6 bit GPIOA_ODR ; \ GPIOA_ODR_ODR6, Port output data y =  0..15
    : GPIOA_ODR_ODR5 ( -- x addr ) 5 bit GPIOA_ODR ; \ GPIOA_ODR_ODR5, Port output data y =  0..15
    : GPIOA_ODR_ODR4 ( -- x addr ) 4 bit GPIOA_ODR ; \ GPIOA_ODR_ODR4, Port output data y =  0..15
    : GPIOA_ODR_ODR3 ( -- x addr ) 3 bit GPIOA_ODR ; \ GPIOA_ODR_ODR3, Port output data y =  0..15
    : GPIOA_ODR_ODR2 ( -- x addr ) 2 bit GPIOA_ODR ; \ GPIOA_ODR_ODR2, Port output data y =  0..15
    : GPIOA_ODR_ODR1 ( -- x addr ) 1 bit GPIOA_ODR ; \ GPIOA_ODR_ODR1, Port output data y =  0..15
    : GPIOA_ODR_ODR0 ( -- x addr ) 0 bit GPIOA_ODR ; \ GPIOA_ODR_ODR0, Port output data y =  0..15
  [then]

  [if]
    \ GPIOA_BSRR (write-only) Reset:0x00000000
    : GPIOA_BSRR_BR15 ( -- ) 31 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR15, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR14 ( -- ) 30 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR14, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR13 ( -- ) 29 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR13, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR12 ( -- ) 28 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR12, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR11 ( -- ) 27 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR11, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR10 ( -- ) 26 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR10, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR9 ( -- ) 25 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR9, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR8 ( -- ) 24 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR8, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR7 ( -- ) 23 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR7, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR6 ( -- ) 22 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR6, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR5 ( -- ) 21 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR5, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR4 ( -- ) 20 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR4, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR3 ( -- ) 19 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR3, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR2 ( -- ) 18 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR2, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR1 ( -- ) 17 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR1, Port x reset bit y y =  0..15
    : GPIOA_BSRR_BR0 ( -- ) 16 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BR0, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS15 ( -- ) 15 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS15, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS14 ( -- ) 14 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS14, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS13 ( -- ) 13 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS13, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS12 ( -- ) 12 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS12, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS11 ( -- ) 11 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS11, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS10 ( -- ) 10 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS10, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS9 ( -- ) 9 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS9, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS8 ( -- ) 8 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS8, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS7 ( -- ) 7 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS7, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS6 ( -- ) 6 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS6, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS5 ( -- ) 5 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS5, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS4 ( -- ) 4 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS4, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS3 ( -- ) 3 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS3, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS2 ( -- ) 2 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS2, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS1 ( -- ) 1 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS1, Port x set bit y y=  0..15
    : GPIOA_BSRR_BS0 ( -- ) 0 bit GPIOA_BSRR ! ; \ GPIOA_BSRR_BS0, Port x set bit y y=  0..15
  [then]

  execute-defined? use-GPIOA [if]
    \ GPIOA_LCKR (read-write) Reset:0x00000000
    : GPIOA_LCKR_LCKK ( -- x addr ) 16 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCKK, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK15 ( -- x addr ) 15 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK15, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK14 ( -- x addr ) 14 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK14, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK13 ( -- x addr ) 13 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK13, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK12 ( -- x addr ) 12 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK12, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK11 ( -- x addr ) 11 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK11, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK10 ( -- x addr ) 10 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK10, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK9 ( -- x addr ) 9 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK9, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK8 ( -- x addr ) 8 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK8, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK7 ( -- x addr ) 7 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK7, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK6 ( -- x addr ) 6 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK6, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK5 ( -- x addr ) 5 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK5, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK4 ( -- x addr ) 4 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK4, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK3 ( -- x addr ) 3 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK3, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK2 ( -- x addr ) 2 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK2, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK1 ( -- x addr ) 1 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK1, Port x lock bit y y=  0..15
    : GPIOA_LCKR_LCK0 ( -- x addr ) 0 bit GPIOA_LCKR ; \ GPIOA_LCKR_LCK0, Port x lock bit y y=  0..15
  [then]

  [if]
    \ GPIOA_AFRL (read-write) Reset:0x00000000
    : GPIOA_AFRL_AFRL7 ( %bbbb -- x addr ) 28 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL7, Alternate function selection for port x  bit y y = 0..7
    : GPIOA_AFRL_AFRL6 ( %bbbb -- x addr ) 24 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL6, Alternate function selection for port x  bit y y = 0..7
    : GPIOA_AFRL_AFRL5 ( %bbbb -- x addr ) 20 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL5, Alternate function selection for port x  bit y y = 0..7
    : GPIOA_AFRL_AFRL4 ( %bbbb -- x addr ) 16 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL4, Alternate function selection for port x  bit y y = 0..7
    : GPIOA_AFRL_AFRL3 ( %bbbb -- x addr ) 12 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL3, Alternate function selection for port x  bit y y = 0..7
    : GPIOA_AFRL_AFRL2 ( %bbbb -- x addr ) 8 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL2, Alternate function selection for port x  bit y y = 0..7
    : GPIOA_AFRL_AFRL1 ( %bbbb -- x addr ) 4 lshift GPIOA_AFRL ; \ GPIOA_AFRL_AFRL1, Alternate function selection for port x  bit y y = 0..7
    : GPIOA_AFRL_AFRL0 ( %bbbb -- x addr ) GPIOA_AFRL ; \ GPIOA_AFRL_AFRL0, Alternate function selection for port x  bit y y = 0..7
  [then]

  execute-defined? use-GPIOA [if]
    \ GPIOA_AFRH (read-write) Reset:0x00000000
    : GPIOA_AFRH_AFRH15 ( %bbbb -- x addr ) 28 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH15, Alternate function selection for port x  bit y y = 8..15
    : GPIOA_AFRH_AFRH14 ( %bbbb -- x addr ) 24 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH14, Alternate function selection for port x  bit y y = 8..15
    : GPIOA_AFRH_AFRH13 ( %bbbb -- x addr ) 20 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH13, Alternate function selection for port x  bit y y = 8..15
    : GPIOA_AFRH_AFRH12 ( %bbbb -- x addr ) 16 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH12, Alternate function selection for port x  bit y y = 8..15
    : GPIOA_AFRH_AFRH11 ( %bbbb -- x addr ) 12 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH11, Alternate function selection for port x  bit y y = 8..15
    : GPIOA_AFRH_AFRH10 ( %bbbb -- x addr ) 8 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH10, Alternate function selection for port x  bit y y = 8..15
    : GPIOA_AFRH_AFRH9 ( %bbbb -- x addr ) 4 lshift GPIOA_AFRH ; \ GPIOA_AFRH_AFRH9, Alternate function selection for port x  bit y y = 8..15
    : GPIOA_AFRH_AFRH8 ( %bbbb -- x addr ) GPIOA_AFRH ; \ GPIOA_AFRH_AFRH8, Alternate function selection for port x  bit y y = 8..15
  [then]

  [if]
    \ SYSCFG_MEMRM (read-write) Reset:0x00000000
    : SYSCFG_MEMRM_MEM_MODE ( %bb -- x addr ) SYSCFG_MEMRM ; \ SYSCFG_MEMRM_MEM_MODE, MEM_MODE
  [then]

  execute-defined? use-SYSCFG [if]
    \ SYSCFG_PMC (read-write) Reset:0x00000000
    : SYSCFG_PMC_MII_RMII_SEL ( -- x addr ) 23 bit SYSCFG_PMC ; \ SYSCFG_PMC_MII_RMII_SEL, Ethernet PHY interface  selection
  [then]

  [if]
    \ SYSCFG_EXTICR1 (read-write) Reset:0x0000
    : SYSCFG_EXTICR1_EXTI3 ( %bbbb -- x addr ) 12 lshift SYSCFG_EXTICR1 ; \ SYSCFG_EXTICR1_EXTI3, EXTI x configuration x = 0 to  3
    : SYSCFG_EXTICR1_EXTI2 ( %bbbb -- x addr ) 8 lshift SYSCFG_EXTICR1 ; \ SYSCFG_EXTICR1_EXTI2, EXTI x configuration x = 0 to  3
    : SYSCFG_EXTICR1_EXTI1 ( %bbbb -- x addr ) 4 lshift SYSCFG_EXTICR1 ; \ SYSCFG_EXTICR1_EXTI1, EXTI x configuration x = 0 to  3
    : SYSCFG_EXTICR1_EXTI0 ( %bbbb -- x addr ) SYSCFG_EXTICR1 ; \ SYSCFG_EXTICR1_EXTI0, EXTI x configuration x = 0 to  3
  [then]

  execute-defined? use-SYSCFG [if]
    \ SYSCFG_EXTICR2 (read-write) Reset:0x0000
    : SYSCFG_EXTICR2_EXTI7 ( %bbbb -- x addr ) 12 lshift SYSCFG_EXTICR2 ; \ SYSCFG_EXTICR2_EXTI7, EXTI x configuration x = 4 to  7
    : SYSCFG_EXTICR2_EXTI6 ( %bbbb -- x addr ) 8 lshift SYSCFG_EXTICR2 ; \ SYSCFG_EXTICR2_EXTI6, EXTI x configuration x = 4 to  7
    : SYSCFG_EXTICR2_EXTI5 ( %bbbb -- x addr ) 4 lshift SYSCFG_EXTICR2 ; \ SYSCFG_EXTICR2_EXTI5, EXTI x configuration x = 4 to  7
    : SYSCFG_EXTICR2_EXTI4 ( %bbbb -- x addr ) SYSCFG_EXTICR2 ; \ SYSCFG_EXTICR2_EXTI4, EXTI x configuration x = 4 to  7
  [then]

  [if]
    \ SYSCFG_EXTICR3 (read-write) Reset:0x0000
    : SYSCFG_EXTICR3_EXTI11 ( %bbbb -- x addr ) 12 lshift SYSCFG_EXTICR3 ; \ SYSCFG_EXTICR3_EXTI11, EXTI x configuration x = 8 to  11
    : SYSCFG_EXTICR3_EXTI10 ( %bbbb -- x addr ) 8 lshift SYSCFG_EXTICR3 ; \ SYSCFG_EXTICR3_EXTI10, EXTI10
    : SYSCFG_EXTICR3_EXTI9 ( %bbbb -- x addr ) 4 lshift SYSCFG_EXTICR3 ; \ SYSCFG_EXTICR3_EXTI9, EXTI x configuration x = 8 to  11
    : SYSCFG_EXTICR3_EXTI8 ( %bbbb -- x addr ) SYSCFG_EXTICR3 ; \ SYSCFG_EXTICR3_EXTI8, EXTI x configuration x = 8 to  11
  [then]

  execute-defined? use-SYSCFG [if]
    \ SYSCFG_EXTICR4 (read-write) Reset:0x0000
    : SYSCFG_EXTICR4_EXTI15 ( %bbbb -- x addr ) 12 lshift SYSCFG_EXTICR4 ; \ SYSCFG_EXTICR4_EXTI15, EXTI x configuration x = 12 to  15
    : SYSCFG_EXTICR4_EXTI14 ( %bbbb -- x addr ) 8 lshift SYSCFG_EXTICR4 ; \ SYSCFG_EXTICR4_EXTI14, EXTI x configuration x = 12 to  15
    : SYSCFG_EXTICR4_EXTI13 ( %bbbb -- x addr ) 4 lshift SYSCFG_EXTICR4 ; \ SYSCFG_EXTICR4_EXTI13, EXTI x configuration x = 12 to  15
    : SYSCFG_EXTICR4_EXTI12 ( %bbbb -- x addr ) SYSCFG_EXTICR4 ; \ SYSCFG_EXTICR4_EXTI12, EXTI x configuration x = 12 to  15
  [then]

  [if]
    \ SYSCFG_CMPCR (read-only) Reset:0x00000000
    : SYSCFG_CMPCR_READY? ( --  1|0 ) 8 bit SYSCFG_CMPCR bit@ ; \ SYSCFG_CMPCR_READY, READY
    : SYSCFG_CMPCR_CMP_PD? ( --  1|0 ) 0 bit SYSCFG_CMPCR bit@ ; \ SYSCFG_CMPCR_CMP_PD, Compensation cell  power-down
  [then]

  execute-defined? use-SPI1 [if]
    \ SPI1_CR1 (read-write) Reset:0x0000
    : SPI1_CR1_BIDIMODE ( -- x addr ) 15 bit SPI1_CR1 ; \ SPI1_CR1_BIDIMODE, Bidirectional data mode  enable
    : SPI1_CR1_BIDIOE ( -- x addr ) 14 bit SPI1_CR1 ; \ SPI1_CR1_BIDIOE, Output enable in bidirectional  mode
    : SPI1_CR1_CRCEN ( -- x addr ) 13 bit SPI1_CR1 ; \ SPI1_CR1_CRCEN, Hardware CRC calculation  enable
    : SPI1_CR1_CRCNEXT ( -- x addr ) 12 bit SPI1_CR1 ; \ SPI1_CR1_CRCNEXT, CRC transfer next
    : SPI1_CR1_DFF ( -- x addr ) 11 bit SPI1_CR1 ; \ SPI1_CR1_DFF, Data frame format
    : SPI1_CR1_RXONLY ( -- x addr ) 10 bit SPI1_CR1 ; \ SPI1_CR1_RXONLY, Receive only
    : SPI1_CR1_SSM ( -- x addr ) 9 bit SPI1_CR1 ; \ SPI1_CR1_SSM, Software slave management
    : SPI1_CR1_SSI ( -- x addr ) 8 bit SPI1_CR1 ; \ SPI1_CR1_SSI, Internal slave select
    : SPI1_CR1_LSBFIRST ( -- x addr ) 7 bit SPI1_CR1 ; \ SPI1_CR1_LSBFIRST, Frame format
    : SPI1_CR1_SPE ( -- x addr ) 6 bit SPI1_CR1 ; \ SPI1_CR1_SPE, SPI enable
    : SPI1_CR1_BR ( %bbb -- x addr ) 3 lshift SPI1_CR1 ; \ SPI1_CR1_BR, Baud rate control
    : SPI1_CR1_MSTR ( -- x addr ) 2 bit SPI1_CR1 ; \ SPI1_CR1_MSTR, Master selection
    : SPI1_CR1_CPOL ( -- x addr ) 1 bit SPI1_CR1 ; \ SPI1_CR1_CPOL, Clock polarity
    : SPI1_CR1_CPHA ( -- x addr ) 0 bit SPI1_CR1 ; \ SPI1_CR1_CPHA, Clock phase
  [then]

  [if]
    \ SPI1_CR2 (read-write) Reset:0x0000
    : SPI1_CR2_TXEIE ( -- x addr ) 7 bit SPI1_CR2 ; \ SPI1_CR2_TXEIE, Tx buffer empty interrupt  enable
    : SPI1_CR2_RXNEIE ( -- x addr ) 6 bit SPI1_CR2 ; \ SPI1_CR2_RXNEIE, RX buffer not empty interrupt  enable
    : SPI1_CR2_ERRIE ( -- x addr ) 5 bit SPI1_CR2 ; \ SPI1_CR2_ERRIE, Error interrupt enable
    : SPI1_CR2_FRF ( -- x addr ) 4 bit SPI1_CR2 ; \ SPI1_CR2_FRF, Frame format
    : SPI1_CR2_SSOE ( -- x addr ) 2 bit SPI1_CR2 ; \ SPI1_CR2_SSOE, SS output enable
    : SPI1_CR2_TXDMAEN ( -- x addr ) 1 bit SPI1_CR2 ; \ SPI1_CR2_TXDMAEN, Tx buffer DMA enable
    : SPI1_CR2_RXDMAEN ( -- x addr ) 0 bit SPI1_CR2 ; \ SPI1_CR2_RXDMAEN, Rx buffer DMA enable
  [then]

  execute-defined? use-SPI1 [if]
    \ SPI1_SR (multiple-access)  Reset:0x0002
    : SPI1_SR_TIFRFE ( -- x addr ) 8 bit SPI1_SR ; \ SPI1_SR_TIFRFE, TI frame format error
    : SPI1_SR_BSY? ( -- 1|0 ) 7 bit SPI1_SR bit@ ; \ SPI1_SR_BSY, Busy flag
    : SPI1_SR_OVR? ( -- 1|0 ) 6 bit SPI1_SR bit@ ; \ SPI1_SR_OVR, Overrun flag
    : SPI1_SR_MODF ( -- x addr ) 5 bit SPI1_SR ; \ SPI1_SR_MODF, Mode fault
    : SPI1_SR_CRCERR? ( -- 1|0 ) 4 bit SPI1_SR bit@ ; \ SPI1_SR_CRCERR, CRC error flag
    : SPI1_SR_UDR? ( -- 1|0 ) 3 bit SPI1_SR bit@ ; \ SPI1_SR_UDR, Underrun flag
    : SPI1_SR_CHSIDE ( -- x addr ) 2 bit SPI1_SR ; \ SPI1_SR_CHSIDE, Channel side
    : SPI1_SR_TXE ( -- x addr ) 1 bit SPI1_SR ; \ SPI1_SR_TXE, Transmit buffer empty
    : SPI1_SR_RXNE ( -- x addr ) 0 bit SPI1_SR ; \ SPI1_SR_RXNE, Receive buffer not empty
  [then]

  [if]
    \ SPI1_DR (read-write) Reset:0x0000
    : SPI1_DR_DR ( %bbbbbbbbbbbbbbbb -- x addr ) SPI1_DR ; \ SPI1_DR_DR, Data register
  [then]

  execute-defined? use-SPI1 [if]
    \ SPI1_CRCPR (read-write) Reset:0x0007
    : SPI1_CRCPR_CRCPOLY ( %bbbbbbbbbbbbbbbb -- x addr ) SPI1_CRCPR ; \ SPI1_CRCPR_CRCPOLY, CRC polynomial register
  [then]

  [if]
    \ SPI1_RXCRCR (read-only) Reset:0x0000
    : SPI1_RXCRCR_RxCRC? ( --  x ) SPI1_RXCRCR @ ; \ SPI1_RXCRCR_RxCRC, Rx CRC register
  [then]

  execute-defined? use-SPI1 [if]
    \ SPI1_TXCRCR (read-only) Reset:0x0000
    : SPI1_TXCRCR_TxCRC? ( --  x ) SPI1_TXCRCR @ ; \ SPI1_TXCRCR_TxCRC, Tx CRC register
  [then]

  [if]
    \ SPI1_I2SCFGR (read-write) Reset:0x0000
    : SPI1_I2SCFGR_I2SMOD ( -- x addr ) 11 bit SPI1_I2SCFGR ; \ SPI1_I2SCFGR_I2SMOD, I2S mode selection
    : SPI1_I2SCFGR_I2SE ( -- x addr ) 10 bit SPI1_I2SCFGR ; \ SPI1_I2SCFGR_I2SE, I2S Enable
    : SPI1_I2SCFGR_I2SCFG ( %bb -- x addr ) 8 lshift SPI1_I2SCFGR ; \ SPI1_I2SCFGR_I2SCFG, I2S configuration mode
    : SPI1_I2SCFGR_PCMSYNC ( -- x addr ) 7 bit SPI1_I2SCFGR ; \ SPI1_I2SCFGR_PCMSYNC, PCM frame synchronization
    : SPI1_I2SCFGR_I2SSTD ( %bb -- x addr ) 4 lshift SPI1_I2SCFGR ; \ SPI1_I2SCFGR_I2SSTD, I2S standard selection
    : SPI1_I2SCFGR_CKPOL ( -- x addr ) 3 bit SPI1_I2SCFGR ; \ SPI1_I2SCFGR_CKPOL, Steady state clock  polarity
    : SPI1_I2SCFGR_DATLEN ( %bb -- x addr ) 1 lshift SPI1_I2SCFGR ; \ SPI1_I2SCFGR_DATLEN, Data length to be  transferred
    : SPI1_I2SCFGR_CHLEN ( -- x addr ) 0 bit SPI1_I2SCFGR ; \ SPI1_I2SCFGR_CHLEN, Channel length number of bits per audio  channel
  [then]

  execute-defined? use-SPI1 [if]
    \ SPI1_I2SPR (read-write) Reset:00000010
    : SPI1_I2SPR_MCKOE ( -- x addr ) 9 bit SPI1_I2SPR ; \ SPI1_I2SPR_MCKOE, Master clock output enable
    : SPI1_I2SPR_ODD ( -- x addr ) 8 bit SPI1_I2SPR ; \ SPI1_I2SPR_ODD, Odd factor for the  prescaler
    : SPI1_I2SPR_I2SDIV ( %bbbbbbbb -- x addr ) SPI1_I2SPR ; \ SPI1_I2SPR_I2SDIV, I2S Linear prescaler
  [then]

  [if]
    \ SPI2_CR1 (read-write) Reset:0x0000
    : SPI2_CR1_BIDIMODE ( -- x addr ) 15 bit SPI2_CR1 ; \ SPI2_CR1_BIDIMODE, Bidirectional data mode  enable
    : SPI2_CR1_BIDIOE ( -- x addr ) 14 bit SPI2_CR1 ; \ SPI2_CR1_BIDIOE, Output enable in bidirectional  mode
    : SPI2_CR1_CRCEN ( -- x addr ) 13 bit SPI2_CR1 ; \ SPI2_CR1_CRCEN, Hardware CRC calculation  enable
    : SPI2_CR1_CRCNEXT ( -- x addr ) 12 bit SPI2_CR1 ; \ SPI2_CR1_CRCNEXT, CRC transfer next
    : SPI2_CR1_DFF ( -- x addr ) 11 bit SPI2_CR1 ; \ SPI2_CR1_DFF, Data frame format
    : SPI2_CR1_RXONLY ( -- x addr ) 10 bit SPI2_CR1 ; \ SPI2_CR1_RXONLY, Receive only
    : SPI2_CR1_SSM ( -- x addr ) 9 bit SPI2_CR1 ; \ SPI2_CR1_SSM, Software slave management
    : SPI2_CR1_SSI ( -- x addr ) 8 bit SPI2_CR1 ; \ SPI2_CR1_SSI, Internal slave select
    : SPI2_CR1_LSBFIRST ( -- x addr ) 7 bit SPI2_CR1 ; \ SPI2_CR1_LSBFIRST, Frame format
    : SPI2_CR1_SPE ( -- x addr ) 6 bit SPI2_CR1 ; \ SPI2_CR1_SPE, SPI enable
    : SPI2_CR1_BR ( %bbb -- x addr ) 3 lshift SPI2_CR1 ; \ SPI2_CR1_BR, Baud rate control
    : SPI2_CR1_MSTR ( -- x addr ) 2 bit SPI2_CR1 ; \ SPI2_CR1_MSTR, Master selection
    : SPI2_CR1_CPOL ( -- x addr ) 1 bit SPI2_CR1 ; \ SPI2_CR1_CPOL, Clock polarity
    : SPI2_CR1_CPHA ( -- x addr ) 0 bit SPI2_CR1 ; \ SPI2_CR1_CPHA, Clock phase
  [then]

  execute-defined? use-SPI2 [if]
    \ SPI2_CR2 (read-write) Reset:0x0000
    : SPI2_CR2_TXEIE ( -- x addr ) 7 bit SPI2_CR2 ; \ SPI2_CR2_TXEIE, Tx buffer empty interrupt  enable
    : SPI2_CR2_RXNEIE ( -- x addr ) 6 bit SPI2_CR2 ; \ SPI2_CR2_RXNEIE, RX buffer not empty interrupt  enable
    : SPI2_CR2_ERRIE ( -- x addr ) 5 bit SPI2_CR2 ; \ SPI2_CR2_ERRIE, Error interrupt enable
    : SPI2_CR2_FRF ( -- x addr ) 4 bit SPI2_CR2 ; \ SPI2_CR2_FRF, Frame format
    : SPI2_CR2_SSOE ( -- x addr ) 2 bit SPI2_CR2 ; \ SPI2_CR2_SSOE, SS output enable
    : SPI2_CR2_TXDMAEN ( -- x addr ) 1 bit SPI2_CR2 ; \ SPI2_CR2_TXDMAEN, Tx buffer DMA enable
    : SPI2_CR2_RXDMAEN ( -- x addr ) 0 bit SPI2_CR2 ; \ SPI2_CR2_RXDMAEN, Rx buffer DMA enable
  [then]

  [if]
    \ SPI2_SR (multiple-access)  Reset:0x0002
    : SPI2_SR_TIFRFE ( -- x addr ) 8 bit SPI2_SR ; \ SPI2_SR_TIFRFE, TI frame format error
    : SPI2_SR_BSY? ( -- 1|0 ) 7 bit SPI2_SR bit@ ; \ SPI2_SR_BSY, Busy flag
    : SPI2_SR_OVR? ( -- 1|0 ) 6 bit SPI2_SR bit@ ; \ SPI2_SR_OVR, Overrun flag
    : SPI2_SR_MODF ( -- x addr ) 5 bit SPI2_SR ; \ SPI2_SR_MODF, Mode fault
    : SPI2_SR_CRCERR? ( -- 1|0 ) 4 bit SPI2_SR bit@ ; \ SPI2_SR_CRCERR, CRC error flag
    : SPI2_SR_UDR? ( -- 1|0 ) 3 bit SPI2_SR bit@ ; \ SPI2_SR_UDR, Underrun flag
    : SPI2_SR_CHSIDE ( -- x addr ) 2 bit SPI2_SR ; \ SPI2_SR_CHSIDE, Channel side
    : SPI2_SR_TXE ( -- x addr ) 1 bit SPI2_SR ; \ SPI2_SR_TXE, Transmit buffer empty
    : SPI2_SR_RXNE ( -- x addr ) 0 bit SPI2_SR ; \ SPI2_SR_RXNE, Receive buffer not empty
  [then]

  execute-defined? use-SPI2 [if]
    \ SPI2_DR (read-write) Reset:0x0000
    : SPI2_DR_DR ( %bbbbbbbbbbbbbbbb -- x addr ) SPI2_DR ; \ SPI2_DR_DR, Data register
  [then]

  [if]
    \ SPI2_CRCPR (read-write) Reset:0x0007
    : SPI2_CRCPR_CRCPOLY ( %bbbbbbbbbbbbbbbb -- x addr ) SPI2_CRCPR ; \ SPI2_CRCPR_CRCPOLY, CRC polynomial register
  [then]

  execute-defined? use-SPI2 [if]
    \ SPI2_RXCRCR (read-only) Reset:0x0000
    : SPI2_RXCRCR_RxCRC? ( --  x ) SPI2_RXCRCR @ ; \ SPI2_RXCRCR_RxCRC, Rx CRC register
  [then]

  [if]
    \ SPI2_TXCRCR (read-only) Reset:0x0000
    : SPI2_TXCRCR_TxCRC? ( --  x ) SPI2_TXCRCR @ ; \ SPI2_TXCRCR_TxCRC, Tx CRC register
  [then]

  execute-defined? use-SPI2 [if]
    \ SPI2_I2SCFGR (read-write) Reset:0x0000
    : SPI2_I2SCFGR_I2SMOD ( -- x addr ) 11 bit SPI2_I2SCFGR ; \ SPI2_I2SCFGR_I2SMOD, I2S mode selection
    : SPI2_I2SCFGR_I2SE ( -- x addr ) 10 bit SPI2_I2SCFGR ; \ SPI2_I2SCFGR_I2SE, I2S Enable
    : SPI2_I2SCFGR_I2SCFG ( %bb -- x addr ) 8 lshift SPI2_I2SCFGR ; \ SPI2_I2SCFGR_I2SCFG, I2S configuration mode
    : SPI2_I2SCFGR_PCMSYNC ( -- x addr ) 7 bit SPI2_I2SCFGR ; \ SPI2_I2SCFGR_PCMSYNC, PCM frame synchronization
    : SPI2_I2SCFGR_I2SSTD ( %bb -- x addr ) 4 lshift SPI2_I2SCFGR ; \ SPI2_I2SCFGR_I2SSTD, I2S standard selection
    : SPI2_I2SCFGR_CKPOL ( -- x addr ) 3 bit SPI2_I2SCFGR ; \ SPI2_I2SCFGR_CKPOL, Steady state clock  polarity
    : SPI2_I2SCFGR_DATLEN ( %bb -- x addr ) 1 lshift SPI2_I2SCFGR ; \ SPI2_I2SCFGR_DATLEN, Data length to be  transferred
    : SPI2_I2SCFGR_CHLEN ( -- x addr ) 0 bit SPI2_I2SCFGR ; \ SPI2_I2SCFGR_CHLEN, Channel length number of bits per audio  channel
  [then]

  [if]
    \ SPI2_I2SPR (read-write) Reset:00000010
    : SPI2_I2SPR_MCKOE ( -- x addr ) 9 bit SPI2_I2SPR ; \ SPI2_I2SPR_MCKOE, Master clock output enable
    : SPI2_I2SPR_ODD ( -- x addr ) 8 bit SPI2_I2SPR ; \ SPI2_I2SPR_ODD, Odd factor for the  prescaler
    : SPI2_I2SPR_I2SDIV ( %bbbbbbbb -- x addr ) SPI2_I2SPR ; \ SPI2_I2SPR_I2SDIV, I2S Linear prescaler
  [then]

  execute-defined? use-SPI3 [if]
    \ SPI3_CR1 (read-write) Reset:0x0000
    : SPI3_CR1_BIDIMODE ( -- x addr ) 15 bit SPI3_CR1 ; \ SPI3_CR1_BIDIMODE, Bidirectional data mode  enable
    : SPI3_CR1_BIDIOE ( -- x addr ) 14 bit SPI3_CR1 ; \ SPI3_CR1_BIDIOE, Output enable in bidirectional  mode
    : SPI3_CR1_CRCEN ( -- x addr ) 13 bit SPI3_CR1 ; \ SPI3_CR1_CRCEN, Hardware CRC calculation  enable
    : SPI3_CR1_CRCNEXT ( -- x addr ) 12 bit SPI3_CR1 ; \ SPI3_CR1_CRCNEXT, CRC transfer next
    : SPI3_CR1_DFF ( -- x addr ) 11 bit SPI3_CR1 ; \ SPI3_CR1_DFF, Data frame format
    : SPI3_CR1_RXONLY ( -- x addr ) 10 bit SPI3_CR1 ; \ SPI3_CR1_RXONLY, Receive only
    : SPI3_CR1_SSM ( -- x addr ) 9 bit SPI3_CR1 ; \ SPI3_CR1_SSM, Software slave management
    : SPI3_CR1_SSI ( -- x addr ) 8 bit SPI3_CR1 ; \ SPI3_CR1_SSI, Internal slave select
    : SPI3_CR1_LSBFIRST ( -- x addr ) 7 bit SPI3_CR1 ; \ SPI3_CR1_LSBFIRST, Frame format
    : SPI3_CR1_SPE ( -- x addr ) 6 bit SPI3_CR1 ; \ SPI3_CR1_SPE, SPI enable
    : SPI3_CR1_BR ( %bbb -- x addr ) 3 lshift SPI3_CR1 ; \ SPI3_CR1_BR, Baud rate control
    : SPI3_CR1_MSTR ( -- x addr ) 2 bit SPI3_CR1 ; \ SPI3_CR1_MSTR, Master selection
    : SPI3_CR1_CPOL ( -- x addr ) 1 bit SPI3_CR1 ; \ SPI3_CR1_CPOL, Clock polarity
    : SPI3_CR1_CPHA ( -- x addr ) 0 bit SPI3_CR1 ; \ SPI3_CR1_CPHA, Clock phase
  [then]

  [if]
    \ SPI3_CR2 (read-write) Reset:0x0000
    : SPI3_CR2_TXEIE ( -- x addr ) 7 bit SPI3_CR2 ; \ SPI3_CR2_TXEIE, Tx buffer empty interrupt  enable
    : SPI3_CR2_RXNEIE ( -- x addr ) 6 bit SPI3_CR2 ; \ SPI3_CR2_RXNEIE, RX buffer not empty interrupt  enable
    : SPI3_CR2_ERRIE ( -- x addr ) 5 bit SPI3_CR2 ; \ SPI3_CR2_ERRIE, Error interrupt enable
    : SPI3_CR2_FRF ( -- x addr ) 4 bit SPI3_CR2 ; \ SPI3_CR2_FRF, Frame format
    : SPI3_CR2_SSOE ( -- x addr ) 2 bit SPI3_CR2 ; \ SPI3_CR2_SSOE, SS output enable
    : SPI3_CR2_TXDMAEN ( -- x addr ) 1 bit SPI3_CR2 ; \ SPI3_CR2_TXDMAEN, Tx buffer DMA enable
    : SPI3_CR2_RXDMAEN ( -- x addr ) 0 bit SPI3_CR2 ; \ SPI3_CR2_RXDMAEN, Rx buffer DMA enable
  [then]

  execute-defined? use-SPI3 [if]
    \ SPI3_SR (multiple-access)  Reset:0x0002
    : SPI3_SR_TIFRFE ( -- x addr ) 8 bit SPI3_SR ; \ SPI3_SR_TIFRFE, TI frame format error
    : SPI3_SR_BSY? ( -- 1|0 ) 7 bit SPI3_SR bit@ ; \ SPI3_SR_BSY, Busy flag
    : SPI3_SR_OVR? ( -- 1|0 ) 6 bit SPI3_SR bit@ ; \ SPI3_SR_OVR, Overrun flag
    : SPI3_SR_MODF ( -- x addr ) 5 bit SPI3_SR ; \ SPI3_SR_MODF, Mode fault
    : SPI3_SR_CRCERR? ( -- 1|0 ) 4 bit SPI3_SR bit@ ; \ SPI3_SR_CRCERR, CRC error flag
    : SPI3_SR_UDR? ( -- 1|0 ) 3 bit SPI3_SR bit@ ; \ SPI3_SR_UDR, Underrun flag
    : SPI3_SR_CHSIDE ( -- x addr ) 2 bit SPI3_SR ; \ SPI3_SR_CHSIDE, Channel side
    : SPI3_SR_TXE ( -- x addr ) 1 bit SPI3_SR ; \ SPI3_SR_TXE, Transmit buffer empty
    : SPI3_SR_RXNE ( -- x addr ) 0 bit SPI3_SR ; \ SPI3_SR_RXNE, Receive buffer not empty
  [then]

  [if]
    \ SPI3_DR (read-write) Reset:0x0000
    : SPI3_DR_DR ( %bbbbbbbbbbbbbbbb -- x addr ) SPI3_DR ; \ SPI3_DR_DR, Data register
  [then]

  execute-defined? use-SPI3 [if]
    \ SPI3_CRCPR (read-write) Reset:0x0007
    : SPI3_CRCPR_CRCPOLY ( %bbbbbbbbbbbbbbbb -- x addr ) SPI3_CRCPR ; \ SPI3_CRCPR_CRCPOLY, CRC polynomial register
  [then]

  [if]
    \ SPI3_RXCRCR (read-only) Reset:0x0000
    : SPI3_RXCRCR_RxCRC? ( --  x ) SPI3_RXCRCR @ ; \ SPI3_RXCRCR_RxCRC, Rx CRC register
  [then]

  execute-defined? use-SPI3 [if]
    \ SPI3_TXCRCR (read-only) Reset:0x0000
    : SPI3_TXCRCR_TxCRC? ( --  x ) SPI3_TXCRCR @ ; \ SPI3_TXCRCR_TxCRC, Tx CRC register
  [then]

  [if]
    \ SPI3_I2SCFGR (read-write) Reset:0x0000
    : SPI3_I2SCFGR_I2SMOD ( -- x addr ) 11 bit SPI3_I2SCFGR ; \ SPI3_I2SCFGR_I2SMOD, I2S mode selection
    : SPI3_I2SCFGR_I2SE ( -- x addr ) 10 bit SPI3_I2SCFGR ; \ SPI3_I2SCFGR_I2SE, I2S Enable
    : SPI3_I2SCFGR_I2SCFG ( %bb -- x addr ) 8 lshift SPI3_I2SCFGR ; \ SPI3_I2SCFGR_I2SCFG, I2S configuration mode
    : SPI3_I2SCFGR_PCMSYNC ( -- x addr ) 7 bit SPI3_I2SCFGR ; \ SPI3_I2SCFGR_PCMSYNC, PCM frame synchronization
    : SPI3_I2SCFGR_I2SSTD ( %bb -- x addr ) 4 lshift SPI3_I2SCFGR ; \ SPI3_I2SCFGR_I2SSTD, I2S standard selection
    : SPI3_I2SCFGR_CKPOL ( -- x addr ) 3 bit SPI3_I2SCFGR ; \ SPI3_I2SCFGR_CKPOL, Steady state clock  polarity
    : SPI3_I2SCFGR_DATLEN ( %bb -- x addr ) 1 lshift SPI3_I2SCFGR ; \ SPI3_I2SCFGR_DATLEN, Data length to be  transferred
    : SPI3_I2SCFGR_CHLEN ( -- x addr ) 0 bit SPI3_I2SCFGR ; \ SPI3_I2SCFGR_CHLEN, Channel length number of bits per audio  channel
  [then]

  execute-defined? use-SPI3 [if]
    \ SPI3_I2SPR (read-write) Reset:00000010
    : SPI3_I2SPR_MCKOE ( -- x addr ) 9 bit SPI3_I2SPR ; \ SPI3_I2SPR_MCKOE, Master clock output enable
    : SPI3_I2SPR_ODD ( -- x addr ) 8 bit SPI3_I2SPR ; \ SPI3_I2SPR_ODD, Odd factor for the  prescaler
    : SPI3_I2SPR_I2SDIV ( %bbbbbbbb -- x addr ) SPI3_I2SPR ; \ SPI3_I2SPR_I2SDIV, I2S Linear prescaler
  [then]

  [if]
    \ I2S2ext_CR1 (read-write) Reset:0x0000
    : I2S2ext_CR1_BIDIMODE ( -- x addr ) 15 bit I2S2ext_CR1 ; \ I2S2ext_CR1_BIDIMODE, Bidirectional data mode  enable
    : I2S2ext_CR1_BIDIOE ( -- x addr ) 14 bit I2S2ext_CR1 ; \ I2S2ext_CR1_BIDIOE, Output enable in bidirectional  mode
    : I2S2ext_CR1_CRCEN ( -- x addr ) 13 bit I2S2ext_CR1 ; \ I2S2ext_CR1_CRCEN, Hardware CRC calculation  enable
    : I2S2ext_CR1_CRCNEXT ( -- x addr ) 12 bit I2S2ext_CR1 ; \ I2S2ext_CR1_CRCNEXT, CRC transfer next
    : I2S2ext_CR1_DFF ( -- x addr ) 11 bit I2S2ext_CR1 ; \ I2S2ext_CR1_DFF, Data frame format
    : I2S2ext_CR1_RXONLY ( -- x addr ) 10 bit I2S2ext_CR1 ; \ I2S2ext_CR1_RXONLY, Receive only
    : I2S2ext_CR1_SSM ( -- x addr ) 9 bit I2S2ext_CR1 ; \ I2S2ext_CR1_SSM, Software slave management
    : I2S2ext_CR1_SSI ( -- x addr ) 8 bit I2S2ext_CR1 ; \ I2S2ext_CR1_SSI, Internal slave select
    : I2S2ext_CR1_LSBFIRST ( -- x addr ) 7 bit I2S2ext_CR1 ; \ I2S2ext_CR1_LSBFIRST, Frame format
    : I2S2ext_CR1_SPE ( -- x addr ) 6 bit I2S2ext_CR1 ; \ I2S2ext_CR1_SPE, SPI enable
    : I2S2ext_CR1_BR ( %bbb -- x addr ) 3 lshift I2S2ext_CR1 ; \ I2S2ext_CR1_BR, Baud rate control
    : I2S2ext_CR1_MSTR ( -- x addr ) 2 bit I2S2ext_CR1 ; \ I2S2ext_CR1_MSTR, Master selection
    : I2S2ext_CR1_CPOL ( -- x addr ) 1 bit I2S2ext_CR1 ; \ I2S2ext_CR1_CPOL, Clock polarity
    : I2S2ext_CR1_CPHA ( -- x addr ) 0 bit I2S2ext_CR1 ; \ I2S2ext_CR1_CPHA, Clock phase
  [then]

  execute-defined? use-I2S2ext [if]
    \ I2S2ext_CR2 (read-write) Reset:0x0000
    : I2S2ext_CR2_TXEIE ( -- x addr ) 7 bit I2S2ext_CR2 ; \ I2S2ext_CR2_TXEIE, Tx buffer empty interrupt  enable
    : I2S2ext_CR2_RXNEIE ( -- x addr ) 6 bit I2S2ext_CR2 ; \ I2S2ext_CR2_RXNEIE, RX buffer not empty interrupt  enable
    : I2S2ext_CR2_ERRIE ( -- x addr ) 5 bit I2S2ext_CR2 ; \ I2S2ext_CR2_ERRIE, Error interrupt enable
    : I2S2ext_CR2_FRF ( -- x addr ) 4 bit I2S2ext_CR2 ; \ I2S2ext_CR2_FRF, Frame format
    : I2S2ext_CR2_SSOE ( -- x addr ) 2 bit I2S2ext_CR2 ; \ I2S2ext_CR2_SSOE, SS output enable
    : I2S2ext_CR2_TXDMAEN ( -- x addr ) 1 bit I2S2ext_CR2 ; \ I2S2ext_CR2_TXDMAEN, Tx buffer DMA enable
    : I2S2ext_CR2_RXDMAEN ( -- x addr ) 0 bit I2S2ext_CR2 ; \ I2S2ext_CR2_RXDMAEN, Rx buffer DMA enable
  [then]

  [if]
    \ I2S2ext_SR (multiple-access)  Reset:0x0002
    : I2S2ext_SR_TIFRFE ( -- x addr ) 8 bit I2S2ext_SR ; \ I2S2ext_SR_TIFRFE, TI frame format error
    : I2S2ext_SR_BSY? ( -- 1|0 ) 7 bit I2S2ext_SR bit@ ; \ I2S2ext_SR_BSY, Busy flag
    : I2S2ext_SR_OVR? ( -- 1|0 ) 6 bit I2S2ext_SR bit@ ; \ I2S2ext_SR_OVR, Overrun flag
    : I2S2ext_SR_MODF ( -- x addr ) 5 bit I2S2ext_SR ; \ I2S2ext_SR_MODF, Mode fault
    : I2S2ext_SR_CRCERR? ( -- 1|0 ) 4 bit I2S2ext_SR bit@ ; \ I2S2ext_SR_CRCERR, CRC error flag
    : I2S2ext_SR_UDR? ( -- 1|0 ) 3 bit I2S2ext_SR bit@ ; \ I2S2ext_SR_UDR, Underrun flag
    : I2S2ext_SR_CHSIDE ( -- x addr ) 2 bit I2S2ext_SR ; \ I2S2ext_SR_CHSIDE, Channel side
    : I2S2ext_SR_TXE ( -- x addr ) 1 bit I2S2ext_SR ; \ I2S2ext_SR_TXE, Transmit buffer empty
    : I2S2ext_SR_RXNE ( -- x addr ) 0 bit I2S2ext_SR ; \ I2S2ext_SR_RXNE, Receive buffer not empty
  [then]

  execute-defined? use-I2S2ext [if]
    \ I2S2ext_DR (read-write) Reset:0x0000
    : I2S2ext_DR_DR ( %bbbbbbbbbbbbbbbb -- x addr ) I2S2ext_DR ; \ I2S2ext_DR_DR, Data register
  [then]

  [if]
    \ I2S2ext_CRCPR (read-write) Reset:0x0007
    : I2S2ext_CRCPR_CRCPOLY ( %bbbbbbbbbbbbbbbb -- x addr ) I2S2ext_CRCPR ; \ I2S2ext_CRCPR_CRCPOLY, CRC polynomial register
  [then]

  execute-defined? use-I2S2ext [if]
    \ I2S2ext_RXCRCR (read-only) Reset:0x0000
    : I2S2ext_RXCRCR_RxCRC? ( --  x ) I2S2ext_RXCRCR @ ; \ I2S2ext_RXCRCR_RxCRC, Rx CRC register
  [then]

  [if]
    \ I2S2ext_TXCRCR (read-only) Reset:0x0000
    : I2S2ext_TXCRCR_TxCRC? ( --  x ) I2S2ext_TXCRCR @ ; \ I2S2ext_TXCRCR_TxCRC, Tx CRC register
  [then]

  execute-defined? use-I2S2ext [if]
    \ I2S2ext_I2SCFGR (read-write) Reset:0x0000
    : I2S2ext_I2SCFGR_I2SMOD ( -- x addr ) 11 bit I2S2ext_I2SCFGR ; \ I2S2ext_I2SCFGR_I2SMOD, I2S mode selection
    : I2S2ext_I2SCFGR_I2SE ( -- x addr ) 10 bit I2S2ext_I2SCFGR ; \ I2S2ext_I2SCFGR_I2SE, I2S Enable
    : I2S2ext_I2SCFGR_I2SCFG ( %bb -- x addr ) 8 lshift I2S2ext_I2SCFGR ; \ I2S2ext_I2SCFGR_I2SCFG, I2S configuration mode
    : I2S2ext_I2SCFGR_PCMSYNC ( -- x addr ) 7 bit I2S2ext_I2SCFGR ; \ I2S2ext_I2SCFGR_PCMSYNC, PCM frame synchronization
    : I2S2ext_I2SCFGR_I2SSTD ( %bb -- x addr ) 4 lshift I2S2ext_I2SCFGR ; \ I2S2ext_I2SCFGR_I2SSTD, I2S standard selection
    : I2S2ext_I2SCFGR_CKPOL ( -- x addr ) 3 bit I2S2ext_I2SCFGR ; \ I2S2ext_I2SCFGR_CKPOL, Steady state clock  polarity
    : I2S2ext_I2SCFGR_DATLEN ( %bb -- x addr ) 1 lshift I2S2ext_I2SCFGR ; \ I2S2ext_I2SCFGR_DATLEN, Data length to be  transferred
    : I2S2ext_I2SCFGR_CHLEN ( -- x addr ) 0 bit I2S2ext_I2SCFGR ; \ I2S2ext_I2SCFGR_CHLEN, Channel length number of bits per audio  channel
  [then]

  [if]
    \ I2S2ext_I2SPR (read-write) Reset:00000010
    : I2S2ext_I2SPR_MCKOE ( -- x addr ) 9 bit I2S2ext_I2SPR ; \ I2S2ext_I2SPR_MCKOE, Master clock output enable
    : I2S2ext_I2SPR_ODD ( -- x addr ) 8 bit I2S2ext_I2SPR ; \ I2S2ext_I2SPR_ODD, Odd factor for the  prescaler
    : I2S2ext_I2SPR_I2SDIV ( %bbbbbbbb -- x addr ) I2S2ext_I2SPR ; \ I2S2ext_I2SPR_I2SDIV, I2S Linear prescaler
  [then]

  execute-defined? use-I2S3ext [if]
    \ I2S3ext_CR1 (read-write) Reset:0x0000
    : I2S3ext_CR1_BIDIMODE ( -- x addr ) 15 bit I2S3ext_CR1 ; \ I2S3ext_CR1_BIDIMODE, Bidirectional data mode  enable
    : I2S3ext_CR1_BIDIOE ( -- x addr ) 14 bit I2S3ext_CR1 ; \ I2S3ext_CR1_BIDIOE, Output enable in bidirectional  mode
    : I2S3ext_CR1_CRCEN ( -- x addr ) 13 bit I2S3ext_CR1 ; \ I2S3ext_CR1_CRCEN, Hardware CRC calculation  enable
    : I2S3ext_CR1_CRCNEXT ( -- x addr ) 12 bit I2S3ext_CR1 ; \ I2S3ext_CR1_CRCNEXT, CRC transfer next
    : I2S3ext_CR1_DFF ( -- x addr ) 11 bit I2S3ext_CR1 ; \ I2S3ext_CR1_DFF, Data frame format
    : I2S3ext_CR1_RXONLY ( -- x addr ) 10 bit I2S3ext_CR1 ; \ I2S3ext_CR1_RXONLY, Receive only
    : I2S3ext_CR1_SSM ( -- x addr ) 9 bit I2S3ext_CR1 ; \ I2S3ext_CR1_SSM, Software slave management
    : I2S3ext_CR1_SSI ( -- x addr ) 8 bit I2S3ext_CR1 ; \ I2S3ext_CR1_SSI, Internal slave select
    : I2S3ext_CR1_LSBFIRST ( -- x addr ) 7 bit I2S3ext_CR1 ; \ I2S3ext_CR1_LSBFIRST, Frame format
    : I2S3ext_CR1_SPE ( -- x addr ) 6 bit I2S3ext_CR1 ; \ I2S3ext_CR1_SPE, SPI enable
    : I2S3ext_CR1_BR ( %bbb -- x addr ) 3 lshift I2S3ext_CR1 ; \ I2S3ext_CR1_BR, Baud rate control
    : I2S3ext_CR1_MSTR ( -- x addr ) 2 bit I2S3ext_CR1 ; \ I2S3ext_CR1_MSTR, Master selection
    : I2S3ext_CR1_CPOL ( -- x addr ) 1 bit I2S3ext_CR1 ; \ I2S3ext_CR1_CPOL, Clock polarity
    : I2S3ext_CR1_CPHA ( -- x addr ) 0 bit I2S3ext_CR1 ; \ I2S3ext_CR1_CPHA, Clock phase
  [then]

  [if]
    \ I2S3ext_CR2 (read-write) Reset:0x0000
    : I2S3ext_CR2_TXEIE ( -- x addr ) 7 bit I2S3ext_CR2 ; \ I2S3ext_CR2_TXEIE, Tx buffer empty interrupt  enable
    : I2S3ext_CR2_RXNEIE ( -- x addr ) 6 bit I2S3ext_CR2 ; \ I2S3ext_CR2_RXNEIE, RX buffer not empty interrupt  enable
    : I2S3ext_CR2_ERRIE ( -- x addr ) 5 bit I2S3ext_CR2 ; \ I2S3ext_CR2_ERRIE, Error interrupt enable
    : I2S3ext_CR2_FRF ( -- x addr ) 4 bit I2S3ext_CR2 ; \ I2S3ext_CR2_FRF, Frame format
    : I2S3ext_CR2_SSOE ( -- x addr ) 2 bit I2S3ext_CR2 ; \ I2S3ext_CR2_SSOE, SS output enable
    : I2S3ext_CR2_TXDMAEN ( -- x addr ) 1 bit I2S3ext_CR2 ; \ I2S3ext_CR2_TXDMAEN, Tx buffer DMA enable
    : I2S3ext_CR2_RXDMAEN ( -- x addr ) 0 bit I2S3ext_CR2 ; \ I2S3ext_CR2_RXDMAEN, Rx buffer DMA enable
  [then]

  execute-defined? use-I2S3ext [if]
    \ I2S3ext_SR (multiple-access)  Reset:0x0002
    : I2S3ext_SR_TIFRFE ( -- x addr ) 8 bit I2S3ext_SR ; \ I2S3ext_SR_TIFRFE, TI frame format error
    : I2S3ext_SR_BSY? ( -- 1|0 ) 7 bit I2S3ext_SR bit@ ; \ I2S3ext_SR_BSY, Busy flag
    : I2S3ext_SR_OVR? ( -- 1|0 ) 6 bit I2S3ext_SR bit@ ; \ I2S3ext_SR_OVR, Overrun flag
    : I2S3ext_SR_MODF ( -- x addr ) 5 bit I2S3ext_SR ; \ I2S3ext_SR_MODF, Mode fault
    : I2S3ext_SR_CRCERR? ( -- 1|0 ) 4 bit I2S3ext_SR bit@ ; \ I2S3ext_SR_CRCERR, CRC error flag
    : I2S3ext_SR_UDR? ( -- 1|0 ) 3 bit I2S3ext_SR bit@ ; \ I2S3ext_SR_UDR, Underrun flag
    : I2S3ext_SR_CHSIDE ( -- x addr ) 2 bit I2S3ext_SR ; \ I2S3ext_SR_CHSIDE, Channel side
    : I2S3ext_SR_TXE ( -- x addr ) 1 bit I2S3ext_SR ; \ I2S3ext_SR_TXE, Transmit buffer empty
    : I2S3ext_SR_RXNE ( -- x addr ) 0 bit I2S3ext_SR ; \ I2S3ext_SR_RXNE, Receive buffer not empty
  [then]

  [if]
    \ I2S3ext_DR (read-write) Reset:0x0000
    : I2S3ext_DR_DR ( %bbbbbbbbbbbbbbbb -- x addr ) I2S3ext_DR ; \ I2S3ext_DR_DR, Data register
  [then]

  execute-defined? use-I2S3ext [if]
    \ I2S3ext_CRCPR (read-write) Reset:0x0007
    : I2S3ext_CRCPR_CRCPOLY ( %bbbbbbbbbbbbbbbb -- x addr ) I2S3ext_CRCPR ; \ I2S3ext_CRCPR_CRCPOLY, CRC polynomial register
  [then]

  [if]
    \ I2S3ext_RXCRCR (read-only) Reset:0x0000
    : I2S3ext_RXCRCR_RxCRC? ( --  x ) I2S3ext_RXCRCR @ ; \ I2S3ext_RXCRCR_RxCRC, Rx CRC register
  [then]

  execute-defined? use-I2S3ext [if]
    \ I2S3ext_TXCRCR (read-only) Reset:0x0000
    : I2S3ext_TXCRCR_TxCRC? ( --  x ) I2S3ext_TXCRCR @ ; \ I2S3ext_TXCRCR_TxCRC, Tx CRC register
  [then]

  [if]
    \ I2S3ext_I2SCFGR (read-write) Reset:0x0000
    : I2S3ext_I2SCFGR_I2SMOD ( -- x addr ) 11 bit I2S3ext_I2SCFGR ; \ I2S3ext_I2SCFGR_I2SMOD, I2S mode selection
    : I2S3ext_I2SCFGR_I2SE ( -- x addr ) 10 bit I2S3ext_I2SCFGR ; \ I2S3ext_I2SCFGR_I2SE, I2S Enable
    : I2S3ext_I2SCFGR_I2SCFG ( %bb -- x addr ) 8 lshift I2S3ext_I2SCFGR ; \ I2S3ext_I2SCFGR_I2SCFG, I2S configuration mode
    : I2S3ext_I2SCFGR_PCMSYNC ( -- x addr ) 7 bit I2S3ext_I2SCFGR ; \ I2S3ext_I2SCFGR_PCMSYNC, PCM frame synchronization
    : I2S3ext_I2SCFGR_I2SSTD ( %bb -- x addr ) 4 lshift I2S3ext_I2SCFGR ; \ I2S3ext_I2SCFGR_I2SSTD, I2S standard selection
    : I2S3ext_I2SCFGR_CKPOL ( -- x addr ) 3 bit I2S3ext_I2SCFGR ; \ I2S3ext_I2SCFGR_CKPOL, Steady state clock  polarity
    : I2S3ext_I2SCFGR_DATLEN ( %bb -- x addr ) 1 lshift I2S3ext_I2SCFGR ; \ I2S3ext_I2SCFGR_DATLEN, Data length to be  transferred
    : I2S3ext_I2SCFGR_CHLEN ( -- x addr ) 0 bit I2S3ext_I2SCFGR ; \ I2S3ext_I2SCFGR_CHLEN, Channel length number of bits per audio  channel
  [then]

  execute-defined? use-I2S3ext [if]
    \ I2S3ext_I2SPR (read-write) Reset:00000010
    : I2S3ext_I2SPR_MCKOE ( -- x addr ) 9 bit I2S3ext_I2SPR ; \ I2S3ext_I2SPR_MCKOE, Master clock output enable
    : I2S3ext_I2SPR_ODD ( -- x addr ) 8 bit I2S3ext_I2SPR ; \ I2S3ext_I2SPR_ODD, Odd factor for the  prescaler
    : I2S3ext_I2SPR_I2SDIV ( %bbbbbbbb -- x addr ) I2S3ext_I2SPR ; \ I2S3ext_I2SPR_I2SDIV, I2S Linear prescaler
  [then]

  [if]
    \ SDIO_POWER (read-write) Reset:0x00000000
    : SDIO_POWER_PWRCTRL ( %bb -- x addr ) SDIO_POWER ; \ SDIO_POWER_PWRCTRL, PWRCTRL
  [then]

  execute-defined? use-SDIO [if]
    \ SDIO_CLKCR (read-write) Reset:0x00000000
    : SDIO_CLKCR_HWFC_EN ( -- x addr ) 14 bit SDIO_CLKCR ; \ SDIO_CLKCR_HWFC_EN, HW Flow Control enable
    : SDIO_CLKCR_NEGEDGE ( -- x addr ) 13 bit SDIO_CLKCR ; \ SDIO_CLKCR_NEGEDGE, SDIO_CK dephasing selection  bit
    : SDIO_CLKCR_WIDBUS ( %bb -- x addr ) 11 lshift SDIO_CLKCR ; \ SDIO_CLKCR_WIDBUS, Wide bus mode enable bit
    : SDIO_CLKCR_BYPASS ( -- x addr ) 10 bit SDIO_CLKCR ; \ SDIO_CLKCR_BYPASS, Clock divider bypass enable  bit
    : SDIO_CLKCR_PWRSAV ( -- x addr ) 9 bit SDIO_CLKCR ; \ SDIO_CLKCR_PWRSAV, Power saving configuration  bit
    : SDIO_CLKCR_CLKEN ( -- x addr ) 8 bit SDIO_CLKCR ; \ SDIO_CLKCR_CLKEN, Clock enable bit
    : SDIO_CLKCR_CLKDIV ( %bbbbbbbb -- x addr ) SDIO_CLKCR ; \ SDIO_CLKCR_CLKDIV, Clock divide factor
  [then]

  [if]
    \ SDIO_ARG (read-write) Reset:0x00000000
    : SDIO_ARG_CMDARG ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SDIO_ARG ; \ SDIO_ARG_CMDARG, Command argument
  [then]

  execute-defined? use-SDIO [if]
    \ SDIO_CMD (read-write) Reset:0x00000000
    : SDIO_CMD_CE_ATACMD ( -- x addr ) 14 bit SDIO_CMD ; \ SDIO_CMD_CE_ATACMD, CE-ATA command
    : SDIO_CMD_nIEN ( -- x addr ) 13 bit SDIO_CMD ; \ SDIO_CMD_nIEN, not Interrupt Enable
    : SDIO_CMD_ENCMDcompl ( -- x addr ) 12 bit SDIO_CMD ; \ SDIO_CMD_ENCMDcompl, Enable CMD completion
    : SDIO_CMD_SDIOSuspend ( -- x addr ) 11 bit SDIO_CMD ; \ SDIO_CMD_SDIOSuspend, SD I/O suspend command
    : SDIO_CMD_CPSMEN ( -- x addr ) 10 bit SDIO_CMD ; \ SDIO_CMD_CPSMEN, Command path state machine CPSM Enable  bit
    : SDIO_CMD_WAITPEND ( -- x addr ) 9 bit SDIO_CMD ; \ SDIO_CMD_WAITPEND, CPSM Waits for ends of data transfer  CmdPend internal signal.
    : SDIO_CMD_WAITINT ( -- x addr ) 8 bit SDIO_CMD ; \ SDIO_CMD_WAITINT, CPSM waits for interrupt  request
    : SDIO_CMD_WAITRESP ( %bb -- x addr ) 6 lshift SDIO_CMD ; \ SDIO_CMD_WAITRESP, Wait for response bits
    : SDIO_CMD_CMDINDEX ( %bbbbbb -- x addr ) SDIO_CMD ; \ SDIO_CMD_CMDINDEX, Command index
  [then]

  [if]
    \ SDIO_RESPCMD (read-only) Reset:0x00000000
    : SDIO_RESPCMD_RESPCMD? ( --  x ) SDIO_RESPCMD @ ; \ SDIO_RESPCMD_RESPCMD, Response command index
  [then]

  execute-defined? use-SDIO [if]
    \ SDIO_RESP1 (read-only) Reset:0x00000000
    : SDIO_RESP1_CARDSTATUS1? ( --  x ) SDIO_RESP1 @ ; \ SDIO_RESP1_CARDSTATUS1, see Table 132.
  [then]

  [if]
    \ SDIO_RESP2 (read-only) Reset:0x00000000
    : SDIO_RESP2_CARDSTATUS2? ( --  x ) SDIO_RESP2 @ ; \ SDIO_RESP2_CARDSTATUS2, see Table 132.
  [then]

  execute-defined? use-SDIO [if]
    \ SDIO_RESP3 (read-only) Reset:0x00000000
    : SDIO_RESP3_CARDSTATUS3? ( --  x ) SDIO_RESP3 @ ; \ SDIO_RESP3_CARDSTATUS3, see Table 132.
  [then]

  [if]
    \ SDIO_RESP4 (read-only) Reset:0x00000000
    : SDIO_RESP4_CARDSTATUS4? ( --  x ) SDIO_RESP4 @ ; \ SDIO_RESP4_CARDSTATUS4, see Table 132.
  [then]

  execute-defined? use-SDIO [if]
    \ SDIO_DTIMER (read-write) Reset:0x00000000
    : SDIO_DTIMER_DATATIME ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SDIO_DTIMER ; \ SDIO_DTIMER_DATATIME, Data timeout period
  [then]

  [if]
    \ SDIO_DLEN (read-write) Reset:0x00000000
    : SDIO_DLEN_DATALENGTH x addr ) SDIO_DLEN ; \ SDIO_DLEN_DATALENGTH, Data length value
  [then]

  execute-defined? use-SDIO [if]
    \ SDIO_DCTRL (read-write) Reset:0x00000000
    : SDIO_DCTRL_SDIOEN ( -- x addr ) 11 bit SDIO_DCTRL ; \ SDIO_DCTRL_SDIOEN, SD I/O enable functions
    : SDIO_DCTRL_RWMOD ( -- x addr ) 10 bit SDIO_DCTRL ; \ SDIO_DCTRL_RWMOD, Read wait mode
    : SDIO_DCTRL_RWSTOP ( -- x addr ) 9 bit SDIO_DCTRL ; \ SDIO_DCTRL_RWSTOP, Read wait stop
    : SDIO_DCTRL_RWSTART ( -- x addr ) 8 bit SDIO_DCTRL ; \ SDIO_DCTRL_RWSTART, Read wait start
    : SDIO_DCTRL_DBLOCKSIZE ( %bbbb -- x addr ) 4 lshift SDIO_DCTRL ; \ SDIO_DCTRL_DBLOCKSIZE, Data block size
    : SDIO_DCTRL_DMAEN ( -- x addr ) 3 bit SDIO_DCTRL ; \ SDIO_DCTRL_DMAEN, DMA enable bit
    : SDIO_DCTRL_DTMODE ( -- x addr ) 2 bit SDIO_DCTRL ; \ SDIO_DCTRL_DTMODE, Data transfer mode selection 1: Stream  or SDIO multibyte data transfer.
    : SDIO_DCTRL_DTDIR ( -- x addr ) 1 bit SDIO_DCTRL ; \ SDIO_DCTRL_DTDIR, Data transfer direction  selection
    : SDIO_DCTRL_DTEN ( -- x addr ) 0 bit SDIO_DCTRL ; \ SDIO_DCTRL_DTEN, DTEN
  [then]

  [if]
    \ SDIO_DCOUNT (read-only) Reset:0x00000000
    : SDIO_DCOUNT_DATACOUNT? ( --  x ) SDIO_DCOUNT @ ; \ SDIO_DCOUNT_DATACOUNT, Data count value
  [then]

  execute-defined? use-SDIO [if]
    \ SDIO_STA (read-only) Reset:0x00000000
    : SDIO_STA_CEATAEND? ( --  1|0 ) 23 bit SDIO_STA bit@ ; \ SDIO_STA_CEATAEND, CE-ATA command completion signal  received for CMD61
    : SDIO_STA_SDIOIT? ( --  1|0 ) 22 bit SDIO_STA bit@ ; \ SDIO_STA_SDIOIT, SDIO interrupt received
    : SDIO_STA_RXDAVL? ( --  1|0 ) 21 bit SDIO_STA bit@ ; \ SDIO_STA_RXDAVL, Data available in receive  FIFO
    : SDIO_STA_TXDAVL? ( --  1|0 ) 20 bit SDIO_STA bit@ ; \ SDIO_STA_TXDAVL, Data available in transmit  FIFO
    : SDIO_STA_RXFIFOE? ( --  1|0 ) 19 bit SDIO_STA bit@ ; \ SDIO_STA_RXFIFOE, Receive FIFO empty
    : SDIO_STA_TXFIFOE? ( --  1|0 ) 18 bit SDIO_STA bit@ ; \ SDIO_STA_TXFIFOE, Transmit FIFO empty
    : SDIO_STA_RXFIFOF? ( --  1|0 ) 17 bit SDIO_STA bit@ ; \ SDIO_STA_RXFIFOF, Receive FIFO full
    : SDIO_STA_TXFIFOF? ( --  1|0 ) 16 bit SDIO_STA bit@ ; \ SDIO_STA_TXFIFOF, Transmit FIFO full
    : SDIO_STA_RXFIFOHF? ( --  1|0 ) 15 bit SDIO_STA bit@ ; \ SDIO_STA_RXFIFOHF, Receive FIFO half full: there are at  least 8 words in the FIFO
    : SDIO_STA_TXFIFOHE? ( --  1|0 ) 14 bit SDIO_STA bit@ ; \ SDIO_STA_TXFIFOHE, Transmit FIFO half empty: at least 8  words can be written into the FIFO
    : SDIO_STA_RXACT? ( --  1|0 ) 13 bit SDIO_STA bit@ ; \ SDIO_STA_RXACT, Data receive in progress
    : SDIO_STA_TXACT? ( --  1|0 ) 12 bit SDIO_STA bit@ ; \ SDIO_STA_TXACT, Data transmit in progress
    : SDIO_STA_CMDACT? ( --  1|0 ) 11 bit SDIO_STA bit@ ; \ SDIO_STA_CMDACT, Command transfer in  progress
    : SDIO_STA_DBCKEND? ( --  1|0 ) 10 bit SDIO_STA bit@ ; \ SDIO_STA_DBCKEND, Data block sent/received CRC check  passed
    : SDIO_STA_STBITERR? ( --  1|0 ) 9 bit SDIO_STA bit@ ; \ SDIO_STA_STBITERR, Start bit not detected on all data  signals in wide bus mode
    : SDIO_STA_DATAEND? ( --  1|0 ) 8 bit SDIO_STA bit@ ; \ SDIO_STA_DATAEND, Data end data counter, SDIDCOUNT, is  zero
    : SDIO_STA_CMDSENT? ( --  1|0 ) 7 bit SDIO_STA bit@ ; \ SDIO_STA_CMDSENT, Command sent no response  required
    : SDIO_STA_CMDREND? ( --  1|0 ) 6 bit SDIO_STA bit@ ; \ SDIO_STA_CMDREND, Command response received CRC check  passed
    : SDIO_STA_RXOVERR? ( --  1|0 ) 5 bit SDIO_STA bit@ ; \ SDIO_STA_RXOVERR, Received FIFO overrun  error
    : SDIO_STA_TXUNDERR? ( --  1|0 ) 4 bit SDIO_STA bit@ ; \ SDIO_STA_TXUNDERR, Transmit FIFO underrun  error
    : SDIO_STA_DTIMEOUT? ( --  1|0 ) 3 bit SDIO_STA bit@ ; \ SDIO_STA_DTIMEOUT, Data timeout
    : SDIO_STA_CTIMEOUT? ( --  1|0 ) 2 bit SDIO_STA bit@ ; \ SDIO_STA_CTIMEOUT, Command response timeout
    : SDIO_STA_DCRCFAIL? ( --  1|0 ) 1 bit SDIO_STA bit@ ; \ SDIO_STA_DCRCFAIL, Data block sent/received CRC check  failed
    : SDIO_STA_CCRCFAIL? ( --  1|0 ) 0 bit SDIO_STA bit@ ; \ SDIO_STA_CCRCFAIL, Command response received CRC check  failed
  [then]

  [if]
    \ SDIO_ICR (read-write) Reset:0x00000000
    : SDIO_ICR_CEATAENDC ( -- x addr ) 23 bit SDIO_ICR ; \ SDIO_ICR_CEATAENDC, CEATAEND flag clear bit
    : SDIO_ICR_SDIOITC ( -- x addr ) 22 bit SDIO_ICR ; \ SDIO_ICR_SDIOITC, SDIOIT flag clear bit
    : SDIO_ICR_DBCKENDC ( -- x addr ) 10 bit SDIO_ICR ; \ SDIO_ICR_DBCKENDC, DBCKEND flag clear bit
    : SDIO_ICR_STBITERRC ( -- x addr ) 9 bit SDIO_ICR ; \ SDIO_ICR_STBITERRC, STBITERR flag clear bit
    : SDIO_ICR_DATAENDC ( -- x addr ) 8 bit SDIO_ICR ; \ SDIO_ICR_DATAENDC, DATAEND flag clear bit
    : SDIO_ICR_CMDSENTC ( -- x addr ) 7 bit SDIO_ICR ; \ SDIO_ICR_CMDSENTC, CMDSENT flag clear bit
    : SDIO_ICR_CMDRENDC ( -- x addr ) 6 bit SDIO_ICR ; \ SDIO_ICR_CMDRENDC, CMDREND flag clear bit
    : SDIO_ICR_RXOVERRC ( -- x addr ) 5 bit SDIO_ICR ; \ SDIO_ICR_RXOVERRC, RXOVERR flag clear bit
    : SDIO_ICR_TXUNDERRC ( -- x addr ) 4 bit SDIO_ICR ; \ SDIO_ICR_TXUNDERRC, TXUNDERR flag clear bit
    : SDIO_ICR_DTIMEOUTC ( -- x addr ) 3 bit SDIO_ICR ; \ SDIO_ICR_DTIMEOUTC, DTIMEOUT flag clear bit
    : SDIO_ICR_CTIMEOUTC ( -- x addr ) 2 bit SDIO_ICR ; \ SDIO_ICR_CTIMEOUTC, CTIMEOUT flag clear bit
    : SDIO_ICR_DCRCFAILC ( -- x addr ) 1 bit SDIO_ICR ; \ SDIO_ICR_DCRCFAILC, DCRCFAIL flag clear bit
    : SDIO_ICR_CCRCFAILC ( -- x addr ) 0 bit SDIO_ICR ; \ SDIO_ICR_CCRCFAILC, CCRCFAIL flag clear bit
  [then]

  execute-defined? use-SDIO [if]
    \ SDIO_MASK (read-write) Reset:0x00000000
    : SDIO_MASK_CEATAENDIE ( -- x addr ) 23 bit SDIO_MASK ; \ SDIO_MASK_CEATAENDIE, CE-ATA command completion signal  received interrupt enable
    : SDIO_MASK_SDIOITIE ( -- x addr ) 22 bit SDIO_MASK ; \ SDIO_MASK_SDIOITIE, SDIO mode interrupt received interrupt  enable
    : SDIO_MASK_RXDAVLIE ( -- x addr ) 21 bit SDIO_MASK ; \ SDIO_MASK_RXDAVLIE, Data available in Rx FIFO interrupt  enable
    : SDIO_MASK_TXDAVLIE ( -- x addr ) 20 bit SDIO_MASK ; \ SDIO_MASK_TXDAVLIE, Data available in Tx FIFO interrupt  enable
    : SDIO_MASK_RXFIFOEIE ( -- x addr ) 19 bit SDIO_MASK ; \ SDIO_MASK_RXFIFOEIE, Rx FIFO empty interrupt  enable
    : SDIO_MASK_TXFIFOEIE ( -- x addr ) 18 bit SDIO_MASK ; \ SDIO_MASK_TXFIFOEIE, Tx FIFO empty interrupt  enable
    : SDIO_MASK_RXFIFOFIE ( -- x addr ) 17 bit SDIO_MASK ; \ SDIO_MASK_RXFIFOFIE, Rx FIFO full interrupt  enable
    : SDIO_MASK_TXFIFOFIE ( -- x addr ) 16 bit SDIO_MASK ; \ SDIO_MASK_TXFIFOFIE, Tx FIFO full interrupt  enable
    : SDIO_MASK_RXFIFOHFIE ( -- x addr ) 15 bit SDIO_MASK ; \ SDIO_MASK_RXFIFOHFIE, Rx FIFO half full interrupt  enable
    : SDIO_MASK_TXFIFOHEIE ( -- x addr ) 14 bit SDIO_MASK ; \ SDIO_MASK_TXFIFOHEIE, Tx FIFO half empty interrupt  enable
    : SDIO_MASK_RXACTIE ( -- x addr ) 13 bit SDIO_MASK ; \ SDIO_MASK_RXACTIE, Data receive acting interrupt  enable
    : SDIO_MASK_TXACTIE ( -- x addr ) 12 bit SDIO_MASK ; \ SDIO_MASK_TXACTIE, Data transmit acting interrupt  enable
    : SDIO_MASK_CMDACTIE ( -- x addr ) 11 bit SDIO_MASK ; \ SDIO_MASK_CMDACTIE, Command acting interrupt  enable
    : SDIO_MASK_DBCKENDIE ( -- x addr ) 10 bit SDIO_MASK ; \ SDIO_MASK_DBCKENDIE, Data block end interrupt  enable
    : SDIO_MASK_STBITERRIE ( -- x addr ) 9 bit SDIO_MASK ; \ SDIO_MASK_STBITERRIE, Start bit error interrupt  enable
    : SDIO_MASK_DATAENDIE ( -- x addr ) 8 bit SDIO_MASK ; \ SDIO_MASK_DATAENDIE, Data end interrupt enable
    : SDIO_MASK_CMDSENTIE ( -- x addr ) 7 bit SDIO_MASK ; \ SDIO_MASK_CMDSENTIE, Command sent interrupt  enable
    : SDIO_MASK_CMDRENDIE ( -- x addr ) 6 bit SDIO_MASK ; \ SDIO_MASK_CMDRENDIE, Command response received interrupt  enable
    : SDIO_MASK_RXOVERRIE ( -- x addr ) 5 bit SDIO_MASK ; \ SDIO_MASK_RXOVERRIE, Rx FIFO overrun error interrupt  enable
    : SDIO_MASK_TXUNDERRIE ( -- x addr ) 4 bit SDIO_MASK ; \ SDIO_MASK_TXUNDERRIE, Tx FIFO underrun error interrupt  enable
    : SDIO_MASK_DTIMEOUTIE ( -- x addr ) 3 bit SDIO_MASK ; \ SDIO_MASK_DTIMEOUTIE, Data timeout interrupt  enable
    : SDIO_MASK_CTIMEOUTIE ( -- x addr ) 2 bit SDIO_MASK ; \ SDIO_MASK_CTIMEOUTIE, Command timeout interrupt  enable
    : SDIO_MASK_DCRCFAILIE ( -- x addr ) 1 bit SDIO_MASK ; \ SDIO_MASK_DCRCFAILIE, Data CRC fail interrupt  enable
    : SDIO_MASK_CCRCFAILIE ( -- x addr ) 0 bit SDIO_MASK ; \ SDIO_MASK_CCRCFAILIE, Command CRC fail interrupt  enable
  [then]

  [if]
    \ SDIO_FIFOCNT (read-only) Reset:0x00000000
    : SDIO_FIFOCNT_FIFOCOUNT? ( --  x ) SDIO_FIFOCNT @ ; \ SDIO_FIFOCNT_FIFOCOUNT, Remaining number of words to be written  to or read from the FIFO.
  [then]

  execute-defined? use-SDIO [if]
    \ SDIO_FIFO (read-write) Reset:0x00000000
    : SDIO_FIFO_FIFOData ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) SDIO_FIFO ; \ SDIO_FIFO_FIFOData, Receive and transmit FIFO  data
  [then]

  [if]
    \ ADC1_SR (read-write) Reset:0x00000000
    : ADC1_SR_OVR ( -- x addr ) 5 bit ADC1_SR ; \ ADC1_SR_OVR, Overrun
    : ADC1_SR_STRT ( -- x addr ) 4 bit ADC1_SR ; \ ADC1_SR_STRT, Regular channel start flag
    : ADC1_SR_JSTRT ( -- x addr ) 3 bit ADC1_SR ; \ ADC1_SR_JSTRT, Injected channel start  flag
    : ADC1_SR_JEOC ( -- x addr ) 2 bit ADC1_SR ; \ ADC1_SR_JEOC, Injected channel end of  conversion
    : ADC1_SR_EOC ( -- x addr ) 1 bit ADC1_SR ; \ ADC1_SR_EOC, Regular channel end of  conversion
    : ADC1_SR_AWD ( -- x addr ) 0 bit ADC1_SR ; \ ADC1_SR_AWD, Analog watchdog flag
  [then]

  execute-defined? use-ADC1 [if]
    \ ADC1_CR1 (read-write) Reset:0x00000000
    : ADC1_CR1_OVRIE ( -- x addr ) 26 bit ADC1_CR1 ; \ ADC1_CR1_OVRIE, Overrun interrupt enable
    : ADC1_CR1_RES ( %bb -- x addr ) 24 lshift ADC1_CR1 ; \ ADC1_CR1_RES, Resolution
    : ADC1_CR1_AWDEN ( -- x addr ) 23 bit ADC1_CR1 ; \ ADC1_CR1_AWDEN, Analog watchdog enable on regular  channels
    : ADC1_CR1_JAWDEN ( -- x addr ) 22 bit ADC1_CR1 ; \ ADC1_CR1_JAWDEN, Analog watchdog enable on injected  channels
    : ADC1_CR1_DISCNUM ( %bbb -- x addr ) 13 lshift ADC1_CR1 ; \ ADC1_CR1_DISCNUM, Discontinuous mode channel  count
    : ADC1_CR1_JDISCEN ( -- x addr ) 12 bit ADC1_CR1 ; \ ADC1_CR1_JDISCEN, Discontinuous mode on injected  channels
    : ADC1_CR1_DISCEN ( -- x addr ) 11 bit ADC1_CR1 ; \ ADC1_CR1_DISCEN, Discontinuous mode on regular  channels
    : ADC1_CR1_JAUTO ( -- x addr ) 10 bit ADC1_CR1 ; \ ADC1_CR1_JAUTO, Automatic injected group  conversion
    : ADC1_CR1_AWDSGL ( -- x addr ) 9 bit ADC1_CR1 ; \ ADC1_CR1_AWDSGL, Enable the watchdog on a single channel  in scan mode
    : ADC1_CR1_SCAN ( -- x addr ) 8 bit ADC1_CR1 ; \ ADC1_CR1_SCAN, Scan mode
    : ADC1_CR1_JEOCIE ( -- x addr ) 7 bit ADC1_CR1 ; \ ADC1_CR1_JEOCIE, Interrupt enable for injected  channels
    : ADC1_CR1_AWDIE ( -- x addr ) 6 bit ADC1_CR1 ; \ ADC1_CR1_AWDIE, Analog watchdog interrupt  enable
    : ADC1_CR1_EOCIE ( -- x addr ) 5 bit ADC1_CR1 ; \ ADC1_CR1_EOCIE, Interrupt enable for EOC
    : ADC1_CR1_AWDCH ( %bbbbb -- x addr ) ADC1_CR1 ; \ ADC1_CR1_AWDCH, Analog watchdog channel select  bits
  [then]

  [if]
    \ ADC1_CR2 (read-write) Reset:0x00000000
    : ADC1_CR2_SWSTART ( -- x addr ) 30 bit ADC1_CR2 ; \ ADC1_CR2_SWSTART, Start conversion of regular  channels
    : ADC1_CR2_EXTEN ( %bb -- x addr ) 28 lshift ADC1_CR2 ; \ ADC1_CR2_EXTEN, External trigger enable for regular  channels
    : ADC1_CR2_EXTSEL ( %bbbb -- x addr ) 24 lshift ADC1_CR2 ; \ ADC1_CR2_EXTSEL, External event select for regular  group
    : ADC1_CR2_JSWSTART ( -- x addr ) 22 bit ADC1_CR2 ; \ ADC1_CR2_JSWSTART, Start conversion of injected  channels
    : ADC1_CR2_JEXTEN ( %bb -- x addr ) 20 lshift ADC1_CR2 ; \ ADC1_CR2_JEXTEN, External trigger enable for injected  channels
    : ADC1_CR2_JEXTSEL ( %bbbb -- x addr ) 16 lshift ADC1_CR2 ; \ ADC1_CR2_JEXTSEL, External event select for injected  group
    : ADC1_CR2_ALIGN ( -- x addr ) 11 bit ADC1_CR2 ; \ ADC1_CR2_ALIGN, Data alignment
    : ADC1_CR2_EOCS ( -- x addr ) 10 bit ADC1_CR2 ; \ ADC1_CR2_EOCS, End of conversion  selection
    : ADC1_CR2_DDS ( -- x addr ) 9 bit ADC1_CR2 ; \ ADC1_CR2_DDS, DMA disable selection for single ADC  mode
    : ADC1_CR2_DMA ( -- x addr ) 8 bit ADC1_CR2 ; \ ADC1_CR2_DMA, Direct memory access mode for single  ADC mode
    : ADC1_CR2_CONT ( -- x addr ) 1 bit ADC1_CR2 ; \ ADC1_CR2_CONT, Continuous conversion
    : ADC1_CR2_ADON ( -- x addr ) 0 bit ADC1_CR2 ; \ ADC1_CR2_ADON, A/D Converter ON / OFF
  [then]

  execute-defined? use-ADC1 [if]
    \ ADC1_SMPR1 (read-write) Reset:0x00000000
    : ADC1_SMPR1_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC1_SMPR1 ; \ ADC1_SMPR1_SMPx_x, Sample time bits
  [then]

  [if]
    \ ADC1_SMPR2 (read-write) Reset:0x00000000
    : ADC1_SMPR2_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC1_SMPR2 ; \ ADC1_SMPR2_SMPx_x, Sample time bits
  [then]

  execute-defined? use-ADC1 [if]
    \ ADC1_JOFR1 (read-write) Reset:0x00000000
    : ADC1_JOFR1_JOFFSET1 ( %bbbbbbbbbbb -- x addr ) ADC1_JOFR1 ; \ ADC1_JOFR1_JOFFSET1, Data offset for injected channel  x
  [then]

  [if]
    \ ADC1_JOFR2 (read-write) Reset:0x00000000
    : ADC1_JOFR2_JOFFSET2 ( %bbbbbbbbbbb -- x addr ) ADC1_JOFR2 ; \ ADC1_JOFR2_JOFFSET2, Data offset for injected channel  x
  [then]

  execute-defined? use-ADC1 [if]
    \ ADC1_JOFR3 (read-write) Reset:0x00000000
    : ADC1_JOFR3_JOFFSET3 ( %bbbbbbbbbbb -- x addr ) ADC1_JOFR3 ; \ ADC1_JOFR3_JOFFSET3, Data offset for injected channel  x
  [then]

  [if]
    \ ADC1_JOFR4 (read-write) Reset:0x00000000
    : ADC1_JOFR4_JOFFSET4 ( %bbbbbbbbbbb -- x addr ) ADC1_JOFR4 ; \ ADC1_JOFR4_JOFFSET4, Data offset for injected channel  x
  [then]

  execute-defined? use-ADC1 [if]
    \ ADC1_HTR (read-write) Reset:0x00000FFF
    : ADC1_HTR_HT ( %bbbbbbbbbbb -- x addr ) ADC1_HTR ; \ ADC1_HTR_HT, Analog watchdog higher  threshold
  [then]

  [if]
    \ ADC1_LTR (read-write) Reset:0x00000000
    : ADC1_LTR_LT ( %bbbbbbbbbbb -- x addr ) ADC1_LTR ; \ ADC1_LTR_LT, Analog watchdog lower  threshold
  [then]

  execute-defined? use-ADC1 [if]
    \ ADC1_SQR1 (read-write) Reset:0x00000000
    : ADC1_SQR1_L ( %bbbb -- x addr ) 20 lshift ADC1_SQR1 ; \ ADC1_SQR1_L, Regular channel sequence  length
    : ADC1_SQR1_SQ16 ( %bbbbb -- x addr ) 15 lshift ADC1_SQR1 ; \ ADC1_SQR1_SQ16, 16th conversion in regular  sequence
    : ADC1_SQR1_SQ15 ( %bbbbb -- x addr ) 10 lshift ADC1_SQR1 ; \ ADC1_SQR1_SQ15, 15th conversion in regular  sequence
    : ADC1_SQR1_SQ14 ( %bbbbb -- x addr ) 5 lshift ADC1_SQR1 ; \ ADC1_SQR1_SQ14, 14th conversion in regular  sequence
    : ADC1_SQR1_SQ13 ( %bbbbb -- x addr ) ADC1_SQR1 ; \ ADC1_SQR1_SQ13, 13th conversion in regular  sequence
  [then]

  [if]
    \ ADC1_SQR2 (read-write) Reset:0x00000000
    : ADC1_SQR2_SQ12 ( %bbbbb -- x addr ) 25 lshift ADC1_SQR2 ; \ ADC1_SQR2_SQ12, 12th conversion in regular  sequence
    : ADC1_SQR2_SQ11 ( %bbbbb -- x addr ) 20 lshift ADC1_SQR2 ; \ ADC1_SQR2_SQ11, 11th conversion in regular  sequence
    : ADC1_SQR2_SQ10 ( %bbbbb -- x addr ) 15 lshift ADC1_SQR2 ; \ ADC1_SQR2_SQ10, 10th conversion in regular  sequence
    : ADC1_SQR2_SQ9 ( %bbbbb -- x addr ) 10 lshift ADC1_SQR2 ; \ ADC1_SQR2_SQ9, 9th conversion in regular  sequence
    : ADC1_SQR2_SQ8 ( %bbbbb -- x addr ) 5 lshift ADC1_SQR2 ; \ ADC1_SQR2_SQ8, 8th conversion in regular  sequence
    : ADC1_SQR2_SQ7 ( %bbbbb -- x addr ) ADC1_SQR2 ; \ ADC1_SQR2_SQ7, 7th conversion in regular  sequence
  [then]

  execute-defined? use-ADC1 [if]
    \ ADC1_SQR3 (read-write) Reset:0x00000000
    : ADC1_SQR3_SQ6 ( %bbbbb -- x addr ) 25 lshift ADC1_SQR3 ; \ ADC1_SQR3_SQ6, 6th conversion in regular  sequence
    : ADC1_SQR3_SQ5 ( %bbbbb -- x addr ) 20 lshift ADC1_SQR3 ; \ ADC1_SQR3_SQ5, 5th conversion in regular  sequence
    : ADC1_SQR3_SQ4 ( %bbbbb -- x addr ) 15 lshift ADC1_SQR3 ; \ ADC1_SQR3_SQ4, 4th conversion in regular  sequence
    : ADC1_SQR3_SQ3 ( %bbbbb -- x addr ) 10 lshift ADC1_SQR3 ; \ ADC1_SQR3_SQ3, 3rd conversion in regular  sequence
    : ADC1_SQR3_SQ2 ( %bbbbb -- x addr ) 5 lshift ADC1_SQR3 ; \ ADC1_SQR3_SQ2, 2nd conversion in regular  sequence
    : ADC1_SQR3_SQ1 ( %bbbbb -- x addr ) ADC1_SQR3 ; \ ADC1_SQR3_SQ1, 1st conversion in regular  sequence
  [then]

  [if]
    \ ADC1_JSQR (read-write) Reset:0x00000000
    : ADC1_JSQR_JL ( %bb -- x addr ) 20 lshift ADC1_JSQR ; \ ADC1_JSQR_JL, Injected sequence length
    : ADC1_JSQR_JSQ4 ( %bbbbb -- x addr ) 15 lshift ADC1_JSQR ; \ ADC1_JSQR_JSQ4, 4th conversion in injected  sequence
    : ADC1_JSQR_JSQ3 ( %bbbbb -- x addr ) 10 lshift ADC1_JSQR ; \ ADC1_JSQR_JSQ3, 3rd conversion in injected  sequence
    : ADC1_JSQR_JSQ2 ( %bbbbb -- x addr ) 5 lshift ADC1_JSQR ; \ ADC1_JSQR_JSQ2, 2nd conversion in injected  sequence
    : ADC1_JSQR_JSQ1 ( %bbbbb -- x addr ) ADC1_JSQR ; \ ADC1_JSQR_JSQ1, 1st conversion in injected  sequence
  [then]

  execute-defined? use-ADC1 [if]
    \ ADC1_JDR1 (read-only) Reset:0x00000000
    : ADC1_JDR1_JDATA? ( --  x ) ADC1_JDR1 @ ; \ ADC1_JDR1_JDATA, Injected data
  [then]

  [if]
    \ ADC1_JDR2 (read-only) Reset:0x00000000
    : ADC1_JDR2_JDATA? ( --  x ) ADC1_JDR2 @ ; \ ADC1_JDR2_JDATA, Injected data
  [then]

  execute-defined? use-ADC1 [if]
    \ ADC1_JDR3 (read-only) Reset:0x00000000
    : ADC1_JDR3_JDATA? ( --  x ) ADC1_JDR3 @ ; \ ADC1_JDR3_JDATA, Injected data
  [then]

  [if]
    \ ADC1_JDR4 (read-only) Reset:0x00000000
    : ADC1_JDR4_JDATA? ( --  x ) ADC1_JDR4 @ ; \ ADC1_JDR4_JDATA, Injected data
  [then]

  execute-defined? use-ADC1 [if]
    \ ADC1_DR (read-only) Reset:0x00000000
    : ADC1_DR_DATA? ( --  x ) ADC1_DR @ ; \ ADC1_DR_DATA, Regular data
  [then]

  [if]
    \ ADC2_SR (read-write) Reset:0x00000000
    : ADC2_SR_OVR ( -- x addr ) 5 bit ADC2_SR ; \ ADC2_SR_OVR, Overrun
    : ADC2_SR_STRT ( -- x addr ) 4 bit ADC2_SR ; \ ADC2_SR_STRT, Regular channel start flag
    : ADC2_SR_JSTRT ( -- x addr ) 3 bit ADC2_SR ; \ ADC2_SR_JSTRT, Injected channel start  flag
    : ADC2_SR_JEOC ( -- x addr ) 2 bit ADC2_SR ; \ ADC2_SR_JEOC, Injected channel end of  conversion
    : ADC2_SR_EOC ( -- x addr ) 1 bit ADC2_SR ; \ ADC2_SR_EOC, Regular channel end of  conversion
    : ADC2_SR_AWD ( -- x addr ) 0 bit ADC2_SR ; \ ADC2_SR_AWD, Analog watchdog flag
  [then]

  execute-defined? use-ADC2 [if]
    \ ADC2_CR1 (read-write) Reset:0x00000000
    : ADC2_CR1_OVRIE ( -- x addr ) 26 bit ADC2_CR1 ; \ ADC2_CR1_OVRIE, Overrun interrupt enable
    : ADC2_CR1_RES ( %bb -- x addr ) 24 lshift ADC2_CR1 ; \ ADC2_CR1_RES, Resolution
    : ADC2_CR1_AWDEN ( -- x addr ) 23 bit ADC2_CR1 ; \ ADC2_CR1_AWDEN, Analog watchdog enable on regular  channels
    : ADC2_CR1_JAWDEN ( -- x addr ) 22 bit ADC2_CR1 ; \ ADC2_CR1_JAWDEN, Analog watchdog enable on injected  channels
    : ADC2_CR1_DISCNUM ( %bbb -- x addr ) 13 lshift ADC2_CR1 ; \ ADC2_CR1_DISCNUM, Discontinuous mode channel  count
    : ADC2_CR1_JDISCEN ( -- x addr ) 12 bit ADC2_CR1 ; \ ADC2_CR1_JDISCEN, Discontinuous mode on injected  channels
    : ADC2_CR1_DISCEN ( -- x addr ) 11 bit ADC2_CR1 ; \ ADC2_CR1_DISCEN, Discontinuous mode on regular  channels
    : ADC2_CR1_JAUTO ( -- x addr ) 10 bit ADC2_CR1 ; \ ADC2_CR1_JAUTO, Automatic injected group  conversion
    : ADC2_CR1_AWDSGL ( -- x addr ) 9 bit ADC2_CR1 ; \ ADC2_CR1_AWDSGL, Enable the watchdog on a single channel  in scan mode
    : ADC2_CR1_SCAN ( -- x addr ) 8 bit ADC2_CR1 ; \ ADC2_CR1_SCAN, Scan mode
    : ADC2_CR1_JEOCIE ( -- x addr ) 7 bit ADC2_CR1 ; \ ADC2_CR1_JEOCIE, Interrupt enable for injected  channels
    : ADC2_CR1_AWDIE ( -- x addr ) 6 bit ADC2_CR1 ; \ ADC2_CR1_AWDIE, Analog watchdog interrupt  enable
    : ADC2_CR1_EOCIE ( -- x addr ) 5 bit ADC2_CR1 ; \ ADC2_CR1_EOCIE, Interrupt enable for EOC
    : ADC2_CR1_AWDCH ( %bbbbb -- x addr ) ADC2_CR1 ; \ ADC2_CR1_AWDCH, Analog watchdog channel select  bits
  [then]

  [if]
    \ ADC2_CR2 (read-write) Reset:0x00000000
    : ADC2_CR2_SWSTART ( -- x addr ) 30 bit ADC2_CR2 ; \ ADC2_CR2_SWSTART, Start conversion of regular  channels
    : ADC2_CR2_EXTEN ( %bb -- x addr ) 28 lshift ADC2_CR2 ; \ ADC2_CR2_EXTEN, External trigger enable for regular  channels
    : ADC2_CR2_EXTSEL ( %bbbb -- x addr ) 24 lshift ADC2_CR2 ; \ ADC2_CR2_EXTSEL, External event select for regular  group
    : ADC2_CR2_JSWSTART ( -- x addr ) 22 bit ADC2_CR2 ; \ ADC2_CR2_JSWSTART, Start conversion of injected  channels
    : ADC2_CR2_JEXTEN ( %bb -- x addr ) 20 lshift ADC2_CR2 ; \ ADC2_CR2_JEXTEN, External trigger enable for injected  channels
    : ADC2_CR2_JEXTSEL ( %bbbb -- x addr ) 16 lshift ADC2_CR2 ; \ ADC2_CR2_JEXTSEL, External event select for injected  group
    : ADC2_CR2_ALIGN ( -- x addr ) 11 bit ADC2_CR2 ; \ ADC2_CR2_ALIGN, Data alignment
    : ADC2_CR2_EOCS ( -- x addr ) 10 bit ADC2_CR2 ; \ ADC2_CR2_EOCS, End of conversion  selection
    : ADC2_CR2_DDS ( -- x addr ) 9 bit ADC2_CR2 ; \ ADC2_CR2_DDS, DMA disable selection for single ADC  mode
    : ADC2_CR2_DMA ( -- x addr ) 8 bit ADC2_CR2 ; \ ADC2_CR2_DMA, Direct memory access mode for single  ADC mode
    : ADC2_CR2_CONT ( -- x addr ) 1 bit ADC2_CR2 ; \ ADC2_CR2_CONT, Continuous conversion
    : ADC2_CR2_ADON ( -- x addr ) 0 bit ADC2_CR2 ; \ ADC2_CR2_ADON, A/D Converter ON / OFF
  [then]

  execute-defined? use-ADC2 [if]
    \ ADC2_SMPR1 (read-write) Reset:0x00000000
    : ADC2_SMPR1_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC2_SMPR1 ; \ ADC2_SMPR1_SMPx_x, Sample time bits
  [then]

  [if]
    \ ADC2_SMPR2 (read-write) Reset:0x00000000
    : ADC2_SMPR2_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC2_SMPR2 ; \ ADC2_SMPR2_SMPx_x, Sample time bits
  [then]

  execute-defined? use-ADC2 [if]
    \ ADC2_JOFR1 (read-write) Reset:0x00000000
    : ADC2_JOFR1_JOFFSET1 ( %bbbbbbbbbbb -- x addr ) ADC2_JOFR1 ; \ ADC2_JOFR1_JOFFSET1, Data offset for injected channel  x
  [then]

  [if]
    \ ADC2_JOFR2 (read-write) Reset:0x00000000
    : ADC2_JOFR2_JOFFSET2 ( %bbbbbbbbbbb -- x addr ) ADC2_JOFR2 ; \ ADC2_JOFR2_JOFFSET2, Data offset for injected channel  x
  [then]

  execute-defined? use-ADC2 [if]
    \ ADC2_JOFR3 (read-write) Reset:0x00000000
    : ADC2_JOFR3_JOFFSET3 ( %bbbbbbbbbbb -- x addr ) ADC2_JOFR3 ; \ ADC2_JOFR3_JOFFSET3, Data offset for injected channel  x
  [then]

  [if]
    \ ADC2_JOFR4 (read-write) Reset:0x00000000
    : ADC2_JOFR4_JOFFSET4 ( %bbbbbbbbbbb -- x addr ) ADC2_JOFR4 ; \ ADC2_JOFR4_JOFFSET4, Data offset for injected channel  x
  [then]

  execute-defined? use-ADC2 [if]
    \ ADC2_HTR (read-write) Reset:0x00000FFF
    : ADC2_HTR_HT ( %bbbbbbbbbbb -- x addr ) ADC2_HTR ; \ ADC2_HTR_HT, Analog watchdog higher  threshold
  [then]

  [if]
    \ ADC2_LTR (read-write) Reset:0x00000000
    : ADC2_LTR_LT ( %bbbbbbbbbbb -- x addr ) ADC2_LTR ; \ ADC2_LTR_LT, Analog watchdog lower  threshold
  [then]

  execute-defined? use-ADC2 [if]
    \ ADC2_SQR1 (read-write) Reset:0x00000000
    : ADC2_SQR1_L ( %bbbb -- x addr ) 20 lshift ADC2_SQR1 ; \ ADC2_SQR1_L, Regular channel sequence  length
    : ADC2_SQR1_SQ16 ( %bbbbb -- x addr ) 15 lshift ADC2_SQR1 ; \ ADC2_SQR1_SQ16, 16th conversion in regular  sequence
    : ADC2_SQR1_SQ15 ( %bbbbb -- x addr ) 10 lshift ADC2_SQR1 ; \ ADC2_SQR1_SQ15, 15th conversion in regular  sequence
    : ADC2_SQR1_SQ14 ( %bbbbb -- x addr ) 5 lshift ADC2_SQR1 ; \ ADC2_SQR1_SQ14, 14th conversion in regular  sequence
    : ADC2_SQR1_SQ13 ( %bbbbb -- x addr ) ADC2_SQR1 ; \ ADC2_SQR1_SQ13, 13th conversion in regular  sequence
  [then]

  [if]
    \ ADC2_SQR2 (read-write) Reset:0x00000000
    : ADC2_SQR2_SQ12 ( %bbbbb -- x addr ) 25 lshift ADC2_SQR2 ; \ ADC2_SQR2_SQ12, 12th conversion in regular  sequence
    : ADC2_SQR2_SQ11 ( %bbbbb -- x addr ) 20 lshift ADC2_SQR2 ; \ ADC2_SQR2_SQ11, 11th conversion in regular  sequence
    : ADC2_SQR2_SQ10 ( %bbbbb -- x addr ) 15 lshift ADC2_SQR2 ; \ ADC2_SQR2_SQ10, 10th conversion in regular  sequence
    : ADC2_SQR2_SQ9 ( %bbbbb -- x addr ) 10 lshift ADC2_SQR2 ; \ ADC2_SQR2_SQ9, 9th conversion in regular  sequence
    : ADC2_SQR2_SQ8 ( %bbbbb -- x addr ) 5 lshift ADC2_SQR2 ; \ ADC2_SQR2_SQ8, 8th conversion in regular  sequence
    : ADC2_SQR2_SQ7 ( %bbbbb -- x addr ) ADC2_SQR2 ; \ ADC2_SQR2_SQ7, 7th conversion in regular  sequence
  [then]

  execute-defined? use-ADC2 [if]
    \ ADC2_SQR3 (read-write) Reset:0x00000000
    : ADC2_SQR3_SQ6 ( %bbbbb -- x addr ) 25 lshift ADC2_SQR3 ; \ ADC2_SQR3_SQ6, 6th conversion in regular  sequence
    : ADC2_SQR3_SQ5 ( %bbbbb -- x addr ) 20 lshift ADC2_SQR3 ; \ ADC2_SQR3_SQ5, 5th conversion in regular  sequence
    : ADC2_SQR3_SQ4 ( %bbbbb -- x addr ) 15 lshift ADC2_SQR3 ; \ ADC2_SQR3_SQ4, 4th conversion in regular  sequence
    : ADC2_SQR3_SQ3 ( %bbbbb -- x addr ) 10 lshift ADC2_SQR3 ; \ ADC2_SQR3_SQ3, 3rd conversion in regular  sequence
    : ADC2_SQR3_SQ2 ( %bbbbb -- x addr ) 5 lshift ADC2_SQR3 ; \ ADC2_SQR3_SQ2, 2nd conversion in regular  sequence
    : ADC2_SQR3_SQ1 ( %bbbbb -- x addr ) ADC2_SQR3 ; \ ADC2_SQR3_SQ1, 1st conversion in regular  sequence
  [then]

  [if]
    \ ADC2_JSQR (read-write) Reset:0x00000000
    : ADC2_JSQR_JL ( %bb -- x addr ) 20 lshift ADC2_JSQR ; \ ADC2_JSQR_JL, Injected sequence length
    : ADC2_JSQR_JSQ4 ( %bbbbb -- x addr ) 15 lshift ADC2_JSQR ; \ ADC2_JSQR_JSQ4, 4th conversion in injected  sequence
    : ADC2_JSQR_JSQ3 ( %bbbbb -- x addr ) 10 lshift ADC2_JSQR ; \ ADC2_JSQR_JSQ3, 3rd conversion in injected  sequence
    : ADC2_JSQR_JSQ2 ( %bbbbb -- x addr ) 5 lshift ADC2_JSQR ; \ ADC2_JSQR_JSQ2, 2nd conversion in injected  sequence
    : ADC2_JSQR_JSQ1 ( %bbbbb -- x addr ) ADC2_JSQR ; \ ADC2_JSQR_JSQ1, 1st conversion in injected  sequence
  [then]

  execute-defined? use-ADC2 [if]
    \ ADC2_JDR1 (read-only) Reset:0x00000000
    : ADC2_JDR1_JDATA? ( --  x ) ADC2_JDR1 @ ; \ ADC2_JDR1_JDATA, Injected data
  [then]

  [if]
    \ ADC2_JDR2 (read-only) Reset:0x00000000
    : ADC2_JDR2_JDATA? ( --  x ) ADC2_JDR2 @ ; \ ADC2_JDR2_JDATA, Injected data
  [then]

  execute-defined? use-ADC2 [if]
    \ ADC2_JDR3 (read-only) Reset:0x00000000
    : ADC2_JDR3_JDATA? ( --  x ) ADC2_JDR3 @ ; \ ADC2_JDR3_JDATA, Injected data
  [then]

  [if]
    \ ADC2_JDR4 (read-only) Reset:0x00000000
    : ADC2_JDR4_JDATA? ( --  x ) ADC2_JDR4 @ ; \ ADC2_JDR4_JDATA, Injected data
  [then]

  execute-defined? use-ADC2 [if]
    \ ADC2_DR (read-only) Reset:0x00000000
    : ADC2_DR_DATA? ( --  x ) ADC2_DR @ ; \ ADC2_DR_DATA, Regular data
  [then]

  [if]
    \ ADC3_SR (read-write) Reset:0x00000000
    : ADC3_SR_OVR ( -- x addr ) 5 bit ADC3_SR ; \ ADC3_SR_OVR, Overrun
    : ADC3_SR_STRT ( -- x addr ) 4 bit ADC3_SR ; \ ADC3_SR_STRT, Regular channel start flag
    : ADC3_SR_JSTRT ( -- x addr ) 3 bit ADC3_SR ; \ ADC3_SR_JSTRT, Injected channel start  flag
    : ADC3_SR_JEOC ( -- x addr ) 2 bit ADC3_SR ; \ ADC3_SR_JEOC, Injected channel end of  conversion
    : ADC3_SR_EOC ( -- x addr ) 1 bit ADC3_SR ; \ ADC3_SR_EOC, Regular channel end of  conversion
    : ADC3_SR_AWD ( -- x addr ) 0 bit ADC3_SR ; \ ADC3_SR_AWD, Analog watchdog flag
  [then]

  execute-defined? use-ADC3 [if]
    \ ADC3_CR1 (read-write) Reset:0x00000000
    : ADC3_CR1_OVRIE ( -- x addr ) 26 bit ADC3_CR1 ; \ ADC3_CR1_OVRIE, Overrun interrupt enable
    : ADC3_CR1_RES ( %bb -- x addr ) 24 lshift ADC3_CR1 ; \ ADC3_CR1_RES, Resolution
    : ADC3_CR1_AWDEN ( -- x addr ) 23 bit ADC3_CR1 ; \ ADC3_CR1_AWDEN, Analog watchdog enable on regular  channels
    : ADC3_CR1_JAWDEN ( -- x addr ) 22 bit ADC3_CR1 ; \ ADC3_CR1_JAWDEN, Analog watchdog enable on injected  channels
    : ADC3_CR1_DISCNUM ( %bbb -- x addr ) 13 lshift ADC3_CR1 ; \ ADC3_CR1_DISCNUM, Discontinuous mode channel  count
    : ADC3_CR1_JDISCEN ( -- x addr ) 12 bit ADC3_CR1 ; \ ADC3_CR1_JDISCEN, Discontinuous mode on injected  channels
    : ADC3_CR1_DISCEN ( -- x addr ) 11 bit ADC3_CR1 ; \ ADC3_CR1_DISCEN, Discontinuous mode on regular  channels
    : ADC3_CR1_JAUTO ( -- x addr ) 10 bit ADC3_CR1 ; \ ADC3_CR1_JAUTO, Automatic injected group  conversion
    : ADC3_CR1_AWDSGL ( -- x addr ) 9 bit ADC3_CR1 ; \ ADC3_CR1_AWDSGL, Enable the watchdog on a single channel  in scan mode
    : ADC3_CR1_SCAN ( -- x addr ) 8 bit ADC3_CR1 ; \ ADC3_CR1_SCAN, Scan mode
    : ADC3_CR1_JEOCIE ( -- x addr ) 7 bit ADC3_CR1 ; \ ADC3_CR1_JEOCIE, Interrupt enable for injected  channels
    : ADC3_CR1_AWDIE ( -- x addr ) 6 bit ADC3_CR1 ; \ ADC3_CR1_AWDIE, Analog watchdog interrupt  enable
    : ADC3_CR1_EOCIE ( -- x addr ) 5 bit ADC3_CR1 ; \ ADC3_CR1_EOCIE, Interrupt enable for EOC
    : ADC3_CR1_AWDCH ( %bbbbb -- x addr ) ADC3_CR1 ; \ ADC3_CR1_AWDCH, Analog watchdog channel select  bits
  [then]

  [if]
    \ ADC3_CR2 (read-write) Reset:0x00000000
    : ADC3_CR2_SWSTART ( -- x addr ) 30 bit ADC3_CR2 ; \ ADC3_CR2_SWSTART, Start conversion of regular  channels
    : ADC3_CR2_EXTEN ( %bb -- x addr ) 28 lshift ADC3_CR2 ; \ ADC3_CR2_EXTEN, External trigger enable for regular  channels
    : ADC3_CR2_EXTSEL ( %bbbb -- x addr ) 24 lshift ADC3_CR2 ; \ ADC3_CR2_EXTSEL, External event select for regular  group
    : ADC3_CR2_JSWSTART ( -- x addr ) 22 bit ADC3_CR2 ; \ ADC3_CR2_JSWSTART, Start conversion of injected  channels
    : ADC3_CR2_JEXTEN ( %bb -- x addr ) 20 lshift ADC3_CR2 ; \ ADC3_CR2_JEXTEN, External trigger enable for injected  channels
    : ADC3_CR2_JEXTSEL ( %bbbb -- x addr ) 16 lshift ADC3_CR2 ; \ ADC3_CR2_JEXTSEL, External event select for injected  group
    : ADC3_CR2_ALIGN ( -- x addr ) 11 bit ADC3_CR2 ; \ ADC3_CR2_ALIGN, Data alignment
    : ADC3_CR2_EOCS ( -- x addr ) 10 bit ADC3_CR2 ; \ ADC3_CR2_EOCS, End of conversion  selection
    : ADC3_CR2_DDS ( -- x addr ) 9 bit ADC3_CR2 ; \ ADC3_CR2_DDS, DMA disable selection for single ADC  mode
    : ADC3_CR2_DMA ( -- x addr ) 8 bit ADC3_CR2 ; \ ADC3_CR2_DMA, Direct memory access mode for single  ADC mode
    : ADC3_CR2_CONT ( -- x addr ) 1 bit ADC3_CR2 ; \ ADC3_CR2_CONT, Continuous conversion
    : ADC3_CR2_ADON ( -- x addr ) 0 bit ADC3_CR2 ; \ ADC3_CR2_ADON, A/D Converter ON / OFF
  [then]

  execute-defined? use-ADC3 [if]
    \ ADC3_SMPR1 (read-write) Reset:0x00000000
    : ADC3_SMPR1_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC3_SMPR1 ; \ ADC3_SMPR1_SMPx_x, Sample time bits
  [then]

  [if]
    \ ADC3_SMPR2 (read-write) Reset:0x00000000
    : ADC3_SMPR2_SMPx_x ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) ADC3_SMPR2 ; \ ADC3_SMPR2_SMPx_x, Sample time bits
  [then]

  execute-defined? use-ADC3 [if]
    \ ADC3_JOFR1 (read-write) Reset:0x00000000
    : ADC3_JOFR1_JOFFSET1 ( %bbbbbbbbbbb -- x addr ) ADC3_JOFR1 ; \ ADC3_JOFR1_JOFFSET1, Data offset for injected channel  x
  [then]

  [if]
    \ ADC3_JOFR2 (read-write) Reset:0x00000000
    : ADC3_JOFR2_JOFFSET2 ( %bbbbbbbbbbb -- x addr ) ADC3_JOFR2 ; \ ADC3_JOFR2_JOFFSET2, Data offset for injected channel  x
  [then]

  execute-defined? use-ADC3 [if]
    \ ADC3_JOFR3 (read-write) Reset:0x00000000
    : ADC3_JOFR3_JOFFSET3 ( %bbbbbbbbbbb -- x addr ) ADC3_JOFR3 ; \ ADC3_JOFR3_JOFFSET3, Data offset for injected channel  x
  [then]

  [if]
    \ ADC3_JOFR4 (read-write) Reset:0x00000000
    : ADC3_JOFR4_JOFFSET4 ( %bbbbbbbbbbb -- x addr ) ADC3_JOFR4 ; \ ADC3_JOFR4_JOFFSET4, Data offset for injected channel  x
  [then]

  execute-defined? use-ADC3 [if]
    \ ADC3_HTR (read-write) Reset:0x00000FFF
    : ADC3_HTR_HT ( %bbbbbbbbbbb -- x addr ) ADC3_HTR ; \ ADC3_HTR_HT, Analog watchdog higher  threshold
  [then]

  [if]
    \ ADC3_LTR (read-write) Reset:0x00000000
    : ADC3_LTR_LT ( %bbbbbbbbbbb -- x addr ) ADC3_LTR ; \ ADC3_LTR_LT, Analog watchdog lower  threshold
  [then]

  execute-defined? use-ADC3 [if]
    \ ADC3_SQR1 (read-write) Reset:0x00000000
    : ADC3_SQR1_L ( %bbbb -- x addr ) 20 lshift ADC3_SQR1 ; \ ADC3_SQR1_L, Regular channel sequence  length
    : ADC3_SQR1_SQ16 ( %bbbbb -- x addr ) 15 lshift ADC3_SQR1 ; \ ADC3_SQR1_SQ16, 16th conversion in regular  sequence
    : ADC3_SQR1_SQ15 ( %bbbbb -- x addr ) 10 lshift ADC3_SQR1 ; \ ADC3_SQR1_SQ15, 15th conversion in regular  sequence
    : ADC3_SQR1_SQ14 ( %bbbbb -- x addr ) 5 lshift ADC3_SQR1 ; \ ADC3_SQR1_SQ14, 14th conversion in regular  sequence
    : ADC3_SQR1_SQ13 ( %bbbbb -- x addr ) ADC3_SQR1 ; \ ADC3_SQR1_SQ13, 13th conversion in regular  sequence
  [then]

  [if]
    \ ADC3_SQR2 (read-write) Reset:0x00000000
    : ADC3_SQR2_SQ12 ( %bbbbb -- x addr ) 25 lshift ADC3_SQR2 ; \ ADC3_SQR2_SQ12, 12th conversion in regular  sequence
    : ADC3_SQR2_SQ11 ( %bbbbb -- x addr ) 20 lshift ADC3_SQR2 ; \ ADC3_SQR2_SQ11, 11th conversion in regular  sequence
    : ADC3_SQR2_SQ10 ( %bbbbb -- x addr ) 15 lshift ADC3_SQR2 ; \ ADC3_SQR2_SQ10, 10th conversion in regular  sequence
    : ADC3_SQR2_SQ9 ( %bbbbb -- x addr ) 10 lshift ADC3_SQR2 ; \ ADC3_SQR2_SQ9, 9th conversion in regular  sequence
    : ADC3_SQR2_SQ8 ( %bbbbb -- x addr ) 5 lshift ADC3_SQR2 ; \ ADC3_SQR2_SQ8, 8th conversion in regular  sequence
    : ADC3_SQR2_SQ7 ( %bbbbb -- x addr ) ADC3_SQR2 ; \ ADC3_SQR2_SQ7, 7th conversion in regular  sequence
  [then]

  execute-defined? use-ADC3 [if]
    \ ADC3_SQR3 (read-write) Reset:0x00000000
    : ADC3_SQR3_SQ6 ( %bbbbb -- x addr ) 25 lshift ADC3_SQR3 ; \ ADC3_SQR3_SQ6, 6th conversion in regular  sequence
    : ADC3_SQR3_SQ5 ( %bbbbb -- x addr ) 20 lshift ADC3_SQR3 ; \ ADC3_SQR3_SQ5, 5th conversion in regular  sequence
    : ADC3_SQR3_SQ4 ( %bbbbb -- x addr ) 15 lshift ADC3_SQR3 ; \ ADC3_SQR3_SQ4, 4th conversion in regular  sequence
    : ADC3_SQR3_SQ3 ( %bbbbb -- x addr ) 10 lshift ADC3_SQR3 ; \ ADC3_SQR3_SQ3, 3rd conversion in regular  sequence
    : ADC3_SQR3_SQ2 ( %bbbbb -- x addr ) 5 lshift ADC3_SQR3 ; \ ADC3_SQR3_SQ2, 2nd conversion in regular  sequence
    : ADC3_SQR3_SQ1 ( %bbbbb -- x addr ) ADC3_SQR3 ; \ ADC3_SQR3_SQ1, 1st conversion in regular  sequence
  [then]

  [if]
    \ ADC3_JSQR (read-write) Reset:0x00000000
    : ADC3_JSQR_JL ( %bb -- x addr ) 20 lshift ADC3_JSQR ; \ ADC3_JSQR_JL, Injected sequence length
    : ADC3_JSQR_JSQ4 ( %bbbbb -- x addr ) 15 lshift ADC3_JSQR ; \ ADC3_JSQR_JSQ4, 4th conversion in injected  sequence
    : ADC3_JSQR_JSQ3 ( %bbbbb -- x addr ) 10 lshift ADC3_JSQR ; \ ADC3_JSQR_JSQ3, 3rd conversion in injected  sequence
    : ADC3_JSQR_JSQ2 ( %bbbbb -- x addr ) 5 lshift ADC3_JSQR ; \ ADC3_JSQR_JSQ2, 2nd conversion in injected  sequence
    : ADC3_JSQR_JSQ1 ( %bbbbb -- x addr ) ADC3_JSQR ; \ ADC3_JSQR_JSQ1, 1st conversion in injected  sequence
  [then]

  execute-defined? use-ADC3 [if]
    \ ADC3_JDR1 (read-only) Reset:0x00000000
    : ADC3_JDR1_JDATA? ( --  x ) ADC3_JDR1 @ ; \ ADC3_JDR1_JDATA, Injected data
  [then]

  [if]
    \ ADC3_JDR2 (read-only) Reset:0x00000000
    : ADC3_JDR2_JDATA? ( --  x ) ADC3_JDR2 @ ; \ ADC3_JDR2_JDATA, Injected data
  [then]

  execute-defined? use-ADC3 [if]
    \ ADC3_JDR3 (read-only) Reset:0x00000000
    : ADC3_JDR3_JDATA? ( --  x ) ADC3_JDR3 @ ; \ ADC3_JDR3_JDATA, Injected data
  [then]

  [if]
    \ ADC3_JDR4 (read-only) Reset:0x00000000
    : ADC3_JDR4_JDATA? ( --  x ) ADC3_JDR4 @ ; \ ADC3_JDR4_JDATA, Injected data
  [then]

  execute-defined? use-ADC3 [if]
    \ ADC3_DR (read-only) Reset:0x00000000
    : ADC3_DR_DATA? ( --  x ) ADC3_DR @ ; \ ADC3_DR_DATA, Regular data
  [then]

  [if]
    \ USART6_SR (multiple-access)  Reset:0x00C00000
    : USART6_SR_CTS? ( -- 1|0 ) 9 bit USART6_SR bit@ ; \ USART6_SR_CTS, CTS flag
    : USART6_SR_LBD? ( -- 1|0 ) 8 bit USART6_SR bit@ ; \ USART6_SR_LBD, LIN break detection flag
    : USART6_SR_TXE ( -- x addr ) 7 bit USART6_SR ; \ USART6_SR_TXE, Transmit data register  empty
    : USART6_SR_TC ( -- x addr ) 6 bit USART6_SR ; \ USART6_SR_TC, Transmission complete
    : USART6_SR_RXNE ( -- x addr ) 5 bit USART6_SR ; \ USART6_SR_RXNE, Read data register not  empty
    : USART6_SR_IDLE ( -- x addr ) 4 bit USART6_SR ; \ USART6_SR_IDLE, IDLE line detected
    : USART6_SR_ORE ( -- x addr ) 3 bit USART6_SR ; \ USART6_SR_ORE, Overrun error
    : USART6_SR_NF? ( -- 1|0 ) 2 bit USART6_SR bit@ ; \ USART6_SR_NF, Noise detected flag
    : USART6_SR_FE ( -- x addr ) 1 bit USART6_SR ; \ USART6_SR_FE, Framing error
    : USART6_SR_PE ( -- x addr ) 0 bit USART6_SR ; \ USART6_SR_PE, Parity error
  [then]

  execute-defined? use-USART6 [if]
    \ USART6_DR (read-write) Reset:0x00000000
    : USART6_DR_DR ( %bbbbbbbbb -- x addr ) USART6_DR ; \ USART6_DR_DR, Data value
  [then]

  [if]
    \ USART6_BRR (read-write) Reset:0x0000
    : USART6_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift USART6_BRR ; \ USART6_BRR_DIV_Mantissa, mantissa of USARTDIV
    : USART6_BRR_DIV_Fraction ( %bbbb -- x addr ) USART6_BRR ; \ USART6_BRR_DIV_Fraction, fraction of USARTDIV
  [then]

  execute-defined? use-USART6 [if]
    \ USART6_CR1 (read-write) Reset:0x0000
    : USART6_CR1_OVER8 ( -- x addr ) 15 bit USART6_CR1 ; \ USART6_CR1_OVER8, Oversampling mode
    : USART6_CR1_UE ( -- x addr ) 13 bit USART6_CR1 ; \ USART6_CR1_UE, USART enable
    : USART6_CR1_M ( -- x addr ) 12 bit USART6_CR1 ; \ USART6_CR1_M, Word length
    : USART6_CR1_WAKE ( -- x addr ) 11 bit USART6_CR1 ; \ USART6_CR1_WAKE, Wakeup method
    : USART6_CR1_PCE ( -- x addr ) 10 bit USART6_CR1 ; \ USART6_CR1_PCE, Parity control enable
    : USART6_CR1_PS ( -- x addr ) 9 bit USART6_CR1 ; \ USART6_CR1_PS, Parity selection
    : USART6_CR1_PEIE ( -- x addr ) 8 bit USART6_CR1 ; \ USART6_CR1_PEIE, PE interrupt enable
    : USART6_CR1_TXEIE ( -- x addr ) 7 bit USART6_CR1 ; \ USART6_CR1_TXEIE, TXE interrupt enable
    : USART6_CR1_TCIE ( -- x addr ) 6 bit USART6_CR1 ; \ USART6_CR1_TCIE, Transmission complete interrupt  enable
    : USART6_CR1_RXNEIE ( -- x addr ) 5 bit USART6_CR1 ; \ USART6_CR1_RXNEIE, RXNE interrupt enable
    : USART6_CR1_IDLEIE ( -- x addr ) 4 bit USART6_CR1 ; \ USART6_CR1_IDLEIE, IDLE interrupt enable
    : USART6_CR1_TE ( -- x addr ) 3 bit USART6_CR1 ; \ USART6_CR1_TE, Transmitter enable
    : USART6_CR1_RE ( -- x addr ) 2 bit USART6_CR1 ; \ USART6_CR1_RE, Receiver enable
    : USART6_CR1_RWU ( -- x addr ) 1 bit USART6_CR1 ; \ USART6_CR1_RWU, Receiver wakeup
    : USART6_CR1_SBK ( -- x addr ) 0 bit USART6_CR1 ; \ USART6_CR1_SBK, Send break
  [then]

  [if]
    \ USART6_CR2 (read-write) Reset:0x0000
    : USART6_CR2_LINEN ( -- x addr ) 14 bit USART6_CR2 ; \ USART6_CR2_LINEN, LIN mode enable
    : USART6_CR2_STOP ( %bb -- x addr ) 12 lshift USART6_CR2 ; \ USART6_CR2_STOP, STOP bits
    : USART6_CR2_CLKEN ( -- x addr ) 11 bit USART6_CR2 ; \ USART6_CR2_CLKEN, Clock enable
    : USART6_CR2_CPOL ( -- x addr ) 10 bit USART6_CR2 ; \ USART6_CR2_CPOL, Clock polarity
    : USART6_CR2_CPHA ( -- x addr ) 9 bit USART6_CR2 ; \ USART6_CR2_CPHA, Clock phase
    : USART6_CR2_LBCL ( -- x addr ) 8 bit USART6_CR2 ; \ USART6_CR2_LBCL, Last bit clock pulse
    : USART6_CR2_LBDIE ( -- x addr ) 6 bit USART6_CR2 ; \ USART6_CR2_LBDIE, LIN break detection interrupt  enable
    : USART6_CR2_LBDL ( -- x addr ) 5 bit USART6_CR2 ; \ USART6_CR2_LBDL, lin break detection length
    : USART6_CR2_ADD ( %bbbb -- x addr ) USART6_CR2 ; \ USART6_CR2_ADD, Address of the USART node
  [then]

  execute-defined? use-USART6 [if]
    \ USART6_CR3 (read-write) Reset:0x0000
    : USART6_CR3_ONEBIT ( -- x addr ) 11 bit USART6_CR3 ; \ USART6_CR3_ONEBIT, One sample bit method  enable
    : USART6_CR3_CTSIE ( -- x addr ) 10 bit USART6_CR3 ; \ USART6_CR3_CTSIE, CTS interrupt enable
    : USART6_CR3_CTSE ( -- x addr ) 9 bit USART6_CR3 ; \ USART6_CR3_CTSE, CTS enable
    : USART6_CR3_RTSE ( -- x addr ) 8 bit USART6_CR3 ; \ USART6_CR3_RTSE, RTS enable
    : USART6_CR3_DMAT ( -- x addr ) 7 bit USART6_CR3 ; \ USART6_CR3_DMAT, DMA enable transmitter
    : USART6_CR3_DMAR ( -- x addr ) 6 bit USART6_CR3 ; \ USART6_CR3_DMAR, DMA enable receiver
    : USART6_CR3_SCEN ( -- x addr ) 5 bit USART6_CR3 ; \ USART6_CR3_SCEN, Smartcard mode enable
    : USART6_CR3_NACK ( -- x addr ) 4 bit USART6_CR3 ; \ USART6_CR3_NACK, Smartcard NACK enable
    : USART6_CR3_HDSEL ( -- x addr ) 3 bit USART6_CR3 ; \ USART6_CR3_HDSEL, Half-duplex selection
    : USART6_CR3_IRLP ( -- x addr ) 2 bit USART6_CR3 ; \ USART6_CR3_IRLP, IrDA low-power
    : USART6_CR3_IREN ( -- x addr ) 1 bit USART6_CR3 ; \ USART6_CR3_IREN, IrDA mode enable
    : USART6_CR3_EIE ( -- x addr ) 0 bit USART6_CR3 ; \ USART6_CR3_EIE, Error interrupt enable
  [then]

  [if]
    \ USART6_GTPR (read-write) Reset:0x0000
    : USART6_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift USART6_GTPR ; \ USART6_GTPR_GT, Guard time value
    : USART6_GTPR_PSC ( %bbbbbbbb -- x addr ) USART6_GTPR ; \ USART6_GTPR_PSC, Prescaler value
  [then]

  execute-defined? use-USART1 [if]
    \ USART1_SR (multiple-access)  Reset:0x00C00000
    : USART1_SR_CTS? ( -- 1|0 ) 9 bit USART1_SR bit@ ; \ USART1_SR_CTS, CTS flag
    : USART1_SR_LBD? ( -- 1|0 ) 8 bit USART1_SR bit@ ; \ USART1_SR_LBD, LIN break detection flag
    : USART1_SR_TXE ( -- x addr ) 7 bit USART1_SR ; \ USART1_SR_TXE, Transmit data register  empty
    : USART1_SR_TC ( -- x addr ) 6 bit USART1_SR ; \ USART1_SR_TC, Transmission complete
    : USART1_SR_RXNE ( -- x addr ) 5 bit USART1_SR ; \ USART1_SR_RXNE, Read data register not  empty
    : USART1_SR_IDLE ( -- x addr ) 4 bit USART1_SR ; \ USART1_SR_IDLE, IDLE line detected
    : USART1_SR_ORE ( -- x addr ) 3 bit USART1_SR ; \ USART1_SR_ORE, Overrun error
    : USART1_SR_NF? ( -- 1|0 ) 2 bit USART1_SR bit@ ; \ USART1_SR_NF, Noise detected flag
    : USART1_SR_FE ( -- x addr ) 1 bit USART1_SR ; \ USART1_SR_FE, Framing error
    : USART1_SR_PE ( -- x addr ) 0 bit USART1_SR ; \ USART1_SR_PE, Parity error
  [then]

  [if]
    \ USART1_DR (read-write) Reset:0x00000000
    : USART1_DR_DR ( %bbbbbbbbb -- x addr ) USART1_DR ; \ USART1_DR_DR, Data value
  [then]

  execute-defined? use-USART1 [if]
    \ USART1_BRR (read-write) Reset:0x0000
    : USART1_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift USART1_BRR ; \ USART1_BRR_DIV_Mantissa, mantissa of USARTDIV
    : USART1_BRR_DIV_Fraction ( %bbbb -- x addr ) USART1_BRR ; \ USART1_BRR_DIV_Fraction, fraction of USARTDIV
  [then]

  [if]
    \ USART1_CR1 (read-write) Reset:0x0000
    : USART1_CR1_OVER8 ( -- x addr ) 15 bit USART1_CR1 ; \ USART1_CR1_OVER8, Oversampling mode
    : USART1_CR1_UE ( -- x addr ) 13 bit USART1_CR1 ; \ USART1_CR1_UE, USART enable
    : USART1_CR1_M ( -- x addr ) 12 bit USART1_CR1 ; \ USART1_CR1_M, Word length
    : USART1_CR1_WAKE ( -- x addr ) 11 bit USART1_CR1 ; \ USART1_CR1_WAKE, Wakeup method
    : USART1_CR1_PCE ( -- x addr ) 10 bit USART1_CR1 ; \ USART1_CR1_PCE, Parity control enable
    : USART1_CR1_PS ( -- x addr ) 9 bit USART1_CR1 ; \ USART1_CR1_PS, Parity selection
    : USART1_CR1_PEIE ( -- x addr ) 8 bit USART1_CR1 ; \ USART1_CR1_PEIE, PE interrupt enable
    : USART1_CR1_TXEIE ( -- x addr ) 7 bit USART1_CR1 ; \ USART1_CR1_TXEIE, TXE interrupt enable
    : USART1_CR1_TCIE ( -- x addr ) 6 bit USART1_CR1 ; \ USART1_CR1_TCIE, Transmission complete interrupt  enable
    : USART1_CR1_RXNEIE ( -- x addr ) 5 bit USART1_CR1 ; \ USART1_CR1_RXNEIE, RXNE interrupt enable
    : USART1_CR1_IDLEIE ( -- x addr ) 4 bit USART1_CR1 ; \ USART1_CR1_IDLEIE, IDLE interrupt enable
    : USART1_CR1_TE ( -- x addr ) 3 bit USART1_CR1 ; \ USART1_CR1_TE, Transmitter enable
    : USART1_CR1_RE ( -- x addr ) 2 bit USART1_CR1 ; \ USART1_CR1_RE, Receiver enable
    : USART1_CR1_RWU ( -- x addr ) 1 bit USART1_CR1 ; \ USART1_CR1_RWU, Receiver wakeup
    : USART1_CR1_SBK ( -- x addr ) 0 bit USART1_CR1 ; \ USART1_CR1_SBK, Send break
  [then]

  execute-defined? use-USART1 [if]
    \ USART1_CR2 (read-write) Reset:0x0000
    : USART1_CR2_LINEN ( -- x addr ) 14 bit USART1_CR2 ; \ USART1_CR2_LINEN, LIN mode enable
    : USART1_CR2_STOP ( %bb -- x addr ) 12 lshift USART1_CR2 ; \ USART1_CR2_STOP, STOP bits
    : USART1_CR2_CLKEN ( -- x addr ) 11 bit USART1_CR2 ; \ USART1_CR2_CLKEN, Clock enable
    : USART1_CR2_CPOL ( -- x addr ) 10 bit USART1_CR2 ; \ USART1_CR2_CPOL, Clock polarity
    : USART1_CR2_CPHA ( -- x addr ) 9 bit USART1_CR2 ; \ USART1_CR2_CPHA, Clock phase
    : USART1_CR2_LBCL ( -- x addr ) 8 bit USART1_CR2 ; \ USART1_CR2_LBCL, Last bit clock pulse
    : USART1_CR2_LBDIE ( -- x addr ) 6 bit USART1_CR2 ; \ USART1_CR2_LBDIE, LIN break detection interrupt  enable
    : USART1_CR2_LBDL ( -- x addr ) 5 bit USART1_CR2 ; \ USART1_CR2_LBDL, lin break detection length
    : USART1_CR2_ADD ( %bbbb -- x addr ) USART1_CR2 ; \ USART1_CR2_ADD, Address of the USART node
  [then]

  [if]
    \ USART1_CR3 (read-write) Reset:0x0000
    : USART1_CR3_ONEBIT ( -- x addr ) 11 bit USART1_CR3 ; \ USART1_CR3_ONEBIT, One sample bit method  enable
    : USART1_CR3_CTSIE ( -- x addr ) 10 bit USART1_CR3 ; \ USART1_CR3_CTSIE, CTS interrupt enable
    : USART1_CR3_CTSE ( -- x addr ) 9 bit USART1_CR3 ; \ USART1_CR3_CTSE, CTS enable
    : USART1_CR3_RTSE ( -- x addr ) 8 bit USART1_CR3 ; \ USART1_CR3_RTSE, RTS enable
    : USART1_CR3_DMAT ( -- x addr ) 7 bit USART1_CR3 ; \ USART1_CR3_DMAT, DMA enable transmitter
    : USART1_CR3_DMAR ( -- x addr ) 6 bit USART1_CR3 ; \ USART1_CR3_DMAR, DMA enable receiver
    : USART1_CR3_SCEN ( -- x addr ) 5 bit USART1_CR3 ; \ USART1_CR3_SCEN, Smartcard mode enable
    : USART1_CR3_NACK ( -- x addr ) 4 bit USART1_CR3 ; \ USART1_CR3_NACK, Smartcard NACK enable
    : USART1_CR3_HDSEL ( -- x addr ) 3 bit USART1_CR3 ; \ USART1_CR3_HDSEL, Half-duplex selection
    : USART1_CR3_IRLP ( -- x addr ) 2 bit USART1_CR3 ; \ USART1_CR3_IRLP, IrDA low-power
    : USART1_CR3_IREN ( -- x addr ) 1 bit USART1_CR3 ; \ USART1_CR3_IREN, IrDA mode enable
    : USART1_CR3_EIE ( -- x addr ) 0 bit USART1_CR3 ; \ USART1_CR3_EIE, Error interrupt enable
  [then]

  execute-defined? use-USART1 [if]
    \ USART1_GTPR (read-write) Reset:0x0000
    : USART1_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift USART1_GTPR ; \ USART1_GTPR_GT, Guard time value
    : USART1_GTPR_PSC ( %bbbbbbbb -- x addr ) USART1_GTPR ; \ USART1_GTPR_PSC, Prescaler value
  [then]

  [if]
    \ USART2_SR (multiple-access)  Reset:0x00C00000
    : USART2_SR_CTS? ( -- 1|0 ) 9 bit USART2_SR bit@ ; \ USART2_SR_CTS, CTS flag
    : USART2_SR_LBD? ( -- 1|0 ) 8 bit USART2_SR bit@ ; \ USART2_SR_LBD, LIN break detection flag
    : USART2_SR_TXE ( -- x addr ) 7 bit USART2_SR ; \ USART2_SR_TXE, Transmit data register  empty
    : USART2_SR_TC ( -- x addr ) 6 bit USART2_SR ; \ USART2_SR_TC, Transmission complete
    : USART2_SR_RXNE ( -- x addr ) 5 bit USART2_SR ; \ USART2_SR_RXNE, Read data register not  empty
    : USART2_SR_IDLE ( -- x addr ) 4 bit USART2_SR ; \ USART2_SR_IDLE, IDLE line detected
    : USART2_SR_ORE ( -- x addr ) 3 bit USART2_SR ; \ USART2_SR_ORE, Overrun error
    : USART2_SR_NF? ( -- 1|0 ) 2 bit USART2_SR bit@ ; \ USART2_SR_NF, Noise detected flag
    : USART2_SR_FE ( -- x addr ) 1 bit USART2_SR ; \ USART2_SR_FE, Framing error
    : USART2_SR_PE ( -- x addr ) 0 bit USART2_SR ; \ USART2_SR_PE, Parity error
  [then]

  execute-defined? use-USART2 [if]
    \ USART2_DR (read-write) Reset:0x00000000
    : USART2_DR_DR ( %bbbbbbbbb -- x addr ) USART2_DR ; \ USART2_DR_DR, Data value
  [then]

  [if]
    \ USART2_BRR (read-write) Reset:0x0000
    : USART2_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift USART2_BRR ; \ USART2_BRR_DIV_Mantissa, mantissa of USARTDIV
    : USART2_BRR_DIV_Fraction ( %bbbb -- x addr ) USART2_BRR ; \ USART2_BRR_DIV_Fraction, fraction of USARTDIV
  [then]

  execute-defined? use-USART2 [if]
    \ USART2_CR1 (read-write) Reset:0x0000
    : USART2_CR1_OVER8 ( -- x addr ) 15 bit USART2_CR1 ; \ USART2_CR1_OVER8, Oversampling mode
    : USART2_CR1_UE ( -- x addr ) 13 bit USART2_CR1 ; \ USART2_CR1_UE, USART enable
    : USART2_CR1_M ( -- x addr ) 12 bit USART2_CR1 ; \ USART2_CR1_M, Word length
    : USART2_CR1_WAKE ( -- x addr ) 11 bit USART2_CR1 ; \ USART2_CR1_WAKE, Wakeup method
    : USART2_CR1_PCE ( -- x addr ) 10 bit USART2_CR1 ; \ USART2_CR1_PCE, Parity control enable
    : USART2_CR1_PS ( -- x addr ) 9 bit USART2_CR1 ; \ USART2_CR1_PS, Parity selection
    : USART2_CR1_PEIE ( -- x addr ) 8 bit USART2_CR1 ; \ USART2_CR1_PEIE, PE interrupt enable
    : USART2_CR1_TXEIE ( -- x addr ) 7 bit USART2_CR1 ; \ USART2_CR1_TXEIE, TXE interrupt enable
    : USART2_CR1_TCIE ( -- x addr ) 6 bit USART2_CR1 ; \ USART2_CR1_TCIE, Transmission complete interrupt  enable
    : USART2_CR1_RXNEIE ( -- x addr ) 5 bit USART2_CR1 ; \ USART2_CR1_RXNEIE, RXNE interrupt enable
    : USART2_CR1_IDLEIE ( -- x addr ) 4 bit USART2_CR1 ; \ USART2_CR1_IDLEIE, IDLE interrupt enable
    : USART2_CR1_TE ( -- x addr ) 3 bit USART2_CR1 ; \ USART2_CR1_TE, Transmitter enable
    : USART2_CR1_RE ( -- x addr ) 2 bit USART2_CR1 ; \ USART2_CR1_RE, Receiver enable
    : USART2_CR1_RWU ( -- x addr ) 1 bit USART2_CR1 ; \ USART2_CR1_RWU, Receiver wakeup
    : USART2_CR1_SBK ( -- x addr ) 0 bit USART2_CR1 ; \ USART2_CR1_SBK, Send break
  [then]

  [if]
    \ USART2_CR2 (read-write) Reset:0x0000
    : USART2_CR2_LINEN ( -- x addr ) 14 bit USART2_CR2 ; \ USART2_CR2_LINEN, LIN mode enable
    : USART2_CR2_STOP ( %bb -- x addr ) 12 lshift USART2_CR2 ; \ USART2_CR2_STOP, STOP bits
    : USART2_CR2_CLKEN ( -- x addr ) 11 bit USART2_CR2 ; \ USART2_CR2_CLKEN, Clock enable
    : USART2_CR2_CPOL ( -- x addr ) 10 bit USART2_CR2 ; \ USART2_CR2_CPOL, Clock polarity
    : USART2_CR2_CPHA ( -- x addr ) 9 bit USART2_CR2 ; \ USART2_CR2_CPHA, Clock phase
    : USART2_CR2_LBCL ( -- x addr ) 8 bit USART2_CR2 ; \ USART2_CR2_LBCL, Last bit clock pulse
    : USART2_CR2_LBDIE ( -- x addr ) 6 bit USART2_CR2 ; \ USART2_CR2_LBDIE, LIN break detection interrupt  enable
    : USART2_CR2_LBDL ( -- x addr ) 5 bit USART2_CR2 ; \ USART2_CR2_LBDL, lin break detection length
    : USART2_CR2_ADD ( %bbbb -- x addr ) USART2_CR2 ; \ USART2_CR2_ADD, Address of the USART node
  [then]

  execute-defined? use-USART2 [if]
    \ USART2_CR3 (read-write) Reset:0x0000
    : USART2_CR3_ONEBIT ( -- x addr ) 11 bit USART2_CR3 ; \ USART2_CR3_ONEBIT, One sample bit method  enable
    : USART2_CR3_CTSIE ( -- x addr ) 10 bit USART2_CR3 ; \ USART2_CR3_CTSIE, CTS interrupt enable
    : USART2_CR3_CTSE ( -- x addr ) 9 bit USART2_CR3 ; \ USART2_CR3_CTSE, CTS enable
    : USART2_CR3_RTSE ( -- x addr ) 8 bit USART2_CR3 ; \ USART2_CR3_RTSE, RTS enable
    : USART2_CR3_DMAT ( -- x addr ) 7 bit USART2_CR3 ; \ USART2_CR3_DMAT, DMA enable transmitter
    : USART2_CR3_DMAR ( -- x addr ) 6 bit USART2_CR3 ; \ USART2_CR3_DMAR, DMA enable receiver
    : USART2_CR3_SCEN ( -- x addr ) 5 bit USART2_CR3 ; \ USART2_CR3_SCEN, Smartcard mode enable
    : USART2_CR3_NACK ( -- x addr ) 4 bit USART2_CR3 ; \ USART2_CR3_NACK, Smartcard NACK enable
    : USART2_CR3_HDSEL ( -- x addr ) 3 bit USART2_CR3 ; \ USART2_CR3_HDSEL, Half-duplex selection
    : USART2_CR3_IRLP ( -- x addr ) 2 bit USART2_CR3 ; \ USART2_CR3_IRLP, IrDA low-power
    : USART2_CR3_IREN ( -- x addr ) 1 bit USART2_CR3 ; \ USART2_CR3_IREN, IrDA mode enable
    : USART2_CR3_EIE ( -- x addr ) 0 bit USART2_CR3 ; \ USART2_CR3_EIE, Error interrupt enable
  [then]

  [if]
    \ USART2_GTPR (read-write) Reset:0x0000
    : USART2_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift USART2_GTPR ; \ USART2_GTPR_GT, Guard time value
    : USART2_GTPR_PSC ( %bbbbbbbb -- x addr ) USART2_GTPR ; \ USART2_GTPR_PSC, Prescaler value
  [then]

  execute-defined? use-USART3 [if]
    \ USART3_SR (multiple-access)  Reset:0x00C00000
    : USART3_SR_CTS? ( -- 1|0 ) 9 bit USART3_SR bit@ ; \ USART3_SR_CTS, CTS flag
    : USART3_SR_LBD? ( -- 1|0 ) 8 bit USART3_SR bit@ ; \ USART3_SR_LBD, LIN break detection flag
    : USART3_SR_TXE ( -- x addr ) 7 bit USART3_SR ; \ USART3_SR_TXE, Transmit data register  empty
    : USART3_SR_TC ( -- x addr ) 6 bit USART3_SR ; \ USART3_SR_TC, Transmission complete
    : USART3_SR_RXNE ( -- x addr ) 5 bit USART3_SR ; \ USART3_SR_RXNE, Read data register not  empty
    : USART3_SR_IDLE ( -- x addr ) 4 bit USART3_SR ; \ USART3_SR_IDLE, IDLE line detected
    : USART3_SR_ORE ( -- x addr ) 3 bit USART3_SR ; \ USART3_SR_ORE, Overrun error
    : USART3_SR_NF? ( -- 1|0 ) 2 bit USART3_SR bit@ ; \ USART3_SR_NF, Noise detected flag
    : USART3_SR_FE ( -- x addr ) 1 bit USART3_SR ; \ USART3_SR_FE, Framing error
    : USART3_SR_PE ( -- x addr ) 0 bit USART3_SR ; \ USART3_SR_PE, Parity error
  [then]

  [if]
    \ USART3_DR (read-write) Reset:0x00000000
    : USART3_DR_DR ( %bbbbbbbbb -- x addr ) USART3_DR ; \ USART3_DR_DR, Data value
  [then]

  execute-defined? use-USART3 [if]
    \ USART3_BRR (read-write) Reset:0x0000
    : USART3_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift USART3_BRR ; \ USART3_BRR_DIV_Mantissa, mantissa of USARTDIV
    : USART3_BRR_DIV_Fraction ( %bbbb -- x addr ) USART3_BRR ; \ USART3_BRR_DIV_Fraction, fraction of USARTDIV
  [then]

  [if]
    \ USART3_CR1 (read-write) Reset:0x0000
    : USART3_CR1_OVER8 ( -- x addr ) 15 bit USART3_CR1 ; \ USART3_CR1_OVER8, Oversampling mode
    : USART3_CR1_UE ( -- x addr ) 13 bit USART3_CR1 ; \ USART3_CR1_UE, USART enable
    : USART3_CR1_M ( -- x addr ) 12 bit USART3_CR1 ; \ USART3_CR1_M, Word length
    : USART3_CR1_WAKE ( -- x addr ) 11 bit USART3_CR1 ; \ USART3_CR1_WAKE, Wakeup method
    : USART3_CR1_PCE ( -- x addr ) 10 bit USART3_CR1 ; \ USART3_CR1_PCE, Parity control enable
    : USART3_CR1_PS ( -- x addr ) 9 bit USART3_CR1 ; \ USART3_CR1_PS, Parity selection
    : USART3_CR1_PEIE ( -- x addr ) 8 bit USART3_CR1 ; \ USART3_CR1_PEIE, PE interrupt enable
    : USART3_CR1_TXEIE ( -- x addr ) 7 bit USART3_CR1 ; \ USART3_CR1_TXEIE, TXE interrupt enable
    : USART3_CR1_TCIE ( -- x addr ) 6 bit USART3_CR1 ; \ USART3_CR1_TCIE, Transmission complete interrupt  enable
    : USART3_CR1_RXNEIE ( -- x addr ) 5 bit USART3_CR1 ; \ USART3_CR1_RXNEIE, RXNE interrupt enable
    : USART3_CR1_IDLEIE ( -- x addr ) 4 bit USART3_CR1 ; \ USART3_CR1_IDLEIE, IDLE interrupt enable
    : USART3_CR1_TE ( -- x addr ) 3 bit USART3_CR1 ; \ USART3_CR1_TE, Transmitter enable
    : USART3_CR1_RE ( -- x addr ) 2 bit USART3_CR1 ; \ USART3_CR1_RE, Receiver enable
    : USART3_CR1_RWU ( -- x addr ) 1 bit USART3_CR1 ; \ USART3_CR1_RWU, Receiver wakeup
    : USART3_CR1_SBK ( -- x addr ) 0 bit USART3_CR1 ; \ USART3_CR1_SBK, Send break
  [then]

  execute-defined? use-USART3 [if]
    \ USART3_CR2 (read-write) Reset:0x0000
    : USART3_CR2_LINEN ( -- x addr ) 14 bit USART3_CR2 ; \ USART3_CR2_LINEN, LIN mode enable
    : USART3_CR2_STOP ( %bb -- x addr ) 12 lshift USART3_CR2 ; \ USART3_CR2_STOP, STOP bits
    : USART3_CR2_CLKEN ( -- x addr ) 11 bit USART3_CR2 ; \ USART3_CR2_CLKEN, Clock enable
    : USART3_CR2_CPOL ( -- x addr ) 10 bit USART3_CR2 ; \ USART3_CR2_CPOL, Clock polarity
    : USART3_CR2_CPHA ( -- x addr ) 9 bit USART3_CR2 ; \ USART3_CR2_CPHA, Clock phase
    : USART3_CR2_LBCL ( -- x addr ) 8 bit USART3_CR2 ; \ USART3_CR2_LBCL, Last bit clock pulse
    : USART3_CR2_LBDIE ( -- x addr ) 6 bit USART3_CR2 ; \ USART3_CR2_LBDIE, LIN break detection interrupt  enable
    : USART3_CR2_LBDL ( -- x addr ) 5 bit USART3_CR2 ; \ USART3_CR2_LBDL, lin break detection length
    : USART3_CR2_ADD ( %bbbb -- x addr ) USART3_CR2 ; \ USART3_CR2_ADD, Address of the USART node
  [then]

  [if]
    \ USART3_CR3 (read-write) Reset:0x0000
    : USART3_CR3_ONEBIT ( -- x addr ) 11 bit USART3_CR3 ; \ USART3_CR3_ONEBIT, One sample bit method  enable
    : USART3_CR3_CTSIE ( -- x addr ) 10 bit USART3_CR3 ; \ USART3_CR3_CTSIE, CTS interrupt enable
    : USART3_CR3_CTSE ( -- x addr ) 9 bit USART3_CR3 ; \ USART3_CR3_CTSE, CTS enable
    : USART3_CR3_RTSE ( -- x addr ) 8 bit USART3_CR3 ; \ USART3_CR3_RTSE, RTS enable
    : USART3_CR3_DMAT ( -- x addr ) 7 bit USART3_CR3 ; \ USART3_CR3_DMAT, DMA enable transmitter
    : USART3_CR3_DMAR ( -- x addr ) 6 bit USART3_CR3 ; \ USART3_CR3_DMAR, DMA enable receiver
    : USART3_CR3_SCEN ( -- x addr ) 5 bit USART3_CR3 ; \ USART3_CR3_SCEN, Smartcard mode enable
    : USART3_CR3_NACK ( -- x addr ) 4 bit USART3_CR3 ; \ USART3_CR3_NACK, Smartcard NACK enable
    : USART3_CR3_HDSEL ( -- x addr ) 3 bit USART3_CR3 ; \ USART3_CR3_HDSEL, Half-duplex selection
    : USART3_CR3_IRLP ( -- x addr ) 2 bit USART3_CR3 ; \ USART3_CR3_IRLP, IrDA low-power
    : USART3_CR3_IREN ( -- x addr ) 1 bit USART3_CR3 ; \ USART3_CR3_IREN, IrDA mode enable
    : USART3_CR3_EIE ( -- x addr ) 0 bit USART3_CR3 ; \ USART3_CR3_EIE, Error interrupt enable
  [then]

  execute-defined? use-USART3 [if]
    \ USART3_GTPR (read-write) Reset:0x0000
    : USART3_GTPR_GT ( %bbbbbbbb -- x addr ) 8 lshift USART3_GTPR ; \ USART3_GTPR_GT, Guard time value
    : USART3_GTPR_PSC ( %bbbbbbbb -- x addr ) USART3_GTPR ; \ USART3_GTPR_PSC, Prescaler value
  [then]

  [if]
    \ DAC_CR (read-write) Reset:0x00000000
    : DAC_CR_DMAUDRIE2 ( -- x addr ) 29 bit DAC_CR ; \ DAC_CR_DMAUDRIE2, DAC channel2 DMA underrun interrupt  enable
    : DAC_CR_DMAEN2 ( -- x addr ) 28 bit DAC_CR ; \ DAC_CR_DMAEN2, DAC channel2 DMA enable
    : DAC_CR_MAMP2 ( %bbbb -- x addr ) 24 lshift DAC_CR ; \ DAC_CR_MAMP2, DAC channel2 mask/amplitude  selector
    : DAC_CR_WAVE2 ( %bb -- x addr ) 22 lshift DAC_CR ; \ DAC_CR_WAVE2, DAC channel2 noise/triangle wave  generation enable
    : DAC_CR_TSEL2 ( %bbb -- x addr ) 19 lshift DAC_CR ; \ DAC_CR_TSEL2, DAC channel2 trigger  selection
    : DAC_CR_TEN2 ( -- x addr ) 18 bit DAC_CR ; \ DAC_CR_TEN2, DAC channel2 trigger  enable
    : DAC_CR_BOFF2 ( -- x addr ) 17 bit DAC_CR ; \ DAC_CR_BOFF2, DAC channel2 output buffer  disable
    : DAC_CR_EN2 ( -- x addr ) 16 bit DAC_CR ; \ DAC_CR_EN2, DAC channel2 enable
    : DAC_CR_DMAUDRIE1 ( -- x addr ) 13 bit DAC_CR ; \ DAC_CR_DMAUDRIE1, DAC channel1 DMA Underrun Interrupt  enable
    : DAC_CR_DMAEN1 ( -- x addr ) 12 bit DAC_CR ; \ DAC_CR_DMAEN1, DAC channel1 DMA enable
    : DAC_CR_MAMP1 ( %bbbb -- x addr ) 8 lshift DAC_CR ; \ DAC_CR_MAMP1, DAC channel1 mask/amplitude  selector
    : DAC_CR_WAVE1 ( %bb -- x addr ) 6 lshift DAC_CR ; \ DAC_CR_WAVE1, DAC channel1 noise/triangle wave  generation enable
    : DAC_CR_TSEL1 ( %bbb -- x addr ) 3 lshift DAC_CR ; \ DAC_CR_TSEL1, DAC channel1 trigger  selection
    : DAC_CR_TEN1 ( -- x addr ) 2 bit DAC_CR ; \ DAC_CR_TEN1, DAC channel1 trigger  enable
    : DAC_CR_BOFF1 ( -- x addr ) 1 bit DAC_CR ; \ DAC_CR_BOFF1, DAC channel1 output buffer  disable
    : DAC_CR_EN1 ( -- x addr ) 0 bit DAC_CR ; \ DAC_CR_EN1, DAC channel1 enable
  [then]

  execute-defined? use-DAC [if]
    \ DAC_SWTRIGR (write-only) Reset:0x00000000
    : DAC_SWTRIGR_SWTRIG2 ( -- x addr ) 1 bit DAC_SWTRIGR ; \ DAC_SWTRIGR_SWTRIG2, DAC channel2 software  trigger
    : DAC_SWTRIGR_SWTRIG1 ( -- x addr ) 0 bit DAC_SWTRIGR ; \ DAC_SWTRIGR_SWTRIG1, DAC channel1 software  trigger
  [then]

  [if]
    \ DAC_DHR12R1 (read-write) Reset:0x00000000
    : DAC_DHR12R1_DACC1DHR ( %bbbbbbbbbbb -- x addr ) DAC_DHR12R1 ; \ DAC_DHR12R1_DACC1DHR, DAC channel1 12-bit right-aligned  data
  [then]

  execute-defined? use-DAC [if]
    \ DAC_DHR12L1 (read-write) Reset:0x00000000
    : DAC_DHR12L1_DACC1DHR ( %bbbbbbbbbbb -- x addr ) 4 lshift DAC_DHR12L1 ; \ DAC_DHR12L1_DACC1DHR, DAC channel1 12-bit left-aligned  data
  [then]

  [if]
    \ DAC_DHR8R1 (read-write) Reset:0x00000000
    : DAC_DHR8R1_DACC1DHR ( %bbbbbbbb -- x addr ) DAC_DHR8R1 ; \ DAC_DHR8R1_DACC1DHR, DAC channel1 8-bit right-aligned  data
  [then]

  execute-defined? use-DAC [if]
    \ DAC_DHR12R2 (read-write) Reset:0x00000000
    : DAC_DHR12R2_DACC2DHR ( %bbbbbbbbbbb -- x addr ) DAC_DHR12R2 ; \ DAC_DHR12R2_DACC2DHR, DAC channel2 12-bit right-aligned  data
  [then]

  [if]
    \ DAC_DHR12L2 (read-write) Reset:0x00000000
    : DAC_DHR12L2_DACC2DHR ( %bbbbbbbbbbb -- x addr ) 4 lshift DAC_DHR12L2 ; \ DAC_DHR12L2_DACC2DHR, DAC channel2 12-bit left-aligned  data
  [then]

  execute-defined? use-DAC [if]
    \ DAC_DHR8R2 (read-write) Reset:0x00000000
    : DAC_DHR8R2_DACC2DHR ( %bbbbbbbb -- x addr ) DAC_DHR8R2 ; \ DAC_DHR8R2_DACC2DHR, DAC channel2 8-bit right-aligned  data
  [then]

  [if]
    \ DAC_DHR12RD (read-write) Reset:0x00000000
    : DAC_DHR12RD_DACC2DHR ( %bbbbbbbbbbb -- x addr ) 16 lshift DAC_DHR12RD ; \ DAC_DHR12RD_DACC2DHR, DAC channel2 12-bit right-aligned  data
    : DAC_DHR12RD_DACC1DHR ( %bbbbbbbbbbb -- x addr ) DAC_DHR12RD ; \ DAC_DHR12RD_DACC1DHR, DAC channel1 12-bit right-aligned  data
  [then]

  execute-defined? use-DAC [if]
    \ DAC_DHR12LD (read-write) Reset:0x00000000
    : DAC_DHR12LD_DACC2DHR ( %bbbbbbbbbbb -- x addr ) 20 lshift DAC_DHR12LD ; \ DAC_DHR12LD_DACC2DHR, DAC channel2 12-bit left-aligned  data
    : DAC_DHR12LD_DACC1DHR ( %bbbbbbbbbbb -- x addr ) 4 lshift DAC_DHR12LD ; \ DAC_DHR12LD_DACC1DHR, DAC channel1 12-bit left-aligned  data
  [then]

  [if]
    \ DAC_DHR8RD (read-write) Reset:0x00000000
    : DAC_DHR8RD_DACC2DHR ( %bbbbbbbb -- x addr ) 8 lshift DAC_DHR8RD ; \ DAC_DHR8RD_DACC2DHR, DAC channel2 8-bit right-aligned  data
    : DAC_DHR8RD_DACC1DHR ( %bbbbbbbb -- x addr ) DAC_DHR8RD ; \ DAC_DHR8RD_DACC1DHR, DAC channel1 8-bit right-aligned  data
  [then]

  execute-defined? use-DAC [if]
    \ DAC_DOR1 (read-only) Reset:0x00000000
    : DAC_DOR1_DACC1DOR? ( --  x ) DAC_DOR1 @ ; \ DAC_DOR1_DACC1DOR, DAC channel1 data output
  [then]

  [if]
    \ DAC_DOR2 (read-only) Reset:0x00000000
    : DAC_DOR2_DACC2DOR? ( --  x ) DAC_DOR2 @ ; \ DAC_DOR2_DACC2DOR, DAC channel2 data output
  [then]

  execute-defined? use-DAC [if]
    \ DAC_SR (read-write) Reset:0x00000000
    : DAC_SR_DMAUDR2 ( -- x addr ) 29 bit DAC_SR ; \ DAC_SR_DMAUDR2, DAC channel2 DMA underrun  flag
    : DAC_SR_DMAUDR1 ( -- x addr ) 13 bit DAC_SR ; \ DAC_SR_DMAUDR1, DAC channel1 DMA underrun  flag
  [then]

  [if]
    \ PWR_CR (read-write) Reset:0x00000000
    : PWR_CR_FPDS ( -- x addr ) 9 bit PWR_CR ; \ PWR_CR_FPDS, Flash power down in Stop  mode
    : PWR_CR_DBP ( -- x addr ) 8 bit PWR_CR ; \ PWR_CR_DBP, Disable backup domain write  protection
    : PWR_CR_PLS ( %bbb -- x addr ) 5 lshift PWR_CR ; \ PWR_CR_PLS, PVD level selection
    : PWR_CR_PVDE ( -- x addr ) 4 bit PWR_CR ; \ PWR_CR_PVDE, Power voltage detector  enable
    : PWR_CR_CSBF ( -- x addr ) 3 bit PWR_CR ; \ PWR_CR_CSBF, Clear standby flag
    : PWR_CR_CWUF ( -- x addr ) 2 bit PWR_CR ; \ PWR_CR_CWUF, Clear wakeup flag
    : PWR_CR_PDDS ( -- x addr ) 1 bit PWR_CR ; \ PWR_CR_PDDS, Power down deepsleep
    : PWR_CR_LPDS ( -- x addr ) 0 bit PWR_CR ; \ PWR_CR_LPDS, Low-power deep sleep
  [then]

  execute-defined? use-PWR [if]
    \ PWR_CSR (multiple-access)  Reset:0x00000000
    : PWR_CSR_WUF? ( -- 1|0 ) 0 bit PWR_CSR bit@ ; \ PWR_CSR_WUF, Wakeup flag
    : PWR_CSR_SBF? ( -- 1|0 ) 1 bit PWR_CSR bit@ ; \ PWR_CSR_SBF, Standby flag
    : PWR_CSR_PVDO ( -- x addr ) 2 bit PWR_CSR ; \ PWR_CSR_PVDO, PVD output
    : PWR_CSR_BRR ( -- x addr ) 3 bit PWR_CSR ; \ PWR_CSR_BRR, Backup regulator ready
    : PWR_CSR_EWUP ( -- x addr ) 8 bit PWR_CSR ; \ PWR_CSR_EWUP, Enable WKUP pin
    : PWR_CSR_BRE ( -- x addr ) 9 bit PWR_CSR ; \ PWR_CSR_BRE, Backup regulator enable
    : PWR_CSR_VOSRDY ( -- x addr ) 14 bit PWR_CSR ; \ PWR_CSR_VOSRDY, Regulator voltage scaling output  selection ready bit
  [then]

  [if]
    \ I2C3_CR1 (read-write) Reset:0x0000
    : I2C3_CR1_SWRST ( -- x addr ) 15 bit I2C3_CR1 ; \ I2C3_CR1_SWRST, Software reset
    : I2C3_CR1_ALERT ( -- x addr ) 13 bit I2C3_CR1 ; \ I2C3_CR1_ALERT, SMBus alert
    : I2C3_CR1_PEC ( -- x addr ) 12 bit I2C3_CR1 ; \ I2C3_CR1_PEC, Packet error checking
    : I2C3_CR1_POS ( -- x addr ) 11 bit I2C3_CR1 ; \ I2C3_CR1_POS, Acknowledge/PEC Position for data  reception
    : I2C3_CR1_ACK ( -- x addr ) 10 bit I2C3_CR1 ; \ I2C3_CR1_ACK, Acknowledge enable
    : I2C3_CR1_STOP ( -- x addr ) 9 bit I2C3_CR1 ; \ I2C3_CR1_STOP, Stop generation
    : I2C3_CR1_START ( -- x addr ) 8 bit I2C3_CR1 ; \ I2C3_CR1_START, Start generation
    : I2C3_CR1_NOSTRETCH ( -- x addr ) 7 bit I2C3_CR1 ; \ I2C3_CR1_NOSTRETCH, Clock stretching disable Slave  mode
    : I2C3_CR1_ENGC ( -- x addr ) 6 bit I2C3_CR1 ; \ I2C3_CR1_ENGC, General call enable
    : I2C3_CR1_ENPEC ( -- x addr ) 5 bit I2C3_CR1 ; \ I2C3_CR1_ENPEC, PEC enable
    : I2C3_CR1_ENARP ( -- x addr ) 4 bit I2C3_CR1 ; \ I2C3_CR1_ENARP, ARP enable
    : I2C3_CR1_SMBTYPE ( -- x addr ) 3 bit I2C3_CR1 ; \ I2C3_CR1_SMBTYPE, SMBus type
    : I2C3_CR1_SMBUS ( -- x addr ) 1 bit I2C3_CR1 ; \ I2C3_CR1_SMBUS, SMBus mode
    : I2C3_CR1_PE ( -- x addr ) 0 bit I2C3_CR1 ; \ I2C3_CR1_PE, Peripheral enable
  [then]

  execute-defined? use-I2C3 [if]
    \ I2C3_CR2 (read-write) Reset:0x0000
    : I2C3_CR2_LAST ( -- x addr ) 12 bit I2C3_CR2 ; \ I2C3_CR2_LAST, DMA last transfer
    : I2C3_CR2_DMAEN ( -- x addr ) 11 bit I2C3_CR2 ; \ I2C3_CR2_DMAEN, DMA requests enable
    : I2C3_CR2_ITBUFEN ( -- x addr ) 10 bit I2C3_CR2 ; \ I2C3_CR2_ITBUFEN, Buffer interrupt enable
    : I2C3_CR2_ITEVTEN ( -- x addr ) 9 bit I2C3_CR2 ; \ I2C3_CR2_ITEVTEN, Event interrupt enable
    : I2C3_CR2_ITERREN ( -- x addr ) 8 bit I2C3_CR2 ; \ I2C3_CR2_ITERREN, Error interrupt enable
    : I2C3_CR2_FREQ ( %bbbbbb -- x addr ) I2C3_CR2 ; \ I2C3_CR2_FREQ, Peripheral clock frequency
  [then]

  [if]
    \ I2C3_OAR1 (read-write) Reset:0x0000
    : I2C3_OAR1_ADDMODE ( -- x addr ) 15 bit I2C3_OAR1 ; \ I2C3_OAR1_ADDMODE, Addressing mode slave  mode
    : I2C3_OAR1_ADD10 ( %bb -- x addr ) 8 lshift I2C3_OAR1 ; \ I2C3_OAR1_ADD10, Interface address
    : I2C3_OAR1_ADD7 ( %bbbbbbb -- x addr ) 1 lshift I2C3_OAR1 ; \ I2C3_OAR1_ADD7, Interface address
    : I2C3_OAR1_ADD0 ( -- x addr ) 0 bit I2C3_OAR1 ; \ I2C3_OAR1_ADD0, Interface address
  [then]

  execute-defined? use-I2C3 [if]
    \ I2C3_OAR2 (read-write) Reset:0x0000
    : I2C3_OAR2_ADD2 ( %bbbbbbb -- x addr ) 1 lshift I2C3_OAR2 ; \ I2C3_OAR2_ADD2, Interface address
    : I2C3_OAR2_ENDUAL ( -- x addr ) 0 bit I2C3_OAR2 ; \ I2C3_OAR2_ENDUAL, Dual addressing mode  enable
  [then]

  [if]
    \ I2C3_DR (read-write) Reset:0x0000
    : I2C3_DR_DR ( %bbbbbbbb -- x addr ) I2C3_DR ; \ I2C3_DR_DR, 8-bit data register
  [then]

  execute-defined? use-I2C3 [if]
    \ I2C3_SR1 (multiple-access)  Reset:0x0000
    : I2C3_SR1_SMBALERT ( -- x addr ) 15 bit I2C3_SR1 ; \ I2C3_SR1_SMBALERT, SMBus alert
    : I2C3_SR1_TIMEOUT ( -- x addr ) 14 bit I2C3_SR1 ; \ I2C3_SR1_TIMEOUT, Timeout or Tlow error
    : I2C3_SR1_PECERR ( -- x addr ) 12 bit I2C3_SR1 ; \ I2C3_SR1_PECERR, PEC Error in reception
    : I2C3_SR1_OVR ( -- x addr ) 11 bit I2C3_SR1 ; \ I2C3_SR1_OVR, Overrun/Underrun
    : I2C3_SR1_AF ( -- x addr ) 10 bit I2C3_SR1 ; \ I2C3_SR1_AF, Acknowledge failure
    : I2C3_SR1_ARLO ( -- x addr ) 9 bit I2C3_SR1 ; \ I2C3_SR1_ARLO, Arbitration lost master  mode
    : I2C3_SR1_BERR ( -- x addr ) 8 bit I2C3_SR1 ; \ I2C3_SR1_BERR, Bus error
    : I2C3_SR1_TxE ( -- x addr ) 7 bit I2C3_SR1 ; \ I2C3_SR1_TxE, Data register empty  transmitters
    : I2C3_SR1_RxNE ( -- x addr ) 6 bit I2C3_SR1 ; \ I2C3_SR1_RxNE, Data register not empty  receivers
    : I2C3_SR1_STOPF ( -- x addr ) 4 bit I2C3_SR1 ; \ I2C3_SR1_STOPF, Stop detection slave  mode
    : I2C3_SR1_ADD10 ( -- x addr ) 3 bit I2C3_SR1 ; \ I2C3_SR1_ADD10, 10-bit header sent Master  mode
    : I2C3_SR1_BTF ( -- x addr ) 2 bit I2C3_SR1 ; \ I2C3_SR1_BTF, Byte transfer finished
    : I2C3_SR1_ADDR ( -- x addr ) 1 bit I2C3_SR1 ; \ I2C3_SR1_ADDR, Address sent master mode/matched  slave mode
    : I2C3_SR1_SB ( -- x addr ) 0 bit I2C3_SR1 ; \ I2C3_SR1_SB, Start bit Master mode
  [then]

  [if]
    \ I2C3_SR2 (read-only) Reset:0x0000
    : I2C3_SR2_PEC? ( --  x ) 8 lshift I2C3_SR2 @ ; \ I2C3_SR2_PEC, acket error checking  register
    : I2C3_SR2_DUALF? ( --  1|0 ) 7 bit I2C3_SR2 bit@ ; \ I2C3_SR2_DUALF, Dual flag Slave mode
    : I2C3_SR2_SMBHOST? ( --  1|0 ) 6 bit I2C3_SR2 bit@ ; \ I2C3_SR2_SMBHOST, SMBus host header Slave  mode
    : I2C3_SR2_SMBDEFAULT? ( --  1|0 ) 5 bit I2C3_SR2 bit@ ; \ I2C3_SR2_SMBDEFAULT, SMBus device default address Slave  mode
    : I2C3_SR2_GENCALL? ( --  1|0 ) 4 bit I2C3_SR2 bit@ ; \ I2C3_SR2_GENCALL, General call address Slave  mode
    : I2C3_SR2_TRA? ( --  1|0 ) 2 bit I2C3_SR2 bit@ ; \ I2C3_SR2_TRA, Transmitter/receiver
    : I2C3_SR2_BUSY? ( --  1|0 ) 1 bit I2C3_SR2 bit@ ; \ I2C3_SR2_BUSY, Bus busy
    : I2C3_SR2_MSL? ( --  1|0 ) 0 bit I2C3_SR2 bit@ ; \ I2C3_SR2_MSL, Master/slave
  [then]

  execute-defined? use-I2C3 [if]
    \ I2C3_CCR (read-write) Reset:0x0000
    : I2C3_CCR_F_S ( -- x addr ) 15 bit I2C3_CCR ; \ I2C3_CCR_F_S, I2C master mode selection
    : I2C3_CCR_DUTY ( -- x addr ) 14 bit I2C3_CCR ; \ I2C3_CCR_DUTY, Fast mode duty cycle
    : I2C3_CCR_CCR ( %bbbbbbbbbbb -- x addr ) I2C3_CCR ; \ I2C3_CCR_CCR, Clock control register in Fast/Standard  mode Master mode
  [then]

  [if]
    \ I2C3_TRISE (read-write) Reset:0x0002
    : I2C3_TRISE_TRISE ( %bbbbbb -- x addr ) I2C3_TRISE ; \ I2C3_TRISE_TRISE, Maximum rise time in Fast/Standard mode  Master mode
  [then]

  execute-defined? use-I2C2 [if]
    \ I2C2_CR1 (read-write) Reset:0x0000
    : I2C2_CR1_SWRST ( -- x addr ) 15 bit I2C2_CR1 ; \ I2C2_CR1_SWRST, Software reset
    : I2C2_CR1_ALERT ( -- x addr ) 13 bit I2C2_CR1 ; \ I2C2_CR1_ALERT, SMBus alert
    : I2C2_CR1_PEC ( -- x addr ) 12 bit I2C2_CR1 ; \ I2C2_CR1_PEC, Packet error checking
    : I2C2_CR1_POS ( -- x addr ) 11 bit I2C2_CR1 ; \ I2C2_CR1_POS, Acknowledge/PEC Position for data  reception
    : I2C2_CR1_ACK ( -- x addr ) 10 bit I2C2_CR1 ; \ I2C2_CR1_ACK, Acknowledge enable
    : I2C2_CR1_STOP ( -- x addr ) 9 bit I2C2_CR1 ; \ I2C2_CR1_STOP, Stop generation
    : I2C2_CR1_START ( -- x addr ) 8 bit I2C2_CR1 ; \ I2C2_CR1_START, Start generation
    : I2C2_CR1_NOSTRETCH ( -- x addr ) 7 bit I2C2_CR1 ; \ I2C2_CR1_NOSTRETCH, Clock stretching disable Slave  mode
    : I2C2_CR1_ENGC ( -- x addr ) 6 bit I2C2_CR1 ; \ I2C2_CR1_ENGC, General call enable
    : I2C2_CR1_ENPEC ( -- x addr ) 5 bit I2C2_CR1 ; \ I2C2_CR1_ENPEC, PEC enable
    : I2C2_CR1_ENARP ( -- x addr ) 4 bit I2C2_CR1 ; \ I2C2_CR1_ENARP, ARP enable
    : I2C2_CR1_SMBTYPE ( -- x addr ) 3 bit I2C2_CR1 ; \ I2C2_CR1_SMBTYPE, SMBus type
    : I2C2_CR1_SMBUS ( -- x addr ) 1 bit I2C2_CR1 ; \ I2C2_CR1_SMBUS, SMBus mode
    : I2C2_CR1_PE ( -- x addr ) 0 bit I2C2_CR1 ; \ I2C2_CR1_PE, Peripheral enable
  [then]

  [if]
    \ I2C2_CR2 (read-write) Reset:0x0000
    : I2C2_CR2_LAST ( -- x addr ) 12 bit I2C2_CR2 ; \ I2C2_CR2_LAST, DMA last transfer
    : I2C2_CR2_DMAEN ( -- x addr ) 11 bit I2C2_CR2 ; \ I2C2_CR2_DMAEN, DMA requests enable
    : I2C2_CR2_ITBUFEN ( -- x addr ) 10 bit I2C2_CR2 ; \ I2C2_CR2_ITBUFEN, Buffer interrupt enable
    : I2C2_CR2_ITEVTEN ( -- x addr ) 9 bit I2C2_CR2 ; \ I2C2_CR2_ITEVTEN, Event interrupt enable
    : I2C2_CR2_ITERREN ( -- x addr ) 8 bit I2C2_CR2 ; \ I2C2_CR2_ITERREN, Error interrupt enable
    : I2C2_CR2_FREQ ( %bbbbbb -- x addr ) I2C2_CR2 ; \ I2C2_CR2_FREQ, Peripheral clock frequency
  [then]

  execute-defined? use-I2C2 [if]
    \ I2C2_OAR1 (read-write) Reset:0x0000
    : I2C2_OAR1_ADDMODE ( -- x addr ) 15 bit I2C2_OAR1 ; \ I2C2_OAR1_ADDMODE, Addressing mode slave  mode
    : I2C2_OAR1_ADD10 ( %bb -- x addr ) 8 lshift I2C2_OAR1 ; \ I2C2_OAR1_ADD10, Interface address
    : I2C2_OAR1_ADD7 ( %bbbbbbb -- x addr ) 1 lshift I2C2_OAR1 ; \ I2C2_OAR1_ADD7, Interface address
    : I2C2_OAR1_ADD0 ( -- x addr ) 0 bit I2C2_OAR1 ; \ I2C2_OAR1_ADD0, Interface address
  [then]

  [if]
    \ I2C2_OAR2 (read-write) Reset:0x0000
    : I2C2_OAR2_ADD2 ( %bbbbbbb -- x addr ) 1 lshift I2C2_OAR2 ; \ I2C2_OAR2_ADD2, Interface address
    : I2C2_OAR2_ENDUAL ( -- x addr ) 0 bit I2C2_OAR2 ; \ I2C2_OAR2_ENDUAL, Dual addressing mode  enable
  [then]

  execute-defined? use-I2C2 [if]
    \ I2C2_DR (read-write) Reset:0x0000
    : I2C2_DR_DR ( %bbbbbbbb -- x addr ) I2C2_DR ; \ I2C2_DR_DR, 8-bit data register
  [then]

  [if]
    \ I2C2_SR1 (multiple-access)  Reset:0x0000
    : I2C2_SR1_SMBALERT ( -- x addr ) 15 bit I2C2_SR1 ; \ I2C2_SR1_SMBALERT, SMBus alert
    : I2C2_SR1_TIMEOUT ( -- x addr ) 14 bit I2C2_SR1 ; \ I2C2_SR1_TIMEOUT, Timeout or Tlow error
    : I2C2_SR1_PECERR ( -- x addr ) 12 bit I2C2_SR1 ; \ I2C2_SR1_PECERR, PEC Error in reception
    : I2C2_SR1_OVR ( -- x addr ) 11 bit I2C2_SR1 ; \ I2C2_SR1_OVR, Overrun/Underrun
    : I2C2_SR1_AF ( -- x addr ) 10 bit I2C2_SR1 ; \ I2C2_SR1_AF, Acknowledge failure
    : I2C2_SR1_ARLO ( -- x addr ) 9 bit I2C2_SR1 ; \ I2C2_SR1_ARLO, Arbitration lost master  mode
    : I2C2_SR1_BERR ( -- x addr ) 8 bit I2C2_SR1 ; \ I2C2_SR1_BERR, Bus error
    : I2C2_SR1_TxE ( -- x addr ) 7 bit I2C2_SR1 ; \ I2C2_SR1_TxE, Data register empty  transmitters
    : I2C2_SR1_RxNE ( -- x addr ) 6 bit I2C2_SR1 ; \ I2C2_SR1_RxNE, Data register not empty  receivers
    : I2C2_SR1_STOPF ( -- x addr ) 4 bit I2C2_SR1 ; \ I2C2_SR1_STOPF, Stop detection slave  mode
    : I2C2_SR1_ADD10 ( -- x addr ) 3 bit I2C2_SR1 ; \ I2C2_SR1_ADD10, 10-bit header sent Master  mode
    : I2C2_SR1_BTF ( -- x addr ) 2 bit I2C2_SR1 ; \ I2C2_SR1_BTF, Byte transfer finished
    : I2C2_SR1_ADDR ( -- x addr ) 1 bit I2C2_SR1 ; \ I2C2_SR1_ADDR, Address sent master mode/matched  slave mode
    : I2C2_SR1_SB ( -- x addr ) 0 bit I2C2_SR1 ; \ I2C2_SR1_SB, Start bit Master mode
  [then]

  execute-defined? use-I2C2 [if]
    \ I2C2_SR2 (read-only) Reset:0x0000
    : I2C2_SR2_PEC? ( --  x ) 8 lshift I2C2_SR2 @ ; \ I2C2_SR2_PEC, acket error checking  register
    : I2C2_SR2_DUALF? ( --  1|0 ) 7 bit I2C2_SR2 bit@ ; \ I2C2_SR2_DUALF, Dual flag Slave mode
    : I2C2_SR2_SMBHOST? ( --  1|0 ) 6 bit I2C2_SR2 bit@ ; \ I2C2_SR2_SMBHOST, SMBus host header Slave  mode
    : I2C2_SR2_SMBDEFAULT? ( --  1|0 ) 5 bit I2C2_SR2 bit@ ; \ I2C2_SR2_SMBDEFAULT, SMBus device default address Slave  mode
    : I2C2_SR2_GENCALL? ( --  1|0 ) 4 bit I2C2_SR2 bit@ ; \ I2C2_SR2_GENCALL, General call address Slave  mode
    : I2C2_SR2_TRA? ( --  1|0 ) 2 bit I2C2_SR2 bit@ ; \ I2C2_SR2_TRA, Transmitter/receiver
    : I2C2_SR2_BUSY? ( --  1|0 ) 1 bit I2C2_SR2 bit@ ; \ I2C2_SR2_BUSY, Bus busy
    : I2C2_SR2_MSL? ( --  1|0 ) 0 bit I2C2_SR2 bit@ ; \ I2C2_SR2_MSL, Master/slave
  [then]

  [if]
    \ I2C2_CCR (read-write) Reset:0x0000
    : I2C2_CCR_F_S ( -- x addr ) 15 bit I2C2_CCR ; \ I2C2_CCR_F_S, I2C master mode selection
    : I2C2_CCR_DUTY ( -- x addr ) 14 bit I2C2_CCR ; \ I2C2_CCR_DUTY, Fast mode duty cycle
    : I2C2_CCR_CCR ( %bbbbbbbbbbb -- x addr ) I2C2_CCR ; \ I2C2_CCR_CCR, Clock control register in Fast/Standard  mode Master mode
  [then]

  execute-defined? use-I2C2 [if]
    \ I2C2_TRISE (read-write) Reset:0x0002
    : I2C2_TRISE_TRISE ( %bbbbbb -- x addr ) I2C2_TRISE ; \ I2C2_TRISE_TRISE, Maximum rise time in Fast/Standard mode  Master mode
  [then]

  [if]
    \ I2C1_CR1 (read-write) Reset:0x0000
    : I2C1_CR1_SWRST ( -- x addr ) 15 bit I2C1_CR1 ; \ I2C1_CR1_SWRST, Software reset
    : I2C1_CR1_ALERT ( -- x addr ) 13 bit I2C1_CR1 ; \ I2C1_CR1_ALERT, SMBus alert
    : I2C1_CR1_PEC ( -- x addr ) 12 bit I2C1_CR1 ; \ I2C1_CR1_PEC, Packet error checking
    : I2C1_CR1_POS ( -- x addr ) 11 bit I2C1_CR1 ; \ I2C1_CR1_POS, Acknowledge/PEC Position for data  reception
    : I2C1_CR1_ACK ( -- x addr ) 10 bit I2C1_CR1 ; \ I2C1_CR1_ACK, Acknowledge enable
    : I2C1_CR1_STOP ( -- x addr ) 9 bit I2C1_CR1 ; \ I2C1_CR1_STOP, Stop generation
    : I2C1_CR1_START ( -- x addr ) 8 bit I2C1_CR1 ; \ I2C1_CR1_START, Start generation
    : I2C1_CR1_NOSTRETCH ( -- x addr ) 7 bit I2C1_CR1 ; \ I2C1_CR1_NOSTRETCH, Clock stretching disable Slave  mode
    : I2C1_CR1_ENGC ( -- x addr ) 6 bit I2C1_CR1 ; \ I2C1_CR1_ENGC, General call enable
    : I2C1_CR1_ENPEC ( -- x addr ) 5 bit I2C1_CR1 ; \ I2C1_CR1_ENPEC, PEC enable
    : I2C1_CR1_ENARP ( -- x addr ) 4 bit I2C1_CR1 ; \ I2C1_CR1_ENARP, ARP enable
    : I2C1_CR1_SMBTYPE ( -- x addr ) 3 bit I2C1_CR1 ; \ I2C1_CR1_SMBTYPE, SMBus type
    : I2C1_CR1_SMBUS ( -- x addr ) 1 bit I2C1_CR1 ; \ I2C1_CR1_SMBUS, SMBus mode
    : I2C1_CR1_PE ( -- x addr ) 0 bit I2C1_CR1 ; \ I2C1_CR1_PE, Peripheral enable
  [then]

  execute-defined? use-I2C1 [if]
    \ I2C1_CR2 (read-write) Reset:0x0000
    : I2C1_CR2_LAST ( -- x addr ) 12 bit I2C1_CR2 ; \ I2C1_CR2_LAST, DMA last transfer
    : I2C1_CR2_DMAEN ( -- x addr ) 11 bit I2C1_CR2 ; \ I2C1_CR2_DMAEN, DMA requests enable
    : I2C1_CR2_ITBUFEN ( -- x addr ) 10 bit I2C1_CR2 ; \ I2C1_CR2_ITBUFEN, Buffer interrupt enable
    : I2C1_CR2_ITEVTEN ( -- x addr ) 9 bit I2C1_CR2 ; \ I2C1_CR2_ITEVTEN, Event interrupt enable
    : I2C1_CR2_ITERREN ( -- x addr ) 8 bit I2C1_CR2 ; \ I2C1_CR2_ITERREN, Error interrupt enable
    : I2C1_CR2_FREQ ( %bbbbbb -- x addr ) I2C1_CR2 ; \ I2C1_CR2_FREQ, Peripheral clock frequency
  [then]

  [if]
    \ I2C1_OAR1 (read-write) Reset:0x0000
    : I2C1_OAR1_ADDMODE ( -- x addr ) 15 bit I2C1_OAR1 ; \ I2C1_OAR1_ADDMODE, Addressing mode slave  mode
    : I2C1_OAR1_ADD10 ( %bb -- x addr ) 8 lshift I2C1_OAR1 ; \ I2C1_OAR1_ADD10, Interface address
    : I2C1_OAR1_ADD7 ( %bbbbbbb -- x addr ) 1 lshift I2C1_OAR1 ; \ I2C1_OAR1_ADD7, Interface address
    : I2C1_OAR1_ADD0 ( -- x addr ) 0 bit I2C1_OAR1 ; \ I2C1_OAR1_ADD0, Interface address
  [then]

  execute-defined? use-I2C1 [if]
    \ I2C1_OAR2 (read-write) Reset:0x0000
    : I2C1_OAR2_ADD2 ( %bbbbbbb -- x addr ) 1 lshift I2C1_OAR2 ; \ I2C1_OAR2_ADD2, Interface address
    : I2C1_OAR2_ENDUAL ( -- x addr ) 0 bit I2C1_OAR2 ; \ I2C1_OAR2_ENDUAL, Dual addressing mode  enable
  [then]

  [if]
    \ I2C1_DR (read-write) Reset:0x0000
    : I2C1_DR_DR ( %bbbbbbbb -- x addr ) I2C1_DR ; \ I2C1_DR_DR, 8-bit data register
  [then]

  execute-defined? use-I2C1 [if]
    \ I2C1_SR1 (multiple-access)  Reset:0x0000
    : I2C1_SR1_SMBALERT ( -- x addr ) 15 bit I2C1_SR1 ; \ I2C1_SR1_SMBALERT, SMBus alert
    : I2C1_SR1_TIMEOUT ( -- x addr ) 14 bit I2C1_SR1 ; \ I2C1_SR1_TIMEOUT, Timeout or Tlow error
    : I2C1_SR1_PECERR ( -- x addr ) 12 bit I2C1_SR1 ; \ I2C1_SR1_PECERR, PEC Error in reception
    : I2C1_SR1_OVR ( -- x addr ) 11 bit I2C1_SR1 ; \ I2C1_SR1_OVR, Overrun/Underrun
    : I2C1_SR1_AF ( -- x addr ) 10 bit I2C1_SR1 ; \ I2C1_SR1_AF, Acknowledge failure
    : I2C1_SR1_ARLO ( -- x addr ) 9 bit I2C1_SR1 ; \ I2C1_SR1_ARLO, Arbitration lost master  mode
    : I2C1_SR1_BERR ( -- x addr ) 8 bit I2C1_SR1 ; \ I2C1_SR1_BERR, Bus error
    : I2C1_SR1_TxE ( -- x addr ) 7 bit I2C1_SR1 ; \ I2C1_SR1_TxE, Data register empty  transmitters
    : I2C1_SR1_RxNE ( -- x addr ) 6 bit I2C1_SR1 ; \ I2C1_SR1_RxNE, Data register not empty  receivers
    : I2C1_SR1_STOPF ( -- x addr ) 4 bit I2C1_SR1 ; \ I2C1_SR1_STOPF, Stop detection slave  mode
    : I2C1_SR1_ADD10 ( -- x addr ) 3 bit I2C1_SR1 ; \ I2C1_SR1_ADD10, 10-bit header sent Master  mode
    : I2C1_SR1_BTF ( -- x addr ) 2 bit I2C1_SR1 ; \ I2C1_SR1_BTF, Byte transfer finished
    : I2C1_SR1_ADDR ( -- x addr ) 1 bit I2C1_SR1 ; \ I2C1_SR1_ADDR, Address sent master mode/matched  slave mode
    : I2C1_SR1_SB ( -- x addr ) 0 bit I2C1_SR1 ; \ I2C1_SR1_SB, Start bit Master mode
  [then]

  [if]
    \ I2C1_SR2 (read-only) Reset:0x0000
    : I2C1_SR2_PEC? ( --  x ) 8 lshift I2C1_SR2 @ ; \ I2C1_SR2_PEC, acket error checking  register
    : I2C1_SR2_DUALF? ( --  1|0 ) 7 bit I2C1_SR2 bit@ ; \ I2C1_SR2_DUALF, Dual flag Slave mode
    : I2C1_SR2_SMBHOST? ( --  1|0 ) 6 bit I2C1_SR2 bit@ ; \ I2C1_SR2_SMBHOST, SMBus host header Slave  mode
    : I2C1_SR2_SMBDEFAULT? ( --  1|0 ) 5 bit I2C1_SR2 bit@ ; \ I2C1_SR2_SMBDEFAULT, SMBus device default address Slave  mode
    : I2C1_SR2_GENCALL? ( --  1|0 ) 4 bit I2C1_SR2 bit@ ; \ I2C1_SR2_GENCALL, General call address Slave  mode
    : I2C1_SR2_TRA? ( --  1|0 ) 2 bit I2C1_SR2 bit@ ; \ I2C1_SR2_TRA, Transmitter/receiver
    : I2C1_SR2_BUSY? ( --  1|0 ) 1 bit I2C1_SR2 bit@ ; \ I2C1_SR2_BUSY, Bus busy
    : I2C1_SR2_MSL? ( --  1|0 ) 0 bit I2C1_SR2 bit@ ; \ I2C1_SR2_MSL, Master/slave
  [then]

  execute-defined? use-I2C1 [if]
    \ I2C1_CCR (read-write) Reset:0x0000
    : I2C1_CCR_F_S ( -- x addr ) 15 bit I2C1_CCR ; \ I2C1_CCR_F_S, I2C master mode selection
    : I2C1_CCR_DUTY ( -- x addr ) 14 bit I2C1_CCR ; \ I2C1_CCR_DUTY, Fast mode duty cycle
    : I2C1_CCR_CCR ( %bbbbbbbbbbb -- x addr ) I2C1_CCR ; \ I2C1_CCR_CCR, Clock control register in Fast/Standard  mode Master mode
  [then]

  [if]
    \ I2C1_TRISE (read-write) Reset:0x0002
    : I2C1_TRISE_TRISE ( %bbbbbb -- x addr ) I2C1_TRISE ; \ I2C1_TRISE_TRISE, Maximum rise time in Fast/Standard mode  Master mode
  [then]

  execute-defined? use-IWDG [if]
    \ IWDG_KR (write-only) Reset:0x00000000
    : IWDG_KR_KEY ( %bbbbbbbbbbbbbbbb -- x addr ) IWDG_KR ; \ IWDG_KR_KEY, Key value write only, read  0000h
  [then]

  [if]
    \ IWDG_PR (read-write) Reset:0x00000000
    : IWDG_PR_PR ( %bbb -- x addr ) IWDG_PR ; \ IWDG_PR_PR, Prescaler divider
  [then]

  execute-defined? use-IWDG [if]
    \ IWDG_RLR (read-write) Reset:0x00000FFF
    : IWDG_RLR_RL ( %bbbbbbbbbbb -- x addr ) IWDG_RLR ; \ IWDG_RLR_RL, Watchdog counter reload  value
  [then]

  [if]
    \ IWDG_SR (read-only) Reset:0x00000000
    : IWDG_SR_RVU? ( --  1|0 ) 1 bit IWDG_SR bit@ ; \ IWDG_SR_RVU, Watchdog counter reload value  update
    : IWDG_SR_PVU? ( --  1|0 ) 0 bit IWDG_SR bit@ ; \ IWDG_SR_PVU, Watchdog prescaler value  update
  [then]

  execute-defined? use-WWDG [if]
    \ WWDG_CR (read-write) Reset:0x7F
    : WWDG_CR_WDGA ( -- x addr ) 7 bit WWDG_CR ; \ WWDG_CR_WDGA, Activation bit
    : WWDG_CR_T ( %bbbbbbb -- x addr ) WWDG_CR ; \ WWDG_CR_T, 7-bit counter MSB to LSB
  [then]

  [if]
    \ WWDG_CFR (read-write) Reset:0x7F
    : WWDG_CFR_EWI ( -- x addr ) 9 bit WWDG_CFR ; \ WWDG_CFR_EWI, Early wakeup interrupt
    : WWDG_CFR_WDGTB1 ( -- x addr ) 8 bit WWDG_CFR ; \ WWDG_CFR_WDGTB1, Timer base
    : WWDG_CFR_WDGTB0 ( -- x addr ) 7 bit WWDG_CFR ; \ WWDG_CFR_WDGTB0, Timer base
    : WWDG_CFR_W ( %bbbbbbb -- x addr ) WWDG_CFR ; \ WWDG_CFR_W, 7-bit window value
  [then]

  execute-defined? use-WWDG [if]
    \ WWDG_SR (read-write) Reset:0x00
    : WWDG_SR_EWIF ( -- x addr ) 0 bit WWDG_SR ; \ WWDG_SR_EWIF, Early wakeup interrupt  flag
  [then]

  [if]
    \ RTC_TR (read-write) Reset:0x00000000
    : RTC_TR_PM ( -- x addr ) 22 bit RTC_TR ; \ RTC_TR_PM, AM/PM notation
    : RTC_TR_HT ( %bb -- x addr ) 20 lshift RTC_TR ; \ RTC_TR_HT, Hour tens in BCD format
    : RTC_TR_HU ( %bbbb -- x addr ) 16 lshift RTC_TR ; \ RTC_TR_HU, Hour units in BCD format
    : RTC_TR_MNT ( %bbb -- x addr ) 12 lshift RTC_TR ; \ RTC_TR_MNT, Minute tens in BCD format
    : RTC_TR_MNU ( %bbbb -- x addr ) 8 lshift RTC_TR ; \ RTC_TR_MNU, Minute units in BCD format
    : RTC_TR_ST ( %bbb -- x addr ) 4 lshift RTC_TR ; \ RTC_TR_ST, Second tens in BCD format
    : RTC_TR_SU ( %bbbb -- x addr ) RTC_TR ; \ RTC_TR_SU, Second units in BCD format
  [then]

  execute-defined? use-RTC [if]
    \ RTC_DR (read-write) Reset:0x00002101
    : RTC_DR_YT ( %bbbb -- x addr ) 20 lshift RTC_DR ; \ RTC_DR_YT, Year tens in BCD format
    : RTC_DR_YU ( %bbbb -- x addr ) 16 lshift RTC_DR ; \ RTC_DR_YU, Year units in BCD format
    : RTC_DR_WDU ( %bbb -- x addr ) 13 lshift RTC_DR ; \ RTC_DR_WDU, Week day units
    : RTC_DR_MT ( -- x addr ) 12 bit RTC_DR ; \ RTC_DR_MT, Month tens in BCD format
    : RTC_DR_MU ( %bbbb -- x addr ) 8 lshift RTC_DR ; \ RTC_DR_MU, Month units in BCD format
    : RTC_DR_DT ( %bb -- x addr ) 4 lshift RTC_DR ; \ RTC_DR_DT, Date tens in BCD format
    : RTC_DR_DU ( %bbbb -- x addr ) RTC_DR ; \ RTC_DR_DU, Date units in BCD format
  [then]

  [if]
    \ RTC_CR (read-write) Reset:0x00000000
    : RTC_CR_COE ( -- x addr ) 23 bit RTC_CR ; \ RTC_CR_COE, Calibration output enable
    : RTC_CR_OSEL ( %bb -- x addr ) 21 lshift RTC_CR ; \ RTC_CR_OSEL, Output selection
    : RTC_CR_POL ( -- x addr ) 20 bit RTC_CR ; \ RTC_CR_POL, Output polarity
    : RTC_CR_BKP ( -- x addr ) 18 bit RTC_CR ; \ RTC_CR_BKP, Backup
    : RTC_CR_SUB1H ( -- x addr ) 17 bit RTC_CR ; \ RTC_CR_SUB1H, Subtract 1 hour winter time  change
    : RTC_CR_ADD1H ( -- x addr ) 16 bit RTC_CR ; \ RTC_CR_ADD1H, Add 1 hour summer time  change
    : RTC_CR_TSIE ( -- x addr ) 15 bit RTC_CR ; \ RTC_CR_TSIE, Time-stamp interrupt  enable
    : RTC_CR_WUTIE ( -- x addr ) 14 bit RTC_CR ; \ RTC_CR_WUTIE, Wakeup timer interrupt  enable
    : RTC_CR_ALRBIE ( -- x addr ) 13 bit RTC_CR ; \ RTC_CR_ALRBIE, Alarm B interrupt enable
    : RTC_CR_ALRAIE ( -- x addr ) 12 bit RTC_CR ; \ RTC_CR_ALRAIE, Alarm A interrupt enable
    : RTC_CR_TSE ( -- x addr ) 11 bit RTC_CR ; \ RTC_CR_TSE, Time stamp enable
    : RTC_CR_WUTE ( -- x addr ) 10 bit RTC_CR ; \ RTC_CR_WUTE, Wakeup timer enable
    : RTC_CR_ALRBE ( -- x addr ) 9 bit RTC_CR ; \ RTC_CR_ALRBE, Alarm B enable
    : RTC_CR_ALRAE ( -- x addr ) 8 bit RTC_CR ; \ RTC_CR_ALRAE, Alarm A enable
    : RTC_CR_DCE ( -- x addr ) 7 bit RTC_CR ; \ RTC_CR_DCE, Coarse digital calibration  enable
    : RTC_CR_FMT ( -- x addr ) 6 bit RTC_CR ; \ RTC_CR_FMT, Hour format
    : RTC_CR_REFCKON ( -- x addr ) 4 bit RTC_CR ; \ RTC_CR_REFCKON, Reference clock detection enable 50 or  60 Hz
    : RTC_CR_TSEDGE ( -- x addr ) 3 bit RTC_CR ; \ RTC_CR_TSEDGE, Time-stamp event active  edge
    : RTC_CR_WCKSEL ( %bbb -- x addr ) RTC_CR ; \ RTC_CR_WCKSEL, Wakeup clock selection
  [then]

  execute-defined? use-RTC [if]
    \ RTC_ISR (multiple-access)  Reset:0x00000007
    : RTC_ISR_ALRAWF? ( -- 1|0 ) 0 bit RTC_ISR bit@ ; \ RTC_ISR_ALRAWF, Alarm A write flag
    : RTC_ISR_ALRBWF? ( -- 1|0 ) 1 bit RTC_ISR bit@ ; \ RTC_ISR_ALRBWF, Alarm B write flag
    : RTC_ISR_WUTWF? ( -- 1|0 ) 2 bit RTC_ISR bit@ ; \ RTC_ISR_WUTWF, Wakeup timer write flag
    : RTC_ISR_SHPF ( -- x addr ) 3 bit RTC_ISR ; \ RTC_ISR_SHPF, Shift operation pending
    : RTC_ISR_INITS? ( -- 1|0 ) 4 bit RTC_ISR bit@ ; \ RTC_ISR_INITS, Initialization status flag
    : RTC_ISR_RSF? ( -- 1|0 ) 5 bit RTC_ISR bit@ ; \ RTC_ISR_RSF, Registers synchronization  flag
    : RTC_ISR_INITF? ( -- 1|0 ) 6 bit RTC_ISR bit@ ; \ RTC_ISR_INITF, Initialization flag
    : RTC_ISR_INIT ( -- x addr ) 7 bit RTC_ISR ; \ RTC_ISR_INIT, Initialization mode
    : RTC_ISR_ALRAF? ( -- 1|0 ) 8 bit RTC_ISR bit@ ; \ RTC_ISR_ALRAF, Alarm A flag
    : RTC_ISR_ALRBF? ( -- 1|0 ) 9 bit RTC_ISR bit@ ; \ RTC_ISR_ALRBF, Alarm B flag
    : RTC_ISR_WUTF? ( -- 1|0 ) 10 bit RTC_ISR bit@ ; \ RTC_ISR_WUTF, Wakeup timer flag
    : RTC_ISR_TSF? ( -- 1|0 ) 11 bit RTC_ISR bit@ ; \ RTC_ISR_TSF, Time-stamp flag
    : RTC_ISR_TSOVF? ( -- 1|0 ) 12 bit RTC_ISR bit@ ; \ RTC_ISR_TSOVF, Time-stamp overflow flag
    : RTC_ISR_TAMP1F? ( -- 1|0 ) 13 bit RTC_ISR bit@ ; \ RTC_ISR_TAMP1F, Tamper detection flag
    : RTC_ISR_TAMP2F? ( -- 1|0 ) 14 bit RTC_ISR bit@ ; \ RTC_ISR_TAMP2F, TAMPER2 detection flag
    : RTC_ISR_RECALPF ( -- x addr ) 16 bit RTC_ISR ; \ RTC_ISR_RECALPF, Recalibration pending Flag
  [then]

  [if]
    \ RTC_PRER (read-write) Reset:0x007F00FF
    : RTC_PRER_PREDIV_A ( %bbbbbbb -- x addr ) 16 lshift RTC_PRER ; \ RTC_PRER_PREDIV_A, Asynchronous prescaler  factor
    : RTC_PRER_PREDIV_S ( %bbbbbbbbbbbbbbb -- x addr ) RTC_PRER ; \ RTC_PRER_PREDIV_S, Synchronous prescaler  factor
  [then]

  execute-defined? use-RTC [if]
    \ RTC_WUTR (read-write) Reset:0x0000FFFF
    : RTC_WUTR_WUT ( %bbbbbbbbbbbbbbbb -- x addr ) RTC_WUTR ; \ RTC_WUTR_WUT, Wakeup auto-reload value  bits
  [then]

  [if]
    \ RTC_CALIBR (read-write) Reset:0x00000000
    : RTC_CALIBR_DCS ( -- x addr ) 7 bit RTC_CALIBR ; \ RTC_CALIBR_DCS, Digital calibration sign
    : RTC_CALIBR_DC ( %bbbbb -- x addr ) RTC_CALIBR ; \ RTC_CALIBR_DC, Digital calibration
  [then]

  execute-defined? use-RTC [if]
    \ RTC_ALRMAR (read-write) Reset:0x00000000
    : RTC_ALRMAR_MSK4 ( -- x addr ) 31 bit RTC_ALRMAR ; \ RTC_ALRMAR_MSK4, Alarm A date mask
    : RTC_ALRMAR_WDSEL ( -- x addr ) 30 bit RTC_ALRMAR ; \ RTC_ALRMAR_WDSEL, Week day selection
    : RTC_ALRMAR_DT ( %bb -- x addr ) 28 lshift RTC_ALRMAR ; \ RTC_ALRMAR_DT, Date tens in BCD format
    : RTC_ALRMAR_DU ( %bbbb -- x addr ) 24 lshift RTC_ALRMAR ; \ RTC_ALRMAR_DU, Date units or day in BCD  format
    : RTC_ALRMAR_MSK3 ( -- x addr ) 23 bit RTC_ALRMAR ; \ RTC_ALRMAR_MSK3, Alarm A hours mask
    : RTC_ALRMAR_PM ( -- x addr ) 22 bit RTC_ALRMAR ; \ RTC_ALRMAR_PM, AM/PM notation
    : RTC_ALRMAR_HT ( %bb -- x addr ) 20 lshift RTC_ALRMAR ; \ RTC_ALRMAR_HT, Hour tens in BCD format
    : RTC_ALRMAR_HU ( %bbbb -- x addr ) 16 lshift RTC_ALRMAR ; \ RTC_ALRMAR_HU, Hour units in BCD format
    : RTC_ALRMAR_MSK2 ( -- x addr ) 15 bit RTC_ALRMAR ; \ RTC_ALRMAR_MSK2, Alarm A minutes mask
    : RTC_ALRMAR_MNT ( %bbb -- x addr ) 12 lshift RTC_ALRMAR ; \ RTC_ALRMAR_MNT, Minute tens in BCD format
    : RTC_ALRMAR_MNU ( %bbbb -- x addr ) 8 lshift RTC_ALRMAR ; \ RTC_ALRMAR_MNU, Minute units in BCD format
    : RTC_ALRMAR_MSK1 ( -- x addr ) 7 bit RTC_ALRMAR ; \ RTC_ALRMAR_MSK1, Alarm A seconds mask
    : RTC_ALRMAR_ST ( %bbb -- x addr ) 4 lshift RTC_ALRMAR ; \ RTC_ALRMAR_ST, Second tens in BCD format
    : RTC_ALRMAR_SU ( %bbbb -- x addr ) RTC_ALRMAR ; \ RTC_ALRMAR_SU, Second units in BCD format
  [then]

  [if]
    \ RTC_ALRMBR (read-write) Reset:0x00000000
    : RTC_ALRMBR_MSK4 ( -- x addr ) 31 bit RTC_ALRMBR ; \ RTC_ALRMBR_MSK4, Alarm B date mask
    : RTC_ALRMBR_WDSEL ( -- x addr ) 30 bit RTC_ALRMBR ; \ RTC_ALRMBR_WDSEL, Week day selection
    : RTC_ALRMBR_DT ( %bb -- x addr ) 28 lshift RTC_ALRMBR ; \ RTC_ALRMBR_DT, Date tens in BCD format
    : RTC_ALRMBR_DU ( %bbbb -- x addr ) 24 lshift RTC_ALRMBR ; \ RTC_ALRMBR_DU, Date units or day in BCD  format
    : RTC_ALRMBR_MSK3 ( -- x addr ) 23 bit RTC_ALRMBR ; \ RTC_ALRMBR_MSK3, Alarm B hours mask
    : RTC_ALRMBR_PM ( -- x addr ) 22 bit RTC_ALRMBR ; \ RTC_ALRMBR_PM, AM/PM notation
    : RTC_ALRMBR_HT ( %bb -- x addr ) 20 lshift RTC_ALRMBR ; \ RTC_ALRMBR_HT, Hour tens in BCD format
    : RTC_ALRMBR_HU ( %bbbb -- x addr ) 16 lshift RTC_ALRMBR ; \ RTC_ALRMBR_HU, Hour units in BCD format
    : RTC_ALRMBR_MSK2 ( -- x addr ) 15 bit RTC_ALRMBR ; \ RTC_ALRMBR_MSK2, Alarm B minutes mask
    : RTC_ALRMBR_MNT ( %bbb -- x addr ) 12 lshift RTC_ALRMBR ; \ RTC_ALRMBR_MNT, Minute tens in BCD format
    : RTC_ALRMBR_MNU ( %bbbb -- x addr ) 8 lshift RTC_ALRMBR ; \ RTC_ALRMBR_MNU, Minute units in BCD format
    : RTC_ALRMBR_MSK1 ( -- x addr ) 7 bit RTC_ALRMBR ; \ RTC_ALRMBR_MSK1, Alarm B seconds mask
    : RTC_ALRMBR_ST ( %bbb -- x addr ) 4 lshift RTC_ALRMBR ; \ RTC_ALRMBR_ST, Second tens in BCD format
    : RTC_ALRMBR_SU ( %bbbb -- x addr ) RTC_ALRMBR ; \ RTC_ALRMBR_SU, Second units in BCD format
  [then]

  execute-defined? use-RTC [if]
    \ RTC_WPR (write-only) Reset:0x00000000
    : RTC_WPR_KEY ( %bbbbbbbb -- x addr ) RTC_WPR ; \ RTC_WPR_KEY, Write protection key
  [then]

  [if]
    \ RTC_SSR (read-only) Reset:0x00000000
    : RTC_SSR_SS? ( --  x ) RTC_SSR @ ; \ RTC_SSR_SS, Sub second value
  [then]

  execute-defined? use-RTC [if]
    \ RTC_SHIFTR (write-only) Reset:0x00000000
    : RTC_SHIFTR_ADD1S ( -- x addr ) 31 bit RTC_SHIFTR ; \ RTC_SHIFTR_ADD1S, Add one second
    : RTC_SHIFTR_SUBFS ( %bbbbbbbbbbbbbbb -- x addr ) RTC_SHIFTR ; \ RTC_SHIFTR_SUBFS, Subtract a fraction of a  second
  [then]

  [if]
    \ RTC_TSTR (read-only) Reset:0x00000000
    : RTC_TSTR_ALARMOUTTYPE? ( --  1|0 ) 18 bit RTC_TSTR bit@ ; \ RTC_TSTR_ALARMOUTTYPE, AFO_ALARM output type
    : RTC_TSTR_TSINSEL? ( --  1|0 ) 17 bit RTC_TSTR bit@ ; \ RTC_TSTR_TSINSEL, TIMESTAMP mapping
    : RTC_TSTR_TAMP1INSEL? ( --  1|0 ) 16 bit RTC_TSTR bit@ ; \ RTC_TSTR_TAMP1INSEL, TAMPER1 mapping
    : RTC_TSTR_TAMPIE? ( --  1|0 ) 2 bit RTC_TSTR bit@ ; \ RTC_TSTR_TAMPIE, Tamper interrupt enable
    : RTC_TSTR_TAMP1TRG? ( --  1|0 ) 1 bit RTC_TSTR bit@ ; \ RTC_TSTR_TAMP1TRG, Active level for tamper 1
    : RTC_TSTR_TAMP1E? ( --  1|0 ) 0 bit RTC_TSTR bit@ ; \ RTC_TSTR_TAMP1E, Tamper 1 detection enable
  [then]

  execute-defined? use-RTC [if]
    \ RTC_TSDR (read-only) Reset:0x00000000
    : RTC_TSDR_WDU? ( --  x ) 13 lshift RTC_TSDR @ ; \ RTC_TSDR_WDU, Week day units
    : RTC_TSDR_MT? ( --  1|0 ) 12 bit RTC_TSDR bit@ ; \ RTC_TSDR_MT, Month tens in BCD format
    : RTC_TSDR_MU? ( --  x ) 8 lshift RTC_TSDR @ ; \ RTC_TSDR_MU, Month units in BCD format
    : RTC_TSDR_DT? ( --  x ) 4 lshift RTC_TSDR @ ; \ RTC_TSDR_DT, Date tens in BCD format
    : RTC_TSDR_DU? ( --  x ) RTC_TSDR @ ; \ RTC_TSDR_DU, Date units in BCD format
  [then]

  [if]
    \ RTC_TSSSR (read-only) Reset:0x00000000
    : RTC_TSSSR_SS? ( --  x ) RTC_TSSSR @ ; \ RTC_TSSSR_SS, Sub second value
  [then]

  execute-defined? use-RTC [if]
    \ RTC_CALR (read-write) Reset:0x00000000
    : RTC_CALR_CALP ( -- x addr ) 15 bit RTC_CALR ; \ RTC_CALR_CALP, Increase frequency of RTC by 488.5  ppm
    : RTC_CALR_CALW8 ( -- x addr ) 14 bit RTC_CALR ; \ RTC_CALR_CALW8, Use an 8-second calibration cycle  period
    : RTC_CALR_CALW16 ( -- x addr ) 13 bit RTC_CALR ; \ RTC_CALR_CALW16, Use a 16-second calibration cycle  period
    : RTC_CALR_CALM ( %bbbbbbbbb -- x addr ) RTC_CALR ; \ RTC_CALR_CALM, Calibration minus
  [then]

  [if]
    \ RTC_TAFCR (read-write) Reset:0x00000000
    : RTC_TAFCR_ALARMOUTTYPE ( -- x addr ) 18 bit RTC_TAFCR ; \ RTC_TAFCR_ALARMOUTTYPE, AFO_ALARM output type
    : RTC_TAFCR_TSINSEL ( -- x addr ) 17 bit RTC_TAFCR ; \ RTC_TAFCR_TSINSEL, TIMESTAMP mapping
    : RTC_TAFCR_TAMP1INSEL ( -- x addr ) 16 bit RTC_TAFCR ; \ RTC_TAFCR_TAMP1INSEL, TAMPER1 mapping
    : RTC_TAFCR_TAMPPUDIS ( -- x addr ) 15 bit RTC_TAFCR ; \ RTC_TAFCR_TAMPPUDIS, TAMPER pull-up disable
    : RTC_TAFCR_TAMPPRCH ( %bb -- x addr ) 13 lshift RTC_TAFCR ; \ RTC_TAFCR_TAMPPRCH, Tamper precharge duration
    : RTC_TAFCR_TAMPFLT ( %bb -- x addr ) 11 lshift RTC_TAFCR ; \ RTC_TAFCR_TAMPFLT, Tamper filter count
    : RTC_TAFCR_TAMPFREQ ( %bbb -- x addr ) 8 lshift RTC_TAFCR ; \ RTC_TAFCR_TAMPFREQ, Tamper sampling frequency
    : RTC_TAFCR_TAMPTS ( -- x addr ) 7 bit RTC_TAFCR ; \ RTC_TAFCR_TAMPTS, Activate timestamp on tamper detection  event
    : RTC_TAFCR_TAMP2TRG ( -- x addr ) 4 bit RTC_TAFCR ; \ RTC_TAFCR_TAMP2TRG, Active level for tamper 2
    : RTC_TAFCR_TAMP2E ( -- x addr ) 3 bit RTC_TAFCR ; \ RTC_TAFCR_TAMP2E, Tamper 2 detection enable
    : RTC_TAFCR_TAMPIE ( -- x addr ) 2 bit RTC_TAFCR ; \ RTC_TAFCR_TAMPIE, Tamper interrupt enable
    : RTC_TAFCR_TAMP1TRG ( -- x addr ) 1 bit RTC_TAFCR ; \ RTC_TAFCR_TAMP1TRG, Active level for tamper 1
    : RTC_TAFCR_TAMP1E ( -- x addr ) 0 bit RTC_TAFCR ; \ RTC_TAFCR_TAMP1E, Tamper 1 detection enable
  [then]

  execute-defined? use-RTC [if]
    \ RTC_ALRMASSR (read-write) Reset:0x00000000
    : RTC_ALRMASSR_MASKSS ( %bbbb -- x addr ) 24 lshift RTC_ALRMASSR ; \ RTC_ALRMASSR_MASKSS, Mask the most-significant bits starting  at this bit
    : RTC_ALRMASSR_SS ( %bbbbbbbbbbbbbbb -- x addr ) RTC_ALRMASSR ; \ RTC_ALRMASSR_SS, Sub seconds value
  [then]

  [if]
    \ RTC_ALRMBSSR (read-write) Reset:0x00000000
    : RTC_ALRMBSSR_MASKSS ( %bbbb -- x addr ) 24 lshift RTC_ALRMBSSR ; \ RTC_ALRMBSSR_MASKSS, Mask the most-significant bits starting  at this bit
    : RTC_ALRMBSSR_SS ( %bbbbbbbbbbbbbbb -- x addr ) RTC_ALRMBSSR ; \ RTC_ALRMBSSR_SS, Sub seconds value
  [then]

  execute-defined? use-RTC [if]
    \ RTC_BKP0R (read-write) Reset:0x00000000
    : RTC_BKP0R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP0R ; \ RTC_BKP0R_BKP, BKP
  [then]

  [if]
    \ RTC_BKP1R (read-write) Reset:0x00000000
    : RTC_BKP1R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP1R ; \ RTC_BKP1R_BKP, BKP
  [then]

  execute-defined? use-RTC [if]
    \ RTC_BKP2R (read-write) Reset:0x00000000
    : RTC_BKP2R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP2R ; \ RTC_BKP2R_BKP, BKP
  [then]

  [if]
    \ RTC_BKP3R (read-write) Reset:0x00000000
    : RTC_BKP3R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP3R ; \ RTC_BKP3R_BKP, BKP
  [then]

  execute-defined? use-RTC [if]
    \ RTC_BKP4R (read-write) Reset:0x00000000
    : RTC_BKP4R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP4R ; \ RTC_BKP4R_BKP, BKP
  [then]

  [if]
    \ RTC_BKP5R (read-write) Reset:0x00000000
    : RTC_BKP5R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP5R ; \ RTC_BKP5R_BKP, BKP
  [then]

  execute-defined? use-RTC [if]
    \ RTC_BKP6R (read-write) Reset:0x00000000
    : RTC_BKP6R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP6R ; \ RTC_BKP6R_BKP, BKP
  [then]

  [if]
    \ RTC_BKP7R (read-write) Reset:0x00000000
    : RTC_BKP7R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP7R ; \ RTC_BKP7R_BKP, BKP
  [then]

  execute-defined? use-RTC [if]
    \ RTC_BKP8R (read-write) Reset:0x00000000
    : RTC_BKP8R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP8R ; \ RTC_BKP8R_BKP, BKP
  [then]

  [if]
    \ RTC_BKP9R (read-write) Reset:0x00000000
    : RTC_BKP9R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP9R ; \ RTC_BKP9R_BKP, BKP
  [then]

  execute-defined? use-RTC [if]
    \ RTC_BKP10R (read-write) Reset:0x00000000
    : RTC_BKP10R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP10R ; \ RTC_BKP10R_BKP, BKP
  [then]

  [if]
    \ RTC_BKP11R (read-write) Reset:0x00000000
    : RTC_BKP11R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP11R ; \ RTC_BKP11R_BKP, BKP
  [then]

  execute-defined? use-RTC [if]
    \ RTC_BKP12R (read-write) Reset:0x00000000
    : RTC_BKP12R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP12R ; \ RTC_BKP12R_BKP, BKP
  [then]

  [if]
    \ RTC_BKP13R (read-write) Reset:0x00000000
    : RTC_BKP13R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP13R ; \ RTC_BKP13R_BKP, BKP
  [then]

  execute-defined? use-RTC [if]
    \ RTC_BKP14R (read-write) Reset:0x00000000
    : RTC_BKP14R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP14R ; \ RTC_BKP14R_BKP, BKP
  [then]

  [if]
    \ RTC_BKP15R (read-write) Reset:0x00000000
    : RTC_BKP15R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP15R ; \ RTC_BKP15R_BKP, BKP
  [then]

  execute-defined? use-RTC [if]
    \ RTC_BKP16R (read-write) Reset:0x00000000
    : RTC_BKP16R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP16R ; \ RTC_BKP16R_BKP, BKP
  [then]

  [if]
    \ RTC_BKP17R (read-write) Reset:0x00000000
    : RTC_BKP17R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP17R ; \ RTC_BKP17R_BKP, BKP
  [then]

  execute-defined? use-RTC [if]
    \ RTC_BKP18R (read-write) Reset:0x00000000
    : RTC_BKP18R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP18R ; \ RTC_BKP18R_BKP, BKP
  [then]

  [if]
    \ RTC_BKP19R (read-write) Reset:0x00000000
    : RTC_BKP19R_BKP ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) RTC_BKP19R ; \ RTC_BKP19R_BKP, BKP
  [then]

  execute-defined? use-UART4 [if]
    \ UART4_SR (multiple-access)  Reset:0x00C00000
    : UART4_SR_LBD? ( -- 1|0 ) 8 bit UART4_SR bit@ ; \ UART4_SR_LBD, LIN break detection flag
    : UART4_SR_TXE ( -- x addr ) 7 bit UART4_SR ; \ UART4_SR_TXE, Transmit data register  empty
    : UART4_SR_TC ( -- x addr ) 6 bit UART4_SR ; \ UART4_SR_TC, Transmission complete
    : UART4_SR_RXNE ( -- x addr ) 5 bit UART4_SR ; \ UART4_SR_RXNE, Read data register not  empty
    : UART4_SR_IDLE ( -- x addr ) 4 bit UART4_SR ; \ UART4_SR_IDLE, IDLE line detected
    : UART4_SR_ORE ( -- x addr ) 3 bit UART4_SR ; \ UART4_SR_ORE, Overrun error
    : UART4_SR_NF? ( -- 1|0 ) 2 bit UART4_SR bit@ ; \ UART4_SR_NF, Noise detected flag
    : UART4_SR_FE ( -- x addr ) 1 bit UART4_SR ; \ UART4_SR_FE, Framing error
    : UART4_SR_PE ( -- x addr ) 0 bit UART4_SR ; \ UART4_SR_PE, Parity error
  [then]

  [if]
    \ UART4_DR (read-write) Reset:0x00000000
    : UART4_DR_DR ( %bbbbbbbbb -- x addr ) UART4_DR ; \ UART4_DR_DR, Data value
  [then]

  execute-defined? use-UART4 [if]
    \ UART4_BRR (read-write) Reset:0x0000
    : UART4_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift UART4_BRR ; \ UART4_BRR_DIV_Mantissa, mantissa of USARTDIV
    : UART4_BRR_DIV_Fraction ( %bbbb -- x addr ) UART4_BRR ; \ UART4_BRR_DIV_Fraction, fraction of USARTDIV
  [then]

  [if]
    \ UART4_CR1 (read-write) Reset:0x0000
    : UART4_CR1_OVER8 ( -- x addr ) 15 bit UART4_CR1 ; \ UART4_CR1_OVER8, Oversampling mode
    : UART4_CR1_UE ( -- x addr ) 13 bit UART4_CR1 ; \ UART4_CR1_UE, USART enable
    : UART4_CR1_M ( -- x addr ) 12 bit UART4_CR1 ; \ UART4_CR1_M, Word length
    : UART4_CR1_WAKE ( -- x addr ) 11 bit UART4_CR1 ; \ UART4_CR1_WAKE, Wakeup method
    : UART4_CR1_PCE ( -- x addr ) 10 bit UART4_CR1 ; \ UART4_CR1_PCE, Parity control enable
    : UART4_CR1_PS ( -- x addr ) 9 bit UART4_CR1 ; \ UART4_CR1_PS, Parity selection
    : UART4_CR1_PEIE ( -- x addr ) 8 bit UART4_CR1 ; \ UART4_CR1_PEIE, PE interrupt enable
    : UART4_CR1_TXEIE ( -- x addr ) 7 bit UART4_CR1 ; \ UART4_CR1_TXEIE, TXE interrupt enable
    : UART4_CR1_TCIE ( -- x addr ) 6 bit UART4_CR1 ; \ UART4_CR1_TCIE, Transmission complete interrupt  enable
    : UART4_CR1_RXNEIE ( -- x addr ) 5 bit UART4_CR1 ; \ UART4_CR1_RXNEIE, RXNE interrupt enable
    : UART4_CR1_IDLEIE ( -- x addr ) 4 bit UART4_CR1 ; \ UART4_CR1_IDLEIE, IDLE interrupt enable
    : UART4_CR1_TE ( -- x addr ) 3 bit UART4_CR1 ; \ UART4_CR1_TE, Transmitter enable
    : UART4_CR1_RE ( -- x addr ) 2 bit UART4_CR1 ; \ UART4_CR1_RE, Receiver enable
    : UART4_CR1_RWU ( -- x addr ) 1 bit UART4_CR1 ; \ UART4_CR1_RWU, Receiver wakeup
    : UART4_CR1_SBK ( -- x addr ) 0 bit UART4_CR1 ; \ UART4_CR1_SBK, Send break
  [then]

  execute-defined? use-UART4 [if]
    \ UART4_CR2 (read-write) Reset:0x0000
    : UART4_CR2_LINEN ( -- x addr ) 14 bit UART4_CR2 ; \ UART4_CR2_LINEN, LIN mode enable
    : UART4_CR2_STOP ( %bb -- x addr ) 12 lshift UART4_CR2 ; \ UART4_CR2_STOP, STOP bits
    : UART4_CR2_LBDIE ( -- x addr ) 6 bit UART4_CR2 ; \ UART4_CR2_LBDIE, LIN break detection interrupt  enable
    : UART4_CR2_LBDL ( -- x addr ) 5 bit UART4_CR2 ; \ UART4_CR2_LBDL, lin break detection length
    : UART4_CR2_ADD ( %bbbb -- x addr ) UART4_CR2 ; \ UART4_CR2_ADD, Address of the USART node
  [then]

  [if]
    \ UART4_CR3 (read-write) Reset:0x0000
    : UART4_CR3_ONEBIT ( -- x addr ) 11 bit UART4_CR3 ; \ UART4_CR3_ONEBIT, One sample bit method  enable
    : UART4_CR3_DMAT ( -- x addr ) 7 bit UART4_CR3 ; \ UART4_CR3_DMAT, DMA enable transmitter
    : UART4_CR3_DMAR ( -- x addr ) 6 bit UART4_CR3 ; \ UART4_CR3_DMAR, DMA enable receiver
    : UART4_CR3_HDSEL ( -- x addr ) 3 bit UART4_CR3 ; \ UART4_CR3_HDSEL, Half-duplex selection
    : UART4_CR3_IRLP ( -- x addr ) 2 bit UART4_CR3 ; \ UART4_CR3_IRLP, IrDA low-power
    : UART4_CR3_IREN ( -- x addr ) 1 bit UART4_CR3 ; \ UART4_CR3_IREN, IrDA mode enable
    : UART4_CR3_EIE ( -- x addr ) 0 bit UART4_CR3 ; \ UART4_CR3_EIE, Error interrupt enable
  [then]

  execute-defined? use-UART5 [if]
    \ UART5_SR (multiple-access)  Reset:0x00C00000
    : UART5_SR_LBD? ( -- 1|0 ) 8 bit UART5_SR bit@ ; \ UART5_SR_LBD, LIN break detection flag
    : UART5_SR_TXE ( -- x addr ) 7 bit UART5_SR ; \ UART5_SR_TXE, Transmit data register  empty
    : UART5_SR_TC ( -- x addr ) 6 bit UART5_SR ; \ UART5_SR_TC, Transmission complete
    : UART5_SR_RXNE ( -- x addr ) 5 bit UART5_SR ; \ UART5_SR_RXNE, Read data register not  empty
    : UART5_SR_IDLE ( -- x addr ) 4 bit UART5_SR ; \ UART5_SR_IDLE, IDLE line detected
    : UART5_SR_ORE ( -- x addr ) 3 bit UART5_SR ; \ UART5_SR_ORE, Overrun error
    : UART5_SR_NF? ( -- 1|0 ) 2 bit UART5_SR bit@ ; \ UART5_SR_NF, Noise detected flag
    : UART5_SR_FE ( -- x addr ) 1 bit UART5_SR ; \ UART5_SR_FE, Framing error
    : UART5_SR_PE ( -- x addr ) 0 bit UART5_SR ; \ UART5_SR_PE, Parity error
  [then]

  [if]
    \ UART5_DR (read-write) Reset:0x00000000
    : UART5_DR_DR ( %bbbbbbbbb -- x addr ) UART5_DR ; \ UART5_DR_DR, Data value
  [then]

  execute-defined? use-UART5 [if]
    \ UART5_BRR (read-write) Reset:0x0000
    : UART5_BRR_DIV_Mantissa ( %bbbbbbbbbbb -- x addr ) 4 lshift UART5_BRR ; \ UART5_BRR_DIV_Mantissa, mantissa of USARTDIV
    : UART5_BRR_DIV_Fraction ( %bbbb -- x addr ) UART5_BRR ; \ UART5_BRR_DIV_Fraction, fraction of USARTDIV
  [then]

  [if]
    \ UART5_CR1 (read-write) Reset:0x0000
    : UART5_CR1_OVER8 ( -- x addr ) 15 bit UART5_CR1 ; \ UART5_CR1_OVER8, Oversampling mode
    : UART5_CR1_UE ( -- x addr ) 13 bit UART5_CR1 ; \ UART5_CR1_UE, USART enable
    : UART5_CR1_M ( -- x addr ) 12 bit UART5_CR1 ; \ UART5_CR1_M, Word length
    : UART5_CR1_WAKE ( -- x addr ) 11 bit UART5_CR1 ; \ UART5_CR1_WAKE, Wakeup method
    : UART5_CR1_PCE ( -- x addr ) 10 bit UART5_CR1 ; \ UART5_CR1_PCE, Parity control enable
    : UART5_CR1_PS ( -- x addr ) 9 bit UART5_CR1 ; \ UART5_CR1_PS, Parity selection
    : UART5_CR1_PEIE ( -- x addr ) 8 bit UART5_CR1 ; \ UART5_CR1_PEIE, PE interrupt enable
    : UART5_CR1_TXEIE ( -- x addr ) 7 bit UART5_CR1 ; \ UART5_CR1_TXEIE, TXE interrupt enable
    : UART5_CR1_TCIE ( -- x addr ) 6 bit UART5_CR1 ; \ UART5_CR1_TCIE, Transmission complete interrupt  enable
    : UART5_CR1_RXNEIE ( -- x addr ) 5 bit UART5_CR1 ; \ UART5_CR1_RXNEIE, RXNE interrupt enable
    : UART5_CR1_IDLEIE ( -- x addr ) 4 bit UART5_CR1 ; \ UART5_CR1_IDLEIE, IDLE interrupt enable
    : UART5_CR1_TE ( -- x addr ) 3 bit UART5_CR1 ; \ UART5_CR1_TE, Transmitter enable
    : UART5_CR1_RE ( -- x addr ) 2 bit UART5_CR1 ; \ UART5_CR1_RE, Receiver enable
    : UART5_CR1_RWU ( -- x addr ) 1 bit UART5_CR1 ; \ UART5_CR1_RWU, Receiver wakeup
    : UART5_CR1_SBK ( -- x addr ) 0 bit UART5_CR1 ; \ UART5_CR1_SBK, Send break
  [then]

  execute-defined? use-UART5 [if]
    \ UART5_CR2 (read-write) Reset:0x0000
    : UART5_CR2_LINEN ( -- x addr ) 14 bit UART5_CR2 ; \ UART5_CR2_LINEN, LIN mode enable
    : UART5_CR2_STOP ( %bb -- x addr ) 12 lshift UART5_CR2 ; \ UART5_CR2_STOP, STOP bits
    : UART5_CR2_LBDIE ( -- x addr ) 6 bit UART5_CR2 ; \ UART5_CR2_LBDIE, LIN break detection interrupt  enable
    : UART5_CR2_LBDL ( -- x addr ) 5 bit UART5_CR2 ; \ UART5_CR2_LBDL, lin break detection length
    : UART5_CR2_ADD ( %bbbb -- x addr ) UART5_CR2 ; \ UART5_CR2_ADD, Address of the USART node
  [then]

  [if]
    \ UART5_CR3 (read-write) Reset:0x0000
    : UART5_CR3_ONEBIT ( -- x addr ) 11 bit UART5_CR3 ; \ UART5_CR3_ONEBIT, One sample bit method  enable
    : UART5_CR3_DMAT ( -- x addr ) 7 bit UART5_CR3 ; \ UART5_CR3_DMAT, DMA enable transmitter
    : UART5_CR3_DMAR ( -- x addr ) 6 bit UART5_CR3 ; \ UART5_CR3_DMAR, DMA enable receiver
    : UART5_CR3_HDSEL ( -- x addr ) 3 bit UART5_CR3 ; \ UART5_CR3_HDSEL, Half-duplex selection
    : UART5_CR3_IRLP ( -- x addr ) 2 bit UART5_CR3 ; \ UART5_CR3_IRLP, IrDA low-power
    : UART5_CR3_IREN ( -- x addr ) 1 bit UART5_CR3 ; \ UART5_CR3_IREN, IrDA mode enable
    : UART5_CR3_EIE ( -- x addr ) 0 bit UART5_CR3 ; \ UART5_CR3_EIE, Error interrupt enable
  [then]

  execute-defined? use-C_ADC [if]
    \ C_ADC_CSR (read-only) Reset:0x00000000
    : C_ADC_CSR_OVR3? ( --  1|0 ) 21 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_OVR3, Overrun flag of ADC3
    : C_ADC_CSR_STRT3? ( --  1|0 ) 20 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_STRT3, Regular channel Start flag of ADC  3
    : C_ADC_CSR_JSTRT3? ( --  1|0 ) 19 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JSTRT3, Injected channel Start flag of ADC  3
    : C_ADC_CSR_JEOC3? ( --  1|0 ) 18 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JEOC3, Injected channel end of conversion of  ADC 3
    : C_ADC_CSR_EOC3? ( --  1|0 ) 17 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_EOC3, End of conversion of ADC 3
    : C_ADC_CSR_AWD3? ( --  1|0 ) 16 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_AWD3, Analog watchdog flag of ADC  3
    : C_ADC_CSR_OVR2? ( --  1|0 ) 13 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_OVR2, Overrun flag of ADC 2
    : C_ADC_CSR_STRT2? ( --  1|0 ) 12 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_STRT2, Regular channel Start flag of ADC  2
    : C_ADC_CSR_JSTRT2? ( --  1|0 ) 11 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JSTRT2, Injected channel Start flag of ADC  2
    : C_ADC_CSR_JEOC2? ( --  1|0 ) 10 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JEOC2, Injected channel end of conversion of  ADC 2
    : C_ADC_CSR_EOC2? ( --  1|0 ) 9 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_EOC2, End of conversion of ADC 2
    : C_ADC_CSR_AWD2? ( --  1|0 ) 8 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_AWD2, Analog watchdog flag of ADC  2
    : C_ADC_CSR_OVR1? ( --  1|0 ) 5 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_OVR1, Overrun flag of ADC 1
    : C_ADC_CSR_STRT1? ( --  1|0 ) 4 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_STRT1, Regular channel Start flag of ADC  1
    : C_ADC_CSR_JSTRT1? ( --  1|0 ) 3 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JSTRT1, Injected channel Start flag of ADC  1
    : C_ADC_CSR_JEOC1? ( --  1|0 ) 2 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_JEOC1, Injected channel end of conversion of  ADC 1
    : C_ADC_CSR_EOC1? ( --  1|0 ) 1 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_EOC1, End of conversion of ADC 1
    : C_ADC_CSR_AWD1? ( --  1|0 ) 0 bit C_ADC_CSR bit@ ; \ C_ADC_CSR_AWD1, Analog watchdog flag of ADC  1
  [then]

  [if]
    \ C_ADC_CCR (read-write) Reset:0x00000000
    : C_ADC_CCR_TSVREFE ( -- x addr ) 23 bit C_ADC_CCR ; \ C_ADC_CCR_TSVREFE, Temperature sensor and VREFINT  enable
    : C_ADC_CCR_VBATE ( -- x addr ) 22 bit C_ADC_CCR ; \ C_ADC_CCR_VBATE, VBAT enable
    : C_ADC_CCR_ADCPRE ( %bb -- x addr ) 16 lshift C_ADC_CCR ; \ C_ADC_CCR_ADCPRE, ADC prescaler
    : C_ADC_CCR_DMA ( %bb -- x addr ) 14 lshift C_ADC_CCR ; \ C_ADC_CCR_DMA, Direct memory access mode for multi ADC  mode
    : C_ADC_CCR_DDS ( -- x addr ) 13 bit C_ADC_CCR ; \ C_ADC_CCR_DDS, DMA disable selection for multi-ADC  mode
    : C_ADC_CCR_DELAY ( %bbbb -- x addr ) 8 lshift C_ADC_CCR ; \ C_ADC_CCR_DELAY, Delay between 2 sampling  phases
    : C_ADC_CCR_MULT ( %bbbbb -- x addr ) C_ADC_CCR ; \ C_ADC_CCR_MULT, Multi ADC mode selection
  [then]

  execute-defined? use-C_ADC [if]
    \ C_ADC_CDR (read-only) Reset:0x00000000
    : C_ADC_CDR_DATA2? ( --  x ) 16 lshift C_ADC_CDR @ ; \ C_ADC_CDR_DATA2, 2nd data item of a pair of regular  conversions
    : C_ADC_CDR_DATA1? ( --  x ) C_ADC_CDR @ ; \ C_ADC_CDR_DATA1, 1st data item of a pair of regular  conversions
  [then]

  [if]
    \ TIM1_CR1 (read-write) Reset:0x0000
    : TIM1_CR1_CKD ( %bb -- x addr ) 8 lshift TIM1_CR1 ; \ TIM1_CR1_CKD, Clock division
    : TIM1_CR1_ARPE ( -- x addr ) 7 bit TIM1_CR1 ; \ TIM1_CR1_ARPE, Auto-reload preload enable
    : TIM1_CR1_CMS ( %bb -- x addr ) 5 lshift TIM1_CR1 ; \ TIM1_CR1_CMS, Center-aligned mode  selection
    : TIM1_CR1_DIR ( -- x addr ) 4 bit TIM1_CR1 ; \ TIM1_CR1_DIR, Direction
    : TIM1_CR1_OPM ( -- x addr ) 3 bit TIM1_CR1 ; \ TIM1_CR1_OPM, One-pulse mode
    : TIM1_CR1_URS ( -- x addr ) 2 bit TIM1_CR1 ; \ TIM1_CR1_URS, Update request source
    : TIM1_CR1_UDIS ( -- x addr ) 1 bit TIM1_CR1 ; \ TIM1_CR1_UDIS, Update disable
    : TIM1_CR1_CEN ( -- x addr ) 0 bit TIM1_CR1 ; \ TIM1_CR1_CEN, Counter enable
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM1_CR2 (read-write) Reset:0x0000
    : TIM1_CR2_OIS4 ( -- x addr ) 14 bit TIM1_CR2 ; \ TIM1_CR2_OIS4, Output Idle state 4
    : TIM1_CR2_OIS3N ( -- x addr ) 13 bit TIM1_CR2 ; \ TIM1_CR2_OIS3N, Output Idle state 3
    : TIM1_CR2_OIS3 ( -- x addr ) 12 bit TIM1_CR2 ; \ TIM1_CR2_OIS3, Output Idle state 3
    : TIM1_CR2_OIS2N ( -- x addr ) 11 bit TIM1_CR2 ; \ TIM1_CR2_OIS2N, Output Idle state 2
    : TIM1_CR2_OIS2 ( -- x addr ) 10 bit TIM1_CR2 ; \ TIM1_CR2_OIS2, Output Idle state 2
    : TIM1_CR2_OIS1N ( -- x addr ) 9 bit TIM1_CR2 ; \ TIM1_CR2_OIS1N, Output Idle state 1
    : TIM1_CR2_OIS1 ( -- x addr ) 8 bit TIM1_CR2 ; \ TIM1_CR2_OIS1, Output Idle state 1
    : TIM1_CR2_TI1S ( -- x addr ) 7 bit TIM1_CR2 ; \ TIM1_CR2_TI1S, TI1 selection
    : TIM1_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM1_CR2 ; \ TIM1_CR2_MMS, Master mode selection
    : TIM1_CR2_CCDS ( -- x addr ) 3 bit TIM1_CR2 ; \ TIM1_CR2_CCDS, Capture/compare DMA  selection
    : TIM1_CR2_CCUS ( -- x addr ) 2 bit TIM1_CR2 ; \ TIM1_CR2_CCUS, Capture/compare control update  selection
    : TIM1_CR2_CCPC ( -- x addr ) 0 bit TIM1_CR2 ; \ TIM1_CR2_CCPC, Capture/compare preloaded  control
  [then]

  [if]
    \ TIM1_SMCR (read-write) Reset:0x0000
    : TIM1_SMCR_ETP ( -- x addr ) 15 bit TIM1_SMCR ; \ TIM1_SMCR_ETP, External trigger polarity
    : TIM1_SMCR_ECE ( -- x addr ) 14 bit TIM1_SMCR ; \ TIM1_SMCR_ECE, External clock enable
    : TIM1_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM1_SMCR ; \ TIM1_SMCR_ETPS, External trigger prescaler
    : TIM1_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM1_SMCR ; \ TIM1_SMCR_ETF, External trigger filter
    : TIM1_SMCR_MSM ( -- x addr ) 7 bit TIM1_SMCR ; \ TIM1_SMCR_MSM, Master/Slave mode
    : TIM1_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM1_SMCR ; \ TIM1_SMCR_TS, Trigger selection
    : TIM1_SMCR_SMS ( %bbb -- x addr ) TIM1_SMCR ; \ TIM1_SMCR_SMS, Slave mode selection
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM1_DIER (read-write) Reset:0x0000
    : TIM1_DIER_TDE ( -- x addr ) 14 bit TIM1_DIER ; \ TIM1_DIER_TDE, Trigger DMA request enable
    : TIM1_DIER_COMDE ( -- x addr ) 13 bit TIM1_DIER ; \ TIM1_DIER_COMDE, COM DMA request enable
    : TIM1_DIER_CC4DE ( -- x addr ) 12 bit TIM1_DIER ; \ TIM1_DIER_CC4DE, Capture/Compare 4 DMA request  enable
    : TIM1_DIER_CC3DE ( -- x addr ) 11 bit TIM1_DIER ; \ TIM1_DIER_CC3DE, Capture/Compare 3 DMA request  enable
    : TIM1_DIER_CC2DE ( -- x addr ) 10 bit TIM1_DIER ; \ TIM1_DIER_CC2DE, Capture/Compare 2 DMA request  enable
    : TIM1_DIER_CC1DE ( -- x addr ) 9 bit TIM1_DIER ; \ TIM1_DIER_CC1DE, Capture/Compare 1 DMA request  enable
    : TIM1_DIER_UDE ( -- x addr ) 8 bit TIM1_DIER ; \ TIM1_DIER_UDE, Update DMA request enable
    : TIM1_DIER_TIE ( -- x addr ) 6 bit TIM1_DIER ; \ TIM1_DIER_TIE, Trigger interrupt enable
    : TIM1_DIER_CC4IE ( -- x addr ) 4 bit TIM1_DIER ; \ TIM1_DIER_CC4IE, Capture/Compare 4 interrupt  enable
    : TIM1_DIER_CC3IE ( -- x addr ) 3 bit TIM1_DIER ; \ TIM1_DIER_CC3IE, Capture/Compare 3 interrupt  enable
    : TIM1_DIER_CC2IE ( -- x addr ) 2 bit TIM1_DIER ; \ TIM1_DIER_CC2IE, Capture/Compare 2 interrupt  enable
    : TIM1_DIER_CC1IE ( -- x addr ) 1 bit TIM1_DIER ; \ TIM1_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM1_DIER_UIE ( -- x addr ) 0 bit TIM1_DIER ; \ TIM1_DIER_UIE, Update interrupt enable
    : TIM1_DIER_BIE ( -- x addr ) 7 bit TIM1_DIER ; \ TIM1_DIER_BIE, Break interrupt enable
    : TIM1_DIER_COMIE ( -- x addr ) 5 bit TIM1_DIER ; \ TIM1_DIER_COMIE, COM interrupt enable
  [then]

  [if]
    \ TIM1_SR (read-write) Reset:0x0000
    : TIM1_SR_CC4OF ( -- x addr ) 12 bit TIM1_SR ; \ TIM1_SR_CC4OF, Capture/Compare 4 overcapture  flag
    : TIM1_SR_CC3OF ( -- x addr ) 11 bit TIM1_SR ; \ TIM1_SR_CC3OF, Capture/Compare 3 overcapture  flag
    : TIM1_SR_CC2OF ( -- x addr ) 10 bit TIM1_SR ; \ TIM1_SR_CC2OF, Capture/compare 2 overcapture  flag
    : TIM1_SR_CC1OF ( -- x addr ) 9 bit TIM1_SR ; \ TIM1_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM1_SR_BIF ( -- x addr ) 7 bit TIM1_SR ; \ TIM1_SR_BIF, Break interrupt flag
    : TIM1_SR_TIF ( -- x addr ) 6 bit TIM1_SR ; \ TIM1_SR_TIF, Trigger interrupt flag
    : TIM1_SR_COMIF ( -- x addr ) 5 bit TIM1_SR ; \ TIM1_SR_COMIF, COM interrupt flag
    : TIM1_SR_CC4IF ( -- x addr ) 4 bit TIM1_SR ; \ TIM1_SR_CC4IF, Capture/Compare 4 interrupt  flag
    : TIM1_SR_CC3IF ( -- x addr ) 3 bit TIM1_SR ; \ TIM1_SR_CC3IF, Capture/Compare 3 interrupt  flag
    : TIM1_SR_CC2IF ( -- x addr ) 2 bit TIM1_SR ; \ TIM1_SR_CC2IF, Capture/Compare 2 interrupt  flag
    : TIM1_SR_CC1IF ( -- x addr ) 1 bit TIM1_SR ; \ TIM1_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM1_SR_UIF ( -- x addr ) 0 bit TIM1_SR ; \ TIM1_SR_UIF, Update interrupt flag
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM1_EGR (write-only) Reset:0x0000
    : TIM1_EGR_BG ( -- x addr ) 7 bit TIM1_EGR ; \ TIM1_EGR_BG, Break generation
    : TIM1_EGR_TG ( -- x addr ) 6 bit TIM1_EGR ; \ TIM1_EGR_TG, Trigger generation
    : TIM1_EGR_COMG ( -- x addr ) 5 bit TIM1_EGR ; \ TIM1_EGR_COMG, Capture/Compare control update  generation
    : TIM1_EGR_CC4G ( -- x addr ) 4 bit TIM1_EGR ; \ TIM1_EGR_CC4G, Capture/compare 4  generation
    : TIM1_EGR_CC3G ( -- x addr ) 3 bit TIM1_EGR ; \ TIM1_EGR_CC3G, Capture/compare 3  generation
    : TIM1_EGR_CC2G ( -- x addr ) 2 bit TIM1_EGR ; \ TIM1_EGR_CC2G, Capture/compare 2  generation
    : TIM1_EGR_CC1G ( -- x addr ) 1 bit TIM1_EGR ; \ TIM1_EGR_CC1G, Capture/compare 1  generation
    : TIM1_EGR_UG ( -- x addr ) 0 bit TIM1_EGR ; \ TIM1_EGR_UG, Update generation
  [then]

  [if]
    \ TIM1_CCMR1_Output (read-write) Reset:0x00000000
    : TIM1_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC2CE, Output Compare 2 clear  enable
    : TIM1_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC2M, Output Compare 2 mode
    : TIM1_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC2PE, Output Compare 2 preload  enable
    : TIM1_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC2FE, Output Compare 2 fast  enable
    : TIM1_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_CC2S, Capture/Compare 2  selection
    : TIM1_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC1CE, Output Compare 1 clear  enable
    : TIM1_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC1M, Output Compare 1 mode
    : TIM1_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC1PE, Output Compare 1 preload  enable
    : TIM1_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_OC1FE, Output Compare 1 fast  enable
    : TIM1_CCMR1_Output_CC1S ( %bb -- x addr ) TIM1_CCMR1_Output ; \ TIM1_CCMR1_Output_CC1S, Capture/Compare 1  selection
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM1_CCMR1_Input (read-write) Reset:0x00000000
    : TIM1_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_IC2F, Input capture 2 filter
    : TIM1_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_IC2PCS, Input capture 2 prescaler
    : TIM1_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_CC2S, Capture/Compare 2  selection
    : TIM1_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM1_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM1_CCMR1_Input_CC1S ( %bb -- x addr ) TIM1_CCMR1_Input ; \ TIM1_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  [if]
    \ TIM1_CCMR2_Output (read-write) Reset:0x00000000
    : TIM1_CCMR2_Output_OC4CE ( -- x addr ) 15 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC4CE, Output compare 4 clear  enable
    : TIM1_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC4M, Output compare 4 mode
    : TIM1_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC4PE, Output compare 4 preload  enable
    : TIM1_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC4FE, Output compare 4 fast  enable
    : TIM1_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_CC4S, Capture/Compare 4  selection
    : TIM1_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC3CE, Output compare 3 clear  enable
    : TIM1_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC3M, Output compare 3 mode
    : TIM1_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC3PE, Output compare 3 preload  enable
    : TIM1_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_OC3FE, Output compare 3 fast  enable
    : TIM1_CCMR2_Output_CC3S ( %bb -- x addr ) TIM1_CCMR2_Output ; \ TIM1_CCMR2_Output_CC3S, Capture/Compare 3  selection
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM1_CCMR2_Input (read-write) Reset:0x00000000
    : TIM1_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_IC4F, Input capture 4 filter
    : TIM1_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_IC4PSC, Input capture 4 prescaler
    : TIM1_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_CC4S, Capture/Compare 4  selection
    : TIM1_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_IC3F, Input capture 3 filter
    : TIM1_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_IC3PSC, Input capture 3 prescaler
    : TIM1_CCMR2_Input_CC3S ( %bb -- x addr ) TIM1_CCMR2_Input ; \ TIM1_CCMR2_Input_CC3S, Capture/compare 3  selection
  [then]

  [if]
    \ TIM1_CCER (read-write) Reset:0x0000
    : TIM1_CCER_CC4P ( -- x addr ) 13 bit TIM1_CCER ; \ TIM1_CCER_CC4P, Capture/Compare 3 output  Polarity
    : TIM1_CCER_CC4E ( -- x addr ) 12 bit TIM1_CCER ; \ TIM1_CCER_CC4E, Capture/Compare 4 output  enable
    : TIM1_CCER_CC3NP ( -- x addr ) 11 bit TIM1_CCER ; \ TIM1_CCER_CC3NP, Capture/Compare 3 output  Polarity
    : TIM1_CCER_CC3NE ( -- x addr ) 10 bit TIM1_CCER ; \ TIM1_CCER_CC3NE, Capture/Compare 3 complementary output  enable
    : TIM1_CCER_CC3P ( -- x addr ) 9 bit TIM1_CCER ; \ TIM1_CCER_CC3P, Capture/Compare 3 output  Polarity
    : TIM1_CCER_CC3E ( -- x addr ) 8 bit TIM1_CCER ; \ TIM1_CCER_CC3E, Capture/Compare 3 output  enable
    : TIM1_CCER_CC2NP ( -- x addr ) 7 bit TIM1_CCER ; \ TIM1_CCER_CC2NP, Capture/Compare 2 output  Polarity
    : TIM1_CCER_CC2NE ( -- x addr ) 6 bit TIM1_CCER ; \ TIM1_CCER_CC2NE, Capture/Compare 2 complementary output  enable
    : TIM1_CCER_CC2P ( -- x addr ) 5 bit TIM1_CCER ; \ TIM1_CCER_CC2P, Capture/Compare 2 output  Polarity
    : TIM1_CCER_CC2E ( -- x addr ) 4 bit TIM1_CCER ; \ TIM1_CCER_CC2E, Capture/Compare 2 output  enable
    : TIM1_CCER_CC1NP ( -- x addr ) 3 bit TIM1_CCER ; \ TIM1_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM1_CCER_CC1NE ( -- x addr ) 2 bit TIM1_CCER ; \ TIM1_CCER_CC1NE, Capture/Compare 1 complementary output  enable
    : TIM1_CCER_CC1P ( -- x addr ) 1 bit TIM1_CCER ; \ TIM1_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM1_CCER_CC1E ( -- x addr ) 0 bit TIM1_CCER ; \ TIM1_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM1_CNT (read-write) Reset:0x00000000
    : TIM1_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CNT ; \ TIM1_CNT_CNT, counter value
  [then]

  [if]
    \ TIM1_PSC (read-write) Reset:0x0000
    : TIM1_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_PSC ; \ TIM1_PSC_PSC, Prescaler value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM1_ARR (read-write) Reset:0x00000000
    : TIM1_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_ARR ; \ TIM1_ARR_ARR, Auto-reload value
  [then]

  [if]
    \ TIM1_CCR1 (read-write) Reset:0x00000000
    : TIM1_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CCR1 ; \ TIM1_CCR1_CCR1, Capture/Compare 1 value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM1_CCR2 (read-write) Reset:0x00000000
    : TIM1_CCR2_CCR2 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CCR2 ; \ TIM1_CCR2_CCR2, Capture/Compare 2 value
  [then]

  [if]
    \ TIM1_CCR3 (read-write) Reset:0x00000000
    : TIM1_CCR3_CCR3 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CCR3 ; \ TIM1_CCR3_CCR3, Capture/Compare value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM1_CCR4 (read-write) Reset:0x00000000
    : TIM1_CCR4_CCR4 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_CCR4 ; \ TIM1_CCR4_CCR4, Capture/Compare value
  [then]

  [if]
    \ TIM1_DCR (read-write) Reset:0x0000
    : TIM1_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM1_DCR ; \ TIM1_DCR_DBL, DMA burst length
    : TIM1_DCR_DBA ( %bbbbb -- x addr ) TIM1_DCR ; \ TIM1_DCR_DBA, DMA base address
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM1_DMAR (read-write) Reset:0x0000
    : TIM1_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM1_DMAR ; \ TIM1_DMAR_DMAB, DMA register for burst  accesses
  [then]

  [if]
    \ TIM1_RCR (read-write) Reset:0x0000
    : TIM1_RCR_REP ( %bbbbbbbb -- x addr ) TIM1_RCR ; \ TIM1_RCR_REP, Repetition counter value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM1_BDTR (read-write) Reset:0x0000
    : TIM1_BDTR_MOE ( -- x addr ) 15 bit TIM1_BDTR ; \ TIM1_BDTR_MOE, Main output enable
    : TIM1_BDTR_AOE ( -- x addr ) 14 bit TIM1_BDTR ; \ TIM1_BDTR_AOE, Automatic output enable
    : TIM1_BDTR_BKP ( -- x addr ) 13 bit TIM1_BDTR ; \ TIM1_BDTR_BKP, Break polarity
    : TIM1_BDTR_BKE ( -- x addr ) 12 bit TIM1_BDTR ; \ TIM1_BDTR_BKE, Break enable
    : TIM1_BDTR_OSSR ( -- x addr ) 11 bit TIM1_BDTR ; \ TIM1_BDTR_OSSR, Off-state selection for Run  mode
    : TIM1_BDTR_OSSI ( -- x addr ) 10 bit TIM1_BDTR ; \ TIM1_BDTR_OSSI, Off-state selection for Idle  mode
    : TIM1_BDTR_LOCK ( %bb -- x addr ) 8 lshift TIM1_BDTR ; \ TIM1_BDTR_LOCK, Lock configuration
    : TIM1_BDTR_DTG ( %bbbbbbbb -- x addr ) TIM1_BDTR ; \ TIM1_BDTR_DTG, Dead-time generator setup
  [then]

  [if]
    \ TIM8_CR1 (read-write) Reset:0x0000
    : TIM8_CR1_CKD ( %bb -- x addr ) 8 lshift TIM8_CR1 ; \ TIM8_CR1_CKD, Clock division
    : TIM8_CR1_ARPE ( -- x addr ) 7 bit TIM8_CR1 ; \ TIM8_CR1_ARPE, Auto-reload preload enable
    : TIM8_CR1_CMS ( %bb -- x addr ) 5 lshift TIM8_CR1 ; \ TIM8_CR1_CMS, Center-aligned mode  selection
    : TIM8_CR1_DIR ( -- x addr ) 4 bit TIM8_CR1 ; \ TIM8_CR1_DIR, Direction
    : TIM8_CR1_OPM ( -- x addr ) 3 bit TIM8_CR1 ; \ TIM8_CR1_OPM, One-pulse mode
    : TIM8_CR1_URS ( -- x addr ) 2 bit TIM8_CR1 ; \ TIM8_CR1_URS, Update request source
    : TIM8_CR1_UDIS ( -- x addr ) 1 bit TIM8_CR1 ; \ TIM8_CR1_UDIS, Update disable
    : TIM8_CR1_CEN ( -- x addr ) 0 bit TIM8_CR1 ; \ TIM8_CR1_CEN, Counter enable
  [then]

  execute-defined? use-TIM8 [if]
    \ TIM8_CR2 (read-write) Reset:0x0000
    : TIM8_CR2_OIS4 ( -- x addr ) 14 bit TIM8_CR2 ; \ TIM8_CR2_OIS4, Output Idle state 4
    : TIM8_CR2_OIS3N ( -- x addr ) 13 bit TIM8_CR2 ; \ TIM8_CR2_OIS3N, Output Idle state 3
    : TIM8_CR2_OIS3 ( -- x addr ) 12 bit TIM8_CR2 ; \ TIM8_CR2_OIS3, Output Idle state 3
    : TIM8_CR2_OIS2N ( -- x addr ) 11 bit TIM8_CR2 ; \ TIM8_CR2_OIS2N, Output Idle state 2
    : TIM8_CR2_OIS2 ( -- x addr ) 10 bit TIM8_CR2 ; \ TIM8_CR2_OIS2, Output Idle state 2
    : TIM8_CR2_OIS1N ( -- x addr ) 9 bit TIM8_CR2 ; \ TIM8_CR2_OIS1N, Output Idle state 1
    : TIM8_CR2_OIS1 ( -- x addr ) 8 bit TIM8_CR2 ; \ TIM8_CR2_OIS1, Output Idle state 1
    : TIM8_CR2_TI1S ( -- x addr ) 7 bit TIM8_CR2 ; \ TIM8_CR2_TI1S, TI1 selection
    : TIM8_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM8_CR2 ; \ TIM8_CR2_MMS, Master mode selection
    : TIM8_CR2_CCDS ( -- x addr ) 3 bit TIM8_CR2 ; \ TIM8_CR2_CCDS, Capture/compare DMA  selection
    : TIM8_CR2_CCUS ( -- x addr ) 2 bit TIM8_CR2 ; \ TIM8_CR2_CCUS, Capture/compare control update  selection
    : TIM8_CR2_CCPC ( -- x addr ) 0 bit TIM8_CR2 ; \ TIM8_CR2_CCPC, Capture/compare preloaded  control
  [then]

  [if]
    \ TIM8_SMCR (read-write) Reset:0x0000
    : TIM8_SMCR_ETP ( -- x addr ) 15 bit TIM8_SMCR ; \ TIM8_SMCR_ETP, External trigger polarity
    : TIM8_SMCR_ECE ( -- x addr ) 14 bit TIM8_SMCR ; \ TIM8_SMCR_ECE, External clock enable
    : TIM8_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM8_SMCR ; \ TIM8_SMCR_ETPS, External trigger prescaler
    : TIM8_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM8_SMCR ; \ TIM8_SMCR_ETF, External trigger filter
    : TIM8_SMCR_MSM ( -- x addr ) 7 bit TIM8_SMCR ; \ TIM8_SMCR_MSM, Master/Slave mode
    : TIM8_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM8_SMCR ; \ TIM8_SMCR_TS, Trigger selection
    : TIM8_SMCR_SMS ( %bbb -- x addr ) TIM8_SMCR ; \ TIM8_SMCR_SMS, Slave mode selection
  [then]

  execute-defined? use-TIM8 [if]
    \ TIM8_DIER (read-write) Reset:0x0000
    : TIM8_DIER_TDE ( -- x addr ) 14 bit TIM8_DIER ; \ TIM8_DIER_TDE, Trigger DMA request enable
    : TIM8_DIER_COMDE ( -- x addr ) 13 bit TIM8_DIER ; \ TIM8_DIER_COMDE, COM DMA request enable
    : TIM8_DIER_CC4DE ( -- x addr ) 12 bit TIM8_DIER ; \ TIM8_DIER_CC4DE, Capture/Compare 4 DMA request  enable
    : TIM8_DIER_CC3DE ( -- x addr ) 11 bit TIM8_DIER ; \ TIM8_DIER_CC3DE, Capture/Compare 3 DMA request  enable
    : TIM8_DIER_CC2DE ( -- x addr ) 10 bit TIM8_DIER ; \ TIM8_DIER_CC2DE, Capture/Compare 2 DMA request  enable
    : TIM8_DIER_CC1DE ( -- x addr ) 9 bit TIM8_DIER ; \ TIM8_DIER_CC1DE, Capture/Compare 1 DMA request  enable
    : TIM8_DIER_UDE ( -- x addr ) 8 bit TIM8_DIER ; \ TIM8_DIER_UDE, Update DMA request enable
    : TIM8_DIER_TIE ( -- x addr ) 6 bit TIM8_DIER ; \ TIM8_DIER_TIE, Trigger interrupt enable
    : TIM8_DIER_CC4IE ( -- x addr ) 4 bit TIM8_DIER ; \ TIM8_DIER_CC4IE, Capture/Compare 4 interrupt  enable
    : TIM8_DIER_CC3IE ( -- x addr ) 3 bit TIM8_DIER ; \ TIM8_DIER_CC3IE, Capture/Compare 3 interrupt  enable
    : TIM8_DIER_CC2IE ( -- x addr ) 2 bit TIM8_DIER ; \ TIM8_DIER_CC2IE, Capture/Compare 2 interrupt  enable
    : TIM8_DIER_CC1IE ( -- x addr ) 1 bit TIM8_DIER ; \ TIM8_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM8_DIER_UIE ( -- x addr ) 0 bit TIM8_DIER ; \ TIM8_DIER_UIE, Update interrupt enable
    : TIM8_DIER_BIE ( -- x addr ) 7 bit TIM8_DIER ; \ TIM8_DIER_BIE, Break interrupt enable
    : TIM8_DIER_COMIE ( -- x addr ) 5 bit TIM8_DIER ; \ TIM8_DIER_COMIE, COM interrupt enable
  [then]

  [if]
    \ TIM8_SR (read-write) Reset:0x0000
    : TIM8_SR_CC4OF ( -- x addr ) 12 bit TIM8_SR ; \ TIM8_SR_CC4OF, Capture/Compare 4 overcapture  flag
    : TIM8_SR_CC3OF ( -- x addr ) 11 bit TIM8_SR ; \ TIM8_SR_CC3OF, Capture/Compare 3 overcapture  flag
    : TIM8_SR_CC2OF ( -- x addr ) 10 bit TIM8_SR ; \ TIM8_SR_CC2OF, Capture/compare 2 overcapture  flag
    : TIM8_SR_CC1OF ( -- x addr ) 9 bit TIM8_SR ; \ TIM8_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM8_SR_BIF ( -- x addr ) 7 bit TIM8_SR ; \ TIM8_SR_BIF, Break interrupt flag
    : TIM8_SR_TIF ( -- x addr ) 6 bit TIM8_SR ; \ TIM8_SR_TIF, Trigger interrupt flag
    : TIM8_SR_COMIF ( -- x addr ) 5 bit TIM8_SR ; \ TIM8_SR_COMIF, COM interrupt flag
    : TIM8_SR_CC4IF ( -- x addr ) 4 bit TIM8_SR ; \ TIM8_SR_CC4IF, Capture/Compare 4 interrupt  flag
    : TIM8_SR_CC3IF ( -- x addr ) 3 bit TIM8_SR ; \ TIM8_SR_CC3IF, Capture/Compare 3 interrupt  flag
    : TIM8_SR_CC2IF ( -- x addr ) 2 bit TIM8_SR ; \ TIM8_SR_CC2IF, Capture/Compare 2 interrupt  flag
    : TIM8_SR_CC1IF ( -- x addr ) 1 bit TIM8_SR ; \ TIM8_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM8_SR_UIF ( -- x addr ) 0 bit TIM8_SR ; \ TIM8_SR_UIF, Update interrupt flag
  [then]

  execute-defined? use-TIM8 [if]
    \ TIM8_EGR (write-only) Reset:0x0000
    : TIM8_EGR_BG ( -- x addr ) 7 bit TIM8_EGR ; \ TIM8_EGR_BG, Break generation
    : TIM8_EGR_TG ( -- x addr ) 6 bit TIM8_EGR ; \ TIM8_EGR_TG, Trigger generation
    : TIM8_EGR_COMG ( -- x addr ) 5 bit TIM8_EGR ; \ TIM8_EGR_COMG, Capture/Compare control update  generation
    : TIM8_EGR_CC4G ( -- x addr ) 4 bit TIM8_EGR ; \ TIM8_EGR_CC4G, Capture/compare 4  generation
    : TIM8_EGR_CC3G ( -- x addr ) 3 bit TIM8_EGR ; \ TIM8_EGR_CC3G, Capture/compare 3  generation
    : TIM8_EGR_CC2G ( -- x addr ) 2 bit TIM8_EGR ; \ TIM8_EGR_CC2G, Capture/compare 2  generation
    : TIM8_EGR_CC1G ( -- x addr ) 1 bit TIM8_EGR ; \ TIM8_EGR_CC1G, Capture/compare 1  generation
    : TIM8_EGR_UG ( -- x addr ) 0 bit TIM8_EGR ; \ TIM8_EGR_UG, Update generation
  [then]

  [if]
    \ TIM8_CCMR1_Output (read-write) Reset:0x00000000
    : TIM8_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC2CE, Output Compare 2 clear  enable
    : TIM8_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC2M, Output Compare 2 mode
    : TIM8_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC2PE, Output Compare 2 preload  enable
    : TIM8_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC2FE, Output Compare 2 fast  enable
    : TIM8_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_CC2S, Capture/Compare 2  selection
    : TIM8_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC1CE, Output Compare 1 clear  enable
    : TIM8_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC1M, Output Compare 1 mode
    : TIM8_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC1PE, Output Compare 1 preload  enable
    : TIM8_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_OC1FE, Output Compare 1 fast  enable
    : TIM8_CCMR1_Output_CC1S ( %bb -- x addr ) TIM8_CCMR1_Output ; \ TIM8_CCMR1_Output_CC1S, Capture/Compare 1  selection
  [then]

  execute-defined? use-TIM8 [if]
    \ TIM8_CCMR1_Input (read-write) Reset:0x00000000
    : TIM8_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_IC2F, Input capture 2 filter
    : TIM8_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_IC2PCS, Input capture 2 prescaler
    : TIM8_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_CC2S, Capture/Compare 2  selection
    : TIM8_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM8_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM8_CCMR1_Input_CC1S ( %bb -- x addr ) TIM8_CCMR1_Input ; \ TIM8_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  [if]
    \ TIM8_CCMR2_Output (read-write) Reset:0x00000000
    : TIM8_CCMR2_Output_OC4CE ( -- x addr ) 15 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC4CE, Output compare 4 clear  enable
    : TIM8_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC4M, Output compare 4 mode
    : TIM8_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC4PE, Output compare 4 preload  enable
    : TIM8_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC4FE, Output compare 4 fast  enable
    : TIM8_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_CC4S, Capture/Compare 4  selection
    : TIM8_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC3CE, Output compare 3 clear  enable
    : TIM8_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC3M, Output compare 3 mode
    : TIM8_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC3PE, Output compare 3 preload  enable
    : TIM8_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_OC3FE, Output compare 3 fast  enable
    : TIM8_CCMR2_Output_CC3S ( %bb -- x addr ) TIM8_CCMR2_Output ; \ TIM8_CCMR2_Output_CC3S, Capture/Compare 3  selection
  [then]

  execute-defined? use-TIM8 [if]
    \ TIM8_CCMR2_Input (read-write) Reset:0x00000000
    : TIM8_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_IC4F, Input capture 4 filter
    : TIM8_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_IC4PSC, Input capture 4 prescaler
    : TIM8_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_CC4S, Capture/Compare 4  selection
    : TIM8_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_IC3F, Input capture 3 filter
    : TIM8_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_IC3PSC, Input capture 3 prescaler
    : TIM8_CCMR2_Input_CC3S ( %bb -- x addr ) TIM8_CCMR2_Input ; \ TIM8_CCMR2_Input_CC3S, Capture/compare 3  selection
  [then]

  [if]
    \ TIM8_CCER (read-write) Reset:0x0000
    : TIM8_CCER_CC4P ( -- x addr ) 13 bit TIM8_CCER ; \ TIM8_CCER_CC4P, Capture/Compare 3 output  Polarity
    : TIM8_CCER_CC4E ( -- x addr ) 12 bit TIM8_CCER ; \ TIM8_CCER_CC4E, Capture/Compare 4 output  enable
    : TIM8_CCER_CC3NP ( -- x addr ) 11 bit TIM8_CCER ; \ TIM8_CCER_CC3NP, Capture/Compare 3 output  Polarity
    : TIM8_CCER_CC3NE ( -- x addr ) 10 bit TIM8_CCER ; \ TIM8_CCER_CC3NE, Capture/Compare 3 complementary output  enable
    : TIM8_CCER_CC3P ( -- x addr ) 9 bit TIM8_CCER ; \ TIM8_CCER_CC3P, Capture/Compare 3 output  Polarity
    : TIM8_CCER_CC3E ( -- x addr ) 8 bit TIM8_CCER ; \ TIM8_CCER_CC3E, Capture/Compare 3 output  enable
    : TIM8_CCER_CC2NP ( -- x addr ) 7 bit TIM8_CCER ; \ TIM8_CCER_CC2NP, Capture/Compare 2 output  Polarity
    : TIM8_CCER_CC2NE ( -- x addr ) 6 bit TIM8_CCER ; \ TIM8_CCER_CC2NE, Capture/Compare 2 complementary output  enable
    : TIM8_CCER_CC2P ( -- x addr ) 5 bit TIM8_CCER ; \ TIM8_CCER_CC2P, Capture/Compare 2 output  Polarity
    : TIM8_CCER_CC2E ( -- x addr ) 4 bit TIM8_CCER ; \ TIM8_CCER_CC2E, Capture/Compare 2 output  enable
    : TIM8_CCER_CC1NP ( -- x addr ) 3 bit TIM8_CCER ; \ TIM8_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM8_CCER_CC1NE ( -- x addr ) 2 bit TIM8_CCER ; \ TIM8_CCER_CC1NE, Capture/Compare 1 complementary output  enable
    : TIM8_CCER_CC1P ( -- x addr ) 1 bit TIM8_CCER ; \ TIM8_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM8_CCER_CC1E ( -- x addr ) 0 bit TIM8_CCER ; \ TIM8_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  execute-defined? use-TIM8 [if]
    \ TIM8_CNT (read-write) Reset:0x00000000
    : TIM8_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CNT ; \ TIM8_CNT_CNT, counter value
  [then]

  [if]
    \ TIM8_PSC (read-write) Reset:0x0000
    : TIM8_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_PSC ; \ TIM8_PSC_PSC, Prescaler value
  [then]

  execute-defined? use-TIM8 [if]
    \ TIM8_ARR (read-write) Reset:0x00000000
    : TIM8_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_ARR ; \ TIM8_ARR_ARR, Auto-reload value
  [then]

  [if]
    \ TIM8_CCR1 (read-write) Reset:0x00000000
    : TIM8_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CCR1 ; \ TIM8_CCR1_CCR1, Capture/Compare 1 value
  [then]

  execute-defined? use-TIM8 [if]
    \ TIM8_CCR2 (read-write) Reset:0x00000000
    : TIM8_CCR2_CCR2 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CCR2 ; \ TIM8_CCR2_CCR2, Capture/Compare 2 value
  [then]

  [if]
    \ TIM8_CCR3 (read-write) Reset:0x00000000
    : TIM8_CCR3_CCR3 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CCR3 ; \ TIM8_CCR3_CCR3, Capture/Compare value
  [then]

  execute-defined? use-TIM8 [if]
    \ TIM8_CCR4 (read-write) Reset:0x00000000
    : TIM8_CCR4_CCR4 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_CCR4 ; \ TIM8_CCR4_CCR4, Capture/Compare value
  [then]

  [if]
    \ TIM8_DCR (read-write) Reset:0x0000
    : TIM8_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM8_DCR ; \ TIM8_DCR_DBL, DMA burst length
    : TIM8_DCR_DBA ( %bbbbb -- x addr ) TIM8_DCR ; \ TIM8_DCR_DBA, DMA base address
  [then]

  execute-defined? use-TIM8 [if]
    \ TIM8_DMAR (read-write) Reset:0x0000
    : TIM8_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM8_DMAR ; \ TIM8_DMAR_DMAB, DMA register for burst  accesses
  [then]

  [if]
    \ TIM8_RCR (read-write) Reset:0x0000
    : TIM8_RCR_REP ( %bbbbbbbb -- x addr ) TIM8_RCR ; \ TIM8_RCR_REP, Repetition counter value
  [then]

  execute-defined? use-TIM8 [if]
    \ TIM8_BDTR (read-write) Reset:0x0000
    : TIM8_BDTR_MOE ( -- x addr ) 15 bit TIM8_BDTR ; \ TIM8_BDTR_MOE, Main output enable
    : TIM8_BDTR_AOE ( -- x addr ) 14 bit TIM8_BDTR ; \ TIM8_BDTR_AOE, Automatic output enable
    : TIM8_BDTR_BKP ( -- x addr ) 13 bit TIM8_BDTR ; \ TIM8_BDTR_BKP, Break polarity
    : TIM8_BDTR_BKE ( -- x addr ) 12 bit TIM8_BDTR ; \ TIM8_BDTR_BKE, Break enable
    : TIM8_BDTR_OSSR ( -- x addr ) 11 bit TIM8_BDTR ; \ TIM8_BDTR_OSSR, Off-state selection for Run  mode
    : TIM8_BDTR_OSSI ( -- x addr ) 10 bit TIM8_BDTR ; \ TIM8_BDTR_OSSI, Off-state selection for Idle  mode
    : TIM8_BDTR_LOCK ( %bb -- x addr ) 8 lshift TIM8_BDTR ; \ TIM8_BDTR_LOCK, Lock configuration
    : TIM8_BDTR_DTG ( %bbbbbbbb -- x addr ) TIM8_BDTR ; \ TIM8_BDTR_DTG, Dead-time generator setup
  [then]

  [if]
    \ TIM2_CR1 (read-write) Reset:0x0000
    : TIM2_CR1_CKD ( %bb -- x addr ) 8 lshift TIM2_CR1 ; \ TIM2_CR1_CKD, Clock division
    : TIM2_CR1_ARPE ( -- x addr ) 7 bit TIM2_CR1 ; \ TIM2_CR1_ARPE, Auto-reload preload enable
    : TIM2_CR1_CMS ( %bb -- x addr ) 5 lshift TIM2_CR1 ; \ TIM2_CR1_CMS, Center-aligned mode  selection
    : TIM2_CR1_DIR ( -- x addr ) 4 bit TIM2_CR1 ; \ TIM2_CR1_DIR, Direction
    : TIM2_CR1_OPM ( -- x addr ) 3 bit TIM2_CR1 ; \ TIM2_CR1_OPM, One-pulse mode
    : TIM2_CR1_URS ( -- x addr ) 2 bit TIM2_CR1 ; \ TIM2_CR1_URS, Update request source
    : TIM2_CR1_UDIS ( -- x addr ) 1 bit TIM2_CR1 ; \ TIM2_CR1_UDIS, Update disable
    : TIM2_CR1_CEN ( -- x addr ) 0 bit TIM2_CR1 ; \ TIM2_CR1_CEN, Counter enable
  [then]

  execute-defined? use-TIM2 [if]
    \ TIM2_CR2 (read-write) Reset:0x0000
    : TIM2_CR2_TI1S ( -- x addr ) 7 bit TIM2_CR2 ; \ TIM2_CR2_TI1S, TI1 selection
    : TIM2_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM2_CR2 ; \ TIM2_CR2_MMS, Master mode selection
    : TIM2_CR2_CCDS ( -- x addr ) 3 bit TIM2_CR2 ; \ TIM2_CR2_CCDS, Capture/compare DMA  selection
  [then]

  [if]
    \ TIM2_SMCR (read-write) Reset:0x0000
    : TIM2_SMCR_ETP ( -- x addr ) 15 bit TIM2_SMCR ; \ TIM2_SMCR_ETP, External trigger polarity
    : TIM2_SMCR_ECE ( -- x addr ) 14 bit TIM2_SMCR ; \ TIM2_SMCR_ECE, External clock enable
    : TIM2_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM2_SMCR ; \ TIM2_SMCR_ETPS, External trigger prescaler
    : TIM2_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM2_SMCR ; \ TIM2_SMCR_ETF, External trigger filter
    : TIM2_SMCR_MSM ( -- x addr ) 7 bit TIM2_SMCR ; \ TIM2_SMCR_MSM, Master/Slave mode
    : TIM2_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM2_SMCR ; \ TIM2_SMCR_TS, Trigger selection
    : TIM2_SMCR_SMS ( %bbb -- x addr ) TIM2_SMCR ; \ TIM2_SMCR_SMS, Slave mode selection
  [then]

  execute-defined? use-TIM2 [if]
    \ TIM2_DIER (read-write) Reset:0x0000
    : TIM2_DIER_TDE ( -- x addr ) 14 bit TIM2_DIER ; \ TIM2_DIER_TDE, Trigger DMA request enable
    : TIM2_DIER_CC4DE ( -- x addr ) 12 bit TIM2_DIER ; \ TIM2_DIER_CC4DE, Capture/Compare 4 DMA request  enable
    : TIM2_DIER_CC3DE ( -- x addr ) 11 bit TIM2_DIER ; \ TIM2_DIER_CC3DE, Capture/Compare 3 DMA request  enable
    : TIM2_DIER_CC2DE ( -- x addr ) 10 bit TIM2_DIER ; \ TIM2_DIER_CC2DE, Capture/Compare 2 DMA request  enable
    : TIM2_DIER_CC1DE ( -- x addr ) 9 bit TIM2_DIER ; \ TIM2_DIER_CC1DE, Capture/Compare 1 DMA request  enable
    : TIM2_DIER_UDE ( -- x addr ) 8 bit TIM2_DIER ; \ TIM2_DIER_UDE, Update DMA request enable
    : TIM2_DIER_TIE ( -- x addr ) 6 bit TIM2_DIER ; \ TIM2_DIER_TIE, Trigger interrupt enable
    : TIM2_DIER_CC4IE ( -- x addr ) 4 bit TIM2_DIER ; \ TIM2_DIER_CC4IE, Capture/Compare 4 interrupt  enable
    : TIM2_DIER_CC3IE ( -- x addr ) 3 bit TIM2_DIER ; \ TIM2_DIER_CC3IE, Capture/Compare 3 interrupt  enable
    : TIM2_DIER_CC2IE ( -- x addr ) 2 bit TIM2_DIER ; \ TIM2_DIER_CC2IE, Capture/Compare 2 interrupt  enable
    : TIM2_DIER_CC1IE ( -- x addr ) 1 bit TIM2_DIER ; \ TIM2_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM2_DIER_UIE ( -- x addr ) 0 bit TIM2_DIER ; \ TIM2_DIER_UIE, Update interrupt enable
  [then]

  [if]
    \ TIM2_SR (read-write) Reset:0x0000
    : TIM2_SR_CC4OF ( -- x addr ) 12 bit TIM2_SR ; \ TIM2_SR_CC4OF, Capture/Compare 4 overcapture  flag
    : TIM2_SR_CC3OF ( -- x addr ) 11 bit TIM2_SR ; \ TIM2_SR_CC3OF, Capture/Compare 3 overcapture  flag
    : TIM2_SR_CC2OF ( -- x addr ) 10 bit TIM2_SR ; \ TIM2_SR_CC2OF, Capture/compare 2 overcapture  flag
    : TIM2_SR_CC1OF ( -- x addr ) 9 bit TIM2_SR ; \ TIM2_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM2_SR_TIF ( -- x addr ) 6 bit TIM2_SR ; \ TIM2_SR_TIF, Trigger interrupt flag
    : TIM2_SR_CC4IF ( -- x addr ) 4 bit TIM2_SR ; \ TIM2_SR_CC4IF, Capture/Compare 4 interrupt  flag
    : TIM2_SR_CC3IF ( -- x addr ) 3 bit TIM2_SR ; \ TIM2_SR_CC3IF, Capture/Compare 3 interrupt  flag
    : TIM2_SR_CC2IF ( -- x addr ) 2 bit TIM2_SR ; \ TIM2_SR_CC2IF, Capture/Compare 2 interrupt  flag
    : TIM2_SR_CC1IF ( -- x addr ) 1 bit TIM2_SR ; \ TIM2_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM2_SR_UIF ( -- x addr ) 0 bit TIM2_SR ; \ TIM2_SR_UIF, Update interrupt flag
  [then]

  execute-defined? use-TIM2 [if]
    \ TIM2_EGR (write-only) Reset:0x0000
    : TIM2_EGR_TG ( -- x addr ) 6 bit TIM2_EGR ; \ TIM2_EGR_TG, Trigger generation
    : TIM2_EGR_CC4G ( -- x addr ) 4 bit TIM2_EGR ; \ TIM2_EGR_CC4G, Capture/compare 4  generation
    : TIM2_EGR_CC3G ( -- x addr ) 3 bit TIM2_EGR ; \ TIM2_EGR_CC3G, Capture/compare 3  generation
    : TIM2_EGR_CC2G ( -- x addr ) 2 bit TIM2_EGR ; \ TIM2_EGR_CC2G, Capture/compare 2  generation
    : TIM2_EGR_CC1G ( -- x addr ) 1 bit TIM2_EGR ; \ TIM2_EGR_CC1G, Capture/compare 1  generation
    : TIM2_EGR_UG ( -- x addr ) 0 bit TIM2_EGR ; \ TIM2_EGR_UG, Update generation
  [then]

  [if]
    \ TIM2_CCMR1_Output (read-write) Reset:0x00000000
    : TIM2_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC2CE, OC2CE
    : TIM2_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC2M, OC2M
    : TIM2_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC2PE, OC2PE
    : TIM2_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC2FE, OC2FE
    : TIM2_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_CC2S, CC2S
    : TIM2_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC1CE, OC1CE
    : TIM2_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC1M, OC1M
    : TIM2_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC1PE, OC1PE
    : TIM2_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_OC1FE, OC1FE
    : TIM2_CCMR1_Output_CC1S ( %bb -- x addr ) TIM2_CCMR1_Output ; \ TIM2_CCMR1_Output_CC1S, CC1S
  [then]

  execute-defined? use-TIM2 [if]
    \ TIM2_CCMR1_Input (read-write) Reset:0x00000000
    : TIM2_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_IC2F, Input capture 2 filter
    : TIM2_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_IC2PCS, Input capture 2 prescaler
    : TIM2_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_CC2S, Capture/Compare 2  selection
    : TIM2_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM2_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM2_CCMR1_Input_CC1S ( %bb -- x addr ) TIM2_CCMR1_Input ; \ TIM2_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  [if]
    \ TIM2_CCMR2_Output (read-write) Reset:0x00000000
    : TIM2_CCMR2_Output_O24CE ( -- x addr ) 15 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_O24CE, O24CE
    : TIM2_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC4M, OC4M
    : TIM2_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC4PE, OC4PE
    : TIM2_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC4FE, OC4FE
    : TIM2_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_CC4S, CC4S
    : TIM2_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC3CE, OC3CE
    : TIM2_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC3M, OC3M
    : TIM2_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC3PE, OC3PE
    : TIM2_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_OC3FE, OC3FE
    : TIM2_CCMR2_Output_CC3S ( %bb -- x addr ) TIM2_CCMR2_Output ; \ TIM2_CCMR2_Output_CC3S, CC3S
  [then]

  execute-defined? use-TIM2 [if]
    \ TIM2_CCMR2_Input (read-write) Reset:0x00000000
    : TIM2_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_IC4F, Input capture 4 filter
    : TIM2_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_IC4PSC, Input capture 4 prescaler
    : TIM2_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_CC4S, Capture/Compare 4  selection
    : TIM2_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_IC3F, Input capture 3 filter
    : TIM2_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_IC3PSC, Input capture 3 prescaler
    : TIM2_CCMR2_Input_CC3S ( %bb -- x addr ) TIM2_CCMR2_Input ; \ TIM2_CCMR2_Input_CC3S, Capture/compare 3  selection
  [then]

  [if]
    \ TIM2_CCER (read-write) Reset:0x0000
    : TIM2_CCER_CC4NP ( -- x addr ) 15 bit TIM2_CCER ; \ TIM2_CCER_CC4NP, Capture/Compare 4 output  Polarity
    : TIM2_CCER_CC4P ( -- x addr ) 13 bit TIM2_CCER ; \ TIM2_CCER_CC4P, Capture/Compare 3 output  Polarity
    : TIM2_CCER_CC4E ( -- x addr ) 12 bit TIM2_CCER ; \ TIM2_CCER_CC4E, Capture/Compare 4 output  enable
    : TIM2_CCER_CC3NP ( -- x addr ) 11 bit TIM2_CCER ; \ TIM2_CCER_CC3NP, Capture/Compare 3 output  Polarity
    : TIM2_CCER_CC3P ( -- x addr ) 9 bit TIM2_CCER ; \ TIM2_CCER_CC3P, Capture/Compare 3 output  Polarity
    : TIM2_CCER_CC3E ( -- x addr ) 8 bit TIM2_CCER ; \ TIM2_CCER_CC3E, Capture/Compare 3 output  enable
    : TIM2_CCER_CC2NP ( -- x addr ) 7 bit TIM2_CCER ; \ TIM2_CCER_CC2NP, Capture/Compare 2 output  Polarity
    : TIM2_CCER_CC2P ( -- x addr ) 5 bit TIM2_CCER ; \ TIM2_CCER_CC2P, Capture/Compare 2 output  Polarity
    : TIM2_CCER_CC2E ( -- x addr ) 4 bit TIM2_CCER ; \ TIM2_CCER_CC2E, Capture/Compare 2 output  enable
    : TIM2_CCER_CC1NP ( -- x addr ) 3 bit TIM2_CCER ; \ TIM2_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM2_CCER_CC1P ( -- x addr ) 1 bit TIM2_CCER ; \ TIM2_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM2_CCER_CC1E ( -- x addr ) 0 bit TIM2_CCER ; \ TIM2_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  execute-defined? use-TIM2 [if]
    \ TIM2_CNT (read-write) Reset:0x00000000
    : TIM2_CNT_CNT_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_CNT ; \ TIM2_CNT_CNT_H, High counter value
    : TIM2_CNT_CNT_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_CNT ; \ TIM2_CNT_CNT_L, Low counter value
  [then]

  [if]
    \ TIM2_PSC (read-write) Reset:0x0000
    : TIM2_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_PSC ; \ TIM2_PSC_PSC, Prescaler value
  [then]

  execute-defined? use-TIM2 [if]
    \ TIM2_ARR (read-write) Reset:0x00000000
    : TIM2_ARR_ARR_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_ARR ; \ TIM2_ARR_ARR_H, High Auto-reload value
    : TIM2_ARR_ARR_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_ARR ; \ TIM2_ARR_ARR_L, Low Auto-reload value
  [then]

  [if]
    \ TIM2_CCR1 (read-write) Reset:0x00000000
    : TIM2_CCR1_CCR1_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_CCR1 ; \ TIM2_CCR1_CCR1_H, High Capture/Compare 1  value
    : TIM2_CCR1_CCR1_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_CCR1 ; \ TIM2_CCR1_CCR1_L, Low Capture/Compare 1  value
  [then]

  execute-defined? use-TIM2 [if]
    \ TIM2_CCR2 (read-write) Reset:0x00000000
    : TIM2_CCR2_CCR2_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_CCR2 ; \ TIM2_CCR2_CCR2_H, High Capture/Compare 2  value
    : TIM2_CCR2_CCR2_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_CCR2 ; \ TIM2_CCR2_CCR2_L, Low Capture/Compare 2  value
  [then]

  [if]
    \ TIM2_CCR3 (read-write) Reset:0x00000000
    : TIM2_CCR3_CCR3_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_CCR3 ; \ TIM2_CCR3_CCR3_H, High Capture/Compare value
    : TIM2_CCR3_CCR3_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_CCR3 ; \ TIM2_CCR3_CCR3_L, Low Capture/Compare value
  [then]

  execute-defined? use-TIM2 [if]
    \ TIM2_CCR4 (read-write) Reset:0x00000000
    : TIM2_CCR4_CCR4_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM2_CCR4 ; \ TIM2_CCR4_CCR4_H, High Capture/Compare value
    : TIM2_CCR4_CCR4_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_CCR4 ; \ TIM2_CCR4_CCR4_L, Low Capture/Compare value
  [then]

  [if]
    \ TIM2_DCR (read-write) Reset:0x0000
    : TIM2_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM2_DCR ; \ TIM2_DCR_DBL, DMA burst length
    : TIM2_DCR_DBA ( %bbbbb -- x addr ) TIM2_DCR ; \ TIM2_DCR_DBA, DMA base address
  [then]

  execute-defined? use-TIM2 [if]
    \ TIM2_DMAR (read-write) Reset:0x0000
    : TIM2_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM2_DMAR ; \ TIM2_DMAR_DMAB, DMA register for burst  accesses
  [then]

  [if]
    \ TIM2_OR (read-write) Reset:0x0000
    : TIM2_OR_ITR1_RMP ( %bb -- x addr ) 10 lshift TIM2_OR ; \ TIM2_OR_ITR1_RMP, Timer Input 4 remap
  [then]

  execute-defined? use-TIM3 [if]
    \ TIM3_CR1 (read-write) Reset:0x0000
    : TIM3_CR1_CKD ( %bb -- x addr ) 8 lshift TIM3_CR1 ; \ TIM3_CR1_CKD, Clock division
    : TIM3_CR1_ARPE ( -- x addr ) 7 bit TIM3_CR1 ; \ TIM3_CR1_ARPE, Auto-reload preload enable
    : TIM3_CR1_CMS ( %bb -- x addr ) 5 lshift TIM3_CR1 ; \ TIM3_CR1_CMS, Center-aligned mode  selection
    : TIM3_CR1_DIR ( -- x addr ) 4 bit TIM3_CR1 ; \ TIM3_CR1_DIR, Direction
    : TIM3_CR1_OPM ( -- x addr ) 3 bit TIM3_CR1 ; \ TIM3_CR1_OPM, One-pulse mode
    : TIM3_CR1_URS ( -- x addr ) 2 bit TIM3_CR1 ; \ TIM3_CR1_URS, Update request source
    : TIM3_CR1_UDIS ( -- x addr ) 1 bit TIM3_CR1 ; \ TIM3_CR1_UDIS, Update disable
    : TIM3_CR1_CEN ( -- x addr ) 0 bit TIM3_CR1 ; \ TIM3_CR1_CEN, Counter enable
  [then]

  [if]
    \ TIM3_CR2 (read-write) Reset:0x0000
    : TIM3_CR2_TI1S ( -- x addr ) 7 bit TIM3_CR2 ; \ TIM3_CR2_TI1S, TI1 selection
    : TIM3_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM3_CR2 ; \ TIM3_CR2_MMS, Master mode selection
    : TIM3_CR2_CCDS ( -- x addr ) 3 bit TIM3_CR2 ; \ TIM3_CR2_CCDS, Capture/compare DMA  selection
  [then]

  execute-defined? use-TIM3 [if]
    \ TIM3_SMCR (read-write) Reset:0x0000
    : TIM3_SMCR_ETP ( -- x addr ) 15 bit TIM3_SMCR ; \ TIM3_SMCR_ETP, External trigger polarity
    : TIM3_SMCR_ECE ( -- x addr ) 14 bit TIM3_SMCR ; \ TIM3_SMCR_ECE, External clock enable
    : TIM3_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM3_SMCR ; \ TIM3_SMCR_ETPS, External trigger prescaler
    : TIM3_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM3_SMCR ; \ TIM3_SMCR_ETF, External trigger filter
    : TIM3_SMCR_MSM ( -- x addr ) 7 bit TIM3_SMCR ; \ TIM3_SMCR_MSM, Master/Slave mode
    : TIM3_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM3_SMCR ; \ TIM3_SMCR_TS, Trigger selection
    : TIM3_SMCR_SMS ( %bbb -- x addr ) TIM3_SMCR ; \ TIM3_SMCR_SMS, Slave mode selection
  [then]

  [if]
    \ TIM3_DIER (read-write) Reset:0x0000
    : TIM3_DIER_TDE ( -- x addr ) 14 bit TIM3_DIER ; \ TIM3_DIER_TDE, Trigger DMA request enable
    : TIM3_DIER_CC4DE ( -- x addr ) 12 bit TIM3_DIER ; \ TIM3_DIER_CC4DE, Capture/Compare 4 DMA request  enable
    : TIM3_DIER_CC3DE ( -- x addr ) 11 bit TIM3_DIER ; \ TIM3_DIER_CC3DE, Capture/Compare 3 DMA request  enable
    : TIM3_DIER_CC2DE ( -- x addr ) 10 bit TIM3_DIER ; \ TIM3_DIER_CC2DE, Capture/Compare 2 DMA request  enable
    : TIM3_DIER_CC1DE ( -- x addr ) 9 bit TIM3_DIER ; \ TIM3_DIER_CC1DE, Capture/Compare 1 DMA request  enable
    : TIM3_DIER_UDE ( -- x addr ) 8 bit TIM3_DIER ; \ TIM3_DIER_UDE, Update DMA request enable
    : TIM3_DIER_TIE ( -- x addr ) 6 bit TIM3_DIER ; \ TIM3_DIER_TIE, Trigger interrupt enable
    : TIM3_DIER_CC4IE ( -- x addr ) 4 bit TIM3_DIER ; \ TIM3_DIER_CC4IE, Capture/Compare 4 interrupt  enable
    : TIM3_DIER_CC3IE ( -- x addr ) 3 bit TIM3_DIER ; \ TIM3_DIER_CC3IE, Capture/Compare 3 interrupt  enable
    : TIM3_DIER_CC2IE ( -- x addr ) 2 bit TIM3_DIER ; \ TIM3_DIER_CC2IE, Capture/Compare 2 interrupt  enable
    : TIM3_DIER_CC1IE ( -- x addr ) 1 bit TIM3_DIER ; \ TIM3_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM3_DIER_UIE ( -- x addr ) 0 bit TIM3_DIER ; \ TIM3_DIER_UIE, Update interrupt enable
  [then]

  execute-defined? use-TIM3 [if]
    \ TIM3_SR (read-write) Reset:0x0000
    : TIM3_SR_CC4OF ( -- x addr ) 12 bit TIM3_SR ; \ TIM3_SR_CC4OF, Capture/Compare 4 overcapture  flag
    : TIM3_SR_CC3OF ( -- x addr ) 11 bit TIM3_SR ; \ TIM3_SR_CC3OF, Capture/Compare 3 overcapture  flag
    : TIM3_SR_CC2OF ( -- x addr ) 10 bit TIM3_SR ; \ TIM3_SR_CC2OF, Capture/compare 2 overcapture  flag
    : TIM3_SR_CC1OF ( -- x addr ) 9 bit TIM3_SR ; \ TIM3_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM3_SR_TIF ( -- x addr ) 6 bit TIM3_SR ; \ TIM3_SR_TIF, Trigger interrupt flag
    : TIM3_SR_CC4IF ( -- x addr ) 4 bit TIM3_SR ; \ TIM3_SR_CC4IF, Capture/Compare 4 interrupt  flag
    : TIM3_SR_CC3IF ( -- x addr ) 3 bit TIM3_SR ; \ TIM3_SR_CC3IF, Capture/Compare 3 interrupt  flag
    : TIM3_SR_CC2IF ( -- x addr ) 2 bit TIM3_SR ; \ TIM3_SR_CC2IF, Capture/Compare 2 interrupt  flag
    : TIM3_SR_CC1IF ( -- x addr ) 1 bit TIM3_SR ; \ TIM3_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM3_SR_UIF ( -- x addr ) 0 bit TIM3_SR ; \ TIM3_SR_UIF, Update interrupt flag
  [then]

  [if]
    \ TIM3_EGR (write-only) Reset:0x0000
    : TIM3_EGR_TG ( -- x addr ) 6 bit TIM3_EGR ; \ TIM3_EGR_TG, Trigger generation
    : TIM3_EGR_CC4G ( -- x addr ) 4 bit TIM3_EGR ; \ TIM3_EGR_CC4G, Capture/compare 4  generation
    : TIM3_EGR_CC3G ( -- x addr ) 3 bit TIM3_EGR ; \ TIM3_EGR_CC3G, Capture/compare 3  generation
    : TIM3_EGR_CC2G ( -- x addr ) 2 bit TIM3_EGR ; \ TIM3_EGR_CC2G, Capture/compare 2  generation
    : TIM3_EGR_CC1G ( -- x addr ) 1 bit TIM3_EGR ; \ TIM3_EGR_CC1G, Capture/compare 1  generation
    : TIM3_EGR_UG ( -- x addr ) 0 bit TIM3_EGR ; \ TIM3_EGR_UG, Update generation
  [then]

  execute-defined? use-TIM3 [if]
    \ TIM3_CCMR1_Output (read-write) Reset:0x00000000
    : TIM3_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC2CE, OC2CE
    : TIM3_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC2M, OC2M
    : TIM3_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC2PE, OC2PE
    : TIM3_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC2FE, OC2FE
    : TIM3_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_CC2S, CC2S
    : TIM3_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC1CE, OC1CE
    : TIM3_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC1M, OC1M
    : TIM3_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC1PE, OC1PE
    : TIM3_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_OC1FE, OC1FE
    : TIM3_CCMR1_Output_CC1S ( %bb -- x addr ) TIM3_CCMR1_Output ; \ TIM3_CCMR1_Output_CC1S, CC1S
  [then]

  [if]
    \ TIM3_CCMR1_Input (read-write) Reset:0x00000000
    : TIM3_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_IC2F, Input capture 2 filter
    : TIM3_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_IC2PCS, Input capture 2 prescaler
    : TIM3_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_CC2S, Capture/Compare 2  selection
    : TIM3_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM3_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM3_CCMR1_Input_CC1S ( %bb -- x addr ) TIM3_CCMR1_Input ; \ TIM3_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  execute-defined? use-TIM3 [if]
    \ TIM3_CCMR2_Output (read-write) Reset:0x00000000
    : TIM3_CCMR2_Output_O24CE ( -- x addr ) 15 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_O24CE, O24CE
    : TIM3_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC4M, OC4M
    : TIM3_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC4PE, OC4PE
    : TIM3_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC4FE, OC4FE
    : TIM3_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_CC4S, CC4S
    : TIM3_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC3CE, OC3CE
    : TIM3_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC3M, OC3M
    : TIM3_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC3PE, OC3PE
    : TIM3_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_OC3FE, OC3FE
    : TIM3_CCMR2_Output_CC3S ( %bb -- x addr ) TIM3_CCMR2_Output ; \ TIM3_CCMR2_Output_CC3S, CC3S
  [then]

  [if]
    \ TIM3_CCMR2_Input (read-write) Reset:0x00000000
    : TIM3_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_IC4F, Input capture 4 filter
    : TIM3_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_IC4PSC, Input capture 4 prescaler
    : TIM3_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_CC4S, Capture/Compare 4  selection
    : TIM3_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_IC3F, Input capture 3 filter
    : TIM3_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_IC3PSC, Input capture 3 prescaler
    : TIM3_CCMR2_Input_CC3S ( %bb -- x addr ) TIM3_CCMR2_Input ; \ TIM3_CCMR2_Input_CC3S, Capture/compare 3  selection
  [then]

  execute-defined? use-TIM3 [if]
    \ TIM3_CCER (read-write) Reset:0x0000
    : TIM3_CCER_CC4NP ( -- x addr ) 15 bit TIM3_CCER ; \ TIM3_CCER_CC4NP, Capture/Compare 4 output  Polarity
    : TIM3_CCER_CC4P ( -- x addr ) 13 bit TIM3_CCER ; \ TIM3_CCER_CC4P, Capture/Compare 3 output  Polarity
    : TIM3_CCER_CC4E ( -- x addr ) 12 bit TIM3_CCER ; \ TIM3_CCER_CC4E, Capture/Compare 4 output  enable
    : TIM3_CCER_CC3NP ( -- x addr ) 11 bit TIM3_CCER ; \ TIM3_CCER_CC3NP, Capture/Compare 3 output  Polarity
    : TIM3_CCER_CC3P ( -- x addr ) 9 bit TIM3_CCER ; \ TIM3_CCER_CC3P, Capture/Compare 3 output  Polarity
    : TIM3_CCER_CC3E ( -- x addr ) 8 bit TIM3_CCER ; \ TIM3_CCER_CC3E, Capture/Compare 3 output  enable
    : TIM3_CCER_CC2NP ( -- x addr ) 7 bit TIM3_CCER ; \ TIM3_CCER_CC2NP, Capture/Compare 2 output  Polarity
    : TIM3_CCER_CC2P ( -- x addr ) 5 bit TIM3_CCER ; \ TIM3_CCER_CC2P, Capture/Compare 2 output  Polarity
    : TIM3_CCER_CC2E ( -- x addr ) 4 bit TIM3_CCER ; \ TIM3_CCER_CC2E, Capture/Compare 2 output  enable
    : TIM3_CCER_CC1NP ( -- x addr ) 3 bit TIM3_CCER ; \ TIM3_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM3_CCER_CC1P ( -- x addr ) 1 bit TIM3_CCER ; \ TIM3_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM3_CCER_CC1E ( -- x addr ) 0 bit TIM3_CCER ; \ TIM3_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  [if]
    \ TIM3_CNT (read-write) Reset:0x00000000
    : TIM3_CNT_CNT_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_CNT ; \ TIM3_CNT_CNT_H, High counter value
    : TIM3_CNT_CNT_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_CNT ; \ TIM3_CNT_CNT_L, Low counter value
  [then]

  execute-defined? use-TIM3 [if]
    \ TIM3_PSC (read-write) Reset:0x0000
    : TIM3_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_PSC ; \ TIM3_PSC_PSC, Prescaler value
  [then]

  [if]
    \ TIM3_ARR (read-write) Reset:0x00000000
    : TIM3_ARR_ARR_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_ARR ; \ TIM3_ARR_ARR_H, High Auto-reload value
    : TIM3_ARR_ARR_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_ARR ; \ TIM3_ARR_ARR_L, Low Auto-reload value
  [then]

  execute-defined? use-TIM3 [if]
    \ TIM3_CCR1 (read-write) Reset:0x00000000
    : TIM3_CCR1_CCR1_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_CCR1 ; \ TIM3_CCR1_CCR1_H, High Capture/Compare 1  value
    : TIM3_CCR1_CCR1_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_CCR1 ; \ TIM3_CCR1_CCR1_L, Low Capture/Compare 1  value
  [then]

  [if]
    \ TIM3_CCR2 (read-write) Reset:0x00000000
    : TIM3_CCR2_CCR2_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_CCR2 ; \ TIM3_CCR2_CCR2_H, High Capture/Compare 2  value
    : TIM3_CCR2_CCR2_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_CCR2 ; \ TIM3_CCR2_CCR2_L, Low Capture/Compare 2  value
  [then]

  execute-defined? use-TIM3 [if]
    \ TIM3_CCR3 (read-write) Reset:0x00000000
    : TIM3_CCR3_CCR3_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_CCR3 ; \ TIM3_CCR3_CCR3_H, High Capture/Compare value
    : TIM3_CCR3_CCR3_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_CCR3 ; \ TIM3_CCR3_CCR3_L, Low Capture/Compare value
  [then]

  [if]
    \ TIM3_CCR4 (read-write) Reset:0x00000000
    : TIM3_CCR4_CCR4_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM3_CCR4 ; \ TIM3_CCR4_CCR4_H, High Capture/Compare value
    : TIM3_CCR4_CCR4_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_CCR4 ; \ TIM3_CCR4_CCR4_L, Low Capture/Compare value
  [then]

  execute-defined? use-TIM3 [if]
    \ TIM3_DCR (read-write) Reset:0x0000
    : TIM3_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM3_DCR ; \ TIM3_DCR_DBL, DMA burst length
    : TIM3_DCR_DBA ( %bbbbb -- x addr ) TIM3_DCR ; \ TIM3_DCR_DBA, DMA base address
  [then]

  [if]
    \ TIM3_DMAR (read-write) Reset:0x0000
    : TIM3_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM3_DMAR ; \ TIM3_DMAR_DMAB, DMA register for burst  accesses
  [then]

  execute-defined? use-TIM4 [if]
    \ TIM4_CR1 (read-write) Reset:0x0000
    : TIM4_CR1_CKD ( %bb -- x addr ) 8 lshift TIM4_CR1 ; \ TIM4_CR1_CKD, Clock division
    : TIM4_CR1_ARPE ( -- x addr ) 7 bit TIM4_CR1 ; \ TIM4_CR1_ARPE, Auto-reload preload enable
    : TIM4_CR1_CMS ( %bb -- x addr ) 5 lshift TIM4_CR1 ; \ TIM4_CR1_CMS, Center-aligned mode  selection
    : TIM4_CR1_DIR ( -- x addr ) 4 bit TIM4_CR1 ; \ TIM4_CR1_DIR, Direction
    : TIM4_CR1_OPM ( -- x addr ) 3 bit TIM4_CR1 ; \ TIM4_CR1_OPM, One-pulse mode
    : TIM4_CR1_URS ( -- x addr ) 2 bit TIM4_CR1 ; \ TIM4_CR1_URS, Update request source
    : TIM4_CR1_UDIS ( -- x addr ) 1 bit TIM4_CR1 ; \ TIM4_CR1_UDIS, Update disable
    : TIM4_CR1_CEN ( -- x addr ) 0 bit TIM4_CR1 ; \ TIM4_CR1_CEN, Counter enable
  [then]

  [if]
    \ TIM4_CR2 (read-write) Reset:0x0000
    : TIM4_CR2_TI1S ( -- x addr ) 7 bit TIM4_CR2 ; \ TIM4_CR2_TI1S, TI1 selection
    : TIM4_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM4_CR2 ; \ TIM4_CR2_MMS, Master mode selection
    : TIM4_CR2_CCDS ( -- x addr ) 3 bit TIM4_CR2 ; \ TIM4_CR2_CCDS, Capture/compare DMA  selection
  [then]

  execute-defined? use-TIM4 [if]
    \ TIM4_SMCR (read-write) Reset:0x0000
    : TIM4_SMCR_ETP ( -- x addr ) 15 bit TIM4_SMCR ; \ TIM4_SMCR_ETP, External trigger polarity
    : TIM4_SMCR_ECE ( -- x addr ) 14 bit TIM4_SMCR ; \ TIM4_SMCR_ECE, External clock enable
    : TIM4_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM4_SMCR ; \ TIM4_SMCR_ETPS, External trigger prescaler
    : TIM4_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM4_SMCR ; \ TIM4_SMCR_ETF, External trigger filter
    : TIM4_SMCR_MSM ( -- x addr ) 7 bit TIM4_SMCR ; \ TIM4_SMCR_MSM, Master/Slave mode
    : TIM4_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM4_SMCR ; \ TIM4_SMCR_TS, Trigger selection
    : TIM4_SMCR_SMS ( %bbb -- x addr ) TIM4_SMCR ; \ TIM4_SMCR_SMS, Slave mode selection
  [then]

  [if]
    \ TIM4_DIER (read-write) Reset:0x0000
    : TIM4_DIER_TDE ( -- x addr ) 14 bit TIM4_DIER ; \ TIM4_DIER_TDE, Trigger DMA request enable
    : TIM4_DIER_CC4DE ( -- x addr ) 12 bit TIM4_DIER ; \ TIM4_DIER_CC4DE, Capture/Compare 4 DMA request  enable
    : TIM4_DIER_CC3DE ( -- x addr ) 11 bit TIM4_DIER ; \ TIM4_DIER_CC3DE, Capture/Compare 3 DMA request  enable
    : TIM4_DIER_CC2DE ( -- x addr ) 10 bit TIM4_DIER ; \ TIM4_DIER_CC2DE, Capture/Compare 2 DMA request  enable
    : TIM4_DIER_CC1DE ( -- x addr ) 9 bit TIM4_DIER ; \ TIM4_DIER_CC1DE, Capture/Compare 1 DMA request  enable
    : TIM4_DIER_UDE ( -- x addr ) 8 bit TIM4_DIER ; \ TIM4_DIER_UDE, Update DMA request enable
    : TIM4_DIER_TIE ( -- x addr ) 6 bit TIM4_DIER ; \ TIM4_DIER_TIE, Trigger interrupt enable
    : TIM4_DIER_CC4IE ( -- x addr ) 4 bit TIM4_DIER ; \ TIM4_DIER_CC4IE, Capture/Compare 4 interrupt  enable
    : TIM4_DIER_CC3IE ( -- x addr ) 3 bit TIM4_DIER ; \ TIM4_DIER_CC3IE, Capture/Compare 3 interrupt  enable
    : TIM4_DIER_CC2IE ( -- x addr ) 2 bit TIM4_DIER ; \ TIM4_DIER_CC2IE, Capture/Compare 2 interrupt  enable
    : TIM4_DIER_CC1IE ( -- x addr ) 1 bit TIM4_DIER ; \ TIM4_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM4_DIER_UIE ( -- x addr ) 0 bit TIM4_DIER ; \ TIM4_DIER_UIE, Update interrupt enable
  [then]

  execute-defined? use-TIM4 [if]
    \ TIM4_SR (read-write) Reset:0x0000
    : TIM4_SR_CC4OF ( -- x addr ) 12 bit TIM4_SR ; \ TIM4_SR_CC4OF, Capture/Compare 4 overcapture  flag
    : TIM4_SR_CC3OF ( -- x addr ) 11 bit TIM4_SR ; \ TIM4_SR_CC3OF, Capture/Compare 3 overcapture  flag
    : TIM4_SR_CC2OF ( -- x addr ) 10 bit TIM4_SR ; \ TIM4_SR_CC2OF, Capture/compare 2 overcapture  flag
    : TIM4_SR_CC1OF ( -- x addr ) 9 bit TIM4_SR ; \ TIM4_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM4_SR_TIF ( -- x addr ) 6 bit TIM4_SR ; \ TIM4_SR_TIF, Trigger interrupt flag
    : TIM4_SR_CC4IF ( -- x addr ) 4 bit TIM4_SR ; \ TIM4_SR_CC4IF, Capture/Compare 4 interrupt  flag
    : TIM4_SR_CC3IF ( -- x addr ) 3 bit TIM4_SR ; \ TIM4_SR_CC3IF, Capture/Compare 3 interrupt  flag
    : TIM4_SR_CC2IF ( -- x addr ) 2 bit TIM4_SR ; \ TIM4_SR_CC2IF, Capture/Compare 2 interrupt  flag
    : TIM4_SR_CC1IF ( -- x addr ) 1 bit TIM4_SR ; \ TIM4_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM4_SR_UIF ( -- x addr ) 0 bit TIM4_SR ; \ TIM4_SR_UIF, Update interrupt flag
  [then]

  [if]
    \ TIM4_EGR (write-only) Reset:0x0000
    : TIM4_EGR_TG ( -- x addr ) 6 bit TIM4_EGR ; \ TIM4_EGR_TG, Trigger generation
    : TIM4_EGR_CC4G ( -- x addr ) 4 bit TIM4_EGR ; \ TIM4_EGR_CC4G, Capture/compare 4  generation
    : TIM4_EGR_CC3G ( -- x addr ) 3 bit TIM4_EGR ; \ TIM4_EGR_CC3G, Capture/compare 3  generation
    : TIM4_EGR_CC2G ( -- x addr ) 2 bit TIM4_EGR ; \ TIM4_EGR_CC2G, Capture/compare 2  generation
    : TIM4_EGR_CC1G ( -- x addr ) 1 bit TIM4_EGR ; \ TIM4_EGR_CC1G, Capture/compare 1  generation
    : TIM4_EGR_UG ( -- x addr ) 0 bit TIM4_EGR ; \ TIM4_EGR_UG, Update generation
  [then]

  execute-defined? use-TIM4 [if]
    \ TIM4_CCMR1_Output (read-write) Reset:0x00000000
    : TIM4_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC2CE, OC2CE
    : TIM4_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC2M, OC2M
    : TIM4_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC2PE, OC2PE
    : TIM4_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC2FE, OC2FE
    : TIM4_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_CC2S, CC2S
    : TIM4_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC1CE, OC1CE
    : TIM4_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC1M, OC1M
    : TIM4_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC1PE, OC1PE
    : TIM4_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_OC1FE, OC1FE
    : TIM4_CCMR1_Output_CC1S ( %bb -- x addr ) TIM4_CCMR1_Output ; \ TIM4_CCMR1_Output_CC1S, CC1S
  [then]

  [if]
    \ TIM4_CCMR1_Input (read-write) Reset:0x00000000
    : TIM4_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_IC2F, Input capture 2 filter
    : TIM4_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_IC2PCS, Input capture 2 prescaler
    : TIM4_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_CC2S, Capture/Compare 2  selection
    : TIM4_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM4_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM4_CCMR1_Input_CC1S ( %bb -- x addr ) TIM4_CCMR1_Input ; \ TIM4_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  execute-defined? use-TIM4 [if]
    \ TIM4_CCMR2_Output (read-write) Reset:0x00000000
    : TIM4_CCMR2_Output_O24CE ( -- x addr ) 15 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_O24CE, O24CE
    : TIM4_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC4M, OC4M
    : TIM4_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC4PE, OC4PE
    : TIM4_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC4FE, OC4FE
    : TIM4_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_CC4S, CC4S
    : TIM4_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC3CE, OC3CE
    : TIM4_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC3M, OC3M
    : TIM4_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC3PE, OC3PE
    : TIM4_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_OC3FE, OC3FE
    : TIM4_CCMR2_Output_CC3S ( %bb -- x addr ) TIM4_CCMR2_Output ; \ TIM4_CCMR2_Output_CC3S, CC3S
  [then]

  [if]
    \ TIM4_CCMR2_Input (read-write) Reset:0x00000000
    : TIM4_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_IC4F, Input capture 4 filter
    : TIM4_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_IC4PSC, Input capture 4 prescaler
    : TIM4_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_CC4S, Capture/Compare 4  selection
    : TIM4_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_IC3F, Input capture 3 filter
    : TIM4_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_IC3PSC, Input capture 3 prescaler
    : TIM4_CCMR2_Input_CC3S ( %bb -- x addr ) TIM4_CCMR2_Input ; \ TIM4_CCMR2_Input_CC3S, Capture/compare 3  selection
  [then]

  execute-defined? use-TIM4 [if]
    \ TIM4_CCER (read-write) Reset:0x0000
    : TIM4_CCER_CC4NP ( -- x addr ) 15 bit TIM4_CCER ; \ TIM4_CCER_CC4NP, Capture/Compare 4 output  Polarity
    : TIM4_CCER_CC4P ( -- x addr ) 13 bit TIM4_CCER ; \ TIM4_CCER_CC4P, Capture/Compare 3 output  Polarity
    : TIM4_CCER_CC4E ( -- x addr ) 12 bit TIM4_CCER ; \ TIM4_CCER_CC4E, Capture/Compare 4 output  enable
    : TIM4_CCER_CC3NP ( -- x addr ) 11 bit TIM4_CCER ; \ TIM4_CCER_CC3NP, Capture/Compare 3 output  Polarity
    : TIM4_CCER_CC3P ( -- x addr ) 9 bit TIM4_CCER ; \ TIM4_CCER_CC3P, Capture/Compare 3 output  Polarity
    : TIM4_CCER_CC3E ( -- x addr ) 8 bit TIM4_CCER ; \ TIM4_CCER_CC3E, Capture/Compare 3 output  enable
    : TIM4_CCER_CC2NP ( -- x addr ) 7 bit TIM4_CCER ; \ TIM4_CCER_CC2NP, Capture/Compare 2 output  Polarity
    : TIM4_CCER_CC2P ( -- x addr ) 5 bit TIM4_CCER ; \ TIM4_CCER_CC2P, Capture/Compare 2 output  Polarity
    : TIM4_CCER_CC2E ( -- x addr ) 4 bit TIM4_CCER ; \ TIM4_CCER_CC2E, Capture/Compare 2 output  enable
    : TIM4_CCER_CC1NP ( -- x addr ) 3 bit TIM4_CCER ; \ TIM4_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM4_CCER_CC1P ( -- x addr ) 1 bit TIM4_CCER ; \ TIM4_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM4_CCER_CC1E ( -- x addr ) 0 bit TIM4_CCER ; \ TIM4_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  [if]
    \ TIM4_CNT (read-write) Reset:0x00000000
    : TIM4_CNT_CNT_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_CNT ; \ TIM4_CNT_CNT_H, High counter value
    : TIM4_CNT_CNT_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_CNT ; \ TIM4_CNT_CNT_L, Low counter value
  [then]

  execute-defined? use-TIM4 [if]
    \ TIM4_PSC (read-write) Reset:0x0000
    : TIM4_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_PSC ; \ TIM4_PSC_PSC, Prescaler value
  [then]

  [if]
    \ TIM4_ARR (read-write) Reset:0x00000000
    : TIM4_ARR_ARR_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_ARR ; \ TIM4_ARR_ARR_H, High Auto-reload value
    : TIM4_ARR_ARR_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_ARR ; \ TIM4_ARR_ARR_L, Low Auto-reload value
  [then]

  execute-defined? use-TIM4 [if]
    \ TIM4_CCR1 (read-write) Reset:0x00000000
    : TIM4_CCR1_CCR1_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_CCR1 ; \ TIM4_CCR1_CCR1_H, High Capture/Compare 1  value
    : TIM4_CCR1_CCR1_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_CCR1 ; \ TIM4_CCR1_CCR1_L, Low Capture/Compare 1  value
  [then]

  [if]
    \ TIM4_CCR2 (read-write) Reset:0x00000000
    : TIM4_CCR2_CCR2_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_CCR2 ; \ TIM4_CCR2_CCR2_H, High Capture/Compare 2  value
    : TIM4_CCR2_CCR2_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_CCR2 ; \ TIM4_CCR2_CCR2_L, Low Capture/Compare 2  value
  [then]

  execute-defined? use-TIM4 [if]
    \ TIM4_CCR3 (read-write) Reset:0x00000000
    : TIM4_CCR3_CCR3_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_CCR3 ; \ TIM4_CCR3_CCR3_H, High Capture/Compare value
    : TIM4_CCR3_CCR3_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_CCR3 ; \ TIM4_CCR3_CCR3_L, Low Capture/Compare value
  [then]

  [if]
    \ TIM4_CCR4 (read-write) Reset:0x00000000
    : TIM4_CCR4_CCR4_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM4_CCR4 ; \ TIM4_CCR4_CCR4_H, High Capture/Compare value
    : TIM4_CCR4_CCR4_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_CCR4 ; \ TIM4_CCR4_CCR4_L, Low Capture/Compare value
  [then]

  execute-defined? use-TIM4 [if]
    \ TIM4_DCR (read-write) Reset:0x0000
    : TIM4_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM4_DCR ; \ TIM4_DCR_DBL, DMA burst length
    : TIM4_DCR_DBA ( %bbbbb -- x addr ) TIM4_DCR ; \ TIM4_DCR_DBA, DMA base address
  [then]

  [if]
    \ TIM4_DMAR (read-write) Reset:0x0000
    : TIM4_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM4_DMAR ; \ TIM4_DMAR_DMAB, DMA register for burst  accesses
  [then]

  execute-defined? use-TIM5 [if]
    \ TIM5_CR1 (read-write) Reset:0x0000
    : TIM5_CR1_CKD ( %bb -- x addr ) 8 lshift TIM5_CR1 ; \ TIM5_CR1_CKD, Clock division
    : TIM5_CR1_ARPE ( -- x addr ) 7 bit TIM5_CR1 ; \ TIM5_CR1_ARPE, Auto-reload preload enable
    : TIM5_CR1_CMS ( %bb -- x addr ) 5 lshift TIM5_CR1 ; \ TIM5_CR1_CMS, Center-aligned mode  selection
    : TIM5_CR1_DIR ( -- x addr ) 4 bit TIM5_CR1 ; \ TIM5_CR1_DIR, Direction
    : TIM5_CR1_OPM ( -- x addr ) 3 bit TIM5_CR1 ; \ TIM5_CR1_OPM, One-pulse mode
    : TIM5_CR1_URS ( -- x addr ) 2 bit TIM5_CR1 ; \ TIM5_CR1_URS, Update request source
    : TIM5_CR1_UDIS ( -- x addr ) 1 bit TIM5_CR1 ; \ TIM5_CR1_UDIS, Update disable
    : TIM5_CR1_CEN ( -- x addr ) 0 bit TIM5_CR1 ; \ TIM5_CR1_CEN, Counter enable
  [then]

  [if]
    \ TIM5_CR2 (read-write) Reset:0x0000
    : TIM5_CR2_TI1S ( -- x addr ) 7 bit TIM5_CR2 ; \ TIM5_CR2_TI1S, TI1 selection
    : TIM5_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM5_CR2 ; \ TIM5_CR2_MMS, Master mode selection
    : TIM5_CR2_CCDS ( -- x addr ) 3 bit TIM5_CR2 ; \ TIM5_CR2_CCDS, Capture/compare DMA  selection
  [then]

  execute-defined? use-TIM5 [if]
    \ TIM5_SMCR (read-write) Reset:0x0000
    : TIM5_SMCR_ETP ( -- x addr ) 15 bit TIM5_SMCR ; \ TIM5_SMCR_ETP, External trigger polarity
    : TIM5_SMCR_ECE ( -- x addr ) 14 bit TIM5_SMCR ; \ TIM5_SMCR_ECE, External clock enable
    : TIM5_SMCR_ETPS ( %bb -- x addr ) 12 lshift TIM5_SMCR ; \ TIM5_SMCR_ETPS, External trigger prescaler
    : TIM5_SMCR_ETF ( %bbbb -- x addr ) 8 lshift TIM5_SMCR ; \ TIM5_SMCR_ETF, External trigger filter
    : TIM5_SMCR_MSM ( -- x addr ) 7 bit TIM5_SMCR ; \ TIM5_SMCR_MSM, Master/Slave mode
    : TIM5_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM5_SMCR ; \ TIM5_SMCR_TS, Trigger selection
    : TIM5_SMCR_SMS ( %bbb -- x addr ) TIM5_SMCR ; \ TIM5_SMCR_SMS, Slave mode selection
  [then]

  [if]
    \ TIM5_DIER (read-write) Reset:0x0000
    : TIM5_DIER_TDE ( -- x addr ) 14 bit TIM5_DIER ; \ TIM5_DIER_TDE, Trigger DMA request enable
    : TIM5_DIER_CC4DE ( -- x addr ) 12 bit TIM5_DIER ; \ TIM5_DIER_CC4DE, Capture/Compare 4 DMA request  enable
    : TIM5_DIER_CC3DE ( -- x addr ) 11 bit TIM5_DIER ; \ TIM5_DIER_CC3DE, Capture/Compare 3 DMA request  enable
    : TIM5_DIER_CC2DE ( -- x addr ) 10 bit TIM5_DIER ; \ TIM5_DIER_CC2DE, Capture/Compare 2 DMA request  enable
    : TIM5_DIER_CC1DE ( -- x addr ) 9 bit TIM5_DIER ; \ TIM5_DIER_CC1DE, Capture/Compare 1 DMA request  enable
    : TIM5_DIER_UDE ( -- x addr ) 8 bit TIM5_DIER ; \ TIM5_DIER_UDE, Update DMA request enable
    : TIM5_DIER_TIE ( -- x addr ) 6 bit TIM5_DIER ; \ TIM5_DIER_TIE, Trigger interrupt enable
    : TIM5_DIER_CC4IE ( -- x addr ) 4 bit TIM5_DIER ; \ TIM5_DIER_CC4IE, Capture/Compare 4 interrupt  enable
    : TIM5_DIER_CC3IE ( -- x addr ) 3 bit TIM5_DIER ; \ TIM5_DIER_CC3IE, Capture/Compare 3 interrupt  enable
    : TIM5_DIER_CC2IE ( -- x addr ) 2 bit TIM5_DIER ; \ TIM5_DIER_CC2IE, Capture/Compare 2 interrupt  enable
    : TIM5_DIER_CC1IE ( -- x addr ) 1 bit TIM5_DIER ; \ TIM5_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM5_DIER_UIE ( -- x addr ) 0 bit TIM5_DIER ; \ TIM5_DIER_UIE, Update interrupt enable
  [then]

  execute-defined? use-TIM5 [if]
    \ TIM5_SR (read-write) Reset:0x0000
    : TIM5_SR_CC4OF ( -- x addr ) 12 bit TIM5_SR ; \ TIM5_SR_CC4OF, Capture/Compare 4 overcapture  flag
    : TIM5_SR_CC3OF ( -- x addr ) 11 bit TIM5_SR ; \ TIM5_SR_CC3OF, Capture/Compare 3 overcapture  flag
    : TIM5_SR_CC2OF ( -- x addr ) 10 bit TIM5_SR ; \ TIM5_SR_CC2OF, Capture/compare 2 overcapture  flag
    : TIM5_SR_CC1OF ( -- x addr ) 9 bit TIM5_SR ; \ TIM5_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM5_SR_TIF ( -- x addr ) 6 bit TIM5_SR ; \ TIM5_SR_TIF, Trigger interrupt flag
    : TIM5_SR_CC4IF ( -- x addr ) 4 bit TIM5_SR ; \ TIM5_SR_CC4IF, Capture/Compare 4 interrupt  flag
    : TIM5_SR_CC3IF ( -- x addr ) 3 bit TIM5_SR ; \ TIM5_SR_CC3IF, Capture/Compare 3 interrupt  flag
    : TIM5_SR_CC2IF ( -- x addr ) 2 bit TIM5_SR ; \ TIM5_SR_CC2IF, Capture/Compare 2 interrupt  flag
    : TIM5_SR_CC1IF ( -- x addr ) 1 bit TIM5_SR ; \ TIM5_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM5_SR_UIF ( -- x addr ) 0 bit TIM5_SR ; \ TIM5_SR_UIF, Update interrupt flag
  [then]

  [if]
    \ TIM5_EGR (write-only) Reset:0x0000
    : TIM5_EGR_TG ( -- x addr ) 6 bit TIM5_EGR ; \ TIM5_EGR_TG, Trigger generation
    : TIM5_EGR_CC4G ( -- x addr ) 4 bit TIM5_EGR ; \ TIM5_EGR_CC4G, Capture/compare 4  generation
    : TIM5_EGR_CC3G ( -- x addr ) 3 bit TIM5_EGR ; \ TIM5_EGR_CC3G, Capture/compare 3  generation
    : TIM5_EGR_CC2G ( -- x addr ) 2 bit TIM5_EGR ; \ TIM5_EGR_CC2G, Capture/compare 2  generation
    : TIM5_EGR_CC1G ( -- x addr ) 1 bit TIM5_EGR ; \ TIM5_EGR_CC1G, Capture/compare 1  generation
    : TIM5_EGR_UG ( -- x addr ) 0 bit TIM5_EGR ; \ TIM5_EGR_UG, Update generation
  [then]

  execute-defined? use-TIM5 [if]
    \ TIM5_CCMR1_Output (read-write) Reset:0x00000000
    : TIM5_CCMR1_Output_OC2CE ( -- x addr ) 15 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC2CE, OC2CE
    : TIM5_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC2M, OC2M
    : TIM5_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC2PE, OC2PE
    : TIM5_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC2FE, OC2FE
    : TIM5_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_CC2S, CC2S
    : TIM5_CCMR1_Output_OC1CE ( -- x addr ) 7 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC1CE, OC1CE
    : TIM5_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC1M, OC1M
    : TIM5_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC1PE, OC1PE
    : TIM5_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_OC1FE, OC1FE
    : TIM5_CCMR1_Output_CC1S ( %bb -- x addr ) TIM5_CCMR1_Output ; \ TIM5_CCMR1_Output_CC1S, CC1S
  [then]

  [if]
    \ TIM5_CCMR1_Input (read-write) Reset:0x00000000
    : TIM5_CCMR1_Input_IC2F ( %bbbb -- x addr ) 12 lshift TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_IC2F, Input capture 2 filter
    : TIM5_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_IC2PCS, Input capture 2 prescaler
    : TIM5_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_CC2S, Capture/Compare 2  selection
    : TIM5_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM5_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM5_CCMR1_Input_CC1S ( %bb -- x addr ) TIM5_CCMR1_Input ; \ TIM5_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  execute-defined? use-TIM5 [if]
    \ TIM5_CCMR2_Output (read-write) Reset:0x00000000
    : TIM5_CCMR2_Output_O24CE ( -- x addr ) 15 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_O24CE, O24CE
    : TIM5_CCMR2_Output_OC4M ( %bbb -- x addr ) 12 lshift TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC4M, OC4M
    : TIM5_CCMR2_Output_OC4PE ( -- x addr ) 11 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC4PE, OC4PE
    : TIM5_CCMR2_Output_OC4FE ( -- x addr ) 10 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC4FE, OC4FE
    : TIM5_CCMR2_Output_CC4S ( %bb -- x addr ) 8 lshift TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_CC4S, CC4S
    : TIM5_CCMR2_Output_OC3CE ( -- x addr ) 7 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC3CE, OC3CE
    : TIM5_CCMR2_Output_OC3M ( %bbb -- x addr ) 4 lshift TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC3M, OC3M
    : TIM5_CCMR2_Output_OC3PE ( -- x addr ) 3 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC3PE, OC3PE
    : TIM5_CCMR2_Output_OC3FE ( -- x addr ) 2 bit TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_OC3FE, OC3FE
    : TIM5_CCMR2_Output_CC3S ( %bb -- x addr ) TIM5_CCMR2_Output ; \ TIM5_CCMR2_Output_CC3S, CC3S
  [then]

  [if]
    \ TIM5_CCMR2_Input (read-write) Reset:0x00000000
    : TIM5_CCMR2_Input_IC4F ( %bbbb -- x addr ) 12 lshift TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_IC4F, Input capture 4 filter
    : TIM5_CCMR2_Input_IC4PSC ( %bb -- x addr ) 10 lshift TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_IC4PSC, Input capture 4 prescaler
    : TIM5_CCMR2_Input_CC4S ( %bb -- x addr ) 8 lshift TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_CC4S, Capture/Compare 4  selection
    : TIM5_CCMR2_Input_IC3F ( %bbbb -- x addr ) 4 lshift TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_IC3F, Input capture 3 filter
    : TIM5_CCMR2_Input_IC3PSC ( %bb -- x addr ) 2 lshift TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_IC3PSC, Input capture 3 prescaler
    : TIM5_CCMR2_Input_CC3S ( %bb -- x addr ) TIM5_CCMR2_Input ; \ TIM5_CCMR2_Input_CC3S, Capture/compare 3  selection
  [then]

  execute-defined? use-TIM5 [if]
    \ TIM5_CCER (read-write) Reset:0x0000
    : TIM5_CCER_CC4NP ( -- x addr ) 15 bit TIM5_CCER ; \ TIM5_CCER_CC4NP, Capture/Compare 4 output  Polarity
    : TIM5_CCER_CC4P ( -- x addr ) 13 bit TIM5_CCER ; \ TIM5_CCER_CC4P, Capture/Compare 3 output  Polarity
    : TIM5_CCER_CC4E ( -- x addr ) 12 bit TIM5_CCER ; \ TIM5_CCER_CC4E, Capture/Compare 4 output  enable
    : TIM5_CCER_CC3NP ( -- x addr ) 11 bit TIM5_CCER ; \ TIM5_CCER_CC3NP, Capture/Compare 3 output  Polarity
    : TIM5_CCER_CC3P ( -- x addr ) 9 bit TIM5_CCER ; \ TIM5_CCER_CC3P, Capture/Compare 3 output  Polarity
    : TIM5_CCER_CC3E ( -- x addr ) 8 bit TIM5_CCER ; \ TIM5_CCER_CC3E, Capture/Compare 3 output  enable
    : TIM5_CCER_CC2NP ( -- x addr ) 7 bit TIM5_CCER ; \ TIM5_CCER_CC2NP, Capture/Compare 2 output  Polarity
    : TIM5_CCER_CC2P ( -- x addr ) 5 bit TIM5_CCER ; \ TIM5_CCER_CC2P, Capture/Compare 2 output  Polarity
    : TIM5_CCER_CC2E ( -- x addr ) 4 bit TIM5_CCER ; \ TIM5_CCER_CC2E, Capture/Compare 2 output  enable
    : TIM5_CCER_CC1NP ( -- x addr ) 3 bit TIM5_CCER ; \ TIM5_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM5_CCER_CC1P ( -- x addr ) 1 bit TIM5_CCER ; \ TIM5_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM5_CCER_CC1E ( -- x addr ) 0 bit TIM5_CCER ; \ TIM5_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  [if]
    \ TIM5_CNT (read-write) Reset:0x00000000
    : TIM5_CNT_CNT_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_CNT ; \ TIM5_CNT_CNT_H, High counter value
    : TIM5_CNT_CNT_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_CNT ; \ TIM5_CNT_CNT_L, Low counter value
  [then]

  execute-defined? use-TIM5 [if]
    \ TIM5_PSC (read-write) Reset:0x0000
    : TIM5_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_PSC ; \ TIM5_PSC_PSC, Prescaler value
  [then]

  [if]
    \ TIM5_ARR (read-write) Reset:0x00000000
    : TIM5_ARR_ARR_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_ARR ; \ TIM5_ARR_ARR_H, High Auto-reload value
    : TIM5_ARR_ARR_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_ARR ; \ TIM5_ARR_ARR_L, Low Auto-reload value
  [then]

  execute-defined? use-TIM5 [if]
    \ TIM5_CCR1 (read-write) Reset:0x00000000
    : TIM5_CCR1_CCR1_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_CCR1 ; \ TIM5_CCR1_CCR1_H, High Capture/Compare 1  value
    : TIM5_CCR1_CCR1_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_CCR1 ; \ TIM5_CCR1_CCR1_L, Low Capture/Compare 1  value
  [then]

  [if]
    \ TIM5_CCR2 (read-write) Reset:0x00000000
    : TIM5_CCR2_CCR2_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_CCR2 ; \ TIM5_CCR2_CCR2_H, High Capture/Compare 2  value
    : TIM5_CCR2_CCR2_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_CCR2 ; \ TIM5_CCR2_CCR2_L, Low Capture/Compare 2  value
  [then]

  execute-defined? use-TIM5 [if]
    \ TIM5_CCR3 (read-write) Reset:0x00000000
    : TIM5_CCR3_CCR3_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_CCR3 ; \ TIM5_CCR3_CCR3_H, High Capture/Compare value
    : TIM5_CCR3_CCR3_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_CCR3 ; \ TIM5_CCR3_CCR3_L, Low Capture/Compare value
  [then]

  [if]
    \ TIM5_CCR4 (read-write) Reset:0x00000000
    : TIM5_CCR4_CCR4_H ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift TIM5_CCR4 ; \ TIM5_CCR4_CCR4_H, High Capture/Compare value
    : TIM5_CCR4_CCR4_L ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_CCR4 ; \ TIM5_CCR4_CCR4_L, Low Capture/Compare value
  [then]

  execute-defined? use-TIM5 [if]
    \ TIM5_DCR (read-write) Reset:0x0000
    : TIM5_DCR_DBL ( %bbbbb -- x addr ) 8 lshift TIM5_DCR ; \ TIM5_DCR_DBL, DMA burst length
    : TIM5_DCR_DBA ( %bbbbb -- x addr ) TIM5_DCR ; \ TIM5_DCR_DBA, DMA base address
  [then]

  [if]
    \ TIM5_DMAR (read-write) Reset:0x0000
    : TIM5_DMAR_DMAB ( %bbbbbbbbbbbbbbbb -- x addr ) TIM5_DMAR ; \ TIM5_DMAR_DMAB, DMA register for burst  accesses
  [then]

  execute-defined? use-TIM5 [if]
    \ TIM5_OR (read-write) Reset:0x0000
    : TIM5_OR_IT4_RMP ( %bb -- x addr ) 6 lshift TIM5_OR ; \ TIM5_OR_IT4_RMP, Timer Input 4 remap
  [then]

  [if]
    \ TIM9_CR1 (read-write) Reset:0x0000
    : TIM9_CR1_CKD ( %bb -- x addr ) 8 lshift TIM9_CR1 ; \ TIM9_CR1_CKD, Clock division
    : TIM9_CR1_ARPE ( -- x addr ) 7 bit TIM9_CR1 ; \ TIM9_CR1_ARPE, Auto-reload preload enable
    : TIM9_CR1_OPM ( -- x addr ) 3 bit TIM9_CR1 ; \ TIM9_CR1_OPM, One-pulse mode
    : TIM9_CR1_URS ( -- x addr ) 2 bit TIM9_CR1 ; \ TIM9_CR1_URS, Update request source
    : TIM9_CR1_UDIS ( -- x addr ) 1 bit TIM9_CR1 ; \ TIM9_CR1_UDIS, Update disable
    : TIM9_CR1_CEN ( -- x addr ) 0 bit TIM9_CR1 ; \ TIM9_CR1_CEN, Counter enable
  [then]

  execute-defined? use-TIM9 [if]
    \ TIM9_CR2 (read-write) Reset:0x0000
    : TIM9_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM9_CR2 ; \ TIM9_CR2_MMS, Master mode selection
  [then]

  [if]
    \ TIM9_SMCR (read-write) Reset:0x0000
    : TIM9_SMCR_MSM ( -- x addr ) 7 bit TIM9_SMCR ; \ TIM9_SMCR_MSM, Master/Slave mode
    : TIM9_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM9_SMCR ; \ TIM9_SMCR_TS, Trigger selection
    : TIM9_SMCR_SMS ( %bbb -- x addr ) TIM9_SMCR ; \ TIM9_SMCR_SMS, Slave mode selection
  [then]

  execute-defined? use-TIM9 [if]
    \ TIM9_DIER (read-write) Reset:0x0000
    : TIM9_DIER_TIE ( -- x addr ) 6 bit TIM9_DIER ; \ TIM9_DIER_TIE, Trigger interrupt enable
    : TIM9_DIER_CC2IE ( -- x addr ) 2 bit TIM9_DIER ; \ TIM9_DIER_CC2IE, Capture/Compare 2 interrupt  enable
    : TIM9_DIER_CC1IE ( -- x addr ) 1 bit TIM9_DIER ; \ TIM9_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM9_DIER_UIE ( -- x addr ) 0 bit TIM9_DIER ; \ TIM9_DIER_UIE, Update interrupt enable
  [then]

  [if]
    \ TIM9_SR (read-write) Reset:0x0000
    : TIM9_SR_CC2OF ( -- x addr ) 10 bit TIM9_SR ; \ TIM9_SR_CC2OF, Capture/compare 2 overcapture  flag
    : TIM9_SR_CC1OF ( -- x addr ) 9 bit TIM9_SR ; \ TIM9_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM9_SR_TIF ( -- x addr ) 6 bit TIM9_SR ; \ TIM9_SR_TIF, Trigger interrupt flag
    : TIM9_SR_CC2IF ( -- x addr ) 2 bit TIM9_SR ; \ TIM9_SR_CC2IF, Capture/Compare 2 interrupt  flag
    : TIM9_SR_CC1IF ( -- x addr ) 1 bit TIM9_SR ; \ TIM9_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM9_SR_UIF ( -- x addr ) 0 bit TIM9_SR ; \ TIM9_SR_UIF, Update interrupt flag
  [then]

  execute-defined? use-TIM9 [if]
    \ TIM9_EGR (write-only) Reset:0x0000
    : TIM9_EGR_TG ( -- x addr ) 6 bit TIM9_EGR ; \ TIM9_EGR_TG, Trigger generation
    : TIM9_EGR_CC2G ( -- x addr ) 2 bit TIM9_EGR ; \ TIM9_EGR_CC2G, Capture/compare 2  generation
    : TIM9_EGR_CC1G ( -- x addr ) 1 bit TIM9_EGR ; \ TIM9_EGR_CC1G, Capture/compare 1  generation
    : TIM9_EGR_UG ( -- x addr ) 0 bit TIM9_EGR ; \ TIM9_EGR_UG, Update generation
  [then]

  [if]
    \ TIM9_CCMR1_Output (read-write) Reset:0x00000000
    : TIM9_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC2M, Output Compare 2 mode
    : TIM9_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC2PE, Output Compare 2 preload  enable
    : TIM9_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC2FE, Output Compare 2 fast  enable
    : TIM9_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_CC2S, Capture/Compare 2  selection
    : TIM9_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC1M, Output Compare 1 mode
    : TIM9_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC1PE, Output Compare 1 preload  enable
    : TIM9_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_OC1FE, Output Compare 1 fast  enable
    : TIM9_CCMR1_Output_CC1S ( %bb -- x addr ) TIM9_CCMR1_Output ; \ TIM9_CCMR1_Output_CC1S, Capture/Compare 1  selection
  [then]

  execute-defined? use-TIM9 [if]
    \ TIM9_CCMR1_Input (read-write) Reset:0x00000000
    : TIM9_CCMR1_Input_IC2F ( %bbb -- x addr ) 12 lshift TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_IC2F, Input capture 2 filter
    : TIM9_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_IC2PCS, Input capture 2 prescaler
    : TIM9_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_CC2S, Capture/Compare 2  selection
    : TIM9_CCMR1_Input_IC1F ( %bbb -- x addr ) 4 lshift TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM9_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM9_CCMR1_Input_CC1S ( %bb -- x addr ) TIM9_CCMR1_Input ; \ TIM9_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  [if]
    \ TIM9_CCER (read-write) Reset:0x0000
    : TIM9_CCER_CC2NP ( -- x addr ) 7 bit TIM9_CCER ; \ TIM9_CCER_CC2NP, Capture/Compare 2 output  Polarity
    : TIM9_CCER_CC2P ( -- x addr ) 5 bit TIM9_CCER ; \ TIM9_CCER_CC2P, Capture/Compare 2 output  Polarity
    : TIM9_CCER_CC2E ( -- x addr ) 4 bit TIM9_CCER ; \ TIM9_CCER_CC2E, Capture/Compare 2 output  enable
    : TIM9_CCER_CC1NP ( -- x addr ) 3 bit TIM9_CCER ; \ TIM9_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM9_CCER_CC1P ( -- x addr ) 1 bit TIM9_CCER ; \ TIM9_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM9_CCER_CC1E ( -- x addr ) 0 bit TIM9_CCER ; \ TIM9_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  execute-defined? use-TIM9 [if]
    \ TIM9_CNT (read-write) Reset:0x00000000
    : TIM9_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM9_CNT ; \ TIM9_CNT_CNT, counter value
  [then]

  [if]
    \ TIM9_PSC (read-write) Reset:0x0000
    : TIM9_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM9_PSC ; \ TIM9_PSC_PSC, Prescaler value
  [then]

  execute-defined? use-TIM9 [if]
    \ TIM9_ARR (read-write) Reset:0x00000000
    : TIM9_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM9_ARR ; \ TIM9_ARR_ARR, Auto-reload value
  [then]

  [if]
    \ TIM9_CCR1 (read-write) Reset:0x00000000
    : TIM9_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM9_CCR1 ; \ TIM9_CCR1_CCR1, Capture/Compare 1 value
  [then]

  execute-defined? use-TIM9 [if]
    \ TIM9_CCR2 (read-write) Reset:0x00000000
    : TIM9_CCR2_CCR2 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM9_CCR2 ; \ TIM9_CCR2_CCR2, Capture/Compare 2 value
  [then]

  [if]
    \ TIM12_CR1 (read-write) Reset:0x0000
    : TIM12_CR1_CKD ( %bb -- x addr ) 8 lshift TIM12_CR1 ; \ TIM12_CR1_CKD, Clock division
    : TIM12_CR1_ARPE ( -- x addr ) 7 bit TIM12_CR1 ; \ TIM12_CR1_ARPE, Auto-reload preload enable
    : TIM12_CR1_OPM ( -- x addr ) 3 bit TIM12_CR1 ; \ TIM12_CR1_OPM, One-pulse mode
    : TIM12_CR1_URS ( -- x addr ) 2 bit TIM12_CR1 ; \ TIM12_CR1_URS, Update request source
    : TIM12_CR1_UDIS ( -- x addr ) 1 bit TIM12_CR1 ; \ TIM12_CR1_UDIS, Update disable
    : TIM12_CR1_CEN ( -- x addr ) 0 bit TIM12_CR1 ; \ TIM12_CR1_CEN, Counter enable
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM12_CR2 (read-write) Reset:0x0000
    : TIM12_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM12_CR2 ; \ TIM12_CR2_MMS, Master mode selection
  [then]

  [if]
    \ TIM12_SMCR (read-write) Reset:0x0000
    : TIM12_SMCR_MSM ( -- x addr ) 7 bit TIM12_SMCR ; \ TIM12_SMCR_MSM, Master/Slave mode
    : TIM12_SMCR_TS ( %bbb -- x addr ) 4 lshift TIM12_SMCR ; \ TIM12_SMCR_TS, Trigger selection
    : TIM12_SMCR_SMS ( %bbb -- x addr ) TIM12_SMCR ; \ TIM12_SMCR_SMS, Slave mode selection
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM12_DIER (read-write) Reset:0x0000
    : TIM12_DIER_TIE ( -- x addr ) 6 bit TIM12_DIER ; \ TIM12_DIER_TIE, Trigger interrupt enable
    : TIM12_DIER_CC2IE ( -- x addr ) 2 bit TIM12_DIER ; \ TIM12_DIER_CC2IE, Capture/Compare 2 interrupt  enable
    : TIM12_DIER_CC1IE ( -- x addr ) 1 bit TIM12_DIER ; \ TIM12_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM12_DIER_UIE ( -- x addr ) 0 bit TIM12_DIER ; \ TIM12_DIER_UIE, Update interrupt enable
  [then]

  [if]
    \ TIM12_SR (read-write) Reset:0x0000
    : TIM12_SR_CC2OF ( -- x addr ) 10 bit TIM12_SR ; \ TIM12_SR_CC2OF, Capture/compare 2 overcapture  flag
    : TIM12_SR_CC1OF ( -- x addr ) 9 bit TIM12_SR ; \ TIM12_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM12_SR_TIF ( -- x addr ) 6 bit TIM12_SR ; \ TIM12_SR_TIF, Trigger interrupt flag
    : TIM12_SR_CC2IF ( -- x addr ) 2 bit TIM12_SR ; \ TIM12_SR_CC2IF, Capture/Compare 2 interrupt  flag
    : TIM12_SR_CC1IF ( -- x addr ) 1 bit TIM12_SR ; \ TIM12_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM12_SR_UIF ( -- x addr ) 0 bit TIM12_SR ; \ TIM12_SR_UIF, Update interrupt flag
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM12_EGR (write-only) Reset:0x0000
    : TIM12_EGR_TG ( -- x addr ) 6 bit TIM12_EGR ; \ TIM12_EGR_TG, Trigger generation
    : TIM12_EGR_CC2G ( -- x addr ) 2 bit TIM12_EGR ; \ TIM12_EGR_CC2G, Capture/compare 2  generation
    : TIM12_EGR_CC1G ( -- x addr ) 1 bit TIM12_EGR ; \ TIM12_EGR_CC1G, Capture/compare 1  generation
    : TIM12_EGR_UG ( -- x addr ) 0 bit TIM12_EGR ; \ TIM12_EGR_UG, Update generation
  [then]

  [if]
    \ TIM12_CCMR1_Output (read-write) Reset:0x00000000
    : TIM12_CCMR1_Output_OC2M ( %bbb -- x addr ) 12 lshift TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC2M, Output Compare 2 mode
    : TIM12_CCMR1_Output_OC2PE ( -- x addr ) 11 bit TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC2PE, Output Compare 2 preload  enable
    : TIM12_CCMR1_Output_OC2FE ( -- x addr ) 10 bit TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC2FE, Output Compare 2 fast  enable
    : TIM12_CCMR1_Output_CC2S ( %bb -- x addr ) 8 lshift TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_CC2S, Capture/Compare 2  selection
    : TIM12_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC1M, Output Compare 1 mode
    : TIM12_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC1PE, Output Compare 1 preload  enable
    : TIM12_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_OC1FE, Output Compare 1 fast  enable
    : TIM12_CCMR1_Output_CC1S ( %bb -- x addr ) TIM12_CCMR1_Output ; \ TIM12_CCMR1_Output_CC1S, Capture/Compare 1  selection
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM12_CCMR1_Input (read-write) Reset:0x00000000
    : TIM12_CCMR1_Input_IC2F ( %bbb -- x addr ) 12 lshift TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_IC2F, Input capture 2 filter
    : TIM12_CCMR1_Input_IC2PCS ( %bb -- x addr ) 10 lshift TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_IC2PCS, Input capture 2 prescaler
    : TIM12_CCMR1_Input_CC2S ( %bb -- x addr ) 8 lshift TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_CC2S, Capture/Compare 2  selection
    : TIM12_CCMR1_Input_IC1F ( %bbb -- x addr ) 4 lshift TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM12_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM12_CCMR1_Input_CC1S ( %bb -- x addr ) TIM12_CCMR1_Input ; \ TIM12_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  [if]
    \ TIM12_CCER (read-write) Reset:0x0000
    : TIM12_CCER_CC2NP ( -- x addr ) 7 bit TIM12_CCER ; \ TIM12_CCER_CC2NP, Capture/Compare 2 output  Polarity
    : TIM12_CCER_CC2P ( -- x addr ) 5 bit TIM12_CCER ; \ TIM12_CCER_CC2P, Capture/Compare 2 output  Polarity
    : TIM12_CCER_CC2E ( -- x addr ) 4 bit TIM12_CCER ; \ TIM12_CCER_CC2E, Capture/Compare 2 output  enable
    : TIM12_CCER_CC1NP ( -- x addr ) 3 bit TIM12_CCER ; \ TIM12_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM12_CCER_CC1P ( -- x addr ) 1 bit TIM12_CCER ; \ TIM12_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM12_CCER_CC1E ( -- x addr ) 0 bit TIM12_CCER ; \ TIM12_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM12_CNT (read-write) Reset:0x00000000
    : TIM12_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM12_CNT ; \ TIM12_CNT_CNT, counter value
  [then]

  [if]
    \ TIM12_PSC (read-write) Reset:0x0000
    : TIM12_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM12_PSC ; \ TIM12_PSC_PSC, Prescaler value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM12_ARR (read-write) Reset:0x00000000
    : TIM12_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM12_ARR ; \ TIM12_ARR_ARR, Auto-reload value
  [then]

  [if]
    \ TIM12_CCR1 (read-write) Reset:0x00000000
    : TIM12_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM12_CCR1 ; \ TIM12_CCR1_CCR1, Capture/Compare 1 value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM12_CCR2 (read-write) Reset:0x00000000
    : TIM12_CCR2_CCR2 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM12_CCR2 ; \ TIM12_CCR2_CCR2, Capture/Compare 2 value
  [then]

  [if]
    \ TIM10_CR1 (read-write) Reset:0x0000
    : TIM10_CR1_CKD ( %bb -- x addr ) 8 lshift TIM10_CR1 ; \ TIM10_CR1_CKD, Clock division
    : TIM10_CR1_ARPE ( -- x addr ) 7 bit TIM10_CR1 ; \ TIM10_CR1_ARPE, Auto-reload preload enable
    : TIM10_CR1_URS ( -- x addr ) 2 bit TIM10_CR1 ; \ TIM10_CR1_URS, Update request source
    : TIM10_CR1_UDIS ( -- x addr ) 1 bit TIM10_CR1 ; \ TIM10_CR1_UDIS, Update disable
    : TIM10_CR1_CEN ( -- x addr ) 0 bit TIM10_CR1 ; \ TIM10_CR1_CEN, Counter enable
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM10_DIER (read-write) Reset:0x0000
    : TIM10_DIER_CC1IE ( -- x addr ) 1 bit TIM10_DIER ; \ TIM10_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM10_DIER_UIE ( -- x addr ) 0 bit TIM10_DIER ; \ TIM10_DIER_UIE, Update interrupt enable
  [then]

  [if]
    \ TIM10_SR (read-write) Reset:0x0000
    : TIM10_SR_CC1OF ( -- x addr ) 9 bit TIM10_SR ; \ TIM10_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM10_SR_CC1IF ( -- x addr ) 1 bit TIM10_SR ; \ TIM10_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM10_SR_UIF ( -- x addr ) 0 bit TIM10_SR ; \ TIM10_SR_UIF, Update interrupt flag
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM10_EGR (write-only) Reset:0x0000
    : TIM10_EGR_CC1G ( -- x addr ) 1 bit TIM10_EGR ; \ TIM10_EGR_CC1G, Capture/compare 1  generation
    : TIM10_EGR_UG ( -- x addr ) 0 bit TIM10_EGR ; \ TIM10_EGR_UG, Update generation
  [then]

  [if]
    \ TIM10_CCMR1_Output (read-write) Reset:0x00000000
    : TIM10_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM10_CCMR1_Output ; \ TIM10_CCMR1_Output_OC1M, Output Compare 1 mode
    : TIM10_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM10_CCMR1_Output ; \ TIM10_CCMR1_Output_OC1PE, Output Compare 1 preload  enable
    : TIM10_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM10_CCMR1_Output ; \ TIM10_CCMR1_Output_OC1FE, Output Compare 1 fast  enable
    : TIM10_CCMR1_Output_CC1S ( %bb -- x addr ) TIM10_CCMR1_Output ; \ TIM10_CCMR1_Output_CC1S, Capture/Compare 1  selection
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM10_CCMR1_Input (read-write) Reset:0x00000000
    : TIM10_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM10_CCMR1_Input ; \ TIM10_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM10_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM10_CCMR1_Input ; \ TIM10_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM10_CCMR1_Input_CC1S ( %bb -- x addr ) TIM10_CCMR1_Input ; \ TIM10_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  [if]
    \ TIM10_CCER (read-write) Reset:0x0000
    : TIM10_CCER_CC1NP ( -- x addr ) 3 bit TIM10_CCER ; \ TIM10_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM10_CCER_CC1P ( -- x addr ) 1 bit TIM10_CCER ; \ TIM10_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM10_CCER_CC1E ( -- x addr ) 0 bit TIM10_CCER ; \ TIM10_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM10_CNT (read-write) Reset:0x00000000
    : TIM10_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM10_CNT ; \ TIM10_CNT_CNT, counter value
  [then]

  [if]
    \ TIM10_PSC (read-write) Reset:0x0000
    : TIM10_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM10_PSC ; \ TIM10_PSC_PSC, Prescaler value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM10_ARR (read-write) Reset:0x00000000
    : TIM10_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM10_ARR ; \ TIM10_ARR_ARR, Auto-reload value
  [then]

  [if]
    \ TIM10_CCR1 (read-write) Reset:0x00000000
    : TIM10_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM10_CCR1 ; \ TIM10_CCR1_CCR1, Capture/Compare 1 value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM13_CR1 (read-write) Reset:0x0000
    : TIM13_CR1_CKD ( %bb -- x addr ) 8 lshift TIM13_CR1 ; \ TIM13_CR1_CKD, Clock division
    : TIM13_CR1_ARPE ( -- x addr ) 7 bit TIM13_CR1 ; \ TIM13_CR1_ARPE, Auto-reload preload enable
    : TIM13_CR1_URS ( -- x addr ) 2 bit TIM13_CR1 ; \ TIM13_CR1_URS, Update request source
    : TIM13_CR1_UDIS ( -- x addr ) 1 bit TIM13_CR1 ; \ TIM13_CR1_UDIS, Update disable
    : TIM13_CR1_CEN ( -- x addr ) 0 bit TIM13_CR1 ; \ TIM13_CR1_CEN, Counter enable
  [then]

  [if]
    \ TIM13_DIER (read-write) Reset:0x0000
    : TIM13_DIER_CC1IE ( -- x addr ) 1 bit TIM13_DIER ; \ TIM13_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM13_DIER_UIE ( -- x addr ) 0 bit TIM13_DIER ; \ TIM13_DIER_UIE, Update interrupt enable
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM13_SR (read-write) Reset:0x0000
    : TIM13_SR_CC1OF ( -- x addr ) 9 bit TIM13_SR ; \ TIM13_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM13_SR_CC1IF ( -- x addr ) 1 bit TIM13_SR ; \ TIM13_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM13_SR_UIF ( -- x addr ) 0 bit TIM13_SR ; \ TIM13_SR_UIF, Update interrupt flag
  [then]

  [if]
    \ TIM13_EGR (write-only) Reset:0x0000
    : TIM13_EGR_CC1G ( -- x addr ) 1 bit TIM13_EGR ; \ TIM13_EGR_CC1G, Capture/compare 1  generation
    : TIM13_EGR_UG ( -- x addr ) 0 bit TIM13_EGR ; \ TIM13_EGR_UG, Update generation
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM13_CCMR1_Output (read-write) Reset:0x00000000
    : TIM13_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM13_CCMR1_Output ; \ TIM13_CCMR1_Output_OC1M, Output Compare 1 mode
    : TIM13_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM13_CCMR1_Output ; \ TIM13_CCMR1_Output_OC1PE, Output Compare 1 preload  enable
    : TIM13_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM13_CCMR1_Output ; \ TIM13_CCMR1_Output_OC1FE, Output Compare 1 fast  enable
    : TIM13_CCMR1_Output_CC1S ( %bb -- x addr ) TIM13_CCMR1_Output ; \ TIM13_CCMR1_Output_CC1S, Capture/Compare 1  selection
  [then]

  [if]
    \ TIM13_CCMR1_Input (read-write) Reset:0x00000000
    : TIM13_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM13_CCMR1_Input ; \ TIM13_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM13_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM13_CCMR1_Input ; \ TIM13_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM13_CCMR1_Input_CC1S ( %bb -- x addr ) TIM13_CCMR1_Input ; \ TIM13_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM13_CCER (read-write) Reset:0x0000
    : TIM13_CCER_CC1NP ( -- x addr ) 3 bit TIM13_CCER ; \ TIM13_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM13_CCER_CC1P ( -- x addr ) 1 bit TIM13_CCER ; \ TIM13_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM13_CCER_CC1E ( -- x addr ) 0 bit TIM13_CCER ; \ TIM13_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  [if]
    \ TIM13_CNT (read-write) Reset:0x00000000
    : TIM13_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM13_CNT ; \ TIM13_CNT_CNT, counter value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM13_PSC (read-write) Reset:0x0000
    : TIM13_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM13_PSC ; \ TIM13_PSC_PSC, Prescaler value
  [then]

  [if]
    \ TIM13_ARR (read-write) Reset:0x00000000
    : TIM13_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM13_ARR ; \ TIM13_ARR_ARR, Auto-reload value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM13_CCR1 (read-write) Reset:0x00000000
    : TIM13_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM13_CCR1 ; \ TIM13_CCR1_CCR1, Capture/Compare 1 value
  [then]

  [if]
    \ TIM14_CR1 (read-write) Reset:0x0000
    : TIM14_CR1_CKD ( %bb -- x addr ) 8 lshift TIM14_CR1 ; \ TIM14_CR1_CKD, Clock division
    : TIM14_CR1_ARPE ( -- x addr ) 7 bit TIM14_CR1 ; \ TIM14_CR1_ARPE, Auto-reload preload enable
    : TIM14_CR1_URS ( -- x addr ) 2 bit TIM14_CR1 ; \ TIM14_CR1_URS, Update request source
    : TIM14_CR1_UDIS ( -- x addr ) 1 bit TIM14_CR1 ; \ TIM14_CR1_UDIS, Update disable
    : TIM14_CR1_CEN ( -- x addr ) 0 bit TIM14_CR1 ; \ TIM14_CR1_CEN, Counter enable
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM14_DIER (read-write) Reset:0x0000
    : TIM14_DIER_CC1IE ( -- x addr ) 1 bit TIM14_DIER ; \ TIM14_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM14_DIER_UIE ( -- x addr ) 0 bit TIM14_DIER ; \ TIM14_DIER_UIE, Update interrupt enable
  [then]

  [if]
    \ TIM14_SR (read-write) Reset:0x0000
    : TIM14_SR_CC1OF ( -- x addr ) 9 bit TIM14_SR ; \ TIM14_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM14_SR_CC1IF ( -- x addr ) 1 bit TIM14_SR ; \ TIM14_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM14_SR_UIF ( -- x addr ) 0 bit TIM14_SR ; \ TIM14_SR_UIF, Update interrupt flag
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM14_EGR (write-only) Reset:0x0000
    : TIM14_EGR_CC1G ( -- x addr ) 1 bit TIM14_EGR ; \ TIM14_EGR_CC1G, Capture/compare 1  generation
    : TIM14_EGR_UG ( -- x addr ) 0 bit TIM14_EGR ; \ TIM14_EGR_UG, Update generation
  [then]

  [if]
    \ TIM14_CCMR1_Output (read-write) Reset:0x00000000
    : TIM14_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM14_CCMR1_Output ; \ TIM14_CCMR1_Output_OC1M, Output Compare 1 mode
    : TIM14_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM14_CCMR1_Output ; \ TIM14_CCMR1_Output_OC1PE, Output Compare 1 preload  enable
    : TIM14_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM14_CCMR1_Output ; \ TIM14_CCMR1_Output_OC1FE, Output Compare 1 fast  enable
    : TIM14_CCMR1_Output_CC1S ( %bb -- x addr ) TIM14_CCMR1_Output ; \ TIM14_CCMR1_Output_CC1S, Capture/Compare 1  selection
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM14_CCMR1_Input (read-write) Reset:0x00000000
    : TIM14_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM14_CCMR1_Input ; \ TIM14_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM14_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM14_CCMR1_Input ; \ TIM14_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM14_CCMR1_Input_CC1S ( %bb -- x addr ) TIM14_CCMR1_Input ; \ TIM14_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  [if]
    \ TIM14_CCER (read-write) Reset:0x0000
    : TIM14_CCER_CC1NP ( -- x addr ) 3 bit TIM14_CCER ; \ TIM14_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM14_CCER_CC1P ( -- x addr ) 1 bit TIM14_CCER ; \ TIM14_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM14_CCER_CC1E ( -- x addr ) 0 bit TIM14_CCER ; \ TIM14_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM14_CNT (read-write) Reset:0x00000000
    : TIM14_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM14_CNT ; \ TIM14_CNT_CNT, counter value
  [then]

  [if]
    \ TIM14_PSC (read-write) Reset:0x0000
    : TIM14_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM14_PSC ; \ TIM14_PSC_PSC, Prescaler value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM14_ARR (read-write) Reset:0x00000000
    : TIM14_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM14_ARR ; \ TIM14_ARR_ARR, Auto-reload value
  [then]

  [if]
    \ TIM14_CCR1 (read-write) Reset:0x00000000
    : TIM14_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM14_CCR1 ; \ TIM14_CCR1_CCR1, Capture/Compare 1 value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM11_CR1 (read-write) Reset:0x0000
    : TIM11_CR1_CKD ( %bb -- x addr ) 8 lshift TIM11_CR1 ; \ TIM11_CR1_CKD, Clock division
    : TIM11_CR1_ARPE ( -- x addr ) 7 bit TIM11_CR1 ; \ TIM11_CR1_ARPE, Auto-reload preload enable
    : TIM11_CR1_URS ( -- x addr ) 2 bit TIM11_CR1 ; \ TIM11_CR1_URS, Update request source
    : TIM11_CR1_UDIS ( -- x addr ) 1 bit TIM11_CR1 ; \ TIM11_CR1_UDIS, Update disable
    : TIM11_CR1_CEN ( -- x addr ) 0 bit TIM11_CR1 ; \ TIM11_CR1_CEN, Counter enable
  [then]

  [if]
    \ TIM11_DIER (read-write) Reset:0x0000
    : TIM11_DIER_CC1IE ( -- x addr ) 1 bit TIM11_DIER ; \ TIM11_DIER_CC1IE, Capture/Compare 1 interrupt  enable
    : TIM11_DIER_UIE ( -- x addr ) 0 bit TIM11_DIER ; \ TIM11_DIER_UIE, Update interrupt enable
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM11_SR (read-write) Reset:0x0000
    : TIM11_SR_CC1OF ( -- x addr ) 9 bit TIM11_SR ; \ TIM11_SR_CC1OF, Capture/Compare 1 overcapture  flag
    : TIM11_SR_CC1IF ( -- x addr ) 1 bit TIM11_SR ; \ TIM11_SR_CC1IF, Capture/compare 1 interrupt  flag
    : TIM11_SR_UIF ( -- x addr ) 0 bit TIM11_SR ; \ TIM11_SR_UIF, Update interrupt flag
  [then]

  [if]
    \ TIM11_EGR (write-only) Reset:0x0000
    : TIM11_EGR_CC1G ( -- x addr ) 1 bit TIM11_EGR ; \ TIM11_EGR_CC1G, Capture/compare 1  generation
    : TIM11_EGR_UG ( -- x addr ) 0 bit TIM11_EGR ; \ TIM11_EGR_UG, Update generation
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM11_CCMR1_Output (read-write) Reset:0x00000000
    : TIM11_CCMR1_Output_OC1M ( %bbb -- x addr ) 4 lshift TIM11_CCMR1_Output ; \ TIM11_CCMR1_Output_OC1M, Output Compare 1 mode
    : TIM11_CCMR1_Output_OC1PE ( -- x addr ) 3 bit TIM11_CCMR1_Output ; \ TIM11_CCMR1_Output_OC1PE, Output Compare 1 preload  enable
    : TIM11_CCMR1_Output_OC1FE ( -- x addr ) 2 bit TIM11_CCMR1_Output ; \ TIM11_CCMR1_Output_OC1FE, Output Compare 1 fast  enable
    : TIM11_CCMR1_Output_CC1S ( %bb -- x addr ) TIM11_CCMR1_Output ; \ TIM11_CCMR1_Output_CC1S, Capture/Compare 1  selection
  [then]

  [if]
    \ TIM11_CCMR1_Input (read-write) Reset:0x00000000
    : TIM11_CCMR1_Input_IC1F ( %bbbb -- x addr ) 4 lshift TIM11_CCMR1_Input ; \ TIM11_CCMR1_Input_IC1F, Input capture 1 filter
    : TIM11_CCMR1_Input_ICPCS ( %bb -- x addr ) 2 lshift TIM11_CCMR1_Input ; \ TIM11_CCMR1_Input_ICPCS, Input capture 1 prescaler
    : TIM11_CCMR1_Input_CC1S ( %bb -- x addr ) TIM11_CCMR1_Input ; \ TIM11_CCMR1_Input_CC1S, Capture/Compare 1  selection
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM11_CCER (read-write) Reset:0x0000
    : TIM11_CCER_CC1NP ( -- x addr ) 3 bit TIM11_CCER ; \ TIM11_CCER_CC1NP, Capture/Compare 1 output  Polarity
    : TIM11_CCER_CC1P ( -- x addr ) 1 bit TIM11_CCER ; \ TIM11_CCER_CC1P, Capture/Compare 1 output  Polarity
    : TIM11_CCER_CC1E ( -- x addr ) 0 bit TIM11_CCER ; \ TIM11_CCER_CC1E, Capture/Compare 1 output  enable
  [then]

  [if]
    \ TIM11_CNT (read-write) Reset:0x00000000
    : TIM11_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM11_CNT ; \ TIM11_CNT_CNT, counter value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM11_PSC (read-write) Reset:0x0000
    : TIM11_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM11_PSC ; \ TIM11_PSC_PSC, Prescaler value
  [then]

  [if]
    \ TIM11_ARR (read-write) Reset:0x00000000
    : TIM11_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM11_ARR ; \ TIM11_ARR_ARR, Auto-reload value
  [then]

  execute-defined? use-TIM1 [if]
    \ TIM11_CCR1 (read-write) Reset:0x00000000
    : TIM11_CCR1_CCR1 ( %bbbbbbbbbbbbbbbb -- x addr ) TIM11_CCR1 ; \ TIM11_CCR1_CCR1, Capture/Compare 1 value
  [then]

  [if]
    \ TIM11_OR (read-write) Reset:0x00000000
    : TIM11_OR_RMP ( %bb -- x addr ) TIM11_OR ; \ TIM11_OR_RMP, Input 1 remapping  capability
  [then]

  execute-defined? use-TIM6 [if]
    \ TIM6_CR1 (read-write) Reset:0x0000
    : TIM6_CR1_ARPE ( -- x addr ) 7 bit TIM6_CR1 ; \ TIM6_CR1_ARPE, Auto-reload preload enable
    : TIM6_CR1_OPM ( -- x addr ) 3 bit TIM6_CR1 ; \ TIM6_CR1_OPM, One-pulse mode
    : TIM6_CR1_URS ( -- x addr ) 2 bit TIM6_CR1 ; \ TIM6_CR1_URS, Update request source
    : TIM6_CR1_UDIS ( -- x addr ) 1 bit TIM6_CR1 ; \ TIM6_CR1_UDIS, Update disable
    : TIM6_CR1_CEN ( -- x addr ) 0 bit TIM6_CR1 ; \ TIM6_CR1_CEN, Counter enable
  [then]

  [if]
    \ TIM6_CR2 (read-write) Reset:0x0000
    : TIM6_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM6_CR2 ; \ TIM6_CR2_MMS, Master mode selection
  [then]

  execute-defined? use-TIM6 [if]
    \ TIM6_DIER (read-write) Reset:0x0000
    : TIM6_DIER_UDE ( -- x addr ) 8 bit TIM6_DIER ; \ TIM6_DIER_UDE, Update DMA request enable
    : TIM6_DIER_UIE ( -- x addr ) 0 bit TIM6_DIER ; \ TIM6_DIER_UIE, Update interrupt enable
  [then]

  [if]
    \ TIM6_SR (read-write) Reset:0x0000
    : TIM6_SR_UIF ( -- x addr ) 0 bit TIM6_SR ; \ TIM6_SR_UIF, Update interrupt flag
  [then]

  execute-defined? use-TIM6 [if]
    \ TIM6_EGR (write-only) Reset:0x0000
    : TIM6_EGR_UG ( -- x addr ) 0 bit TIM6_EGR ; \ TIM6_EGR_UG, Update generation
  [then]

  [if]
    \ TIM6_CNT (read-write) Reset:0x00000000
    : TIM6_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM6_CNT ; \ TIM6_CNT_CNT, Low counter value
  [then]

  execute-defined? use-TIM6 [if]
    \ TIM6_PSC (read-write) Reset:0x0000
    : TIM6_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM6_PSC ; \ TIM6_PSC_PSC, Prescaler value
  [then]

  [if]
    \ TIM6_ARR (read-write) Reset:0x00000000
    : TIM6_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM6_ARR ; \ TIM6_ARR_ARR, Low Auto-reload value
  [then]

  execute-defined? use-TIM7 [if]
    \ TIM7_CR1 (read-write) Reset:0x0000
    : TIM7_CR1_ARPE ( -- x addr ) 7 bit TIM7_CR1 ; \ TIM7_CR1_ARPE, Auto-reload preload enable
    : TIM7_CR1_OPM ( -- x addr ) 3 bit TIM7_CR1 ; \ TIM7_CR1_OPM, One-pulse mode
    : TIM7_CR1_URS ( -- x addr ) 2 bit TIM7_CR1 ; \ TIM7_CR1_URS, Update request source
    : TIM7_CR1_UDIS ( -- x addr ) 1 bit TIM7_CR1 ; \ TIM7_CR1_UDIS, Update disable
    : TIM7_CR1_CEN ( -- x addr ) 0 bit TIM7_CR1 ; \ TIM7_CR1_CEN, Counter enable
  [then]

  [if]
    \ TIM7_CR2 (read-write) Reset:0x0000
    : TIM7_CR2_MMS ( %bbb -- x addr ) 4 lshift TIM7_CR2 ; \ TIM7_CR2_MMS, Master mode selection
  [then]

  execute-defined? use-TIM7 [if]
    \ TIM7_DIER (read-write) Reset:0x0000
    : TIM7_DIER_UDE ( -- x addr ) 8 bit TIM7_DIER ; \ TIM7_DIER_UDE, Update DMA request enable
    : TIM7_DIER_UIE ( -- x addr ) 0 bit TIM7_DIER ; \ TIM7_DIER_UIE, Update interrupt enable
  [then]

  [if]
    \ TIM7_SR (read-write) Reset:0x0000
    : TIM7_SR_UIF ( -- x addr ) 0 bit TIM7_SR ; \ TIM7_SR_UIF, Update interrupt flag
  [then]

  execute-defined? use-TIM7 [if]
    \ TIM7_EGR (write-only) Reset:0x0000
    : TIM7_EGR_UG ( -- x addr ) 0 bit TIM7_EGR ; \ TIM7_EGR_UG, Update generation
  [then]

  [if]
    \ TIM7_CNT (read-write) Reset:0x00000000
    : TIM7_CNT_CNT ( %bbbbbbbbbbbbbbbb -- x addr ) TIM7_CNT ; \ TIM7_CNT_CNT, Low counter value
  [then]

  execute-defined? use-TIM7 [if]
    \ TIM7_PSC (read-write) Reset:0x0000
    : TIM7_PSC_PSC ( %bbbbbbbbbbbbbbbb -- x addr ) TIM7_PSC ; \ TIM7_PSC_PSC, Prescaler value
  [then]

  [if]
    \ TIM7_ARR (read-write) Reset:0x00000000
    : TIM7_ARR_ARR ( %bbbbbbbbbbbbbbbb -- x addr ) TIM7_ARR ; \ TIM7_ARR_ARR, Low Auto-reload value
  [then]

  execute-defined? use-Ethernet_MAC [if]
    \ Ethernet_MAC_MACCR (read-write) Reset:0x0008000
    : Ethernet_MAC_MACCR_RE ( -- x addr ) 2 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_RE, RE
    : Ethernet_MAC_MACCR_TE ( -- x addr ) 3 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_TE, TE
    : Ethernet_MAC_MACCR_DC ( -- x addr ) 4 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_DC, DC
    : Ethernet_MAC_MACCR_BL ( %bb -- x addr ) 5 lshift Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_BL, BL
    : Ethernet_MAC_MACCR_APCS ( -- x addr ) 7 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_APCS, APCS
    : Ethernet_MAC_MACCR_RD ( -- x addr ) 9 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_RD, RD
    : Ethernet_MAC_MACCR_IPCO ( -- x addr ) 10 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_IPCO, IPCO
    : Ethernet_MAC_MACCR_DM ( -- x addr ) 11 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_DM, DM
    : Ethernet_MAC_MACCR_LM ( -- x addr ) 12 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_LM, LM
    : Ethernet_MAC_MACCR_ROD ( -- x addr ) 13 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_ROD, ROD
    : Ethernet_MAC_MACCR_FES ( -- x addr ) 14 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_FES, FES
    : Ethernet_MAC_MACCR_CSD ( -- x addr ) 16 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_CSD, CSD
    : Ethernet_MAC_MACCR_IFG ( %bbb -- x addr ) 17 lshift Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_IFG, IFG
    : Ethernet_MAC_MACCR_JD ( -- x addr ) 22 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_JD, JD
    : Ethernet_MAC_MACCR_WD ( -- x addr ) 23 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_WD, WD
    : Ethernet_MAC_MACCR_CSTF ( -- x addr ) 25 bit Ethernet_MAC_MACCR ; \ Ethernet_MAC_MACCR_CSTF, CSTF
  [then]

  [if]
    \ Ethernet_MAC_MACFFR (read-write) Reset:0x00000000
    : Ethernet_MAC_MACFFR_PM ( -- x addr ) 0 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_PM, no description available
    : Ethernet_MAC_MACFFR_HU ( -- x addr ) 1 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_HU, no description available
    : Ethernet_MAC_MACFFR_HM ( -- x addr ) 2 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_HM, no description available
    : Ethernet_MAC_MACFFR_DAIF ( -- x addr ) 3 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_DAIF, no description available
    : Ethernet_MAC_MACFFR_RAM ( -- x addr ) 4 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_RAM, no description available
    : Ethernet_MAC_MACFFR_BFD ( -- x addr ) 5 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_BFD, no description available
    : Ethernet_MAC_MACFFR_PCF ( -- x addr ) 6 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_PCF, no description available
    : Ethernet_MAC_MACFFR_SAIF ( -- x addr ) 7 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_SAIF, no description available
    : Ethernet_MAC_MACFFR_SAF ( -- x addr ) 8 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_SAF, no description available
    : Ethernet_MAC_MACFFR_HPF ( -- x addr ) 9 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_HPF, no description available
    : Ethernet_MAC_MACFFR_RA ( -- x addr ) 31 bit Ethernet_MAC_MACFFR ; \ Ethernet_MAC_MACFFR_RA, no description available
  [then]

  execute-defined? use-Ethernet_MAC [if]
    \ Ethernet_MAC_MACHTHR (read-write) Reset:0x00000000
    : Ethernet_MAC_MACHTHR_HTH ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACHTHR ; \ Ethernet_MAC_MACHTHR_HTH, no description available
  [then]

  [if]
    \ Ethernet_MAC_MACHTLR (read-write) Reset:0x00000000
    : Ethernet_MAC_MACHTLR_HTL ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACHTLR ; \ Ethernet_MAC_MACHTLR_HTL, no description available
  [then]

  execute-defined? use-Ethernet_MAC [if]
    \ Ethernet_MAC_MACMIIAR (read-write) Reset:0x00000000
    : Ethernet_MAC_MACMIIAR_MB ( -- x addr ) 0 bit Ethernet_MAC_MACMIIAR ; \ Ethernet_MAC_MACMIIAR_MB, no description available
    : Ethernet_MAC_MACMIIAR_MW ( -- x addr ) 1 bit Ethernet_MAC_MACMIIAR ; \ Ethernet_MAC_MACMIIAR_MW, no description available
    : Ethernet_MAC_MACMIIAR_CR ( %bbb -- x addr ) 2 lshift Ethernet_MAC_MACMIIAR ; \ Ethernet_MAC_MACMIIAR_CR, no description available
    : Ethernet_MAC_MACMIIAR_MR ( %bbbbb -- x addr ) 6 lshift Ethernet_MAC_MACMIIAR ; \ Ethernet_MAC_MACMIIAR_MR, no description available
    : Ethernet_MAC_MACMIIAR_PA ( %bbbbb -- x addr ) 11 lshift Ethernet_MAC_MACMIIAR ; \ Ethernet_MAC_MACMIIAR_PA, no description available
  [then]

  [if]
    \ Ethernet_MAC_MACMIIDR (read-write) Reset:0x00000000
    : Ethernet_MAC_MACMIIDR_TD ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACMIIDR ; \ Ethernet_MAC_MACMIIDR_TD, no description available
  [then]

  execute-defined? use-Ethernet_MAC [if]
    \ Ethernet_MAC_MACFCR (read-write) Reset:0x00000000
    : Ethernet_MAC_MACFCR_FCB ( -- x addr ) 0 bit Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_FCB, no description available
    : Ethernet_MAC_MACFCR_TFCE ( -- x addr ) 1 bit Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_TFCE, no description available
    : Ethernet_MAC_MACFCR_RFCE ( -- x addr ) 2 bit Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_RFCE, no description available
    : Ethernet_MAC_MACFCR_UPFD ( -- x addr ) 3 bit Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_UPFD, no description available
    : Ethernet_MAC_MACFCR_PLT ( %bb -- x addr ) 4 lshift Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_PLT, no description available
    : Ethernet_MAC_MACFCR_ZQPD ( -- x addr ) 7 bit Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_ZQPD, no description available
    : Ethernet_MAC_MACFCR_PT ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift Ethernet_MAC_MACFCR ; \ Ethernet_MAC_MACFCR_PT, no description available
  [then]

  [if]
    \ Ethernet_MAC_MACVLANTR (read-write) Reset:0x00000000
    : Ethernet_MAC_MACVLANTR_VLANTI ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACVLANTR ; \ Ethernet_MAC_MACVLANTR_VLANTI, no description available
    : Ethernet_MAC_MACVLANTR_VLANTC ( -- x addr ) 16 bit Ethernet_MAC_MACVLANTR ; \ Ethernet_MAC_MACVLANTR_VLANTC, no description available
  [then]

  execute-defined? use-Ethernet_MAC [if]
    \ Ethernet_MAC_MACPMTCSR (read-write) Reset:0x00000000
    : Ethernet_MAC_MACPMTCSR_PD ( -- x addr ) 0 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_PD, no description available
    : Ethernet_MAC_MACPMTCSR_MPE ( -- x addr ) 1 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_MPE, no description available
    : Ethernet_MAC_MACPMTCSR_WFE ( -- x addr ) 2 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_WFE, no description available
    : Ethernet_MAC_MACPMTCSR_MPR ( -- x addr ) 5 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_MPR, no description available
    : Ethernet_MAC_MACPMTCSR_WFR ( -- x addr ) 6 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_WFR, no description available
    : Ethernet_MAC_MACPMTCSR_GU ( -- x addr ) 9 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_GU, no description available
    : Ethernet_MAC_MACPMTCSR_WFFRPR ( -- x addr ) 31 bit Ethernet_MAC_MACPMTCSR ; \ Ethernet_MAC_MACPMTCSR_WFFRPR, no description available
  [then]

  [if]
    \ Ethernet_MAC_MACDBGR (read-only) Reset:0x00000000
    : Ethernet_MAC_MACDBGR_CR? ( --  1|0 ) 0 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_CR, CR
    : Ethernet_MAC_MACDBGR_CSR? ( --  1|0 ) 1 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_CSR, CSR
    : Ethernet_MAC_MACDBGR_ROR? ( --  1|0 ) 2 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_ROR, ROR
    : Ethernet_MAC_MACDBGR_MCF? ( --  1|0 ) 3 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_MCF, MCF
    : Ethernet_MAC_MACDBGR_MCP? ( --  1|0 ) 4 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_MCP, MCP
    : Ethernet_MAC_MACDBGR_MCFHP? ( --  1|0 ) 5 bit Ethernet_MAC_MACDBGR bit@ ; \ Ethernet_MAC_MACDBGR_MCFHP, MCFHP
  [then]

  execute-defined? use-Ethernet_MAC [if]
    \ Ethernet_MAC_MACSR (multiple-access)  Reset:0x00000000
    : Ethernet_MAC_MACSR_PMTS ( -- x addr ) 3 bit Ethernet_MAC_MACSR ; \ Ethernet_MAC_MACSR_PMTS, no description available
    : Ethernet_MAC_MACSR_MMCS ( -- x addr ) 4 bit Ethernet_MAC_MACSR ; \ Ethernet_MAC_MACSR_MMCS, no description available
    : Ethernet_MAC_MACSR_MMCRS ( -- x addr ) 5 bit Ethernet_MAC_MACSR ; \ Ethernet_MAC_MACSR_MMCRS, no description available
    : Ethernet_MAC_MACSR_MMCTS ( -- x addr ) 6 bit Ethernet_MAC_MACSR ; \ Ethernet_MAC_MACSR_MMCTS, no description available
    : Ethernet_MAC_MACSR_TSTS ( -- x addr ) 9 bit Ethernet_MAC_MACSR ; \ Ethernet_MAC_MACSR_TSTS, no description available
  [then]

  [if]
    \ Ethernet_MAC_MACIMR (read-write) Reset:0x00000000
    : Ethernet_MAC_MACIMR_PMTIM ( -- x addr ) 3 bit Ethernet_MAC_MACIMR ; \ Ethernet_MAC_MACIMR_PMTIM, no description available
    : Ethernet_MAC_MACIMR_TSTIM ( -- x addr ) 9 bit Ethernet_MAC_MACIMR ; \ Ethernet_MAC_MACIMR_TSTIM, no description available
  [then]

  execute-defined? use-Ethernet_MAC [if]
    \ Ethernet_MAC_MACA0HR (multiple-access)  Reset:0x0010FFFF
    : Ethernet_MAC_MACA0HR_MACA0H ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA0HR ; \ Ethernet_MAC_MACA0HR_MACA0H, MAC address0 high
    : Ethernet_MAC_MACA0HR_MO ( -- x addr ) 31 bit Ethernet_MAC_MACA0HR ; \ Ethernet_MAC_MACA0HR_MO, Always 1
  [then]

  [if]
    \ Ethernet_MAC_MACA0LR (read-write) Reset:0xFFFFFFFF
    : Ethernet_MAC_MACA0LR_MACA0L ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA0LR ; \ Ethernet_MAC_MACA0LR_MACA0L, 0
  [then]

  execute-defined? use-Ethernet_MAC [if]
    \ Ethernet_MAC_MACA1HR (read-write) Reset:0x0000FFFF
    : Ethernet_MAC_MACA1HR_MACA1H ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA1HR ; \ Ethernet_MAC_MACA1HR_MACA1H, no description available
    : Ethernet_MAC_MACA1HR_MBC ( %bbbbbb -- x addr ) 24 lshift Ethernet_MAC_MACA1HR ; \ Ethernet_MAC_MACA1HR_MBC, no description available
    : Ethernet_MAC_MACA1HR_SA ( -- x addr ) 30 bit Ethernet_MAC_MACA1HR ; \ Ethernet_MAC_MACA1HR_SA, no description available
    : Ethernet_MAC_MACA1HR_AE ( -- x addr ) 31 bit Ethernet_MAC_MACA1HR ; \ Ethernet_MAC_MACA1HR_AE, no description available
  [then]

  [if]
    \ Ethernet_MAC_MACA1LR (read-write) Reset:0xFFFFFFFF
    : Ethernet_MAC_MACA1LR_MACA1LR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA1LR ; \ Ethernet_MAC_MACA1LR_MACA1LR, no description available
  [then]

  execute-defined? use-Ethernet_MAC [if]
    \ Ethernet_MAC_MACA2HR (read-write) Reset:0x0000FFFF
    : Ethernet_MAC_MACA2HR_MAC2AH ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA2HR ; \ Ethernet_MAC_MACA2HR_MAC2AH, no description available
    : Ethernet_MAC_MACA2HR_MBC ( %bbbbbb -- x addr ) 24 lshift Ethernet_MAC_MACA2HR ; \ Ethernet_MAC_MACA2HR_MBC, no description available
    : Ethernet_MAC_MACA2HR_SA ( -- x addr ) 30 bit Ethernet_MAC_MACA2HR ; \ Ethernet_MAC_MACA2HR_SA, no description available
    : Ethernet_MAC_MACA2HR_AE ( -- x addr ) 31 bit Ethernet_MAC_MACA2HR ; \ Ethernet_MAC_MACA2HR_AE, no description available
  [then]

  [if]
    \ Ethernet_MAC_MACA2LR (read-write) Reset:0xFFFFFFFF
    : Ethernet_MAC_MACA2LR_MACA2L x addr ) Ethernet_MAC_MACA2LR ; \ Ethernet_MAC_MACA2LR_MACA2L, no description available
  [then]

  execute-defined? use-Ethernet_MAC [if]
    \ Ethernet_MAC_MACA3HR (read-write) Reset:0x0000FFFF
    : Ethernet_MAC_MACA3HR_MACA3H ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA3HR ; \ Ethernet_MAC_MACA3HR_MACA3H, no description available
    : Ethernet_MAC_MACA3HR_MBC ( %bbbbbb -- x addr ) 24 lshift Ethernet_MAC_MACA3HR ; \ Ethernet_MAC_MACA3HR_MBC, no description available
    : Ethernet_MAC_MACA3HR_SA ( -- x addr ) 30 bit Ethernet_MAC_MACA3HR ; \ Ethernet_MAC_MACA3HR_SA, no description available
    : Ethernet_MAC_MACA3HR_AE ( -- x addr ) 31 bit Ethernet_MAC_MACA3HR ; \ Ethernet_MAC_MACA3HR_AE, no description available
  [then]

  [if]
    \ Ethernet_MAC_MACA3LR (read-write) Reset:0xFFFFFFFF
    : Ethernet_MAC_MACA3LR_MBCA3L ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_MAC_MACA3LR ; \ Ethernet_MAC_MACA3LR_MBCA3L, no description available
  [then]

  execute-defined? use-Ethernet_MMC [if]
    \ Ethernet_MMC_MMCCR (read-write) Reset:0x00000000
    : Ethernet_MMC_MMCCR_CR ( -- x addr ) 0 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_CR, no description available
    : Ethernet_MMC_MMCCR_CSR ( -- x addr ) 1 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_CSR, no description available
    : Ethernet_MMC_MMCCR_ROR ( -- x addr ) 2 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_ROR, no description available
    : Ethernet_MMC_MMCCR_MCF ( -- x addr ) 3 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_MCF, no description available
    : Ethernet_MMC_MMCCR_MCP ( -- x addr ) 4 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_MCP, no description available
    : Ethernet_MMC_MMCCR_MCFHP ( -- x addr ) 5 bit Ethernet_MMC_MMCCR ; \ Ethernet_MMC_MMCCR_MCFHP, no description available
  [then]

  [if]
    \ Ethernet_MMC_MMCRIR (read-write) Reset:0x00000000
    : Ethernet_MMC_MMCRIR_RFCES ( -- x addr ) 5 bit Ethernet_MMC_MMCRIR ; \ Ethernet_MMC_MMCRIR_RFCES, no description available
    : Ethernet_MMC_MMCRIR_RFAES ( -- x addr ) 6 bit Ethernet_MMC_MMCRIR ; \ Ethernet_MMC_MMCRIR_RFAES, no description available
    : Ethernet_MMC_MMCRIR_RGUFS ( -- x addr ) 17 bit Ethernet_MMC_MMCRIR ; \ Ethernet_MMC_MMCRIR_RGUFS, no description available
  [then]

  execute-defined? use-Ethernet_MMC [if]
    \ Ethernet_MMC_MMCTIR (read-only) Reset:0x00000000
    : Ethernet_MMC_MMCTIR_TGFSCS? ( --  1|0 ) 14 bit Ethernet_MMC_MMCTIR bit@ ; \ Ethernet_MMC_MMCTIR_TGFSCS, no description available
    : Ethernet_MMC_MMCTIR_TGFMSCS? ( --  1|0 ) 15 bit Ethernet_MMC_MMCTIR bit@ ; \ Ethernet_MMC_MMCTIR_TGFMSCS, no description available
    : Ethernet_MMC_MMCTIR_TGFS? ( --  1|0 ) 21 bit Ethernet_MMC_MMCTIR bit@ ; \ Ethernet_MMC_MMCTIR_TGFS, no description available
  [then]

  [if]
    \ Ethernet_MMC_MMCRIMR (read-write) Reset:0x00000000
    : Ethernet_MMC_MMCRIMR_RFCEM ( -- x addr ) 5 bit Ethernet_MMC_MMCRIMR ; \ Ethernet_MMC_MMCRIMR_RFCEM, no description available
    : Ethernet_MMC_MMCRIMR_RFAEM ( -- x addr ) 6 bit Ethernet_MMC_MMCRIMR ; \ Ethernet_MMC_MMCRIMR_RFAEM, no description available
    : Ethernet_MMC_MMCRIMR_RGUFM ( -- x addr ) 17 bit Ethernet_MMC_MMCRIMR ; \ Ethernet_MMC_MMCRIMR_RGUFM, no description available
  [then]

  execute-defined? use-Ethernet_MMC [if]
    \ Ethernet_MMC_MMCTIMR (read-write) Reset:0x00000000
    : Ethernet_MMC_MMCTIMR_TGFSCM ( -- x addr ) 14 bit Ethernet_MMC_MMCTIMR ; \ Ethernet_MMC_MMCTIMR_TGFSCM, no description available
    : Ethernet_MMC_MMCTIMR_TGFMSCM ( -- x addr ) 15 bit Ethernet_MMC_MMCTIMR ; \ Ethernet_MMC_MMCTIMR_TGFMSCM, no description available
    : Ethernet_MMC_MMCTIMR_TGFM ( -- x addr ) 16 bit Ethernet_MMC_MMCTIMR ; \ Ethernet_MMC_MMCTIMR_TGFM, no description available
  [then]

  [if]
    \ Ethernet_MMC_MMCTGFSCCR (read-only) Reset:0x00000000
    : Ethernet_MMC_MMCTGFSCCR_TGFSCC? ( --  x ) Ethernet_MMC_MMCTGFSCCR @ ; \ Ethernet_MMC_MMCTGFSCCR_TGFSCC, no description available
  [then]

  execute-defined? use-Ethernet_MMC [if]
    \ Ethernet_MMC_MMCTGFMSCCR (read-only) Reset:0x00000000
    : Ethernet_MMC_MMCTGFMSCCR_TGFMSCC? ( --  x ) Ethernet_MMC_MMCTGFMSCCR @ ; \ Ethernet_MMC_MMCTGFMSCCR_TGFMSCC, no description available
  [then]

  [if]
    \ Ethernet_MMC_MMCTGFCR (read-only) Reset:0x00000000
    : Ethernet_MMC_MMCTGFCR_TGFC? ( --  x ) Ethernet_MMC_MMCTGFCR @ ; \ Ethernet_MMC_MMCTGFCR_TGFC, HTL
  [then]

  execute-defined? use-Ethernet_MMC [if]
    \ Ethernet_MMC_MMCRFCECR (read-only) Reset:0x00000000
    : Ethernet_MMC_MMCRFCECR_RFCFC? ( --  x ) Ethernet_MMC_MMCRFCECR @ ; \ Ethernet_MMC_MMCRFCECR_RFCFC, no description available
  [then]

  [if]
    \ Ethernet_MMC_MMCRFAECR (read-only) Reset:0x00000000
    : Ethernet_MMC_MMCRFAECR_RFAEC? ( --  x ) Ethernet_MMC_MMCRFAECR @ ; \ Ethernet_MMC_MMCRFAECR_RFAEC, no description available
  [then]

  execute-defined? use-Ethernet_MMC [if]
    \ Ethernet_MMC_MMCRGUFCR (read-only) Reset:0x00000000
    : Ethernet_MMC_MMCRGUFCR_RGUFC? ( --  x ) Ethernet_MMC_MMCRGUFCR @ ; \ Ethernet_MMC_MMCRGUFCR_RGUFC, no description available
  [then]

  [if]
    \ Ethernet_PTP_PTPTSCR (read-write) Reset:0x00002000
    : Ethernet_PTP_PTPTSCR_TSE ( -- x addr ) 0 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSE, no description available
    : Ethernet_PTP_PTPTSCR_TSFCU ( -- x addr ) 1 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSFCU, no description available
    : Ethernet_PTP_PTPTSCR_TSPTPPSV2E ( -- x addr ) 10 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSPTPPSV2E, no description available
    : Ethernet_PTP_PTPTSCR_TSSPTPOEFE ( -- x addr ) 11 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSPTPOEFE, no description available
    : Ethernet_PTP_PTPTSCR_TSSIPV6FE ( -- x addr ) 12 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSIPV6FE, no description available
    : Ethernet_PTP_PTPTSCR_TSSIPV4FE ( -- x addr ) 13 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSIPV4FE, no description available
    : Ethernet_PTP_PTPTSCR_TSSEME ( -- x addr ) 14 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSEME, no description available
    : Ethernet_PTP_PTPTSCR_TSSMRME ( -- x addr ) 15 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSMRME, no description available
    : Ethernet_PTP_PTPTSCR_TSCNT ( %bb -- x addr ) 16 lshift Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSCNT, no description available
    : Ethernet_PTP_PTPTSCR_TSPFFMAE ( -- x addr ) 18 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSPFFMAE, no description available
    : Ethernet_PTP_PTPTSCR_TSSTI ( -- x addr ) 2 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSTI, no description available
    : Ethernet_PTP_PTPTSCR_TSSTU ( -- x addr ) 3 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSTU, no description available
    : Ethernet_PTP_PTPTSCR_TSITE ( -- x addr ) 4 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSITE, no description available
    : Ethernet_PTP_PTPTSCR_TTSARU ( -- x addr ) 5 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TTSARU, no description available
    : Ethernet_PTP_PTPTSCR_TSSARFE ( -- x addr ) 8 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSARFE, no description available
    : Ethernet_PTP_PTPTSCR_TSSSR ( -- x addr ) 9 bit Ethernet_PTP_PTPTSCR ; \ Ethernet_PTP_PTPTSCR_TSSSR, no description available
  [then]

  execute-defined? use-Ethernet_PTP [if]
    \ Ethernet_PTP_PTPSSIR (read-write) Reset:0x00000000
    : Ethernet_PTP_PTPSSIR_STSSI ( %bbbbbbbb -- x addr ) Ethernet_PTP_PTPSSIR ; \ Ethernet_PTP_PTPSSIR_STSSI, no description available
  [then]

  [if]
    \ Ethernet_PTP_PTPTSHR (read-only) Reset:0x00000000
    : Ethernet_PTP_PTPTSHR_STS? ( --  x ) Ethernet_PTP_PTPTSHR @ ; \ Ethernet_PTP_PTPTSHR_STS, no description available
  [then]

  execute-defined? use-Ethernet_PTP [if]
    \ Ethernet_PTP_PTPTSLR (read-only) Reset:0x00000000
    : Ethernet_PTP_PTPTSLR_STSS? ( --  x ) Ethernet_PTP_PTPTSLR @ ; \ Ethernet_PTP_PTPTSLR_STSS, no description available
    : Ethernet_PTP_PTPTSLR_STPNS? ( --  1|0 ) 31 bit Ethernet_PTP_PTPTSLR bit@ ; \ Ethernet_PTP_PTPTSLR_STPNS, no description available
  [then]

  [if]
    \ Ethernet_PTP_PTPTSHUR (read-write) Reset:0x00000000
    : Ethernet_PTP_PTPTSHUR_TSUS ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_PTP_PTPTSHUR ; \ Ethernet_PTP_PTPTSHUR_TSUS, no description available
  [then]

  execute-defined? use-Ethernet_PTP [if]
    \ Ethernet_PTP_PTPTSLUR (read-write) Reset:0x00000000
    : Ethernet_PTP_PTPTSLUR_TSUSS x addr ) Ethernet_PTP_PTPTSLUR ; \ Ethernet_PTP_PTPTSLUR_TSUSS, no description available
    : Ethernet_PTP_PTPTSLUR_TSUPNS ( -- x addr ) 31 bit Ethernet_PTP_PTPTSLUR ; \ Ethernet_PTP_PTPTSLUR_TSUPNS, no description available
  [then]

  [if]
    \ Ethernet_PTP_PTPTSAR (read-write) Reset:0x00000000
    : Ethernet_PTP_PTPTSAR_TSA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_PTP_PTPTSAR ; \ Ethernet_PTP_PTPTSAR_TSA, no description available
  [then]

  execute-defined? use-Ethernet_PTP [if]
    \ Ethernet_PTP_PTPTTHR (read-write) Reset:0x00000000
    : Ethernet_PTP_PTPTTHR_TTSH ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_PTP_PTPTTHR ; \ Ethernet_PTP_PTPTTHR_TTSH, 0
  [then]

  [if]
    \ Ethernet_PTP_PTPTTLR (read-write) Reset:0x00000000
    : Ethernet_PTP_PTPTTLR_TTSL ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_PTP_PTPTTLR ; \ Ethernet_PTP_PTPTTLR_TTSL, no description available
  [then]

  execute-defined? use-Ethernet_PTP [if]
    \ Ethernet_PTP_PTPTSSR (read-only) Reset:0x00000000
    : Ethernet_PTP_PTPTSSR_TSSO? ( --  1|0 ) 0 bit Ethernet_PTP_PTPTSSR bit@ ; \ Ethernet_PTP_PTPTSSR_TSSO, no description available
    : Ethernet_PTP_PTPTSSR_TSTTR? ( --  1|0 ) 1 bit Ethernet_PTP_PTPTSSR bit@ ; \ Ethernet_PTP_PTPTSSR_TSTTR, no description available
  [then]

  [if]
    \ Ethernet_PTP_PTPPPSCR (read-only) Reset:0x00000000
    : Ethernet_PTP_PTPPPSCR_TSSO? ( --  1|0 ) 0 bit Ethernet_PTP_PTPPPSCR bit@ ; \ Ethernet_PTP_PTPPPSCR_TSSO, TSSO
    : Ethernet_PTP_PTPPPSCR_TSTTR? ( --  1|0 ) 1 bit Ethernet_PTP_PTPPPSCR bit@ ; \ Ethernet_PTP_PTPPPSCR_TSTTR, TSTTR
  [then]

  execute-defined? use-Ethernet_DMA [if]
    \ Ethernet_DMA_DMABMR (read-write) Reset:0x00002101
    : Ethernet_DMA_DMABMR_SR ( -- x addr ) 0 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_SR, no description available
    : Ethernet_DMA_DMABMR_DA ( -- x addr ) 1 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_DA, no description available
    : Ethernet_DMA_DMABMR_DSL ( %bbbbb -- x addr ) 2 lshift Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_DSL, no description available
    : Ethernet_DMA_DMABMR_EDFE ( -- x addr ) 7 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_EDFE, no description available
    : Ethernet_DMA_DMABMR_PBL ( %bbbbbb -- x addr ) 8 lshift Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_PBL, no description available
    : Ethernet_DMA_DMABMR_RTPR ( %bb -- x addr ) 14 lshift Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_RTPR, no description available
    : Ethernet_DMA_DMABMR_FB ( -- x addr ) 16 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_FB, no description available
    : Ethernet_DMA_DMABMR_RDP ( %bbbbbb -- x addr ) 17 lshift Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_RDP, no description available
    : Ethernet_DMA_DMABMR_USP ( -- x addr ) 23 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_USP, no description available
    : Ethernet_DMA_DMABMR_FPM ( -- x addr ) 24 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_FPM, no description available
    : Ethernet_DMA_DMABMR_AAB ( -- x addr ) 25 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_AAB, no description available
    : Ethernet_DMA_DMABMR_MB ( -- x addr ) 26 bit Ethernet_DMA_DMABMR ; \ Ethernet_DMA_DMABMR_MB, no description available
  [then]

  [if]
    \ Ethernet_DMA_DMATPDR (read-write) Reset:0x00000000
    : Ethernet_DMA_DMATPDR_TPD ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_DMA_DMATPDR ; \ Ethernet_DMA_DMATPDR_TPD, no description available
  [then]

  execute-defined? use-Ethernet_DMA [if]
    \ Ethernet_DMA_DMARPDR (read-write) Reset:0x00000000
    : Ethernet_DMA_DMARPDR_RPD ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_DMA_DMARPDR ; \ Ethernet_DMA_DMARPDR_RPD, RPD
  [then]

  [if]
    \ Ethernet_DMA_DMARDLAR (read-write) Reset:0x00000000
    : Ethernet_DMA_DMARDLAR_SRL ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_DMA_DMARDLAR ; \ Ethernet_DMA_DMARDLAR_SRL, no description available
  [then]

  execute-defined? use-Ethernet_DMA [if]
    \ Ethernet_DMA_DMATDLAR (read-write) Reset:0x00000000
    : Ethernet_DMA_DMATDLAR_STL ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) Ethernet_DMA_DMATDLAR ; \ Ethernet_DMA_DMATDLAR_STL, no description available
  [then]

  [if]
    \ Ethernet_DMA_DMASR (multiple-access)  Reset:0x00000000
    : Ethernet_DMA_DMASR_TS ( -- x addr ) 0 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TS, no description available
    : Ethernet_DMA_DMASR_TPSS ( -- x addr ) 1 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TPSS, no description available
    : Ethernet_DMA_DMASR_TBUS ( -- x addr ) 2 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TBUS, no description available
    : Ethernet_DMA_DMASR_TJTS ( -- x addr ) 3 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TJTS, no description available
    : Ethernet_DMA_DMASR_ROS ( -- x addr ) 4 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_ROS, no description available
    : Ethernet_DMA_DMASR_TUS ( -- x addr ) 5 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TUS, no description available
    : Ethernet_DMA_DMASR_RS ( -- x addr ) 6 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_RS, no description available
    : Ethernet_DMA_DMASR_RBUS ( -- x addr ) 7 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_RBUS, no description available
    : Ethernet_DMA_DMASR_RPSS ( -- x addr ) 8 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_RPSS, no description available
    : Ethernet_DMA_DMASR_PWTS ( -- x addr ) 9 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_PWTS, no description available
    : Ethernet_DMA_DMASR_ETS ( -- x addr ) 10 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_ETS, no description available
    : Ethernet_DMA_DMASR_FBES ( -- x addr ) 13 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_FBES, no description available
    : Ethernet_DMA_DMASR_ERS ( -- x addr ) 14 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_ERS, no description available
    : Ethernet_DMA_DMASR_AIS ( -- x addr ) 15 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_AIS, no description available
    : Ethernet_DMA_DMASR_NIS ( -- x addr ) 16 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_NIS, no description available
    : Ethernet_DMA_DMASR_RPS ( %bbb -- x addr ) 17 lshift Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_RPS, no description available
    : Ethernet_DMA_DMASR_TPS ( %bbb -- x addr ) 20 lshift Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TPS, no description available
    : Ethernet_DMA_DMASR_EBS ( %bbb -- x addr ) 23 lshift Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_EBS, no description available
    : Ethernet_DMA_DMASR_MMCS ( -- x addr ) 27 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_MMCS, no description available
    : Ethernet_DMA_DMASR_PMTS ( -- x addr ) 28 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_PMTS, no description available
    : Ethernet_DMA_DMASR_TSTS ( -- x addr ) 29 bit Ethernet_DMA_DMASR ; \ Ethernet_DMA_DMASR_TSTS, no description available
  [then]

  execute-defined? use-Ethernet_DMA [if]
    \ Ethernet_DMA_DMAOMR (read-write) Reset:0x00000000
    : Ethernet_DMA_DMAOMR_SR ( -- x addr ) 1 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_SR, SR
    : Ethernet_DMA_DMAOMR_OSF ( -- x addr ) 2 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_OSF, OSF
    : Ethernet_DMA_DMAOMR_RTC ( %bb -- x addr ) 3 lshift Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_RTC, RTC
    : Ethernet_DMA_DMAOMR_FUGF ( -- x addr ) 6 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_FUGF, FUGF
    : Ethernet_DMA_DMAOMR_FEF ( -- x addr ) 7 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_FEF, FEF
    : Ethernet_DMA_DMAOMR_ST ( -- x addr ) 13 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_ST, ST
    : Ethernet_DMA_DMAOMR_TTC ( %bbb -- x addr ) 14 lshift Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_TTC, TTC
    : Ethernet_DMA_DMAOMR_FTF ( -- x addr ) 20 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_FTF, FTF
    : Ethernet_DMA_DMAOMR_TSF ( -- x addr ) 21 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_TSF, TSF
    : Ethernet_DMA_DMAOMR_DFRF ( -- x addr ) 24 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_DFRF, DFRF
    : Ethernet_DMA_DMAOMR_RSF ( -- x addr ) 25 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_RSF, RSF
    : Ethernet_DMA_DMAOMR_DTCEFD ( -- x addr ) 26 bit Ethernet_DMA_DMAOMR ; \ Ethernet_DMA_DMAOMR_DTCEFD, DTCEFD
  [then]

  [if]
    \ Ethernet_DMA_DMAIER (read-write) Reset:0x00000000
    : Ethernet_DMA_DMAIER_TIE ( -- x addr ) 0 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_TIE, no description available
    : Ethernet_DMA_DMAIER_TPSIE ( -- x addr ) 1 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_TPSIE, no description available
    : Ethernet_DMA_DMAIER_TBUIE ( -- x addr ) 2 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_TBUIE, no description available
    : Ethernet_DMA_DMAIER_TJTIE ( -- x addr ) 3 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_TJTIE, no description available
    : Ethernet_DMA_DMAIER_ROIE ( -- x addr ) 4 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_ROIE, no description available
    : Ethernet_DMA_DMAIER_TUIE ( -- x addr ) 5 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_TUIE, no description available
    : Ethernet_DMA_DMAIER_RIE ( -- x addr ) 6 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_RIE, no description available
    : Ethernet_DMA_DMAIER_RBUIE ( -- x addr ) 7 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_RBUIE, no description available
    : Ethernet_DMA_DMAIER_RPSIE ( -- x addr ) 8 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_RPSIE, no description available
    : Ethernet_DMA_DMAIER_RWTIE ( -- x addr ) 9 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_RWTIE, no description available
    : Ethernet_DMA_DMAIER_ETIE ( -- x addr ) 10 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_ETIE, no description available
    : Ethernet_DMA_DMAIER_FBEIE ( -- x addr ) 13 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_FBEIE, no description available
    : Ethernet_DMA_DMAIER_ERIE ( -- x addr ) 14 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_ERIE, no description available
    : Ethernet_DMA_DMAIER_AISE ( -- x addr ) 15 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_AISE, no description available
    : Ethernet_DMA_DMAIER_NISE ( -- x addr ) 16 bit Ethernet_DMA_DMAIER ; \ Ethernet_DMA_DMAIER_NISE, no description available
  [then]

  execute-defined? use-Ethernet_DMA [if]
    \ Ethernet_DMA_DMAMFBOCR (read-write) Reset:0x00000000
    : Ethernet_DMA_DMAMFBOCR_MFC ( %bbbbbbbbbbbbbbbb -- x addr ) Ethernet_DMA_DMAMFBOCR ; \ Ethernet_DMA_DMAMFBOCR_MFC, no description available
    : Ethernet_DMA_DMAMFBOCR_OMFC ( -- x addr ) 16 bit Ethernet_DMA_DMAMFBOCR ; \ Ethernet_DMA_DMAMFBOCR_OMFC, no description available
    : Ethernet_DMA_DMAMFBOCR_MFA x addr ) 17 lshift Ethernet_DMA_DMAMFBOCR ; \ Ethernet_DMA_DMAMFBOCR_MFA, no description available
    : Ethernet_DMA_DMAMFBOCR_OFOC ( -- x addr ) 28 bit Ethernet_DMA_DMAMFBOCR ; \ Ethernet_DMA_DMAMFBOCR_OFOC, no description available
  [then]

  [if]
    \ Ethernet_DMA_DMARSWTR (read-write) Reset:0x00000000
    : Ethernet_DMA_DMARSWTR_RSWTC ( %bbbbbbbb -- x addr ) Ethernet_DMA_DMARSWTR ; \ Ethernet_DMA_DMARSWTR_RSWTC, RSWTC
  [then]

  execute-defined? use-Ethernet_DMA [if]
    \ Ethernet_DMA_DMACHTDR (read-only) Reset:0x00000000
    : Ethernet_DMA_DMACHTDR_HTDAP? ( --  x ) Ethernet_DMA_DMACHTDR @ ; \ Ethernet_DMA_DMACHTDR_HTDAP, HTDAP
  [then]

  [if]
    \ Ethernet_DMA_DMACHRDR (read-only) Reset:0x00000000
    : Ethernet_DMA_DMACHRDR_HRDAP? ( --  x ) Ethernet_DMA_DMACHRDR @ ; \ Ethernet_DMA_DMACHRDR_HRDAP, HRDAP
  [then]

  execute-defined? use-Ethernet_DMA [if]
    \ Ethernet_DMA_DMACHTBAR (read-only) Reset:0x00000000
    : Ethernet_DMA_DMACHTBAR_HTBAP? ( --  x ) Ethernet_DMA_DMACHTBAR @ ; \ Ethernet_DMA_DMACHTBAR_HTBAP, no description available
  [then]

  [if]
    \ Ethernet_DMA_DMACHRBAR (read-only) Reset:0x00000000
    : Ethernet_DMA_DMACHRBAR_HRBAP? ( --  x ) Ethernet_DMA_DMACHRBAR @ ; \ Ethernet_DMA_DMACHRBAR_HRBAP, no description available
  [then]

  execute-defined? use-CRC [if]
    \ CRC_DR (read-write) Reset:0xFFFFFFFF
    : CRC_DR_DR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) CRC_DR ; \ CRC_DR_DR, Data Register
  [then]

  [if]
    \ CRC_IDR (read-write) Reset:0x00000000
    : CRC_IDR_IDR ( %bbbbbbbb -- x addr ) CRC_IDR ; \ CRC_IDR_IDR, Independent Data register
  [then]

  execute-defined? use-CRC [if]
    \ CRC_CR (write-only) Reset:0x00000000
    : CRC_CR_CR ( -- x addr ) 0 bit CRC_CR ; \ CRC_CR_CR, Control regidter
  [then]

  [if]
    \ OTG_FS_GLOBAL_FS_GOTGCTL (multiple-access)  Reset:0x00000800
    : OTG_FS_GLOBAL_FS_GOTGCTL_SRQSCS ( -- x addr ) 0 bit OTG_FS_GLOBAL_FS_GOTGCTL ; \ OTG_FS_GLOBAL_FS_GOTGCTL_SRQSCS, Session request success
    : OTG_FS_GLOBAL_FS_GOTGCTL_SRQ ( -- x addr ) 1 bit OTG_FS_GLOBAL_FS_GOTGCTL ; \ OTG_FS_GLOBAL_FS_GOTGCTL_SRQ, Session request
    : OTG_FS_GLOBAL_FS_GOTGCTL_HNGSCS ( -- x addr ) 8 bit OTG_FS_GLOBAL_FS_GOTGCTL ; \ OTG_FS_GLOBAL_FS_GOTGCTL_HNGSCS, Host negotiation success
    : OTG_FS_GLOBAL_FS_GOTGCTL_HNPRQ ( -- x addr ) 9 bit OTG_FS_GLOBAL_FS_GOTGCTL ; \ OTG_FS_GLOBAL_FS_GOTGCTL_HNPRQ, HNP request
    : OTG_FS_GLOBAL_FS_GOTGCTL_HSHNPEN ( -- x addr ) 10 bit OTG_FS_GLOBAL_FS_GOTGCTL ; \ OTG_FS_GLOBAL_FS_GOTGCTL_HSHNPEN, Host set HNP enable
    : OTG_FS_GLOBAL_FS_GOTGCTL_DHNPEN ( -- x addr ) 11 bit OTG_FS_GLOBAL_FS_GOTGCTL ; \ OTG_FS_GLOBAL_FS_GOTGCTL_DHNPEN, Device HNP enabled
    : OTG_FS_GLOBAL_FS_GOTGCTL_CIDSTS? ( -- 1|0 ) 16 bit OTG_FS_GLOBAL_FS_GOTGCTL bit@ ; \ OTG_FS_GLOBAL_FS_GOTGCTL_CIDSTS, Connector ID status
    : OTG_FS_GLOBAL_FS_GOTGCTL_DBCT ( -- x addr ) 17 bit OTG_FS_GLOBAL_FS_GOTGCTL ; \ OTG_FS_GLOBAL_FS_GOTGCTL_DBCT, Long/short debounce time
    : OTG_FS_GLOBAL_FS_GOTGCTL_ASVLD ( -- x addr ) 18 bit OTG_FS_GLOBAL_FS_GOTGCTL ; \ OTG_FS_GLOBAL_FS_GOTGCTL_ASVLD, A-session valid
    : OTG_FS_GLOBAL_FS_GOTGCTL_BSVLD ( -- x addr ) 19 bit OTG_FS_GLOBAL_FS_GOTGCTL ; \ OTG_FS_GLOBAL_FS_GOTGCTL_BSVLD, B-session valid
  [then]

  execute-defined? use-OTG_FS_GLOBAL [if]
    \ OTG_FS_GLOBAL_FS_GOTGINT (read-write) Reset:0x00000000
    : OTG_FS_GLOBAL_FS_GOTGINT_SEDET ( -- x addr ) 2 bit OTG_FS_GLOBAL_FS_GOTGINT ; \ OTG_FS_GLOBAL_FS_GOTGINT_SEDET, Session end detected
    : OTG_FS_GLOBAL_FS_GOTGINT_SRSSCHG ( -- x addr ) 8 bit OTG_FS_GLOBAL_FS_GOTGINT ; \ OTG_FS_GLOBAL_FS_GOTGINT_SRSSCHG, Session request success status  change
    : OTG_FS_GLOBAL_FS_GOTGINT_HNSSCHG ( -- x addr ) 9 bit OTG_FS_GLOBAL_FS_GOTGINT ; \ OTG_FS_GLOBAL_FS_GOTGINT_HNSSCHG, Host negotiation success status  change
    : OTG_FS_GLOBAL_FS_GOTGINT_HNGDET ( -- x addr ) 17 bit OTG_FS_GLOBAL_FS_GOTGINT ; \ OTG_FS_GLOBAL_FS_GOTGINT_HNGDET, Host negotiation detected
    : OTG_FS_GLOBAL_FS_GOTGINT_ADTOCHG ( -- x addr ) 18 bit OTG_FS_GLOBAL_FS_GOTGINT ; \ OTG_FS_GLOBAL_FS_GOTGINT_ADTOCHG, A-device timeout change
    : OTG_FS_GLOBAL_FS_GOTGINT_DBCDNE ( -- x addr ) 19 bit OTG_FS_GLOBAL_FS_GOTGINT ; \ OTG_FS_GLOBAL_FS_GOTGINT_DBCDNE, Debounce done
  [then]

  [if]
    \ OTG_FS_GLOBAL_FS_GAHBCFG (read-write) Reset:0x00000000
    : OTG_FS_GLOBAL_FS_GAHBCFG_GINT ( -- x addr ) 0 bit OTG_FS_GLOBAL_FS_GAHBCFG ; \ OTG_FS_GLOBAL_FS_GAHBCFG_GINT, Global interrupt mask
    : OTG_FS_GLOBAL_FS_GAHBCFG_TXFELVL ( -- x addr ) 7 bit OTG_FS_GLOBAL_FS_GAHBCFG ; \ OTG_FS_GLOBAL_FS_GAHBCFG_TXFELVL, TxFIFO empty level
    : OTG_FS_GLOBAL_FS_GAHBCFG_PTXFELVL ( -- x addr ) 8 bit OTG_FS_GLOBAL_FS_GAHBCFG ; \ OTG_FS_GLOBAL_FS_GAHBCFG_PTXFELVL, Periodic TxFIFO empty  level
  [then]

  execute-defined? use-OTG_FS_GLOBAL [if]
    \ OTG_FS_GLOBAL_FS_GUSBCFG (multiple-access)  Reset:0x00000A00
    : OTG_FS_GLOBAL_FS_GUSBCFG_TOCAL ( %bbb -- x addr ) OTG_FS_GLOBAL_FS_GUSBCFG ; \ OTG_FS_GLOBAL_FS_GUSBCFG_TOCAL, FS timeout calibration
    : OTG_FS_GLOBAL_FS_GUSBCFG_PHYSEL ( -- x addr ) 6 bit OTG_FS_GLOBAL_FS_GUSBCFG ; \ OTG_FS_GLOBAL_FS_GUSBCFG_PHYSEL, Full Speed serial transceiver  select
    : OTG_FS_GLOBAL_FS_GUSBCFG_SRPCAP ( -- x addr ) 8 bit OTG_FS_GLOBAL_FS_GUSBCFG ; \ OTG_FS_GLOBAL_FS_GUSBCFG_SRPCAP, SRP-capable
    : OTG_FS_GLOBAL_FS_GUSBCFG_HNPCAP ( -- x addr ) 9 bit OTG_FS_GLOBAL_FS_GUSBCFG ; \ OTG_FS_GLOBAL_FS_GUSBCFG_HNPCAP, HNP-capable
    : OTG_FS_GLOBAL_FS_GUSBCFG_TRDT ( %bbbb -- x addr ) 10 lshift OTG_FS_GLOBAL_FS_GUSBCFG ; \ OTG_FS_GLOBAL_FS_GUSBCFG_TRDT, USB turnaround time
    : OTG_FS_GLOBAL_FS_GUSBCFG_FHMOD ( -- x addr ) 29 bit OTG_FS_GLOBAL_FS_GUSBCFG ; \ OTG_FS_GLOBAL_FS_GUSBCFG_FHMOD, Force host mode
    : OTG_FS_GLOBAL_FS_GUSBCFG_FDMOD ( -- x addr ) 30 bit OTG_FS_GLOBAL_FS_GUSBCFG ; \ OTG_FS_GLOBAL_FS_GUSBCFG_FDMOD, Force device mode
    : OTG_FS_GLOBAL_FS_GUSBCFG_CTXPKT ( -- x addr ) 31 bit OTG_FS_GLOBAL_FS_GUSBCFG ; \ OTG_FS_GLOBAL_FS_GUSBCFG_CTXPKT, Corrupt Tx packet
  [then]

  [if]
    \ OTG_FS_GLOBAL_FS_GRSTCTL (multiple-access)  Reset:0x20000000
    : OTG_FS_GLOBAL_FS_GRSTCTL_CSRST ( -- x addr ) 0 bit OTG_FS_GLOBAL_FS_GRSTCTL ; \ OTG_FS_GLOBAL_FS_GRSTCTL_CSRST, Core soft reset
    : OTG_FS_GLOBAL_FS_GRSTCTL_HSRST ( -- x addr ) 1 bit OTG_FS_GLOBAL_FS_GRSTCTL ; \ OTG_FS_GLOBAL_FS_GRSTCTL_HSRST, HCLK soft reset
    : OTG_FS_GLOBAL_FS_GRSTCTL_FCRST ( -- x addr ) 2 bit OTG_FS_GLOBAL_FS_GRSTCTL ; \ OTG_FS_GLOBAL_FS_GRSTCTL_FCRST, Host frame counter reset
    : OTG_FS_GLOBAL_FS_GRSTCTL_RXFFLSH ( -- x addr ) 4 bit OTG_FS_GLOBAL_FS_GRSTCTL ; \ OTG_FS_GLOBAL_FS_GRSTCTL_RXFFLSH, RxFIFO flush
    : OTG_FS_GLOBAL_FS_GRSTCTL_TXFFLSH ( -- x addr ) 5 bit OTG_FS_GLOBAL_FS_GRSTCTL ; \ OTG_FS_GLOBAL_FS_GRSTCTL_TXFFLSH, TxFIFO flush
    : OTG_FS_GLOBAL_FS_GRSTCTL_TXFNUM ( %bbbbb -- x addr ) 6 lshift OTG_FS_GLOBAL_FS_GRSTCTL ; \ OTG_FS_GLOBAL_FS_GRSTCTL_TXFNUM, TxFIFO number
    : OTG_FS_GLOBAL_FS_GRSTCTL_AHBIDL ( -- x addr ) 31 bit OTG_FS_GLOBAL_FS_GRSTCTL ; \ OTG_FS_GLOBAL_FS_GRSTCTL_AHBIDL, AHB master idle
  [then]

  execute-defined? use-OTG_FS_GLOBAL [if]
    \ OTG_FS_GLOBAL_FS_GINTSTS (multiple-access)  Reset:0x04000020
    : OTG_FS_GLOBAL_FS_GINTSTS_CMOD ( -- x addr ) 0 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_CMOD, Current mode of operation
    : OTG_FS_GLOBAL_FS_GINTSTS_MMIS ( -- x addr ) 1 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_MMIS, Mode mismatch interrupt
    : OTG_FS_GLOBAL_FS_GINTSTS_OTGINT ( -- x addr ) 2 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_OTGINT, OTG interrupt
    : OTG_FS_GLOBAL_FS_GINTSTS_SOF ( -- x addr ) 3 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_SOF, Start of frame
    : OTG_FS_GLOBAL_FS_GINTSTS_RXFLVL ( -- x addr ) 4 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_RXFLVL, RxFIFO non-empty
    : OTG_FS_GLOBAL_FS_GINTSTS_NPTXFE ( -- x addr ) 5 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_NPTXFE, Non-periodic TxFIFO empty
    : OTG_FS_GLOBAL_FS_GINTSTS_GINAKEFF ( -- x addr ) 6 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_GINAKEFF, Global IN non-periodic NAK  effective
    : OTG_FS_GLOBAL_FS_GINTSTS_GOUTNAKEFF ( -- x addr ) 7 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_GOUTNAKEFF, Global OUT NAK effective
    : OTG_FS_GLOBAL_FS_GINTSTS_ESUSP ( -- x addr ) 10 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_ESUSP, Early suspend
    : OTG_FS_GLOBAL_FS_GINTSTS_USBSUSP ( -- x addr ) 11 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_USBSUSP, USB suspend
    : OTG_FS_GLOBAL_FS_GINTSTS_USBRST ( -- x addr ) 12 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_USBRST, USB reset
    : OTG_FS_GLOBAL_FS_GINTSTS_ENUMDNE ( -- x addr ) 13 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_ENUMDNE, Enumeration done
    : OTG_FS_GLOBAL_FS_GINTSTS_ISOODRP ( -- x addr ) 14 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_ISOODRP, Isochronous OUT packet dropped  interrupt
    : OTG_FS_GLOBAL_FS_GINTSTS_EOPF ( -- x addr ) 15 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_EOPF, End of periodic frame  interrupt
    : OTG_FS_GLOBAL_FS_GINTSTS_IEPINT ( -- x addr ) 18 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_IEPINT, IN endpoint interrupt
    : OTG_FS_GLOBAL_FS_GINTSTS_OEPINT ( -- x addr ) 19 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_OEPINT, OUT endpoint interrupt
    : OTG_FS_GLOBAL_FS_GINTSTS_IISOIXFR ( -- x addr ) 20 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_IISOIXFR, Incomplete isochronous IN  transfer
    : OTG_FS_GLOBAL_FS_GINTSTS_IPXFR_INCOMPISOOUT ( -- x addr ) 21 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_IPXFR_INCOMPISOOUT, Incomplete periodic transferHost  mode/Incomplete isochronous OUT transferDevice  mode
    : OTG_FS_GLOBAL_FS_GINTSTS_HPRTINT ( -- x addr ) 24 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_HPRTINT, Host port interrupt
    : OTG_FS_GLOBAL_FS_GINTSTS_HCINT ( -- x addr ) 25 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_HCINT, Host channels interrupt
    : OTG_FS_GLOBAL_FS_GINTSTS_PTXFE ( -- x addr ) 26 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_PTXFE, Periodic TxFIFO empty
    : OTG_FS_GLOBAL_FS_GINTSTS_CIDSCHG? ( -- 1|0 ) 28 bit OTG_FS_GLOBAL_FS_GINTSTS bit@ ; \ OTG_FS_GLOBAL_FS_GINTSTS_CIDSCHG, Connector ID status change
    : OTG_FS_GLOBAL_FS_GINTSTS_DISCINT ( -- x addr ) 29 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_DISCINT, Disconnect detected  interrupt
    : OTG_FS_GLOBAL_FS_GINTSTS_SRQINT ( -- x addr ) 30 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_SRQINT, Session request/new session detected  interrupt
    : OTG_FS_GLOBAL_FS_GINTSTS_WKUPINT ( -- x addr ) 31 bit OTG_FS_GLOBAL_FS_GINTSTS ; \ OTG_FS_GLOBAL_FS_GINTSTS_WKUPINT, Resume/remote wakeup detected  interrupt
  [then]

  [if]
    \ OTG_FS_GLOBAL_FS_GINTMSK (multiple-access)  Reset:0x00000000
    : OTG_FS_GLOBAL_FS_GINTMSK_MMISM ( -- x addr ) 1 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_MMISM, Mode mismatch interrupt  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_OTGINT ( -- x addr ) 2 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_OTGINT, OTG interrupt mask
    : OTG_FS_GLOBAL_FS_GINTMSK_SOFM ( -- x addr ) 3 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_SOFM, Start of frame mask
    : OTG_FS_GLOBAL_FS_GINTMSK_RXFLVLM ( -- x addr ) 4 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_RXFLVLM, Receive FIFO non-empty  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_NPTXFEM ( -- x addr ) 5 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_NPTXFEM, Non-periodic TxFIFO empty  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_GINAKEFFM ( -- x addr ) 6 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_GINAKEFFM, Global non-periodic IN NAK effective  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_GONAKEFFM ( -- x addr ) 7 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_GONAKEFFM, Global OUT NAK effective  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_ESUSPM ( -- x addr ) 10 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_ESUSPM, Early suspend mask
    : OTG_FS_GLOBAL_FS_GINTMSK_USBSUSPM ( -- x addr ) 11 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_USBSUSPM, USB suspend mask
    : OTG_FS_GLOBAL_FS_GINTMSK_USBRST ( -- x addr ) 12 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_USBRST, USB reset mask
    : OTG_FS_GLOBAL_FS_GINTMSK_ENUMDNEM ( -- x addr ) 13 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_ENUMDNEM, Enumeration done mask
    : OTG_FS_GLOBAL_FS_GINTMSK_ISOODRPM ( -- x addr ) 14 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_ISOODRPM, Isochronous OUT packet dropped interrupt  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_EOPFM ( -- x addr ) 15 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_EOPFM, End of periodic frame interrupt  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_EPMISM ( -- x addr ) 17 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_EPMISM, Endpoint mismatch interrupt  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_IEPINT ( -- x addr ) 18 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_IEPINT, IN endpoints interrupt  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_OEPINT ( -- x addr ) 19 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_OEPINT, OUT endpoints interrupt  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_IISOIXFRM ( -- x addr ) 20 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_IISOIXFRM, Incomplete isochronous IN transfer  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_IPXFRM_IISOOXFRM ( -- x addr ) 21 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_IPXFRM_IISOOXFRM, Incomplete periodic transfer maskHost  mode/Incomplete isochronous OUT transfer maskDevice  mode
    : OTG_FS_GLOBAL_FS_GINTMSK_PRTIM ( -- x addr ) 24 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_PRTIM, Host port interrupt mask
    : OTG_FS_GLOBAL_FS_GINTMSK_HCIM ( -- x addr ) 25 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_HCIM, Host channels interrupt  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_PTXFEM ( -- x addr ) 26 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_PTXFEM, Periodic TxFIFO empty mask
    : OTG_FS_GLOBAL_FS_GINTMSK_CIDSCHGM? ( -- 1|0 ) 28 bit OTG_FS_GLOBAL_FS_GINTMSK bit@ ; \ OTG_FS_GLOBAL_FS_GINTMSK_CIDSCHGM, Connector ID status change  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_DISCINT ( -- x addr ) 29 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_DISCINT, Disconnect detected interrupt  mask
    : OTG_FS_GLOBAL_FS_GINTMSK_SRQIM ( -- x addr ) 30 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_SRQIM, Session request/new session detected  interrupt mask
    : OTG_FS_GLOBAL_FS_GINTMSK_WUIM ( -- x addr ) 31 bit OTG_FS_GLOBAL_FS_GINTMSK ; \ OTG_FS_GLOBAL_FS_GINTMSK_WUIM, Resume/remote wakeup detected interrupt  mask
  [then]

  execute-defined? use-OTG_FS_GLOBAL [if]
    \ OTG_FS_GLOBAL_FS_GRXSTSR_Device (read-only) Reset:0x00000000
    : OTG_FS_GLOBAL_FS_GRXSTSR_Device_EPNUM? ( --  x ) OTG_FS_GLOBAL_FS_GRXSTSR_Device @ ; \ OTG_FS_GLOBAL_FS_GRXSTSR_Device_EPNUM, Endpoint number
    : OTG_FS_GLOBAL_FS_GRXSTSR_Device_BCNT? ( --  x ) 4 lshift OTG_FS_GLOBAL_FS_GRXSTSR_Device @ ; \ OTG_FS_GLOBAL_FS_GRXSTSR_Device_BCNT, Byte count
    : OTG_FS_GLOBAL_FS_GRXSTSR_Device_DPID? ( --  x ) 15 lshift OTG_FS_GLOBAL_FS_GRXSTSR_Device @ ; \ OTG_FS_GLOBAL_FS_GRXSTSR_Device_DPID, Data PID
    : OTG_FS_GLOBAL_FS_GRXSTSR_Device_PKTSTS? ( --  x ) 17 lshift OTG_FS_GLOBAL_FS_GRXSTSR_Device @ ; \ OTG_FS_GLOBAL_FS_GRXSTSR_Device_PKTSTS, Packet status
    : OTG_FS_GLOBAL_FS_GRXSTSR_Device_FRMNUM? ( --  x ) 21 lshift OTG_FS_GLOBAL_FS_GRXSTSR_Device @ ; \ OTG_FS_GLOBAL_FS_GRXSTSR_Device_FRMNUM, Frame number
  [then]

  [if]
    \ OTG_FS_GLOBAL_FS_GRXSTSR_Host (read-only) Reset:0x00000000
    : OTG_FS_GLOBAL_FS_GRXSTSR_Host_EPNUM? ( --  x ) OTG_FS_GLOBAL_FS_GRXSTSR_Host @ ; \ OTG_FS_GLOBAL_FS_GRXSTSR_Host_EPNUM, Endpoint number
    : OTG_FS_GLOBAL_FS_GRXSTSR_Host_BCNT? ( --  x ) 4 lshift OTG_FS_GLOBAL_FS_GRXSTSR_Host @ ; \ OTG_FS_GLOBAL_FS_GRXSTSR_Host_BCNT, Byte count
    : OTG_FS_GLOBAL_FS_GRXSTSR_Host_DPID? ( --  x ) 15 lshift OTG_FS_GLOBAL_FS_GRXSTSR_Host @ ; \ OTG_FS_GLOBAL_FS_GRXSTSR_Host_DPID, Data PID
    : OTG_FS_GLOBAL_FS_GRXSTSR_Host_PKTSTS? ( --  x ) 17 lshift OTG_FS_GLOBAL_FS_GRXSTSR_Host @ ; \ OTG_FS_GLOBAL_FS_GRXSTSR_Host_PKTSTS, Packet status
    : OTG_FS_GLOBAL_FS_GRXSTSR_Host_FRMNUM? ( --  x ) 21 lshift OTG_FS_GLOBAL_FS_GRXSTSR_Host @ ; \ OTG_FS_GLOBAL_FS_GRXSTSR_Host_FRMNUM, Frame number
  [then]

  execute-defined? use-OTG_FS_GLOBAL [if]
    \ OTG_FS_GLOBAL_FS_GRXFSIZ (read-write) Reset:0x00000200
    : OTG_FS_GLOBAL_FS_GRXFSIZ_RXFD ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_FS_GRXFSIZ ; \ OTG_FS_GLOBAL_FS_GRXFSIZ_RXFD, RxFIFO depth
  [then]

  [if]
    \ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device (read-write) Reset:0x00000200
    : OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_TX0FSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device ; \ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_TX0FSA, Endpoint 0 transmit RAM start  address
    : OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_TX0FD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device ; \ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_TX0FD, Endpoint 0 TxFIFO depth
  [then]

  execute-defined? use-OTG_FS_GLOBAL [if]
    \ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host (read-write) Reset:0x00000200
    : OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_NPTXFSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host ; \ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_NPTXFSA, Non-periodic transmit RAM start  address
    : OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_NPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host ; \ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_NPTXFD, Non-periodic TxFIFO depth
  [then]

  [if]
    \ OTG_FS_GLOBAL_FS_GNPTXSTS (read-only) Reset:0x00080200
    : OTG_FS_GLOBAL_FS_GNPTXSTS_NPTXFSAV? ( --  x ) OTG_FS_GLOBAL_FS_GNPTXSTS @ ; \ OTG_FS_GLOBAL_FS_GNPTXSTS_NPTXFSAV, Non-periodic TxFIFO space  available
    : OTG_FS_GLOBAL_FS_GNPTXSTS_NPTQXSAV? ( --  x ) 16 lshift OTG_FS_GLOBAL_FS_GNPTXSTS @ ; \ OTG_FS_GLOBAL_FS_GNPTXSTS_NPTQXSAV, Non-periodic transmit request queue  space available
    : OTG_FS_GLOBAL_FS_GNPTXSTS_NPTXQTOP? ( --  x ) 24 lshift OTG_FS_GLOBAL_FS_GNPTXSTS @ ; \ OTG_FS_GLOBAL_FS_GNPTXSTS_NPTXQTOP, Top of the non-periodic transmit request  queue
  [then]

  execute-defined? use-OTG_FS_GLOBAL [if]
    \ OTG_FS_GLOBAL_FS_GCCFG (read-write) Reset:0x00000000
    : OTG_FS_GLOBAL_FS_GCCFG_PWRDWN ( -- x addr ) 16 bit OTG_FS_GLOBAL_FS_GCCFG ; \ OTG_FS_GLOBAL_FS_GCCFG_PWRDWN, Power down
    : OTG_FS_GLOBAL_FS_GCCFG_VBUSASEN ( -- x addr ) 18 bit OTG_FS_GLOBAL_FS_GCCFG ; \ OTG_FS_GLOBAL_FS_GCCFG_VBUSASEN, Enable the VBUS sensing  device
    : OTG_FS_GLOBAL_FS_GCCFG_VBUSBSEN ( -- x addr ) 19 bit OTG_FS_GLOBAL_FS_GCCFG ; \ OTG_FS_GLOBAL_FS_GCCFG_VBUSBSEN, Enable the VBUS sensing  device
    : OTG_FS_GLOBAL_FS_GCCFG_SOFOUTEN ( -- x addr ) 20 bit OTG_FS_GLOBAL_FS_GCCFG ; \ OTG_FS_GLOBAL_FS_GCCFG_SOFOUTEN, SOF output enable
  [then]

  [if]
    \ OTG_FS_GLOBAL_FS_CID (read-write) Reset:0x00001000
    : OTG_FS_GLOBAL_FS_CID_PRODUCT_ID ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_FS_CID ; \ OTG_FS_GLOBAL_FS_CID_PRODUCT_ID, Product ID field
  [then]

  execute-defined? use-OTG_FS_GLOBAL [if]
    \ OTG_FS_GLOBAL_FS_HPTXFSIZ (read-write) Reset:0x02000600
    : OTG_FS_GLOBAL_FS_HPTXFSIZ_PTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_FS_HPTXFSIZ ; \ OTG_FS_GLOBAL_FS_HPTXFSIZ_PTXSA, Host periodic TxFIFO start  address
    : OTG_FS_GLOBAL_FS_HPTXFSIZ_PTXFSIZ ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_FS_HPTXFSIZ ; \ OTG_FS_GLOBAL_FS_HPTXFSIZ_PTXFSIZ, Host periodic TxFIFO depth
  [then]

  [if]
    \ OTG_FS_GLOBAL_FS_DIEPTXF1 (read-write) Reset:0x02000400
    : OTG_FS_GLOBAL_FS_DIEPTXF1_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_FS_DIEPTXF1 ; \ OTG_FS_GLOBAL_FS_DIEPTXF1_INEPTXSA, IN endpoint FIFO2 transmit RAM start  address
    : OTG_FS_GLOBAL_FS_DIEPTXF1_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_FS_DIEPTXF1 ; \ OTG_FS_GLOBAL_FS_DIEPTXF1_INEPTXFD, IN endpoint TxFIFO depth
  [then]

  execute-defined? use-OTG_FS_GLOBAL [if]
    \ OTG_FS_GLOBAL_FS_DIEPTXF2 (read-write) Reset:0x02000400
    : OTG_FS_GLOBAL_FS_DIEPTXF2_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_FS_DIEPTXF2 ; \ OTG_FS_GLOBAL_FS_DIEPTXF2_INEPTXSA, IN endpoint FIFO3 transmit RAM start  address
    : OTG_FS_GLOBAL_FS_DIEPTXF2_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_FS_DIEPTXF2 ; \ OTG_FS_GLOBAL_FS_DIEPTXF2_INEPTXFD, IN endpoint TxFIFO depth
  [then]

  [if]
    \ OTG_FS_GLOBAL_FS_DIEPTXF3 (read-write) Reset:0x02000400
    : OTG_FS_GLOBAL_FS_DIEPTXF3_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_GLOBAL_FS_DIEPTXF3 ; \ OTG_FS_GLOBAL_FS_DIEPTXF3_INEPTXSA, IN endpoint FIFO4 transmit RAM start  address
    : OTG_FS_GLOBAL_FS_DIEPTXF3_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_GLOBAL_FS_DIEPTXF3 ; \ OTG_FS_GLOBAL_FS_DIEPTXF3_INEPTXFD, IN endpoint TxFIFO depth
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCFG (multiple-access)  Reset:0x00000000
    : OTG_FS_HOST_FS_HCFG_FSLSPCS ( %bb -- x addr ) OTG_FS_HOST_FS_HCFG ; \ OTG_FS_HOST_FS_HCFG_FSLSPCS, FS/LS PHY clock select
    : OTG_FS_HOST_FS_HCFG_FSLSS ( -- x addr ) 2 bit OTG_FS_HOST_FS_HCFG ; \ OTG_FS_HOST_FS_HCFG_FSLSS, FS- and LS-only support
  [then]

  [if]
    \ OTG_FS_HOST_HFIR (read-write) Reset:0x0000EA60
    : OTG_FS_HOST_HFIR_FRIVL ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_HOST_HFIR ; \ OTG_FS_HOST_HFIR_FRIVL, Frame interval
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HFNUM (read-only) Reset:0x00003FFF
    : OTG_FS_HOST_FS_HFNUM_FRNUM? ( --  x ) OTG_FS_HOST_FS_HFNUM @ ; \ OTG_FS_HOST_FS_HFNUM_FRNUM, Frame number
    : OTG_FS_HOST_FS_HFNUM_FTREM? ( --  x ) 16 lshift OTG_FS_HOST_FS_HFNUM @ ; \ OTG_FS_HOST_FS_HFNUM_FTREM, Frame time remaining
  [then]

  [if]
    \ OTG_FS_HOST_FS_HPTXSTS (multiple-access)  Reset:0x00080100
    : OTG_FS_HOST_FS_HPTXSTS_PTXFSAVL ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_HOST_FS_HPTXSTS ; \ OTG_FS_HOST_FS_HPTXSTS_PTXFSAVL, Periodic transmit data FIFO space  available
    : OTG_FS_HOST_FS_HPTXSTS_PTXQSAV ( %bbbbbbbb -- x addr ) 16 lshift OTG_FS_HOST_FS_HPTXSTS ; \ OTG_FS_HOST_FS_HPTXSTS_PTXQSAV, Periodic transmit request queue space  available
    : OTG_FS_HOST_FS_HPTXSTS_PTXQTOP ( %bbbbbbbb -- x addr ) 24 lshift OTG_FS_HOST_FS_HPTXSTS ; \ OTG_FS_HOST_FS_HPTXSTS_PTXQTOP, Top of the periodic transmit request  queue
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_HAINT (read-only) Reset:0x00000000
    : OTG_FS_HOST_HAINT_HAINT? ( --  x ) OTG_FS_HOST_HAINT @ ; \ OTG_FS_HOST_HAINT_HAINT, Channel interrupts
  [then]

  [if]
    \ OTG_FS_HOST_HAINTMSK (read-write) Reset:0x00000000
    : OTG_FS_HOST_HAINTMSK_HAINTM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_HOST_HAINTMSK ; \ OTG_FS_HOST_HAINTMSK_HAINTM, Channel interrupt mask
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HPRT (multiple-access)  Reset:0x00000000
    : OTG_FS_HOST_FS_HPRT_PCSTS? ( -- 1|0 ) 0 bit OTG_FS_HOST_FS_HPRT bit@ ; \ OTG_FS_HOST_FS_HPRT_PCSTS, Port connect status
    : OTG_FS_HOST_FS_HPRT_PCDET ( -- x addr ) 1 bit OTG_FS_HOST_FS_HPRT ; \ OTG_FS_HOST_FS_HPRT_PCDET, Port connect detected
    : OTG_FS_HOST_FS_HPRT_PENA ( -- x addr ) 2 bit OTG_FS_HOST_FS_HPRT ; \ OTG_FS_HOST_FS_HPRT_PENA, Port enable
    : OTG_FS_HOST_FS_HPRT_PENCHNG ( -- x addr ) 3 bit OTG_FS_HOST_FS_HPRT ; \ OTG_FS_HOST_FS_HPRT_PENCHNG, Port enable/disable change
    : OTG_FS_HOST_FS_HPRT_POCA ( -- x addr ) 4 bit OTG_FS_HOST_FS_HPRT ; \ OTG_FS_HOST_FS_HPRT_POCA, Port overcurrent active
    : OTG_FS_HOST_FS_HPRT_POCCHNG ( -- x addr ) 5 bit OTG_FS_HOST_FS_HPRT ; \ OTG_FS_HOST_FS_HPRT_POCCHNG, Port overcurrent change
    : OTG_FS_HOST_FS_HPRT_PRES ( -- x addr ) 6 bit OTG_FS_HOST_FS_HPRT ; \ OTG_FS_HOST_FS_HPRT_PRES, Port resume
    : OTG_FS_HOST_FS_HPRT_PSUSP ( -- x addr ) 7 bit OTG_FS_HOST_FS_HPRT ; \ OTG_FS_HOST_FS_HPRT_PSUSP, Port suspend
    : OTG_FS_HOST_FS_HPRT_PRST ( -- x addr ) 8 bit OTG_FS_HOST_FS_HPRT ; \ OTG_FS_HOST_FS_HPRT_PRST, Port reset
    : OTG_FS_HOST_FS_HPRT_PLSTS? ( %bb -- 1|0 ) 10 lshift OTG_FS_HOST_FS_HPRT bit@ ; \ OTG_FS_HOST_FS_HPRT_PLSTS, Port line status
    : OTG_FS_HOST_FS_HPRT_PPWR ( -- x addr ) 12 bit OTG_FS_HOST_FS_HPRT ; \ OTG_FS_HOST_FS_HPRT_PPWR, Port power
    : OTG_FS_HOST_FS_HPRT_PTCTL ( %bbbb -- x addr ) 13 lshift OTG_FS_HOST_FS_HPRT ; \ OTG_FS_HOST_FS_HPRT_PTCTL, Port test control
    : OTG_FS_HOST_FS_HPRT_PSPD ( %bb -- x addr ) 17 lshift OTG_FS_HOST_FS_HPRT ; \ OTG_FS_HOST_FS_HPRT_PSPD, Port speed
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCCHAR0 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCCHAR0_MPSIZ x addr ) OTG_FS_HOST_FS_HCCHAR0 ; \ OTG_FS_HOST_FS_HCCHAR0_MPSIZ, Maximum packet size
    : OTG_FS_HOST_FS_HCCHAR0_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_FS_HCCHAR0 ; \ OTG_FS_HOST_FS_HCCHAR0_EPNUM, Endpoint number
    : OTG_FS_HOST_FS_HCCHAR0_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_FS_HCCHAR0 ; \ OTG_FS_HOST_FS_HCCHAR0_EPDIR, Endpoint direction
    : OTG_FS_HOST_FS_HCCHAR0_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_FS_HCCHAR0 ; \ OTG_FS_HOST_FS_HCCHAR0_LSDEV, Low-speed device
    : OTG_FS_HOST_FS_HCCHAR0_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_FS_HCCHAR0 ; \ OTG_FS_HOST_FS_HCCHAR0_EPTYP, Endpoint type
    : OTG_FS_HOST_FS_HCCHAR0_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_FS_HCCHAR0 ; \ OTG_FS_HOST_FS_HCCHAR0_MCNT, Multicount
    : OTG_FS_HOST_FS_HCCHAR0_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_FS_HCCHAR0 ; \ OTG_FS_HOST_FS_HCCHAR0_DAD, Device address
    : OTG_FS_HOST_FS_HCCHAR0_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_FS_HCCHAR0 ; \ OTG_FS_HOST_FS_HCCHAR0_ODDFRM, Odd frame
    : OTG_FS_HOST_FS_HCCHAR0_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_FS_HCCHAR0 ; \ OTG_FS_HOST_FS_HCCHAR0_CHDIS, Channel disable
    : OTG_FS_HOST_FS_HCCHAR0_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_FS_HCCHAR0 ; \ OTG_FS_HOST_FS_HCCHAR0_CHENA, Channel enable
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCCHAR1 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCCHAR1_MPSIZ x addr ) OTG_FS_HOST_FS_HCCHAR1 ; \ OTG_FS_HOST_FS_HCCHAR1_MPSIZ, Maximum packet size
    : OTG_FS_HOST_FS_HCCHAR1_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_FS_HCCHAR1 ; \ OTG_FS_HOST_FS_HCCHAR1_EPNUM, Endpoint number
    : OTG_FS_HOST_FS_HCCHAR1_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_FS_HCCHAR1 ; \ OTG_FS_HOST_FS_HCCHAR1_EPDIR, Endpoint direction
    : OTG_FS_HOST_FS_HCCHAR1_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_FS_HCCHAR1 ; \ OTG_FS_HOST_FS_HCCHAR1_LSDEV, Low-speed device
    : OTG_FS_HOST_FS_HCCHAR1_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_FS_HCCHAR1 ; \ OTG_FS_HOST_FS_HCCHAR1_EPTYP, Endpoint type
    : OTG_FS_HOST_FS_HCCHAR1_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_FS_HCCHAR1 ; \ OTG_FS_HOST_FS_HCCHAR1_MCNT, Multicount
    : OTG_FS_HOST_FS_HCCHAR1_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_FS_HCCHAR1 ; \ OTG_FS_HOST_FS_HCCHAR1_DAD, Device address
    : OTG_FS_HOST_FS_HCCHAR1_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_FS_HCCHAR1 ; \ OTG_FS_HOST_FS_HCCHAR1_ODDFRM, Odd frame
    : OTG_FS_HOST_FS_HCCHAR1_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_FS_HCCHAR1 ; \ OTG_FS_HOST_FS_HCCHAR1_CHDIS, Channel disable
    : OTG_FS_HOST_FS_HCCHAR1_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_FS_HCCHAR1 ; \ OTG_FS_HOST_FS_HCCHAR1_CHENA, Channel enable
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCCHAR2 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCCHAR2_MPSIZ x addr ) OTG_FS_HOST_FS_HCCHAR2 ; \ OTG_FS_HOST_FS_HCCHAR2_MPSIZ, Maximum packet size
    : OTG_FS_HOST_FS_HCCHAR2_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_FS_HCCHAR2 ; \ OTG_FS_HOST_FS_HCCHAR2_EPNUM, Endpoint number
    : OTG_FS_HOST_FS_HCCHAR2_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_FS_HCCHAR2 ; \ OTG_FS_HOST_FS_HCCHAR2_EPDIR, Endpoint direction
    : OTG_FS_HOST_FS_HCCHAR2_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_FS_HCCHAR2 ; \ OTG_FS_HOST_FS_HCCHAR2_LSDEV, Low-speed device
    : OTG_FS_HOST_FS_HCCHAR2_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_FS_HCCHAR2 ; \ OTG_FS_HOST_FS_HCCHAR2_EPTYP, Endpoint type
    : OTG_FS_HOST_FS_HCCHAR2_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_FS_HCCHAR2 ; \ OTG_FS_HOST_FS_HCCHAR2_MCNT, Multicount
    : OTG_FS_HOST_FS_HCCHAR2_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_FS_HCCHAR2 ; \ OTG_FS_HOST_FS_HCCHAR2_DAD, Device address
    : OTG_FS_HOST_FS_HCCHAR2_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_FS_HCCHAR2 ; \ OTG_FS_HOST_FS_HCCHAR2_ODDFRM, Odd frame
    : OTG_FS_HOST_FS_HCCHAR2_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_FS_HCCHAR2 ; \ OTG_FS_HOST_FS_HCCHAR2_CHDIS, Channel disable
    : OTG_FS_HOST_FS_HCCHAR2_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_FS_HCCHAR2 ; \ OTG_FS_HOST_FS_HCCHAR2_CHENA, Channel enable
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCCHAR3 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCCHAR3_MPSIZ x addr ) OTG_FS_HOST_FS_HCCHAR3 ; \ OTG_FS_HOST_FS_HCCHAR3_MPSIZ, Maximum packet size
    : OTG_FS_HOST_FS_HCCHAR3_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_FS_HCCHAR3 ; \ OTG_FS_HOST_FS_HCCHAR3_EPNUM, Endpoint number
    : OTG_FS_HOST_FS_HCCHAR3_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_FS_HCCHAR3 ; \ OTG_FS_HOST_FS_HCCHAR3_EPDIR, Endpoint direction
    : OTG_FS_HOST_FS_HCCHAR3_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_FS_HCCHAR3 ; \ OTG_FS_HOST_FS_HCCHAR3_LSDEV, Low-speed device
    : OTG_FS_HOST_FS_HCCHAR3_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_FS_HCCHAR3 ; \ OTG_FS_HOST_FS_HCCHAR3_EPTYP, Endpoint type
    : OTG_FS_HOST_FS_HCCHAR3_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_FS_HCCHAR3 ; \ OTG_FS_HOST_FS_HCCHAR3_MCNT, Multicount
    : OTG_FS_HOST_FS_HCCHAR3_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_FS_HCCHAR3 ; \ OTG_FS_HOST_FS_HCCHAR3_DAD, Device address
    : OTG_FS_HOST_FS_HCCHAR3_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_FS_HCCHAR3 ; \ OTG_FS_HOST_FS_HCCHAR3_ODDFRM, Odd frame
    : OTG_FS_HOST_FS_HCCHAR3_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_FS_HCCHAR3 ; \ OTG_FS_HOST_FS_HCCHAR3_CHDIS, Channel disable
    : OTG_FS_HOST_FS_HCCHAR3_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_FS_HCCHAR3 ; \ OTG_FS_HOST_FS_HCCHAR3_CHENA, Channel enable
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCCHAR4 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCCHAR4_MPSIZ x addr ) OTG_FS_HOST_FS_HCCHAR4 ; \ OTG_FS_HOST_FS_HCCHAR4_MPSIZ, Maximum packet size
    : OTG_FS_HOST_FS_HCCHAR4_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_FS_HCCHAR4 ; \ OTG_FS_HOST_FS_HCCHAR4_EPNUM, Endpoint number
    : OTG_FS_HOST_FS_HCCHAR4_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_FS_HCCHAR4 ; \ OTG_FS_HOST_FS_HCCHAR4_EPDIR, Endpoint direction
    : OTG_FS_HOST_FS_HCCHAR4_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_FS_HCCHAR4 ; \ OTG_FS_HOST_FS_HCCHAR4_LSDEV, Low-speed device
    : OTG_FS_HOST_FS_HCCHAR4_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_FS_HCCHAR4 ; \ OTG_FS_HOST_FS_HCCHAR4_EPTYP, Endpoint type
    : OTG_FS_HOST_FS_HCCHAR4_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_FS_HCCHAR4 ; \ OTG_FS_HOST_FS_HCCHAR4_MCNT, Multicount
    : OTG_FS_HOST_FS_HCCHAR4_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_FS_HCCHAR4 ; \ OTG_FS_HOST_FS_HCCHAR4_DAD, Device address
    : OTG_FS_HOST_FS_HCCHAR4_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_FS_HCCHAR4 ; \ OTG_FS_HOST_FS_HCCHAR4_ODDFRM, Odd frame
    : OTG_FS_HOST_FS_HCCHAR4_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_FS_HCCHAR4 ; \ OTG_FS_HOST_FS_HCCHAR4_CHDIS, Channel disable
    : OTG_FS_HOST_FS_HCCHAR4_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_FS_HCCHAR4 ; \ OTG_FS_HOST_FS_HCCHAR4_CHENA, Channel enable
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCCHAR5 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCCHAR5_MPSIZ x addr ) OTG_FS_HOST_FS_HCCHAR5 ; \ OTG_FS_HOST_FS_HCCHAR5_MPSIZ, Maximum packet size
    : OTG_FS_HOST_FS_HCCHAR5_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_FS_HCCHAR5 ; \ OTG_FS_HOST_FS_HCCHAR5_EPNUM, Endpoint number
    : OTG_FS_HOST_FS_HCCHAR5_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_FS_HCCHAR5 ; \ OTG_FS_HOST_FS_HCCHAR5_EPDIR, Endpoint direction
    : OTG_FS_HOST_FS_HCCHAR5_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_FS_HCCHAR5 ; \ OTG_FS_HOST_FS_HCCHAR5_LSDEV, Low-speed device
    : OTG_FS_HOST_FS_HCCHAR5_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_FS_HCCHAR5 ; \ OTG_FS_HOST_FS_HCCHAR5_EPTYP, Endpoint type
    : OTG_FS_HOST_FS_HCCHAR5_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_FS_HCCHAR5 ; \ OTG_FS_HOST_FS_HCCHAR5_MCNT, Multicount
    : OTG_FS_HOST_FS_HCCHAR5_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_FS_HCCHAR5 ; \ OTG_FS_HOST_FS_HCCHAR5_DAD, Device address
    : OTG_FS_HOST_FS_HCCHAR5_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_FS_HCCHAR5 ; \ OTG_FS_HOST_FS_HCCHAR5_ODDFRM, Odd frame
    : OTG_FS_HOST_FS_HCCHAR5_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_FS_HCCHAR5 ; \ OTG_FS_HOST_FS_HCCHAR5_CHDIS, Channel disable
    : OTG_FS_HOST_FS_HCCHAR5_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_FS_HCCHAR5 ; \ OTG_FS_HOST_FS_HCCHAR5_CHENA, Channel enable
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCCHAR6 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCCHAR6_MPSIZ x addr ) OTG_FS_HOST_FS_HCCHAR6 ; \ OTG_FS_HOST_FS_HCCHAR6_MPSIZ, Maximum packet size
    : OTG_FS_HOST_FS_HCCHAR6_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_FS_HCCHAR6 ; \ OTG_FS_HOST_FS_HCCHAR6_EPNUM, Endpoint number
    : OTG_FS_HOST_FS_HCCHAR6_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_FS_HCCHAR6 ; \ OTG_FS_HOST_FS_HCCHAR6_EPDIR, Endpoint direction
    : OTG_FS_HOST_FS_HCCHAR6_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_FS_HCCHAR6 ; \ OTG_FS_HOST_FS_HCCHAR6_LSDEV, Low-speed device
    : OTG_FS_HOST_FS_HCCHAR6_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_FS_HCCHAR6 ; \ OTG_FS_HOST_FS_HCCHAR6_EPTYP, Endpoint type
    : OTG_FS_HOST_FS_HCCHAR6_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_FS_HCCHAR6 ; \ OTG_FS_HOST_FS_HCCHAR6_MCNT, Multicount
    : OTG_FS_HOST_FS_HCCHAR6_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_FS_HCCHAR6 ; \ OTG_FS_HOST_FS_HCCHAR6_DAD, Device address
    : OTG_FS_HOST_FS_HCCHAR6_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_FS_HCCHAR6 ; \ OTG_FS_HOST_FS_HCCHAR6_ODDFRM, Odd frame
    : OTG_FS_HOST_FS_HCCHAR6_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_FS_HCCHAR6 ; \ OTG_FS_HOST_FS_HCCHAR6_CHDIS, Channel disable
    : OTG_FS_HOST_FS_HCCHAR6_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_FS_HCCHAR6 ; \ OTG_FS_HOST_FS_HCCHAR6_CHENA, Channel enable
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCCHAR7 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCCHAR7_MPSIZ x addr ) OTG_FS_HOST_FS_HCCHAR7 ; \ OTG_FS_HOST_FS_HCCHAR7_MPSIZ, Maximum packet size
    : OTG_FS_HOST_FS_HCCHAR7_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_FS_HOST_FS_HCCHAR7 ; \ OTG_FS_HOST_FS_HCCHAR7_EPNUM, Endpoint number
    : OTG_FS_HOST_FS_HCCHAR7_EPDIR ( -- x addr ) 15 bit OTG_FS_HOST_FS_HCCHAR7 ; \ OTG_FS_HOST_FS_HCCHAR7_EPDIR, Endpoint direction
    : OTG_FS_HOST_FS_HCCHAR7_LSDEV ( -- x addr ) 17 bit OTG_FS_HOST_FS_HCCHAR7 ; \ OTG_FS_HOST_FS_HCCHAR7_LSDEV, Low-speed device
    : OTG_FS_HOST_FS_HCCHAR7_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_HOST_FS_HCCHAR7 ; \ OTG_FS_HOST_FS_HCCHAR7_EPTYP, Endpoint type
    : OTG_FS_HOST_FS_HCCHAR7_MCNT ( %bb -- x addr ) 20 lshift OTG_FS_HOST_FS_HCCHAR7 ; \ OTG_FS_HOST_FS_HCCHAR7_MCNT, Multicount
    : OTG_FS_HOST_FS_HCCHAR7_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_FS_HOST_FS_HCCHAR7 ; \ OTG_FS_HOST_FS_HCCHAR7_DAD, Device address
    : OTG_FS_HOST_FS_HCCHAR7_ODDFRM ( -- x addr ) 29 bit OTG_FS_HOST_FS_HCCHAR7 ; \ OTG_FS_HOST_FS_HCCHAR7_ODDFRM, Odd frame
    : OTG_FS_HOST_FS_HCCHAR7_CHDIS ( -- x addr ) 30 bit OTG_FS_HOST_FS_HCCHAR7 ; \ OTG_FS_HOST_FS_HCCHAR7_CHDIS, Channel disable
    : OTG_FS_HOST_FS_HCCHAR7_CHENA ( -- x addr ) 31 bit OTG_FS_HOST_FS_HCCHAR7 ; \ OTG_FS_HOST_FS_HCCHAR7_CHENA, Channel enable
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCINT0 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINT0_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINT0 ; \ OTG_FS_HOST_FS_HCINT0_XFRC, Transfer completed
    : OTG_FS_HOST_FS_HCINT0_CHH ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINT0 ; \ OTG_FS_HOST_FS_HCINT0_CHH, Channel halted
    : OTG_FS_HOST_FS_HCINT0_STALL ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINT0 ; \ OTG_FS_HOST_FS_HCINT0_STALL, STALL response received  interrupt
    : OTG_FS_HOST_FS_HCINT0_NAK ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINT0 ; \ OTG_FS_HOST_FS_HCINT0_NAK, NAK response received  interrupt
    : OTG_FS_HOST_FS_HCINT0_ACK ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINT0 ; \ OTG_FS_HOST_FS_HCINT0_ACK, ACK response received/transmitted  interrupt
    : OTG_FS_HOST_FS_HCINT0_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINT0 ; \ OTG_FS_HOST_FS_HCINT0_TXERR, Transaction error
    : OTG_FS_HOST_FS_HCINT0_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINT0 ; \ OTG_FS_HOST_FS_HCINT0_BBERR, Babble error
    : OTG_FS_HOST_FS_HCINT0_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINT0 ; \ OTG_FS_HOST_FS_HCINT0_FRMOR, Frame overrun
    : OTG_FS_HOST_FS_HCINT0_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINT0 ; \ OTG_FS_HOST_FS_HCINT0_DTERR, Data toggle error
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCINT1 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINT1_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINT1 ; \ OTG_FS_HOST_FS_HCINT1_XFRC, Transfer completed
    : OTG_FS_HOST_FS_HCINT1_CHH ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINT1 ; \ OTG_FS_HOST_FS_HCINT1_CHH, Channel halted
    : OTG_FS_HOST_FS_HCINT1_STALL ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINT1 ; \ OTG_FS_HOST_FS_HCINT1_STALL, STALL response received  interrupt
    : OTG_FS_HOST_FS_HCINT1_NAK ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINT1 ; \ OTG_FS_HOST_FS_HCINT1_NAK, NAK response received  interrupt
    : OTG_FS_HOST_FS_HCINT1_ACK ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINT1 ; \ OTG_FS_HOST_FS_HCINT1_ACK, ACK response received/transmitted  interrupt
    : OTG_FS_HOST_FS_HCINT1_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINT1 ; \ OTG_FS_HOST_FS_HCINT1_TXERR, Transaction error
    : OTG_FS_HOST_FS_HCINT1_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINT1 ; \ OTG_FS_HOST_FS_HCINT1_BBERR, Babble error
    : OTG_FS_HOST_FS_HCINT1_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINT1 ; \ OTG_FS_HOST_FS_HCINT1_FRMOR, Frame overrun
    : OTG_FS_HOST_FS_HCINT1_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINT1 ; \ OTG_FS_HOST_FS_HCINT1_DTERR, Data toggle error
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCINT2 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINT2_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINT2 ; \ OTG_FS_HOST_FS_HCINT2_XFRC, Transfer completed
    : OTG_FS_HOST_FS_HCINT2_CHH ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINT2 ; \ OTG_FS_HOST_FS_HCINT2_CHH, Channel halted
    : OTG_FS_HOST_FS_HCINT2_STALL ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINT2 ; \ OTG_FS_HOST_FS_HCINT2_STALL, STALL response received  interrupt
    : OTG_FS_HOST_FS_HCINT2_NAK ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINT2 ; \ OTG_FS_HOST_FS_HCINT2_NAK, NAK response received  interrupt
    : OTG_FS_HOST_FS_HCINT2_ACK ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINT2 ; \ OTG_FS_HOST_FS_HCINT2_ACK, ACK response received/transmitted  interrupt
    : OTG_FS_HOST_FS_HCINT2_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINT2 ; \ OTG_FS_HOST_FS_HCINT2_TXERR, Transaction error
    : OTG_FS_HOST_FS_HCINT2_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINT2 ; \ OTG_FS_HOST_FS_HCINT2_BBERR, Babble error
    : OTG_FS_HOST_FS_HCINT2_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINT2 ; \ OTG_FS_HOST_FS_HCINT2_FRMOR, Frame overrun
    : OTG_FS_HOST_FS_HCINT2_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINT2 ; \ OTG_FS_HOST_FS_HCINT2_DTERR, Data toggle error
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCINT3 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINT3_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINT3 ; \ OTG_FS_HOST_FS_HCINT3_XFRC, Transfer completed
    : OTG_FS_HOST_FS_HCINT3_CHH ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINT3 ; \ OTG_FS_HOST_FS_HCINT3_CHH, Channel halted
    : OTG_FS_HOST_FS_HCINT3_STALL ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINT3 ; \ OTG_FS_HOST_FS_HCINT3_STALL, STALL response received  interrupt
    : OTG_FS_HOST_FS_HCINT3_NAK ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINT3 ; \ OTG_FS_HOST_FS_HCINT3_NAK, NAK response received  interrupt
    : OTG_FS_HOST_FS_HCINT3_ACK ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINT3 ; \ OTG_FS_HOST_FS_HCINT3_ACK, ACK response received/transmitted  interrupt
    : OTG_FS_HOST_FS_HCINT3_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINT3 ; \ OTG_FS_HOST_FS_HCINT3_TXERR, Transaction error
    : OTG_FS_HOST_FS_HCINT3_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINT3 ; \ OTG_FS_HOST_FS_HCINT3_BBERR, Babble error
    : OTG_FS_HOST_FS_HCINT3_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINT3 ; \ OTG_FS_HOST_FS_HCINT3_FRMOR, Frame overrun
    : OTG_FS_HOST_FS_HCINT3_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINT3 ; \ OTG_FS_HOST_FS_HCINT3_DTERR, Data toggle error
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCINT4 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINT4_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINT4 ; \ OTG_FS_HOST_FS_HCINT4_XFRC, Transfer completed
    : OTG_FS_HOST_FS_HCINT4_CHH ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINT4 ; \ OTG_FS_HOST_FS_HCINT4_CHH, Channel halted
    : OTG_FS_HOST_FS_HCINT4_STALL ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINT4 ; \ OTG_FS_HOST_FS_HCINT4_STALL, STALL response received  interrupt
    : OTG_FS_HOST_FS_HCINT4_NAK ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINT4 ; \ OTG_FS_HOST_FS_HCINT4_NAK, NAK response received  interrupt
    : OTG_FS_HOST_FS_HCINT4_ACK ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINT4 ; \ OTG_FS_HOST_FS_HCINT4_ACK, ACK response received/transmitted  interrupt
    : OTG_FS_HOST_FS_HCINT4_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINT4 ; \ OTG_FS_HOST_FS_HCINT4_TXERR, Transaction error
    : OTG_FS_HOST_FS_HCINT4_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINT4 ; \ OTG_FS_HOST_FS_HCINT4_BBERR, Babble error
    : OTG_FS_HOST_FS_HCINT4_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINT4 ; \ OTG_FS_HOST_FS_HCINT4_FRMOR, Frame overrun
    : OTG_FS_HOST_FS_HCINT4_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINT4 ; \ OTG_FS_HOST_FS_HCINT4_DTERR, Data toggle error
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCINT5 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINT5_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINT5 ; \ OTG_FS_HOST_FS_HCINT5_XFRC, Transfer completed
    : OTG_FS_HOST_FS_HCINT5_CHH ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINT5 ; \ OTG_FS_HOST_FS_HCINT5_CHH, Channel halted
    : OTG_FS_HOST_FS_HCINT5_STALL ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINT5 ; \ OTG_FS_HOST_FS_HCINT5_STALL, STALL response received  interrupt
    : OTG_FS_HOST_FS_HCINT5_NAK ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINT5 ; \ OTG_FS_HOST_FS_HCINT5_NAK, NAK response received  interrupt
    : OTG_FS_HOST_FS_HCINT5_ACK ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINT5 ; \ OTG_FS_HOST_FS_HCINT5_ACK, ACK response received/transmitted  interrupt
    : OTG_FS_HOST_FS_HCINT5_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINT5 ; \ OTG_FS_HOST_FS_HCINT5_TXERR, Transaction error
    : OTG_FS_HOST_FS_HCINT5_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINT5 ; \ OTG_FS_HOST_FS_HCINT5_BBERR, Babble error
    : OTG_FS_HOST_FS_HCINT5_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINT5 ; \ OTG_FS_HOST_FS_HCINT5_FRMOR, Frame overrun
    : OTG_FS_HOST_FS_HCINT5_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINT5 ; \ OTG_FS_HOST_FS_HCINT5_DTERR, Data toggle error
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCINT6 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINT6_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINT6 ; \ OTG_FS_HOST_FS_HCINT6_XFRC, Transfer completed
    : OTG_FS_HOST_FS_HCINT6_CHH ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINT6 ; \ OTG_FS_HOST_FS_HCINT6_CHH, Channel halted
    : OTG_FS_HOST_FS_HCINT6_STALL ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINT6 ; \ OTG_FS_HOST_FS_HCINT6_STALL, STALL response received  interrupt
    : OTG_FS_HOST_FS_HCINT6_NAK ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINT6 ; \ OTG_FS_HOST_FS_HCINT6_NAK, NAK response received  interrupt
    : OTG_FS_HOST_FS_HCINT6_ACK ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINT6 ; \ OTG_FS_HOST_FS_HCINT6_ACK, ACK response received/transmitted  interrupt
    : OTG_FS_HOST_FS_HCINT6_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINT6 ; \ OTG_FS_HOST_FS_HCINT6_TXERR, Transaction error
    : OTG_FS_HOST_FS_HCINT6_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINT6 ; \ OTG_FS_HOST_FS_HCINT6_BBERR, Babble error
    : OTG_FS_HOST_FS_HCINT6_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINT6 ; \ OTG_FS_HOST_FS_HCINT6_FRMOR, Frame overrun
    : OTG_FS_HOST_FS_HCINT6_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINT6 ; \ OTG_FS_HOST_FS_HCINT6_DTERR, Data toggle error
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCINT7 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINT7_XFRC ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINT7 ; \ OTG_FS_HOST_FS_HCINT7_XFRC, Transfer completed
    : OTG_FS_HOST_FS_HCINT7_CHH ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINT7 ; \ OTG_FS_HOST_FS_HCINT7_CHH, Channel halted
    : OTG_FS_HOST_FS_HCINT7_STALL ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINT7 ; \ OTG_FS_HOST_FS_HCINT7_STALL, STALL response received  interrupt
    : OTG_FS_HOST_FS_HCINT7_NAK ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINT7 ; \ OTG_FS_HOST_FS_HCINT7_NAK, NAK response received  interrupt
    : OTG_FS_HOST_FS_HCINT7_ACK ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINT7 ; \ OTG_FS_HOST_FS_HCINT7_ACK, ACK response received/transmitted  interrupt
    : OTG_FS_HOST_FS_HCINT7_TXERR ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINT7 ; \ OTG_FS_HOST_FS_HCINT7_TXERR, Transaction error
    : OTG_FS_HOST_FS_HCINT7_BBERR ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINT7 ; \ OTG_FS_HOST_FS_HCINT7_BBERR, Babble error
    : OTG_FS_HOST_FS_HCINT7_FRMOR ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINT7 ; \ OTG_FS_HOST_FS_HCINT7_FRMOR, Frame overrun
    : OTG_FS_HOST_FS_HCINT7_DTERR ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINT7 ; \ OTG_FS_HOST_FS_HCINT7_DTERR, Data toggle error
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCINTMSK0 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINTMSK0_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINTMSK0 ; \ OTG_FS_HOST_FS_HCINTMSK0_XFRCM, Transfer completed mask
    : OTG_FS_HOST_FS_HCINTMSK0_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINTMSK0 ; \ OTG_FS_HOST_FS_HCINTMSK0_CHHM, Channel halted mask
    : OTG_FS_HOST_FS_HCINTMSK0_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINTMSK0 ; \ OTG_FS_HOST_FS_HCINTMSK0_STALLM, STALL response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK0_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINTMSK0 ; \ OTG_FS_HOST_FS_HCINTMSK0_NAKM, NAK response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK0_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINTMSK0 ; \ OTG_FS_HOST_FS_HCINTMSK0_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_FS_HOST_FS_HCINTMSK0_NYET ( -- x addr ) 6 bit OTG_FS_HOST_FS_HCINTMSK0 ; \ OTG_FS_HOST_FS_HCINTMSK0_NYET, response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK0_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINTMSK0 ; \ OTG_FS_HOST_FS_HCINTMSK0_TXERRM, Transaction error mask
    : OTG_FS_HOST_FS_HCINTMSK0_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINTMSK0 ; \ OTG_FS_HOST_FS_HCINTMSK0_BBERRM, Babble error mask
    : OTG_FS_HOST_FS_HCINTMSK0_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINTMSK0 ; \ OTG_FS_HOST_FS_HCINTMSK0_FRMORM, Frame overrun mask
    : OTG_FS_HOST_FS_HCINTMSK0_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINTMSK0 ; \ OTG_FS_HOST_FS_HCINTMSK0_DTERRM, Data toggle error mask
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCINTMSK1 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINTMSK1_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINTMSK1 ; \ OTG_FS_HOST_FS_HCINTMSK1_XFRCM, Transfer completed mask
    : OTG_FS_HOST_FS_HCINTMSK1_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINTMSK1 ; \ OTG_FS_HOST_FS_HCINTMSK1_CHHM, Channel halted mask
    : OTG_FS_HOST_FS_HCINTMSK1_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINTMSK1 ; \ OTG_FS_HOST_FS_HCINTMSK1_STALLM, STALL response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK1_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINTMSK1 ; \ OTG_FS_HOST_FS_HCINTMSK1_NAKM, NAK response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK1_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINTMSK1 ; \ OTG_FS_HOST_FS_HCINTMSK1_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_FS_HOST_FS_HCINTMSK1_NYET ( -- x addr ) 6 bit OTG_FS_HOST_FS_HCINTMSK1 ; \ OTG_FS_HOST_FS_HCINTMSK1_NYET, response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK1_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINTMSK1 ; \ OTG_FS_HOST_FS_HCINTMSK1_TXERRM, Transaction error mask
    : OTG_FS_HOST_FS_HCINTMSK1_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINTMSK1 ; \ OTG_FS_HOST_FS_HCINTMSK1_BBERRM, Babble error mask
    : OTG_FS_HOST_FS_HCINTMSK1_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINTMSK1 ; \ OTG_FS_HOST_FS_HCINTMSK1_FRMORM, Frame overrun mask
    : OTG_FS_HOST_FS_HCINTMSK1_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINTMSK1 ; \ OTG_FS_HOST_FS_HCINTMSK1_DTERRM, Data toggle error mask
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCINTMSK2 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINTMSK2_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINTMSK2 ; \ OTG_FS_HOST_FS_HCINTMSK2_XFRCM, Transfer completed mask
    : OTG_FS_HOST_FS_HCINTMSK2_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINTMSK2 ; \ OTG_FS_HOST_FS_HCINTMSK2_CHHM, Channel halted mask
    : OTG_FS_HOST_FS_HCINTMSK2_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINTMSK2 ; \ OTG_FS_HOST_FS_HCINTMSK2_STALLM, STALL response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK2_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINTMSK2 ; \ OTG_FS_HOST_FS_HCINTMSK2_NAKM, NAK response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK2_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINTMSK2 ; \ OTG_FS_HOST_FS_HCINTMSK2_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_FS_HOST_FS_HCINTMSK2_NYET ( -- x addr ) 6 bit OTG_FS_HOST_FS_HCINTMSK2 ; \ OTG_FS_HOST_FS_HCINTMSK2_NYET, response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK2_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINTMSK2 ; \ OTG_FS_HOST_FS_HCINTMSK2_TXERRM, Transaction error mask
    : OTG_FS_HOST_FS_HCINTMSK2_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINTMSK2 ; \ OTG_FS_HOST_FS_HCINTMSK2_BBERRM, Babble error mask
    : OTG_FS_HOST_FS_HCINTMSK2_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINTMSK2 ; \ OTG_FS_HOST_FS_HCINTMSK2_FRMORM, Frame overrun mask
    : OTG_FS_HOST_FS_HCINTMSK2_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINTMSK2 ; \ OTG_FS_HOST_FS_HCINTMSK2_DTERRM, Data toggle error mask
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCINTMSK3 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINTMSK3_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINTMSK3 ; \ OTG_FS_HOST_FS_HCINTMSK3_XFRCM, Transfer completed mask
    : OTG_FS_HOST_FS_HCINTMSK3_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINTMSK3 ; \ OTG_FS_HOST_FS_HCINTMSK3_CHHM, Channel halted mask
    : OTG_FS_HOST_FS_HCINTMSK3_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINTMSK3 ; \ OTG_FS_HOST_FS_HCINTMSK3_STALLM, STALL response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK3_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINTMSK3 ; \ OTG_FS_HOST_FS_HCINTMSK3_NAKM, NAK response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK3_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINTMSK3 ; \ OTG_FS_HOST_FS_HCINTMSK3_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_FS_HOST_FS_HCINTMSK3_NYET ( -- x addr ) 6 bit OTG_FS_HOST_FS_HCINTMSK3 ; \ OTG_FS_HOST_FS_HCINTMSK3_NYET, response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK3_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINTMSK3 ; \ OTG_FS_HOST_FS_HCINTMSK3_TXERRM, Transaction error mask
    : OTG_FS_HOST_FS_HCINTMSK3_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINTMSK3 ; \ OTG_FS_HOST_FS_HCINTMSK3_BBERRM, Babble error mask
    : OTG_FS_HOST_FS_HCINTMSK3_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINTMSK3 ; \ OTG_FS_HOST_FS_HCINTMSK3_FRMORM, Frame overrun mask
    : OTG_FS_HOST_FS_HCINTMSK3_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINTMSK3 ; \ OTG_FS_HOST_FS_HCINTMSK3_DTERRM, Data toggle error mask
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCINTMSK4 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINTMSK4_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINTMSK4 ; \ OTG_FS_HOST_FS_HCINTMSK4_XFRCM, Transfer completed mask
    : OTG_FS_HOST_FS_HCINTMSK4_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINTMSK4 ; \ OTG_FS_HOST_FS_HCINTMSK4_CHHM, Channel halted mask
    : OTG_FS_HOST_FS_HCINTMSK4_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINTMSK4 ; \ OTG_FS_HOST_FS_HCINTMSK4_STALLM, STALL response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK4_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINTMSK4 ; \ OTG_FS_HOST_FS_HCINTMSK4_NAKM, NAK response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK4_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINTMSK4 ; \ OTG_FS_HOST_FS_HCINTMSK4_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_FS_HOST_FS_HCINTMSK4_NYET ( -- x addr ) 6 bit OTG_FS_HOST_FS_HCINTMSK4 ; \ OTG_FS_HOST_FS_HCINTMSK4_NYET, response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK4_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINTMSK4 ; \ OTG_FS_HOST_FS_HCINTMSK4_TXERRM, Transaction error mask
    : OTG_FS_HOST_FS_HCINTMSK4_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINTMSK4 ; \ OTG_FS_HOST_FS_HCINTMSK4_BBERRM, Babble error mask
    : OTG_FS_HOST_FS_HCINTMSK4_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINTMSK4 ; \ OTG_FS_HOST_FS_HCINTMSK4_FRMORM, Frame overrun mask
    : OTG_FS_HOST_FS_HCINTMSK4_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINTMSK4 ; \ OTG_FS_HOST_FS_HCINTMSK4_DTERRM, Data toggle error mask
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCINTMSK5 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINTMSK5_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINTMSK5 ; \ OTG_FS_HOST_FS_HCINTMSK5_XFRCM, Transfer completed mask
    : OTG_FS_HOST_FS_HCINTMSK5_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINTMSK5 ; \ OTG_FS_HOST_FS_HCINTMSK5_CHHM, Channel halted mask
    : OTG_FS_HOST_FS_HCINTMSK5_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINTMSK5 ; \ OTG_FS_HOST_FS_HCINTMSK5_STALLM, STALL response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK5_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINTMSK5 ; \ OTG_FS_HOST_FS_HCINTMSK5_NAKM, NAK response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK5_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINTMSK5 ; \ OTG_FS_HOST_FS_HCINTMSK5_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_FS_HOST_FS_HCINTMSK5_NYET ( -- x addr ) 6 bit OTG_FS_HOST_FS_HCINTMSK5 ; \ OTG_FS_HOST_FS_HCINTMSK5_NYET, response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK5_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINTMSK5 ; \ OTG_FS_HOST_FS_HCINTMSK5_TXERRM, Transaction error mask
    : OTG_FS_HOST_FS_HCINTMSK5_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINTMSK5 ; \ OTG_FS_HOST_FS_HCINTMSK5_BBERRM, Babble error mask
    : OTG_FS_HOST_FS_HCINTMSK5_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINTMSK5 ; \ OTG_FS_HOST_FS_HCINTMSK5_FRMORM, Frame overrun mask
    : OTG_FS_HOST_FS_HCINTMSK5_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINTMSK5 ; \ OTG_FS_HOST_FS_HCINTMSK5_DTERRM, Data toggle error mask
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCINTMSK6 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINTMSK6_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINTMSK6 ; \ OTG_FS_HOST_FS_HCINTMSK6_XFRCM, Transfer completed mask
    : OTG_FS_HOST_FS_HCINTMSK6_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINTMSK6 ; \ OTG_FS_HOST_FS_HCINTMSK6_CHHM, Channel halted mask
    : OTG_FS_HOST_FS_HCINTMSK6_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINTMSK6 ; \ OTG_FS_HOST_FS_HCINTMSK6_STALLM, STALL response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK6_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINTMSK6 ; \ OTG_FS_HOST_FS_HCINTMSK6_NAKM, NAK response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK6_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINTMSK6 ; \ OTG_FS_HOST_FS_HCINTMSK6_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_FS_HOST_FS_HCINTMSK6_NYET ( -- x addr ) 6 bit OTG_FS_HOST_FS_HCINTMSK6 ; \ OTG_FS_HOST_FS_HCINTMSK6_NYET, response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK6_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINTMSK6 ; \ OTG_FS_HOST_FS_HCINTMSK6_TXERRM, Transaction error mask
    : OTG_FS_HOST_FS_HCINTMSK6_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINTMSK6 ; \ OTG_FS_HOST_FS_HCINTMSK6_BBERRM, Babble error mask
    : OTG_FS_HOST_FS_HCINTMSK6_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINTMSK6 ; \ OTG_FS_HOST_FS_HCINTMSK6_FRMORM, Frame overrun mask
    : OTG_FS_HOST_FS_HCINTMSK6_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINTMSK6 ; \ OTG_FS_HOST_FS_HCINTMSK6_DTERRM, Data toggle error mask
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCINTMSK7 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCINTMSK7_XFRCM ( -- x addr ) 0 bit OTG_FS_HOST_FS_HCINTMSK7 ; \ OTG_FS_HOST_FS_HCINTMSK7_XFRCM, Transfer completed mask
    : OTG_FS_HOST_FS_HCINTMSK7_CHHM ( -- x addr ) 1 bit OTG_FS_HOST_FS_HCINTMSK7 ; \ OTG_FS_HOST_FS_HCINTMSK7_CHHM, Channel halted mask
    : OTG_FS_HOST_FS_HCINTMSK7_STALLM ( -- x addr ) 3 bit OTG_FS_HOST_FS_HCINTMSK7 ; \ OTG_FS_HOST_FS_HCINTMSK7_STALLM, STALL response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK7_NAKM ( -- x addr ) 4 bit OTG_FS_HOST_FS_HCINTMSK7 ; \ OTG_FS_HOST_FS_HCINTMSK7_NAKM, NAK response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK7_ACKM ( -- x addr ) 5 bit OTG_FS_HOST_FS_HCINTMSK7 ; \ OTG_FS_HOST_FS_HCINTMSK7_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_FS_HOST_FS_HCINTMSK7_NYET ( -- x addr ) 6 bit OTG_FS_HOST_FS_HCINTMSK7 ; \ OTG_FS_HOST_FS_HCINTMSK7_NYET, response received interrupt  mask
    : OTG_FS_HOST_FS_HCINTMSK7_TXERRM ( -- x addr ) 7 bit OTG_FS_HOST_FS_HCINTMSK7 ; \ OTG_FS_HOST_FS_HCINTMSK7_TXERRM, Transaction error mask
    : OTG_FS_HOST_FS_HCINTMSK7_BBERRM ( -- x addr ) 8 bit OTG_FS_HOST_FS_HCINTMSK7 ; \ OTG_FS_HOST_FS_HCINTMSK7_BBERRM, Babble error mask
    : OTG_FS_HOST_FS_HCINTMSK7_FRMORM ( -- x addr ) 9 bit OTG_FS_HOST_FS_HCINTMSK7 ; \ OTG_FS_HOST_FS_HCINTMSK7_FRMORM, Frame overrun mask
    : OTG_FS_HOST_FS_HCINTMSK7_DTERRM ( -- x addr ) 10 bit OTG_FS_HOST_FS_HCINTMSK7 ; \ OTG_FS_HOST_FS_HCINTMSK7_DTERRM, Data toggle error mask
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCTSIZ0 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCTSIZ0_XFRSIZ x addr ) OTG_FS_HOST_FS_HCTSIZ0 ; \ OTG_FS_HOST_FS_HCTSIZ0_XFRSIZ, Transfer size
    : OTG_FS_HOST_FS_HCTSIZ0_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_FS_HCTSIZ0 ; \ OTG_FS_HOST_FS_HCTSIZ0_PKTCNT, Packet count
    : OTG_FS_HOST_FS_HCTSIZ0_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_FS_HCTSIZ0 ; \ OTG_FS_HOST_FS_HCTSIZ0_DPID, Data PID
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCTSIZ1 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCTSIZ1_XFRSIZ x addr ) OTG_FS_HOST_FS_HCTSIZ1 ; \ OTG_FS_HOST_FS_HCTSIZ1_XFRSIZ, Transfer size
    : OTG_FS_HOST_FS_HCTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_FS_HCTSIZ1 ; \ OTG_FS_HOST_FS_HCTSIZ1_PKTCNT, Packet count
    : OTG_FS_HOST_FS_HCTSIZ1_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_FS_HCTSIZ1 ; \ OTG_FS_HOST_FS_HCTSIZ1_DPID, Data PID
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCTSIZ2 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCTSIZ2_XFRSIZ x addr ) OTG_FS_HOST_FS_HCTSIZ2 ; \ OTG_FS_HOST_FS_HCTSIZ2_XFRSIZ, Transfer size
    : OTG_FS_HOST_FS_HCTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_FS_HCTSIZ2 ; \ OTG_FS_HOST_FS_HCTSIZ2_PKTCNT, Packet count
    : OTG_FS_HOST_FS_HCTSIZ2_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_FS_HCTSIZ2 ; \ OTG_FS_HOST_FS_HCTSIZ2_DPID, Data PID
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCTSIZ3 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCTSIZ3_XFRSIZ x addr ) OTG_FS_HOST_FS_HCTSIZ3 ; \ OTG_FS_HOST_FS_HCTSIZ3_XFRSIZ, Transfer size
    : OTG_FS_HOST_FS_HCTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_FS_HCTSIZ3 ; \ OTG_FS_HOST_FS_HCTSIZ3_PKTCNT, Packet count
    : OTG_FS_HOST_FS_HCTSIZ3_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_FS_HCTSIZ3 ; \ OTG_FS_HOST_FS_HCTSIZ3_DPID, Data PID
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCTSIZ4 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCTSIZ4_XFRSIZ x addr ) OTG_FS_HOST_FS_HCTSIZ4 ; \ OTG_FS_HOST_FS_HCTSIZ4_XFRSIZ, Transfer size
    : OTG_FS_HOST_FS_HCTSIZ4_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_FS_HCTSIZ4 ; \ OTG_FS_HOST_FS_HCTSIZ4_PKTCNT, Packet count
    : OTG_FS_HOST_FS_HCTSIZ4_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_FS_HCTSIZ4 ; \ OTG_FS_HOST_FS_HCTSIZ4_DPID, Data PID
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCTSIZ5 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCTSIZ5_XFRSIZ x addr ) OTG_FS_HOST_FS_HCTSIZ5 ; \ OTG_FS_HOST_FS_HCTSIZ5_XFRSIZ, Transfer size
    : OTG_FS_HOST_FS_HCTSIZ5_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_FS_HCTSIZ5 ; \ OTG_FS_HOST_FS_HCTSIZ5_PKTCNT, Packet count
    : OTG_FS_HOST_FS_HCTSIZ5_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_FS_HCTSIZ5 ; \ OTG_FS_HOST_FS_HCTSIZ5_DPID, Data PID
  [then]

  [if]
    \ OTG_FS_HOST_FS_HCTSIZ6 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCTSIZ6_XFRSIZ x addr ) OTG_FS_HOST_FS_HCTSIZ6 ; \ OTG_FS_HOST_FS_HCTSIZ6_XFRSIZ, Transfer size
    : OTG_FS_HOST_FS_HCTSIZ6_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_FS_HCTSIZ6 ; \ OTG_FS_HOST_FS_HCTSIZ6_PKTCNT, Packet count
    : OTG_FS_HOST_FS_HCTSIZ6_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_FS_HCTSIZ6 ; \ OTG_FS_HOST_FS_HCTSIZ6_DPID, Data PID
  [then]

  execute-defined? use-OTG_FS_HOST [if]
    \ OTG_FS_HOST_FS_HCTSIZ7 (read-write) Reset:0x00000000
    : OTG_FS_HOST_FS_HCTSIZ7_XFRSIZ x addr ) OTG_FS_HOST_FS_HCTSIZ7 ; \ OTG_FS_HOST_FS_HCTSIZ7_XFRSIZ, Transfer size
    : OTG_FS_HOST_FS_HCTSIZ7_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_HOST_FS_HCTSIZ7 ; \ OTG_FS_HOST_FS_HCTSIZ7_PKTCNT, Packet count
    : OTG_FS_HOST_FS_HCTSIZ7_DPID ( %bb -- x addr ) 29 lshift OTG_FS_HOST_FS_HCTSIZ7 ; \ OTG_FS_HOST_FS_HCTSIZ7_DPID, Data PID
  [then]

  [if]
    \ OTG_FS_DEVICE_FS_DCFG (read-write) Reset:0x02200000
    : OTG_FS_DEVICE_FS_DCFG_DSPD ( %bb -- x addr ) OTG_FS_DEVICE_FS_DCFG ; \ OTG_FS_DEVICE_FS_DCFG_DSPD, Device speed
    : OTG_FS_DEVICE_FS_DCFG_NZLSOHSK ( -- x addr ) 2 bit OTG_FS_DEVICE_FS_DCFG ; \ OTG_FS_DEVICE_FS_DCFG_NZLSOHSK, Non-zero-length status OUT  handshake
    : OTG_FS_DEVICE_FS_DCFG_DAD ( %bbbbbbb -- x addr ) 4 lshift OTG_FS_DEVICE_FS_DCFG ; \ OTG_FS_DEVICE_FS_DCFG_DAD, Device address
    : OTG_FS_DEVICE_FS_DCFG_PFIVL ( %bb -- x addr ) 11 lshift OTG_FS_DEVICE_FS_DCFG ; \ OTG_FS_DEVICE_FS_DCFG_PFIVL, Periodic frame interval
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_FS_DCTL (multiple-access)  Reset:0x00000000
    : OTG_FS_DEVICE_FS_DCTL_RWUSIG ( -- x addr ) 0 bit OTG_FS_DEVICE_FS_DCTL ; \ OTG_FS_DEVICE_FS_DCTL_RWUSIG, Remote wakeup signaling
    : OTG_FS_DEVICE_FS_DCTL_SDIS ( -- x addr ) 1 bit OTG_FS_DEVICE_FS_DCTL ; \ OTG_FS_DEVICE_FS_DCTL_SDIS, Soft disconnect
    : OTG_FS_DEVICE_FS_DCTL_GINSTS? ( -- 1|0 ) 2 bit OTG_FS_DEVICE_FS_DCTL bit@ ; \ OTG_FS_DEVICE_FS_DCTL_GINSTS, Global IN NAK status
    : OTG_FS_DEVICE_FS_DCTL_GONSTS? ( -- 1|0 ) 3 bit OTG_FS_DEVICE_FS_DCTL bit@ ; \ OTG_FS_DEVICE_FS_DCTL_GONSTS, Global OUT NAK status
    : OTG_FS_DEVICE_FS_DCTL_TCTL ( %bbb -- x addr ) 4 lshift OTG_FS_DEVICE_FS_DCTL ; \ OTG_FS_DEVICE_FS_DCTL_TCTL, Test control
    : OTG_FS_DEVICE_FS_DCTL_SGINAK ( -- x addr ) 7 bit OTG_FS_DEVICE_FS_DCTL ; \ OTG_FS_DEVICE_FS_DCTL_SGINAK, Set global IN NAK
    : OTG_FS_DEVICE_FS_DCTL_CGINAK ( -- x addr ) 8 bit OTG_FS_DEVICE_FS_DCTL ; \ OTG_FS_DEVICE_FS_DCTL_CGINAK, Clear global IN NAK
    : OTG_FS_DEVICE_FS_DCTL_SGONAK ( -- x addr ) 9 bit OTG_FS_DEVICE_FS_DCTL ; \ OTG_FS_DEVICE_FS_DCTL_SGONAK, Set global OUT NAK
    : OTG_FS_DEVICE_FS_DCTL_CGONAK ( -- x addr ) 10 bit OTG_FS_DEVICE_FS_DCTL ; \ OTG_FS_DEVICE_FS_DCTL_CGONAK, Clear global OUT NAK
    : OTG_FS_DEVICE_FS_DCTL_POPRGDNE ( -- x addr ) 11 bit OTG_FS_DEVICE_FS_DCTL ; \ OTG_FS_DEVICE_FS_DCTL_POPRGDNE, Power-on programming done
  [then]

  [if]
    \ OTG_FS_DEVICE_FS_DSTS (read-only) Reset:0x00000010
    : OTG_FS_DEVICE_FS_DSTS_SUSPSTS? ( --  1|0 ) 0 bit OTG_FS_DEVICE_FS_DSTS bit@ ; \ OTG_FS_DEVICE_FS_DSTS_SUSPSTS, Suspend status
    : OTG_FS_DEVICE_FS_DSTS_ENUMSPD? ( --  x ) 1 lshift OTG_FS_DEVICE_FS_DSTS @ ; \ OTG_FS_DEVICE_FS_DSTS_ENUMSPD, Enumerated speed
    : OTG_FS_DEVICE_FS_DSTS_EERR? ( --  1|0 ) 3 bit OTG_FS_DEVICE_FS_DSTS bit@ ; \ OTG_FS_DEVICE_FS_DSTS_EERR, Erratic error
    : OTG_FS_DEVICE_FS_DSTS_FNSOF? ( --  x ) 8 lshift OTG_FS_DEVICE_FS_DSTS @ ; \ OTG_FS_DEVICE_FS_DSTS_FNSOF, Frame number of the received  SOF
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_FS_DIEPMSK (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_FS_DIEPMSK_XFRCM ( -- x addr ) 0 bit OTG_FS_DEVICE_FS_DIEPMSK ; \ OTG_FS_DEVICE_FS_DIEPMSK_XFRCM, Transfer completed interrupt  mask
    : OTG_FS_DEVICE_FS_DIEPMSK_EPDM ( -- x addr ) 1 bit OTG_FS_DEVICE_FS_DIEPMSK ; \ OTG_FS_DEVICE_FS_DIEPMSK_EPDM, Endpoint disabled interrupt  mask
    : OTG_FS_DEVICE_FS_DIEPMSK_TOM ( -- x addr ) 3 bit OTG_FS_DEVICE_FS_DIEPMSK ; \ OTG_FS_DEVICE_FS_DIEPMSK_TOM, Timeout condition mask Non-isochronous  endpoints
    : OTG_FS_DEVICE_FS_DIEPMSK_ITTXFEMSK ( -- x addr ) 4 bit OTG_FS_DEVICE_FS_DIEPMSK ; \ OTG_FS_DEVICE_FS_DIEPMSK_ITTXFEMSK, IN token received when TxFIFO empty  mask
    : OTG_FS_DEVICE_FS_DIEPMSK_INEPNMM ( -- x addr ) 5 bit OTG_FS_DEVICE_FS_DIEPMSK ; \ OTG_FS_DEVICE_FS_DIEPMSK_INEPNMM, IN token received with EP mismatch  mask
    : OTG_FS_DEVICE_FS_DIEPMSK_INEPNEM ( -- x addr ) 6 bit OTG_FS_DEVICE_FS_DIEPMSK ; \ OTG_FS_DEVICE_FS_DIEPMSK_INEPNEM, IN endpoint NAK effective  mask
  [then]

  [if]
    \ OTG_FS_DEVICE_FS_DOEPMSK (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_FS_DOEPMSK_XFRCM ( -- x addr ) 0 bit OTG_FS_DEVICE_FS_DOEPMSK ; \ OTG_FS_DEVICE_FS_DOEPMSK_XFRCM, Transfer completed interrupt  mask
    : OTG_FS_DEVICE_FS_DOEPMSK_EPDM ( -- x addr ) 1 bit OTG_FS_DEVICE_FS_DOEPMSK ; \ OTG_FS_DEVICE_FS_DOEPMSK_EPDM, Endpoint disabled interrupt  mask
    : OTG_FS_DEVICE_FS_DOEPMSK_STUPM ( -- x addr ) 3 bit OTG_FS_DEVICE_FS_DOEPMSK ; \ OTG_FS_DEVICE_FS_DOEPMSK_STUPM, SETUP phase done mask
    : OTG_FS_DEVICE_FS_DOEPMSK_OTEPDM ( -- x addr ) 4 bit OTG_FS_DEVICE_FS_DOEPMSK ; \ OTG_FS_DEVICE_FS_DOEPMSK_OTEPDM, OUT token received when endpoint  disabled mask
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_FS_DAINT (read-only) Reset:0x00000000
    : OTG_FS_DEVICE_FS_DAINT_IEPINT? ( --  x ) OTG_FS_DEVICE_FS_DAINT @ ; \ OTG_FS_DEVICE_FS_DAINT_IEPINT, IN endpoint interrupt bits
    : OTG_FS_DEVICE_FS_DAINT_OEPINT? ( --  x ) 16 lshift OTG_FS_DEVICE_FS_DAINT @ ; \ OTG_FS_DEVICE_FS_DAINT_OEPINT, OUT endpoint interrupt  bits
  [then]

  [if]
    \ OTG_FS_DEVICE_FS_DAINTMSK (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_FS_DAINTMSK_IEPM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_DEVICE_FS_DAINTMSK ; \ OTG_FS_DEVICE_FS_DAINTMSK_IEPM, IN EP interrupt mask bits
    : OTG_FS_DEVICE_FS_DAINTMSK_OEPINT ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_FS_DEVICE_FS_DAINTMSK ; \ OTG_FS_DEVICE_FS_DAINTMSK_OEPINT, OUT endpoint interrupt  bits
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DVBUSDIS (read-write) Reset:0x000017D7
    : OTG_FS_DEVICE_DVBUSDIS_VBUSDT ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_DEVICE_DVBUSDIS ; \ OTG_FS_DEVICE_DVBUSDIS_VBUSDT, Device VBUS discharge time
  [then]

  [if]
    \ OTG_FS_DEVICE_DVBUSPULSE (read-write) Reset:0x000005B8
    : OTG_FS_DEVICE_DVBUSPULSE_DVBUSP ( %bbbbbbbbbbb -- x addr ) OTG_FS_DEVICE_DVBUSPULSE ; \ OTG_FS_DEVICE_DVBUSPULSE_DVBUSP, Device VBUS pulsing time
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DIEPEMPMSK (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_DIEPEMPMSK_INEPTXFEM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_FS_DEVICE_DIEPEMPMSK ; \ OTG_FS_DEVICE_DIEPEMPMSK_INEPTXFEM, IN EP Tx FIFO empty interrupt mask  bits
  [then]

  [if]
    \ OTG_FS_DEVICE_FS_DIEPCTL0 (multiple-access)  Reset:0x00000000
    : OTG_FS_DEVICE_FS_DIEPCTL0_MPSIZ ( %bb -- x addr ) OTG_FS_DEVICE_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_FS_DIEPCTL0_MPSIZ, Maximum packet size
    : OTG_FS_DEVICE_FS_DIEPCTL0_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_FS_DIEPCTL0_USBAEP, USB active endpoint
    : OTG_FS_DEVICE_FS_DIEPCTL0_NAKSTS? ( -- 1|0 ) 17 bit OTG_FS_DEVICE_FS_DIEPCTL0 bit@ ; \ OTG_FS_DEVICE_FS_DIEPCTL0_NAKSTS, NAK status
    : OTG_FS_DEVICE_FS_DIEPCTL0_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_FS_DIEPCTL0_EPTYP, Endpoint type
    : OTG_FS_DEVICE_FS_DIEPCTL0_STALL ( -- x addr ) 21 bit OTG_FS_DEVICE_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_FS_DIEPCTL0_STALL, STALL handshake
    : OTG_FS_DEVICE_FS_DIEPCTL0_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_FS_DEVICE_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_FS_DIEPCTL0_TXFNUM, TxFIFO number
    : OTG_FS_DEVICE_FS_DIEPCTL0_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_FS_DIEPCTL0_CNAK, Clear NAK
    : OTG_FS_DEVICE_FS_DIEPCTL0_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_FS_DIEPCTL0_SNAK, Set NAK
    : OTG_FS_DEVICE_FS_DIEPCTL0_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_FS_DIEPCTL0_EPDIS, Endpoint disable
    : OTG_FS_DEVICE_FS_DIEPCTL0_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_FS_DIEPCTL0 ; \ OTG_FS_DEVICE_FS_DIEPCTL0_EPENA, Endpoint enable
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DIEPCTL1 (multiple-access)  Reset:0x00000000
    : OTG_FS_DEVICE_DIEPCTL1_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_EPENA, EPENA
    : OTG_FS_DEVICE_DIEPCTL1_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_EPDIS, EPDIS
    : OTG_FS_DEVICE_DIEPCTL1_SODDFRM_SD1PID ( -- x addr ) 29 bit OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_SODDFRM_SD1PID, SODDFRM/SD1PID
    : OTG_FS_DEVICE_DIEPCTL1_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_SD0PID_SEVNFRM, SD0PID/SEVNFRM
    : OTG_FS_DEVICE_DIEPCTL1_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_SNAK, SNAK
    : OTG_FS_DEVICE_DIEPCTL1_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_CNAK, CNAK
    : OTG_FS_DEVICE_DIEPCTL1_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_TXFNUM, TXFNUM
    : OTG_FS_DEVICE_DIEPCTL1_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_Stall, Stall
    : OTG_FS_DEVICE_DIEPCTL1_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_EPTYP, EPTYP
    : OTG_FS_DEVICE_DIEPCTL1_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_NAKSTS, NAKSTS
    : OTG_FS_DEVICE_DIEPCTL1_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_EONUM_DPID, EONUM/DPID
    : OTG_FS_DEVICE_DIEPCTL1_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_USBAEP, USBAEP
    : OTG_FS_DEVICE_DIEPCTL1_MPSIZ x addr ) OTG_FS_DEVICE_DIEPCTL1 ; \ OTG_FS_DEVICE_DIEPCTL1_MPSIZ, MPSIZ
  [then]

  [if]
    \ OTG_FS_DEVICE_DIEPCTL2 (multiple-access)  Reset:0x00000000
    : OTG_FS_DEVICE_DIEPCTL2_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_EPENA, EPENA
    : OTG_FS_DEVICE_DIEPCTL2_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_EPDIS, EPDIS
    : OTG_FS_DEVICE_DIEPCTL2_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_SODDFRM, SODDFRM
    : OTG_FS_DEVICE_DIEPCTL2_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_SD0PID_SEVNFRM, SD0PID/SEVNFRM
    : OTG_FS_DEVICE_DIEPCTL2_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_SNAK, SNAK
    : OTG_FS_DEVICE_DIEPCTL2_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_CNAK, CNAK
    : OTG_FS_DEVICE_DIEPCTL2_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_TXFNUM, TXFNUM
    : OTG_FS_DEVICE_DIEPCTL2_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_Stall, Stall
    : OTG_FS_DEVICE_DIEPCTL2_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_EPTYP, EPTYP
    : OTG_FS_DEVICE_DIEPCTL2_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_NAKSTS, NAKSTS
    : OTG_FS_DEVICE_DIEPCTL2_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_EONUM_DPID, EONUM/DPID
    : OTG_FS_DEVICE_DIEPCTL2_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_USBAEP, USBAEP
    : OTG_FS_DEVICE_DIEPCTL2_MPSIZ x addr ) OTG_FS_DEVICE_DIEPCTL2 ; \ OTG_FS_DEVICE_DIEPCTL2_MPSIZ, MPSIZ
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DIEPCTL3 (multiple-access)  Reset:0x00000000
    : OTG_FS_DEVICE_DIEPCTL3_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_EPENA, EPENA
    : OTG_FS_DEVICE_DIEPCTL3_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_EPDIS, EPDIS
    : OTG_FS_DEVICE_DIEPCTL3_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_SODDFRM, SODDFRM
    : OTG_FS_DEVICE_DIEPCTL3_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_SD0PID_SEVNFRM, SD0PID/SEVNFRM
    : OTG_FS_DEVICE_DIEPCTL3_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_SNAK, SNAK
    : OTG_FS_DEVICE_DIEPCTL3_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_CNAK, CNAK
    : OTG_FS_DEVICE_DIEPCTL3_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_TXFNUM, TXFNUM
    : OTG_FS_DEVICE_DIEPCTL3_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_Stall, Stall
    : OTG_FS_DEVICE_DIEPCTL3_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_EPTYP, EPTYP
    : OTG_FS_DEVICE_DIEPCTL3_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_NAKSTS, NAKSTS
    : OTG_FS_DEVICE_DIEPCTL3_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_EONUM_DPID, EONUM/DPID
    : OTG_FS_DEVICE_DIEPCTL3_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_USBAEP, USBAEP
    : OTG_FS_DEVICE_DIEPCTL3_MPSIZ x addr ) OTG_FS_DEVICE_DIEPCTL3 ; \ OTG_FS_DEVICE_DIEPCTL3_MPSIZ, MPSIZ
  [then]

  [if]
    \ OTG_FS_DEVICE_DOEPCTL0 (multiple-access)  Reset:0x00008000
    : OTG_FS_DEVICE_DOEPCTL0_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_DOEPCTL0 ; \ OTG_FS_DEVICE_DOEPCTL0_EPENA, EPENA
    : OTG_FS_DEVICE_DOEPCTL0_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_DOEPCTL0 ; \ OTG_FS_DEVICE_DOEPCTL0_EPDIS, EPDIS
    : OTG_FS_DEVICE_DOEPCTL0_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_DOEPCTL0 ; \ OTG_FS_DEVICE_DOEPCTL0_SNAK, SNAK
    : OTG_FS_DEVICE_DOEPCTL0_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_DOEPCTL0 ; \ OTG_FS_DEVICE_DOEPCTL0_CNAK, CNAK
    : OTG_FS_DEVICE_DOEPCTL0_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_DOEPCTL0 ; \ OTG_FS_DEVICE_DOEPCTL0_Stall, Stall
    : OTG_FS_DEVICE_DOEPCTL0_SNPM ( -- x addr ) 20 bit OTG_FS_DEVICE_DOEPCTL0 ; \ OTG_FS_DEVICE_DOEPCTL0_SNPM, SNPM
    : OTG_FS_DEVICE_DOEPCTL0_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_DOEPCTL0 ; \ OTG_FS_DEVICE_DOEPCTL0_EPTYP, EPTYP
    : OTG_FS_DEVICE_DOEPCTL0_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_DOEPCTL0 ; \ OTG_FS_DEVICE_DOEPCTL0_NAKSTS, NAKSTS
    : OTG_FS_DEVICE_DOEPCTL0_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_DOEPCTL0 ; \ OTG_FS_DEVICE_DOEPCTL0_USBAEP, USBAEP
    : OTG_FS_DEVICE_DOEPCTL0_MPSIZ ( %bb -- x addr ) OTG_FS_DEVICE_DOEPCTL0 ; \ OTG_FS_DEVICE_DOEPCTL0_MPSIZ, MPSIZ
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DOEPCTL1 (multiple-access)  Reset:0x00000000
    : OTG_FS_DEVICE_DOEPCTL1_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_EPENA, EPENA
    : OTG_FS_DEVICE_DOEPCTL1_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_EPDIS, EPDIS
    : OTG_FS_DEVICE_DOEPCTL1_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_SODDFRM, SODDFRM
    : OTG_FS_DEVICE_DOEPCTL1_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_SD0PID_SEVNFRM, SD0PID/SEVNFRM
    : OTG_FS_DEVICE_DOEPCTL1_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_SNAK, SNAK
    : OTG_FS_DEVICE_DOEPCTL1_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_CNAK, CNAK
    : OTG_FS_DEVICE_DOEPCTL1_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_Stall, Stall
    : OTG_FS_DEVICE_DOEPCTL1_SNPM ( -- x addr ) 20 bit OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_SNPM, SNPM
    : OTG_FS_DEVICE_DOEPCTL1_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_EPTYP, EPTYP
    : OTG_FS_DEVICE_DOEPCTL1_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_NAKSTS, NAKSTS
    : OTG_FS_DEVICE_DOEPCTL1_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_EONUM_DPID, EONUM/DPID
    : OTG_FS_DEVICE_DOEPCTL1_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_USBAEP, USBAEP
    : OTG_FS_DEVICE_DOEPCTL1_MPSIZ x addr ) OTG_FS_DEVICE_DOEPCTL1 ; \ OTG_FS_DEVICE_DOEPCTL1_MPSIZ, MPSIZ
  [then]

  [if]
    \ OTG_FS_DEVICE_DOEPCTL2 (multiple-access)  Reset:0x00000000
    : OTG_FS_DEVICE_DOEPCTL2_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_EPENA, EPENA
    : OTG_FS_DEVICE_DOEPCTL2_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_EPDIS, EPDIS
    : OTG_FS_DEVICE_DOEPCTL2_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_SODDFRM, SODDFRM
    : OTG_FS_DEVICE_DOEPCTL2_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_SD0PID_SEVNFRM, SD0PID/SEVNFRM
    : OTG_FS_DEVICE_DOEPCTL2_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_SNAK, SNAK
    : OTG_FS_DEVICE_DOEPCTL2_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_CNAK, CNAK
    : OTG_FS_DEVICE_DOEPCTL2_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_Stall, Stall
    : OTG_FS_DEVICE_DOEPCTL2_SNPM ( -- x addr ) 20 bit OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_SNPM, SNPM
    : OTG_FS_DEVICE_DOEPCTL2_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_EPTYP, EPTYP
    : OTG_FS_DEVICE_DOEPCTL2_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_NAKSTS, NAKSTS
    : OTG_FS_DEVICE_DOEPCTL2_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_EONUM_DPID, EONUM/DPID
    : OTG_FS_DEVICE_DOEPCTL2_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_USBAEP, USBAEP
    : OTG_FS_DEVICE_DOEPCTL2_MPSIZ x addr ) OTG_FS_DEVICE_DOEPCTL2 ; \ OTG_FS_DEVICE_DOEPCTL2_MPSIZ, MPSIZ
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DOEPCTL3 (multiple-access)  Reset:0x00000000
    : OTG_FS_DEVICE_DOEPCTL3_EPENA ( -- x addr ) 31 bit OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_EPENA, EPENA
    : OTG_FS_DEVICE_DOEPCTL3_EPDIS ( -- x addr ) 30 bit OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_EPDIS, EPDIS
    : OTG_FS_DEVICE_DOEPCTL3_SODDFRM ( -- x addr ) 29 bit OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_SODDFRM, SODDFRM
    : OTG_FS_DEVICE_DOEPCTL3_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_SD0PID_SEVNFRM, SD0PID/SEVNFRM
    : OTG_FS_DEVICE_DOEPCTL3_SNAK ( -- x addr ) 27 bit OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_SNAK, SNAK
    : OTG_FS_DEVICE_DOEPCTL3_CNAK ( -- x addr ) 26 bit OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_CNAK, CNAK
    : OTG_FS_DEVICE_DOEPCTL3_Stall ( -- x addr ) 21 bit OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_Stall, Stall
    : OTG_FS_DEVICE_DOEPCTL3_SNPM ( -- x addr ) 20 bit OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_SNPM, SNPM
    : OTG_FS_DEVICE_DOEPCTL3_EPTYP ( %bb -- x addr ) 18 lshift OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_EPTYP, EPTYP
    : OTG_FS_DEVICE_DOEPCTL3_NAKSTS ( -- x addr ) 17 bit OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_NAKSTS, NAKSTS
    : OTG_FS_DEVICE_DOEPCTL3_EONUM_DPID ( -- x addr ) 16 bit OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_EONUM_DPID, EONUM/DPID
    : OTG_FS_DEVICE_DOEPCTL3_USBAEP ( -- x addr ) 15 bit OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_USBAEP, USBAEP
    : OTG_FS_DEVICE_DOEPCTL3_MPSIZ x addr ) OTG_FS_DEVICE_DOEPCTL3 ; \ OTG_FS_DEVICE_DOEPCTL3_MPSIZ, MPSIZ
  [then]

  [if]
    \ OTG_FS_DEVICE_DIEPINT0 (multiple-access)  Reset:0x00000080
    : OTG_FS_DEVICE_DIEPINT0_TXFE ( -- x addr ) 7 bit OTG_FS_DEVICE_DIEPINT0 ; \ OTG_FS_DEVICE_DIEPINT0_TXFE, TXFE
    : OTG_FS_DEVICE_DIEPINT0_INEPNE ( -- x addr ) 6 bit OTG_FS_DEVICE_DIEPINT0 ; \ OTG_FS_DEVICE_DIEPINT0_INEPNE, INEPNE
    : OTG_FS_DEVICE_DIEPINT0_ITTXFE ( -- x addr ) 4 bit OTG_FS_DEVICE_DIEPINT0 ; \ OTG_FS_DEVICE_DIEPINT0_ITTXFE, ITTXFE
    : OTG_FS_DEVICE_DIEPINT0_TOC ( -- x addr ) 3 bit OTG_FS_DEVICE_DIEPINT0 ; \ OTG_FS_DEVICE_DIEPINT0_TOC, TOC
    : OTG_FS_DEVICE_DIEPINT0_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_DIEPINT0 ; \ OTG_FS_DEVICE_DIEPINT0_EPDISD, EPDISD
    : OTG_FS_DEVICE_DIEPINT0_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_DIEPINT0 ; \ OTG_FS_DEVICE_DIEPINT0_XFRC, XFRC
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DIEPINT1 (multiple-access)  Reset:0x00000080
    : OTG_FS_DEVICE_DIEPINT1_TXFE ( -- x addr ) 7 bit OTG_FS_DEVICE_DIEPINT1 ; \ OTG_FS_DEVICE_DIEPINT1_TXFE, TXFE
    : OTG_FS_DEVICE_DIEPINT1_INEPNE ( -- x addr ) 6 bit OTG_FS_DEVICE_DIEPINT1 ; \ OTG_FS_DEVICE_DIEPINT1_INEPNE, INEPNE
    : OTG_FS_DEVICE_DIEPINT1_ITTXFE ( -- x addr ) 4 bit OTG_FS_DEVICE_DIEPINT1 ; \ OTG_FS_DEVICE_DIEPINT1_ITTXFE, ITTXFE
    : OTG_FS_DEVICE_DIEPINT1_TOC ( -- x addr ) 3 bit OTG_FS_DEVICE_DIEPINT1 ; \ OTG_FS_DEVICE_DIEPINT1_TOC, TOC
    : OTG_FS_DEVICE_DIEPINT1_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_DIEPINT1 ; \ OTG_FS_DEVICE_DIEPINT1_EPDISD, EPDISD
    : OTG_FS_DEVICE_DIEPINT1_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_DIEPINT1 ; \ OTG_FS_DEVICE_DIEPINT1_XFRC, XFRC
  [then]

  [if]
    \ OTG_FS_DEVICE_DIEPINT2 (multiple-access)  Reset:0x00000080
    : OTG_FS_DEVICE_DIEPINT2_TXFE ( -- x addr ) 7 bit OTG_FS_DEVICE_DIEPINT2 ; \ OTG_FS_DEVICE_DIEPINT2_TXFE, TXFE
    : OTG_FS_DEVICE_DIEPINT2_INEPNE ( -- x addr ) 6 bit OTG_FS_DEVICE_DIEPINT2 ; \ OTG_FS_DEVICE_DIEPINT2_INEPNE, INEPNE
    : OTG_FS_DEVICE_DIEPINT2_ITTXFE ( -- x addr ) 4 bit OTG_FS_DEVICE_DIEPINT2 ; \ OTG_FS_DEVICE_DIEPINT2_ITTXFE, ITTXFE
    : OTG_FS_DEVICE_DIEPINT2_TOC ( -- x addr ) 3 bit OTG_FS_DEVICE_DIEPINT2 ; \ OTG_FS_DEVICE_DIEPINT2_TOC, TOC
    : OTG_FS_DEVICE_DIEPINT2_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_DIEPINT2 ; \ OTG_FS_DEVICE_DIEPINT2_EPDISD, EPDISD
    : OTG_FS_DEVICE_DIEPINT2_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_DIEPINT2 ; \ OTG_FS_DEVICE_DIEPINT2_XFRC, XFRC
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DIEPINT3 (multiple-access)  Reset:0x00000080
    : OTG_FS_DEVICE_DIEPINT3_TXFE ( -- x addr ) 7 bit OTG_FS_DEVICE_DIEPINT3 ; \ OTG_FS_DEVICE_DIEPINT3_TXFE, TXFE
    : OTG_FS_DEVICE_DIEPINT3_INEPNE ( -- x addr ) 6 bit OTG_FS_DEVICE_DIEPINT3 ; \ OTG_FS_DEVICE_DIEPINT3_INEPNE, INEPNE
    : OTG_FS_DEVICE_DIEPINT3_ITTXFE ( -- x addr ) 4 bit OTG_FS_DEVICE_DIEPINT3 ; \ OTG_FS_DEVICE_DIEPINT3_ITTXFE, ITTXFE
    : OTG_FS_DEVICE_DIEPINT3_TOC ( -- x addr ) 3 bit OTG_FS_DEVICE_DIEPINT3 ; \ OTG_FS_DEVICE_DIEPINT3_TOC, TOC
    : OTG_FS_DEVICE_DIEPINT3_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_DIEPINT3 ; \ OTG_FS_DEVICE_DIEPINT3_EPDISD, EPDISD
    : OTG_FS_DEVICE_DIEPINT3_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_DIEPINT3 ; \ OTG_FS_DEVICE_DIEPINT3_XFRC, XFRC
  [then]

  [if]
    \ OTG_FS_DEVICE_DOEPINT0 (read-write) Reset:0x00000080
    : OTG_FS_DEVICE_DOEPINT0_B2BSTUP ( -- x addr ) 6 bit OTG_FS_DEVICE_DOEPINT0 ; \ OTG_FS_DEVICE_DOEPINT0_B2BSTUP, B2BSTUP
    : OTG_FS_DEVICE_DOEPINT0_OTEPDIS ( -- x addr ) 4 bit OTG_FS_DEVICE_DOEPINT0 ; \ OTG_FS_DEVICE_DOEPINT0_OTEPDIS, OTEPDIS
    : OTG_FS_DEVICE_DOEPINT0_STUP ( -- x addr ) 3 bit OTG_FS_DEVICE_DOEPINT0 ; \ OTG_FS_DEVICE_DOEPINT0_STUP, STUP
    : OTG_FS_DEVICE_DOEPINT0_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_DOEPINT0 ; \ OTG_FS_DEVICE_DOEPINT0_EPDISD, EPDISD
    : OTG_FS_DEVICE_DOEPINT0_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_DOEPINT0 ; \ OTG_FS_DEVICE_DOEPINT0_XFRC, XFRC
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DOEPINT1 (read-write) Reset:0x00000080
    : OTG_FS_DEVICE_DOEPINT1_B2BSTUP ( -- x addr ) 6 bit OTG_FS_DEVICE_DOEPINT1 ; \ OTG_FS_DEVICE_DOEPINT1_B2BSTUP, B2BSTUP
    : OTG_FS_DEVICE_DOEPINT1_OTEPDIS ( -- x addr ) 4 bit OTG_FS_DEVICE_DOEPINT1 ; \ OTG_FS_DEVICE_DOEPINT1_OTEPDIS, OTEPDIS
    : OTG_FS_DEVICE_DOEPINT1_STUP ( -- x addr ) 3 bit OTG_FS_DEVICE_DOEPINT1 ; \ OTG_FS_DEVICE_DOEPINT1_STUP, STUP
    : OTG_FS_DEVICE_DOEPINT1_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_DOEPINT1 ; \ OTG_FS_DEVICE_DOEPINT1_EPDISD, EPDISD
    : OTG_FS_DEVICE_DOEPINT1_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_DOEPINT1 ; \ OTG_FS_DEVICE_DOEPINT1_XFRC, XFRC
  [then]

  [if]
    \ OTG_FS_DEVICE_DOEPINT2 (read-write) Reset:0x00000080
    : OTG_FS_DEVICE_DOEPINT2_B2BSTUP ( -- x addr ) 6 bit OTG_FS_DEVICE_DOEPINT2 ; \ OTG_FS_DEVICE_DOEPINT2_B2BSTUP, B2BSTUP
    : OTG_FS_DEVICE_DOEPINT2_OTEPDIS ( -- x addr ) 4 bit OTG_FS_DEVICE_DOEPINT2 ; \ OTG_FS_DEVICE_DOEPINT2_OTEPDIS, OTEPDIS
    : OTG_FS_DEVICE_DOEPINT2_STUP ( -- x addr ) 3 bit OTG_FS_DEVICE_DOEPINT2 ; \ OTG_FS_DEVICE_DOEPINT2_STUP, STUP
    : OTG_FS_DEVICE_DOEPINT2_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_DOEPINT2 ; \ OTG_FS_DEVICE_DOEPINT2_EPDISD, EPDISD
    : OTG_FS_DEVICE_DOEPINT2_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_DOEPINT2 ; \ OTG_FS_DEVICE_DOEPINT2_XFRC, XFRC
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DOEPINT3 (read-write) Reset:0x00000080
    : OTG_FS_DEVICE_DOEPINT3_B2BSTUP ( -- x addr ) 6 bit OTG_FS_DEVICE_DOEPINT3 ; \ OTG_FS_DEVICE_DOEPINT3_B2BSTUP, B2BSTUP
    : OTG_FS_DEVICE_DOEPINT3_OTEPDIS ( -- x addr ) 4 bit OTG_FS_DEVICE_DOEPINT3 ; \ OTG_FS_DEVICE_DOEPINT3_OTEPDIS, OTEPDIS
    : OTG_FS_DEVICE_DOEPINT3_STUP ( -- x addr ) 3 bit OTG_FS_DEVICE_DOEPINT3 ; \ OTG_FS_DEVICE_DOEPINT3_STUP, STUP
    : OTG_FS_DEVICE_DOEPINT3_EPDISD ( -- x addr ) 1 bit OTG_FS_DEVICE_DOEPINT3 ; \ OTG_FS_DEVICE_DOEPINT3_EPDISD, EPDISD
    : OTG_FS_DEVICE_DOEPINT3_XFRC ( -- x addr ) 0 bit OTG_FS_DEVICE_DOEPINT3 ; \ OTG_FS_DEVICE_DOEPINT3_XFRC, XFRC
  [then]

  [if]
    \ OTG_FS_DEVICE_DIEPTSIZ0 (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_DIEPTSIZ0_PKTCNT ( %bb -- x addr ) 19 lshift OTG_FS_DEVICE_DIEPTSIZ0 ; \ OTG_FS_DEVICE_DIEPTSIZ0_PKTCNT, Packet count
    : OTG_FS_DEVICE_DIEPTSIZ0_XFRSIZ ( %bbbbbbb -- x addr ) OTG_FS_DEVICE_DIEPTSIZ0 ; \ OTG_FS_DEVICE_DIEPTSIZ0_XFRSIZ, Transfer size
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DOEPTSIZ0 (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_DOEPTSIZ0_STUPCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_DOEPTSIZ0 ; \ OTG_FS_DEVICE_DOEPTSIZ0_STUPCNT, SETUP packet count
    : OTG_FS_DEVICE_DOEPTSIZ0_PKTCNT ( -- x addr ) 19 bit OTG_FS_DEVICE_DOEPTSIZ0 ; \ OTG_FS_DEVICE_DOEPTSIZ0_PKTCNT, Packet count
    : OTG_FS_DEVICE_DOEPTSIZ0_XFRSIZ ( %bbbbbbb -- x addr ) OTG_FS_DEVICE_DOEPTSIZ0 ; \ OTG_FS_DEVICE_DOEPTSIZ0_XFRSIZ, Transfer size
  [then]

  [if]
    \ OTG_FS_DEVICE_DIEPTSIZ1 (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_DIEPTSIZ1_MCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_DIEPTSIZ1 ; \ OTG_FS_DEVICE_DIEPTSIZ1_MCNT, Multi count
    : OTG_FS_DEVICE_DIEPTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_DIEPTSIZ1 ; \ OTG_FS_DEVICE_DIEPTSIZ1_PKTCNT, Packet count
    : OTG_FS_DEVICE_DIEPTSIZ1_XFRSIZ x addr ) OTG_FS_DEVICE_DIEPTSIZ1 ; \ OTG_FS_DEVICE_DIEPTSIZ1_XFRSIZ, Transfer size
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DIEPTSIZ2 (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_DIEPTSIZ2_MCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_DIEPTSIZ2 ; \ OTG_FS_DEVICE_DIEPTSIZ2_MCNT, Multi count
    : OTG_FS_DEVICE_DIEPTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_DIEPTSIZ2 ; \ OTG_FS_DEVICE_DIEPTSIZ2_PKTCNT, Packet count
    : OTG_FS_DEVICE_DIEPTSIZ2_XFRSIZ x addr ) OTG_FS_DEVICE_DIEPTSIZ2 ; \ OTG_FS_DEVICE_DIEPTSIZ2_XFRSIZ, Transfer size
  [then]

  [if]
    \ OTG_FS_DEVICE_DIEPTSIZ3 (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_DIEPTSIZ3_MCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_DIEPTSIZ3 ; \ OTG_FS_DEVICE_DIEPTSIZ3_MCNT, Multi count
    : OTG_FS_DEVICE_DIEPTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_DIEPTSIZ3 ; \ OTG_FS_DEVICE_DIEPTSIZ3_PKTCNT, Packet count
    : OTG_FS_DEVICE_DIEPTSIZ3_XFRSIZ x addr ) OTG_FS_DEVICE_DIEPTSIZ3 ; \ OTG_FS_DEVICE_DIEPTSIZ3_XFRSIZ, Transfer size
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DTXFSTS0 (read-only) Reset:0x00000000
    : OTG_FS_DEVICE_DTXFSTS0_INEPTFSAV? ( --  x ) OTG_FS_DEVICE_DTXFSTS0 @ ; \ OTG_FS_DEVICE_DTXFSTS0_INEPTFSAV, IN endpoint TxFIFO space  available
  [then]

  [if]
    \ OTG_FS_DEVICE_DTXFSTS1 (read-only) Reset:0x00000000
    : OTG_FS_DEVICE_DTXFSTS1_INEPTFSAV? ( --  x ) OTG_FS_DEVICE_DTXFSTS1 @ ; \ OTG_FS_DEVICE_DTXFSTS1_INEPTFSAV, IN endpoint TxFIFO space  available
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DTXFSTS2 (read-only) Reset:0x00000000
    : OTG_FS_DEVICE_DTXFSTS2_INEPTFSAV? ( --  x ) OTG_FS_DEVICE_DTXFSTS2 @ ; \ OTG_FS_DEVICE_DTXFSTS2_INEPTFSAV, IN endpoint TxFIFO space  available
  [then]

  [if]
    \ OTG_FS_DEVICE_DTXFSTS3 (read-only) Reset:0x00000000
    : OTG_FS_DEVICE_DTXFSTS3_INEPTFSAV? ( --  x ) OTG_FS_DEVICE_DTXFSTS3 @ ; \ OTG_FS_DEVICE_DTXFSTS3_INEPTFSAV, IN endpoint TxFIFO space  available
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DOEPTSIZ1 (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_DOEPTSIZ1_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_DOEPTSIZ1 ; \ OTG_FS_DEVICE_DOEPTSIZ1_RXDPID_STUPCNT, Received data PID/SETUP packet  count
    : OTG_FS_DEVICE_DOEPTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_DOEPTSIZ1 ; \ OTG_FS_DEVICE_DOEPTSIZ1_PKTCNT, Packet count
    : OTG_FS_DEVICE_DOEPTSIZ1_XFRSIZ x addr ) OTG_FS_DEVICE_DOEPTSIZ1 ; \ OTG_FS_DEVICE_DOEPTSIZ1_XFRSIZ, Transfer size
  [then]

  [if]
    \ OTG_FS_DEVICE_DOEPTSIZ2 (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_DOEPTSIZ2_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_DOEPTSIZ2 ; \ OTG_FS_DEVICE_DOEPTSIZ2_RXDPID_STUPCNT, Received data PID/SETUP packet  count
    : OTG_FS_DEVICE_DOEPTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_DOEPTSIZ2 ; \ OTG_FS_DEVICE_DOEPTSIZ2_PKTCNT, Packet count
    : OTG_FS_DEVICE_DOEPTSIZ2_XFRSIZ x addr ) OTG_FS_DEVICE_DOEPTSIZ2 ; \ OTG_FS_DEVICE_DOEPTSIZ2_XFRSIZ, Transfer size
  [then]

  execute-defined? use-OTG_FS_DEVICE [if]
    \ OTG_FS_DEVICE_DOEPTSIZ3 (read-write) Reset:0x00000000
    : OTG_FS_DEVICE_DOEPTSIZ3_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_FS_DEVICE_DOEPTSIZ3 ; \ OTG_FS_DEVICE_DOEPTSIZ3_RXDPID_STUPCNT, Received data PID/SETUP packet  count
    : OTG_FS_DEVICE_DOEPTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_FS_DEVICE_DOEPTSIZ3 ; \ OTG_FS_DEVICE_DOEPTSIZ3_PKTCNT, Packet count
    : OTG_FS_DEVICE_DOEPTSIZ3_XFRSIZ x addr ) OTG_FS_DEVICE_DOEPTSIZ3 ; \ OTG_FS_DEVICE_DOEPTSIZ3_XFRSIZ, Transfer size
  [then]

  [if]
    \ OTG_FS_PWRCLK_FS_PCGCCTL (read-write) Reset:0x00000000
    : OTG_FS_PWRCLK_FS_PCGCCTL_STPPCLK ( -- x addr ) 0 bit OTG_FS_PWRCLK_FS_PCGCCTL ; \ OTG_FS_PWRCLK_FS_PCGCCTL_STPPCLK, Stop PHY clock
    : OTG_FS_PWRCLK_FS_PCGCCTL_GATEHCLK ( -- x addr ) 1 bit OTG_FS_PWRCLK_FS_PCGCCTL ; \ OTG_FS_PWRCLK_FS_PCGCCTL_GATEHCLK, Gate HCLK
    : OTG_FS_PWRCLK_FS_PCGCCTL_PHYSUSP ( -- x addr ) 4 bit OTG_FS_PWRCLK_FS_PCGCCTL ; \ OTG_FS_PWRCLK_FS_PCGCCTL_PHYSUSP, PHY Suspended
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_MCR (read-write) Reset:0x00010002
    : CAN1_MCR_DBF ( -- x addr ) 16 bit CAN1_MCR ; \ CAN1_MCR_DBF, DBF
    : CAN1_MCR_RESET ( -- x addr ) 15 bit CAN1_MCR ; \ CAN1_MCR_RESET, RESET
    : CAN1_MCR_TTCM ( -- x addr ) 7 bit CAN1_MCR ; \ CAN1_MCR_TTCM, TTCM
    : CAN1_MCR_ABOM ( -- x addr ) 6 bit CAN1_MCR ; \ CAN1_MCR_ABOM, ABOM
    : CAN1_MCR_AWUM ( -- x addr ) 5 bit CAN1_MCR ; \ CAN1_MCR_AWUM, AWUM
    : CAN1_MCR_NART ( -- x addr ) 4 bit CAN1_MCR ; \ CAN1_MCR_NART, NART
    : CAN1_MCR_RFLM ( -- x addr ) 3 bit CAN1_MCR ; \ CAN1_MCR_RFLM, RFLM
    : CAN1_MCR_TXFP ( -- x addr ) 2 bit CAN1_MCR ; \ CAN1_MCR_TXFP, TXFP
    : CAN1_MCR_SLEEP ( -- x addr ) 1 bit CAN1_MCR ; \ CAN1_MCR_SLEEP, SLEEP
    : CAN1_MCR_INRQ ( -- x addr ) 0 bit CAN1_MCR ; \ CAN1_MCR_INRQ, INRQ
  [then]

  [if]
    \ CAN1_MSR (multiple-access)  Reset:0x00000C02
    : CAN1_MSR_RX ( -- x addr ) 11 bit CAN1_MSR ; \ CAN1_MSR_RX, RX
    : CAN1_MSR_SAMP ( -- x addr ) 10 bit CAN1_MSR ; \ CAN1_MSR_SAMP, SAMP
    : CAN1_MSR_RXM ( -- x addr ) 9 bit CAN1_MSR ; \ CAN1_MSR_RXM, RXM
    : CAN1_MSR_TXM ( -- x addr ) 8 bit CAN1_MSR ; \ CAN1_MSR_TXM, TXM
    : CAN1_MSR_SLAKI ( -- x addr ) 4 bit CAN1_MSR ; \ CAN1_MSR_SLAKI, SLAKI
    : CAN1_MSR_WKUI ( -- x addr ) 3 bit CAN1_MSR ; \ CAN1_MSR_WKUI, WKUI
    : CAN1_MSR_ERRI ( -- x addr ) 2 bit CAN1_MSR ; \ CAN1_MSR_ERRI, ERRI
    : CAN1_MSR_SLAK ( -- x addr ) 1 bit CAN1_MSR ; \ CAN1_MSR_SLAK, SLAK
    : CAN1_MSR_INAK ( -- x addr ) 0 bit CAN1_MSR ; \ CAN1_MSR_INAK, INAK
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_TSR (multiple-access)  Reset:0x1C000000
    : CAN1_TSR_LOW2? ( -- 1|0 ) 31 bit CAN1_TSR bit@ ; \ CAN1_TSR_LOW2, Lowest priority flag for mailbox  2
    : CAN1_TSR_LOW1? ( -- 1|0 ) 30 bit CAN1_TSR bit@ ; \ CAN1_TSR_LOW1, Lowest priority flag for mailbox  1
    : CAN1_TSR_LOW0? ( -- 1|0 ) 29 bit CAN1_TSR bit@ ; \ CAN1_TSR_LOW0, Lowest priority flag for mailbox  0
    : CAN1_TSR_TME2? ( -- 1|0 ) 28 bit CAN1_TSR bit@ ; \ CAN1_TSR_TME2, Lowest priority flag for mailbox  2
    : CAN1_TSR_TME1? ( -- 1|0 ) 27 bit CAN1_TSR bit@ ; \ CAN1_TSR_TME1, Lowest priority flag for mailbox  1
    : CAN1_TSR_TME0? ( -- 1|0 ) 26 bit CAN1_TSR bit@ ; \ CAN1_TSR_TME0, Lowest priority flag for mailbox  0
    : CAN1_TSR_CODE ( %bb -- x addr ) 24 lshift CAN1_TSR ; \ CAN1_TSR_CODE, CODE
    : CAN1_TSR_ABRQ2 ( -- x addr ) 23 bit CAN1_TSR ; \ CAN1_TSR_ABRQ2, ABRQ2
    : CAN1_TSR_TERR2 ( -- x addr ) 19 bit CAN1_TSR ; \ CAN1_TSR_TERR2, TERR2
    : CAN1_TSR_ALST2 ( -- x addr ) 18 bit CAN1_TSR ; \ CAN1_TSR_ALST2, ALST2
    : CAN1_TSR_TXOK2 ( -- x addr ) 17 bit CAN1_TSR ; \ CAN1_TSR_TXOK2, TXOK2
    : CAN1_TSR_RQCP2 ( -- x addr ) 16 bit CAN1_TSR ; \ CAN1_TSR_RQCP2, RQCP2
    : CAN1_TSR_ABRQ1 ( -- x addr ) 15 bit CAN1_TSR ; \ CAN1_TSR_ABRQ1, ABRQ1
    : CAN1_TSR_TERR1 ( -- x addr ) 11 bit CAN1_TSR ; \ CAN1_TSR_TERR1, TERR1
    : CAN1_TSR_ALST1 ( -- x addr ) 10 bit CAN1_TSR ; \ CAN1_TSR_ALST1, ALST1
    : CAN1_TSR_TXOK1 ( -- x addr ) 9 bit CAN1_TSR ; \ CAN1_TSR_TXOK1, TXOK1
    : CAN1_TSR_RQCP1 ( -- x addr ) 8 bit CAN1_TSR ; \ CAN1_TSR_RQCP1, RQCP1
    : CAN1_TSR_ABRQ0 ( -- x addr ) 7 bit CAN1_TSR ; \ CAN1_TSR_ABRQ0, ABRQ0
    : CAN1_TSR_TERR0 ( -- x addr ) 3 bit CAN1_TSR ; \ CAN1_TSR_TERR0, TERR0
    : CAN1_TSR_ALST0 ( -- x addr ) 2 bit CAN1_TSR ; \ CAN1_TSR_ALST0, ALST0
    : CAN1_TSR_TXOK0 ( -- x addr ) 1 bit CAN1_TSR ; \ CAN1_TSR_TXOK0, TXOK0
    : CAN1_TSR_RQCP0 ( -- x addr ) 0 bit CAN1_TSR ; \ CAN1_TSR_RQCP0, RQCP0
  [then]

  [if]
    \ CAN1_RF0R (multiple-access)  Reset:0x00000000
    : CAN1_RF0R_RFOM0 ( -- x addr ) 5 bit CAN1_RF0R ; \ CAN1_RF0R_RFOM0, RFOM0
    : CAN1_RF0R_FOVR0 ( -- x addr ) 4 bit CAN1_RF0R ; \ CAN1_RF0R_FOVR0, FOVR0
    : CAN1_RF0R_FULL0 ( -- x addr ) 3 bit CAN1_RF0R ; \ CAN1_RF0R_FULL0, FULL0
    : CAN1_RF0R_FMP0 ( %bb -- x addr ) CAN1_RF0R ; \ CAN1_RF0R_FMP0, FMP0
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_RF1R (multiple-access)  Reset:0x00000000
    : CAN1_RF1R_RFOM1 ( -- x addr ) 5 bit CAN1_RF1R ; \ CAN1_RF1R_RFOM1, RFOM1
    : CAN1_RF1R_FOVR1 ( -- x addr ) 4 bit CAN1_RF1R ; \ CAN1_RF1R_FOVR1, FOVR1
    : CAN1_RF1R_FULL1 ( -- x addr ) 3 bit CAN1_RF1R ; \ CAN1_RF1R_FULL1, FULL1
    : CAN1_RF1R_FMP1 ( %bb -- x addr ) CAN1_RF1R ; \ CAN1_RF1R_FMP1, FMP1
  [then]

  [if]
    \ CAN1_IER (read-write) Reset:0x00000000
    : CAN1_IER_SLKIE ( -- x addr ) 17 bit CAN1_IER ; \ CAN1_IER_SLKIE, SLKIE
    : CAN1_IER_WKUIE ( -- x addr ) 16 bit CAN1_IER ; \ CAN1_IER_WKUIE, WKUIE
    : CAN1_IER_ERRIE ( -- x addr ) 15 bit CAN1_IER ; \ CAN1_IER_ERRIE, ERRIE
    : CAN1_IER_LECIE ( -- x addr ) 11 bit CAN1_IER ; \ CAN1_IER_LECIE, LECIE
    : CAN1_IER_BOFIE ( -- x addr ) 10 bit CAN1_IER ; \ CAN1_IER_BOFIE, BOFIE
    : CAN1_IER_EPVIE ( -- x addr ) 9 bit CAN1_IER ; \ CAN1_IER_EPVIE, EPVIE
    : CAN1_IER_EWGIE ( -- x addr ) 8 bit CAN1_IER ; \ CAN1_IER_EWGIE, EWGIE
    : CAN1_IER_FOVIE1 ( -- x addr ) 6 bit CAN1_IER ; \ CAN1_IER_FOVIE1, FOVIE1
    : CAN1_IER_FFIE1 ( -- x addr ) 5 bit CAN1_IER ; \ CAN1_IER_FFIE1, FFIE1
    : CAN1_IER_FMPIE1 ( -- x addr ) 4 bit CAN1_IER ; \ CAN1_IER_FMPIE1, FMPIE1
    : CAN1_IER_FOVIE0 ( -- x addr ) 3 bit CAN1_IER ; \ CAN1_IER_FOVIE0, FOVIE0
    : CAN1_IER_FFIE0 ( -- x addr ) 2 bit CAN1_IER ; \ CAN1_IER_FFIE0, FFIE0
    : CAN1_IER_FMPIE0 ( -- x addr ) 1 bit CAN1_IER ; \ CAN1_IER_FMPIE0, FMPIE0
    : CAN1_IER_TMEIE ( -- x addr ) 0 bit CAN1_IER ; \ CAN1_IER_TMEIE, TMEIE
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_ESR (multiple-access)  Reset:0x00000000
    : CAN1_ESR_REC ( %bbbbbbbb -- x addr ) 24 lshift CAN1_ESR ; \ CAN1_ESR_REC, REC
    : CAN1_ESR_TEC ( %bbbbbbbb -- x addr ) 16 lshift CAN1_ESR ; \ CAN1_ESR_TEC, TEC
    : CAN1_ESR_LEC ( %bbb -- x addr ) 4 lshift CAN1_ESR ; \ CAN1_ESR_LEC, LEC
    : CAN1_ESR_BOFF ( -- x addr ) 2 bit CAN1_ESR ; \ CAN1_ESR_BOFF, BOFF
    : CAN1_ESR_EPVF ( -- x addr ) 1 bit CAN1_ESR ; \ CAN1_ESR_EPVF, EPVF
    : CAN1_ESR_EWGF ( -- x addr ) 0 bit CAN1_ESR ; \ CAN1_ESR_EWGF, EWGF
  [then]

  [if]
    \ CAN1_BTR (read-write) Reset:0x00000000
    : CAN1_BTR_SILM ( -- x addr ) 31 bit CAN1_BTR ; \ CAN1_BTR_SILM, SILM
    : CAN1_BTR_LBKM ( -- x addr ) 30 bit CAN1_BTR ; \ CAN1_BTR_LBKM, LBKM
    : CAN1_BTR_SJW ( %bb -- x addr ) 24 lshift CAN1_BTR ; \ CAN1_BTR_SJW, SJW
    : CAN1_BTR_TS2 ( %bbb -- x addr ) 20 lshift CAN1_BTR ; \ CAN1_BTR_TS2, TS2
    : CAN1_BTR_TS1 ( %bbbb -- x addr ) 16 lshift CAN1_BTR ; \ CAN1_BTR_TS1, TS1
    : CAN1_BTR_BRP ( %bbbbbbbbbb -- x addr ) CAN1_BTR ; \ CAN1_BTR_BRP, BRP
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_TI0R (read-write) Reset:0x00000000
    : CAN1_TI0R_STID x addr ) 21 lshift CAN1_TI0R ; \ CAN1_TI0R_STID, STID
    : CAN1_TI0R_EXID x addr ) 3 lshift CAN1_TI0R ; \ CAN1_TI0R_EXID, EXID
    : CAN1_TI0R_IDE ( -- x addr ) 2 bit CAN1_TI0R ; \ CAN1_TI0R_IDE, IDE
    : CAN1_TI0R_RTR ( -- x addr ) 1 bit CAN1_TI0R ; \ CAN1_TI0R_RTR, RTR
    : CAN1_TI0R_TXRQ ( -- x addr ) 0 bit CAN1_TI0R ; \ CAN1_TI0R_TXRQ, TXRQ
  [then]

  [if]
    \ CAN1_TDT0R (read-write) Reset:0x00000000
    : CAN1_TDT0R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN1_TDT0R ; \ CAN1_TDT0R_TIME, TIME
    : CAN1_TDT0R_TGT ( -- x addr ) 8 bit CAN1_TDT0R ; \ CAN1_TDT0R_TGT, TGT
    : CAN1_TDT0R_DLC ( %bbbb -- x addr ) CAN1_TDT0R ; \ CAN1_TDT0R_DLC, DLC
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_TDL0R (read-write) Reset:0x00000000
    : CAN1_TDL0R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDL0R ; \ CAN1_TDL0R_DATA3, DATA3
    : CAN1_TDL0R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDL0R ; \ CAN1_TDL0R_DATA2, DATA2
    : CAN1_TDL0R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDL0R ; \ CAN1_TDL0R_DATA1, DATA1
    : CAN1_TDL0R_DATA0 ( %bbbbbbbb -- x addr ) CAN1_TDL0R ; \ CAN1_TDL0R_DATA0, DATA0
  [then]

  [if]
    \ CAN1_TDH0R (read-write) Reset:0x00000000
    : CAN1_TDH0R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDH0R ; \ CAN1_TDH0R_DATA7, DATA7
    : CAN1_TDH0R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDH0R ; \ CAN1_TDH0R_DATA6, DATA6
    : CAN1_TDH0R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDH0R ; \ CAN1_TDH0R_DATA5, DATA5
    : CAN1_TDH0R_DATA4 ( %bbbbbbbb -- x addr ) CAN1_TDH0R ; \ CAN1_TDH0R_DATA4, DATA4
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_TI1R (read-write) Reset:0x00000000
    : CAN1_TI1R_STID x addr ) 21 lshift CAN1_TI1R ; \ CAN1_TI1R_STID, STID
    : CAN1_TI1R_EXID x addr ) 3 lshift CAN1_TI1R ; \ CAN1_TI1R_EXID, EXID
    : CAN1_TI1R_IDE ( -- x addr ) 2 bit CAN1_TI1R ; \ CAN1_TI1R_IDE, IDE
    : CAN1_TI1R_RTR ( -- x addr ) 1 bit CAN1_TI1R ; \ CAN1_TI1R_RTR, RTR
    : CAN1_TI1R_TXRQ ( -- x addr ) 0 bit CAN1_TI1R ; \ CAN1_TI1R_TXRQ, TXRQ
  [then]

  [if]
    \ CAN1_TDT1R (read-write) Reset:0x00000000
    : CAN1_TDT1R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN1_TDT1R ; \ CAN1_TDT1R_TIME, TIME
    : CAN1_TDT1R_TGT ( -- x addr ) 8 bit CAN1_TDT1R ; \ CAN1_TDT1R_TGT, TGT
    : CAN1_TDT1R_DLC ( %bbbb -- x addr ) CAN1_TDT1R ; \ CAN1_TDT1R_DLC, DLC
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_TDL1R (read-write) Reset:0x00000000
    : CAN1_TDL1R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDL1R ; \ CAN1_TDL1R_DATA3, DATA3
    : CAN1_TDL1R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDL1R ; \ CAN1_TDL1R_DATA2, DATA2
    : CAN1_TDL1R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDL1R ; \ CAN1_TDL1R_DATA1, DATA1
    : CAN1_TDL1R_DATA0 ( %bbbbbbbb -- x addr ) CAN1_TDL1R ; \ CAN1_TDL1R_DATA0, DATA0
  [then]

  [if]
    \ CAN1_TDH1R (read-write) Reset:0x00000000
    : CAN1_TDH1R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDH1R ; \ CAN1_TDH1R_DATA7, DATA7
    : CAN1_TDH1R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDH1R ; \ CAN1_TDH1R_DATA6, DATA6
    : CAN1_TDH1R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDH1R ; \ CAN1_TDH1R_DATA5, DATA5
    : CAN1_TDH1R_DATA4 ( %bbbbbbbb -- x addr ) CAN1_TDH1R ; \ CAN1_TDH1R_DATA4, DATA4
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_TI2R (read-write) Reset:0x00000000
    : CAN1_TI2R_STID x addr ) 21 lshift CAN1_TI2R ; \ CAN1_TI2R_STID, STID
    : CAN1_TI2R_EXID x addr ) 3 lshift CAN1_TI2R ; \ CAN1_TI2R_EXID, EXID
    : CAN1_TI2R_IDE ( -- x addr ) 2 bit CAN1_TI2R ; \ CAN1_TI2R_IDE, IDE
    : CAN1_TI2R_RTR ( -- x addr ) 1 bit CAN1_TI2R ; \ CAN1_TI2R_RTR, RTR
    : CAN1_TI2R_TXRQ ( -- x addr ) 0 bit CAN1_TI2R ; \ CAN1_TI2R_TXRQ, TXRQ
  [then]

  [if]
    \ CAN1_TDT2R (read-write) Reset:0x00000000
    : CAN1_TDT2R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN1_TDT2R ; \ CAN1_TDT2R_TIME, TIME
    : CAN1_TDT2R_TGT ( -- x addr ) 8 bit CAN1_TDT2R ; \ CAN1_TDT2R_TGT, TGT
    : CAN1_TDT2R_DLC ( %bbbb -- x addr ) CAN1_TDT2R ; \ CAN1_TDT2R_DLC, DLC
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_TDL2R (read-write) Reset:0x00000000
    : CAN1_TDL2R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDL2R ; \ CAN1_TDL2R_DATA3, DATA3
    : CAN1_TDL2R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDL2R ; \ CAN1_TDL2R_DATA2, DATA2
    : CAN1_TDL2R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDL2R ; \ CAN1_TDL2R_DATA1, DATA1
    : CAN1_TDL2R_DATA0 ( %bbbbbbbb -- x addr ) CAN1_TDL2R ; \ CAN1_TDL2R_DATA0, DATA0
  [then]

  [if]
    \ CAN1_TDH2R (read-write) Reset:0x00000000
    : CAN1_TDH2R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN1_TDH2R ; \ CAN1_TDH2R_DATA7, DATA7
    : CAN1_TDH2R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN1_TDH2R ; \ CAN1_TDH2R_DATA6, DATA6
    : CAN1_TDH2R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN1_TDH2R ; \ CAN1_TDH2R_DATA5, DATA5
    : CAN1_TDH2R_DATA4 ( %bbbbbbbb -- x addr ) CAN1_TDH2R ; \ CAN1_TDH2R_DATA4, DATA4
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_RI0R (read-only) Reset:0x00000000
    : CAN1_RI0R_STID? ( --  x ) 21 lshift CAN1_RI0R @ ; \ CAN1_RI0R_STID, STID
    : CAN1_RI0R_EXID? ( --  x ) 3 lshift CAN1_RI0R @ ; \ CAN1_RI0R_EXID, EXID
    : CAN1_RI0R_IDE? ( --  1|0 ) 2 bit CAN1_RI0R bit@ ; \ CAN1_RI0R_IDE, IDE
    : CAN1_RI0R_RTR? ( --  1|0 ) 1 bit CAN1_RI0R bit@ ; \ CAN1_RI0R_RTR, RTR
  [then]

  [if]
    \ CAN1_RDT0R (read-only) Reset:0x00000000
    : CAN1_RDT0R_TIME? ( --  x ) 16 lshift CAN1_RDT0R @ ; \ CAN1_RDT0R_TIME, TIME
    : CAN1_RDT0R_FMI? ( --  x ) 8 lshift CAN1_RDT0R @ ; \ CAN1_RDT0R_FMI, FMI
    : CAN1_RDT0R_DLC? ( --  x ) CAN1_RDT0R @ ; \ CAN1_RDT0R_DLC, DLC
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_RDL0R (read-only) Reset:0x00000000
    : CAN1_RDL0R_DATA3? ( --  x ) 24 lshift CAN1_RDL0R @ ; \ CAN1_RDL0R_DATA3, DATA3
    : CAN1_RDL0R_DATA2? ( --  x ) 16 lshift CAN1_RDL0R @ ; \ CAN1_RDL0R_DATA2, DATA2
    : CAN1_RDL0R_DATA1? ( --  x ) 8 lshift CAN1_RDL0R @ ; \ CAN1_RDL0R_DATA1, DATA1
    : CAN1_RDL0R_DATA0? ( --  x ) CAN1_RDL0R @ ; \ CAN1_RDL0R_DATA0, DATA0
  [then]

  [if]
    \ CAN1_RDH0R (read-only) Reset:0x00000000
    : CAN1_RDH0R_DATA7? ( --  x ) 24 lshift CAN1_RDH0R @ ; \ CAN1_RDH0R_DATA7, DATA7
    : CAN1_RDH0R_DATA6? ( --  x ) 16 lshift CAN1_RDH0R @ ; \ CAN1_RDH0R_DATA6, DATA6
    : CAN1_RDH0R_DATA5? ( --  x ) 8 lshift CAN1_RDH0R @ ; \ CAN1_RDH0R_DATA5, DATA5
    : CAN1_RDH0R_DATA4? ( --  x ) CAN1_RDH0R @ ; \ CAN1_RDH0R_DATA4, DATA4
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_RI1R (read-only) Reset:0x00000000
    : CAN1_RI1R_STID? ( --  x ) 21 lshift CAN1_RI1R @ ; \ CAN1_RI1R_STID, STID
    : CAN1_RI1R_EXID? ( --  x ) 3 lshift CAN1_RI1R @ ; \ CAN1_RI1R_EXID, EXID
    : CAN1_RI1R_IDE? ( --  1|0 ) 2 bit CAN1_RI1R bit@ ; \ CAN1_RI1R_IDE, IDE
    : CAN1_RI1R_RTR? ( --  1|0 ) 1 bit CAN1_RI1R bit@ ; \ CAN1_RI1R_RTR, RTR
  [then]

  [if]
    \ CAN1_RDT1R (read-only) Reset:0x00000000
    : CAN1_RDT1R_TIME? ( --  x ) 16 lshift CAN1_RDT1R @ ; \ CAN1_RDT1R_TIME, TIME
    : CAN1_RDT1R_FMI? ( --  x ) 8 lshift CAN1_RDT1R @ ; \ CAN1_RDT1R_FMI, FMI
    : CAN1_RDT1R_DLC? ( --  x ) CAN1_RDT1R @ ; \ CAN1_RDT1R_DLC, DLC
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_RDL1R (read-only) Reset:0x00000000
    : CAN1_RDL1R_DATA3? ( --  x ) 24 lshift CAN1_RDL1R @ ; \ CAN1_RDL1R_DATA3, DATA3
    : CAN1_RDL1R_DATA2? ( --  x ) 16 lshift CAN1_RDL1R @ ; \ CAN1_RDL1R_DATA2, DATA2
    : CAN1_RDL1R_DATA1? ( --  x ) 8 lshift CAN1_RDL1R @ ; \ CAN1_RDL1R_DATA1, DATA1
    : CAN1_RDL1R_DATA0? ( --  x ) CAN1_RDL1R @ ; \ CAN1_RDL1R_DATA0, DATA0
  [then]

  [if]
    \ CAN1_RDH1R (read-only) Reset:0x00000000
    : CAN1_RDH1R_DATA7? ( --  x ) 24 lshift CAN1_RDH1R @ ; \ CAN1_RDH1R_DATA7, DATA7
    : CAN1_RDH1R_DATA6? ( --  x ) 16 lshift CAN1_RDH1R @ ; \ CAN1_RDH1R_DATA6, DATA6
    : CAN1_RDH1R_DATA5? ( --  x ) 8 lshift CAN1_RDH1R @ ; \ CAN1_RDH1R_DATA5, DATA5
    : CAN1_RDH1R_DATA4? ( --  x ) CAN1_RDH1R @ ; \ CAN1_RDH1R_DATA4, DATA4
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_FMR (read-write) Reset:0x2A1C0E01
    : CAN1_FMR_CAN2SB ( %bbbbbb -- x addr ) 8 lshift CAN1_FMR ; \ CAN1_FMR_CAN2SB, CAN2SB
    : CAN1_FMR_FINIT ( -- x addr ) 0 bit CAN1_FMR ; \ CAN1_FMR_FINIT, FINIT
  [then]

  [if]
    \ CAN1_FM1R (read-write) Reset:0x00000000
    : CAN1_FM1R_FBM0 ( -- x addr ) 0 bit CAN1_FM1R ; \ CAN1_FM1R_FBM0, Filter mode
    : CAN1_FM1R_FBM1 ( -- x addr ) 1 bit CAN1_FM1R ; \ CAN1_FM1R_FBM1, Filter mode
    : CAN1_FM1R_FBM2 ( -- x addr ) 2 bit CAN1_FM1R ; \ CAN1_FM1R_FBM2, Filter mode
    : CAN1_FM1R_FBM3 ( -- x addr ) 3 bit CAN1_FM1R ; \ CAN1_FM1R_FBM3, Filter mode
    : CAN1_FM1R_FBM4 ( -- x addr ) 4 bit CAN1_FM1R ; \ CAN1_FM1R_FBM4, Filter mode
    : CAN1_FM1R_FBM5 ( -- x addr ) 5 bit CAN1_FM1R ; \ CAN1_FM1R_FBM5, Filter mode
    : CAN1_FM1R_FBM6 ( -- x addr ) 6 bit CAN1_FM1R ; \ CAN1_FM1R_FBM6, Filter mode
    : CAN1_FM1R_FBM7 ( -- x addr ) 7 bit CAN1_FM1R ; \ CAN1_FM1R_FBM7, Filter mode
    : CAN1_FM1R_FBM8 ( -- x addr ) 8 bit CAN1_FM1R ; \ CAN1_FM1R_FBM8, Filter mode
    : CAN1_FM1R_FBM9 ( -- x addr ) 9 bit CAN1_FM1R ; \ CAN1_FM1R_FBM9, Filter mode
    : CAN1_FM1R_FBM10 ( -- x addr ) 10 bit CAN1_FM1R ; \ CAN1_FM1R_FBM10, Filter mode
    : CAN1_FM1R_FBM11 ( -- x addr ) 11 bit CAN1_FM1R ; \ CAN1_FM1R_FBM11, Filter mode
    : CAN1_FM1R_FBM12 ( -- x addr ) 12 bit CAN1_FM1R ; \ CAN1_FM1R_FBM12, Filter mode
    : CAN1_FM1R_FBM13 ( -- x addr ) 13 bit CAN1_FM1R ; \ CAN1_FM1R_FBM13, Filter mode
    : CAN1_FM1R_FBM14 ( -- x addr ) 14 bit CAN1_FM1R ; \ CAN1_FM1R_FBM14, Filter mode
    : CAN1_FM1R_FBM15 ( -- x addr ) 15 bit CAN1_FM1R ; \ CAN1_FM1R_FBM15, Filter mode
    : CAN1_FM1R_FBM16 ( -- x addr ) 16 bit CAN1_FM1R ; \ CAN1_FM1R_FBM16, Filter mode
    : CAN1_FM1R_FBM17 ( -- x addr ) 17 bit CAN1_FM1R ; \ CAN1_FM1R_FBM17, Filter mode
    : CAN1_FM1R_FBM18 ( -- x addr ) 18 bit CAN1_FM1R ; \ CAN1_FM1R_FBM18, Filter mode
    : CAN1_FM1R_FBM19 ( -- x addr ) 19 bit CAN1_FM1R ; \ CAN1_FM1R_FBM19, Filter mode
    : CAN1_FM1R_FBM20 ( -- x addr ) 20 bit CAN1_FM1R ; \ CAN1_FM1R_FBM20, Filter mode
    : CAN1_FM1R_FBM21 ( -- x addr ) 21 bit CAN1_FM1R ; \ CAN1_FM1R_FBM21, Filter mode
    : CAN1_FM1R_FBM22 ( -- x addr ) 22 bit CAN1_FM1R ; \ CAN1_FM1R_FBM22, Filter mode
    : CAN1_FM1R_FBM23 ( -- x addr ) 23 bit CAN1_FM1R ; \ CAN1_FM1R_FBM23, Filter mode
    : CAN1_FM1R_FBM24 ( -- x addr ) 24 bit CAN1_FM1R ; \ CAN1_FM1R_FBM24, Filter mode
    : CAN1_FM1R_FBM25 ( -- x addr ) 25 bit CAN1_FM1R ; \ CAN1_FM1R_FBM25, Filter mode
    : CAN1_FM1R_FBM26 ( -- x addr ) 26 bit CAN1_FM1R ; \ CAN1_FM1R_FBM26, Filter mode
    : CAN1_FM1R_FBM27 ( -- x addr ) 27 bit CAN1_FM1R ; \ CAN1_FM1R_FBM27, Filter mode
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_FS1R (read-write) Reset:0x00000000
    : CAN1_FS1R_FSC0 ( -- x addr ) 0 bit CAN1_FS1R ; \ CAN1_FS1R_FSC0, Filter scale configuration
    : CAN1_FS1R_FSC1 ( -- x addr ) 1 bit CAN1_FS1R ; \ CAN1_FS1R_FSC1, Filter scale configuration
    : CAN1_FS1R_FSC2 ( -- x addr ) 2 bit CAN1_FS1R ; \ CAN1_FS1R_FSC2, Filter scale configuration
    : CAN1_FS1R_FSC3 ( -- x addr ) 3 bit CAN1_FS1R ; \ CAN1_FS1R_FSC3, Filter scale configuration
    : CAN1_FS1R_FSC4 ( -- x addr ) 4 bit CAN1_FS1R ; \ CAN1_FS1R_FSC4, Filter scale configuration
    : CAN1_FS1R_FSC5 ( -- x addr ) 5 bit CAN1_FS1R ; \ CAN1_FS1R_FSC5, Filter scale configuration
    : CAN1_FS1R_FSC6 ( -- x addr ) 6 bit CAN1_FS1R ; \ CAN1_FS1R_FSC6, Filter scale configuration
    : CAN1_FS1R_FSC7 ( -- x addr ) 7 bit CAN1_FS1R ; \ CAN1_FS1R_FSC7, Filter scale configuration
    : CAN1_FS1R_FSC8 ( -- x addr ) 8 bit CAN1_FS1R ; \ CAN1_FS1R_FSC8, Filter scale configuration
    : CAN1_FS1R_FSC9 ( -- x addr ) 9 bit CAN1_FS1R ; \ CAN1_FS1R_FSC9, Filter scale configuration
    : CAN1_FS1R_FSC10 ( -- x addr ) 10 bit CAN1_FS1R ; \ CAN1_FS1R_FSC10, Filter scale configuration
    : CAN1_FS1R_FSC11 ( -- x addr ) 11 bit CAN1_FS1R ; \ CAN1_FS1R_FSC11, Filter scale configuration
    : CAN1_FS1R_FSC12 ( -- x addr ) 12 bit CAN1_FS1R ; \ CAN1_FS1R_FSC12, Filter scale configuration
    : CAN1_FS1R_FSC13 ( -- x addr ) 13 bit CAN1_FS1R ; \ CAN1_FS1R_FSC13, Filter scale configuration
    : CAN1_FS1R_FSC14 ( -- x addr ) 14 bit CAN1_FS1R ; \ CAN1_FS1R_FSC14, Filter scale configuration
    : CAN1_FS1R_FSC15 ( -- x addr ) 15 bit CAN1_FS1R ; \ CAN1_FS1R_FSC15, Filter scale configuration
    : CAN1_FS1R_FSC16 ( -- x addr ) 16 bit CAN1_FS1R ; \ CAN1_FS1R_FSC16, Filter scale configuration
    : CAN1_FS1R_FSC17 ( -- x addr ) 17 bit CAN1_FS1R ; \ CAN1_FS1R_FSC17, Filter scale configuration
    : CAN1_FS1R_FSC18 ( -- x addr ) 18 bit CAN1_FS1R ; \ CAN1_FS1R_FSC18, Filter scale configuration
    : CAN1_FS1R_FSC19 ( -- x addr ) 19 bit CAN1_FS1R ; \ CAN1_FS1R_FSC19, Filter scale configuration
    : CAN1_FS1R_FSC20 ( -- x addr ) 20 bit CAN1_FS1R ; \ CAN1_FS1R_FSC20, Filter scale configuration
    : CAN1_FS1R_FSC21 ( -- x addr ) 21 bit CAN1_FS1R ; \ CAN1_FS1R_FSC21, Filter scale configuration
    : CAN1_FS1R_FSC22 ( -- x addr ) 22 bit CAN1_FS1R ; \ CAN1_FS1R_FSC22, Filter scale configuration
    : CAN1_FS1R_FSC23 ( -- x addr ) 23 bit CAN1_FS1R ; \ CAN1_FS1R_FSC23, Filter scale configuration
    : CAN1_FS1R_FSC24 ( -- x addr ) 24 bit CAN1_FS1R ; \ CAN1_FS1R_FSC24, Filter scale configuration
    : CAN1_FS1R_FSC25 ( -- x addr ) 25 bit CAN1_FS1R ; \ CAN1_FS1R_FSC25, Filter scale configuration
    : CAN1_FS1R_FSC26 ( -- x addr ) 26 bit CAN1_FS1R ; \ CAN1_FS1R_FSC26, Filter scale configuration
    : CAN1_FS1R_FSC27 ( -- x addr ) 27 bit CAN1_FS1R ; \ CAN1_FS1R_FSC27, Filter scale configuration
  [then]

  [if]
    \ CAN1_FFA1R (read-write) Reset:0x00000000
    : CAN1_FFA1R_FFA0 ( -- x addr ) 0 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA0, Filter FIFO assignment for filter  0
    : CAN1_FFA1R_FFA1 ( -- x addr ) 1 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA1, Filter FIFO assignment for filter  1
    : CAN1_FFA1R_FFA2 ( -- x addr ) 2 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA2, Filter FIFO assignment for filter  2
    : CAN1_FFA1R_FFA3 ( -- x addr ) 3 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA3, Filter FIFO assignment for filter  3
    : CAN1_FFA1R_FFA4 ( -- x addr ) 4 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA4, Filter FIFO assignment for filter  4
    : CAN1_FFA1R_FFA5 ( -- x addr ) 5 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA5, Filter FIFO assignment for filter  5
    : CAN1_FFA1R_FFA6 ( -- x addr ) 6 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA6, Filter FIFO assignment for filter  6
    : CAN1_FFA1R_FFA7 ( -- x addr ) 7 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA7, Filter FIFO assignment for filter  7
    : CAN1_FFA1R_FFA8 ( -- x addr ) 8 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA8, Filter FIFO assignment for filter  8
    : CAN1_FFA1R_FFA9 ( -- x addr ) 9 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA9, Filter FIFO assignment for filter  9
    : CAN1_FFA1R_FFA10 ( -- x addr ) 10 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA10, Filter FIFO assignment for filter  10
    : CAN1_FFA1R_FFA11 ( -- x addr ) 11 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA11, Filter FIFO assignment for filter  11
    : CAN1_FFA1R_FFA12 ( -- x addr ) 12 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA12, Filter FIFO assignment for filter  12
    : CAN1_FFA1R_FFA13 ( -- x addr ) 13 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA13, Filter FIFO assignment for filter  13
    : CAN1_FFA1R_FFA14 ( -- x addr ) 14 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA14, Filter FIFO assignment for filter  14
    : CAN1_FFA1R_FFA15 ( -- x addr ) 15 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA15, Filter FIFO assignment for filter  15
    : CAN1_FFA1R_FFA16 ( -- x addr ) 16 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA16, Filter FIFO assignment for filter  16
    : CAN1_FFA1R_FFA17 ( -- x addr ) 17 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA17, Filter FIFO assignment for filter  17
    : CAN1_FFA1R_FFA18 ( -- x addr ) 18 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA18, Filter FIFO assignment for filter  18
    : CAN1_FFA1R_FFA19 ( -- x addr ) 19 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA19, Filter FIFO assignment for filter  19
    : CAN1_FFA1R_FFA20 ( -- x addr ) 20 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA20, Filter FIFO assignment for filter  20
    : CAN1_FFA1R_FFA21 ( -- x addr ) 21 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA21, Filter FIFO assignment for filter  21
    : CAN1_FFA1R_FFA22 ( -- x addr ) 22 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA22, Filter FIFO assignment for filter  22
    : CAN1_FFA1R_FFA23 ( -- x addr ) 23 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA23, Filter FIFO assignment for filter  23
    : CAN1_FFA1R_FFA24 ( -- x addr ) 24 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA24, Filter FIFO assignment for filter  24
    : CAN1_FFA1R_FFA25 ( -- x addr ) 25 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA25, Filter FIFO assignment for filter  25
    : CAN1_FFA1R_FFA26 ( -- x addr ) 26 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA26, Filter FIFO assignment for filter  26
    : CAN1_FFA1R_FFA27 ( -- x addr ) 27 bit CAN1_FFA1R ; \ CAN1_FFA1R_FFA27, Filter FIFO assignment for filter  27
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_FA1R (read-write) Reset:0x00000000
    : CAN1_FA1R_FACT0 ( -- x addr ) 0 bit CAN1_FA1R ; \ CAN1_FA1R_FACT0, Filter active
    : CAN1_FA1R_FACT1 ( -- x addr ) 1 bit CAN1_FA1R ; \ CAN1_FA1R_FACT1, Filter active
    : CAN1_FA1R_FACT2 ( -- x addr ) 2 bit CAN1_FA1R ; \ CAN1_FA1R_FACT2, Filter active
    : CAN1_FA1R_FACT3 ( -- x addr ) 3 bit CAN1_FA1R ; \ CAN1_FA1R_FACT3, Filter active
    : CAN1_FA1R_FACT4 ( -- x addr ) 4 bit CAN1_FA1R ; \ CAN1_FA1R_FACT4, Filter active
    : CAN1_FA1R_FACT5 ( -- x addr ) 5 bit CAN1_FA1R ; \ CAN1_FA1R_FACT5, Filter active
    : CAN1_FA1R_FACT6 ( -- x addr ) 6 bit CAN1_FA1R ; \ CAN1_FA1R_FACT6, Filter active
    : CAN1_FA1R_FACT7 ( -- x addr ) 7 bit CAN1_FA1R ; \ CAN1_FA1R_FACT7, Filter active
    : CAN1_FA1R_FACT8 ( -- x addr ) 8 bit CAN1_FA1R ; \ CAN1_FA1R_FACT8, Filter active
    : CAN1_FA1R_FACT9 ( -- x addr ) 9 bit CAN1_FA1R ; \ CAN1_FA1R_FACT9, Filter active
    : CAN1_FA1R_FACT10 ( -- x addr ) 10 bit CAN1_FA1R ; \ CAN1_FA1R_FACT10, Filter active
    : CAN1_FA1R_FACT11 ( -- x addr ) 11 bit CAN1_FA1R ; \ CAN1_FA1R_FACT11, Filter active
    : CAN1_FA1R_FACT12 ( -- x addr ) 12 bit CAN1_FA1R ; \ CAN1_FA1R_FACT12, Filter active
    : CAN1_FA1R_FACT13 ( -- x addr ) 13 bit CAN1_FA1R ; \ CAN1_FA1R_FACT13, Filter active
    : CAN1_FA1R_FACT14 ( -- x addr ) 14 bit CAN1_FA1R ; \ CAN1_FA1R_FACT14, Filter active
    : CAN1_FA1R_FACT15 ( -- x addr ) 15 bit CAN1_FA1R ; \ CAN1_FA1R_FACT15, Filter active
    : CAN1_FA1R_FACT16 ( -- x addr ) 16 bit CAN1_FA1R ; \ CAN1_FA1R_FACT16, Filter active
    : CAN1_FA1R_FACT17 ( -- x addr ) 17 bit CAN1_FA1R ; \ CAN1_FA1R_FACT17, Filter active
    : CAN1_FA1R_FACT18 ( -- x addr ) 18 bit CAN1_FA1R ; \ CAN1_FA1R_FACT18, Filter active
    : CAN1_FA1R_FACT19 ( -- x addr ) 19 bit CAN1_FA1R ; \ CAN1_FA1R_FACT19, Filter active
    : CAN1_FA1R_FACT20 ( -- x addr ) 20 bit CAN1_FA1R ; \ CAN1_FA1R_FACT20, Filter active
    : CAN1_FA1R_FACT21 ( -- x addr ) 21 bit CAN1_FA1R ; \ CAN1_FA1R_FACT21, Filter active
    : CAN1_FA1R_FACT22 ( -- x addr ) 22 bit CAN1_FA1R ; \ CAN1_FA1R_FACT22, Filter active
    : CAN1_FA1R_FACT23 ( -- x addr ) 23 bit CAN1_FA1R ; \ CAN1_FA1R_FACT23, Filter active
    : CAN1_FA1R_FACT24 ( -- x addr ) 24 bit CAN1_FA1R ; \ CAN1_FA1R_FACT24, Filter active
    : CAN1_FA1R_FACT25 ( -- x addr ) 25 bit CAN1_FA1R ; \ CAN1_FA1R_FACT25, Filter active
    : CAN1_FA1R_FACT26 ( -- x addr ) 26 bit CAN1_FA1R ; \ CAN1_FA1R_FACT26, Filter active
    : CAN1_FA1R_FACT27 ( -- x addr ) 27 bit CAN1_FA1R ; \ CAN1_FA1R_FACT27, Filter active
  [then]

  [if]
    \ CAN1_F0R1 (read-write) Reset:0x00000000
    : CAN1_F0R1_FB0 ( -- x addr ) 0 bit CAN1_F0R1 ; \ CAN1_F0R1_FB0, Filter bits
    : CAN1_F0R1_FB1 ( -- x addr ) 1 bit CAN1_F0R1 ; \ CAN1_F0R1_FB1, Filter bits
    : CAN1_F0R1_FB2 ( -- x addr ) 2 bit CAN1_F0R1 ; \ CAN1_F0R1_FB2, Filter bits
    : CAN1_F0R1_FB3 ( -- x addr ) 3 bit CAN1_F0R1 ; \ CAN1_F0R1_FB3, Filter bits
    : CAN1_F0R1_FB4 ( -- x addr ) 4 bit CAN1_F0R1 ; \ CAN1_F0R1_FB4, Filter bits
    : CAN1_F0R1_FB5 ( -- x addr ) 5 bit CAN1_F0R1 ; \ CAN1_F0R1_FB5, Filter bits
    : CAN1_F0R1_FB6 ( -- x addr ) 6 bit CAN1_F0R1 ; \ CAN1_F0R1_FB6, Filter bits
    : CAN1_F0R1_FB7 ( -- x addr ) 7 bit CAN1_F0R1 ; \ CAN1_F0R1_FB7, Filter bits
    : CAN1_F0R1_FB8 ( -- x addr ) 8 bit CAN1_F0R1 ; \ CAN1_F0R1_FB8, Filter bits
    : CAN1_F0R1_FB9 ( -- x addr ) 9 bit CAN1_F0R1 ; \ CAN1_F0R1_FB9, Filter bits
    : CAN1_F0R1_FB10 ( -- x addr ) 10 bit CAN1_F0R1 ; \ CAN1_F0R1_FB10, Filter bits
    : CAN1_F0R1_FB11 ( -- x addr ) 11 bit CAN1_F0R1 ; \ CAN1_F0R1_FB11, Filter bits
    : CAN1_F0R1_FB12 ( -- x addr ) 12 bit CAN1_F0R1 ; \ CAN1_F0R1_FB12, Filter bits
    : CAN1_F0R1_FB13 ( -- x addr ) 13 bit CAN1_F0R1 ; \ CAN1_F0R1_FB13, Filter bits
    : CAN1_F0R1_FB14 ( -- x addr ) 14 bit CAN1_F0R1 ; \ CAN1_F0R1_FB14, Filter bits
    : CAN1_F0R1_FB15 ( -- x addr ) 15 bit CAN1_F0R1 ; \ CAN1_F0R1_FB15, Filter bits
    : CAN1_F0R1_FB16 ( -- x addr ) 16 bit CAN1_F0R1 ; \ CAN1_F0R1_FB16, Filter bits
    : CAN1_F0R1_FB17 ( -- x addr ) 17 bit CAN1_F0R1 ; \ CAN1_F0R1_FB17, Filter bits
    : CAN1_F0R1_FB18 ( -- x addr ) 18 bit CAN1_F0R1 ; \ CAN1_F0R1_FB18, Filter bits
    : CAN1_F0R1_FB19 ( -- x addr ) 19 bit CAN1_F0R1 ; \ CAN1_F0R1_FB19, Filter bits
    : CAN1_F0R1_FB20 ( -- x addr ) 20 bit CAN1_F0R1 ; \ CAN1_F0R1_FB20, Filter bits
    : CAN1_F0R1_FB21 ( -- x addr ) 21 bit CAN1_F0R1 ; \ CAN1_F0R1_FB21, Filter bits
    : CAN1_F0R1_FB22 ( -- x addr ) 22 bit CAN1_F0R1 ; \ CAN1_F0R1_FB22, Filter bits
    : CAN1_F0R1_FB23 ( -- x addr ) 23 bit CAN1_F0R1 ; \ CAN1_F0R1_FB23, Filter bits
    : CAN1_F0R1_FB24 ( -- x addr ) 24 bit CAN1_F0R1 ; \ CAN1_F0R1_FB24, Filter bits
    : CAN1_F0R1_FB25 ( -- x addr ) 25 bit CAN1_F0R1 ; \ CAN1_F0R1_FB25, Filter bits
    : CAN1_F0R1_FB26 ( -- x addr ) 26 bit CAN1_F0R1 ; \ CAN1_F0R1_FB26, Filter bits
    : CAN1_F0R1_FB27 ( -- x addr ) 27 bit CAN1_F0R1 ; \ CAN1_F0R1_FB27, Filter bits
    : CAN1_F0R1_FB28 ( -- x addr ) 28 bit CAN1_F0R1 ; \ CAN1_F0R1_FB28, Filter bits
    : CAN1_F0R1_FB29 ( -- x addr ) 29 bit CAN1_F0R1 ; \ CAN1_F0R1_FB29, Filter bits
    : CAN1_F0R1_FB30 ( -- x addr ) 30 bit CAN1_F0R1 ; \ CAN1_F0R1_FB30, Filter bits
    : CAN1_F0R1_FB31 ( -- x addr ) 31 bit CAN1_F0R1 ; \ CAN1_F0R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F0R2 (read-write) Reset:0x00000000
    : CAN1_F0R2_FB0 ( -- x addr ) 0 bit CAN1_F0R2 ; \ CAN1_F0R2_FB0, Filter bits
    : CAN1_F0R2_FB1 ( -- x addr ) 1 bit CAN1_F0R2 ; \ CAN1_F0R2_FB1, Filter bits
    : CAN1_F0R2_FB2 ( -- x addr ) 2 bit CAN1_F0R2 ; \ CAN1_F0R2_FB2, Filter bits
    : CAN1_F0R2_FB3 ( -- x addr ) 3 bit CAN1_F0R2 ; \ CAN1_F0R2_FB3, Filter bits
    : CAN1_F0R2_FB4 ( -- x addr ) 4 bit CAN1_F0R2 ; \ CAN1_F0R2_FB4, Filter bits
    : CAN1_F0R2_FB5 ( -- x addr ) 5 bit CAN1_F0R2 ; \ CAN1_F0R2_FB5, Filter bits
    : CAN1_F0R2_FB6 ( -- x addr ) 6 bit CAN1_F0R2 ; \ CAN1_F0R2_FB6, Filter bits
    : CAN1_F0R2_FB7 ( -- x addr ) 7 bit CAN1_F0R2 ; \ CAN1_F0R2_FB7, Filter bits
    : CAN1_F0R2_FB8 ( -- x addr ) 8 bit CAN1_F0R2 ; \ CAN1_F0R2_FB8, Filter bits
    : CAN1_F0R2_FB9 ( -- x addr ) 9 bit CAN1_F0R2 ; \ CAN1_F0R2_FB9, Filter bits
    : CAN1_F0R2_FB10 ( -- x addr ) 10 bit CAN1_F0R2 ; \ CAN1_F0R2_FB10, Filter bits
    : CAN1_F0R2_FB11 ( -- x addr ) 11 bit CAN1_F0R2 ; \ CAN1_F0R2_FB11, Filter bits
    : CAN1_F0R2_FB12 ( -- x addr ) 12 bit CAN1_F0R2 ; \ CAN1_F0R2_FB12, Filter bits
    : CAN1_F0R2_FB13 ( -- x addr ) 13 bit CAN1_F0R2 ; \ CAN1_F0R2_FB13, Filter bits
    : CAN1_F0R2_FB14 ( -- x addr ) 14 bit CAN1_F0R2 ; \ CAN1_F0R2_FB14, Filter bits
    : CAN1_F0R2_FB15 ( -- x addr ) 15 bit CAN1_F0R2 ; \ CAN1_F0R2_FB15, Filter bits
    : CAN1_F0R2_FB16 ( -- x addr ) 16 bit CAN1_F0R2 ; \ CAN1_F0R2_FB16, Filter bits
    : CAN1_F0R2_FB17 ( -- x addr ) 17 bit CAN1_F0R2 ; \ CAN1_F0R2_FB17, Filter bits
    : CAN1_F0R2_FB18 ( -- x addr ) 18 bit CAN1_F0R2 ; \ CAN1_F0R2_FB18, Filter bits
    : CAN1_F0R2_FB19 ( -- x addr ) 19 bit CAN1_F0R2 ; \ CAN1_F0R2_FB19, Filter bits
    : CAN1_F0R2_FB20 ( -- x addr ) 20 bit CAN1_F0R2 ; \ CAN1_F0R2_FB20, Filter bits
    : CAN1_F0R2_FB21 ( -- x addr ) 21 bit CAN1_F0R2 ; \ CAN1_F0R2_FB21, Filter bits
    : CAN1_F0R2_FB22 ( -- x addr ) 22 bit CAN1_F0R2 ; \ CAN1_F0R2_FB22, Filter bits
    : CAN1_F0R2_FB23 ( -- x addr ) 23 bit CAN1_F0R2 ; \ CAN1_F0R2_FB23, Filter bits
    : CAN1_F0R2_FB24 ( -- x addr ) 24 bit CAN1_F0R2 ; \ CAN1_F0R2_FB24, Filter bits
    : CAN1_F0R2_FB25 ( -- x addr ) 25 bit CAN1_F0R2 ; \ CAN1_F0R2_FB25, Filter bits
    : CAN1_F0R2_FB26 ( -- x addr ) 26 bit CAN1_F0R2 ; \ CAN1_F0R2_FB26, Filter bits
    : CAN1_F0R2_FB27 ( -- x addr ) 27 bit CAN1_F0R2 ; \ CAN1_F0R2_FB27, Filter bits
    : CAN1_F0R2_FB28 ( -- x addr ) 28 bit CAN1_F0R2 ; \ CAN1_F0R2_FB28, Filter bits
    : CAN1_F0R2_FB29 ( -- x addr ) 29 bit CAN1_F0R2 ; \ CAN1_F0R2_FB29, Filter bits
    : CAN1_F0R2_FB30 ( -- x addr ) 30 bit CAN1_F0R2 ; \ CAN1_F0R2_FB30, Filter bits
    : CAN1_F0R2_FB31 ( -- x addr ) 31 bit CAN1_F0R2 ; \ CAN1_F0R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F1R1 (read-write) Reset:0x00000000
    : CAN1_F1R1_FB0 ( -- x addr ) 0 bit CAN1_F1R1 ; \ CAN1_F1R1_FB0, Filter bits
    : CAN1_F1R1_FB1 ( -- x addr ) 1 bit CAN1_F1R1 ; \ CAN1_F1R1_FB1, Filter bits
    : CAN1_F1R1_FB2 ( -- x addr ) 2 bit CAN1_F1R1 ; \ CAN1_F1R1_FB2, Filter bits
    : CAN1_F1R1_FB3 ( -- x addr ) 3 bit CAN1_F1R1 ; \ CAN1_F1R1_FB3, Filter bits
    : CAN1_F1R1_FB4 ( -- x addr ) 4 bit CAN1_F1R1 ; \ CAN1_F1R1_FB4, Filter bits
    : CAN1_F1R1_FB5 ( -- x addr ) 5 bit CAN1_F1R1 ; \ CAN1_F1R1_FB5, Filter bits
    : CAN1_F1R1_FB6 ( -- x addr ) 6 bit CAN1_F1R1 ; \ CAN1_F1R1_FB6, Filter bits
    : CAN1_F1R1_FB7 ( -- x addr ) 7 bit CAN1_F1R1 ; \ CAN1_F1R1_FB7, Filter bits
    : CAN1_F1R1_FB8 ( -- x addr ) 8 bit CAN1_F1R1 ; \ CAN1_F1R1_FB8, Filter bits
    : CAN1_F1R1_FB9 ( -- x addr ) 9 bit CAN1_F1R1 ; \ CAN1_F1R1_FB9, Filter bits
    : CAN1_F1R1_FB10 ( -- x addr ) 10 bit CAN1_F1R1 ; \ CAN1_F1R1_FB10, Filter bits
    : CAN1_F1R1_FB11 ( -- x addr ) 11 bit CAN1_F1R1 ; \ CAN1_F1R1_FB11, Filter bits
    : CAN1_F1R1_FB12 ( -- x addr ) 12 bit CAN1_F1R1 ; \ CAN1_F1R1_FB12, Filter bits
    : CAN1_F1R1_FB13 ( -- x addr ) 13 bit CAN1_F1R1 ; \ CAN1_F1R1_FB13, Filter bits
    : CAN1_F1R1_FB14 ( -- x addr ) 14 bit CAN1_F1R1 ; \ CAN1_F1R1_FB14, Filter bits
    : CAN1_F1R1_FB15 ( -- x addr ) 15 bit CAN1_F1R1 ; \ CAN1_F1R1_FB15, Filter bits
    : CAN1_F1R1_FB16 ( -- x addr ) 16 bit CAN1_F1R1 ; \ CAN1_F1R1_FB16, Filter bits
    : CAN1_F1R1_FB17 ( -- x addr ) 17 bit CAN1_F1R1 ; \ CAN1_F1R1_FB17, Filter bits
    : CAN1_F1R1_FB18 ( -- x addr ) 18 bit CAN1_F1R1 ; \ CAN1_F1R1_FB18, Filter bits
    : CAN1_F1R1_FB19 ( -- x addr ) 19 bit CAN1_F1R1 ; \ CAN1_F1R1_FB19, Filter bits
    : CAN1_F1R1_FB20 ( -- x addr ) 20 bit CAN1_F1R1 ; \ CAN1_F1R1_FB20, Filter bits
    : CAN1_F1R1_FB21 ( -- x addr ) 21 bit CAN1_F1R1 ; \ CAN1_F1R1_FB21, Filter bits
    : CAN1_F1R1_FB22 ( -- x addr ) 22 bit CAN1_F1R1 ; \ CAN1_F1R1_FB22, Filter bits
    : CAN1_F1R1_FB23 ( -- x addr ) 23 bit CAN1_F1R1 ; \ CAN1_F1R1_FB23, Filter bits
    : CAN1_F1R1_FB24 ( -- x addr ) 24 bit CAN1_F1R1 ; \ CAN1_F1R1_FB24, Filter bits
    : CAN1_F1R1_FB25 ( -- x addr ) 25 bit CAN1_F1R1 ; \ CAN1_F1R1_FB25, Filter bits
    : CAN1_F1R1_FB26 ( -- x addr ) 26 bit CAN1_F1R1 ; \ CAN1_F1R1_FB26, Filter bits
    : CAN1_F1R1_FB27 ( -- x addr ) 27 bit CAN1_F1R1 ; \ CAN1_F1R1_FB27, Filter bits
    : CAN1_F1R1_FB28 ( -- x addr ) 28 bit CAN1_F1R1 ; \ CAN1_F1R1_FB28, Filter bits
    : CAN1_F1R1_FB29 ( -- x addr ) 29 bit CAN1_F1R1 ; \ CAN1_F1R1_FB29, Filter bits
    : CAN1_F1R1_FB30 ( -- x addr ) 30 bit CAN1_F1R1 ; \ CAN1_F1R1_FB30, Filter bits
    : CAN1_F1R1_FB31 ( -- x addr ) 31 bit CAN1_F1R1 ; \ CAN1_F1R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F1R2 (read-write) Reset:0x00000000
    : CAN1_F1R2_FB0 ( -- x addr ) 0 bit CAN1_F1R2 ; \ CAN1_F1R2_FB0, Filter bits
    : CAN1_F1R2_FB1 ( -- x addr ) 1 bit CAN1_F1R2 ; \ CAN1_F1R2_FB1, Filter bits
    : CAN1_F1R2_FB2 ( -- x addr ) 2 bit CAN1_F1R2 ; \ CAN1_F1R2_FB2, Filter bits
    : CAN1_F1R2_FB3 ( -- x addr ) 3 bit CAN1_F1R2 ; \ CAN1_F1R2_FB3, Filter bits
    : CAN1_F1R2_FB4 ( -- x addr ) 4 bit CAN1_F1R2 ; \ CAN1_F1R2_FB4, Filter bits
    : CAN1_F1R2_FB5 ( -- x addr ) 5 bit CAN1_F1R2 ; \ CAN1_F1R2_FB5, Filter bits
    : CAN1_F1R2_FB6 ( -- x addr ) 6 bit CAN1_F1R2 ; \ CAN1_F1R2_FB6, Filter bits
    : CAN1_F1R2_FB7 ( -- x addr ) 7 bit CAN1_F1R2 ; \ CAN1_F1R2_FB7, Filter bits
    : CAN1_F1R2_FB8 ( -- x addr ) 8 bit CAN1_F1R2 ; \ CAN1_F1R2_FB8, Filter bits
    : CAN1_F1R2_FB9 ( -- x addr ) 9 bit CAN1_F1R2 ; \ CAN1_F1R2_FB9, Filter bits
    : CAN1_F1R2_FB10 ( -- x addr ) 10 bit CAN1_F1R2 ; \ CAN1_F1R2_FB10, Filter bits
    : CAN1_F1R2_FB11 ( -- x addr ) 11 bit CAN1_F1R2 ; \ CAN1_F1R2_FB11, Filter bits
    : CAN1_F1R2_FB12 ( -- x addr ) 12 bit CAN1_F1R2 ; \ CAN1_F1R2_FB12, Filter bits
    : CAN1_F1R2_FB13 ( -- x addr ) 13 bit CAN1_F1R2 ; \ CAN1_F1R2_FB13, Filter bits
    : CAN1_F1R2_FB14 ( -- x addr ) 14 bit CAN1_F1R2 ; \ CAN1_F1R2_FB14, Filter bits
    : CAN1_F1R2_FB15 ( -- x addr ) 15 bit CAN1_F1R2 ; \ CAN1_F1R2_FB15, Filter bits
    : CAN1_F1R2_FB16 ( -- x addr ) 16 bit CAN1_F1R2 ; \ CAN1_F1R2_FB16, Filter bits
    : CAN1_F1R2_FB17 ( -- x addr ) 17 bit CAN1_F1R2 ; \ CAN1_F1R2_FB17, Filter bits
    : CAN1_F1R2_FB18 ( -- x addr ) 18 bit CAN1_F1R2 ; \ CAN1_F1R2_FB18, Filter bits
    : CAN1_F1R2_FB19 ( -- x addr ) 19 bit CAN1_F1R2 ; \ CAN1_F1R2_FB19, Filter bits
    : CAN1_F1R2_FB20 ( -- x addr ) 20 bit CAN1_F1R2 ; \ CAN1_F1R2_FB20, Filter bits
    : CAN1_F1R2_FB21 ( -- x addr ) 21 bit CAN1_F1R2 ; \ CAN1_F1R2_FB21, Filter bits
    : CAN1_F1R2_FB22 ( -- x addr ) 22 bit CAN1_F1R2 ; \ CAN1_F1R2_FB22, Filter bits
    : CAN1_F1R2_FB23 ( -- x addr ) 23 bit CAN1_F1R2 ; \ CAN1_F1R2_FB23, Filter bits
    : CAN1_F1R2_FB24 ( -- x addr ) 24 bit CAN1_F1R2 ; \ CAN1_F1R2_FB24, Filter bits
    : CAN1_F1R2_FB25 ( -- x addr ) 25 bit CAN1_F1R2 ; \ CAN1_F1R2_FB25, Filter bits
    : CAN1_F1R2_FB26 ( -- x addr ) 26 bit CAN1_F1R2 ; \ CAN1_F1R2_FB26, Filter bits
    : CAN1_F1R2_FB27 ( -- x addr ) 27 bit CAN1_F1R2 ; \ CAN1_F1R2_FB27, Filter bits
    : CAN1_F1R2_FB28 ( -- x addr ) 28 bit CAN1_F1R2 ; \ CAN1_F1R2_FB28, Filter bits
    : CAN1_F1R2_FB29 ( -- x addr ) 29 bit CAN1_F1R2 ; \ CAN1_F1R2_FB29, Filter bits
    : CAN1_F1R2_FB30 ( -- x addr ) 30 bit CAN1_F1R2 ; \ CAN1_F1R2_FB30, Filter bits
    : CAN1_F1R2_FB31 ( -- x addr ) 31 bit CAN1_F1R2 ; \ CAN1_F1R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F2R1 (read-write) Reset:0x00000000
    : CAN1_F2R1_FB0 ( -- x addr ) 0 bit CAN1_F2R1 ; \ CAN1_F2R1_FB0, Filter bits
    : CAN1_F2R1_FB1 ( -- x addr ) 1 bit CAN1_F2R1 ; \ CAN1_F2R1_FB1, Filter bits
    : CAN1_F2R1_FB2 ( -- x addr ) 2 bit CAN1_F2R1 ; \ CAN1_F2R1_FB2, Filter bits
    : CAN1_F2R1_FB3 ( -- x addr ) 3 bit CAN1_F2R1 ; \ CAN1_F2R1_FB3, Filter bits
    : CAN1_F2R1_FB4 ( -- x addr ) 4 bit CAN1_F2R1 ; \ CAN1_F2R1_FB4, Filter bits
    : CAN1_F2R1_FB5 ( -- x addr ) 5 bit CAN1_F2R1 ; \ CAN1_F2R1_FB5, Filter bits
    : CAN1_F2R1_FB6 ( -- x addr ) 6 bit CAN1_F2R1 ; \ CAN1_F2R1_FB6, Filter bits
    : CAN1_F2R1_FB7 ( -- x addr ) 7 bit CAN1_F2R1 ; \ CAN1_F2R1_FB7, Filter bits
    : CAN1_F2R1_FB8 ( -- x addr ) 8 bit CAN1_F2R1 ; \ CAN1_F2R1_FB8, Filter bits
    : CAN1_F2R1_FB9 ( -- x addr ) 9 bit CAN1_F2R1 ; \ CAN1_F2R1_FB9, Filter bits
    : CAN1_F2R1_FB10 ( -- x addr ) 10 bit CAN1_F2R1 ; \ CAN1_F2R1_FB10, Filter bits
    : CAN1_F2R1_FB11 ( -- x addr ) 11 bit CAN1_F2R1 ; \ CAN1_F2R1_FB11, Filter bits
    : CAN1_F2R1_FB12 ( -- x addr ) 12 bit CAN1_F2R1 ; \ CAN1_F2R1_FB12, Filter bits
    : CAN1_F2R1_FB13 ( -- x addr ) 13 bit CAN1_F2R1 ; \ CAN1_F2R1_FB13, Filter bits
    : CAN1_F2R1_FB14 ( -- x addr ) 14 bit CAN1_F2R1 ; \ CAN1_F2R1_FB14, Filter bits
    : CAN1_F2R1_FB15 ( -- x addr ) 15 bit CAN1_F2R1 ; \ CAN1_F2R1_FB15, Filter bits
    : CAN1_F2R1_FB16 ( -- x addr ) 16 bit CAN1_F2R1 ; \ CAN1_F2R1_FB16, Filter bits
    : CAN1_F2R1_FB17 ( -- x addr ) 17 bit CAN1_F2R1 ; \ CAN1_F2R1_FB17, Filter bits
    : CAN1_F2R1_FB18 ( -- x addr ) 18 bit CAN1_F2R1 ; \ CAN1_F2R1_FB18, Filter bits
    : CAN1_F2R1_FB19 ( -- x addr ) 19 bit CAN1_F2R1 ; \ CAN1_F2R1_FB19, Filter bits
    : CAN1_F2R1_FB20 ( -- x addr ) 20 bit CAN1_F2R1 ; \ CAN1_F2R1_FB20, Filter bits
    : CAN1_F2R1_FB21 ( -- x addr ) 21 bit CAN1_F2R1 ; \ CAN1_F2R1_FB21, Filter bits
    : CAN1_F2R1_FB22 ( -- x addr ) 22 bit CAN1_F2R1 ; \ CAN1_F2R1_FB22, Filter bits
    : CAN1_F2R1_FB23 ( -- x addr ) 23 bit CAN1_F2R1 ; \ CAN1_F2R1_FB23, Filter bits
    : CAN1_F2R1_FB24 ( -- x addr ) 24 bit CAN1_F2R1 ; \ CAN1_F2R1_FB24, Filter bits
    : CAN1_F2R1_FB25 ( -- x addr ) 25 bit CAN1_F2R1 ; \ CAN1_F2R1_FB25, Filter bits
    : CAN1_F2R1_FB26 ( -- x addr ) 26 bit CAN1_F2R1 ; \ CAN1_F2R1_FB26, Filter bits
    : CAN1_F2R1_FB27 ( -- x addr ) 27 bit CAN1_F2R1 ; \ CAN1_F2R1_FB27, Filter bits
    : CAN1_F2R1_FB28 ( -- x addr ) 28 bit CAN1_F2R1 ; \ CAN1_F2R1_FB28, Filter bits
    : CAN1_F2R1_FB29 ( -- x addr ) 29 bit CAN1_F2R1 ; \ CAN1_F2R1_FB29, Filter bits
    : CAN1_F2R1_FB30 ( -- x addr ) 30 bit CAN1_F2R1 ; \ CAN1_F2R1_FB30, Filter bits
    : CAN1_F2R1_FB31 ( -- x addr ) 31 bit CAN1_F2R1 ; \ CAN1_F2R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F2R2 (read-write) Reset:0x00000000
    : CAN1_F2R2_FB0 ( -- x addr ) 0 bit CAN1_F2R2 ; \ CAN1_F2R2_FB0, Filter bits
    : CAN1_F2R2_FB1 ( -- x addr ) 1 bit CAN1_F2R2 ; \ CAN1_F2R2_FB1, Filter bits
    : CAN1_F2R2_FB2 ( -- x addr ) 2 bit CAN1_F2R2 ; \ CAN1_F2R2_FB2, Filter bits
    : CAN1_F2R2_FB3 ( -- x addr ) 3 bit CAN1_F2R2 ; \ CAN1_F2R2_FB3, Filter bits
    : CAN1_F2R2_FB4 ( -- x addr ) 4 bit CAN1_F2R2 ; \ CAN1_F2R2_FB4, Filter bits
    : CAN1_F2R2_FB5 ( -- x addr ) 5 bit CAN1_F2R2 ; \ CAN1_F2R2_FB5, Filter bits
    : CAN1_F2R2_FB6 ( -- x addr ) 6 bit CAN1_F2R2 ; \ CAN1_F2R2_FB6, Filter bits
    : CAN1_F2R2_FB7 ( -- x addr ) 7 bit CAN1_F2R2 ; \ CAN1_F2R2_FB7, Filter bits
    : CAN1_F2R2_FB8 ( -- x addr ) 8 bit CAN1_F2R2 ; \ CAN1_F2R2_FB8, Filter bits
    : CAN1_F2R2_FB9 ( -- x addr ) 9 bit CAN1_F2R2 ; \ CAN1_F2R2_FB9, Filter bits
    : CAN1_F2R2_FB10 ( -- x addr ) 10 bit CAN1_F2R2 ; \ CAN1_F2R2_FB10, Filter bits
    : CAN1_F2R2_FB11 ( -- x addr ) 11 bit CAN1_F2R2 ; \ CAN1_F2R2_FB11, Filter bits
    : CAN1_F2R2_FB12 ( -- x addr ) 12 bit CAN1_F2R2 ; \ CAN1_F2R2_FB12, Filter bits
    : CAN1_F2R2_FB13 ( -- x addr ) 13 bit CAN1_F2R2 ; \ CAN1_F2R2_FB13, Filter bits
    : CAN1_F2R2_FB14 ( -- x addr ) 14 bit CAN1_F2R2 ; \ CAN1_F2R2_FB14, Filter bits
    : CAN1_F2R2_FB15 ( -- x addr ) 15 bit CAN1_F2R2 ; \ CAN1_F2R2_FB15, Filter bits
    : CAN1_F2R2_FB16 ( -- x addr ) 16 bit CAN1_F2R2 ; \ CAN1_F2R2_FB16, Filter bits
    : CAN1_F2R2_FB17 ( -- x addr ) 17 bit CAN1_F2R2 ; \ CAN1_F2R2_FB17, Filter bits
    : CAN1_F2R2_FB18 ( -- x addr ) 18 bit CAN1_F2R2 ; \ CAN1_F2R2_FB18, Filter bits
    : CAN1_F2R2_FB19 ( -- x addr ) 19 bit CAN1_F2R2 ; \ CAN1_F2R2_FB19, Filter bits
    : CAN1_F2R2_FB20 ( -- x addr ) 20 bit CAN1_F2R2 ; \ CAN1_F2R2_FB20, Filter bits
    : CAN1_F2R2_FB21 ( -- x addr ) 21 bit CAN1_F2R2 ; \ CAN1_F2R2_FB21, Filter bits
    : CAN1_F2R2_FB22 ( -- x addr ) 22 bit CAN1_F2R2 ; \ CAN1_F2R2_FB22, Filter bits
    : CAN1_F2R2_FB23 ( -- x addr ) 23 bit CAN1_F2R2 ; \ CAN1_F2R2_FB23, Filter bits
    : CAN1_F2R2_FB24 ( -- x addr ) 24 bit CAN1_F2R2 ; \ CAN1_F2R2_FB24, Filter bits
    : CAN1_F2R2_FB25 ( -- x addr ) 25 bit CAN1_F2R2 ; \ CAN1_F2R2_FB25, Filter bits
    : CAN1_F2R2_FB26 ( -- x addr ) 26 bit CAN1_F2R2 ; \ CAN1_F2R2_FB26, Filter bits
    : CAN1_F2R2_FB27 ( -- x addr ) 27 bit CAN1_F2R2 ; \ CAN1_F2R2_FB27, Filter bits
    : CAN1_F2R2_FB28 ( -- x addr ) 28 bit CAN1_F2R2 ; \ CAN1_F2R2_FB28, Filter bits
    : CAN1_F2R2_FB29 ( -- x addr ) 29 bit CAN1_F2R2 ; \ CAN1_F2R2_FB29, Filter bits
    : CAN1_F2R2_FB30 ( -- x addr ) 30 bit CAN1_F2R2 ; \ CAN1_F2R2_FB30, Filter bits
    : CAN1_F2R2_FB31 ( -- x addr ) 31 bit CAN1_F2R2 ; \ CAN1_F2R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F3R1 (read-write) Reset:0x00000000
    : CAN1_F3R1_FB0 ( -- x addr ) 0 bit CAN1_F3R1 ; \ CAN1_F3R1_FB0, Filter bits
    : CAN1_F3R1_FB1 ( -- x addr ) 1 bit CAN1_F3R1 ; \ CAN1_F3R1_FB1, Filter bits
    : CAN1_F3R1_FB2 ( -- x addr ) 2 bit CAN1_F3R1 ; \ CAN1_F3R1_FB2, Filter bits
    : CAN1_F3R1_FB3 ( -- x addr ) 3 bit CAN1_F3R1 ; \ CAN1_F3R1_FB3, Filter bits
    : CAN1_F3R1_FB4 ( -- x addr ) 4 bit CAN1_F3R1 ; \ CAN1_F3R1_FB4, Filter bits
    : CAN1_F3R1_FB5 ( -- x addr ) 5 bit CAN1_F3R1 ; \ CAN1_F3R1_FB5, Filter bits
    : CAN1_F3R1_FB6 ( -- x addr ) 6 bit CAN1_F3R1 ; \ CAN1_F3R1_FB6, Filter bits
    : CAN1_F3R1_FB7 ( -- x addr ) 7 bit CAN1_F3R1 ; \ CAN1_F3R1_FB7, Filter bits
    : CAN1_F3R1_FB8 ( -- x addr ) 8 bit CAN1_F3R1 ; \ CAN1_F3R1_FB8, Filter bits
    : CAN1_F3R1_FB9 ( -- x addr ) 9 bit CAN1_F3R1 ; \ CAN1_F3R1_FB9, Filter bits
    : CAN1_F3R1_FB10 ( -- x addr ) 10 bit CAN1_F3R1 ; \ CAN1_F3R1_FB10, Filter bits
    : CAN1_F3R1_FB11 ( -- x addr ) 11 bit CAN1_F3R1 ; \ CAN1_F3R1_FB11, Filter bits
    : CAN1_F3R1_FB12 ( -- x addr ) 12 bit CAN1_F3R1 ; \ CAN1_F3R1_FB12, Filter bits
    : CAN1_F3R1_FB13 ( -- x addr ) 13 bit CAN1_F3R1 ; \ CAN1_F3R1_FB13, Filter bits
    : CAN1_F3R1_FB14 ( -- x addr ) 14 bit CAN1_F3R1 ; \ CAN1_F3R1_FB14, Filter bits
    : CAN1_F3R1_FB15 ( -- x addr ) 15 bit CAN1_F3R1 ; \ CAN1_F3R1_FB15, Filter bits
    : CAN1_F3R1_FB16 ( -- x addr ) 16 bit CAN1_F3R1 ; \ CAN1_F3R1_FB16, Filter bits
    : CAN1_F3R1_FB17 ( -- x addr ) 17 bit CAN1_F3R1 ; \ CAN1_F3R1_FB17, Filter bits
    : CAN1_F3R1_FB18 ( -- x addr ) 18 bit CAN1_F3R1 ; \ CAN1_F3R1_FB18, Filter bits
    : CAN1_F3R1_FB19 ( -- x addr ) 19 bit CAN1_F3R1 ; \ CAN1_F3R1_FB19, Filter bits
    : CAN1_F3R1_FB20 ( -- x addr ) 20 bit CAN1_F3R1 ; \ CAN1_F3R1_FB20, Filter bits
    : CAN1_F3R1_FB21 ( -- x addr ) 21 bit CAN1_F3R1 ; \ CAN1_F3R1_FB21, Filter bits
    : CAN1_F3R1_FB22 ( -- x addr ) 22 bit CAN1_F3R1 ; \ CAN1_F3R1_FB22, Filter bits
    : CAN1_F3R1_FB23 ( -- x addr ) 23 bit CAN1_F3R1 ; \ CAN1_F3R1_FB23, Filter bits
    : CAN1_F3R1_FB24 ( -- x addr ) 24 bit CAN1_F3R1 ; \ CAN1_F3R1_FB24, Filter bits
    : CAN1_F3R1_FB25 ( -- x addr ) 25 bit CAN1_F3R1 ; \ CAN1_F3R1_FB25, Filter bits
    : CAN1_F3R1_FB26 ( -- x addr ) 26 bit CAN1_F3R1 ; \ CAN1_F3R1_FB26, Filter bits
    : CAN1_F3R1_FB27 ( -- x addr ) 27 bit CAN1_F3R1 ; \ CAN1_F3R1_FB27, Filter bits
    : CAN1_F3R1_FB28 ( -- x addr ) 28 bit CAN1_F3R1 ; \ CAN1_F3R1_FB28, Filter bits
    : CAN1_F3R1_FB29 ( -- x addr ) 29 bit CAN1_F3R1 ; \ CAN1_F3R1_FB29, Filter bits
    : CAN1_F3R1_FB30 ( -- x addr ) 30 bit CAN1_F3R1 ; \ CAN1_F3R1_FB30, Filter bits
    : CAN1_F3R1_FB31 ( -- x addr ) 31 bit CAN1_F3R1 ; \ CAN1_F3R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F3R2 (read-write) Reset:0x00000000
    : CAN1_F3R2_FB0 ( -- x addr ) 0 bit CAN1_F3R2 ; \ CAN1_F3R2_FB0, Filter bits
    : CAN1_F3R2_FB1 ( -- x addr ) 1 bit CAN1_F3R2 ; \ CAN1_F3R2_FB1, Filter bits
    : CAN1_F3R2_FB2 ( -- x addr ) 2 bit CAN1_F3R2 ; \ CAN1_F3R2_FB2, Filter bits
    : CAN1_F3R2_FB3 ( -- x addr ) 3 bit CAN1_F3R2 ; \ CAN1_F3R2_FB3, Filter bits
    : CAN1_F3R2_FB4 ( -- x addr ) 4 bit CAN1_F3R2 ; \ CAN1_F3R2_FB4, Filter bits
    : CAN1_F3R2_FB5 ( -- x addr ) 5 bit CAN1_F3R2 ; \ CAN1_F3R2_FB5, Filter bits
    : CAN1_F3R2_FB6 ( -- x addr ) 6 bit CAN1_F3R2 ; \ CAN1_F3R2_FB6, Filter bits
    : CAN1_F3R2_FB7 ( -- x addr ) 7 bit CAN1_F3R2 ; \ CAN1_F3R2_FB7, Filter bits
    : CAN1_F3R2_FB8 ( -- x addr ) 8 bit CAN1_F3R2 ; \ CAN1_F3R2_FB8, Filter bits
    : CAN1_F3R2_FB9 ( -- x addr ) 9 bit CAN1_F3R2 ; \ CAN1_F3R2_FB9, Filter bits
    : CAN1_F3R2_FB10 ( -- x addr ) 10 bit CAN1_F3R2 ; \ CAN1_F3R2_FB10, Filter bits
    : CAN1_F3R2_FB11 ( -- x addr ) 11 bit CAN1_F3R2 ; \ CAN1_F3R2_FB11, Filter bits
    : CAN1_F3R2_FB12 ( -- x addr ) 12 bit CAN1_F3R2 ; \ CAN1_F3R2_FB12, Filter bits
    : CAN1_F3R2_FB13 ( -- x addr ) 13 bit CAN1_F3R2 ; \ CAN1_F3R2_FB13, Filter bits
    : CAN1_F3R2_FB14 ( -- x addr ) 14 bit CAN1_F3R2 ; \ CAN1_F3R2_FB14, Filter bits
    : CAN1_F3R2_FB15 ( -- x addr ) 15 bit CAN1_F3R2 ; \ CAN1_F3R2_FB15, Filter bits
    : CAN1_F3R2_FB16 ( -- x addr ) 16 bit CAN1_F3R2 ; \ CAN1_F3R2_FB16, Filter bits
    : CAN1_F3R2_FB17 ( -- x addr ) 17 bit CAN1_F3R2 ; \ CAN1_F3R2_FB17, Filter bits
    : CAN1_F3R2_FB18 ( -- x addr ) 18 bit CAN1_F3R2 ; \ CAN1_F3R2_FB18, Filter bits
    : CAN1_F3R2_FB19 ( -- x addr ) 19 bit CAN1_F3R2 ; \ CAN1_F3R2_FB19, Filter bits
    : CAN1_F3R2_FB20 ( -- x addr ) 20 bit CAN1_F3R2 ; \ CAN1_F3R2_FB20, Filter bits
    : CAN1_F3R2_FB21 ( -- x addr ) 21 bit CAN1_F3R2 ; \ CAN1_F3R2_FB21, Filter bits
    : CAN1_F3R2_FB22 ( -- x addr ) 22 bit CAN1_F3R2 ; \ CAN1_F3R2_FB22, Filter bits
    : CAN1_F3R2_FB23 ( -- x addr ) 23 bit CAN1_F3R2 ; \ CAN1_F3R2_FB23, Filter bits
    : CAN1_F3R2_FB24 ( -- x addr ) 24 bit CAN1_F3R2 ; \ CAN1_F3R2_FB24, Filter bits
    : CAN1_F3R2_FB25 ( -- x addr ) 25 bit CAN1_F3R2 ; \ CAN1_F3R2_FB25, Filter bits
    : CAN1_F3R2_FB26 ( -- x addr ) 26 bit CAN1_F3R2 ; \ CAN1_F3R2_FB26, Filter bits
    : CAN1_F3R2_FB27 ( -- x addr ) 27 bit CAN1_F3R2 ; \ CAN1_F3R2_FB27, Filter bits
    : CAN1_F3R2_FB28 ( -- x addr ) 28 bit CAN1_F3R2 ; \ CAN1_F3R2_FB28, Filter bits
    : CAN1_F3R2_FB29 ( -- x addr ) 29 bit CAN1_F3R2 ; \ CAN1_F3R2_FB29, Filter bits
    : CAN1_F3R2_FB30 ( -- x addr ) 30 bit CAN1_F3R2 ; \ CAN1_F3R2_FB30, Filter bits
    : CAN1_F3R2_FB31 ( -- x addr ) 31 bit CAN1_F3R2 ; \ CAN1_F3R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F4R1 (read-write) Reset:0x00000000
    : CAN1_F4R1_FB0 ( -- x addr ) 0 bit CAN1_F4R1 ; \ CAN1_F4R1_FB0, Filter bits
    : CAN1_F4R1_FB1 ( -- x addr ) 1 bit CAN1_F4R1 ; \ CAN1_F4R1_FB1, Filter bits
    : CAN1_F4R1_FB2 ( -- x addr ) 2 bit CAN1_F4R1 ; \ CAN1_F4R1_FB2, Filter bits
    : CAN1_F4R1_FB3 ( -- x addr ) 3 bit CAN1_F4R1 ; \ CAN1_F4R1_FB3, Filter bits
    : CAN1_F4R1_FB4 ( -- x addr ) 4 bit CAN1_F4R1 ; \ CAN1_F4R1_FB4, Filter bits
    : CAN1_F4R1_FB5 ( -- x addr ) 5 bit CAN1_F4R1 ; \ CAN1_F4R1_FB5, Filter bits
    : CAN1_F4R1_FB6 ( -- x addr ) 6 bit CAN1_F4R1 ; \ CAN1_F4R1_FB6, Filter bits
    : CAN1_F4R1_FB7 ( -- x addr ) 7 bit CAN1_F4R1 ; \ CAN1_F4R1_FB7, Filter bits
    : CAN1_F4R1_FB8 ( -- x addr ) 8 bit CAN1_F4R1 ; \ CAN1_F4R1_FB8, Filter bits
    : CAN1_F4R1_FB9 ( -- x addr ) 9 bit CAN1_F4R1 ; \ CAN1_F4R1_FB9, Filter bits
    : CAN1_F4R1_FB10 ( -- x addr ) 10 bit CAN1_F4R1 ; \ CAN1_F4R1_FB10, Filter bits
    : CAN1_F4R1_FB11 ( -- x addr ) 11 bit CAN1_F4R1 ; \ CAN1_F4R1_FB11, Filter bits
    : CAN1_F4R1_FB12 ( -- x addr ) 12 bit CAN1_F4R1 ; \ CAN1_F4R1_FB12, Filter bits
    : CAN1_F4R1_FB13 ( -- x addr ) 13 bit CAN1_F4R1 ; \ CAN1_F4R1_FB13, Filter bits
    : CAN1_F4R1_FB14 ( -- x addr ) 14 bit CAN1_F4R1 ; \ CAN1_F4R1_FB14, Filter bits
    : CAN1_F4R1_FB15 ( -- x addr ) 15 bit CAN1_F4R1 ; \ CAN1_F4R1_FB15, Filter bits
    : CAN1_F4R1_FB16 ( -- x addr ) 16 bit CAN1_F4R1 ; \ CAN1_F4R1_FB16, Filter bits
    : CAN1_F4R1_FB17 ( -- x addr ) 17 bit CAN1_F4R1 ; \ CAN1_F4R1_FB17, Filter bits
    : CAN1_F4R1_FB18 ( -- x addr ) 18 bit CAN1_F4R1 ; \ CAN1_F4R1_FB18, Filter bits
    : CAN1_F4R1_FB19 ( -- x addr ) 19 bit CAN1_F4R1 ; \ CAN1_F4R1_FB19, Filter bits
    : CAN1_F4R1_FB20 ( -- x addr ) 20 bit CAN1_F4R1 ; \ CAN1_F4R1_FB20, Filter bits
    : CAN1_F4R1_FB21 ( -- x addr ) 21 bit CAN1_F4R1 ; \ CAN1_F4R1_FB21, Filter bits
    : CAN1_F4R1_FB22 ( -- x addr ) 22 bit CAN1_F4R1 ; \ CAN1_F4R1_FB22, Filter bits
    : CAN1_F4R1_FB23 ( -- x addr ) 23 bit CAN1_F4R1 ; \ CAN1_F4R1_FB23, Filter bits
    : CAN1_F4R1_FB24 ( -- x addr ) 24 bit CAN1_F4R1 ; \ CAN1_F4R1_FB24, Filter bits
    : CAN1_F4R1_FB25 ( -- x addr ) 25 bit CAN1_F4R1 ; \ CAN1_F4R1_FB25, Filter bits
    : CAN1_F4R1_FB26 ( -- x addr ) 26 bit CAN1_F4R1 ; \ CAN1_F4R1_FB26, Filter bits
    : CAN1_F4R1_FB27 ( -- x addr ) 27 bit CAN1_F4R1 ; \ CAN1_F4R1_FB27, Filter bits
    : CAN1_F4R1_FB28 ( -- x addr ) 28 bit CAN1_F4R1 ; \ CAN1_F4R1_FB28, Filter bits
    : CAN1_F4R1_FB29 ( -- x addr ) 29 bit CAN1_F4R1 ; \ CAN1_F4R1_FB29, Filter bits
    : CAN1_F4R1_FB30 ( -- x addr ) 30 bit CAN1_F4R1 ; \ CAN1_F4R1_FB30, Filter bits
    : CAN1_F4R1_FB31 ( -- x addr ) 31 bit CAN1_F4R1 ; \ CAN1_F4R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F4R2 (read-write) Reset:0x00000000
    : CAN1_F4R2_FB0 ( -- x addr ) 0 bit CAN1_F4R2 ; \ CAN1_F4R2_FB0, Filter bits
    : CAN1_F4R2_FB1 ( -- x addr ) 1 bit CAN1_F4R2 ; \ CAN1_F4R2_FB1, Filter bits
    : CAN1_F4R2_FB2 ( -- x addr ) 2 bit CAN1_F4R2 ; \ CAN1_F4R2_FB2, Filter bits
    : CAN1_F4R2_FB3 ( -- x addr ) 3 bit CAN1_F4R2 ; \ CAN1_F4R2_FB3, Filter bits
    : CAN1_F4R2_FB4 ( -- x addr ) 4 bit CAN1_F4R2 ; \ CAN1_F4R2_FB4, Filter bits
    : CAN1_F4R2_FB5 ( -- x addr ) 5 bit CAN1_F4R2 ; \ CAN1_F4R2_FB5, Filter bits
    : CAN1_F4R2_FB6 ( -- x addr ) 6 bit CAN1_F4R2 ; \ CAN1_F4R2_FB6, Filter bits
    : CAN1_F4R2_FB7 ( -- x addr ) 7 bit CAN1_F4R2 ; \ CAN1_F4R2_FB7, Filter bits
    : CAN1_F4R2_FB8 ( -- x addr ) 8 bit CAN1_F4R2 ; \ CAN1_F4R2_FB8, Filter bits
    : CAN1_F4R2_FB9 ( -- x addr ) 9 bit CAN1_F4R2 ; \ CAN1_F4R2_FB9, Filter bits
    : CAN1_F4R2_FB10 ( -- x addr ) 10 bit CAN1_F4R2 ; \ CAN1_F4R2_FB10, Filter bits
    : CAN1_F4R2_FB11 ( -- x addr ) 11 bit CAN1_F4R2 ; \ CAN1_F4R2_FB11, Filter bits
    : CAN1_F4R2_FB12 ( -- x addr ) 12 bit CAN1_F4R2 ; \ CAN1_F4R2_FB12, Filter bits
    : CAN1_F4R2_FB13 ( -- x addr ) 13 bit CAN1_F4R2 ; \ CAN1_F4R2_FB13, Filter bits
    : CAN1_F4R2_FB14 ( -- x addr ) 14 bit CAN1_F4R2 ; \ CAN1_F4R2_FB14, Filter bits
    : CAN1_F4R2_FB15 ( -- x addr ) 15 bit CAN1_F4R2 ; \ CAN1_F4R2_FB15, Filter bits
    : CAN1_F4R2_FB16 ( -- x addr ) 16 bit CAN1_F4R2 ; \ CAN1_F4R2_FB16, Filter bits
    : CAN1_F4R2_FB17 ( -- x addr ) 17 bit CAN1_F4R2 ; \ CAN1_F4R2_FB17, Filter bits
    : CAN1_F4R2_FB18 ( -- x addr ) 18 bit CAN1_F4R2 ; \ CAN1_F4R2_FB18, Filter bits
    : CAN1_F4R2_FB19 ( -- x addr ) 19 bit CAN1_F4R2 ; \ CAN1_F4R2_FB19, Filter bits
    : CAN1_F4R2_FB20 ( -- x addr ) 20 bit CAN1_F4R2 ; \ CAN1_F4R2_FB20, Filter bits
    : CAN1_F4R2_FB21 ( -- x addr ) 21 bit CAN1_F4R2 ; \ CAN1_F4R2_FB21, Filter bits
    : CAN1_F4R2_FB22 ( -- x addr ) 22 bit CAN1_F4R2 ; \ CAN1_F4R2_FB22, Filter bits
    : CAN1_F4R2_FB23 ( -- x addr ) 23 bit CAN1_F4R2 ; \ CAN1_F4R2_FB23, Filter bits
    : CAN1_F4R2_FB24 ( -- x addr ) 24 bit CAN1_F4R2 ; \ CAN1_F4R2_FB24, Filter bits
    : CAN1_F4R2_FB25 ( -- x addr ) 25 bit CAN1_F4R2 ; \ CAN1_F4R2_FB25, Filter bits
    : CAN1_F4R2_FB26 ( -- x addr ) 26 bit CAN1_F4R2 ; \ CAN1_F4R2_FB26, Filter bits
    : CAN1_F4R2_FB27 ( -- x addr ) 27 bit CAN1_F4R2 ; \ CAN1_F4R2_FB27, Filter bits
    : CAN1_F4R2_FB28 ( -- x addr ) 28 bit CAN1_F4R2 ; \ CAN1_F4R2_FB28, Filter bits
    : CAN1_F4R2_FB29 ( -- x addr ) 29 bit CAN1_F4R2 ; \ CAN1_F4R2_FB29, Filter bits
    : CAN1_F4R2_FB30 ( -- x addr ) 30 bit CAN1_F4R2 ; \ CAN1_F4R2_FB30, Filter bits
    : CAN1_F4R2_FB31 ( -- x addr ) 31 bit CAN1_F4R2 ; \ CAN1_F4R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F5R1 (read-write) Reset:0x00000000
    : CAN1_F5R1_FB0 ( -- x addr ) 0 bit CAN1_F5R1 ; \ CAN1_F5R1_FB0, Filter bits
    : CAN1_F5R1_FB1 ( -- x addr ) 1 bit CAN1_F5R1 ; \ CAN1_F5R1_FB1, Filter bits
    : CAN1_F5R1_FB2 ( -- x addr ) 2 bit CAN1_F5R1 ; \ CAN1_F5R1_FB2, Filter bits
    : CAN1_F5R1_FB3 ( -- x addr ) 3 bit CAN1_F5R1 ; \ CAN1_F5R1_FB3, Filter bits
    : CAN1_F5R1_FB4 ( -- x addr ) 4 bit CAN1_F5R1 ; \ CAN1_F5R1_FB4, Filter bits
    : CAN1_F5R1_FB5 ( -- x addr ) 5 bit CAN1_F5R1 ; \ CAN1_F5R1_FB5, Filter bits
    : CAN1_F5R1_FB6 ( -- x addr ) 6 bit CAN1_F5R1 ; \ CAN1_F5R1_FB6, Filter bits
    : CAN1_F5R1_FB7 ( -- x addr ) 7 bit CAN1_F5R1 ; \ CAN1_F5R1_FB7, Filter bits
    : CAN1_F5R1_FB8 ( -- x addr ) 8 bit CAN1_F5R1 ; \ CAN1_F5R1_FB8, Filter bits
    : CAN1_F5R1_FB9 ( -- x addr ) 9 bit CAN1_F5R1 ; \ CAN1_F5R1_FB9, Filter bits
    : CAN1_F5R1_FB10 ( -- x addr ) 10 bit CAN1_F5R1 ; \ CAN1_F5R1_FB10, Filter bits
    : CAN1_F5R1_FB11 ( -- x addr ) 11 bit CAN1_F5R1 ; \ CAN1_F5R1_FB11, Filter bits
    : CAN1_F5R1_FB12 ( -- x addr ) 12 bit CAN1_F5R1 ; \ CAN1_F5R1_FB12, Filter bits
    : CAN1_F5R1_FB13 ( -- x addr ) 13 bit CAN1_F5R1 ; \ CAN1_F5R1_FB13, Filter bits
    : CAN1_F5R1_FB14 ( -- x addr ) 14 bit CAN1_F5R1 ; \ CAN1_F5R1_FB14, Filter bits
    : CAN1_F5R1_FB15 ( -- x addr ) 15 bit CAN1_F5R1 ; \ CAN1_F5R1_FB15, Filter bits
    : CAN1_F5R1_FB16 ( -- x addr ) 16 bit CAN1_F5R1 ; \ CAN1_F5R1_FB16, Filter bits
    : CAN1_F5R1_FB17 ( -- x addr ) 17 bit CAN1_F5R1 ; \ CAN1_F5R1_FB17, Filter bits
    : CAN1_F5R1_FB18 ( -- x addr ) 18 bit CAN1_F5R1 ; \ CAN1_F5R1_FB18, Filter bits
    : CAN1_F5R1_FB19 ( -- x addr ) 19 bit CAN1_F5R1 ; \ CAN1_F5R1_FB19, Filter bits
    : CAN1_F5R1_FB20 ( -- x addr ) 20 bit CAN1_F5R1 ; \ CAN1_F5R1_FB20, Filter bits
    : CAN1_F5R1_FB21 ( -- x addr ) 21 bit CAN1_F5R1 ; \ CAN1_F5R1_FB21, Filter bits
    : CAN1_F5R1_FB22 ( -- x addr ) 22 bit CAN1_F5R1 ; \ CAN1_F5R1_FB22, Filter bits
    : CAN1_F5R1_FB23 ( -- x addr ) 23 bit CAN1_F5R1 ; \ CAN1_F5R1_FB23, Filter bits
    : CAN1_F5R1_FB24 ( -- x addr ) 24 bit CAN1_F5R1 ; \ CAN1_F5R1_FB24, Filter bits
    : CAN1_F5R1_FB25 ( -- x addr ) 25 bit CAN1_F5R1 ; \ CAN1_F5R1_FB25, Filter bits
    : CAN1_F5R1_FB26 ( -- x addr ) 26 bit CAN1_F5R1 ; \ CAN1_F5R1_FB26, Filter bits
    : CAN1_F5R1_FB27 ( -- x addr ) 27 bit CAN1_F5R1 ; \ CAN1_F5R1_FB27, Filter bits
    : CAN1_F5R1_FB28 ( -- x addr ) 28 bit CAN1_F5R1 ; \ CAN1_F5R1_FB28, Filter bits
    : CAN1_F5R1_FB29 ( -- x addr ) 29 bit CAN1_F5R1 ; \ CAN1_F5R1_FB29, Filter bits
    : CAN1_F5R1_FB30 ( -- x addr ) 30 bit CAN1_F5R1 ; \ CAN1_F5R1_FB30, Filter bits
    : CAN1_F5R1_FB31 ( -- x addr ) 31 bit CAN1_F5R1 ; \ CAN1_F5R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F5R2 (read-write) Reset:0x00000000
    : CAN1_F5R2_FB0 ( -- x addr ) 0 bit CAN1_F5R2 ; \ CAN1_F5R2_FB0, Filter bits
    : CAN1_F5R2_FB1 ( -- x addr ) 1 bit CAN1_F5R2 ; \ CAN1_F5R2_FB1, Filter bits
    : CAN1_F5R2_FB2 ( -- x addr ) 2 bit CAN1_F5R2 ; \ CAN1_F5R2_FB2, Filter bits
    : CAN1_F5R2_FB3 ( -- x addr ) 3 bit CAN1_F5R2 ; \ CAN1_F5R2_FB3, Filter bits
    : CAN1_F5R2_FB4 ( -- x addr ) 4 bit CAN1_F5R2 ; \ CAN1_F5R2_FB4, Filter bits
    : CAN1_F5R2_FB5 ( -- x addr ) 5 bit CAN1_F5R2 ; \ CAN1_F5R2_FB5, Filter bits
    : CAN1_F5R2_FB6 ( -- x addr ) 6 bit CAN1_F5R2 ; \ CAN1_F5R2_FB6, Filter bits
    : CAN1_F5R2_FB7 ( -- x addr ) 7 bit CAN1_F5R2 ; \ CAN1_F5R2_FB7, Filter bits
    : CAN1_F5R2_FB8 ( -- x addr ) 8 bit CAN1_F5R2 ; \ CAN1_F5R2_FB8, Filter bits
    : CAN1_F5R2_FB9 ( -- x addr ) 9 bit CAN1_F5R2 ; \ CAN1_F5R2_FB9, Filter bits
    : CAN1_F5R2_FB10 ( -- x addr ) 10 bit CAN1_F5R2 ; \ CAN1_F5R2_FB10, Filter bits
    : CAN1_F5R2_FB11 ( -- x addr ) 11 bit CAN1_F5R2 ; \ CAN1_F5R2_FB11, Filter bits
    : CAN1_F5R2_FB12 ( -- x addr ) 12 bit CAN1_F5R2 ; \ CAN1_F5R2_FB12, Filter bits
    : CAN1_F5R2_FB13 ( -- x addr ) 13 bit CAN1_F5R2 ; \ CAN1_F5R2_FB13, Filter bits
    : CAN1_F5R2_FB14 ( -- x addr ) 14 bit CAN1_F5R2 ; \ CAN1_F5R2_FB14, Filter bits
    : CAN1_F5R2_FB15 ( -- x addr ) 15 bit CAN1_F5R2 ; \ CAN1_F5R2_FB15, Filter bits
    : CAN1_F5R2_FB16 ( -- x addr ) 16 bit CAN1_F5R2 ; \ CAN1_F5R2_FB16, Filter bits
    : CAN1_F5R2_FB17 ( -- x addr ) 17 bit CAN1_F5R2 ; \ CAN1_F5R2_FB17, Filter bits
    : CAN1_F5R2_FB18 ( -- x addr ) 18 bit CAN1_F5R2 ; \ CAN1_F5R2_FB18, Filter bits
    : CAN1_F5R2_FB19 ( -- x addr ) 19 bit CAN1_F5R2 ; \ CAN1_F5R2_FB19, Filter bits
    : CAN1_F5R2_FB20 ( -- x addr ) 20 bit CAN1_F5R2 ; \ CAN1_F5R2_FB20, Filter bits
    : CAN1_F5R2_FB21 ( -- x addr ) 21 bit CAN1_F5R2 ; \ CAN1_F5R2_FB21, Filter bits
    : CAN1_F5R2_FB22 ( -- x addr ) 22 bit CAN1_F5R2 ; \ CAN1_F5R2_FB22, Filter bits
    : CAN1_F5R2_FB23 ( -- x addr ) 23 bit CAN1_F5R2 ; \ CAN1_F5R2_FB23, Filter bits
    : CAN1_F5R2_FB24 ( -- x addr ) 24 bit CAN1_F5R2 ; \ CAN1_F5R2_FB24, Filter bits
    : CAN1_F5R2_FB25 ( -- x addr ) 25 bit CAN1_F5R2 ; \ CAN1_F5R2_FB25, Filter bits
    : CAN1_F5R2_FB26 ( -- x addr ) 26 bit CAN1_F5R2 ; \ CAN1_F5R2_FB26, Filter bits
    : CAN1_F5R2_FB27 ( -- x addr ) 27 bit CAN1_F5R2 ; \ CAN1_F5R2_FB27, Filter bits
    : CAN1_F5R2_FB28 ( -- x addr ) 28 bit CAN1_F5R2 ; \ CAN1_F5R2_FB28, Filter bits
    : CAN1_F5R2_FB29 ( -- x addr ) 29 bit CAN1_F5R2 ; \ CAN1_F5R2_FB29, Filter bits
    : CAN1_F5R2_FB30 ( -- x addr ) 30 bit CAN1_F5R2 ; \ CAN1_F5R2_FB30, Filter bits
    : CAN1_F5R2_FB31 ( -- x addr ) 31 bit CAN1_F5R2 ; \ CAN1_F5R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F6R1 (read-write) Reset:0x00000000
    : CAN1_F6R1_FB0 ( -- x addr ) 0 bit CAN1_F6R1 ; \ CAN1_F6R1_FB0, Filter bits
    : CAN1_F6R1_FB1 ( -- x addr ) 1 bit CAN1_F6R1 ; \ CAN1_F6R1_FB1, Filter bits
    : CAN1_F6R1_FB2 ( -- x addr ) 2 bit CAN1_F6R1 ; \ CAN1_F6R1_FB2, Filter bits
    : CAN1_F6R1_FB3 ( -- x addr ) 3 bit CAN1_F6R1 ; \ CAN1_F6R1_FB3, Filter bits
    : CAN1_F6R1_FB4 ( -- x addr ) 4 bit CAN1_F6R1 ; \ CAN1_F6R1_FB4, Filter bits
    : CAN1_F6R1_FB5 ( -- x addr ) 5 bit CAN1_F6R1 ; \ CAN1_F6R1_FB5, Filter bits
    : CAN1_F6R1_FB6 ( -- x addr ) 6 bit CAN1_F6R1 ; \ CAN1_F6R1_FB6, Filter bits
    : CAN1_F6R1_FB7 ( -- x addr ) 7 bit CAN1_F6R1 ; \ CAN1_F6R1_FB7, Filter bits
    : CAN1_F6R1_FB8 ( -- x addr ) 8 bit CAN1_F6R1 ; \ CAN1_F6R1_FB8, Filter bits
    : CAN1_F6R1_FB9 ( -- x addr ) 9 bit CAN1_F6R1 ; \ CAN1_F6R1_FB9, Filter bits
    : CAN1_F6R1_FB10 ( -- x addr ) 10 bit CAN1_F6R1 ; \ CAN1_F6R1_FB10, Filter bits
    : CAN1_F6R1_FB11 ( -- x addr ) 11 bit CAN1_F6R1 ; \ CAN1_F6R1_FB11, Filter bits
    : CAN1_F6R1_FB12 ( -- x addr ) 12 bit CAN1_F6R1 ; \ CAN1_F6R1_FB12, Filter bits
    : CAN1_F6R1_FB13 ( -- x addr ) 13 bit CAN1_F6R1 ; \ CAN1_F6R1_FB13, Filter bits
    : CAN1_F6R1_FB14 ( -- x addr ) 14 bit CAN1_F6R1 ; \ CAN1_F6R1_FB14, Filter bits
    : CAN1_F6R1_FB15 ( -- x addr ) 15 bit CAN1_F6R1 ; \ CAN1_F6R1_FB15, Filter bits
    : CAN1_F6R1_FB16 ( -- x addr ) 16 bit CAN1_F6R1 ; \ CAN1_F6R1_FB16, Filter bits
    : CAN1_F6R1_FB17 ( -- x addr ) 17 bit CAN1_F6R1 ; \ CAN1_F6R1_FB17, Filter bits
    : CAN1_F6R1_FB18 ( -- x addr ) 18 bit CAN1_F6R1 ; \ CAN1_F6R1_FB18, Filter bits
    : CAN1_F6R1_FB19 ( -- x addr ) 19 bit CAN1_F6R1 ; \ CAN1_F6R1_FB19, Filter bits
    : CAN1_F6R1_FB20 ( -- x addr ) 20 bit CAN1_F6R1 ; \ CAN1_F6R1_FB20, Filter bits
    : CAN1_F6R1_FB21 ( -- x addr ) 21 bit CAN1_F6R1 ; \ CAN1_F6R1_FB21, Filter bits
    : CAN1_F6R1_FB22 ( -- x addr ) 22 bit CAN1_F6R1 ; \ CAN1_F6R1_FB22, Filter bits
    : CAN1_F6R1_FB23 ( -- x addr ) 23 bit CAN1_F6R1 ; \ CAN1_F6R1_FB23, Filter bits
    : CAN1_F6R1_FB24 ( -- x addr ) 24 bit CAN1_F6R1 ; \ CAN1_F6R1_FB24, Filter bits
    : CAN1_F6R1_FB25 ( -- x addr ) 25 bit CAN1_F6R1 ; \ CAN1_F6R1_FB25, Filter bits
    : CAN1_F6R1_FB26 ( -- x addr ) 26 bit CAN1_F6R1 ; \ CAN1_F6R1_FB26, Filter bits
    : CAN1_F6R1_FB27 ( -- x addr ) 27 bit CAN1_F6R1 ; \ CAN1_F6R1_FB27, Filter bits
    : CAN1_F6R1_FB28 ( -- x addr ) 28 bit CAN1_F6R1 ; \ CAN1_F6R1_FB28, Filter bits
    : CAN1_F6R1_FB29 ( -- x addr ) 29 bit CAN1_F6R1 ; \ CAN1_F6R1_FB29, Filter bits
    : CAN1_F6R1_FB30 ( -- x addr ) 30 bit CAN1_F6R1 ; \ CAN1_F6R1_FB30, Filter bits
    : CAN1_F6R1_FB31 ( -- x addr ) 31 bit CAN1_F6R1 ; \ CAN1_F6R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F6R2 (read-write) Reset:0x00000000
    : CAN1_F6R2_FB0 ( -- x addr ) 0 bit CAN1_F6R2 ; \ CAN1_F6R2_FB0, Filter bits
    : CAN1_F6R2_FB1 ( -- x addr ) 1 bit CAN1_F6R2 ; \ CAN1_F6R2_FB1, Filter bits
    : CAN1_F6R2_FB2 ( -- x addr ) 2 bit CAN1_F6R2 ; \ CAN1_F6R2_FB2, Filter bits
    : CAN1_F6R2_FB3 ( -- x addr ) 3 bit CAN1_F6R2 ; \ CAN1_F6R2_FB3, Filter bits
    : CAN1_F6R2_FB4 ( -- x addr ) 4 bit CAN1_F6R2 ; \ CAN1_F6R2_FB4, Filter bits
    : CAN1_F6R2_FB5 ( -- x addr ) 5 bit CAN1_F6R2 ; \ CAN1_F6R2_FB5, Filter bits
    : CAN1_F6R2_FB6 ( -- x addr ) 6 bit CAN1_F6R2 ; \ CAN1_F6R2_FB6, Filter bits
    : CAN1_F6R2_FB7 ( -- x addr ) 7 bit CAN1_F6R2 ; \ CAN1_F6R2_FB7, Filter bits
    : CAN1_F6R2_FB8 ( -- x addr ) 8 bit CAN1_F6R2 ; \ CAN1_F6R2_FB8, Filter bits
    : CAN1_F6R2_FB9 ( -- x addr ) 9 bit CAN1_F6R2 ; \ CAN1_F6R2_FB9, Filter bits
    : CAN1_F6R2_FB10 ( -- x addr ) 10 bit CAN1_F6R2 ; \ CAN1_F6R2_FB10, Filter bits
    : CAN1_F6R2_FB11 ( -- x addr ) 11 bit CAN1_F6R2 ; \ CAN1_F6R2_FB11, Filter bits
    : CAN1_F6R2_FB12 ( -- x addr ) 12 bit CAN1_F6R2 ; \ CAN1_F6R2_FB12, Filter bits
    : CAN1_F6R2_FB13 ( -- x addr ) 13 bit CAN1_F6R2 ; \ CAN1_F6R2_FB13, Filter bits
    : CAN1_F6R2_FB14 ( -- x addr ) 14 bit CAN1_F6R2 ; \ CAN1_F6R2_FB14, Filter bits
    : CAN1_F6R2_FB15 ( -- x addr ) 15 bit CAN1_F6R2 ; \ CAN1_F6R2_FB15, Filter bits
    : CAN1_F6R2_FB16 ( -- x addr ) 16 bit CAN1_F6R2 ; \ CAN1_F6R2_FB16, Filter bits
    : CAN1_F6R2_FB17 ( -- x addr ) 17 bit CAN1_F6R2 ; \ CAN1_F6R2_FB17, Filter bits
    : CAN1_F6R2_FB18 ( -- x addr ) 18 bit CAN1_F6R2 ; \ CAN1_F6R2_FB18, Filter bits
    : CAN1_F6R2_FB19 ( -- x addr ) 19 bit CAN1_F6R2 ; \ CAN1_F6R2_FB19, Filter bits
    : CAN1_F6R2_FB20 ( -- x addr ) 20 bit CAN1_F6R2 ; \ CAN1_F6R2_FB20, Filter bits
    : CAN1_F6R2_FB21 ( -- x addr ) 21 bit CAN1_F6R2 ; \ CAN1_F6R2_FB21, Filter bits
    : CAN1_F6R2_FB22 ( -- x addr ) 22 bit CAN1_F6R2 ; \ CAN1_F6R2_FB22, Filter bits
    : CAN1_F6R2_FB23 ( -- x addr ) 23 bit CAN1_F6R2 ; \ CAN1_F6R2_FB23, Filter bits
    : CAN1_F6R2_FB24 ( -- x addr ) 24 bit CAN1_F6R2 ; \ CAN1_F6R2_FB24, Filter bits
    : CAN1_F6R2_FB25 ( -- x addr ) 25 bit CAN1_F6R2 ; \ CAN1_F6R2_FB25, Filter bits
    : CAN1_F6R2_FB26 ( -- x addr ) 26 bit CAN1_F6R2 ; \ CAN1_F6R2_FB26, Filter bits
    : CAN1_F6R2_FB27 ( -- x addr ) 27 bit CAN1_F6R2 ; \ CAN1_F6R2_FB27, Filter bits
    : CAN1_F6R2_FB28 ( -- x addr ) 28 bit CAN1_F6R2 ; \ CAN1_F6R2_FB28, Filter bits
    : CAN1_F6R2_FB29 ( -- x addr ) 29 bit CAN1_F6R2 ; \ CAN1_F6R2_FB29, Filter bits
    : CAN1_F6R2_FB30 ( -- x addr ) 30 bit CAN1_F6R2 ; \ CAN1_F6R2_FB30, Filter bits
    : CAN1_F6R2_FB31 ( -- x addr ) 31 bit CAN1_F6R2 ; \ CAN1_F6R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F7R1 (read-write) Reset:0x00000000
    : CAN1_F7R1_FB0 ( -- x addr ) 0 bit CAN1_F7R1 ; \ CAN1_F7R1_FB0, Filter bits
    : CAN1_F7R1_FB1 ( -- x addr ) 1 bit CAN1_F7R1 ; \ CAN1_F7R1_FB1, Filter bits
    : CAN1_F7R1_FB2 ( -- x addr ) 2 bit CAN1_F7R1 ; \ CAN1_F7R1_FB2, Filter bits
    : CAN1_F7R1_FB3 ( -- x addr ) 3 bit CAN1_F7R1 ; \ CAN1_F7R1_FB3, Filter bits
    : CAN1_F7R1_FB4 ( -- x addr ) 4 bit CAN1_F7R1 ; \ CAN1_F7R1_FB4, Filter bits
    : CAN1_F7R1_FB5 ( -- x addr ) 5 bit CAN1_F7R1 ; \ CAN1_F7R1_FB5, Filter bits
    : CAN1_F7R1_FB6 ( -- x addr ) 6 bit CAN1_F7R1 ; \ CAN1_F7R1_FB6, Filter bits
    : CAN1_F7R1_FB7 ( -- x addr ) 7 bit CAN1_F7R1 ; \ CAN1_F7R1_FB7, Filter bits
    : CAN1_F7R1_FB8 ( -- x addr ) 8 bit CAN1_F7R1 ; \ CAN1_F7R1_FB8, Filter bits
    : CAN1_F7R1_FB9 ( -- x addr ) 9 bit CAN1_F7R1 ; \ CAN1_F7R1_FB9, Filter bits
    : CAN1_F7R1_FB10 ( -- x addr ) 10 bit CAN1_F7R1 ; \ CAN1_F7R1_FB10, Filter bits
    : CAN1_F7R1_FB11 ( -- x addr ) 11 bit CAN1_F7R1 ; \ CAN1_F7R1_FB11, Filter bits
    : CAN1_F7R1_FB12 ( -- x addr ) 12 bit CAN1_F7R1 ; \ CAN1_F7R1_FB12, Filter bits
    : CAN1_F7R1_FB13 ( -- x addr ) 13 bit CAN1_F7R1 ; \ CAN1_F7R1_FB13, Filter bits
    : CAN1_F7R1_FB14 ( -- x addr ) 14 bit CAN1_F7R1 ; \ CAN1_F7R1_FB14, Filter bits
    : CAN1_F7R1_FB15 ( -- x addr ) 15 bit CAN1_F7R1 ; \ CAN1_F7R1_FB15, Filter bits
    : CAN1_F7R1_FB16 ( -- x addr ) 16 bit CAN1_F7R1 ; \ CAN1_F7R1_FB16, Filter bits
    : CAN1_F7R1_FB17 ( -- x addr ) 17 bit CAN1_F7R1 ; \ CAN1_F7R1_FB17, Filter bits
    : CAN1_F7R1_FB18 ( -- x addr ) 18 bit CAN1_F7R1 ; \ CAN1_F7R1_FB18, Filter bits
    : CAN1_F7R1_FB19 ( -- x addr ) 19 bit CAN1_F7R1 ; \ CAN1_F7R1_FB19, Filter bits
    : CAN1_F7R1_FB20 ( -- x addr ) 20 bit CAN1_F7R1 ; \ CAN1_F7R1_FB20, Filter bits
    : CAN1_F7R1_FB21 ( -- x addr ) 21 bit CAN1_F7R1 ; \ CAN1_F7R1_FB21, Filter bits
    : CAN1_F7R1_FB22 ( -- x addr ) 22 bit CAN1_F7R1 ; \ CAN1_F7R1_FB22, Filter bits
    : CAN1_F7R1_FB23 ( -- x addr ) 23 bit CAN1_F7R1 ; \ CAN1_F7R1_FB23, Filter bits
    : CAN1_F7R1_FB24 ( -- x addr ) 24 bit CAN1_F7R1 ; \ CAN1_F7R1_FB24, Filter bits
    : CAN1_F7R1_FB25 ( -- x addr ) 25 bit CAN1_F7R1 ; \ CAN1_F7R1_FB25, Filter bits
    : CAN1_F7R1_FB26 ( -- x addr ) 26 bit CAN1_F7R1 ; \ CAN1_F7R1_FB26, Filter bits
    : CAN1_F7R1_FB27 ( -- x addr ) 27 bit CAN1_F7R1 ; \ CAN1_F7R1_FB27, Filter bits
    : CAN1_F7R1_FB28 ( -- x addr ) 28 bit CAN1_F7R1 ; \ CAN1_F7R1_FB28, Filter bits
    : CAN1_F7R1_FB29 ( -- x addr ) 29 bit CAN1_F7R1 ; \ CAN1_F7R1_FB29, Filter bits
    : CAN1_F7R1_FB30 ( -- x addr ) 30 bit CAN1_F7R1 ; \ CAN1_F7R1_FB30, Filter bits
    : CAN1_F7R1_FB31 ( -- x addr ) 31 bit CAN1_F7R1 ; \ CAN1_F7R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F7R2 (read-write) Reset:0x00000000
    : CAN1_F7R2_FB0 ( -- x addr ) 0 bit CAN1_F7R2 ; \ CAN1_F7R2_FB0, Filter bits
    : CAN1_F7R2_FB1 ( -- x addr ) 1 bit CAN1_F7R2 ; \ CAN1_F7R2_FB1, Filter bits
    : CAN1_F7R2_FB2 ( -- x addr ) 2 bit CAN1_F7R2 ; \ CAN1_F7R2_FB2, Filter bits
    : CAN1_F7R2_FB3 ( -- x addr ) 3 bit CAN1_F7R2 ; \ CAN1_F7R2_FB3, Filter bits
    : CAN1_F7R2_FB4 ( -- x addr ) 4 bit CAN1_F7R2 ; \ CAN1_F7R2_FB4, Filter bits
    : CAN1_F7R2_FB5 ( -- x addr ) 5 bit CAN1_F7R2 ; \ CAN1_F7R2_FB5, Filter bits
    : CAN1_F7R2_FB6 ( -- x addr ) 6 bit CAN1_F7R2 ; \ CAN1_F7R2_FB6, Filter bits
    : CAN1_F7R2_FB7 ( -- x addr ) 7 bit CAN1_F7R2 ; \ CAN1_F7R2_FB7, Filter bits
    : CAN1_F7R2_FB8 ( -- x addr ) 8 bit CAN1_F7R2 ; \ CAN1_F7R2_FB8, Filter bits
    : CAN1_F7R2_FB9 ( -- x addr ) 9 bit CAN1_F7R2 ; \ CAN1_F7R2_FB9, Filter bits
    : CAN1_F7R2_FB10 ( -- x addr ) 10 bit CAN1_F7R2 ; \ CAN1_F7R2_FB10, Filter bits
    : CAN1_F7R2_FB11 ( -- x addr ) 11 bit CAN1_F7R2 ; \ CAN1_F7R2_FB11, Filter bits
    : CAN1_F7R2_FB12 ( -- x addr ) 12 bit CAN1_F7R2 ; \ CAN1_F7R2_FB12, Filter bits
    : CAN1_F7R2_FB13 ( -- x addr ) 13 bit CAN1_F7R2 ; \ CAN1_F7R2_FB13, Filter bits
    : CAN1_F7R2_FB14 ( -- x addr ) 14 bit CAN1_F7R2 ; \ CAN1_F7R2_FB14, Filter bits
    : CAN1_F7R2_FB15 ( -- x addr ) 15 bit CAN1_F7R2 ; \ CAN1_F7R2_FB15, Filter bits
    : CAN1_F7R2_FB16 ( -- x addr ) 16 bit CAN1_F7R2 ; \ CAN1_F7R2_FB16, Filter bits
    : CAN1_F7R2_FB17 ( -- x addr ) 17 bit CAN1_F7R2 ; \ CAN1_F7R2_FB17, Filter bits
    : CAN1_F7R2_FB18 ( -- x addr ) 18 bit CAN1_F7R2 ; \ CAN1_F7R2_FB18, Filter bits
    : CAN1_F7R2_FB19 ( -- x addr ) 19 bit CAN1_F7R2 ; \ CAN1_F7R2_FB19, Filter bits
    : CAN1_F7R2_FB20 ( -- x addr ) 20 bit CAN1_F7R2 ; \ CAN1_F7R2_FB20, Filter bits
    : CAN1_F7R2_FB21 ( -- x addr ) 21 bit CAN1_F7R2 ; \ CAN1_F7R2_FB21, Filter bits
    : CAN1_F7R2_FB22 ( -- x addr ) 22 bit CAN1_F7R2 ; \ CAN1_F7R2_FB22, Filter bits
    : CAN1_F7R2_FB23 ( -- x addr ) 23 bit CAN1_F7R2 ; \ CAN1_F7R2_FB23, Filter bits
    : CAN1_F7R2_FB24 ( -- x addr ) 24 bit CAN1_F7R2 ; \ CAN1_F7R2_FB24, Filter bits
    : CAN1_F7R2_FB25 ( -- x addr ) 25 bit CAN1_F7R2 ; \ CAN1_F7R2_FB25, Filter bits
    : CAN1_F7R2_FB26 ( -- x addr ) 26 bit CAN1_F7R2 ; \ CAN1_F7R2_FB26, Filter bits
    : CAN1_F7R2_FB27 ( -- x addr ) 27 bit CAN1_F7R2 ; \ CAN1_F7R2_FB27, Filter bits
    : CAN1_F7R2_FB28 ( -- x addr ) 28 bit CAN1_F7R2 ; \ CAN1_F7R2_FB28, Filter bits
    : CAN1_F7R2_FB29 ( -- x addr ) 29 bit CAN1_F7R2 ; \ CAN1_F7R2_FB29, Filter bits
    : CAN1_F7R2_FB30 ( -- x addr ) 30 bit CAN1_F7R2 ; \ CAN1_F7R2_FB30, Filter bits
    : CAN1_F7R2_FB31 ( -- x addr ) 31 bit CAN1_F7R2 ; \ CAN1_F7R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F8R1 (read-write) Reset:0x00000000
    : CAN1_F8R1_FB0 ( -- x addr ) 0 bit CAN1_F8R1 ; \ CAN1_F8R1_FB0, Filter bits
    : CAN1_F8R1_FB1 ( -- x addr ) 1 bit CAN1_F8R1 ; \ CAN1_F8R1_FB1, Filter bits
    : CAN1_F8R1_FB2 ( -- x addr ) 2 bit CAN1_F8R1 ; \ CAN1_F8R1_FB2, Filter bits
    : CAN1_F8R1_FB3 ( -- x addr ) 3 bit CAN1_F8R1 ; \ CAN1_F8R1_FB3, Filter bits
    : CAN1_F8R1_FB4 ( -- x addr ) 4 bit CAN1_F8R1 ; \ CAN1_F8R1_FB4, Filter bits
    : CAN1_F8R1_FB5 ( -- x addr ) 5 bit CAN1_F8R1 ; \ CAN1_F8R1_FB5, Filter bits
    : CAN1_F8R1_FB6 ( -- x addr ) 6 bit CAN1_F8R1 ; \ CAN1_F8R1_FB6, Filter bits
    : CAN1_F8R1_FB7 ( -- x addr ) 7 bit CAN1_F8R1 ; \ CAN1_F8R1_FB7, Filter bits
    : CAN1_F8R1_FB8 ( -- x addr ) 8 bit CAN1_F8R1 ; \ CAN1_F8R1_FB8, Filter bits
    : CAN1_F8R1_FB9 ( -- x addr ) 9 bit CAN1_F8R1 ; \ CAN1_F8R1_FB9, Filter bits
    : CAN1_F8R1_FB10 ( -- x addr ) 10 bit CAN1_F8R1 ; \ CAN1_F8R1_FB10, Filter bits
    : CAN1_F8R1_FB11 ( -- x addr ) 11 bit CAN1_F8R1 ; \ CAN1_F8R1_FB11, Filter bits
    : CAN1_F8R1_FB12 ( -- x addr ) 12 bit CAN1_F8R1 ; \ CAN1_F8R1_FB12, Filter bits
    : CAN1_F8R1_FB13 ( -- x addr ) 13 bit CAN1_F8R1 ; \ CAN1_F8R1_FB13, Filter bits
    : CAN1_F8R1_FB14 ( -- x addr ) 14 bit CAN1_F8R1 ; \ CAN1_F8R1_FB14, Filter bits
    : CAN1_F8R1_FB15 ( -- x addr ) 15 bit CAN1_F8R1 ; \ CAN1_F8R1_FB15, Filter bits
    : CAN1_F8R1_FB16 ( -- x addr ) 16 bit CAN1_F8R1 ; \ CAN1_F8R1_FB16, Filter bits
    : CAN1_F8R1_FB17 ( -- x addr ) 17 bit CAN1_F8R1 ; \ CAN1_F8R1_FB17, Filter bits
    : CAN1_F8R1_FB18 ( -- x addr ) 18 bit CAN1_F8R1 ; \ CAN1_F8R1_FB18, Filter bits
    : CAN1_F8R1_FB19 ( -- x addr ) 19 bit CAN1_F8R1 ; \ CAN1_F8R1_FB19, Filter bits
    : CAN1_F8R1_FB20 ( -- x addr ) 20 bit CAN1_F8R1 ; \ CAN1_F8R1_FB20, Filter bits
    : CAN1_F8R1_FB21 ( -- x addr ) 21 bit CAN1_F8R1 ; \ CAN1_F8R1_FB21, Filter bits
    : CAN1_F8R1_FB22 ( -- x addr ) 22 bit CAN1_F8R1 ; \ CAN1_F8R1_FB22, Filter bits
    : CAN1_F8R1_FB23 ( -- x addr ) 23 bit CAN1_F8R1 ; \ CAN1_F8R1_FB23, Filter bits
    : CAN1_F8R1_FB24 ( -- x addr ) 24 bit CAN1_F8R1 ; \ CAN1_F8R1_FB24, Filter bits
    : CAN1_F8R1_FB25 ( -- x addr ) 25 bit CAN1_F8R1 ; \ CAN1_F8R1_FB25, Filter bits
    : CAN1_F8R1_FB26 ( -- x addr ) 26 bit CAN1_F8R1 ; \ CAN1_F8R1_FB26, Filter bits
    : CAN1_F8R1_FB27 ( -- x addr ) 27 bit CAN1_F8R1 ; \ CAN1_F8R1_FB27, Filter bits
    : CAN1_F8R1_FB28 ( -- x addr ) 28 bit CAN1_F8R1 ; \ CAN1_F8R1_FB28, Filter bits
    : CAN1_F8R1_FB29 ( -- x addr ) 29 bit CAN1_F8R1 ; \ CAN1_F8R1_FB29, Filter bits
    : CAN1_F8R1_FB30 ( -- x addr ) 30 bit CAN1_F8R1 ; \ CAN1_F8R1_FB30, Filter bits
    : CAN1_F8R1_FB31 ( -- x addr ) 31 bit CAN1_F8R1 ; \ CAN1_F8R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F8R2 (read-write) Reset:0x00000000
    : CAN1_F8R2_FB0 ( -- x addr ) 0 bit CAN1_F8R2 ; \ CAN1_F8R2_FB0, Filter bits
    : CAN1_F8R2_FB1 ( -- x addr ) 1 bit CAN1_F8R2 ; \ CAN1_F8R2_FB1, Filter bits
    : CAN1_F8R2_FB2 ( -- x addr ) 2 bit CAN1_F8R2 ; \ CAN1_F8R2_FB2, Filter bits
    : CAN1_F8R2_FB3 ( -- x addr ) 3 bit CAN1_F8R2 ; \ CAN1_F8R2_FB3, Filter bits
    : CAN1_F8R2_FB4 ( -- x addr ) 4 bit CAN1_F8R2 ; \ CAN1_F8R2_FB4, Filter bits
    : CAN1_F8R2_FB5 ( -- x addr ) 5 bit CAN1_F8R2 ; \ CAN1_F8R2_FB5, Filter bits
    : CAN1_F8R2_FB6 ( -- x addr ) 6 bit CAN1_F8R2 ; \ CAN1_F8R2_FB6, Filter bits
    : CAN1_F8R2_FB7 ( -- x addr ) 7 bit CAN1_F8R2 ; \ CAN1_F8R2_FB7, Filter bits
    : CAN1_F8R2_FB8 ( -- x addr ) 8 bit CAN1_F8R2 ; \ CAN1_F8R2_FB8, Filter bits
    : CAN1_F8R2_FB9 ( -- x addr ) 9 bit CAN1_F8R2 ; \ CAN1_F8R2_FB9, Filter bits
    : CAN1_F8R2_FB10 ( -- x addr ) 10 bit CAN1_F8R2 ; \ CAN1_F8R2_FB10, Filter bits
    : CAN1_F8R2_FB11 ( -- x addr ) 11 bit CAN1_F8R2 ; \ CAN1_F8R2_FB11, Filter bits
    : CAN1_F8R2_FB12 ( -- x addr ) 12 bit CAN1_F8R2 ; \ CAN1_F8R2_FB12, Filter bits
    : CAN1_F8R2_FB13 ( -- x addr ) 13 bit CAN1_F8R2 ; \ CAN1_F8R2_FB13, Filter bits
    : CAN1_F8R2_FB14 ( -- x addr ) 14 bit CAN1_F8R2 ; \ CAN1_F8R2_FB14, Filter bits
    : CAN1_F8R2_FB15 ( -- x addr ) 15 bit CAN1_F8R2 ; \ CAN1_F8R2_FB15, Filter bits
    : CAN1_F8R2_FB16 ( -- x addr ) 16 bit CAN1_F8R2 ; \ CAN1_F8R2_FB16, Filter bits
    : CAN1_F8R2_FB17 ( -- x addr ) 17 bit CAN1_F8R2 ; \ CAN1_F8R2_FB17, Filter bits
    : CAN1_F8R2_FB18 ( -- x addr ) 18 bit CAN1_F8R2 ; \ CAN1_F8R2_FB18, Filter bits
    : CAN1_F8R2_FB19 ( -- x addr ) 19 bit CAN1_F8R2 ; \ CAN1_F8R2_FB19, Filter bits
    : CAN1_F8R2_FB20 ( -- x addr ) 20 bit CAN1_F8R2 ; \ CAN1_F8R2_FB20, Filter bits
    : CAN1_F8R2_FB21 ( -- x addr ) 21 bit CAN1_F8R2 ; \ CAN1_F8R2_FB21, Filter bits
    : CAN1_F8R2_FB22 ( -- x addr ) 22 bit CAN1_F8R2 ; \ CAN1_F8R2_FB22, Filter bits
    : CAN1_F8R2_FB23 ( -- x addr ) 23 bit CAN1_F8R2 ; \ CAN1_F8R2_FB23, Filter bits
    : CAN1_F8R2_FB24 ( -- x addr ) 24 bit CAN1_F8R2 ; \ CAN1_F8R2_FB24, Filter bits
    : CAN1_F8R2_FB25 ( -- x addr ) 25 bit CAN1_F8R2 ; \ CAN1_F8R2_FB25, Filter bits
    : CAN1_F8R2_FB26 ( -- x addr ) 26 bit CAN1_F8R2 ; \ CAN1_F8R2_FB26, Filter bits
    : CAN1_F8R2_FB27 ( -- x addr ) 27 bit CAN1_F8R2 ; \ CAN1_F8R2_FB27, Filter bits
    : CAN1_F8R2_FB28 ( -- x addr ) 28 bit CAN1_F8R2 ; \ CAN1_F8R2_FB28, Filter bits
    : CAN1_F8R2_FB29 ( -- x addr ) 29 bit CAN1_F8R2 ; \ CAN1_F8R2_FB29, Filter bits
    : CAN1_F8R2_FB30 ( -- x addr ) 30 bit CAN1_F8R2 ; \ CAN1_F8R2_FB30, Filter bits
    : CAN1_F8R2_FB31 ( -- x addr ) 31 bit CAN1_F8R2 ; \ CAN1_F8R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F9R1 (read-write) Reset:0x00000000
    : CAN1_F9R1_FB0 ( -- x addr ) 0 bit CAN1_F9R1 ; \ CAN1_F9R1_FB0, Filter bits
    : CAN1_F9R1_FB1 ( -- x addr ) 1 bit CAN1_F9R1 ; \ CAN1_F9R1_FB1, Filter bits
    : CAN1_F9R1_FB2 ( -- x addr ) 2 bit CAN1_F9R1 ; \ CAN1_F9R1_FB2, Filter bits
    : CAN1_F9R1_FB3 ( -- x addr ) 3 bit CAN1_F9R1 ; \ CAN1_F9R1_FB3, Filter bits
    : CAN1_F9R1_FB4 ( -- x addr ) 4 bit CAN1_F9R1 ; \ CAN1_F9R1_FB4, Filter bits
    : CAN1_F9R1_FB5 ( -- x addr ) 5 bit CAN1_F9R1 ; \ CAN1_F9R1_FB5, Filter bits
    : CAN1_F9R1_FB6 ( -- x addr ) 6 bit CAN1_F9R1 ; \ CAN1_F9R1_FB6, Filter bits
    : CAN1_F9R1_FB7 ( -- x addr ) 7 bit CAN1_F9R1 ; \ CAN1_F9R1_FB7, Filter bits
    : CAN1_F9R1_FB8 ( -- x addr ) 8 bit CAN1_F9R1 ; \ CAN1_F9R1_FB8, Filter bits
    : CAN1_F9R1_FB9 ( -- x addr ) 9 bit CAN1_F9R1 ; \ CAN1_F9R1_FB9, Filter bits
    : CAN1_F9R1_FB10 ( -- x addr ) 10 bit CAN1_F9R1 ; \ CAN1_F9R1_FB10, Filter bits
    : CAN1_F9R1_FB11 ( -- x addr ) 11 bit CAN1_F9R1 ; \ CAN1_F9R1_FB11, Filter bits
    : CAN1_F9R1_FB12 ( -- x addr ) 12 bit CAN1_F9R1 ; \ CAN1_F9R1_FB12, Filter bits
    : CAN1_F9R1_FB13 ( -- x addr ) 13 bit CAN1_F9R1 ; \ CAN1_F9R1_FB13, Filter bits
    : CAN1_F9R1_FB14 ( -- x addr ) 14 bit CAN1_F9R1 ; \ CAN1_F9R1_FB14, Filter bits
    : CAN1_F9R1_FB15 ( -- x addr ) 15 bit CAN1_F9R1 ; \ CAN1_F9R1_FB15, Filter bits
    : CAN1_F9R1_FB16 ( -- x addr ) 16 bit CAN1_F9R1 ; \ CAN1_F9R1_FB16, Filter bits
    : CAN1_F9R1_FB17 ( -- x addr ) 17 bit CAN1_F9R1 ; \ CAN1_F9R1_FB17, Filter bits
    : CAN1_F9R1_FB18 ( -- x addr ) 18 bit CAN1_F9R1 ; \ CAN1_F9R1_FB18, Filter bits
    : CAN1_F9R1_FB19 ( -- x addr ) 19 bit CAN1_F9R1 ; \ CAN1_F9R1_FB19, Filter bits
    : CAN1_F9R1_FB20 ( -- x addr ) 20 bit CAN1_F9R1 ; \ CAN1_F9R1_FB20, Filter bits
    : CAN1_F9R1_FB21 ( -- x addr ) 21 bit CAN1_F9R1 ; \ CAN1_F9R1_FB21, Filter bits
    : CAN1_F9R1_FB22 ( -- x addr ) 22 bit CAN1_F9R1 ; \ CAN1_F9R1_FB22, Filter bits
    : CAN1_F9R1_FB23 ( -- x addr ) 23 bit CAN1_F9R1 ; \ CAN1_F9R1_FB23, Filter bits
    : CAN1_F9R1_FB24 ( -- x addr ) 24 bit CAN1_F9R1 ; \ CAN1_F9R1_FB24, Filter bits
    : CAN1_F9R1_FB25 ( -- x addr ) 25 bit CAN1_F9R1 ; \ CAN1_F9R1_FB25, Filter bits
    : CAN1_F9R1_FB26 ( -- x addr ) 26 bit CAN1_F9R1 ; \ CAN1_F9R1_FB26, Filter bits
    : CAN1_F9R1_FB27 ( -- x addr ) 27 bit CAN1_F9R1 ; \ CAN1_F9R1_FB27, Filter bits
    : CAN1_F9R1_FB28 ( -- x addr ) 28 bit CAN1_F9R1 ; \ CAN1_F9R1_FB28, Filter bits
    : CAN1_F9R1_FB29 ( -- x addr ) 29 bit CAN1_F9R1 ; \ CAN1_F9R1_FB29, Filter bits
    : CAN1_F9R1_FB30 ( -- x addr ) 30 bit CAN1_F9R1 ; \ CAN1_F9R1_FB30, Filter bits
    : CAN1_F9R1_FB31 ( -- x addr ) 31 bit CAN1_F9R1 ; \ CAN1_F9R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F9R2 (read-write) Reset:0x00000000
    : CAN1_F9R2_FB0 ( -- x addr ) 0 bit CAN1_F9R2 ; \ CAN1_F9R2_FB0, Filter bits
    : CAN1_F9R2_FB1 ( -- x addr ) 1 bit CAN1_F9R2 ; \ CAN1_F9R2_FB1, Filter bits
    : CAN1_F9R2_FB2 ( -- x addr ) 2 bit CAN1_F9R2 ; \ CAN1_F9R2_FB2, Filter bits
    : CAN1_F9R2_FB3 ( -- x addr ) 3 bit CAN1_F9R2 ; \ CAN1_F9R2_FB3, Filter bits
    : CAN1_F9R2_FB4 ( -- x addr ) 4 bit CAN1_F9R2 ; \ CAN1_F9R2_FB4, Filter bits
    : CAN1_F9R2_FB5 ( -- x addr ) 5 bit CAN1_F9R2 ; \ CAN1_F9R2_FB5, Filter bits
    : CAN1_F9R2_FB6 ( -- x addr ) 6 bit CAN1_F9R2 ; \ CAN1_F9R2_FB6, Filter bits
    : CAN1_F9R2_FB7 ( -- x addr ) 7 bit CAN1_F9R2 ; \ CAN1_F9R2_FB7, Filter bits
    : CAN1_F9R2_FB8 ( -- x addr ) 8 bit CAN1_F9R2 ; \ CAN1_F9R2_FB8, Filter bits
    : CAN1_F9R2_FB9 ( -- x addr ) 9 bit CAN1_F9R2 ; \ CAN1_F9R2_FB9, Filter bits
    : CAN1_F9R2_FB10 ( -- x addr ) 10 bit CAN1_F9R2 ; \ CAN1_F9R2_FB10, Filter bits
    : CAN1_F9R2_FB11 ( -- x addr ) 11 bit CAN1_F9R2 ; \ CAN1_F9R2_FB11, Filter bits
    : CAN1_F9R2_FB12 ( -- x addr ) 12 bit CAN1_F9R2 ; \ CAN1_F9R2_FB12, Filter bits
    : CAN1_F9R2_FB13 ( -- x addr ) 13 bit CAN1_F9R2 ; \ CAN1_F9R2_FB13, Filter bits
    : CAN1_F9R2_FB14 ( -- x addr ) 14 bit CAN1_F9R2 ; \ CAN1_F9R2_FB14, Filter bits
    : CAN1_F9R2_FB15 ( -- x addr ) 15 bit CAN1_F9R2 ; \ CAN1_F9R2_FB15, Filter bits
    : CAN1_F9R2_FB16 ( -- x addr ) 16 bit CAN1_F9R2 ; \ CAN1_F9R2_FB16, Filter bits
    : CAN1_F9R2_FB17 ( -- x addr ) 17 bit CAN1_F9R2 ; \ CAN1_F9R2_FB17, Filter bits
    : CAN1_F9R2_FB18 ( -- x addr ) 18 bit CAN1_F9R2 ; \ CAN1_F9R2_FB18, Filter bits
    : CAN1_F9R2_FB19 ( -- x addr ) 19 bit CAN1_F9R2 ; \ CAN1_F9R2_FB19, Filter bits
    : CAN1_F9R2_FB20 ( -- x addr ) 20 bit CAN1_F9R2 ; \ CAN1_F9R2_FB20, Filter bits
    : CAN1_F9R2_FB21 ( -- x addr ) 21 bit CAN1_F9R2 ; \ CAN1_F9R2_FB21, Filter bits
    : CAN1_F9R2_FB22 ( -- x addr ) 22 bit CAN1_F9R2 ; \ CAN1_F9R2_FB22, Filter bits
    : CAN1_F9R2_FB23 ( -- x addr ) 23 bit CAN1_F9R2 ; \ CAN1_F9R2_FB23, Filter bits
    : CAN1_F9R2_FB24 ( -- x addr ) 24 bit CAN1_F9R2 ; \ CAN1_F9R2_FB24, Filter bits
    : CAN1_F9R2_FB25 ( -- x addr ) 25 bit CAN1_F9R2 ; \ CAN1_F9R2_FB25, Filter bits
    : CAN1_F9R2_FB26 ( -- x addr ) 26 bit CAN1_F9R2 ; \ CAN1_F9R2_FB26, Filter bits
    : CAN1_F9R2_FB27 ( -- x addr ) 27 bit CAN1_F9R2 ; \ CAN1_F9R2_FB27, Filter bits
    : CAN1_F9R2_FB28 ( -- x addr ) 28 bit CAN1_F9R2 ; \ CAN1_F9R2_FB28, Filter bits
    : CAN1_F9R2_FB29 ( -- x addr ) 29 bit CAN1_F9R2 ; \ CAN1_F9R2_FB29, Filter bits
    : CAN1_F9R2_FB30 ( -- x addr ) 30 bit CAN1_F9R2 ; \ CAN1_F9R2_FB30, Filter bits
    : CAN1_F9R2_FB31 ( -- x addr ) 31 bit CAN1_F9R2 ; \ CAN1_F9R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F10R1 (read-write) Reset:0x00000000
    : CAN1_F10R1_FB0 ( -- x addr ) 0 bit CAN1_F10R1 ; \ CAN1_F10R1_FB0, Filter bits
    : CAN1_F10R1_FB1 ( -- x addr ) 1 bit CAN1_F10R1 ; \ CAN1_F10R1_FB1, Filter bits
    : CAN1_F10R1_FB2 ( -- x addr ) 2 bit CAN1_F10R1 ; \ CAN1_F10R1_FB2, Filter bits
    : CAN1_F10R1_FB3 ( -- x addr ) 3 bit CAN1_F10R1 ; \ CAN1_F10R1_FB3, Filter bits
    : CAN1_F10R1_FB4 ( -- x addr ) 4 bit CAN1_F10R1 ; \ CAN1_F10R1_FB4, Filter bits
    : CAN1_F10R1_FB5 ( -- x addr ) 5 bit CAN1_F10R1 ; \ CAN1_F10R1_FB5, Filter bits
    : CAN1_F10R1_FB6 ( -- x addr ) 6 bit CAN1_F10R1 ; \ CAN1_F10R1_FB6, Filter bits
    : CAN1_F10R1_FB7 ( -- x addr ) 7 bit CAN1_F10R1 ; \ CAN1_F10R1_FB7, Filter bits
    : CAN1_F10R1_FB8 ( -- x addr ) 8 bit CAN1_F10R1 ; \ CAN1_F10R1_FB8, Filter bits
    : CAN1_F10R1_FB9 ( -- x addr ) 9 bit CAN1_F10R1 ; \ CAN1_F10R1_FB9, Filter bits
    : CAN1_F10R1_FB10 ( -- x addr ) 10 bit CAN1_F10R1 ; \ CAN1_F10R1_FB10, Filter bits
    : CAN1_F10R1_FB11 ( -- x addr ) 11 bit CAN1_F10R1 ; \ CAN1_F10R1_FB11, Filter bits
    : CAN1_F10R1_FB12 ( -- x addr ) 12 bit CAN1_F10R1 ; \ CAN1_F10R1_FB12, Filter bits
    : CAN1_F10R1_FB13 ( -- x addr ) 13 bit CAN1_F10R1 ; \ CAN1_F10R1_FB13, Filter bits
    : CAN1_F10R1_FB14 ( -- x addr ) 14 bit CAN1_F10R1 ; \ CAN1_F10R1_FB14, Filter bits
    : CAN1_F10R1_FB15 ( -- x addr ) 15 bit CAN1_F10R1 ; \ CAN1_F10R1_FB15, Filter bits
    : CAN1_F10R1_FB16 ( -- x addr ) 16 bit CAN1_F10R1 ; \ CAN1_F10R1_FB16, Filter bits
    : CAN1_F10R1_FB17 ( -- x addr ) 17 bit CAN1_F10R1 ; \ CAN1_F10R1_FB17, Filter bits
    : CAN1_F10R1_FB18 ( -- x addr ) 18 bit CAN1_F10R1 ; \ CAN1_F10R1_FB18, Filter bits
    : CAN1_F10R1_FB19 ( -- x addr ) 19 bit CAN1_F10R1 ; \ CAN1_F10R1_FB19, Filter bits
    : CAN1_F10R1_FB20 ( -- x addr ) 20 bit CAN1_F10R1 ; \ CAN1_F10R1_FB20, Filter bits
    : CAN1_F10R1_FB21 ( -- x addr ) 21 bit CAN1_F10R1 ; \ CAN1_F10R1_FB21, Filter bits
    : CAN1_F10R1_FB22 ( -- x addr ) 22 bit CAN1_F10R1 ; \ CAN1_F10R1_FB22, Filter bits
    : CAN1_F10R1_FB23 ( -- x addr ) 23 bit CAN1_F10R1 ; \ CAN1_F10R1_FB23, Filter bits
    : CAN1_F10R1_FB24 ( -- x addr ) 24 bit CAN1_F10R1 ; \ CAN1_F10R1_FB24, Filter bits
    : CAN1_F10R1_FB25 ( -- x addr ) 25 bit CAN1_F10R1 ; \ CAN1_F10R1_FB25, Filter bits
    : CAN1_F10R1_FB26 ( -- x addr ) 26 bit CAN1_F10R1 ; \ CAN1_F10R1_FB26, Filter bits
    : CAN1_F10R1_FB27 ( -- x addr ) 27 bit CAN1_F10R1 ; \ CAN1_F10R1_FB27, Filter bits
    : CAN1_F10R1_FB28 ( -- x addr ) 28 bit CAN1_F10R1 ; \ CAN1_F10R1_FB28, Filter bits
    : CAN1_F10R1_FB29 ( -- x addr ) 29 bit CAN1_F10R1 ; \ CAN1_F10R1_FB29, Filter bits
    : CAN1_F10R1_FB30 ( -- x addr ) 30 bit CAN1_F10R1 ; \ CAN1_F10R1_FB30, Filter bits
    : CAN1_F10R1_FB31 ( -- x addr ) 31 bit CAN1_F10R1 ; \ CAN1_F10R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F10R2 (read-write) Reset:0x00000000
    : CAN1_F10R2_FB0 ( -- x addr ) 0 bit CAN1_F10R2 ; \ CAN1_F10R2_FB0, Filter bits
    : CAN1_F10R2_FB1 ( -- x addr ) 1 bit CAN1_F10R2 ; \ CAN1_F10R2_FB1, Filter bits
    : CAN1_F10R2_FB2 ( -- x addr ) 2 bit CAN1_F10R2 ; \ CAN1_F10R2_FB2, Filter bits
    : CAN1_F10R2_FB3 ( -- x addr ) 3 bit CAN1_F10R2 ; \ CAN1_F10R2_FB3, Filter bits
    : CAN1_F10R2_FB4 ( -- x addr ) 4 bit CAN1_F10R2 ; \ CAN1_F10R2_FB4, Filter bits
    : CAN1_F10R2_FB5 ( -- x addr ) 5 bit CAN1_F10R2 ; \ CAN1_F10R2_FB5, Filter bits
    : CAN1_F10R2_FB6 ( -- x addr ) 6 bit CAN1_F10R2 ; \ CAN1_F10R2_FB6, Filter bits
    : CAN1_F10R2_FB7 ( -- x addr ) 7 bit CAN1_F10R2 ; \ CAN1_F10R2_FB7, Filter bits
    : CAN1_F10R2_FB8 ( -- x addr ) 8 bit CAN1_F10R2 ; \ CAN1_F10R2_FB8, Filter bits
    : CAN1_F10R2_FB9 ( -- x addr ) 9 bit CAN1_F10R2 ; \ CAN1_F10R2_FB9, Filter bits
    : CAN1_F10R2_FB10 ( -- x addr ) 10 bit CAN1_F10R2 ; \ CAN1_F10R2_FB10, Filter bits
    : CAN1_F10R2_FB11 ( -- x addr ) 11 bit CAN1_F10R2 ; \ CAN1_F10R2_FB11, Filter bits
    : CAN1_F10R2_FB12 ( -- x addr ) 12 bit CAN1_F10R2 ; \ CAN1_F10R2_FB12, Filter bits
    : CAN1_F10R2_FB13 ( -- x addr ) 13 bit CAN1_F10R2 ; \ CAN1_F10R2_FB13, Filter bits
    : CAN1_F10R2_FB14 ( -- x addr ) 14 bit CAN1_F10R2 ; \ CAN1_F10R2_FB14, Filter bits
    : CAN1_F10R2_FB15 ( -- x addr ) 15 bit CAN1_F10R2 ; \ CAN1_F10R2_FB15, Filter bits
    : CAN1_F10R2_FB16 ( -- x addr ) 16 bit CAN1_F10R2 ; \ CAN1_F10R2_FB16, Filter bits
    : CAN1_F10R2_FB17 ( -- x addr ) 17 bit CAN1_F10R2 ; \ CAN1_F10R2_FB17, Filter bits
    : CAN1_F10R2_FB18 ( -- x addr ) 18 bit CAN1_F10R2 ; \ CAN1_F10R2_FB18, Filter bits
    : CAN1_F10R2_FB19 ( -- x addr ) 19 bit CAN1_F10R2 ; \ CAN1_F10R2_FB19, Filter bits
    : CAN1_F10R2_FB20 ( -- x addr ) 20 bit CAN1_F10R2 ; \ CAN1_F10R2_FB20, Filter bits
    : CAN1_F10R2_FB21 ( -- x addr ) 21 bit CAN1_F10R2 ; \ CAN1_F10R2_FB21, Filter bits
    : CAN1_F10R2_FB22 ( -- x addr ) 22 bit CAN1_F10R2 ; \ CAN1_F10R2_FB22, Filter bits
    : CAN1_F10R2_FB23 ( -- x addr ) 23 bit CAN1_F10R2 ; \ CAN1_F10R2_FB23, Filter bits
    : CAN1_F10R2_FB24 ( -- x addr ) 24 bit CAN1_F10R2 ; \ CAN1_F10R2_FB24, Filter bits
    : CAN1_F10R2_FB25 ( -- x addr ) 25 bit CAN1_F10R2 ; \ CAN1_F10R2_FB25, Filter bits
    : CAN1_F10R2_FB26 ( -- x addr ) 26 bit CAN1_F10R2 ; \ CAN1_F10R2_FB26, Filter bits
    : CAN1_F10R2_FB27 ( -- x addr ) 27 bit CAN1_F10R2 ; \ CAN1_F10R2_FB27, Filter bits
    : CAN1_F10R2_FB28 ( -- x addr ) 28 bit CAN1_F10R2 ; \ CAN1_F10R2_FB28, Filter bits
    : CAN1_F10R2_FB29 ( -- x addr ) 29 bit CAN1_F10R2 ; \ CAN1_F10R2_FB29, Filter bits
    : CAN1_F10R2_FB30 ( -- x addr ) 30 bit CAN1_F10R2 ; \ CAN1_F10R2_FB30, Filter bits
    : CAN1_F10R2_FB31 ( -- x addr ) 31 bit CAN1_F10R2 ; \ CAN1_F10R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F11R1 (read-write) Reset:0x00000000
    : CAN1_F11R1_FB0 ( -- x addr ) 0 bit CAN1_F11R1 ; \ CAN1_F11R1_FB0, Filter bits
    : CAN1_F11R1_FB1 ( -- x addr ) 1 bit CAN1_F11R1 ; \ CAN1_F11R1_FB1, Filter bits
    : CAN1_F11R1_FB2 ( -- x addr ) 2 bit CAN1_F11R1 ; \ CAN1_F11R1_FB2, Filter bits
    : CAN1_F11R1_FB3 ( -- x addr ) 3 bit CAN1_F11R1 ; \ CAN1_F11R1_FB3, Filter bits
    : CAN1_F11R1_FB4 ( -- x addr ) 4 bit CAN1_F11R1 ; \ CAN1_F11R1_FB4, Filter bits
    : CAN1_F11R1_FB5 ( -- x addr ) 5 bit CAN1_F11R1 ; \ CAN1_F11R1_FB5, Filter bits
    : CAN1_F11R1_FB6 ( -- x addr ) 6 bit CAN1_F11R1 ; \ CAN1_F11R1_FB6, Filter bits
    : CAN1_F11R1_FB7 ( -- x addr ) 7 bit CAN1_F11R1 ; \ CAN1_F11R1_FB7, Filter bits
    : CAN1_F11R1_FB8 ( -- x addr ) 8 bit CAN1_F11R1 ; \ CAN1_F11R1_FB8, Filter bits
    : CAN1_F11R1_FB9 ( -- x addr ) 9 bit CAN1_F11R1 ; \ CAN1_F11R1_FB9, Filter bits
    : CAN1_F11R1_FB10 ( -- x addr ) 10 bit CAN1_F11R1 ; \ CAN1_F11R1_FB10, Filter bits
    : CAN1_F11R1_FB11 ( -- x addr ) 11 bit CAN1_F11R1 ; \ CAN1_F11R1_FB11, Filter bits
    : CAN1_F11R1_FB12 ( -- x addr ) 12 bit CAN1_F11R1 ; \ CAN1_F11R1_FB12, Filter bits
    : CAN1_F11R1_FB13 ( -- x addr ) 13 bit CAN1_F11R1 ; \ CAN1_F11R1_FB13, Filter bits
    : CAN1_F11R1_FB14 ( -- x addr ) 14 bit CAN1_F11R1 ; \ CAN1_F11R1_FB14, Filter bits
    : CAN1_F11R1_FB15 ( -- x addr ) 15 bit CAN1_F11R1 ; \ CAN1_F11R1_FB15, Filter bits
    : CAN1_F11R1_FB16 ( -- x addr ) 16 bit CAN1_F11R1 ; \ CAN1_F11R1_FB16, Filter bits
    : CAN1_F11R1_FB17 ( -- x addr ) 17 bit CAN1_F11R1 ; \ CAN1_F11R1_FB17, Filter bits
    : CAN1_F11R1_FB18 ( -- x addr ) 18 bit CAN1_F11R1 ; \ CAN1_F11R1_FB18, Filter bits
    : CAN1_F11R1_FB19 ( -- x addr ) 19 bit CAN1_F11R1 ; \ CAN1_F11R1_FB19, Filter bits
    : CAN1_F11R1_FB20 ( -- x addr ) 20 bit CAN1_F11R1 ; \ CAN1_F11R1_FB20, Filter bits
    : CAN1_F11R1_FB21 ( -- x addr ) 21 bit CAN1_F11R1 ; \ CAN1_F11R1_FB21, Filter bits
    : CAN1_F11R1_FB22 ( -- x addr ) 22 bit CAN1_F11R1 ; \ CAN1_F11R1_FB22, Filter bits
    : CAN1_F11R1_FB23 ( -- x addr ) 23 bit CAN1_F11R1 ; \ CAN1_F11R1_FB23, Filter bits
    : CAN1_F11R1_FB24 ( -- x addr ) 24 bit CAN1_F11R1 ; \ CAN1_F11R1_FB24, Filter bits
    : CAN1_F11R1_FB25 ( -- x addr ) 25 bit CAN1_F11R1 ; \ CAN1_F11R1_FB25, Filter bits
    : CAN1_F11R1_FB26 ( -- x addr ) 26 bit CAN1_F11R1 ; \ CAN1_F11R1_FB26, Filter bits
    : CAN1_F11R1_FB27 ( -- x addr ) 27 bit CAN1_F11R1 ; \ CAN1_F11R1_FB27, Filter bits
    : CAN1_F11R1_FB28 ( -- x addr ) 28 bit CAN1_F11R1 ; \ CAN1_F11R1_FB28, Filter bits
    : CAN1_F11R1_FB29 ( -- x addr ) 29 bit CAN1_F11R1 ; \ CAN1_F11R1_FB29, Filter bits
    : CAN1_F11R1_FB30 ( -- x addr ) 30 bit CAN1_F11R1 ; \ CAN1_F11R1_FB30, Filter bits
    : CAN1_F11R1_FB31 ( -- x addr ) 31 bit CAN1_F11R1 ; \ CAN1_F11R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F11R2 (read-write) Reset:0x00000000
    : CAN1_F11R2_FB0 ( -- x addr ) 0 bit CAN1_F11R2 ; \ CAN1_F11R2_FB0, Filter bits
    : CAN1_F11R2_FB1 ( -- x addr ) 1 bit CAN1_F11R2 ; \ CAN1_F11R2_FB1, Filter bits
    : CAN1_F11R2_FB2 ( -- x addr ) 2 bit CAN1_F11R2 ; \ CAN1_F11R2_FB2, Filter bits
    : CAN1_F11R2_FB3 ( -- x addr ) 3 bit CAN1_F11R2 ; \ CAN1_F11R2_FB3, Filter bits
    : CAN1_F11R2_FB4 ( -- x addr ) 4 bit CAN1_F11R2 ; \ CAN1_F11R2_FB4, Filter bits
    : CAN1_F11R2_FB5 ( -- x addr ) 5 bit CAN1_F11R2 ; \ CAN1_F11R2_FB5, Filter bits
    : CAN1_F11R2_FB6 ( -- x addr ) 6 bit CAN1_F11R2 ; \ CAN1_F11R2_FB6, Filter bits
    : CAN1_F11R2_FB7 ( -- x addr ) 7 bit CAN1_F11R2 ; \ CAN1_F11R2_FB7, Filter bits
    : CAN1_F11R2_FB8 ( -- x addr ) 8 bit CAN1_F11R2 ; \ CAN1_F11R2_FB8, Filter bits
    : CAN1_F11R2_FB9 ( -- x addr ) 9 bit CAN1_F11R2 ; \ CAN1_F11R2_FB9, Filter bits
    : CAN1_F11R2_FB10 ( -- x addr ) 10 bit CAN1_F11R2 ; \ CAN1_F11R2_FB10, Filter bits
    : CAN1_F11R2_FB11 ( -- x addr ) 11 bit CAN1_F11R2 ; \ CAN1_F11R2_FB11, Filter bits
    : CAN1_F11R2_FB12 ( -- x addr ) 12 bit CAN1_F11R2 ; \ CAN1_F11R2_FB12, Filter bits
    : CAN1_F11R2_FB13 ( -- x addr ) 13 bit CAN1_F11R2 ; \ CAN1_F11R2_FB13, Filter bits
    : CAN1_F11R2_FB14 ( -- x addr ) 14 bit CAN1_F11R2 ; \ CAN1_F11R2_FB14, Filter bits
    : CAN1_F11R2_FB15 ( -- x addr ) 15 bit CAN1_F11R2 ; \ CAN1_F11R2_FB15, Filter bits
    : CAN1_F11R2_FB16 ( -- x addr ) 16 bit CAN1_F11R2 ; \ CAN1_F11R2_FB16, Filter bits
    : CAN1_F11R2_FB17 ( -- x addr ) 17 bit CAN1_F11R2 ; \ CAN1_F11R2_FB17, Filter bits
    : CAN1_F11R2_FB18 ( -- x addr ) 18 bit CAN1_F11R2 ; \ CAN1_F11R2_FB18, Filter bits
    : CAN1_F11R2_FB19 ( -- x addr ) 19 bit CAN1_F11R2 ; \ CAN1_F11R2_FB19, Filter bits
    : CAN1_F11R2_FB20 ( -- x addr ) 20 bit CAN1_F11R2 ; \ CAN1_F11R2_FB20, Filter bits
    : CAN1_F11R2_FB21 ( -- x addr ) 21 bit CAN1_F11R2 ; \ CAN1_F11R2_FB21, Filter bits
    : CAN1_F11R2_FB22 ( -- x addr ) 22 bit CAN1_F11R2 ; \ CAN1_F11R2_FB22, Filter bits
    : CAN1_F11R2_FB23 ( -- x addr ) 23 bit CAN1_F11R2 ; \ CAN1_F11R2_FB23, Filter bits
    : CAN1_F11R2_FB24 ( -- x addr ) 24 bit CAN1_F11R2 ; \ CAN1_F11R2_FB24, Filter bits
    : CAN1_F11R2_FB25 ( -- x addr ) 25 bit CAN1_F11R2 ; \ CAN1_F11R2_FB25, Filter bits
    : CAN1_F11R2_FB26 ( -- x addr ) 26 bit CAN1_F11R2 ; \ CAN1_F11R2_FB26, Filter bits
    : CAN1_F11R2_FB27 ( -- x addr ) 27 bit CAN1_F11R2 ; \ CAN1_F11R2_FB27, Filter bits
    : CAN1_F11R2_FB28 ( -- x addr ) 28 bit CAN1_F11R2 ; \ CAN1_F11R2_FB28, Filter bits
    : CAN1_F11R2_FB29 ( -- x addr ) 29 bit CAN1_F11R2 ; \ CAN1_F11R2_FB29, Filter bits
    : CAN1_F11R2_FB30 ( -- x addr ) 30 bit CAN1_F11R2 ; \ CAN1_F11R2_FB30, Filter bits
    : CAN1_F11R2_FB31 ( -- x addr ) 31 bit CAN1_F11R2 ; \ CAN1_F11R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F12R1 (read-write) Reset:0x00000000
    : CAN1_F12R1_FB0 ( -- x addr ) 0 bit CAN1_F12R1 ; \ CAN1_F12R1_FB0, Filter bits
    : CAN1_F12R1_FB1 ( -- x addr ) 1 bit CAN1_F12R1 ; \ CAN1_F12R1_FB1, Filter bits
    : CAN1_F12R1_FB2 ( -- x addr ) 2 bit CAN1_F12R1 ; \ CAN1_F12R1_FB2, Filter bits
    : CAN1_F12R1_FB3 ( -- x addr ) 3 bit CAN1_F12R1 ; \ CAN1_F12R1_FB3, Filter bits
    : CAN1_F12R1_FB4 ( -- x addr ) 4 bit CAN1_F12R1 ; \ CAN1_F12R1_FB4, Filter bits
    : CAN1_F12R1_FB5 ( -- x addr ) 5 bit CAN1_F12R1 ; \ CAN1_F12R1_FB5, Filter bits
    : CAN1_F12R1_FB6 ( -- x addr ) 6 bit CAN1_F12R1 ; \ CAN1_F12R1_FB6, Filter bits
    : CAN1_F12R1_FB7 ( -- x addr ) 7 bit CAN1_F12R1 ; \ CAN1_F12R1_FB7, Filter bits
    : CAN1_F12R1_FB8 ( -- x addr ) 8 bit CAN1_F12R1 ; \ CAN1_F12R1_FB8, Filter bits
    : CAN1_F12R1_FB9 ( -- x addr ) 9 bit CAN1_F12R1 ; \ CAN1_F12R1_FB9, Filter bits
    : CAN1_F12R1_FB10 ( -- x addr ) 10 bit CAN1_F12R1 ; \ CAN1_F12R1_FB10, Filter bits
    : CAN1_F12R1_FB11 ( -- x addr ) 11 bit CAN1_F12R1 ; \ CAN1_F12R1_FB11, Filter bits
    : CAN1_F12R1_FB12 ( -- x addr ) 12 bit CAN1_F12R1 ; \ CAN1_F12R1_FB12, Filter bits
    : CAN1_F12R1_FB13 ( -- x addr ) 13 bit CAN1_F12R1 ; \ CAN1_F12R1_FB13, Filter bits
    : CAN1_F12R1_FB14 ( -- x addr ) 14 bit CAN1_F12R1 ; \ CAN1_F12R1_FB14, Filter bits
    : CAN1_F12R1_FB15 ( -- x addr ) 15 bit CAN1_F12R1 ; \ CAN1_F12R1_FB15, Filter bits
    : CAN1_F12R1_FB16 ( -- x addr ) 16 bit CAN1_F12R1 ; \ CAN1_F12R1_FB16, Filter bits
    : CAN1_F12R1_FB17 ( -- x addr ) 17 bit CAN1_F12R1 ; \ CAN1_F12R1_FB17, Filter bits
    : CAN1_F12R1_FB18 ( -- x addr ) 18 bit CAN1_F12R1 ; \ CAN1_F12R1_FB18, Filter bits
    : CAN1_F12R1_FB19 ( -- x addr ) 19 bit CAN1_F12R1 ; \ CAN1_F12R1_FB19, Filter bits
    : CAN1_F12R1_FB20 ( -- x addr ) 20 bit CAN1_F12R1 ; \ CAN1_F12R1_FB20, Filter bits
    : CAN1_F12R1_FB21 ( -- x addr ) 21 bit CAN1_F12R1 ; \ CAN1_F12R1_FB21, Filter bits
    : CAN1_F12R1_FB22 ( -- x addr ) 22 bit CAN1_F12R1 ; \ CAN1_F12R1_FB22, Filter bits
    : CAN1_F12R1_FB23 ( -- x addr ) 23 bit CAN1_F12R1 ; \ CAN1_F12R1_FB23, Filter bits
    : CAN1_F12R1_FB24 ( -- x addr ) 24 bit CAN1_F12R1 ; \ CAN1_F12R1_FB24, Filter bits
    : CAN1_F12R1_FB25 ( -- x addr ) 25 bit CAN1_F12R1 ; \ CAN1_F12R1_FB25, Filter bits
    : CAN1_F12R1_FB26 ( -- x addr ) 26 bit CAN1_F12R1 ; \ CAN1_F12R1_FB26, Filter bits
    : CAN1_F12R1_FB27 ( -- x addr ) 27 bit CAN1_F12R1 ; \ CAN1_F12R1_FB27, Filter bits
    : CAN1_F12R1_FB28 ( -- x addr ) 28 bit CAN1_F12R1 ; \ CAN1_F12R1_FB28, Filter bits
    : CAN1_F12R1_FB29 ( -- x addr ) 29 bit CAN1_F12R1 ; \ CAN1_F12R1_FB29, Filter bits
    : CAN1_F12R1_FB30 ( -- x addr ) 30 bit CAN1_F12R1 ; \ CAN1_F12R1_FB30, Filter bits
    : CAN1_F12R1_FB31 ( -- x addr ) 31 bit CAN1_F12R1 ; \ CAN1_F12R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F12R2 (read-write) Reset:0x00000000
    : CAN1_F12R2_FB0 ( -- x addr ) 0 bit CAN1_F12R2 ; \ CAN1_F12R2_FB0, Filter bits
    : CAN1_F12R2_FB1 ( -- x addr ) 1 bit CAN1_F12R2 ; \ CAN1_F12R2_FB1, Filter bits
    : CAN1_F12R2_FB2 ( -- x addr ) 2 bit CAN1_F12R2 ; \ CAN1_F12R2_FB2, Filter bits
    : CAN1_F12R2_FB3 ( -- x addr ) 3 bit CAN1_F12R2 ; \ CAN1_F12R2_FB3, Filter bits
    : CAN1_F12R2_FB4 ( -- x addr ) 4 bit CAN1_F12R2 ; \ CAN1_F12R2_FB4, Filter bits
    : CAN1_F12R2_FB5 ( -- x addr ) 5 bit CAN1_F12R2 ; \ CAN1_F12R2_FB5, Filter bits
    : CAN1_F12R2_FB6 ( -- x addr ) 6 bit CAN1_F12R2 ; \ CAN1_F12R2_FB6, Filter bits
    : CAN1_F12R2_FB7 ( -- x addr ) 7 bit CAN1_F12R2 ; \ CAN1_F12R2_FB7, Filter bits
    : CAN1_F12R2_FB8 ( -- x addr ) 8 bit CAN1_F12R2 ; \ CAN1_F12R2_FB8, Filter bits
    : CAN1_F12R2_FB9 ( -- x addr ) 9 bit CAN1_F12R2 ; \ CAN1_F12R2_FB9, Filter bits
    : CAN1_F12R2_FB10 ( -- x addr ) 10 bit CAN1_F12R2 ; \ CAN1_F12R2_FB10, Filter bits
    : CAN1_F12R2_FB11 ( -- x addr ) 11 bit CAN1_F12R2 ; \ CAN1_F12R2_FB11, Filter bits
    : CAN1_F12R2_FB12 ( -- x addr ) 12 bit CAN1_F12R2 ; \ CAN1_F12R2_FB12, Filter bits
    : CAN1_F12R2_FB13 ( -- x addr ) 13 bit CAN1_F12R2 ; \ CAN1_F12R2_FB13, Filter bits
    : CAN1_F12R2_FB14 ( -- x addr ) 14 bit CAN1_F12R2 ; \ CAN1_F12R2_FB14, Filter bits
    : CAN1_F12R2_FB15 ( -- x addr ) 15 bit CAN1_F12R2 ; \ CAN1_F12R2_FB15, Filter bits
    : CAN1_F12R2_FB16 ( -- x addr ) 16 bit CAN1_F12R2 ; \ CAN1_F12R2_FB16, Filter bits
    : CAN1_F12R2_FB17 ( -- x addr ) 17 bit CAN1_F12R2 ; \ CAN1_F12R2_FB17, Filter bits
    : CAN1_F12R2_FB18 ( -- x addr ) 18 bit CAN1_F12R2 ; \ CAN1_F12R2_FB18, Filter bits
    : CAN1_F12R2_FB19 ( -- x addr ) 19 bit CAN1_F12R2 ; \ CAN1_F12R2_FB19, Filter bits
    : CAN1_F12R2_FB20 ( -- x addr ) 20 bit CAN1_F12R2 ; \ CAN1_F12R2_FB20, Filter bits
    : CAN1_F12R2_FB21 ( -- x addr ) 21 bit CAN1_F12R2 ; \ CAN1_F12R2_FB21, Filter bits
    : CAN1_F12R2_FB22 ( -- x addr ) 22 bit CAN1_F12R2 ; \ CAN1_F12R2_FB22, Filter bits
    : CAN1_F12R2_FB23 ( -- x addr ) 23 bit CAN1_F12R2 ; \ CAN1_F12R2_FB23, Filter bits
    : CAN1_F12R2_FB24 ( -- x addr ) 24 bit CAN1_F12R2 ; \ CAN1_F12R2_FB24, Filter bits
    : CAN1_F12R2_FB25 ( -- x addr ) 25 bit CAN1_F12R2 ; \ CAN1_F12R2_FB25, Filter bits
    : CAN1_F12R2_FB26 ( -- x addr ) 26 bit CAN1_F12R2 ; \ CAN1_F12R2_FB26, Filter bits
    : CAN1_F12R2_FB27 ( -- x addr ) 27 bit CAN1_F12R2 ; \ CAN1_F12R2_FB27, Filter bits
    : CAN1_F12R2_FB28 ( -- x addr ) 28 bit CAN1_F12R2 ; \ CAN1_F12R2_FB28, Filter bits
    : CAN1_F12R2_FB29 ( -- x addr ) 29 bit CAN1_F12R2 ; \ CAN1_F12R2_FB29, Filter bits
    : CAN1_F12R2_FB30 ( -- x addr ) 30 bit CAN1_F12R2 ; \ CAN1_F12R2_FB30, Filter bits
    : CAN1_F12R2_FB31 ( -- x addr ) 31 bit CAN1_F12R2 ; \ CAN1_F12R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F13R1 (read-write) Reset:0x00000000
    : CAN1_F13R1_FB0 ( -- x addr ) 0 bit CAN1_F13R1 ; \ CAN1_F13R1_FB0, Filter bits
    : CAN1_F13R1_FB1 ( -- x addr ) 1 bit CAN1_F13R1 ; \ CAN1_F13R1_FB1, Filter bits
    : CAN1_F13R1_FB2 ( -- x addr ) 2 bit CAN1_F13R1 ; \ CAN1_F13R1_FB2, Filter bits
    : CAN1_F13R1_FB3 ( -- x addr ) 3 bit CAN1_F13R1 ; \ CAN1_F13R1_FB3, Filter bits
    : CAN1_F13R1_FB4 ( -- x addr ) 4 bit CAN1_F13R1 ; \ CAN1_F13R1_FB4, Filter bits
    : CAN1_F13R1_FB5 ( -- x addr ) 5 bit CAN1_F13R1 ; \ CAN1_F13R1_FB5, Filter bits
    : CAN1_F13R1_FB6 ( -- x addr ) 6 bit CAN1_F13R1 ; \ CAN1_F13R1_FB6, Filter bits
    : CAN1_F13R1_FB7 ( -- x addr ) 7 bit CAN1_F13R1 ; \ CAN1_F13R1_FB7, Filter bits
    : CAN1_F13R1_FB8 ( -- x addr ) 8 bit CAN1_F13R1 ; \ CAN1_F13R1_FB8, Filter bits
    : CAN1_F13R1_FB9 ( -- x addr ) 9 bit CAN1_F13R1 ; \ CAN1_F13R1_FB9, Filter bits
    : CAN1_F13R1_FB10 ( -- x addr ) 10 bit CAN1_F13R1 ; \ CAN1_F13R1_FB10, Filter bits
    : CAN1_F13R1_FB11 ( -- x addr ) 11 bit CAN1_F13R1 ; \ CAN1_F13R1_FB11, Filter bits
    : CAN1_F13R1_FB12 ( -- x addr ) 12 bit CAN1_F13R1 ; \ CAN1_F13R1_FB12, Filter bits
    : CAN1_F13R1_FB13 ( -- x addr ) 13 bit CAN1_F13R1 ; \ CAN1_F13R1_FB13, Filter bits
    : CAN1_F13R1_FB14 ( -- x addr ) 14 bit CAN1_F13R1 ; \ CAN1_F13R1_FB14, Filter bits
    : CAN1_F13R1_FB15 ( -- x addr ) 15 bit CAN1_F13R1 ; \ CAN1_F13R1_FB15, Filter bits
    : CAN1_F13R1_FB16 ( -- x addr ) 16 bit CAN1_F13R1 ; \ CAN1_F13R1_FB16, Filter bits
    : CAN1_F13R1_FB17 ( -- x addr ) 17 bit CAN1_F13R1 ; \ CAN1_F13R1_FB17, Filter bits
    : CAN1_F13R1_FB18 ( -- x addr ) 18 bit CAN1_F13R1 ; \ CAN1_F13R1_FB18, Filter bits
    : CAN1_F13R1_FB19 ( -- x addr ) 19 bit CAN1_F13R1 ; \ CAN1_F13R1_FB19, Filter bits
    : CAN1_F13R1_FB20 ( -- x addr ) 20 bit CAN1_F13R1 ; \ CAN1_F13R1_FB20, Filter bits
    : CAN1_F13R1_FB21 ( -- x addr ) 21 bit CAN1_F13R1 ; \ CAN1_F13R1_FB21, Filter bits
    : CAN1_F13R1_FB22 ( -- x addr ) 22 bit CAN1_F13R1 ; \ CAN1_F13R1_FB22, Filter bits
    : CAN1_F13R1_FB23 ( -- x addr ) 23 bit CAN1_F13R1 ; \ CAN1_F13R1_FB23, Filter bits
    : CAN1_F13R1_FB24 ( -- x addr ) 24 bit CAN1_F13R1 ; \ CAN1_F13R1_FB24, Filter bits
    : CAN1_F13R1_FB25 ( -- x addr ) 25 bit CAN1_F13R1 ; \ CAN1_F13R1_FB25, Filter bits
    : CAN1_F13R1_FB26 ( -- x addr ) 26 bit CAN1_F13R1 ; \ CAN1_F13R1_FB26, Filter bits
    : CAN1_F13R1_FB27 ( -- x addr ) 27 bit CAN1_F13R1 ; \ CAN1_F13R1_FB27, Filter bits
    : CAN1_F13R1_FB28 ( -- x addr ) 28 bit CAN1_F13R1 ; \ CAN1_F13R1_FB28, Filter bits
    : CAN1_F13R1_FB29 ( -- x addr ) 29 bit CAN1_F13R1 ; \ CAN1_F13R1_FB29, Filter bits
    : CAN1_F13R1_FB30 ( -- x addr ) 30 bit CAN1_F13R1 ; \ CAN1_F13R1_FB30, Filter bits
    : CAN1_F13R1_FB31 ( -- x addr ) 31 bit CAN1_F13R1 ; \ CAN1_F13R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F13R2 (read-write) Reset:0x00000000
    : CAN1_F13R2_FB0 ( -- x addr ) 0 bit CAN1_F13R2 ; \ CAN1_F13R2_FB0, Filter bits
    : CAN1_F13R2_FB1 ( -- x addr ) 1 bit CAN1_F13R2 ; \ CAN1_F13R2_FB1, Filter bits
    : CAN1_F13R2_FB2 ( -- x addr ) 2 bit CAN1_F13R2 ; \ CAN1_F13R2_FB2, Filter bits
    : CAN1_F13R2_FB3 ( -- x addr ) 3 bit CAN1_F13R2 ; \ CAN1_F13R2_FB3, Filter bits
    : CAN1_F13R2_FB4 ( -- x addr ) 4 bit CAN1_F13R2 ; \ CAN1_F13R2_FB4, Filter bits
    : CAN1_F13R2_FB5 ( -- x addr ) 5 bit CAN1_F13R2 ; \ CAN1_F13R2_FB5, Filter bits
    : CAN1_F13R2_FB6 ( -- x addr ) 6 bit CAN1_F13R2 ; \ CAN1_F13R2_FB6, Filter bits
    : CAN1_F13R2_FB7 ( -- x addr ) 7 bit CAN1_F13R2 ; \ CAN1_F13R2_FB7, Filter bits
    : CAN1_F13R2_FB8 ( -- x addr ) 8 bit CAN1_F13R2 ; \ CAN1_F13R2_FB8, Filter bits
    : CAN1_F13R2_FB9 ( -- x addr ) 9 bit CAN1_F13R2 ; \ CAN1_F13R2_FB9, Filter bits
    : CAN1_F13R2_FB10 ( -- x addr ) 10 bit CAN1_F13R2 ; \ CAN1_F13R2_FB10, Filter bits
    : CAN1_F13R2_FB11 ( -- x addr ) 11 bit CAN1_F13R2 ; \ CAN1_F13R2_FB11, Filter bits
    : CAN1_F13R2_FB12 ( -- x addr ) 12 bit CAN1_F13R2 ; \ CAN1_F13R2_FB12, Filter bits
    : CAN1_F13R2_FB13 ( -- x addr ) 13 bit CAN1_F13R2 ; \ CAN1_F13R2_FB13, Filter bits
    : CAN1_F13R2_FB14 ( -- x addr ) 14 bit CAN1_F13R2 ; \ CAN1_F13R2_FB14, Filter bits
    : CAN1_F13R2_FB15 ( -- x addr ) 15 bit CAN1_F13R2 ; \ CAN1_F13R2_FB15, Filter bits
    : CAN1_F13R2_FB16 ( -- x addr ) 16 bit CAN1_F13R2 ; \ CAN1_F13R2_FB16, Filter bits
    : CAN1_F13R2_FB17 ( -- x addr ) 17 bit CAN1_F13R2 ; \ CAN1_F13R2_FB17, Filter bits
    : CAN1_F13R2_FB18 ( -- x addr ) 18 bit CAN1_F13R2 ; \ CAN1_F13R2_FB18, Filter bits
    : CAN1_F13R2_FB19 ( -- x addr ) 19 bit CAN1_F13R2 ; \ CAN1_F13R2_FB19, Filter bits
    : CAN1_F13R2_FB20 ( -- x addr ) 20 bit CAN1_F13R2 ; \ CAN1_F13R2_FB20, Filter bits
    : CAN1_F13R2_FB21 ( -- x addr ) 21 bit CAN1_F13R2 ; \ CAN1_F13R2_FB21, Filter bits
    : CAN1_F13R2_FB22 ( -- x addr ) 22 bit CAN1_F13R2 ; \ CAN1_F13R2_FB22, Filter bits
    : CAN1_F13R2_FB23 ( -- x addr ) 23 bit CAN1_F13R2 ; \ CAN1_F13R2_FB23, Filter bits
    : CAN1_F13R2_FB24 ( -- x addr ) 24 bit CAN1_F13R2 ; \ CAN1_F13R2_FB24, Filter bits
    : CAN1_F13R2_FB25 ( -- x addr ) 25 bit CAN1_F13R2 ; \ CAN1_F13R2_FB25, Filter bits
    : CAN1_F13R2_FB26 ( -- x addr ) 26 bit CAN1_F13R2 ; \ CAN1_F13R2_FB26, Filter bits
    : CAN1_F13R2_FB27 ( -- x addr ) 27 bit CAN1_F13R2 ; \ CAN1_F13R2_FB27, Filter bits
    : CAN1_F13R2_FB28 ( -- x addr ) 28 bit CAN1_F13R2 ; \ CAN1_F13R2_FB28, Filter bits
    : CAN1_F13R2_FB29 ( -- x addr ) 29 bit CAN1_F13R2 ; \ CAN1_F13R2_FB29, Filter bits
    : CAN1_F13R2_FB30 ( -- x addr ) 30 bit CAN1_F13R2 ; \ CAN1_F13R2_FB30, Filter bits
    : CAN1_F13R2_FB31 ( -- x addr ) 31 bit CAN1_F13R2 ; \ CAN1_F13R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F14R1 (read-write) Reset:0x00000000
    : CAN1_F14R1_FB0 ( -- x addr ) 0 bit CAN1_F14R1 ; \ CAN1_F14R1_FB0, Filter bits
    : CAN1_F14R1_FB1 ( -- x addr ) 1 bit CAN1_F14R1 ; \ CAN1_F14R1_FB1, Filter bits
    : CAN1_F14R1_FB2 ( -- x addr ) 2 bit CAN1_F14R1 ; \ CAN1_F14R1_FB2, Filter bits
    : CAN1_F14R1_FB3 ( -- x addr ) 3 bit CAN1_F14R1 ; \ CAN1_F14R1_FB3, Filter bits
    : CAN1_F14R1_FB4 ( -- x addr ) 4 bit CAN1_F14R1 ; \ CAN1_F14R1_FB4, Filter bits
    : CAN1_F14R1_FB5 ( -- x addr ) 5 bit CAN1_F14R1 ; \ CAN1_F14R1_FB5, Filter bits
    : CAN1_F14R1_FB6 ( -- x addr ) 6 bit CAN1_F14R1 ; \ CAN1_F14R1_FB6, Filter bits
    : CAN1_F14R1_FB7 ( -- x addr ) 7 bit CAN1_F14R1 ; \ CAN1_F14R1_FB7, Filter bits
    : CAN1_F14R1_FB8 ( -- x addr ) 8 bit CAN1_F14R1 ; \ CAN1_F14R1_FB8, Filter bits
    : CAN1_F14R1_FB9 ( -- x addr ) 9 bit CAN1_F14R1 ; \ CAN1_F14R1_FB9, Filter bits
    : CAN1_F14R1_FB10 ( -- x addr ) 10 bit CAN1_F14R1 ; \ CAN1_F14R1_FB10, Filter bits
    : CAN1_F14R1_FB11 ( -- x addr ) 11 bit CAN1_F14R1 ; \ CAN1_F14R1_FB11, Filter bits
    : CAN1_F14R1_FB12 ( -- x addr ) 12 bit CAN1_F14R1 ; \ CAN1_F14R1_FB12, Filter bits
    : CAN1_F14R1_FB13 ( -- x addr ) 13 bit CAN1_F14R1 ; \ CAN1_F14R1_FB13, Filter bits
    : CAN1_F14R1_FB14 ( -- x addr ) 14 bit CAN1_F14R1 ; \ CAN1_F14R1_FB14, Filter bits
    : CAN1_F14R1_FB15 ( -- x addr ) 15 bit CAN1_F14R1 ; \ CAN1_F14R1_FB15, Filter bits
    : CAN1_F14R1_FB16 ( -- x addr ) 16 bit CAN1_F14R1 ; \ CAN1_F14R1_FB16, Filter bits
    : CAN1_F14R1_FB17 ( -- x addr ) 17 bit CAN1_F14R1 ; \ CAN1_F14R1_FB17, Filter bits
    : CAN1_F14R1_FB18 ( -- x addr ) 18 bit CAN1_F14R1 ; \ CAN1_F14R1_FB18, Filter bits
    : CAN1_F14R1_FB19 ( -- x addr ) 19 bit CAN1_F14R1 ; \ CAN1_F14R1_FB19, Filter bits
    : CAN1_F14R1_FB20 ( -- x addr ) 20 bit CAN1_F14R1 ; \ CAN1_F14R1_FB20, Filter bits
    : CAN1_F14R1_FB21 ( -- x addr ) 21 bit CAN1_F14R1 ; \ CAN1_F14R1_FB21, Filter bits
    : CAN1_F14R1_FB22 ( -- x addr ) 22 bit CAN1_F14R1 ; \ CAN1_F14R1_FB22, Filter bits
    : CAN1_F14R1_FB23 ( -- x addr ) 23 bit CAN1_F14R1 ; \ CAN1_F14R1_FB23, Filter bits
    : CAN1_F14R1_FB24 ( -- x addr ) 24 bit CAN1_F14R1 ; \ CAN1_F14R1_FB24, Filter bits
    : CAN1_F14R1_FB25 ( -- x addr ) 25 bit CAN1_F14R1 ; \ CAN1_F14R1_FB25, Filter bits
    : CAN1_F14R1_FB26 ( -- x addr ) 26 bit CAN1_F14R1 ; \ CAN1_F14R1_FB26, Filter bits
    : CAN1_F14R1_FB27 ( -- x addr ) 27 bit CAN1_F14R1 ; \ CAN1_F14R1_FB27, Filter bits
    : CAN1_F14R1_FB28 ( -- x addr ) 28 bit CAN1_F14R1 ; \ CAN1_F14R1_FB28, Filter bits
    : CAN1_F14R1_FB29 ( -- x addr ) 29 bit CAN1_F14R1 ; \ CAN1_F14R1_FB29, Filter bits
    : CAN1_F14R1_FB30 ( -- x addr ) 30 bit CAN1_F14R1 ; \ CAN1_F14R1_FB30, Filter bits
    : CAN1_F14R1_FB31 ( -- x addr ) 31 bit CAN1_F14R1 ; \ CAN1_F14R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F14R2 (read-write) Reset:0x00000000
    : CAN1_F14R2_FB0 ( -- x addr ) 0 bit CAN1_F14R2 ; \ CAN1_F14R2_FB0, Filter bits
    : CAN1_F14R2_FB1 ( -- x addr ) 1 bit CAN1_F14R2 ; \ CAN1_F14R2_FB1, Filter bits
    : CAN1_F14R2_FB2 ( -- x addr ) 2 bit CAN1_F14R2 ; \ CAN1_F14R2_FB2, Filter bits
    : CAN1_F14R2_FB3 ( -- x addr ) 3 bit CAN1_F14R2 ; \ CAN1_F14R2_FB3, Filter bits
    : CAN1_F14R2_FB4 ( -- x addr ) 4 bit CAN1_F14R2 ; \ CAN1_F14R2_FB4, Filter bits
    : CAN1_F14R2_FB5 ( -- x addr ) 5 bit CAN1_F14R2 ; \ CAN1_F14R2_FB5, Filter bits
    : CAN1_F14R2_FB6 ( -- x addr ) 6 bit CAN1_F14R2 ; \ CAN1_F14R2_FB6, Filter bits
    : CAN1_F14R2_FB7 ( -- x addr ) 7 bit CAN1_F14R2 ; \ CAN1_F14R2_FB7, Filter bits
    : CAN1_F14R2_FB8 ( -- x addr ) 8 bit CAN1_F14R2 ; \ CAN1_F14R2_FB8, Filter bits
    : CAN1_F14R2_FB9 ( -- x addr ) 9 bit CAN1_F14R2 ; \ CAN1_F14R2_FB9, Filter bits
    : CAN1_F14R2_FB10 ( -- x addr ) 10 bit CAN1_F14R2 ; \ CAN1_F14R2_FB10, Filter bits
    : CAN1_F14R2_FB11 ( -- x addr ) 11 bit CAN1_F14R2 ; \ CAN1_F14R2_FB11, Filter bits
    : CAN1_F14R2_FB12 ( -- x addr ) 12 bit CAN1_F14R2 ; \ CAN1_F14R2_FB12, Filter bits
    : CAN1_F14R2_FB13 ( -- x addr ) 13 bit CAN1_F14R2 ; \ CAN1_F14R2_FB13, Filter bits
    : CAN1_F14R2_FB14 ( -- x addr ) 14 bit CAN1_F14R2 ; \ CAN1_F14R2_FB14, Filter bits
    : CAN1_F14R2_FB15 ( -- x addr ) 15 bit CAN1_F14R2 ; \ CAN1_F14R2_FB15, Filter bits
    : CAN1_F14R2_FB16 ( -- x addr ) 16 bit CAN1_F14R2 ; \ CAN1_F14R2_FB16, Filter bits
    : CAN1_F14R2_FB17 ( -- x addr ) 17 bit CAN1_F14R2 ; \ CAN1_F14R2_FB17, Filter bits
    : CAN1_F14R2_FB18 ( -- x addr ) 18 bit CAN1_F14R2 ; \ CAN1_F14R2_FB18, Filter bits
    : CAN1_F14R2_FB19 ( -- x addr ) 19 bit CAN1_F14R2 ; \ CAN1_F14R2_FB19, Filter bits
    : CAN1_F14R2_FB20 ( -- x addr ) 20 bit CAN1_F14R2 ; \ CAN1_F14R2_FB20, Filter bits
    : CAN1_F14R2_FB21 ( -- x addr ) 21 bit CAN1_F14R2 ; \ CAN1_F14R2_FB21, Filter bits
    : CAN1_F14R2_FB22 ( -- x addr ) 22 bit CAN1_F14R2 ; \ CAN1_F14R2_FB22, Filter bits
    : CAN1_F14R2_FB23 ( -- x addr ) 23 bit CAN1_F14R2 ; \ CAN1_F14R2_FB23, Filter bits
    : CAN1_F14R2_FB24 ( -- x addr ) 24 bit CAN1_F14R2 ; \ CAN1_F14R2_FB24, Filter bits
    : CAN1_F14R2_FB25 ( -- x addr ) 25 bit CAN1_F14R2 ; \ CAN1_F14R2_FB25, Filter bits
    : CAN1_F14R2_FB26 ( -- x addr ) 26 bit CAN1_F14R2 ; \ CAN1_F14R2_FB26, Filter bits
    : CAN1_F14R2_FB27 ( -- x addr ) 27 bit CAN1_F14R2 ; \ CAN1_F14R2_FB27, Filter bits
    : CAN1_F14R2_FB28 ( -- x addr ) 28 bit CAN1_F14R2 ; \ CAN1_F14R2_FB28, Filter bits
    : CAN1_F14R2_FB29 ( -- x addr ) 29 bit CAN1_F14R2 ; \ CAN1_F14R2_FB29, Filter bits
    : CAN1_F14R2_FB30 ( -- x addr ) 30 bit CAN1_F14R2 ; \ CAN1_F14R2_FB30, Filter bits
    : CAN1_F14R2_FB31 ( -- x addr ) 31 bit CAN1_F14R2 ; \ CAN1_F14R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F15R1 (read-write) Reset:0x00000000
    : CAN1_F15R1_FB0 ( -- x addr ) 0 bit CAN1_F15R1 ; \ CAN1_F15R1_FB0, Filter bits
    : CAN1_F15R1_FB1 ( -- x addr ) 1 bit CAN1_F15R1 ; \ CAN1_F15R1_FB1, Filter bits
    : CAN1_F15R1_FB2 ( -- x addr ) 2 bit CAN1_F15R1 ; \ CAN1_F15R1_FB2, Filter bits
    : CAN1_F15R1_FB3 ( -- x addr ) 3 bit CAN1_F15R1 ; \ CAN1_F15R1_FB3, Filter bits
    : CAN1_F15R1_FB4 ( -- x addr ) 4 bit CAN1_F15R1 ; \ CAN1_F15R1_FB4, Filter bits
    : CAN1_F15R1_FB5 ( -- x addr ) 5 bit CAN1_F15R1 ; \ CAN1_F15R1_FB5, Filter bits
    : CAN1_F15R1_FB6 ( -- x addr ) 6 bit CAN1_F15R1 ; \ CAN1_F15R1_FB6, Filter bits
    : CAN1_F15R1_FB7 ( -- x addr ) 7 bit CAN1_F15R1 ; \ CAN1_F15R1_FB7, Filter bits
    : CAN1_F15R1_FB8 ( -- x addr ) 8 bit CAN1_F15R1 ; \ CAN1_F15R1_FB8, Filter bits
    : CAN1_F15R1_FB9 ( -- x addr ) 9 bit CAN1_F15R1 ; \ CAN1_F15R1_FB9, Filter bits
    : CAN1_F15R1_FB10 ( -- x addr ) 10 bit CAN1_F15R1 ; \ CAN1_F15R1_FB10, Filter bits
    : CAN1_F15R1_FB11 ( -- x addr ) 11 bit CAN1_F15R1 ; \ CAN1_F15R1_FB11, Filter bits
    : CAN1_F15R1_FB12 ( -- x addr ) 12 bit CAN1_F15R1 ; \ CAN1_F15R1_FB12, Filter bits
    : CAN1_F15R1_FB13 ( -- x addr ) 13 bit CAN1_F15R1 ; \ CAN1_F15R1_FB13, Filter bits
    : CAN1_F15R1_FB14 ( -- x addr ) 14 bit CAN1_F15R1 ; \ CAN1_F15R1_FB14, Filter bits
    : CAN1_F15R1_FB15 ( -- x addr ) 15 bit CAN1_F15R1 ; \ CAN1_F15R1_FB15, Filter bits
    : CAN1_F15R1_FB16 ( -- x addr ) 16 bit CAN1_F15R1 ; \ CAN1_F15R1_FB16, Filter bits
    : CAN1_F15R1_FB17 ( -- x addr ) 17 bit CAN1_F15R1 ; \ CAN1_F15R1_FB17, Filter bits
    : CAN1_F15R1_FB18 ( -- x addr ) 18 bit CAN1_F15R1 ; \ CAN1_F15R1_FB18, Filter bits
    : CAN1_F15R1_FB19 ( -- x addr ) 19 bit CAN1_F15R1 ; \ CAN1_F15R1_FB19, Filter bits
    : CAN1_F15R1_FB20 ( -- x addr ) 20 bit CAN1_F15R1 ; \ CAN1_F15R1_FB20, Filter bits
    : CAN1_F15R1_FB21 ( -- x addr ) 21 bit CAN1_F15R1 ; \ CAN1_F15R1_FB21, Filter bits
    : CAN1_F15R1_FB22 ( -- x addr ) 22 bit CAN1_F15R1 ; \ CAN1_F15R1_FB22, Filter bits
    : CAN1_F15R1_FB23 ( -- x addr ) 23 bit CAN1_F15R1 ; \ CAN1_F15R1_FB23, Filter bits
    : CAN1_F15R1_FB24 ( -- x addr ) 24 bit CAN1_F15R1 ; \ CAN1_F15R1_FB24, Filter bits
    : CAN1_F15R1_FB25 ( -- x addr ) 25 bit CAN1_F15R1 ; \ CAN1_F15R1_FB25, Filter bits
    : CAN1_F15R1_FB26 ( -- x addr ) 26 bit CAN1_F15R1 ; \ CAN1_F15R1_FB26, Filter bits
    : CAN1_F15R1_FB27 ( -- x addr ) 27 bit CAN1_F15R1 ; \ CAN1_F15R1_FB27, Filter bits
    : CAN1_F15R1_FB28 ( -- x addr ) 28 bit CAN1_F15R1 ; \ CAN1_F15R1_FB28, Filter bits
    : CAN1_F15R1_FB29 ( -- x addr ) 29 bit CAN1_F15R1 ; \ CAN1_F15R1_FB29, Filter bits
    : CAN1_F15R1_FB30 ( -- x addr ) 30 bit CAN1_F15R1 ; \ CAN1_F15R1_FB30, Filter bits
    : CAN1_F15R1_FB31 ( -- x addr ) 31 bit CAN1_F15R1 ; \ CAN1_F15R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F15R2 (read-write) Reset:0x00000000
    : CAN1_F15R2_FB0 ( -- x addr ) 0 bit CAN1_F15R2 ; \ CAN1_F15R2_FB0, Filter bits
    : CAN1_F15R2_FB1 ( -- x addr ) 1 bit CAN1_F15R2 ; \ CAN1_F15R2_FB1, Filter bits
    : CAN1_F15R2_FB2 ( -- x addr ) 2 bit CAN1_F15R2 ; \ CAN1_F15R2_FB2, Filter bits
    : CAN1_F15R2_FB3 ( -- x addr ) 3 bit CAN1_F15R2 ; \ CAN1_F15R2_FB3, Filter bits
    : CAN1_F15R2_FB4 ( -- x addr ) 4 bit CAN1_F15R2 ; \ CAN1_F15R2_FB4, Filter bits
    : CAN1_F15R2_FB5 ( -- x addr ) 5 bit CAN1_F15R2 ; \ CAN1_F15R2_FB5, Filter bits
    : CAN1_F15R2_FB6 ( -- x addr ) 6 bit CAN1_F15R2 ; \ CAN1_F15R2_FB6, Filter bits
    : CAN1_F15R2_FB7 ( -- x addr ) 7 bit CAN1_F15R2 ; \ CAN1_F15R2_FB7, Filter bits
    : CAN1_F15R2_FB8 ( -- x addr ) 8 bit CAN1_F15R2 ; \ CAN1_F15R2_FB8, Filter bits
    : CAN1_F15R2_FB9 ( -- x addr ) 9 bit CAN1_F15R2 ; \ CAN1_F15R2_FB9, Filter bits
    : CAN1_F15R2_FB10 ( -- x addr ) 10 bit CAN1_F15R2 ; \ CAN1_F15R2_FB10, Filter bits
    : CAN1_F15R2_FB11 ( -- x addr ) 11 bit CAN1_F15R2 ; \ CAN1_F15R2_FB11, Filter bits
    : CAN1_F15R2_FB12 ( -- x addr ) 12 bit CAN1_F15R2 ; \ CAN1_F15R2_FB12, Filter bits
    : CAN1_F15R2_FB13 ( -- x addr ) 13 bit CAN1_F15R2 ; \ CAN1_F15R2_FB13, Filter bits
    : CAN1_F15R2_FB14 ( -- x addr ) 14 bit CAN1_F15R2 ; \ CAN1_F15R2_FB14, Filter bits
    : CAN1_F15R2_FB15 ( -- x addr ) 15 bit CAN1_F15R2 ; \ CAN1_F15R2_FB15, Filter bits
    : CAN1_F15R2_FB16 ( -- x addr ) 16 bit CAN1_F15R2 ; \ CAN1_F15R2_FB16, Filter bits
    : CAN1_F15R2_FB17 ( -- x addr ) 17 bit CAN1_F15R2 ; \ CAN1_F15R2_FB17, Filter bits
    : CAN1_F15R2_FB18 ( -- x addr ) 18 bit CAN1_F15R2 ; \ CAN1_F15R2_FB18, Filter bits
    : CAN1_F15R2_FB19 ( -- x addr ) 19 bit CAN1_F15R2 ; \ CAN1_F15R2_FB19, Filter bits
    : CAN1_F15R2_FB20 ( -- x addr ) 20 bit CAN1_F15R2 ; \ CAN1_F15R2_FB20, Filter bits
    : CAN1_F15R2_FB21 ( -- x addr ) 21 bit CAN1_F15R2 ; \ CAN1_F15R2_FB21, Filter bits
    : CAN1_F15R2_FB22 ( -- x addr ) 22 bit CAN1_F15R2 ; \ CAN1_F15R2_FB22, Filter bits
    : CAN1_F15R2_FB23 ( -- x addr ) 23 bit CAN1_F15R2 ; \ CAN1_F15R2_FB23, Filter bits
    : CAN1_F15R2_FB24 ( -- x addr ) 24 bit CAN1_F15R2 ; \ CAN1_F15R2_FB24, Filter bits
    : CAN1_F15R2_FB25 ( -- x addr ) 25 bit CAN1_F15R2 ; \ CAN1_F15R2_FB25, Filter bits
    : CAN1_F15R2_FB26 ( -- x addr ) 26 bit CAN1_F15R2 ; \ CAN1_F15R2_FB26, Filter bits
    : CAN1_F15R2_FB27 ( -- x addr ) 27 bit CAN1_F15R2 ; \ CAN1_F15R2_FB27, Filter bits
    : CAN1_F15R2_FB28 ( -- x addr ) 28 bit CAN1_F15R2 ; \ CAN1_F15R2_FB28, Filter bits
    : CAN1_F15R2_FB29 ( -- x addr ) 29 bit CAN1_F15R2 ; \ CAN1_F15R2_FB29, Filter bits
    : CAN1_F15R2_FB30 ( -- x addr ) 30 bit CAN1_F15R2 ; \ CAN1_F15R2_FB30, Filter bits
    : CAN1_F15R2_FB31 ( -- x addr ) 31 bit CAN1_F15R2 ; \ CAN1_F15R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F16R1 (read-write) Reset:0x00000000
    : CAN1_F16R1_FB0 ( -- x addr ) 0 bit CAN1_F16R1 ; \ CAN1_F16R1_FB0, Filter bits
    : CAN1_F16R1_FB1 ( -- x addr ) 1 bit CAN1_F16R1 ; \ CAN1_F16R1_FB1, Filter bits
    : CAN1_F16R1_FB2 ( -- x addr ) 2 bit CAN1_F16R1 ; \ CAN1_F16R1_FB2, Filter bits
    : CAN1_F16R1_FB3 ( -- x addr ) 3 bit CAN1_F16R1 ; \ CAN1_F16R1_FB3, Filter bits
    : CAN1_F16R1_FB4 ( -- x addr ) 4 bit CAN1_F16R1 ; \ CAN1_F16R1_FB4, Filter bits
    : CAN1_F16R1_FB5 ( -- x addr ) 5 bit CAN1_F16R1 ; \ CAN1_F16R1_FB5, Filter bits
    : CAN1_F16R1_FB6 ( -- x addr ) 6 bit CAN1_F16R1 ; \ CAN1_F16R1_FB6, Filter bits
    : CAN1_F16R1_FB7 ( -- x addr ) 7 bit CAN1_F16R1 ; \ CAN1_F16R1_FB7, Filter bits
    : CAN1_F16R1_FB8 ( -- x addr ) 8 bit CAN1_F16R1 ; \ CAN1_F16R1_FB8, Filter bits
    : CAN1_F16R1_FB9 ( -- x addr ) 9 bit CAN1_F16R1 ; \ CAN1_F16R1_FB9, Filter bits
    : CAN1_F16R1_FB10 ( -- x addr ) 10 bit CAN1_F16R1 ; \ CAN1_F16R1_FB10, Filter bits
    : CAN1_F16R1_FB11 ( -- x addr ) 11 bit CAN1_F16R1 ; \ CAN1_F16R1_FB11, Filter bits
    : CAN1_F16R1_FB12 ( -- x addr ) 12 bit CAN1_F16R1 ; \ CAN1_F16R1_FB12, Filter bits
    : CAN1_F16R1_FB13 ( -- x addr ) 13 bit CAN1_F16R1 ; \ CAN1_F16R1_FB13, Filter bits
    : CAN1_F16R1_FB14 ( -- x addr ) 14 bit CAN1_F16R1 ; \ CAN1_F16R1_FB14, Filter bits
    : CAN1_F16R1_FB15 ( -- x addr ) 15 bit CAN1_F16R1 ; \ CAN1_F16R1_FB15, Filter bits
    : CAN1_F16R1_FB16 ( -- x addr ) 16 bit CAN1_F16R1 ; \ CAN1_F16R1_FB16, Filter bits
    : CAN1_F16R1_FB17 ( -- x addr ) 17 bit CAN1_F16R1 ; \ CAN1_F16R1_FB17, Filter bits
    : CAN1_F16R1_FB18 ( -- x addr ) 18 bit CAN1_F16R1 ; \ CAN1_F16R1_FB18, Filter bits
    : CAN1_F16R1_FB19 ( -- x addr ) 19 bit CAN1_F16R1 ; \ CAN1_F16R1_FB19, Filter bits
    : CAN1_F16R1_FB20 ( -- x addr ) 20 bit CAN1_F16R1 ; \ CAN1_F16R1_FB20, Filter bits
    : CAN1_F16R1_FB21 ( -- x addr ) 21 bit CAN1_F16R1 ; \ CAN1_F16R1_FB21, Filter bits
    : CAN1_F16R1_FB22 ( -- x addr ) 22 bit CAN1_F16R1 ; \ CAN1_F16R1_FB22, Filter bits
    : CAN1_F16R1_FB23 ( -- x addr ) 23 bit CAN1_F16R1 ; \ CAN1_F16R1_FB23, Filter bits
    : CAN1_F16R1_FB24 ( -- x addr ) 24 bit CAN1_F16R1 ; \ CAN1_F16R1_FB24, Filter bits
    : CAN1_F16R1_FB25 ( -- x addr ) 25 bit CAN1_F16R1 ; \ CAN1_F16R1_FB25, Filter bits
    : CAN1_F16R1_FB26 ( -- x addr ) 26 bit CAN1_F16R1 ; \ CAN1_F16R1_FB26, Filter bits
    : CAN1_F16R1_FB27 ( -- x addr ) 27 bit CAN1_F16R1 ; \ CAN1_F16R1_FB27, Filter bits
    : CAN1_F16R1_FB28 ( -- x addr ) 28 bit CAN1_F16R1 ; \ CAN1_F16R1_FB28, Filter bits
    : CAN1_F16R1_FB29 ( -- x addr ) 29 bit CAN1_F16R1 ; \ CAN1_F16R1_FB29, Filter bits
    : CAN1_F16R1_FB30 ( -- x addr ) 30 bit CAN1_F16R1 ; \ CAN1_F16R1_FB30, Filter bits
    : CAN1_F16R1_FB31 ( -- x addr ) 31 bit CAN1_F16R1 ; \ CAN1_F16R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F16R2 (read-write) Reset:0x00000000
    : CAN1_F16R2_FB0 ( -- x addr ) 0 bit CAN1_F16R2 ; \ CAN1_F16R2_FB0, Filter bits
    : CAN1_F16R2_FB1 ( -- x addr ) 1 bit CAN1_F16R2 ; \ CAN1_F16R2_FB1, Filter bits
    : CAN1_F16R2_FB2 ( -- x addr ) 2 bit CAN1_F16R2 ; \ CAN1_F16R2_FB2, Filter bits
    : CAN1_F16R2_FB3 ( -- x addr ) 3 bit CAN1_F16R2 ; \ CAN1_F16R2_FB3, Filter bits
    : CAN1_F16R2_FB4 ( -- x addr ) 4 bit CAN1_F16R2 ; \ CAN1_F16R2_FB4, Filter bits
    : CAN1_F16R2_FB5 ( -- x addr ) 5 bit CAN1_F16R2 ; \ CAN1_F16R2_FB5, Filter bits
    : CAN1_F16R2_FB6 ( -- x addr ) 6 bit CAN1_F16R2 ; \ CAN1_F16R2_FB6, Filter bits
    : CAN1_F16R2_FB7 ( -- x addr ) 7 bit CAN1_F16R2 ; \ CAN1_F16R2_FB7, Filter bits
    : CAN1_F16R2_FB8 ( -- x addr ) 8 bit CAN1_F16R2 ; \ CAN1_F16R2_FB8, Filter bits
    : CAN1_F16R2_FB9 ( -- x addr ) 9 bit CAN1_F16R2 ; \ CAN1_F16R2_FB9, Filter bits
    : CAN1_F16R2_FB10 ( -- x addr ) 10 bit CAN1_F16R2 ; \ CAN1_F16R2_FB10, Filter bits
    : CAN1_F16R2_FB11 ( -- x addr ) 11 bit CAN1_F16R2 ; \ CAN1_F16R2_FB11, Filter bits
    : CAN1_F16R2_FB12 ( -- x addr ) 12 bit CAN1_F16R2 ; \ CAN1_F16R2_FB12, Filter bits
    : CAN1_F16R2_FB13 ( -- x addr ) 13 bit CAN1_F16R2 ; \ CAN1_F16R2_FB13, Filter bits
    : CAN1_F16R2_FB14 ( -- x addr ) 14 bit CAN1_F16R2 ; \ CAN1_F16R2_FB14, Filter bits
    : CAN1_F16R2_FB15 ( -- x addr ) 15 bit CAN1_F16R2 ; \ CAN1_F16R2_FB15, Filter bits
    : CAN1_F16R2_FB16 ( -- x addr ) 16 bit CAN1_F16R2 ; \ CAN1_F16R2_FB16, Filter bits
    : CAN1_F16R2_FB17 ( -- x addr ) 17 bit CAN1_F16R2 ; \ CAN1_F16R2_FB17, Filter bits
    : CAN1_F16R2_FB18 ( -- x addr ) 18 bit CAN1_F16R2 ; \ CAN1_F16R2_FB18, Filter bits
    : CAN1_F16R2_FB19 ( -- x addr ) 19 bit CAN1_F16R2 ; \ CAN1_F16R2_FB19, Filter bits
    : CAN1_F16R2_FB20 ( -- x addr ) 20 bit CAN1_F16R2 ; \ CAN1_F16R2_FB20, Filter bits
    : CAN1_F16R2_FB21 ( -- x addr ) 21 bit CAN1_F16R2 ; \ CAN1_F16R2_FB21, Filter bits
    : CAN1_F16R2_FB22 ( -- x addr ) 22 bit CAN1_F16R2 ; \ CAN1_F16R2_FB22, Filter bits
    : CAN1_F16R2_FB23 ( -- x addr ) 23 bit CAN1_F16R2 ; \ CAN1_F16R2_FB23, Filter bits
    : CAN1_F16R2_FB24 ( -- x addr ) 24 bit CAN1_F16R2 ; \ CAN1_F16R2_FB24, Filter bits
    : CAN1_F16R2_FB25 ( -- x addr ) 25 bit CAN1_F16R2 ; \ CAN1_F16R2_FB25, Filter bits
    : CAN1_F16R2_FB26 ( -- x addr ) 26 bit CAN1_F16R2 ; \ CAN1_F16R2_FB26, Filter bits
    : CAN1_F16R2_FB27 ( -- x addr ) 27 bit CAN1_F16R2 ; \ CAN1_F16R2_FB27, Filter bits
    : CAN1_F16R2_FB28 ( -- x addr ) 28 bit CAN1_F16R2 ; \ CAN1_F16R2_FB28, Filter bits
    : CAN1_F16R2_FB29 ( -- x addr ) 29 bit CAN1_F16R2 ; \ CAN1_F16R2_FB29, Filter bits
    : CAN1_F16R2_FB30 ( -- x addr ) 30 bit CAN1_F16R2 ; \ CAN1_F16R2_FB30, Filter bits
    : CAN1_F16R2_FB31 ( -- x addr ) 31 bit CAN1_F16R2 ; \ CAN1_F16R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F17R1 (read-write) Reset:0x00000000
    : CAN1_F17R1_FB0 ( -- x addr ) 0 bit CAN1_F17R1 ; \ CAN1_F17R1_FB0, Filter bits
    : CAN1_F17R1_FB1 ( -- x addr ) 1 bit CAN1_F17R1 ; \ CAN1_F17R1_FB1, Filter bits
    : CAN1_F17R1_FB2 ( -- x addr ) 2 bit CAN1_F17R1 ; \ CAN1_F17R1_FB2, Filter bits
    : CAN1_F17R1_FB3 ( -- x addr ) 3 bit CAN1_F17R1 ; \ CAN1_F17R1_FB3, Filter bits
    : CAN1_F17R1_FB4 ( -- x addr ) 4 bit CAN1_F17R1 ; \ CAN1_F17R1_FB4, Filter bits
    : CAN1_F17R1_FB5 ( -- x addr ) 5 bit CAN1_F17R1 ; \ CAN1_F17R1_FB5, Filter bits
    : CAN1_F17R1_FB6 ( -- x addr ) 6 bit CAN1_F17R1 ; \ CAN1_F17R1_FB6, Filter bits
    : CAN1_F17R1_FB7 ( -- x addr ) 7 bit CAN1_F17R1 ; \ CAN1_F17R1_FB7, Filter bits
    : CAN1_F17R1_FB8 ( -- x addr ) 8 bit CAN1_F17R1 ; \ CAN1_F17R1_FB8, Filter bits
    : CAN1_F17R1_FB9 ( -- x addr ) 9 bit CAN1_F17R1 ; \ CAN1_F17R1_FB9, Filter bits
    : CAN1_F17R1_FB10 ( -- x addr ) 10 bit CAN1_F17R1 ; \ CAN1_F17R1_FB10, Filter bits
    : CAN1_F17R1_FB11 ( -- x addr ) 11 bit CAN1_F17R1 ; \ CAN1_F17R1_FB11, Filter bits
    : CAN1_F17R1_FB12 ( -- x addr ) 12 bit CAN1_F17R1 ; \ CAN1_F17R1_FB12, Filter bits
    : CAN1_F17R1_FB13 ( -- x addr ) 13 bit CAN1_F17R1 ; \ CAN1_F17R1_FB13, Filter bits
    : CAN1_F17R1_FB14 ( -- x addr ) 14 bit CAN1_F17R1 ; \ CAN1_F17R1_FB14, Filter bits
    : CAN1_F17R1_FB15 ( -- x addr ) 15 bit CAN1_F17R1 ; \ CAN1_F17R1_FB15, Filter bits
    : CAN1_F17R1_FB16 ( -- x addr ) 16 bit CAN1_F17R1 ; \ CAN1_F17R1_FB16, Filter bits
    : CAN1_F17R1_FB17 ( -- x addr ) 17 bit CAN1_F17R1 ; \ CAN1_F17R1_FB17, Filter bits
    : CAN1_F17R1_FB18 ( -- x addr ) 18 bit CAN1_F17R1 ; \ CAN1_F17R1_FB18, Filter bits
    : CAN1_F17R1_FB19 ( -- x addr ) 19 bit CAN1_F17R1 ; \ CAN1_F17R1_FB19, Filter bits
    : CAN1_F17R1_FB20 ( -- x addr ) 20 bit CAN1_F17R1 ; \ CAN1_F17R1_FB20, Filter bits
    : CAN1_F17R1_FB21 ( -- x addr ) 21 bit CAN1_F17R1 ; \ CAN1_F17R1_FB21, Filter bits
    : CAN1_F17R1_FB22 ( -- x addr ) 22 bit CAN1_F17R1 ; \ CAN1_F17R1_FB22, Filter bits
    : CAN1_F17R1_FB23 ( -- x addr ) 23 bit CAN1_F17R1 ; \ CAN1_F17R1_FB23, Filter bits
    : CAN1_F17R1_FB24 ( -- x addr ) 24 bit CAN1_F17R1 ; \ CAN1_F17R1_FB24, Filter bits
    : CAN1_F17R1_FB25 ( -- x addr ) 25 bit CAN1_F17R1 ; \ CAN1_F17R1_FB25, Filter bits
    : CAN1_F17R1_FB26 ( -- x addr ) 26 bit CAN1_F17R1 ; \ CAN1_F17R1_FB26, Filter bits
    : CAN1_F17R1_FB27 ( -- x addr ) 27 bit CAN1_F17R1 ; \ CAN1_F17R1_FB27, Filter bits
    : CAN1_F17R1_FB28 ( -- x addr ) 28 bit CAN1_F17R1 ; \ CAN1_F17R1_FB28, Filter bits
    : CAN1_F17R1_FB29 ( -- x addr ) 29 bit CAN1_F17R1 ; \ CAN1_F17R1_FB29, Filter bits
    : CAN1_F17R1_FB30 ( -- x addr ) 30 bit CAN1_F17R1 ; \ CAN1_F17R1_FB30, Filter bits
    : CAN1_F17R1_FB31 ( -- x addr ) 31 bit CAN1_F17R1 ; \ CAN1_F17R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F17R2 (read-write) Reset:0x00000000
    : CAN1_F17R2_FB0 ( -- x addr ) 0 bit CAN1_F17R2 ; \ CAN1_F17R2_FB0, Filter bits
    : CAN1_F17R2_FB1 ( -- x addr ) 1 bit CAN1_F17R2 ; \ CAN1_F17R2_FB1, Filter bits
    : CAN1_F17R2_FB2 ( -- x addr ) 2 bit CAN1_F17R2 ; \ CAN1_F17R2_FB2, Filter bits
    : CAN1_F17R2_FB3 ( -- x addr ) 3 bit CAN1_F17R2 ; \ CAN1_F17R2_FB3, Filter bits
    : CAN1_F17R2_FB4 ( -- x addr ) 4 bit CAN1_F17R2 ; \ CAN1_F17R2_FB4, Filter bits
    : CAN1_F17R2_FB5 ( -- x addr ) 5 bit CAN1_F17R2 ; \ CAN1_F17R2_FB5, Filter bits
    : CAN1_F17R2_FB6 ( -- x addr ) 6 bit CAN1_F17R2 ; \ CAN1_F17R2_FB6, Filter bits
    : CAN1_F17R2_FB7 ( -- x addr ) 7 bit CAN1_F17R2 ; \ CAN1_F17R2_FB7, Filter bits
    : CAN1_F17R2_FB8 ( -- x addr ) 8 bit CAN1_F17R2 ; \ CAN1_F17R2_FB8, Filter bits
    : CAN1_F17R2_FB9 ( -- x addr ) 9 bit CAN1_F17R2 ; \ CAN1_F17R2_FB9, Filter bits
    : CAN1_F17R2_FB10 ( -- x addr ) 10 bit CAN1_F17R2 ; \ CAN1_F17R2_FB10, Filter bits
    : CAN1_F17R2_FB11 ( -- x addr ) 11 bit CAN1_F17R2 ; \ CAN1_F17R2_FB11, Filter bits
    : CAN1_F17R2_FB12 ( -- x addr ) 12 bit CAN1_F17R2 ; \ CAN1_F17R2_FB12, Filter bits
    : CAN1_F17R2_FB13 ( -- x addr ) 13 bit CAN1_F17R2 ; \ CAN1_F17R2_FB13, Filter bits
    : CAN1_F17R2_FB14 ( -- x addr ) 14 bit CAN1_F17R2 ; \ CAN1_F17R2_FB14, Filter bits
    : CAN1_F17R2_FB15 ( -- x addr ) 15 bit CAN1_F17R2 ; \ CAN1_F17R2_FB15, Filter bits
    : CAN1_F17R2_FB16 ( -- x addr ) 16 bit CAN1_F17R2 ; \ CAN1_F17R2_FB16, Filter bits
    : CAN1_F17R2_FB17 ( -- x addr ) 17 bit CAN1_F17R2 ; \ CAN1_F17R2_FB17, Filter bits
    : CAN1_F17R2_FB18 ( -- x addr ) 18 bit CAN1_F17R2 ; \ CAN1_F17R2_FB18, Filter bits
    : CAN1_F17R2_FB19 ( -- x addr ) 19 bit CAN1_F17R2 ; \ CAN1_F17R2_FB19, Filter bits
    : CAN1_F17R2_FB20 ( -- x addr ) 20 bit CAN1_F17R2 ; \ CAN1_F17R2_FB20, Filter bits
    : CAN1_F17R2_FB21 ( -- x addr ) 21 bit CAN1_F17R2 ; \ CAN1_F17R2_FB21, Filter bits
    : CAN1_F17R2_FB22 ( -- x addr ) 22 bit CAN1_F17R2 ; \ CAN1_F17R2_FB22, Filter bits
    : CAN1_F17R2_FB23 ( -- x addr ) 23 bit CAN1_F17R2 ; \ CAN1_F17R2_FB23, Filter bits
    : CAN1_F17R2_FB24 ( -- x addr ) 24 bit CAN1_F17R2 ; \ CAN1_F17R2_FB24, Filter bits
    : CAN1_F17R2_FB25 ( -- x addr ) 25 bit CAN1_F17R2 ; \ CAN1_F17R2_FB25, Filter bits
    : CAN1_F17R2_FB26 ( -- x addr ) 26 bit CAN1_F17R2 ; \ CAN1_F17R2_FB26, Filter bits
    : CAN1_F17R2_FB27 ( -- x addr ) 27 bit CAN1_F17R2 ; \ CAN1_F17R2_FB27, Filter bits
    : CAN1_F17R2_FB28 ( -- x addr ) 28 bit CAN1_F17R2 ; \ CAN1_F17R2_FB28, Filter bits
    : CAN1_F17R2_FB29 ( -- x addr ) 29 bit CAN1_F17R2 ; \ CAN1_F17R2_FB29, Filter bits
    : CAN1_F17R2_FB30 ( -- x addr ) 30 bit CAN1_F17R2 ; \ CAN1_F17R2_FB30, Filter bits
    : CAN1_F17R2_FB31 ( -- x addr ) 31 bit CAN1_F17R2 ; \ CAN1_F17R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F18R1 (read-write) Reset:0x00000000
    : CAN1_F18R1_FB0 ( -- x addr ) 0 bit CAN1_F18R1 ; \ CAN1_F18R1_FB0, Filter bits
    : CAN1_F18R1_FB1 ( -- x addr ) 1 bit CAN1_F18R1 ; \ CAN1_F18R1_FB1, Filter bits
    : CAN1_F18R1_FB2 ( -- x addr ) 2 bit CAN1_F18R1 ; \ CAN1_F18R1_FB2, Filter bits
    : CAN1_F18R1_FB3 ( -- x addr ) 3 bit CAN1_F18R1 ; \ CAN1_F18R1_FB3, Filter bits
    : CAN1_F18R1_FB4 ( -- x addr ) 4 bit CAN1_F18R1 ; \ CAN1_F18R1_FB4, Filter bits
    : CAN1_F18R1_FB5 ( -- x addr ) 5 bit CAN1_F18R1 ; \ CAN1_F18R1_FB5, Filter bits
    : CAN1_F18R1_FB6 ( -- x addr ) 6 bit CAN1_F18R1 ; \ CAN1_F18R1_FB6, Filter bits
    : CAN1_F18R1_FB7 ( -- x addr ) 7 bit CAN1_F18R1 ; \ CAN1_F18R1_FB7, Filter bits
    : CAN1_F18R1_FB8 ( -- x addr ) 8 bit CAN1_F18R1 ; \ CAN1_F18R1_FB8, Filter bits
    : CAN1_F18R1_FB9 ( -- x addr ) 9 bit CAN1_F18R1 ; \ CAN1_F18R1_FB9, Filter bits
    : CAN1_F18R1_FB10 ( -- x addr ) 10 bit CAN1_F18R1 ; \ CAN1_F18R1_FB10, Filter bits
    : CAN1_F18R1_FB11 ( -- x addr ) 11 bit CAN1_F18R1 ; \ CAN1_F18R1_FB11, Filter bits
    : CAN1_F18R1_FB12 ( -- x addr ) 12 bit CAN1_F18R1 ; \ CAN1_F18R1_FB12, Filter bits
    : CAN1_F18R1_FB13 ( -- x addr ) 13 bit CAN1_F18R1 ; \ CAN1_F18R1_FB13, Filter bits
    : CAN1_F18R1_FB14 ( -- x addr ) 14 bit CAN1_F18R1 ; \ CAN1_F18R1_FB14, Filter bits
    : CAN1_F18R1_FB15 ( -- x addr ) 15 bit CAN1_F18R1 ; \ CAN1_F18R1_FB15, Filter bits
    : CAN1_F18R1_FB16 ( -- x addr ) 16 bit CAN1_F18R1 ; \ CAN1_F18R1_FB16, Filter bits
    : CAN1_F18R1_FB17 ( -- x addr ) 17 bit CAN1_F18R1 ; \ CAN1_F18R1_FB17, Filter bits
    : CAN1_F18R1_FB18 ( -- x addr ) 18 bit CAN1_F18R1 ; \ CAN1_F18R1_FB18, Filter bits
    : CAN1_F18R1_FB19 ( -- x addr ) 19 bit CAN1_F18R1 ; \ CAN1_F18R1_FB19, Filter bits
    : CAN1_F18R1_FB20 ( -- x addr ) 20 bit CAN1_F18R1 ; \ CAN1_F18R1_FB20, Filter bits
    : CAN1_F18R1_FB21 ( -- x addr ) 21 bit CAN1_F18R1 ; \ CAN1_F18R1_FB21, Filter bits
    : CAN1_F18R1_FB22 ( -- x addr ) 22 bit CAN1_F18R1 ; \ CAN1_F18R1_FB22, Filter bits
    : CAN1_F18R1_FB23 ( -- x addr ) 23 bit CAN1_F18R1 ; \ CAN1_F18R1_FB23, Filter bits
    : CAN1_F18R1_FB24 ( -- x addr ) 24 bit CAN1_F18R1 ; \ CAN1_F18R1_FB24, Filter bits
    : CAN1_F18R1_FB25 ( -- x addr ) 25 bit CAN1_F18R1 ; \ CAN1_F18R1_FB25, Filter bits
    : CAN1_F18R1_FB26 ( -- x addr ) 26 bit CAN1_F18R1 ; \ CAN1_F18R1_FB26, Filter bits
    : CAN1_F18R1_FB27 ( -- x addr ) 27 bit CAN1_F18R1 ; \ CAN1_F18R1_FB27, Filter bits
    : CAN1_F18R1_FB28 ( -- x addr ) 28 bit CAN1_F18R1 ; \ CAN1_F18R1_FB28, Filter bits
    : CAN1_F18R1_FB29 ( -- x addr ) 29 bit CAN1_F18R1 ; \ CAN1_F18R1_FB29, Filter bits
    : CAN1_F18R1_FB30 ( -- x addr ) 30 bit CAN1_F18R1 ; \ CAN1_F18R1_FB30, Filter bits
    : CAN1_F18R1_FB31 ( -- x addr ) 31 bit CAN1_F18R1 ; \ CAN1_F18R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F18R2 (read-write) Reset:0x00000000
    : CAN1_F18R2_FB0 ( -- x addr ) 0 bit CAN1_F18R2 ; \ CAN1_F18R2_FB0, Filter bits
    : CAN1_F18R2_FB1 ( -- x addr ) 1 bit CAN1_F18R2 ; \ CAN1_F18R2_FB1, Filter bits
    : CAN1_F18R2_FB2 ( -- x addr ) 2 bit CAN1_F18R2 ; \ CAN1_F18R2_FB2, Filter bits
    : CAN1_F18R2_FB3 ( -- x addr ) 3 bit CAN1_F18R2 ; \ CAN1_F18R2_FB3, Filter bits
    : CAN1_F18R2_FB4 ( -- x addr ) 4 bit CAN1_F18R2 ; \ CAN1_F18R2_FB4, Filter bits
    : CAN1_F18R2_FB5 ( -- x addr ) 5 bit CAN1_F18R2 ; \ CAN1_F18R2_FB5, Filter bits
    : CAN1_F18R2_FB6 ( -- x addr ) 6 bit CAN1_F18R2 ; \ CAN1_F18R2_FB6, Filter bits
    : CAN1_F18R2_FB7 ( -- x addr ) 7 bit CAN1_F18R2 ; \ CAN1_F18R2_FB7, Filter bits
    : CAN1_F18R2_FB8 ( -- x addr ) 8 bit CAN1_F18R2 ; \ CAN1_F18R2_FB8, Filter bits
    : CAN1_F18R2_FB9 ( -- x addr ) 9 bit CAN1_F18R2 ; \ CAN1_F18R2_FB9, Filter bits
    : CAN1_F18R2_FB10 ( -- x addr ) 10 bit CAN1_F18R2 ; \ CAN1_F18R2_FB10, Filter bits
    : CAN1_F18R2_FB11 ( -- x addr ) 11 bit CAN1_F18R2 ; \ CAN1_F18R2_FB11, Filter bits
    : CAN1_F18R2_FB12 ( -- x addr ) 12 bit CAN1_F18R2 ; \ CAN1_F18R2_FB12, Filter bits
    : CAN1_F18R2_FB13 ( -- x addr ) 13 bit CAN1_F18R2 ; \ CAN1_F18R2_FB13, Filter bits
    : CAN1_F18R2_FB14 ( -- x addr ) 14 bit CAN1_F18R2 ; \ CAN1_F18R2_FB14, Filter bits
    : CAN1_F18R2_FB15 ( -- x addr ) 15 bit CAN1_F18R2 ; \ CAN1_F18R2_FB15, Filter bits
    : CAN1_F18R2_FB16 ( -- x addr ) 16 bit CAN1_F18R2 ; \ CAN1_F18R2_FB16, Filter bits
    : CAN1_F18R2_FB17 ( -- x addr ) 17 bit CAN1_F18R2 ; \ CAN1_F18R2_FB17, Filter bits
    : CAN1_F18R2_FB18 ( -- x addr ) 18 bit CAN1_F18R2 ; \ CAN1_F18R2_FB18, Filter bits
    : CAN1_F18R2_FB19 ( -- x addr ) 19 bit CAN1_F18R2 ; \ CAN1_F18R2_FB19, Filter bits
    : CAN1_F18R2_FB20 ( -- x addr ) 20 bit CAN1_F18R2 ; \ CAN1_F18R2_FB20, Filter bits
    : CAN1_F18R2_FB21 ( -- x addr ) 21 bit CAN1_F18R2 ; \ CAN1_F18R2_FB21, Filter bits
    : CAN1_F18R2_FB22 ( -- x addr ) 22 bit CAN1_F18R2 ; \ CAN1_F18R2_FB22, Filter bits
    : CAN1_F18R2_FB23 ( -- x addr ) 23 bit CAN1_F18R2 ; \ CAN1_F18R2_FB23, Filter bits
    : CAN1_F18R2_FB24 ( -- x addr ) 24 bit CAN1_F18R2 ; \ CAN1_F18R2_FB24, Filter bits
    : CAN1_F18R2_FB25 ( -- x addr ) 25 bit CAN1_F18R2 ; \ CAN1_F18R2_FB25, Filter bits
    : CAN1_F18R2_FB26 ( -- x addr ) 26 bit CAN1_F18R2 ; \ CAN1_F18R2_FB26, Filter bits
    : CAN1_F18R2_FB27 ( -- x addr ) 27 bit CAN1_F18R2 ; \ CAN1_F18R2_FB27, Filter bits
    : CAN1_F18R2_FB28 ( -- x addr ) 28 bit CAN1_F18R2 ; \ CAN1_F18R2_FB28, Filter bits
    : CAN1_F18R2_FB29 ( -- x addr ) 29 bit CAN1_F18R2 ; \ CAN1_F18R2_FB29, Filter bits
    : CAN1_F18R2_FB30 ( -- x addr ) 30 bit CAN1_F18R2 ; \ CAN1_F18R2_FB30, Filter bits
    : CAN1_F18R2_FB31 ( -- x addr ) 31 bit CAN1_F18R2 ; \ CAN1_F18R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F19R1 (read-write) Reset:0x00000000
    : CAN1_F19R1_FB0 ( -- x addr ) 0 bit CAN1_F19R1 ; \ CAN1_F19R1_FB0, Filter bits
    : CAN1_F19R1_FB1 ( -- x addr ) 1 bit CAN1_F19R1 ; \ CAN1_F19R1_FB1, Filter bits
    : CAN1_F19R1_FB2 ( -- x addr ) 2 bit CAN1_F19R1 ; \ CAN1_F19R1_FB2, Filter bits
    : CAN1_F19R1_FB3 ( -- x addr ) 3 bit CAN1_F19R1 ; \ CAN1_F19R1_FB3, Filter bits
    : CAN1_F19R1_FB4 ( -- x addr ) 4 bit CAN1_F19R1 ; \ CAN1_F19R1_FB4, Filter bits
    : CAN1_F19R1_FB5 ( -- x addr ) 5 bit CAN1_F19R1 ; \ CAN1_F19R1_FB5, Filter bits
    : CAN1_F19R1_FB6 ( -- x addr ) 6 bit CAN1_F19R1 ; \ CAN1_F19R1_FB6, Filter bits
    : CAN1_F19R1_FB7 ( -- x addr ) 7 bit CAN1_F19R1 ; \ CAN1_F19R1_FB7, Filter bits
    : CAN1_F19R1_FB8 ( -- x addr ) 8 bit CAN1_F19R1 ; \ CAN1_F19R1_FB8, Filter bits
    : CAN1_F19R1_FB9 ( -- x addr ) 9 bit CAN1_F19R1 ; \ CAN1_F19R1_FB9, Filter bits
    : CAN1_F19R1_FB10 ( -- x addr ) 10 bit CAN1_F19R1 ; \ CAN1_F19R1_FB10, Filter bits
    : CAN1_F19R1_FB11 ( -- x addr ) 11 bit CAN1_F19R1 ; \ CAN1_F19R1_FB11, Filter bits
    : CAN1_F19R1_FB12 ( -- x addr ) 12 bit CAN1_F19R1 ; \ CAN1_F19R1_FB12, Filter bits
    : CAN1_F19R1_FB13 ( -- x addr ) 13 bit CAN1_F19R1 ; \ CAN1_F19R1_FB13, Filter bits
    : CAN1_F19R1_FB14 ( -- x addr ) 14 bit CAN1_F19R1 ; \ CAN1_F19R1_FB14, Filter bits
    : CAN1_F19R1_FB15 ( -- x addr ) 15 bit CAN1_F19R1 ; \ CAN1_F19R1_FB15, Filter bits
    : CAN1_F19R1_FB16 ( -- x addr ) 16 bit CAN1_F19R1 ; \ CAN1_F19R1_FB16, Filter bits
    : CAN1_F19R1_FB17 ( -- x addr ) 17 bit CAN1_F19R1 ; \ CAN1_F19R1_FB17, Filter bits
    : CAN1_F19R1_FB18 ( -- x addr ) 18 bit CAN1_F19R1 ; \ CAN1_F19R1_FB18, Filter bits
    : CAN1_F19R1_FB19 ( -- x addr ) 19 bit CAN1_F19R1 ; \ CAN1_F19R1_FB19, Filter bits
    : CAN1_F19R1_FB20 ( -- x addr ) 20 bit CAN1_F19R1 ; \ CAN1_F19R1_FB20, Filter bits
    : CAN1_F19R1_FB21 ( -- x addr ) 21 bit CAN1_F19R1 ; \ CAN1_F19R1_FB21, Filter bits
    : CAN1_F19R1_FB22 ( -- x addr ) 22 bit CAN1_F19R1 ; \ CAN1_F19R1_FB22, Filter bits
    : CAN1_F19R1_FB23 ( -- x addr ) 23 bit CAN1_F19R1 ; \ CAN1_F19R1_FB23, Filter bits
    : CAN1_F19R1_FB24 ( -- x addr ) 24 bit CAN1_F19R1 ; \ CAN1_F19R1_FB24, Filter bits
    : CAN1_F19R1_FB25 ( -- x addr ) 25 bit CAN1_F19R1 ; \ CAN1_F19R1_FB25, Filter bits
    : CAN1_F19R1_FB26 ( -- x addr ) 26 bit CAN1_F19R1 ; \ CAN1_F19R1_FB26, Filter bits
    : CAN1_F19R1_FB27 ( -- x addr ) 27 bit CAN1_F19R1 ; \ CAN1_F19R1_FB27, Filter bits
    : CAN1_F19R1_FB28 ( -- x addr ) 28 bit CAN1_F19R1 ; \ CAN1_F19R1_FB28, Filter bits
    : CAN1_F19R1_FB29 ( -- x addr ) 29 bit CAN1_F19R1 ; \ CAN1_F19R1_FB29, Filter bits
    : CAN1_F19R1_FB30 ( -- x addr ) 30 bit CAN1_F19R1 ; \ CAN1_F19R1_FB30, Filter bits
    : CAN1_F19R1_FB31 ( -- x addr ) 31 bit CAN1_F19R1 ; \ CAN1_F19R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F19R2 (read-write) Reset:0x00000000
    : CAN1_F19R2_FB0 ( -- x addr ) 0 bit CAN1_F19R2 ; \ CAN1_F19R2_FB0, Filter bits
    : CAN1_F19R2_FB1 ( -- x addr ) 1 bit CAN1_F19R2 ; \ CAN1_F19R2_FB1, Filter bits
    : CAN1_F19R2_FB2 ( -- x addr ) 2 bit CAN1_F19R2 ; \ CAN1_F19R2_FB2, Filter bits
    : CAN1_F19R2_FB3 ( -- x addr ) 3 bit CAN1_F19R2 ; \ CAN1_F19R2_FB3, Filter bits
    : CAN1_F19R2_FB4 ( -- x addr ) 4 bit CAN1_F19R2 ; \ CAN1_F19R2_FB4, Filter bits
    : CAN1_F19R2_FB5 ( -- x addr ) 5 bit CAN1_F19R2 ; \ CAN1_F19R2_FB5, Filter bits
    : CAN1_F19R2_FB6 ( -- x addr ) 6 bit CAN1_F19R2 ; \ CAN1_F19R2_FB6, Filter bits
    : CAN1_F19R2_FB7 ( -- x addr ) 7 bit CAN1_F19R2 ; \ CAN1_F19R2_FB7, Filter bits
    : CAN1_F19R2_FB8 ( -- x addr ) 8 bit CAN1_F19R2 ; \ CAN1_F19R2_FB8, Filter bits
    : CAN1_F19R2_FB9 ( -- x addr ) 9 bit CAN1_F19R2 ; \ CAN1_F19R2_FB9, Filter bits
    : CAN1_F19R2_FB10 ( -- x addr ) 10 bit CAN1_F19R2 ; \ CAN1_F19R2_FB10, Filter bits
    : CAN1_F19R2_FB11 ( -- x addr ) 11 bit CAN1_F19R2 ; \ CAN1_F19R2_FB11, Filter bits
    : CAN1_F19R2_FB12 ( -- x addr ) 12 bit CAN1_F19R2 ; \ CAN1_F19R2_FB12, Filter bits
    : CAN1_F19R2_FB13 ( -- x addr ) 13 bit CAN1_F19R2 ; \ CAN1_F19R2_FB13, Filter bits
    : CAN1_F19R2_FB14 ( -- x addr ) 14 bit CAN1_F19R2 ; \ CAN1_F19R2_FB14, Filter bits
    : CAN1_F19R2_FB15 ( -- x addr ) 15 bit CAN1_F19R2 ; \ CAN1_F19R2_FB15, Filter bits
    : CAN1_F19R2_FB16 ( -- x addr ) 16 bit CAN1_F19R2 ; \ CAN1_F19R2_FB16, Filter bits
    : CAN1_F19R2_FB17 ( -- x addr ) 17 bit CAN1_F19R2 ; \ CAN1_F19R2_FB17, Filter bits
    : CAN1_F19R2_FB18 ( -- x addr ) 18 bit CAN1_F19R2 ; \ CAN1_F19R2_FB18, Filter bits
    : CAN1_F19R2_FB19 ( -- x addr ) 19 bit CAN1_F19R2 ; \ CAN1_F19R2_FB19, Filter bits
    : CAN1_F19R2_FB20 ( -- x addr ) 20 bit CAN1_F19R2 ; \ CAN1_F19R2_FB20, Filter bits
    : CAN1_F19R2_FB21 ( -- x addr ) 21 bit CAN1_F19R2 ; \ CAN1_F19R2_FB21, Filter bits
    : CAN1_F19R2_FB22 ( -- x addr ) 22 bit CAN1_F19R2 ; \ CAN1_F19R2_FB22, Filter bits
    : CAN1_F19R2_FB23 ( -- x addr ) 23 bit CAN1_F19R2 ; \ CAN1_F19R2_FB23, Filter bits
    : CAN1_F19R2_FB24 ( -- x addr ) 24 bit CAN1_F19R2 ; \ CAN1_F19R2_FB24, Filter bits
    : CAN1_F19R2_FB25 ( -- x addr ) 25 bit CAN1_F19R2 ; \ CAN1_F19R2_FB25, Filter bits
    : CAN1_F19R2_FB26 ( -- x addr ) 26 bit CAN1_F19R2 ; \ CAN1_F19R2_FB26, Filter bits
    : CAN1_F19R2_FB27 ( -- x addr ) 27 bit CAN1_F19R2 ; \ CAN1_F19R2_FB27, Filter bits
    : CAN1_F19R2_FB28 ( -- x addr ) 28 bit CAN1_F19R2 ; \ CAN1_F19R2_FB28, Filter bits
    : CAN1_F19R2_FB29 ( -- x addr ) 29 bit CAN1_F19R2 ; \ CAN1_F19R2_FB29, Filter bits
    : CAN1_F19R2_FB30 ( -- x addr ) 30 bit CAN1_F19R2 ; \ CAN1_F19R2_FB30, Filter bits
    : CAN1_F19R2_FB31 ( -- x addr ) 31 bit CAN1_F19R2 ; \ CAN1_F19R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F20R1 (read-write) Reset:0x00000000
    : CAN1_F20R1_FB0 ( -- x addr ) 0 bit CAN1_F20R1 ; \ CAN1_F20R1_FB0, Filter bits
    : CAN1_F20R1_FB1 ( -- x addr ) 1 bit CAN1_F20R1 ; \ CAN1_F20R1_FB1, Filter bits
    : CAN1_F20R1_FB2 ( -- x addr ) 2 bit CAN1_F20R1 ; \ CAN1_F20R1_FB2, Filter bits
    : CAN1_F20R1_FB3 ( -- x addr ) 3 bit CAN1_F20R1 ; \ CAN1_F20R1_FB3, Filter bits
    : CAN1_F20R1_FB4 ( -- x addr ) 4 bit CAN1_F20R1 ; \ CAN1_F20R1_FB4, Filter bits
    : CAN1_F20R1_FB5 ( -- x addr ) 5 bit CAN1_F20R1 ; \ CAN1_F20R1_FB5, Filter bits
    : CAN1_F20R1_FB6 ( -- x addr ) 6 bit CAN1_F20R1 ; \ CAN1_F20R1_FB6, Filter bits
    : CAN1_F20R1_FB7 ( -- x addr ) 7 bit CAN1_F20R1 ; \ CAN1_F20R1_FB7, Filter bits
    : CAN1_F20R1_FB8 ( -- x addr ) 8 bit CAN1_F20R1 ; \ CAN1_F20R1_FB8, Filter bits
    : CAN1_F20R1_FB9 ( -- x addr ) 9 bit CAN1_F20R1 ; \ CAN1_F20R1_FB9, Filter bits
    : CAN1_F20R1_FB10 ( -- x addr ) 10 bit CAN1_F20R1 ; \ CAN1_F20R1_FB10, Filter bits
    : CAN1_F20R1_FB11 ( -- x addr ) 11 bit CAN1_F20R1 ; \ CAN1_F20R1_FB11, Filter bits
    : CAN1_F20R1_FB12 ( -- x addr ) 12 bit CAN1_F20R1 ; \ CAN1_F20R1_FB12, Filter bits
    : CAN1_F20R1_FB13 ( -- x addr ) 13 bit CAN1_F20R1 ; \ CAN1_F20R1_FB13, Filter bits
    : CAN1_F20R1_FB14 ( -- x addr ) 14 bit CAN1_F20R1 ; \ CAN1_F20R1_FB14, Filter bits
    : CAN1_F20R1_FB15 ( -- x addr ) 15 bit CAN1_F20R1 ; \ CAN1_F20R1_FB15, Filter bits
    : CAN1_F20R1_FB16 ( -- x addr ) 16 bit CAN1_F20R1 ; \ CAN1_F20R1_FB16, Filter bits
    : CAN1_F20R1_FB17 ( -- x addr ) 17 bit CAN1_F20R1 ; \ CAN1_F20R1_FB17, Filter bits
    : CAN1_F20R1_FB18 ( -- x addr ) 18 bit CAN1_F20R1 ; \ CAN1_F20R1_FB18, Filter bits
    : CAN1_F20R1_FB19 ( -- x addr ) 19 bit CAN1_F20R1 ; \ CAN1_F20R1_FB19, Filter bits
    : CAN1_F20R1_FB20 ( -- x addr ) 20 bit CAN1_F20R1 ; \ CAN1_F20R1_FB20, Filter bits
    : CAN1_F20R1_FB21 ( -- x addr ) 21 bit CAN1_F20R1 ; \ CAN1_F20R1_FB21, Filter bits
    : CAN1_F20R1_FB22 ( -- x addr ) 22 bit CAN1_F20R1 ; \ CAN1_F20R1_FB22, Filter bits
    : CAN1_F20R1_FB23 ( -- x addr ) 23 bit CAN1_F20R1 ; \ CAN1_F20R1_FB23, Filter bits
    : CAN1_F20R1_FB24 ( -- x addr ) 24 bit CAN1_F20R1 ; \ CAN1_F20R1_FB24, Filter bits
    : CAN1_F20R1_FB25 ( -- x addr ) 25 bit CAN1_F20R1 ; \ CAN1_F20R1_FB25, Filter bits
    : CAN1_F20R1_FB26 ( -- x addr ) 26 bit CAN1_F20R1 ; \ CAN1_F20R1_FB26, Filter bits
    : CAN1_F20R1_FB27 ( -- x addr ) 27 bit CAN1_F20R1 ; \ CAN1_F20R1_FB27, Filter bits
    : CAN1_F20R1_FB28 ( -- x addr ) 28 bit CAN1_F20R1 ; \ CAN1_F20R1_FB28, Filter bits
    : CAN1_F20R1_FB29 ( -- x addr ) 29 bit CAN1_F20R1 ; \ CAN1_F20R1_FB29, Filter bits
    : CAN1_F20R1_FB30 ( -- x addr ) 30 bit CAN1_F20R1 ; \ CAN1_F20R1_FB30, Filter bits
    : CAN1_F20R1_FB31 ( -- x addr ) 31 bit CAN1_F20R1 ; \ CAN1_F20R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F20R2 (read-write) Reset:0x00000000
    : CAN1_F20R2_FB0 ( -- x addr ) 0 bit CAN1_F20R2 ; \ CAN1_F20R2_FB0, Filter bits
    : CAN1_F20R2_FB1 ( -- x addr ) 1 bit CAN1_F20R2 ; \ CAN1_F20R2_FB1, Filter bits
    : CAN1_F20R2_FB2 ( -- x addr ) 2 bit CAN1_F20R2 ; \ CAN1_F20R2_FB2, Filter bits
    : CAN1_F20R2_FB3 ( -- x addr ) 3 bit CAN1_F20R2 ; \ CAN1_F20R2_FB3, Filter bits
    : CAN1_F20R2_FB4 ( -- x addr ) 4 bit CAN1_F20R2 ; \ CAN1_F20R2_FB4, Filter bits
    : CAN1_F20R2_FB5 ( -- x addr ) 5 bit CAN1_F20R2 ; \ CAN1_F20R2_FB5, Filter bits
    : CAN1_F20R2_FB6 ( -- x addr ) 6 bit CAN1_F20R2 ; \ CAN1_F20R2_FB6, Filter bits
    : CAN1_F20R2_FB7 ( -- x addr ) 7 bit CAN1_F20R2 ; \ CAN1_F20R2_FB7, Filter bits
    : CAN1_F20R2_FB8 ( -- x addr ) 8 bit CAN1_F20R2 ; \ CAN1_F20R2_FB8, Filter bits
    : CAN1_F20R2_FB9 ( -- x addr ) 9 bit CAN1_F20R2 ; \ CAN1_F20R2_FB9, Filter bits
    : CAN1_F20R2_FB10 ( -- x addr ) 10 bit CAN1_F20R2 ; \ CAN1_F20R2_FB10, Filter bits
    : CAN1_F20R2_FB11 ( -- x addr ) 11 bit CAN1_F20R2 ; \ CAN1_F20R2_FB11, Filter bits
    : CAN1_F20R2_FB12 ( -- x addr ) 12 bit CAN1_F20R2 ; \ CAN1_F20R2_FB12, Filter bits
    : CAN1_F20R2_FB13 ( -- x addr ) 13 bit CAN1_F20R2 ; \ CAN1_F20R2_FB13, Filter bits
    : CAN1_F20R2_FB14 ( -- x addr ) 14 bit CAN1_F20R2 ; \ CAN1_F20R2_FB14, Filter bits
    : CAN1_F20R2_FB15 ( -- x addr ) 15 bit CAN1_F20R2 ; \ CAN1_F20R2_FB15, Filter bits
    : CAN1_F20R2_FB16 ( -- x addr ) 16 bit CAN1_F20R2 ; \ CAN1_F20R2_FB16, Filter bits
    : CAN1_F20R2_FB17 ( -- x addr ) 17 bit CAN1_F20R2 ; \ CAN1_F20R2_FB17, Filter bits
    : CAN1_F20R2_FB18 ( -- x addr ) 18 bit CAN1_F20R2 ; \ CAN1_F20R2_FB18, Filter bits
    : CAN1_F20R2_FB19 ( -- x addr ) 19 bit CAN1_F20R2 ; \ CAN1_F20R2_FB19, Filter bits
    : CAN1_F20R2_FB20 ( -- x addr ) 20 bit CAN1_F20R2 ; \ CAN1_F20R2_FB20, Filter bits
    : CAN1_F20R2_FB21 ( -- x addr ) 21 bit CAN1_F20R2 ; \ CAN1_F20R2_FB21, Filter bits
    : CAN1_F20R2_FB22 ( -- x addr ) 22 bit CAN1_F20R2 ; \ CAN1_F20R2_FB22, Filter bits
    : CAN1_F20R2_FB23 ( -- x addr ) 23 bit CAN1_F20R2 ; \ CAN1_F20R2_FB23, Filter bits
    : CAN1_F20R2_FB24 ( -- x addr ) 24 bit CAN1_F20R2 ; \ CAN1_F20R2_FB24, Filter bits
    : CAN1_F20R2_FB25 ( -- x addr ) 25 bit CAN1_F20R2 ; \ CAN1_F20R2_FB25, Filter bits
    : CAN1_F20R2_FB26 ( -- x addr ) 26 bit CAN1_F20R2 ; \ CAN1_F20R2_FB26, Filter bits
    : CAN1_F20R2_FB27 ( -- x addr ) 27 bit CAN1_F20R2 ; \ CAN1_F20R2_FB27, Filter bits
    : CAN1_F20R2_FB28 ( -- x addr ) 28 bit CAN1_F20R2 ; \ CAN1_F20R2_FB28, Filter bits
    : CAN1_F20R2_FB29 ( -- x addr ) 29 bit CAN1_F20R2 ; \ CAN1_F20R2_FB29, Filter bits
    : CAN1_F20R2_FB30 ( -- x addr ) 30 bit CAN1_F20R2 ; \ CAN1_F20R2_FB30, Filter bits
    : CAN1_F20R2_FB31 ( -- x addr ) 31 bit CAN1_F20R2 ; \ CAN1_F20R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F21R1 (read-write) Reset:0x00000000
    : CAN1_F21R1_FB0 ( -- x addr ) 0 bit CAN1_F21R1 ; \ CAN1_F21R1_FB0, Filter bits
    : CAN1_F21R1_FB1 ( -- x addr ) 1 bit CAN1_F21R1 ; \ CAN1_F21R1_FB1, Filter bits
    : CAN1_F21R1_FB2 ( -- x addr ) 2 bit CAN1_F21R1 ; \ CAN1_F21R1_FB2, Filter bits
    : CAN1_F21R1_FB3 ( -- x addr ) 3 bit CAN1_F21R1 ; \ CAN1_F21R1_FB3, Filter bits
    : CAN1_F21R1_FB4 ( -- x addr ) 4 bit CAN1_F21R1 ; \ CAN1_F21R1_FB4, Filter bits
    : CAN1_F21R1_FB5 ( -- x addr ) 5 bit CAN1_F21R1 ; \ CAN1_F21R1_FB5, Filter bits
    : CAN1_F21R1_FB6 ( -- x addr ) 6 bit CAN1_F21R1 ; \ CAN1_F21R1_FB6, Filter bits
    : CAN1_F21R1_FB7 ( -- x addr ) 7 bit CAN1_F21R1 ; \ CAN1_F21R1_FB7, Filter bits
    : CAN1_F21R1_FB8 ( -- x addr ) 8 bit CAN1_F21R1 ; \ CAN1_F21R1_FB8, Filter bits
    : CAN1_F21R1_FB9 ( -- x addr ) 9 bit CAN1_F21R1 ; \ CAN1_F21R1_FB9, Filter bits
    : CAN1_F21R1_FB10 ( -- x addr ) 10 bit CAN1_F21R1 ; \ CAN1_F21R1_FB10, Filter bits
    : CAN1_F21R1_FB11 ( -- x addr ) 11 bit CAN1_F21R1 ; \ CAN1_F21R1_FB11, Filter bits
    : CAN1_F21R1_FB12 ( -- x addr ) 12 bit CAN1_F21R1 ; \ CAN1_F21R1_FB12, Filter bits
    : CAN1_F21R1_FB13 ( -- x addr ) 13 bit CAN1_F21R1 ; \ CAN1_F21R1_FB13, Filter bits
    : CAN1_F21R1_FB14 ( -- x addr ) 14 bit CAN1_F21R1 ; \ CAN1_F21R1_FB14, Filter bits
    : CAN1_F21R1_FB15 ( -- x addr ) 15 bit CAN1_F21R1 ; \ CAN1_F21R1_FB15, Filter bits
    : CAN1_F21R1_FB16 ( -- x addr ) 16 bit CAN1_F21R1 ; \ CAN1_F21R1_FB16, Filter bits
    : CAN1_F21R1_FB17 ( -- x addr ) 17 bit CAN1_F21R1 ; \ CAN1_F21R1_FB17, Filter bits
    : CAN1_F21R1_FB18 ( -- x addr ) 18 bit CAN1_F21R1 ; \ CAN1_F21R1_FB18, Filter bits
    : CAN1_F21R1_FB19 ( -- x addr ) 19 bit CAN1_F21R1 ; \ CAN1_F21R1_FB19, Filter bits
    : CAN1_F21R1_FB20 ( -- x addr ) 20 bit CAN1_F21R1 ; \ CAN1_F21R1_FB20, Filter bits
    : CAN1_F21R1_FB21 ( -- x addr ) 21 bit CAN1_F21R1 ; \ CAN1_F21R1_FB21, Filter bits
    : CAN1_F21R1_FB22 ( -- x addr ) 22 bit CAN1_F21R1 ; \ CAN1_F21R1_FB22, Filter bits
    : CAN1_F21R1_FB23 ( -- x addr ) 23 bit CAN1_F21R1 ; \ CAN1_F21R1_FB23, Filter bits
    : CAN1_F21R1_FB24 ( -- x addr ) 24 bit CAN1_F21R1 ; \ CAN1_F21R1_FB24, Filter bits
    : CAN1_F21R1_FB25 ( -- x addr ) 25 bit CAN1_F21R1 ; \ CAN1_F21R1_FB25, Filter bits
    : CAN1_F21R1_FB26 ( -- x addr ) 26 bit CAN1_F21R1 ; \ CAN1_F21R1_FB26, Filter bits
    : CAN1_F21R1_FB27 ( -- x addr ) 27 bit CAN1_F21R1 ; \ CAN1_F21R1_FB27, Filter bits
    : CAN1_F21R1_FB28 ( -- x addr ) 28 bit CAN1_F21R1 ; \ CAN1_F21R1_FB28, Filter bits
    : CAN1_F21R1_FB29 ( -- x addr ) 29 bit CAN1_F21R1 ; \ CAN1_F21R1_FB29, Filter bits
    : CAN1_F21R1_FB30 ( -- x addr ) 30 bit CAN1_F21R1 ; \ CAN1_F21R1_FB30, Filter bits
    : CAN1_F21R1_FB31 ( -- x addr ) 31 bit CAN1_F21R1 ; \ CAN1_F21R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F21R2 (read-write) Reset:0x00000000
    : CAN1_F21R2_FB0 ( -- x addr ) 0 bit CAN1_F21R2 ; \ CAN1_F21R2_FB0, Filter bits
    : CAN1_F21R2_FB1 ( -- x addr ) 1 bit CAN1_F21R2 ; \ CAN1_F21R2_FB1, Filter bits
    : CAN1_F21R2_FB2 ( -- x addr ) 2 bit CAN1_F21R2 ; \ CAN1_F21R2_FB2, Filter bits
    : CAN1_F21R2_FB3 ( -- x addr ) 3 bit CAN1_F21R2 ; \ CAN1_F21R2_FB3, Filter bits
    : CAN1_F21R2_FB4 ( -- x addr ) 4 bit CAN1_F21R2 ; \ CAN1_F21R2_FB4, Filter bits
    : CAN1_F21R2_FB5 ( -- x addr ) 5 bit CAN1_F21R2 ; \ CAN1_F21R2_FB5, Filter bits
    : CAN1_F21R2_FB6 ( -- x addr ) 6 bit CAN1_F21R2 ; \ CAN1_F21R2_FB6, Filter bits
    : CAN1_F21R2_FB7 ( -- x addr ) 7 bit CAN1_F21R2 ; \ CAN1_F21R2_FB7, Filter bits
    : CAN1_F21R2_FB8 ( -- x addr ) 8 bit CAN1_F21R2 ; \ CAN1_F21R2_FB8, Filter bits
    : CAN1_F21R2_FB9 ( -- x addr ) 9 bit CAN1_F21R2 ; \ CAN1_F21R2_FB9, Filter bits
    : CAN1_F21R2_FB10 ( -- x addr ) 10 bit CAN1_F21R2 ; \ CAN1_F21R2_FB10, Filter bits
    : CAN1_F21R2_FB11 ( -- x addr ) 11 bit CAN1_F21R2 ; \ CAN1_F21R2_FB11, Filter bits
    : CAN1_F21R2_FB12 ( -- x addr ) 12 bit CAN1_F21R2 ; \ CAN1_F21R2_FB12, Filter bits
    : CAN1_F21R2_FB13 ( -- x addr ) 13 bit CAN1_F21R2 ; \ CAN1_F21R2_FB13, Filter bits
    : CAN1_F21R2_FB14 ( -- x addr ) 14 bit CAN1_F21R2 ; \ CAN1_F21R2_FB14, Filter bits
    : CAN1_F21R2_FB15 ( -- x addr ) 15 bit CAN1_F21R2 ; \ CAN1_F21R2_FB15, Filter bits
    : CAN1_F21R2_FB16 ( -- x addr ) 16 bit CAN1_F21R2 ; \ CAN1_F21R2_FB16, Filter bits
    : CAN1_F21R2_FB17 ( -- x addr ) 17 bit CAN1_F21R2 ; \ CAN1_F21R2_FB17, Filter bits
    : CAN1_F21R2_FB18 ( -- x addr ) 18 bit CAN1_F21R2 ; \ CAN1_F21R2_FB18, Filter bits
    : CAN1_F21R2_FB19 ( -- x addr ) 19 bit CAN1_F21R2 ; \ CAN1_F21R2_FB19, Filter bits
    : CAN1_F21R2_FB20 ( -- x addr ) 20 bit CAN1_F21R2 ; \ CAN1_F21R2_FB20, Filter bits
    : CAN1_F21R2_FB21 ( -- x addr ) 21 bit CAN1_F21R2 ; \ CAN1_F21R2_FB21, Filter bits
    : CAN1_F21R2_FB22 ( -- x addr ) 22 bit CAN1_F21R2 ; \ CAN1_F21R2_FB22, Filter bits
    : CAN1_F21R2_FB23 ( -- x addr ) 23 bit CAN1_F21R2 ; \ CAN1_F21R2_FB23, Filter bits
    : CAN1_F21R2_FB24 ( -- x addr ) 24 bit CAN1_F21R2 ; \ CAN1_F21R2_FB24, Filter bits
    : CAN1_F21R2_FB25 ( -- x addr ) 25 bit CAN1_F21R2 ; \ CAN1_F21R2_FB25, Filter bits
    : CAN1_F21R2_FB26 ( -- x addr ) 26 bit CAN1_F21R2 ; \ CAN1_F21R2_FB26, Filter bits
    : CAN1_F21R2_FB27 ( -- x addr ) 27 bit CAN1_F21R2 ; \ CAN1_F21R2_FB27, Filter bits
    : CAN1_F21R2_FB28 ( -- x addr ) 28 bit CAN1_F21R2 ; \ CAN1_F21R2_FB28, Filter bits
    : CAN1_F21R2_FB29 ( -- x addr ) 29 bit CAN1_F21R2 ; \ CAN1_F21R2_FB29, Filter bits
    : CAN1_F21R2_FB30 ( -- x addr ) 30 bit CAN1_F21R2 ; \ CAN1_F21R2_FB30, Filter bits
    : CAN1_F21R2_FB31 ( -- x addr ) 31 bit CAN1_F21R2 ; \ CAN1_F21R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F22R1 (read-write) Reset:0x00000000
    : CAN1_F22R1_FB0 ( -- x addr ) 0 bit CAN1_F22R1 ; \ CAN1_F22R1_FB0, Filter bits
    : CAN1_F22R1_FB1 ( -- x addr ) 1 bit CAN1_F22R1 ; \ CAN1_F22R1_FB1, Filter bits
    : CAN1_F22R1_FB2 ( -- x addr ) 2 bit CAN1_F22R1 ; \ CAN1_F22R1_FB2, Filter bits
    : CAN1_F22R1_FB3 ( -- x addr ) 3 bit CAN1_F22R1 ; \ CAN1_F22R1_FB3, Filter bits
    : CAN1_F22R1_FB4 ( -- x addr ) 4 bit CAN1_F22R1 ; \ CAN1_F22R1_FB4, Filter bits
    : CAN1_F22R1_FB5 ( -- x addr ) 5 bit CAN1_F22R1 ; \ CAN1_F22R1_FB5, Filter bits
    : CAN1_F22R1_FB6 ( -- x addr ) 6 bit CAN1_F22R1 ; \ CAN1_F22R1_FB6, Filter bits
    : CAN1_F22R1_FB7 ( -- x addr ) 7 bit CAN1_F22R1 ; \ CAN1_F22R1_FB7, Filter bits
    : CAN1_F22R1_FB8 ( -- x addr ) 8 bit CAN1_F22R1 ; \ CAN1_F22R1_FB8, Filter bits
    : CAN1_F22R1_FB9 ( -- x addr ) 9 bit CAN1_F22R1 ; \ CAN1_F22R1_FB9, Filter bits
    : CAN1_F22R1_FB10 ( -- x addr ) 10 bit CAN1_F22R1 ; \ CAN1_F22R1_FB10, Filter bits
    : CAN1_F22R1_FB11 ( -- x addr ) 11 bit CAN1_F22R1 ; \ CAN1_F22R1_FB11, Filter bits
    : CAN1_F22R1_FB12 ( -- x addr ) 12 bit CAN1_F22R1 ; \ CAN1_F22R1_FB12, Filter bits
    : CAN1_F22R1_FB13 ( -- x addr ) 13 bit CAN1_F22R1 ; \ CAN1_F22R1_FB13, Filter bits
    : CAN1_F22R1_FB14 ( -- x addr ) 14 bit CAN1_F22R1 ; \ CAN1_F22R1_FB14, Filter bits
    : CAN1_F22R1_FB15 ( -- x addr ) 15 bit CAN1_F22R1 ; \ CAN1_F22R1_FB15, Filter bits
    : CAN1_F22R1_FB16 ( -- x addr ) 16 bit CAN1_F22R1 ; \ CAN1_F22R1_FB16, Filter bits
    : CAN1_F22R1_FB17 ( -- x addr ) 17 bit CAN1_F22R1 ; \ CAN1_F22R1_FB17, Filter bits
    : CAN1_F22R1_FB18 ( -- x addr ) 18 bit CAN1_F22R1 ; \ CAN1_F22R1_FB18, Filter bits
    : CAN1_F22R1_FB19 ( -- x addr ) 19 bit CAN1_F22R1 ; \ CAN1_F22R1_FB19, Filter bits
    : CAN1_F22R1_FB20 ( -- x addr ) 20 bit CAN1_F22R1 ; \ CAN1_F22R1_FB20, Filter bits
    : CAN1_F22R1_FB21 ( -- x addr ) 21 bit CAN1_F22R1 ; \ CAN1_F22R1_FB21, Filter bits
    : CAN1_F22R1_FB22 ( -- x addr ) 22 bit CAN1_F22R1 ; \ CAN1_F22R1_FB22, Filter bits
    : CAN1_F22R1_FB23 ( -- x addr ) 23 bit CAN1_F22R1 ; \ CAN1_F22R1_FB23, Filter bits
    : CAN1_F22R1_FB24 ( -- x addr ) 24 bit CAN1_F22R1 ; \ CAN1_F22R1_FB24, Filter bits
    : CAN1_F22R1_FB25 ( -- x addr ) 25 bit CAN1_F22R1 ; \ CAN1_F22R1_FB25, Filter bits
    : CAN1_F22R1_FB26 ( -- x addr ) 26 bit CAN1_F22R1 ; \ CAN1_F22R1_FB26, Filter bits
    : CAN1_F22R1_FB27 ( -- x addr ) 27 bit CAN1_F22R1 ; \ CAN1_F22R1_FB27, Filter bits
    : CAN1_F22R1_FB28 ( -- x addr ) 28 bit CAN1_F22R1 ; \ CAN1_F22R1_FB28, Filter bits
    : CAN1_F22R1_FB29 ( -- x addr ) 29 bit CAN1_F22R1 ; \ CAN1_F22R1_FB29, Filter bits
    : CAN1_F22R1_FB30 ( -- x addr ) 30 bit CAN1_F22R1 ; \ CAN1_F22R1_FB30, Filter bits
    : CAN1_F22R1_FB31 ( -- x addr ) 31 bit CAN1_F22R1 ; \ CAN1_F22R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F22R2 (read-write) Reset:0x00000000
    : CAN1_F22R2_FB0 ( -- x addr ) 0 bit CAN1_F22R2 ; \ CAN1_F22R2_FB0, Filter bits
    : CAN1_F22R2_FB1 ( -- x addr ) 1 bit CAN1_F22R2 ; \ CAN1_F22R2_FB1, Filter bits
    : CAN1_F22R2_FB2 ( -- x addr ) 2 bit CAN1_F22R2 ; \ CAN1_F22R2_FB2, Filter bits
    : CAN1_F22R2_FB3 ( -- x addr ) 3 bit CAN1_F22R2 ; \ CAN1_F22R2_FB3, Filter bits
    : CAN1_F22R2_FB4 ( -- x addr ) 4 bit CAN1_F22R2 ; \ CAN1_F22R2_FB4, Filter bits
    : CAN1_F22R2_FB5 ( -- x addr ) 5 bit CAN1_F22R2 ; \ CAN1_F22R2_FB5, Filter bits
    : CAN1_F22R2_FB6 ( -- x addr ) 6 bit CAN1_F22R2 ; \ CAN1_F22R2_FB6, Filter bits
    : CAN1_F22R2_FB7 ( -- x addr ) 7 bit CAN1_F22R2 ; \ CAN1_F22R2_FB7, Filter bits
    : CAN1_F22R2_FB8 ( -- x addr ) 8 bit CAN1_F22R2 ; \ CAN1_F22R2_FB8, Filter bits
    : CAN1_F22R2_FB9 ( -- x addr ) 9 bit CAN1_F22R2 ; \ CAN1_F22R2_FB9, Filter bits
    : CAN1_F22R2_FB10 ( -- x addr ) 10 bit CAN1_F22R2 ; \ CAN1_F22R2_FB10, Filter bits
    : CAN1_F22R2_FB11 ( -- x addr ) 11 bit CAN1_F22R2 ; \ CAN1_F22R2_FB11, Filter bits
    : CAN1_F22R2_FB12 ( -- x addr ) 12 bit CAN1_F22R2 ; \ CAN1_F22R2_FB12, Filter bits
    : CAN1_F22R2_FB13 ( -- x addr ) 13 bit CAN1_F22R2 ; \ CAN1_F22R2_FB13, Filter bits
    : CAN1_F22R2_FB14 ( -- x addr ) 14 bit CAN1_F22R2 ; \ CAN1_F22R2_FB14, Filter bits
    : CAN1_F22R2_FB15 ( -- x addr ) 15 bit CAN1_F22R2 ; \ CAN1_F22R2_FB15, Filter bits
    : CAN1_F22R2_FB16 ( -- x addr ) 16 bit CAN1_F22R2 ; \ CAN1_F22R2_FB16, Filter bits
    : CAN1_F22R2_FB17 ( -- x addr ) 17 bit CAN1_F22R2 ; \ CAN1_F22R2_FB17, Filter bits
    : CAN1_F22R2_FB18 ( -- x addr ) 18 bit CAN1_F22R2 ; \ CAN1_F22R2_FB18, Filter bits
    : CAN1_F22R2_FB19 ( -- x addr ) 19 bit CAN1_F22R2 ; \ CAN1_F22R2_FB19, Filter bits
    : CAN1_F22R2_FB20 ( -- x addr ) 20 bit CAN1_F22R2 ; \ CAN1_F22R2_FB20, Filter bits
    : CAN1_F22R2_FB21 ( -- x addr ) 21 bit CAN1_F22R2 ; \ CAN1_F22R2_FB21, Filter bits
    : CAN1_F22R2_FB22 ( -- x addr ) 22 bit CAN1_F22R2 ; \ CAN1_F22R2_FB22, Filter bits
    : CAN1_F22R2_FB23 ( -- x addr ) 23 bit CAN1_F22R2 ; \ CAN1_F22R2_FB23, Filter bits
    : CAN1_F22R2_FB24 ( -- x addr ) 24 bit CAN1_F22R2 ; \ CAN1_F22R2_FB24, Filter bits
    : CAN1_F22R2_FB25 ( -- x addr ) 25 bit CAN1_F22R2 ; \ CAN1_F22R2_FB25, Filter bits
    : CAN1_F22R2_FB26 ( -- x addr ) 26 bit CAN1_F22R2 ; \ CAN1_F22R2_FB26, Filter bits
    : CAN1_F22R2_FB27 ( -- x addr ) 27 bit CAN1_F22R2 ; \ CAN1_F22R2_FB27, Filter bits
    : CAN1_F22R2_FB28 ( -- x addr ) 28 bit CAN1_F22R2 ; \ CAN1_F22R2_FB28, Filter bits
    : CAN1_F22R2_FB29 ( -- x addr ) 29 bit CAN1_F22R2 ; \ CAN1_F22R2_FB29, Filter bits
    : CAN1_F22R2_FB30 ( -- x addr ) 30 bit CAN1_F22R2 ; \ CAN1_F22R2_FB30, Filter bits
    : CAN1_F22R2_FB31 ( -- x addr ) 31 bit CAN1_F22R2 ; \ CAN1_F22R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F23R1 (read-write) Reset:0x00000000
    : CAN1_F23R1_FB0 ( -- x addr ) 0 bit CAN1_F23R1 ; \ CAN1_F23R1_FB0, Filter bits
    : CAN1_F23R1_FB1 ( -- x addr ) 1 bit CAN1_F23R1 ; \ CAN1_F23R1_FB1, Filter bits
    : CAN1_F23R1_FB2 ( -- x addr ) 2 bit CAN1_F23R1 ; \ CAN1_F23R1_FB2, Filter bits
    : CAN1_F23R1_FB3 ( -- x addr ) 3 bit CAN1_F23R1 ; \ CAN1_F23R1_FB3, Filter bits
    : CAN1_F23R1_FB4 ( -- x addr ) 4 bit CAN1_F23R1 ; \ CAN1_F23R1_FB4, Filter bits
    : CAN1_F23R1_FB5 ( -- x addr ) 5 bit CAN1_F23R1 ; \ CAN1_F23R1_FB5, Filter bits
    : CAN1_F23R1_FB6 ( -- x addr ) 6 bit CAN1_F23R1 ; \ CAN1_F23R1_FB6, Filter bits
    : CAN1_F23R1_FB7 ( -- x addr ) 7 bit CAN1_F23R1 ; \ CAN1_F23R1_FB7, Filter bits
    : CAN1_F23R1_FB8 ( -- x addr ) 8 bit CAN1_F23R1 ; \ CAN1_F23R1_FB8, Filter bits
    : CAN1_F23R1_FB9 ( -- x addr ) 9 bit CAN1_F23R1 ; \ CAN1_F23R1_FB9, Filter bits
    : CAN1_F23R1_FB10 ( -- x addr ) 10 bit CAN1_F23R1 ; \ CAN1_F23R1_FB10, Filter bits
    : CAN1_F23R1_FB11 ( -- x addr ) 11 bit CAN1_F23R1 ; \ CAN1_F23R1_FB11, Filter bits
    : CAN1_F23R1_FB12 ( -- x addr ) 12 bit CAN1_F23R1 ; \ CAN1_F23R1_FB12, Filter bits
    : CAN1_F23R1_FB13 ( -- x addr ) 13 bit CAN1_F23R1 ; \ CAN1_F23R1_FB13, Filter bits
    : CAN1_F23R1_FB14 ( -- x addr ) 14 bit CAN1_F23R1 ; \ CAN1_F23R1_FB14, Filter bits
    : CAN1_F23R1_FB15 ( -- x addr ) 15 bit CAN1_F23R1 ; \ CAN1_F23R1_FB15, Filter bits
    : CAN1_F23R1_FB16 ( -- x addr ) 16 bit CAN1_F23R1 ; \ CAN1_F23R1_FB16, Filter bits
    : CAN1_F23R1_FB17 ( -- x addr ) 17 bit CAN1_F23R1 ; \ CAN1_F23R1_FB17, Filter bits
    : CAN1_F23R1_FB18 ( -- x addr ) 18 bit CAN1_F23R1 ; \ CAN1_F23R1_FB18, Filter bits
    : CAN1_F23R1_FB19 ( -- x addr ) 19 bit CAN1_F23R1 ; \ CAN1_F23R1_FB19, Filter bits
    : CAN1_F23R1_FB20 ( -- x addr ) 20 bit CAN1_F23R1 ; \ CAN1_F23R1_FB20, Filter bits
    : CAN1_F23R1_FB21 ( -- x addr ) 21 bit CAN1_F23R1 ; \ CAN1_F23R1_FB21, Filter bits
    : CAN1_F23R1_FB22 ( -- x addr ) 22 bit CAN1_F23R1 ; \ CAN1_F23R1_FB22, Filter bits
    : CAN1_F23R1_FB23 ( -- x addr ) 23 bit CAN1_F23R1 ; \ CAN1_F23R1_FB23, Filter bits
    : CAN1_F23R1_FB24 ( -- x addr ) 24 bit CAN1_F23R1 ; \ CAN1_F23R1_FB24, Filter bits
    : CAN1_F23R1_FB25 ( -- x addr ) 25 bit CAN1_F23R1 ; \ CAN1_F23R1_FB25, Filter bits
    : CAN1_F23R1_FB26 ( -- x addr ) 26 bit CAN1_F23R1 ; \ CAN1_F23R1_FB26, Filter bits
    : CAN1_F23R1_FB27 ( -- x addr ) 27 bit CAN1_F23R1 ; \ CAN1_F23R1_FB27, Filter bits
    : CAN1_F23R1_FB28 ( -- x addr ) 28 bit CAN1_F23R1 ; \ CAN1_F23R1_FB28, Filter bits
    : CAN1_F23R1_FB29 ( -- x addr ) 29 bit CAN1_F23R1 ; \ CAN1_F23R1_FB29, Filter bits
    : CAN1_F23R1_FB30 ( -- x addr ) 30 bit CAN1_F23R1 ; \ CAN1_F23R1_FB30, Filter bits
    : CAN1_F23R1_FB31 ( -- x addr ) 31 bit CAN1_F23R1 ; \ CAN1_F23R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F23R2 (read-write) Reset:0x00000000
    : CAN1_F23R2_FB0 ( -- x addr ) 0 bit CAN1_F23R2 ; \ CAN1_F23R2_FB0, Filter bits
    : CAN1_F23R2_FB1 ( -- x addr ) 1 bit CAN1_F23R2 ; \ CAN1_F23R2_FB1, Filter bits
    : CAN1_F23R2_FB2 ( -- x addr ) 2 bit CAN1_F23R2 ; \ CAN1_F23R2_FB2, Filter bits
    : CAN1_F23R2_FB3 ( -- x addr ) 3 bit CAN1_F23R2 ; \ CAN1_F23R2_FB3, Filter bits
    : CAN1_F23R2_FB4 ( -- x addr ) 4 bit CAN1_F23R2 ; \ CAN1_F23R2_FB4, Filter bits
    : CAN1_F23R2_FB5 ( -- x addr ) 5 bit CAN1_F23R2 ; \ CAN1_F23R2_FB5, Filter bits
    : CAN1_F23R2_FB6 ( -- x addr ) 6 bit CAN1_F23R2 ; \ CAN1_F23R2_FB6, Filter bits
    : CAN1_F23R2_FB7 ( -- x addr ) 7 bit CAN1_F23R2 ; \ CAN1_F23R2_FB7, Filter bits
    : CAN1_F23R2_FB8 ( -- x addr ) 8 bit CAN1_F23R2 ; \ CAN1_F23R2_FB8, Filter bits
    : CAN1_F23R2_FB9 ( -- x addr ) 9 bit CAN1_F23R2 ; \ CAN1_F23R2_FB9, Filter bits
    : CAN1_F23R2_FB10 ( -- x addr ) 10 bit CAN1_F23R2 ; \ CAN1_F23R2_FB10, Filter bits
    : CAN1_F23R2_FB11 ( -- x addr ) 11 bit CAN1_F23R2 ; \ CAN1_F23R2_FB11, Filter bits
    : CAN1_F23R2_FB12 ( -- x addr ) 12 bit CAN1_F23R2 ; \ CAN1_F23R2_FB12, Filter bits
    : CAN1_F23R2_FB13 ( -- x addr ) 13 bit CAN1_F23R2 ; \ CAN1_F23R2_FB13, Filter bits
    : CAN1_F23R2_FB14 ( -- x addr ) 14 bit CAN1_F23R2 ; \ CAN1_F23R2_FB14, Filter bits
    : CAN1_F23R2_FB15 ( -- x addr ) 15 bit CAN1_F23R2 ; \ CAN1_F23R2_FB15, Filter bits
    : CAN1_F23R2_FB16 ( -- x addr ) 16 bit CAN1_F23R2 ; \ CAN1_F23R2_FB16, Filter bits
    : CAN1_F23R2_FB17 ( -- x addr ) 17 bit CAN1_F23R2 ; \ CAN1_F23R2_FB17, Filter bits
    : CAN1_F23R2_FB18 ( -- x addr ) 18 bit CAN1_F23R2 ; \ CAN1_F23R2_FB18, Filter bits
    : CAN1_F23R2_FB19 ( -- x addr ) 19 bit CAN1_F23R2 ; \ CAN1_F23R2_FB19, Filter bits
    : CAN1_F23R2_FB20 ( -- x addr ) 20 bit CAN1_F23R2 ; \ CAN1_F23R2_FB20, Filter bits
    : CAN1_F23R2_FB21 ( -- x addr ) 21 bit CAN1_F23R2 ; \ CAN1_F23R2_FB21, Filter bits
    : CAN1_F23R2_FB22 ( -- x addr ) 22 bit CAN1_F23R2 ; \ CAN1_F23R2_FB22, Filter bits
    : CAN1_F23R2_FB23 ( -- x addr ) 23 bit CAN1_F23R2 ; \ CAN1_F23R2_FB23, Filter bits
    : CAN1_F23R2_FB24 ( -- x addr ) 24 bit CAN1_F23R2 ; \ CAN1_F23R2_FB24, Filter bits
    : CAN1_F23R2_FB25 ( -- x addr ) 25 bit CAN1_F23R2 ; \ CAN1_F23R2_FB25, Filter bits
    : CAN1_F23R2_FB26 ( -- x addr ) 26 bit CAN1_F23R2 ; \ CAN1_F23R2_FB26, Filter bits
    : CAN1_F23R2_FB27 ( -- x addr ) 27 bit CAN1_F23R2 ; \ CAN1_F23R2_FB27, Filter bits
    : CAN1_F23R2_FB28 ( -- x addr ) 28 bit CAN1_F23R2 ; \ CAN1_F23R2_FB28, Filter bits
    : CAN1_F23R2_FB29 ( -- x addr ) 29 bit CAN1_F23R2 ; \ CAN1_F23R2_FB29, Filter bits
    : CAN1_F23R2_FB30 ( -- x addr ) 30 bit CAN1_F23R2 ; \ CAN1_F23R2_FB30, Filter bits
    : CAN1_F23R2_FB31 ( -- x addr ) 31 bit CAN1_F23R2 ; \ CAN1_F23R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F24R1 (read-write) Reset:0x00000000
    : CAN1_F24R1_FB0 ( -- x addr ) 0 bit CAN1_F24R1 ; \ CAN1_F24R1_FB0, Filter bits
    : CAN1_F24R1_FB1 ( -- x addr ) 1 bit CAN1_F24R1 ; \ CAN1_F24R1_FB1, Filter bits
    : CAN1_F24R1_FB2 ( -- x addr ) 2 bit CAN1_F24R1 ; \ CAN1_F24R1_FB2, Filter bits
    : CAN1_F24R1_FB3 ( -- x addr ) 3 bit CAN1_F24R1 ; \ CAN1_F24R1_FB3, Filter bits
    : CAN1_F24R1_FB4 ( -- x addr ) 4 bit CAN1_F24R1 ; \ CAN1_F24R1_FB4, Filter bits
    : CAN1_F24R1_FB5 ( -- x addr ) 5 bit CAN1_F24R1 ; \ CAN1_F24R1_FB5, Filter bits
    : CAN1_F24R1_FB6 ( -- x addr ) 6 bit CAN1_F24R1 ; \ CAN1_F24R1_FB6, Filter bits
    : CAN1_F24R1_FB7 ( -- x addr ) 7 bit CAN1_F24R1 ; \ CAN1_F24R1_FB7, Filter bits
    : CAN1_F24R1_FB8 ( -- x addr ) 8 bit CAN1_F24R1 ; \ CAN1_F24R1_FB8, Filter bits
    : CAN1_F24R1_FB9 ( -- x addr ) 9 bit CAN1_F24R1 ; \ CAN1_F24R1_FB9, Filter bits
    : CAN1_F24R1_FB10 ( -- x addr ) 10 bit CAN1_F24R1 ; \ CAN1_F24R1_FB10, Filter bits
    : CAN1_F24R1_FB11 ( -- x addr ) 11 bit CAN1_F24R1 ; \ CAN1_F24R1_FB11, Filter bits
    : CAN1_F24R1_FB12 ( -- x addr ) 12 bit CAN1_F24R1 ; \ CAN1_F24R1_FB12, Filter bits
    : CAN1_F24R1_FB13 ( -- x addr ) 13 bit CAN1_F24R1 ; \ CAN1_F24R1_FB13, Filter bits
    : CAN1_F24R1_FB14 ( -- x addr ) 14 bit CAN1_F24R1 ; \ CAN1_F24R1_FB14, Filter bits
    : CAN1_F24R1_FB15 ( -- x addr ) 15 bit CAN1_F24R1 ; \ CAN1_F24R1_FB15, Filter bits
    : CAN1_F24R1_FB16 ( -- x addr ) 16 bit CAN1_F24R1 ; \ CAN1_F24R1_FB16, Filter bits
    : CAN1_F24R1_FB17 ( -- x addr ) 17 bit CAN1_F24R1 ; \ CAN1_F24R1_FB17, Filter bits
    : CAN1_F24R1_FB18 ( -- x addr ) 18 bit CAN1_F24R1 ; \ CAN1_F24R1_FB18, Filter bits
    : CAN1_F24R1_FB19 ( -- x addr ) 19 bit CAN1_F24R1 ; \ CAN1_F24R1_FB19, Filter bits
    : CAN1_F24R1_FB20 ( -- x addr ) 20 bit CAN1_F24R1 ; \ CAN1_F24R1_FB20, Filter bits
    : CAN1_F24R1_FB21 ( -- x addr ) 21 bit CAN1_F24R1 ; \ CAN1_F24R1_FB21, Filter bits
    : CAN1_F24R1_FB22 ( -- x addr ) 22 bit CAN1_F24R1 ; \ CAN1_F24R1_FB22, Filter bits
    : CAN1_F24R1_FB23 ( -- x addr ) 23 bit CAN1_F24R1 ; \ CAN1_F24R1_FB23, Filter bits
    : CAN1_F24R1_FB24 ( -- x addr ) 24 bit CAN1_F24R1 ; \ CAN1_F24R1_FB24, Filter bits
    : CAN1_F24R1_FB25 ( -- x addr ) 25 bit CAN1_F24R1 ; \ CAN1_F24R1_FB25, Filter bits
    : CAN1_F24R1_FB26 ( -- x addr ) 26 bit CAN1_F24R1 ; \ CAN1_F24R1_FB26, Filter bits
    : CAN1_F24R1_FB27 ( -- x addr ) 27 bit CAN1_F24R1 ; \ CAN1_F24R1_FB27, Filter bits
    : CAN1_F24R1_FB28 ( -- x addr ) 28 bit CAN1_F24R1 ; \ CAN1_F24R1_FB28, Filter bits
    : CAN1_F24R1_FB29 ( -- x addr ) 29 bit CAN1_F24R1 ; \ CAN1_F24R1_FB29, Filter bits
    : CAN1_F24R1_FB30 ( -- x addr ) 30 bit CAN1_F24R1 ; \ CAN1_F24R1_FB30, Filter bits
    : CAN1_F24R1_FB31 ( -- x addr ) 31 bit CAN1_F24R1 ; \ CAN1_F24R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F24R2 (read-write) Reset:0x00000000
    : CAN1_F24R2_FB0 ( -- x addr ) 0 bit CAN1_F24R2 ; \ CAN1_F24R2_FB0, Filter bits
    : CAN1_F24R2_FB1 ( -- x addr ) 1 bit CAN1_F24R2 ; \ CAN1_F24R2_FB1, Filter bits
    : CAN1_F24R2_FB2 ( -- x addr ) 2 bit CAN1_F24R2 ; \ CAN1_F24R2_FB2, Filter bits
    : CAN1_F24R2_FB3 ( -- x addr ) 3 bit CAN1_F24R2 ; \ CAN1_F24R2_FB3, Filter bits
    : CAN1_F24R2_FB4 ( -- x addr ) 4 bit CAN1_F24R2 ; \ CAN1_F24R2_FB4, Filter bits
    : CAN1_F24R2_FB5 ( -- x addr ) 5 bit CAN1_F24R2 ; \ CAN1_F24R2_FB5, Filter bits
    : CAN1_F24R2_FB6 ( -- x addr ) 6 bit CAN1_F24R2 ; \ CAN1_F24R2_FB6, Filter bits
    : CAN1_F24R2_FB7 ( -- x addr ) 7 bit CAN1_F24R2 ; \ CAN1_F24R2_FB7, Filter bits
    : CAN1_F24R2_FB8 ( -- x addr ) 8 bit CAN1_F24R2 ; \ CAN1_F24R2_FB8, Filter bits
    : CAN1_F24R2_FB9 ( -- x addr ) 9 bit CAN1_F24R2 ; \ CAN1_F24R2_FB9, Filter bits
    : CAN1_F24R2_FB10 ( -- x addr ) 10 bit CAN1_F24R2 ; \ CAN1_F24R2_FB10, Filter bits
    : CAN1_F24R2_FB11 ( -- x addr ) 11 bit CAN1_F24R2 ; \ CAN1_F24R2_FB11, Filter bits
    : CAN1_F24R2_FB12 ( -- x addr ) 12 bit CAN1_F24R2 ; \ CAN1_F24R2_FB12, Filter bits
    : CAN1_F24R2_FB13 ( -- x addr ) 13 bit CAN1_F24R2 ; \ CAN1_F24R2_FB13, Filter bits
    : CAN1_F24R2_FB14 ( -- x addr ) 14 bit CAN1_F24R2 ; \ CAN1_F24R2_FB14, Filter bits
    : CAN1_F24R2_FB15 ( -- x addr ) 15 bit CAN1_F24R2 ; \ CAN1_F24R2_FB15, Filter bits
    : CAN1_F24R2_FB16 ( -- x addr ) 16 bit CAN1_F24R2 ; \ CAN1_F24R2_FB16, Filter bits
    : CAN1_F24R2_FB17 ( -- x addr ) 17 bit CAN1_F24R2 ; \ CAN1_F24R2_FB17, Filter bits
    : CAN1_F24R2_FB18 ( -- x addr ) 18 bit CAN1_F24R2 ; \ CAN1_F24R2_FB18, Filter bits
    : CAN1_F24R2_FB19 ( -- x addr ) 19 bit CAN1_F24R2 ; \ CAN1_F24R2_FB19, Filter bits
    : CAN1_F24R2_FB20 ( -- x addr ) 20 bit CAN1_F24R2 ; \ CAN1_F24R2_FB20, Filter bits
    : CAN1_F24R2_FB21 ( -- x addr ) 21 bit CAN1_F24R2 ; \ CAN1_F24R2_FB21, Filter bits
    : CAN1_F24R2_FB22 ( -- x addr ) 22 bit CAN1_F24R2 ; \ CAN1_F24R2_FB22, Filter bits
    : CAN1_F24R2_FB23 ( -- x addr ) 23 bit CAN1_F24R2 ; \ CAN1_F24R2_FB23, Filter bits
    : CAN1_F24R2_FB24 ( -- x addr ) 24 bit CAN1_F24R2 ; \ CAN1_F24R2_FB24, Filter bits
    : CAN1_F24R2_FB25 ( -- x addr ) 25 bit CAN1_F24R2 ; \ CAN1_F24R2_FB25, Filter bits
    : CAN1_F24R2_FB26 ( -- x addr ) 26 bit CAN1_F24R2 ; \ CAN1_F24R2_FB26, Filter bits
    : CAN1_F24R2_FB27 ( -- x addr ) 27 bit CAN1_F24R2 ; \ CAN1_F24R2_FB27, Filter bits
    : CAN1_F24R2_FB28 ( -- x addr ) 28 bit CAN1_F24R2 ; \ CAN1_F24R2_FB28, Filter bits
    : CAN1_F24R2_FB29 ( -- x addr ) 29 bit CAN1_F24R2 ; \ CAN1_F24R2_FB29, Filter bits
    : CAN1_F24R2_FB30 ( -- x addr ) 30 bit CAN1_F24R2 ; \ CAN1_F24R2_FB30, Filter bits
    : CAN1_F24R2_FB31 ( -- x addr ) 31 bit CAN1_F24R2 ; \ CAN1_F24R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F25R1 (read-write) Reset:0x00000000
    : CAN1_F25R1_FB0 ( -- x addr ) 0 bit CAN1_F25R1 ; \ CAN1_F25R1_FB0, Filter bits
    : CAN1_F25R1_FB1 ( -- x addr ) 1 bit CAN1_F25R1 ; \ CAN1_F25R1_FB1, Filter bits
    : CAN1_F25R1_FB2 ( -- x addr ) 2 bit CAN1_F25R1 ; \ CAN1_F25R1_FB2, Filter bits
    : CAN1_F25R1_FB3 ( -- x addr ) 3 bit CAN1_F25R1 ; \ CAN1_F25R1_FB3, Filter bits
    : CAN1_F25R1_FB4 ( -- x addr ) 4 bit CAN1_F25R1 ; \ CAN1_F25R1_FB4, Filter bits
    : CAN1_F25R1_FB5 ( -- x addr ) 5 bit CAN1_F25R1 ; \ CAN1_F25R1_FB5, Filter bits
    : CAN1_F25R1_FB6 ( -- x addr ) 6 bit CAN1_F25R1 ; \ CAN1_F25R1_FB6, Filter bits
    : CAN1_F25R1_FB7 ( -- x addr ) 7 bit CAN1_F25R1 ; \ CAN1_F25R1_FB7, Filter bits
    : CAN1_F25R1_FB8 ( -- x addr ) 8 bit CAN1_F25R1 ; \ CAN1_F25R1_FB8, Filter bits
    : CAN1_F25R1_FB9 ( -- x addr ) 9 bit CAN1_F25R1 ; \ CAN1_F25R1_FB9, Filter bits
    : CAN1_F25R1_FB10 ( -- x addr ) 10 bit CAN1_F25R1 ; \ CAN1_F25R1_FB10, Filter bits
    : CAN1_F25R1_FB11 ( -- x addr ) 11 bit CAN1_F25R1 ; \ CAN1_F25R1_FB11, Filter bits
    : CAN1_F25R1_FB12 ( -- x addr ) 12 bit CAN1_F25R1 ; \ CAN1_F25R1_FB12, Filter bits
    : CAN1_F25R1_FB13 ( -- x addr ) 13 bit CAN1_F25R1 ; \ CAN1_F25R1_FB13, Filter bits
    : CAN1_F25R1_FB14 ( -- x addr ) 14 bit CAN1_F25R1 ; \ CAN1_F25R1_FB14, Filter bits
    : CAN1_F25R1_FB15 ( -- x addr ) 15 bit CAN1_F25R1 ; \ CAN1_F25R1_FB15, Filter bits
    : CAN1_F25R1_FB16 ( -- x addr ) 16 bit CAN1_F25R1 ; \ CAN1_F25R1_FB16, Filter bits
    : CAN1_F25R1_FB17 ( -- x addr ) 17 bit CAN1_F25R1 ; \ CAN1_F25R1_FB17, Filter bits
    : CAN1_F25R1_FB18 ( -- x addr ) 18 bit CAN1_F25R1 ; \ CAN1_F25R1_FB18, Filter bits
    : CAN1_F25R1_FB19 ( -- x addr ) 19 bit CAN1_F25R1 ; \ CAN1_F25R1_FB19, Filter bits
    : CAN1_F25R1_FB20 ( -- x addr ) 20 bit CAN1_F25R1 ; \ CAN1_F25R1_FB20, Filter bits
    : CAN1_F25R1_FB21 ( -- x addr ) 21 bit CAN1_F25R1 ; \ CAN1_F25R1_FB21, Filter bits
    : CAN1_F25R1_FB22 ( -- x addr ) 22 bit CAN1_F25R1 ; \ CAN1_F25R1_FB22, Filter bits
    : CAN1_F25R1_FB23 ( -- x addr ) 23 bit CAN1_F25R1 ; \ CAN1_F25R1_FB23, Filter bits
    : CAN1_F25R1_FB24 ( -- x addr ) 24 bit CAN1_F25R1 ; \ CAN1_F25R1_FB24, Filter bits
    : CAN1_F25R1_FB25 ( -- x addr ) 25 bit CAN1_F25R1 ; \ CAN1_F25R1_FB25, Filter bits
    : CAN1_F25R1_FB26 ( -- x addr ) 26 bit CAN1_F25R1 ; \ CAN1_F25R1_FB26, Filter bits
    : CAN1_F25R1_FB27 ( -- x addr ) 27 bit CAN1_F25R1 ; \ CAN1_F25R1_FB27, Filter bits
    : CAN1_F25R1_FB28 ( -- x addr ) 28 bit CAN1_F25R1 ; \ CAN1_F25R1_FB28, Filter bits
    : CAN1_F25R1_FB29 ( -- x addr ) 29 bit CAN1_F25R1 ; \ CAN1_F25R1_FB29, Filter bits
    : CAN1_F25R1_FB30 ( -- x addr ) 30 bit CAN1_F25R1 ; \ CAN1_F25R1_FB30, Filter bits
    : CAN1_F25R1_FB31 ( -- x addr ) 31 bit CAN1_F25R1 ; \ CAN1_F25R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F25R2 (read-write) Reset:0x00000000
    : CAN1_F25R2_FB0 ( -- x addr ) 0 bit CAN1_F25R2 ; \ CAN1_F25R2_FB0, Filter bits
    : CAN1_F25R2_FB1 ( -- x addr ) 1 bit CAN1_F25R2 ; \ CAN1_F25R2_FB1, Filter bits
    : CAN1_F25R2_FB2 ( -- x addr ) 2 bit CAN1_F25R2 ; \ CAN1_F25R2_FB2, Filter bits
    : CAN1_F25R2_FB3 ( -- x addr ) 3 bit CAN1_F25R2 ; \ CAN1_F25R2_FB3, Filter bits
    : CAN1_F25R2_FB4 ( -- x addr ) 4 bit CAN1_F25R2 ; \ CAN1_F25R2_FB4, Filter bits
    : CAN1_F25R2_FB5 ( -- x addr ) 5 bit CAN1_F25R2 ; \ CAN1_F25R2_FB5, Filter bits
    : CAN1_F25R2_FB6 ( -- x addr ) 6 bit CAN1_F25R2 ; \ CAN1_F25R2_FB6, Filter bits
    : CAN1_F25R2_FB7 ( -- x addr ) 7 bit CAN1_F25R2 ; \ CAN1_F25R2_FB7, Filter bits
    : CAN1_F25R2_FB8 ( -- x addr ) 8 bit CAN1_F25R2 ; \ CAN1_F25R2_FB8, Filter bits
    : CAN1_F25R2_FB9 ( -- x addr ) 9 bit CAN1_F25R2 ; \ CAN1_F25R2_FB9, Filter bits
    : CAN1_F25R2_FB10 ( -- x addr ) 10 bit CAN1_F25R2 ; \ CAN1_F25R2_FB10, Filter bits
    : CAN1_F25R2_FB11 ( -- x addr ) 11 bit CAN1_F25R2 ; \ CAN1_F25R2_FB11, Filter bits
    : CAN1_F25R2_FB12 ( -- x addr ) 12 bit CAN1_F25R2 ; \ CAN1_F25R2_FB12, Filter bits
    : CAN1_F25R2_FB13 ( -- x addr ) 13 bit CAN1_F25R2 ; \ CAN1_F25R2_FB13, Filter bits
    : CAN1_F25R2_FB14 ( -- x addr ) 14 bit CAN1_F25R2 ; \ CAN1_F25R2_FB14, Filter bits
    : CAN1_F25R2_FB15 ( -- x addr ) 15 bit CAN1_F25R2 ; \ CAN1_F25R2_FB15, Filter bits
    : CAN1_F25R2_FB16 ( -- x addr ) 16 bit CAN1_F25R2 ; \ CAN1_F25R2_FB16, Filter bits
    : CAN1_F25R2_FB17 ( -- x addr ) 17 bit CAN1_F25R2 ; \ CAN1_F25R2_FB17, Filter bits
    : CAN1_F25R2_FB18 ( -- x addr ) 18 bit CAN1_F25R2 ; \ CAN1_F25R2_FB18, Filter bits
    : CAN1_F25R2_FB19 ( -- x addr ) 19 bit CAN1_F25R2 ; \ CAN1_F25R2_FB19, Filter bits
    : CAN1_F25R2_FB20 ( -- x addr ) 20 bit CAN1_F25R2 ; \ CAN1_F25R2_FB20, Filter bits
    : CAN1_F25R2_FB21 ( -- x addr ) 21 bit CAN1_F25R2 ; \ CAN1_F25R2_FB21, Filter bits
    : CAN1_F25R2_FB22 ( -- x addr ) 22 bit CAN1_F25R2 ; \ CAN1_F25R2_FB22, Filter bits
    : CAN1_F25R2_FB23 ( -- x addr ) 23 bit CAN1_F25R2 ; \ CAN1_F25R2_FB23, Filter bits
    : CAN1_F25R2_FB24 ( -- x addr ) 24 bit CAN1_F25R2 ; \ CAN1_F25R2_FB24, Filter bits
    : CAN1_F25R2_FB25 ( -- x addr ) 25 bit CAN1_F25R2 ; \ CAN1_F25R2_FB25, Filter bits
    : CAN1_F25R2_FB26 ( -- x addr ) 26 bit CAN1_F25R2 ; \ CAN1_F25R2_FB26, Filter bits
    : CAN1_F25R2_FB27 ( -- x addr ) 27 bit CAN1_F25R2 ; \ CAN1_F25R2_FB27, Filter bits
    : CAN1_F25R2_FB28 ( -- x addr ) 28 bit CAN1_F25R2 ; \ CAN1_F25R2_FB28, Filter bits
    : CAN1_F25R2_FB29 ( -- x addr ) 29 bit CAN1_F25R2 ; \ CAN1_F25R2_FB29, Filter bits
    : CAN1_F25R2_FB30 ( -- x addr ) 30 bit CAN1_F25R2 ; \ CAN1_F25R2_FB30, Filter bits
    : CAN1_F25R2_FB31 ( -- x addr ) 31 bit CAN1_F25R2 ; \ CAN1_F25R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F26R1 (read-write) Reset:0x00000000
    : CAN1_F26R1_FB0 ( -- x addr ) 0 bit CAN1_F26R1 ; \ CAN1_F26R1_FB0, Filter bits
    : CAN1_F26R1_FB1 ( -- x addr ) 1 bit CAN1_F26R1 ; \ CAN1_F26R1_FB1, Filter bits
    : CAN1_F26R1_FB2 ( -- x addr ) 2 bit CAN1_F26R1 ; \ CAN1_F26R1_FB2, Filter bits
    : CAN1_F26R1_FB3 ( -- x addr ) 3 bit CAN1_F26R1 ; \ CAN1_F26R1_FB3, Filter bits
    : CAN1_F26R1_FB4 ( -- x addr ) 4 bit CAN1_F26R1 ; \ CAN1_F26R1_FB4, Filter bits
    : CAN1_F26R1_FB5 ( -- x addr ) 5 bit CAN1_F26R1 ; \ CAN1_F26R1_FB5, Filter bits
    : CAN1_F26R1_FB6 ( -- x addr ) 6 bit CAN1_F26R1 ; \ CAN1_F26R1_FB6, Filter bits
    : CAN1_F26R1_FB7 ( -- x addr ) 7 bit CAN1_F26R1 ; \ CAN1_F26R1_FB7, Filter bits
    : CAN1_F26R1_FB8 ( -- x addr ) 8 bit CAN1_F26R1 ; \ CAN1_F26R1_FB8, Filter bits
    : CAN1_F26R1_FB9 ( -- x addr ) 9 bit CAN1_F26R1 ; \ CAN1_F26R1_FB9, Filter bits
    : CAN1_F26R1_FB10 ( -- x addr ) 10 bit CAN1_F26R1 ; \ CAN1_F26R1_FB10, Filter bits
    : CAN1_F26R1_FB11 ( -- x addr ) 11 bit CAN1_F26R1 ; \ CAN1_F26R1_FB11, Filter bits
    : CAN1_F26R1_FB12 ( -- x addr ) 12 bit CAN1_F26R1 ; \ CAN1_F26R1_FB12, Filter bits
    : CAN1_F26R1_FB13 ( -- x addr ) 13 bit CAN1_F26R1 ; \ CAN1_F26R1_FB13, Filter bits
    : CAN1_F26R1_FB14 ( -- x addr ) 14 bit CAN1_F26R1 ; \ CAN1_F26R1_FB14, Filter bits
    : CAN1_F26R1_FB15 ( -- x addr ) 15 bit CAN1_F26R1 ; \ CAN1_F26R1_FB15, Filter bits
    : CAN1_F26R1_FB16 ( -- x addr ) 16 bit CAN1_F26R1 ; \ CAN1_F26R1_FB16, Filter bits
    : CAN1_F26R1_FB17 ( -- x addr ) 17 bit CAN1_F26R1 ; \ CAN1_F26R1_FB17, Filter bits
    : CAN1_F26R1_FB18 ( -- x addr ) 18 bit CAN1_F26R1 ; \ CAN1_F26R1_FB18, Filter bits
    : CAN1_F26R1_FB19 ( -- x addr ) 19 bit CAN1_F26R1 ; \ CAN1_F26R1_FB19, Filter bits
    : CAN1_F26R1_FB20 ( -- x addr ) 20 bit CAN1_F26R1 ; \ CAN1_F26R1_FB20, Filter bits
    : CAN1_F26R1_FB21 ( -- x addr ) 21 bit CAN1_F26R1 ; \ CAN1_F26R1_FB21, Filter bits
    : CAN1_F26R1_FB22 ( -- x addr ) 22 bit CAN1_F26R1 ; \ CAN1_F26R1_FB22, Filter bits
    : CAN1_F26R1_FB23 ( -- x addr ) 23 bit CAN1_F26R1 ; \ CAN1_F26R1_FB23, Filter bits
    : CAN1_F26R1_FB24 ( -- x addr ) 24 bit CAN1_F26R1 ; \ CAN1_F26R1_FB24, Filter bits
    : CAN1_F26R1_FB25 ( -- x addr ) 25 bit CAN1_F26R1 ; \ CAN1_F26R1_FB25, Filter bits
    : CAN1_F26R1_FB26 ( -- x addr ) 26 bit CAN1_F26R1 ; \ CAN1_F26R1_FB26, Filter bits
    : CAN1_F26R1_FB27 ( -- x addr ) 27 bit CAN1_F26R1 ; \ CAN1_F26R1_FB27, Filter bits
    : CAN1_F26R1_FB28 ( -- x addr ) 28 bit CAN1_F26R1 ; \ CAN1_F26R1_FB28, Filter bits
    : CAN1_F26R1_FB29 ( -- x addr ) 29 bit CAN1_F26R1 ; \ CAN1_F26R1_FB29, Filter bits
    : CAN1_F26R1_FB30 ( -- x addr ) 30 bit CAN1_F26R1 ; \ CAN1_F26R1_FB30, Filter bits
    : CAN1_F26R1_FB31 ( -- x addr ) 31 bit CAN1_F26R1 ; \ CAN1_F26R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F26R2 (read-write) Reset:0x00000000
    : CAN1_F26R2_FB0 ( -- x addr ) 0 bit CAN1_F26R2 ; \ CAN1_F26R2_FB0, Filter bits
    : CAN1_F26R2_FB1 ( -- x addr ) 1 bit CAN1_F26R2 ; \ CAN1_F26R2_FB1, Filter bits
    : CAN1_F26R2_FB2 ( -- x addr ) 2 bit CAN1_F26R2 ; \ CAN1_F26R2_FB2, Filter bits
    : CAN1_F26R2_FB3 ( -- x addr ) 3 bit CAN1_F26R2 ; \ CAN1_F26R2_FB3, Filter bits
    : CAN1_F26R2_FB4 ( -- x addr ) 4 bit CAN1_F26R2 ; \ CAN1_F26R2_FB4, Filter bits
    : CAN1_F26R2_FB5 ( -- x addr ) 5 bit CAN1_F26R2 ; \ CAN1_F26R2_FB5, Filter bits
    : CAN1_F26R2_FB6 ( -- x addr ) 6 bit CAN1_F26R2 ; \ CAN1_F26R2_FB6, Filter bits
    : CAN1_F26R2_FB7 ( -- x addr ) 7 bit CAN1_F26R2 ; \ CAN1_F26R2_FB7, Filter bits
    : CAN1_F26R2_FB8 ( -- x addr ) 8 bit CAN1_F26R2 ; \ CAN1_F26R2_FB8, Filter bits
    : CAN1_F26R2_FB9 ( -- x addr ) 9 bit CAN1_F26R2 ; \ CAN1_F26R2_FB9, Filter bits
    : CAN1_F26R2_FB10 ( -- x addr ) 10 bit CAN1_F26R2 ; \ CAN1_F26R2_FB10, Filter bits
    : CAN1_F26R2_FB11 ( -- x addr ) 11 bit CAN1_F26R2 ; \ CAN1_F26R2_FB11, Filter bits
    : CAN1_F26R2_FB12 ( -- x addr ) 12 bit CAN1_F26R2 ; \ CAN1_F26R2_FB12, Filter bits
    : CAN1_F26R2_FB13 ( -- x addr ) 13 bit CAN1_F26R2 ; \ CAN1_F26R2_FB13, Filter bits
    : CAN1_F26R2_FB14 ( -- x addr ) 14 bit CAN1_F26R2 ; \ CAN1_F26R2_FB14, Filter bits
    : CAN1_F26R2_FB15 ( -- x addr ) 15 bit CAN1_F26R2 ; \ CAN1_F26R2_FB15, Filter bits
    : CAN1_F26R2_FB16 ( -- x addr ) 16 bit CAN1_F26R2 ; \ CAN1_F26R2_FB16, Filter bits
    : CAN1_F26R2_FB17 ( -- x addr ) 17 bit CAN1_F26R2 ; \ CAN1_F26R2_FB17, Filter bits
    : CAN1_F26R2_FB18 ( -- x addr ) 18 bit CAN1_F26R2 ; \ CAN1_F26R2_FB18, Filter bits
    : CAN1_F26R2_FB19 ( -- x addr ) 19 bit CAN1_F26R2 ; \ CAN1_F26R2_FB19, Filter bits
    : CAN1_F26R2_FB20 ( -- x addr ) 20 bit CAN1_F26R2 ; \ CAN1_F26R2_FB20, Filter bits
    : CAN1_F26R2_FB21 ( -- x addr ) 21 bit CAN1_F26R2 ; \ CAN1_F26R2_FB21, Filter bits
    : CAN1_F26R2_FB22 ( -- x addr ) 22 bit CAN1_F26R2 ; \ CAN1_F26R2_FB22, Filter bits
    : CAN1_F26R2_FB23 ( -- x addr ) 23 bit CAN1_F26R2 ; \ CAN1_F26R2_FB23, Filter bits
    : CAN1_F26R2_FB24 ( -- x addr ) 24 bit CAN1_F26R2 ; \ CAN1_F26R2_FB24, Filter bits
    : CAN1_F26R2_FB25 ( -- x addr ) 25 bit CAN1_F26R2 ; \ CAN1_F26R2_FB25, Filter bits
    : CAN1_F26R2_FB26 ( -- x addr ) 26 bit CAN1_F26R2 ; \ CAN1_F26R2_FB26, Filter bits
    : CAN1_F26R2_FB27 ( -- x addr ) 27 bit CAN1_F26R2 ; \ CAN1_F26R2_FB27, Filter bits
    : CAN1_F26R2_FB28 ( -- x addr ) 28 bit CAN1_F26R2 ; \ CAN1_F26R2_FB28, Filter bits
    : CAN1_F26R2_FB29 ( -- x addr ) 29 bit CAN1_F26R2 ; \ CAN1_F26R2_FB29, Filter bits
    : CAN1_F26R2_FB30 ( -- x addr ) 30 bit CAN1_F26R2 ; \ CAN1_F26R2_FB30, Filter bits
    : CAN1_F26R2_FB31 ( -- x addr ) 31 bit CAN1_F26R2 ; \ CAN1_F26R2_FB31, Filter bits
  [then]

  [if]
    \ CAN1_F27R1 (read-write) Reset:0x00000000
    : CAN1_F27R1_FB0 ( -- x addr ) 0 bit CAN1_F27R1 ; \ CAN1_F27R1_FB0, Filter bits
    : CAN1_F27R1_FB1 ( -- x addr ) 1 bit CAN1_F27R1 ; \ CAN1_F27R1_FB1, Filter bits
    : CAN1_F27R1_FB2 ( -- x addr ) 2 bit CAN1_F27R1 ; \ CAN1_F27R1_FB2, Filter bits
    : CAN1_F27R1_FB3 ( -- x addr ) 3 bit CAN1_F27R1 ; \ CAN1_F27R1_FB3, Filter bits
    : CAN1_F27R1_FB4 ( -- x addr ) 4 bit CAN1_F27R1 ; \ CAN1_F27R1_FB4, Filter bits
    : CAN1_F27R1_FB5 ( -- x addr ) 5 bit CAN1_F27R1 ; \ CAN1_F27R1_FB5, Filter bits
    : CAN1_F27R1_FB6 ( -- x addr ) 6 bit CAN1_F27R1 ; \ CAN1_F27R1_FB6, Filter bits
    : CAN1_F27R1_FB7 ( -- x addr ) 7 bit CAN1_F27R1 ; \ CAN1_F27R1_FB7, Filter bits
    : CAN1_F27R1_FB8 ( -- x addr ) 8 bit CAN1_F27R1 ; \ CAN1_F27R1_FB8, Filter bits
    : CAN1_F27R1_FB9 ( -- x addr ) 9 bit CAN1_F27R1 ; \ CAN1_F27R1_FB9, Filter bits
    : CAN1_F27R1_FB10 ( -- x addr ) 10 bit CAN1_F27R1 ; \ CAN1_F27R1_FB10, Filter bits
    : CAN1_F27R1_FB11 ( -- x addr ) 11 bit CAN1_F27R1 ; \ CAN1_F27R1_FB11, Filter bits
    : CAN1_F27R1_FB12 ( -- x addr ) 12 bit CAN1_F27R1 ; \ CAN1_F27R1_FB12, Filter bits
    : CAN1_F27R1_FB13 ( -- x addr ) 13 bit CAN1_F27R1 ; \ CAN1_F27R1_FB13, Filter bits
    : CAN1_F27R1_FB14 ( -- x addr ) 14 bit CAN1_F27R1 ; \ CAN1_F27R1_FB14, Filter bits
    : CAN1_F27R1_FB15 ( -- x addr ) 15 bit CAN1_F27R1 ; \ CAN1_F27R1_FB15, Filter bits
    : CAN1_F27R1_FB16 ( -- x addr ) 16 bit CAN1_F27R1 ; \ CAN1_F27R1_FB16, Filter bits
    : CAN1_F27R1_FB17 ( -- x addr ) 17 bit CAN1_F27R1 ; \ CAN1_F27R1_FB17, Filter bits
    : CAN1_F27R1_FB18 ( -- x addr ) 18 bit CAN1_F27R1 ; \ CAN1_F27R1_FB18, Filter bits
    : CAN1_F27R1_FB19 ( -- x addr ) 19 bit CAN1_F27R1 ; \ CAN1_F27R1_FB19, Filter bits
    : CAN1_F27R1_FB20 ( -- x addr ) 20 bit CAN1_F27R1 ; \ CAN1_F27R1_FB20, Filter bits
    : CAN1_F27R1_FB21 ( -- x addr ) 21 bit CAN1_F27R1 ; \ CAN1_F27R1_FB21, Filter bits
    : CAN1_F27R1_FB22 ( -- x addr ) 22 bit CAN1_F27R1 ; \ CAN1_F27R1_FB22, Filter bits
    : CAN1_F27R1_FB23 ( -- x addr ) 23 bit CAN1_F27R1 ; \ CAN1_F27R1_FB23, Filter bits
    : CAN1_F27R1_FB24 ( -- x addr ) 24 bit CAN1_F27R1 ; \ CAN1_F27R1_FB24, Filter bits
    : CAN1_F27R1_FB25 ( -- x addr ) 25 bit CAN1_F27R1 ; \ CAN1_F27R1_FB25, Filter bits
    : CAN1_F27R1_FB26 ( -- x addr ) 26 bit CAN1_F27R1 ; \ CAN1_F27R1_FB26, Filter bits
    : CAN1_F27R1_FB27 ( -- x addr ) 27 bit CAN1_F27R1 ; \ CAN1_F27R1_FB27, Filter bits
    : CAN1_F27R1_FB28 ( -- x addr ) 28 bit CAN1_F27R1 ; \ CAN1_F27R1_FB28, Filter bits
    : CAN1_F27R1_FB29 ( -- x addr ) 29 bit CAN1_F27R1 ; \ CAN1_F27R1_FB29, Filter bits
    : CAN1_F27R1_FB30 ( -- x addr ) 30 bit CAN1_F27R1 ; \ CAN1_F27R1_FB30, Filter bits
    : CAN1_F27R1_FB31 ( -- x addr ) 31 bit CAN1_F27R1 ; \ CAN1_F27R1_FB31, Filter bits
  [then]

  execute-defined? use-CAN1 [if]
    \ CAN1_F27R2 (read-write) Reset:0x00000000
    : CAN1_F27R2_FB0 ( -- x addr ) 0 bit CAN1_F27R2 ; \ CAN1_F27R2_FB0, Filter bits
    : CAN1_F27R2_FB1 ( -- x addr ) 1 bit CAN1_F27R2 ; \ CAN1_F27R2_FB1, Filter bits
    : CAN1_F27R2_FB2 ( -- x addr ) 2 bit CAN1_F27R2 ; \ CAN1_F27R2_FB2, Filter bits
    : CAN1_F27R2_FB3 ( -- x addr ) 3 bit CAN1_F27R2 ; \ CAN1_F27R2_FB3, Filter bits
    : CAN1_F27R2_FB4 ( -- x addr ) 4 bit CAN1_F27R2 ; \ CAN1_F27R2_FB4, Filter bits
    : CAN1_F27R2_FB5 ( -- x addr ) 5 bit CAN1_F27R2 ; \ CAN1_F27R2_FB5, Filter bits
    : CAN1_F27R2_FB6 ( -- x addr ) 6 bit CAN1_F27R2 ; \ CAN1_F27R2_FB6, Filter bits
    : CAN1_F27R2_FB7 ( -- x addr ) 7 bit CAN1_F27R2 ; \ CAN1_F27R2_FB7, Filter bits
    : CAN1_F27R2_FB8 ( -- x addr ) 8 bit CAN1_F27R2 ; \ CAN1_F27R2_FB8, Filter bits
    : CAN1_F27R2_FB9 ( -- x addr ) 9 bit CAN1_F27R2 ; \ CAN1_F27R2_FB9, Filter bits
    : CAN1_F27R2_FB10 ( -- x addr ) 10 bit CAN1_F27R2 ; \ CAN1_F27R2_FB10, Filter bits
    : CAN1_F27R2_FB11 ( -- x addr ) 11 bit CAN1_F27R2 ; \ CAN1_F27R2_FB11, Filter bits
    : CAN1_F27R2_FB12 ( -- x addr ) 12 bit CAN1_F27R2 ; \ CAN1_F27R2_FB12, Filter bits
    : CAN1_F27R2_FB13 ( -- x addr ) 13 bit CAN1_F27R2 ; \ CAN1_F27R2_FB13, Filter bits
    : CAN1_F27R2_FB14 ( -- x addr ) 14 bit CAN1_F27R2 ; \ CAN1_F27R2_FB14, Filter bits
    : CAN1_F27R2_FB15 ( -- x addr ) 15 bit CAN1_F27R2 ; \ CAN1_F27R2_FB15, Filter bits
    : CAN1_F27R2_FB16 ( -- x addr ) 16 bit CAN1_F27R2 ; \ CAN1_F27R2_FB16, Filter bits
    : CAN1_F27R2_FB17 ( -- x addr ) 17 bit CAN1_F27R2 ; \ CAN1_F27R2_FB17, Filter bits
    : CAN1_F27R2_FB18 ( -- x addr ) 18 bit CAN1_F27R2 ; \ CAN1_F27R2_FB18, Filter bits
    : CAN1_F27R2_FB19 ( -- x addr ) 19 bit CAN1_F27R2 ; \ CAN1_F27R2_FB19, Filter bits
    : CAN1_F27R2_FB20 ( -- x addr ) 20 bit CAN1_F27R2 ; \ CAN1_F27R2_FB20, Filter bits
    : CAN1_F27R2_FB21 ( -- x addr ) 21 bit CAN1_F27R2 ; \ CAN1_F27R2_FB21, Filter bits
    : CAN1_F27R2_FB22 ( -- x addr ) 22 bit CAN1_F27R2 ; \ CAN1_F27R2_FB22, Filter bits
    : CAN1_F27R2_FB23 ( -- x addr ) 23 bit CAN1_F27R2 ; \ CAN1_F27R2_FB23, Filter bits
    : CAN1_F27R2_FB24 ( -- x addr ) 24 bit CAN1_F27R2 ; \ CAN1_F27R2_FB24, Filter bits
    : CAN1_F27R2_FB25 ( -- x addr ) 25 bit CAN1_F27R2 ; \ CAN1_F27R2_FB25, Filter bits
    : CAN1_F27R2_FB26 ( -- x addr ) 26 bit CAN1_F27R2 ; \ CAN1_F27R2_FB26, Filter bits
    : CAN1_F27R2_FB27 ( -- x addr ) 27 bit CAN1_F27R2 ; \ CAN1_F27R2_FB27, Filter bits
    : CAN1_F27R2_FB28 ( -- x addr ) 28 bit CAN1_F27R2 ; \ CAN1_F27R2_FB28, Filter bits
    : CAN1_F27R2_FB29 ( -- x addr ) 29 bit CAN1_F27R2 ; \ CAN1_F27R2_FB29, Filter bits
    : CAN1_F27R2_FB30 ( -- x addr ) 30 bit CAN1_F27R2 ; \ CAN1_F27R2_FB30, Filter bits
    : CAN1_F27R2_FB31 ( -- x addr ) 31 bit CAN1_F27R2 ; \ CAN1_F27R2_FB31, Filter bits
  [then]

  [if]
    \ CAN2_MCR (read-write) Reset:0x00010002
    : CAN2_MCR_DBF ( -- x addr ) 16 bit CAN2_MCR ; \ CAN2_MCR_DBF, DBF
    : CAN2_MCR_RESET ( -- x addr ) 15 bit CAN2_MCR ; \ CAN2_MCR_RESET, RESET
    : CAN2_MCR_TTCM ( -- x addr ) 7 bit CAN2_MCR ; \ CAN2_MCR_TTCM, TTCM
    : CAN2_MCR_ABOM ( -- x addr ) 6 bit CAN2_MCR ; \ CAN2_MCR_ABOM, ABOM
    : CAN2_MCR_AWUM ( -- x addr ) 5 bit CAN2_MCR ; \ CAN2_MCR_AWUM, AWUM
    : CAN2_MCR_NART ( -- x addr ) 4 bit CAN2_MCR ; \ CAN2_MCR_NART, NART
    : CAN2_MCR_RFLM ( -- x addr ) 3 bit CAN2_MCR ; \ CAN2_MCR_RFLM, RFLM
    : CAN2_MCR_TXFP ( -- x addr ) 2 bit CAN2_MCR ; \ CAN2_MCR_TXFP, TXFP
    : CAN2_MCR_SLEEP ( -- x addr ) 1 bit CAN2_MCR ; \ CAN2_MCR_SLEEP, SLEEP
    : CAN2_MCR_INRQ ( -- x addr ) 0 bit CAN2_MCR ; \ CAN2_MCR_INRQ, INRQ
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_MSR (multiple-access)  Reset:0x00000C02
    : CAN2_MSR_RX ( -- x addr ) 11 bit CAN2_MSR ; \ CAN2_MSR_RX, RX
    : CAN2_MSR_SAMP ( -- x addr ) 10 bit CAN2_MSR ; \ CAN2_MSR_SAMP, SAMP
    : CAN2_MSR_RXM ( -- x addr ) 9 bit CAN2_MSR ; \ CAN2_MSR_RXM, RXM
    : CAN2_MSR_TXM ( -- x addr ) 8 bit CAN2_MSR ; \ CAN2_MSR_TXM, TXM
    : CAN2_MSR_SLAKI ( -- x addr ) 4 bit CAN2_MSR ; \ CAN2_MSR_SLAKI, SLAKI
    : CAN2_MSR_WKUI ( -- x addr ) 3 bit CAN2_MSR ; \ CAN2_MSR_WKUI, WKUI
    : CAN2_MSR_ERRI ( -- x addr ) 2 bit CAN2_MSR ; \ CAN2_MSR_ERRI, ERRI
    : CAN2_MSR_SLAK ( -- x addr ) 1 bit CAN2_MSR ; \ CAN2_MSR_SLAK, SLAK
    : CAN2_MSR_INAK ( -- x addr ) 0 bit CAN2_MSR ; \ CAN2_MSR_INAK, INAK
  [then]

  [if]
    \ CAN2_TSR (multiple-access)  Reset:0x1C000000
    : CAN2_TSR_LOW2? ( -- 1|0 ) 31 bit CAN2_TSR bit@ ; \ CAN2_TSR_LOW2, Lowest priority flag for mailbox  2
    : CAN2_TSR_LOW1? ( -- 1|0 ) 30 bit CAN2_TSR bit@ ; \ CAN2_TSR_LOW1, Lowest priority flag for mailbox  1
    : CAN2_TSR_LOW0? ( -- 1|0 ) 29 bit CAN2_TSR bit@ ; \ CAN2_TSR_LOW0, Lowest priority flag for mailbox  0
    : CAN2_TSR_TME2? ( -- 1|0 ) 28 bit CAN2_TSR bit@ ; \ CAN2_TSR_TME2, Lowest priority flag for mailbox  2
    : CAN2_TSR_TME1? ( -- 1|0 ) 27 bit CAN2_TSR bit@ ; \ CAN2_TSR_TME1, Lowest priority flag for mailbox  1
    : CAN2_TSR_TME0? ( -- 1|0 ) 26 bit CAN2_TSR bit@ ; \ CAN2_TSR_TME0, Lowest priority flag for mailbox  0
    : CAN2_TSR_CODE ( %bb -- x addr ) 24 lshift CAN2_TSR ; \ CAN2_TSR_CODE, CODE
    : CAN2_TSR_ABRQ2 ( -- x addr ) 23 bit CAN2_TSR ; \ CAN2_TSR_ABRQ2, ABRQ2
    : CAN2_TSR_TERR2 ( -- x addr ) 19 bit CAN2_TSR ; \ CAN2_TSR_TERR2, TERR2
    : CAN2_TSR_ALST2 ( -- x addr ) 18 bit CAN2_TSR ; \ CAN2_TSR_ALST2, ALST2
    : CAN2_TSR_TXOK2 ( -- x addr ) 17 bit CAN2_TSR ; \ CAN2_TSR_TXOK2, TXOK2
    : CAN2_TSR_RQCP2 ( -- x addr ) 16 bit CAN2_TSR ; \ CAN2_TSR_RQCP2, RQCP2
    : CAN2_TSR_ABRQ1 ( -- x addr ) 15 bit CAN2_TSR ; \ CAN2_TSR_ABRQ1, ABRQ1
    : CAN2_TSR_TERR1 ( -- x addr ) 11 bit CAN2_TSR ; \ CAN2_TSR_TERR1, TERR1
    : CAN2_TSR_ALST1 ( -- x addr ) 10 bit CAN2_TSR ; \ CAN2_TSR_ALST1, ALST1
    : CAN2_TSR_TXOK1 ( -- x addr ) 9 bit CAN2_TSR ; \ CAN2_TSR_TXOK1, TXOK1
    : CAN2_TSR_RQCP1 ( -- x addr ) 8 bit CAN2_TSR ; \ CAN2_TSR_RQCP1, RQCP1
    : CAN2_TSR_ABRQ0 ( -- x addr ) 7 bit CAN2_TSR ; \ CAN2_TSR_ABRQ0, ABRQ0
    : CAN2_TSR_TERR0 ( -- x addr ) 3 bit CAN2_TSR ; \ CAN2_TSR_TERR0, TERR0
    : CAN2_TSR_ALST0 ( -- x addr ) 2 bit CAN2_TSR ; \ CAN2_TSR_ALST0, ALST0
    : CAN2_TSR_TXOK0 ( -- x addr ) 1 bit CAN2_TSR ; \ CAN2_TSR_TXOK0, TXOK0
    : CAN2_TSR_RQCP0 ( -- x addr ) 0 bit CAN2_TSR ; \ CAN2_TSR_RQCP0, RQCP0
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_RF0R (multiple-access)  Reset:0x00000000
    : CAN2_RF0R_RFOM0 ( -- x addr ) 5 bit CAN2_RF0R ; \ CAN2_RF0R_RFOM0, RFOM0
    : CAN2_RF0R_FOVR0 ( -- x addr ) 4 bit CAN2_RF0R ; \ CAN2_RF0R_FOVR0, FOVR0
    : CAN2_RF0R_FULL0 ( -- x addr ) 3 bit CAN2_RF0R ; \ CAN2_RF0R_FULL0, FULL0
    : CAN2_RF0R_FMP0 ( %bb -- x addr ) CAN2_RF0R ; \ CAN2_RF0R_FMP0, FMP0
  [then]

  [if]
    \ CAN2_RF1R (multiple-access)  Reset:0x00000000
    : CAN2_RF1R_RFOM1 ( -- x addr ) 5 bit CAN2_RF1R ; \ CAN2_RF1R_RFOM1, RFOM1
    : CAN2_RF1R_FOVR1 ( -- x addr ) 4 bit CAN2_RF1R ; \ CAN2_RF1R_FOVR1, FOVR1
    : CAN2_RF1R_FULL1 ( -- x addr ) 3 bit CAN2_RF1R ; \ CAN2_RF1R_FULL1, FULL1
    : CAN2_RF1R_FMP1 ( %bb -- x addr ) CAN2_RF1R ; \ CAN2_RF1R_FMP1, FMP1
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_IER (read-write) Reset:0x00000000
    : CAN2_IER_SLKIE ( -- x addr ) 17 bit CAN2_IER ; \ CAN2_IER_SLKIE, SLKIE
    : CAN2_IER_WKUIE ( -- x addr ) 16 bit CAN2_IER ; \ CAN2_IER_WKUIE, WKUIE
    : CAN2_IER_ERRIE ( -- x addr ) 15 bit CAN2_IER ; \ CAN2_IER_ERRIE, ERRIE
    : CAN2_IER_LECIE ( -- x addr ) 11 bit CAN2_IER ; \ CAN2_IER_LECIE, LECIE
    : CAN2_IER_BOFIE ( -- x addr ) 10 bit CAN2_IER ; \ CAN2_IER_BOFIE, BOFIE
    : CAN2_IER_EPVIE ( -- x addr ) 9 bit CAN2_IER ; \ CAN2_IER_EPVIE, EPVIE
    : CAN2_IER_EWGIE ( -- x addr ) 8 bit CAN2_IER ; \ CAN2_IER_EWGIE, EWGIE
    : CAN2_IER_FOVIE1 ( -- x addr ) 6 bit CAN2_IER ; \ CAN2_IER_FOVIE1, FOVIE1
    : CAN2_IER_FFIE1 ( -- x addr ) 5 bit CAN2_IER ; \ CAN2_IER_FFIE1, FFIE1
    : CAN2_IER_FMPIE1 ( -- x addr ) 4 bit CAN2_IER ; \ CAN2_IER_FMPIE1, FMPIE1
    : CAN2_IER_FOVIE0 ( -- x addr ) 3 bit CAN2_IER ; \ CAN2_IER_FOVIE0, FOVIE0
    : CAN2_IER_FFIE0 ( -- x addr ) 2 bit CAN2_IER ; \ CAN2_IER_FFIE0, FFIE0
    : CAN2_IER_FMPIE0 ( -- x addr ) 1 bit CAN2_IER ; \ CAN2_IER_FMPIE0, FMPIE0
    : CAN2_IER_TMEIE ( -- x addr ) 0 bit CAN2_IER ; \ CAN2_IER_TMEIE, TMEIE
  [then]

  [if]
    \ CAN2_ESR (multiple-access)  Reset:0x00000000
    : CAN2_ESR_REC ( %bbbbbbbb -- x addr ) 24 lshift CAN2_ESR ; \ CAN2_ESR_REC, REC
    : CAN2_ESR_TEC ( %bbbbbbbb -- x addr ) 16 lshift CAN2_ESR ; \ CAN2_ESR_TEC, TEC
    : CAN2_ESR_LEC ( %bbb -- x addr ) 4 lshift CAN2_ESR ; \ CAN2_ESR_LEC, LEC
    : CAN2_ESR_BOFF ( -- x addr ) 2 bit CAN2_ESR ; \ CAN2_ESR_BOFF, BOFF
    : CAN2_ESR_EPVF ( -- x addr ) 1 bit CAN2_ESR ; \ CAN2_ESR_EPVF, EPVF
    : CAN2_ESR_EWGF ( -- x addr ) 0 bit CAN2_ESR ; \ CAN2_ESR_EWGF, EWGF
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_BTR (read-write) Reset:0x00000000
    : CAN2_BTR_SILM ( -- x addr ) 31 bit CAN2_BTR ; \ CAN2_BTR_SILM, SILM
    : CAN2_BTR_LBKM ( -- x addr ) 30 bit CAN2_BTR ; \ CAN2_BTR_LBKM, LBKM
    : CAN2_BTR_SJW ( %bb -- x addr ) 24 lshift CAN2_BTR ; \ CAN2_BTR_SJW, SJW
    : CAN2_BTR_TS2 ( %bbb -- x addr ) 20 lshift CAN2_BTR ; \ CAN2_BTR_TS2, TS2
    : CAN2_BTR_TS1 ( %bbbb -- x addr ) 16 lshift CAN2_BTR ; \ CAN2_BTR_TS1, TS1
    : CAN2_BTR_BRP ( %bbbbbbbbbb -- x addr ) CAN2_BTR ; \ CAN2_BTR_BRP, BRP
  [then]

  [if]
    \ CAN2_TI0R (read-write) Reset:0x00000000
    : CAN2_TI0R_STID x addr ) 21 lshift CAN2_TI0R ; \ CAN2_TI0R_STID, STID
    : CAN2_TI0R_EXID x addr ) 3 lshift CAN2_TI0R ; \ CAN2_TI0R_EXID, EXID
    : CAN2_TI0R_IDE ( -- x addr ) 2 bit CAN2_TI0R ; \ CAN2_TI0R_IDE, IDE
    : CAN2_TI0R_RTR ( -- x addr ) 1 bit CAN2_TI0R ; \ CAN2_TI0R_RTR, RTR
    : CAN2_TI0R_TXRQ ( -- x addr ) 0 bit CAN2_TI0R ; \ CAN2_TI0R_TXRQ, TXRQ
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_TDT0R (read-write) Reset:0x00000000
    : CAN2_TDT0R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN2_TDT0R ; \ CAN2_TDT0R_TIME, TIME
    : CAN2_TDT0R_TGT ( -- x addr ) 8 bit CAN2_TDT0R ; \ CAN2_TDT0R_TGT, TGT
    : CAN2_TDT0R_DLC ( %bbbb -- x addr ) CAN2_TDT0R ; \ CAN2_TDT0R_DLC, DLC
  [then]

  [if]
    \ CAN2_TDL0R (read-write) Reset:0x00000000
    : CAN2_TDL0R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDL0R ; \ CAN2_TDL0R_DATA3, DATA3
    : CAN2_TDL0R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDL0R ; \ CAN2_TDL0R_DATA2, DATA2
    : CAN2_TDL0R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDL0R ; \ CAN2_TDL0R_DATA1, DATA1
    : CAN2_TDL0R_DATA0 ( %bbbbbbbb -- x addr ) CAN2_TDL0R ; \ CAN2_TDL0R_DATA0, DATA0
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_TDH0R (read-write) Reset:0x00000000
    : CAN2_TDH0R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDH0R ; \ CAN2_TDH0R_DATA7, DATA7
    : CAN2_TDH0R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDH0R ; \ CAN2_TDH0R_DATA6, DATA6
    : CAN2_TDH0R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDH0R ; \ CAN2_TDH0R_DATA5, DATA5
    : CAN2_TDH0R_DATA4 ( %bbbbbbbb -- x addr ) CAN2_TDH0R ; \ CAN2_TDH0R_DATA4, DATA4
  [then]

  [if]
    \ CAN2_TI1R (read-write) Reset:0x00000000
    : CAN2_TI1R_STID x addr ) 21 lshift CAN2_TI1R ; \ CAN2_TI1R_STID, STID
    : CAN2_TI1R_EXID x addr ) 3 lshift CAN2_TI1R ; \ CAN2_TI1R_EXID, EXID
    : CAN2_TI1R_IDE ( -- x addr ) 2 bit CAN2_TI1R ; \ CAN2_TI1R_IDE, IDE
    : CAN2_TI1R_RTR ( -- x addr ) 1 bit CAN2_TI1R ; \ CAN2_TI1R_RTR, RTR
    : CAN2_TI1R_TXRQ ( -- x addr ) 0 bit CAN2_TI1R ; \ CAN2_TI1R_TXRQ, TXRQ
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_TDT1R (read-write) Reset:0x00000000
    : CAN2_TDT1R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN2_TDT1R ; \ CAN2_TDT1R_TIME, TIME
    : CAN2_TDT1R_TGT ( -- x addr ) 8 bit CAN2_TDT1R ; \ CAN2_TDT1R_TGT, TGT
    : CAN2_TDT1R_DLC ( %bbbb -- x addr ) CAN2_TDT1R ; \ CAN2_TDT1R_DLC, DLC
  [then]

  [if]
    \ CAN2_TDL1R (read-write) Reset:0x00000000
    : CAN2_TDL1R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDL1R ; \ CAN2_TDL1R_DATA3, DATA3
    : CAN2_TDL1R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDL1R ; \ CAN2_TDL1R_DATA2, DATA2
    : CAN2_TDL1R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDL1R ; \ CAN2_TDL1R_DATA1, DATA1
    : CAN2_TDL1R_DATA0 ( %bbbbbbbb -- x addr ) CAN2_TDL1R ; \ CAN2_TDL1R_DATA0, DATA0
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_TDH1R (read-write) Reset:0x00000000
    : CAN2_TDH1R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDH1R ; \ CAN2_TDH1R_DATA7, DATA7
    : CAN2_TDH1R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDH1R ; \ CAN2_TDH1R_DATA6, DATA6
    : CAN2_TDH1R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDH1R ; \ CAN2_TDH1R_DATA5, DATA5
    : CAN2_TDH1R_DATA4 ( %bbbbbbbb -- x addr ) CAN2_TDH1R ; \ CAN2_TDH1R_DATA4, DATA4
  [then]

  [if]
    \ CAN2_TI2R (read-write) Reset:0x00000000
    : CAN2_TI2R_STID x addr ) 21 lshift CAN2_TI2R ; \ CAN2_TI2R_STID, STID
    : CAN2_TI2R_EXID x addr ) 3 lshift CAN2_TI2R ; \ CAN2_TI2R_EXID, EXID
    : CAN2_TI2R_IDE ( -- x addr ) 2 bit CAN2_TI2R ; \ CAN2_TI2R_IDE, IDE
    : CAN2_TI2R_RTR ( -- x addr ) 1 bit CAN2_TI2R ; \ CAN2_TI2R_RTR, RTR
    : CAN2_TI2R_TXRQ ( -- x addr ) 0 bit CAN2_TI2R ; \ CAN2_TI2R_TXRQ, TXRQ
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_TDT2R (read-write) Reset:0x00000000
    : CAN2_TDT2R_TIME ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift CAN2_TDT2R ; \ CAN2_TDT2R_TIME, TIME
    : CAN2_TDT2R_TGT ( -- x addr ) 8 bit CAN2_TDT2R ; \ CAN2_TDT2R_TGT, TGT
    : CAN2_TDT2R_DLC ( %bbbb -- x addr ) CAN2_TDT2R ; \ CAN2_TDT2R_DLC, DLC
  [then]

  [if]
    \ CAN2_TDL2R (read-write) Reset:0x00000000
    : CAN2_TDL2R_DATA3 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDL2R ; \ CAN2_TDL2R_DATA3, DATA3
    : CAN2_TDL2R_DATA2 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDL2R ; \ CAN2_TDL2R_DATA2, DATA2
    : CAN2_TDL2R_DATA1 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDL2R ; \ CAN2_TDL2R_DATA1, DATA1
    : CAN2_TDL2R_DATA0 ( %bbbbbbbb -- x addr ) CAN2_TDL2R ; \ CAN2_TDL2R_DATA0, DATA0
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_TDH2R (read-write) Reset:0x00000000
    : CAN2_TDH2R_DATA7 ( %bbbbbbbb -- x addr ) 24 lshift CAN2_TDH2R ; \ CAN2_TDH2R_DATA7, DATA7
    : CAN2_TDH2R_DATA6 ( %bbbbbbbb -- x addr ) 16 lshift CAN2_TDH2R ; \ CAN2_TDH2R_DATA6, DATA6
    : CAN2_TDH2R_DATA5 ( %bbbbbbbb -- x addr ) 8 lshift CAN2_TDH2R ; \ CAN2_TDH2R_DATA5, DATA5
    : CAN2_TDH2R_DATA4 ( %bbbbbbbb -- x addr ) CAN2_TDH2R ; \ CAN2_TDH2R_DATA4, DATA4
  [then]

  [if]
    \ CAN2_RI0R (read-only) Reset:0x00000000
    : CAN2_RI0R_STID? ( --  x ) 21 lshift CAN2_RI0R @ ; \ CAN2_RI0R_STID, STID
    : CAN2_RI0R_EXID? ( --  x ) 3 lshift CAN2_RI0R @ ; \ CAN2_RI0R_EXID, EXID
    : CAN2_RI0R_IDE? ( --  1|0 ) 2 bit CAN2_RI0R bit@ ; \ CAN2_RI0R_IDE, IDE
    : CAN2_RI0R_RTR? ( --  1|0 ) 1 bit CAN2_RI0R bit@ ; \ CAN2_RI0R_RTR, RTR
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_RDT0R (read-only) Reset:0x00000000
    : CAN2_RDT0R_TIME? ( --  x ) 16 lshift CAN2_RDT0R @ ; \ CAN2_RDT0R_TIME, TIME
    : CAN2_RDT0R_FMI? ( --  x ) 8 lshift CAN2_RDT0R @ ; \ CAN2_RDT0R_FMI, FMI
    : CAN2_RDT0R_DLC? ( --  x ) CAN2_RDT0R @ ; \ CAN2_RDT0R_DLC, DLC
  [then]

  [if]
    \ CAN2_RDL0R (read-only) Reset:0x00000000
    : CAN2_RDL0R_DATA3? ( --  x ) 24 lshift CAN2_RDL0R @ ; \ CAN2_RDL0R_DATA3, DATA3
    : CAN2_RDL0R_DATA2? ( --  x ) 16 lshift CAN2_RDL0R @ ; \ CAN2_RDL0R_DATA2, DATA2
    : CAN2_RDL0R_DATA1? ( --  x ) 8 lshift CAN2_RDL0R @ ; \ CAN2_RDL0R_DATA1, DATA1
    : CAN2_RDL0R_DATA0? ( --  x ) CAN2_RDL0R @ ; \ CAN2_RDL0R_DATA0, DATA0
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_RDH0R (read-only) Reset:0x00000000
    : CAN2_RDH0R_DATA7? ( --  x ) 24 lshift CAN2_RDH0R @ ; \ CAN2_RDH0R_DATA7, DATA7
    : CAN2_RDH0R_DATA6? ( --  x ) 16 lshift CAN2_RDH0R @ ; \ CAN2_RDH0R_DATA6, DATA6
    : CAN2_RDH0R_DATA5? ( --  x ) 8 lshift CAN2_RDH0R @ ; \ CAN2_RDH0R_DATA5, DATA5
    : CAN2_RDH0R_DATA4? ( --  x ) CAN2_RDH0R @ ; \ CAN2_RDH0R_DATA4, DATA4
  [then]

  [if]
    \ CAN2_RI1R (read-only) Reset:0x00000000
    : CAN2_RI1R_STID? ( --  x ) 21 lshift CAN2_RI1R @ ; \ CAN2_RI1R_STID, STID
    : CAN2_RI1R_EXID? ( --  x ) 3 lshift CAN2_RI1R @ ; \ CAN2_RI1R_EXID, EXID
    : CAN2_RI1R_IDE? ( --  1|0 ) 2 bit CAN2_RI1R bit@ ; \ CAN2_RI1R_IDE, IDE
    : CAN2_RI1R_RTR? ( --  1|0 ) 1 bit CAN2_RI1R bit@ ; \ CAN2_RI1R_RTR, RTR
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_RDT1R (read-only) Reset:0x00000000
    : CAN2_RDT1R_TIME? ( --  x ) 16 lshift CAN2_RDT1R @ ; \ CAN2_RDT1R_TIME, TIME
    : CAN2_RDT1R_FMI? ( --  x ) 8 lshift CAN2_RDT1R @ ; \ CAN2_RDT1R_FMI, FMI
    : CAN2_RDT1R_DLC? ( --  x ) CAN2_RDT1R @ ; \ CAN2_RDT1R_DLC, DLC
  [then]

  [if]
    \ CAN2_RDL1R (read-only) Reset:0x00000000
    : CAN2_RDL1R_DATA3? ( --  x ) 24 lshift CAN2_RDL1R @ ; \ CAN2_RDL1R_DATA3, DATA3
    : CAN2_RDL1R_DATA2? ( --  x ) 16 lshift CAN2_RDL1R @ ; \ CAN2_RDL1R_DATA2, DATA2
    : CAN2_RDL1R_DATA1? ( --  x ) 8 lshift CAN2_RDL1R @ ; \ CAN2_RDL1R_DATA1, DATA1
    : CAN2_RDL1R_DATA0? ( --  x ) CAN2_RDL1R @ ; \ CAN2_RDL1R_DATA0, DATA0
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_RDH1R (read-only) Reset:0x00000000
    : CAN2_RDH1R_DATA7? ( --  x ) 24 lshift CAN2_RDH1R @ ; \ CAN2_RDH1R_DATA7, DATA7
    : CAN2_RDH1R_DATA6? ( --  x ) 16 lshift CAN2_RDH1R @ ; \ CAN2_RDH1R_DATA6, DATA6
    : CAN2_RDH1R_DATA5? ( --  x ) 8 lshift CAN2_RDH1R @ ; \ CAN2_RDH1R_DATA5, DATA5
    : CAN2_RDH1R_DATA4? ( --  x ) CAN2_RDH1R @ ; \ CAN2_RDH1R_DATA4, DATA4
  [then]

  [if]
    \ CAN2_FMR (read-write) Reset:0x2A1C0E01
    : CAN2_FMR_CAN2SB ( %bbbbbb -- x addr ) 8 lshift CAN2_FMR ; \ CAN2_FMR_CAN2SB, CAN2SB
    : CAN2_FMR_FINIT ( -- x addr ) 0 bit CAN2_FMR ; \ CAN2_FMR_FINIT, FINIT
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_FM1R (read-write) Reset:0x00000000
    : CAN2_FM1R_FBM0 ( -- x addr ) 0 bit CAN2_FM1R ; \ CAN2_FM1R_FBM0, Filter mode
    : CAN2_FM1R_FBM1 ( -- x addr ) 1 bit CAN2_FM1R ; \ CAN2_FM1R_FBM1, Filter mode
    : CAN2_FM1R_FBM2 ( -- x addr ) 2 bit CAN2_FM1R ; \ CAN2_FM1R_FBM2, Filter mode
    : CAN2_FM1R_FBM3 ( -- x addr ) 3 bit CAN2_FM1R ; \ CAN2_FM1R_FBM3, Filter mode
    : CAN2_FM1R_FBM4 ( -- x addr ) 4 bit CAN2_FM1R ; \ CAN2_FM1R_FBM4, Filter mode
    : CAN2_FM1R_FBM5 ( -- x addr ) 5 bit CAN2_FM1R ; \ CAN2_FM1R_FBM5, Filter mode
    : CAN2_FM1R_FBM6 ( -- x addr ) 6 bit CAN2_FM1R ; \ CAN2_FM1R_FBM6, Filter mode
    : CAN2_FM1R_FBM7 ( -- x addr ) 7 bit CAN2_FM1R ; \ CAN2_FM1R_FBM7, Filter mode
    : CAN2_FM1R_FBM8 ( -- x addr ) 8 bit CAN2_FM1R ; \ CAN2_FM1R_FBM8, Filter mode
    : CAN2_FM1R_FBM9 ( -- x addr ) 9 bit CAN2_FM1R ; \ CAN2_FM1R_FBM9, Filter mode
    : CAN2_FM1R_FBM10 ( -- x addr ) 10 bit CAN2_FM1R ; \ CAN2_FM1R_FBM10, Filter mode
    : CAN2_FM1R_FBM11 ( -- x addr ) 11 bit CAN2_FM1R ; \ CAN2_FM1R_FBM11, Filter mode
    : CAN2_FM1R_FBM12 ( -- x addr ) 12 bit CAN2_FM1R ; \ CAN2_FM1R_FBM12, Filter mode
    : CAN2_FM1R_FBM13 ( -- x addr ) 13 bit CAN2_FM1R ; \ CAN2_FM1R_FBM13, Filter mode
    : CAN2_FM1R_FBM14 ( -- x addr ) 14 bit CAN2_FM1R ; \ CAN2_FM1R_FBM14, Filter mode
    : CAN2_FM1R_FBM15 ( -- x addr ) 15 bit CAN2_FM1R ; \ CAN2_FM1R_FBM15, Filter mode
    : CAN2_FM1R_FBM16 ( -- x addr ) 16 bit CAN2_FM1R ; \ CAN2_FM1R_FBM16, Filter mode
    : CAN2_FM1R_FBM17 ( -- x addr ) 17 bit CAN2_FM1R ; \ CAN2_FM1R_FBM17, Filter mode
    : CAN2_FM1R_FBM18 ( -- x addr ) 18 bit CAN2_FM1R ; \ CAN2_FM1R_FBM18, Filter mode
    : CAN2_FM1R_FBM19 ( -- x addr ) 19 bit CAN2_FM1R ; \ CAN2_FM1R_FBM19, Filter mode
    : CAN2_FM1R_FBM20 ( -- x addr ) 20 bit CAN2_FM1R ; \ CAN2_FM1R_FBM20, Filter mode
    : CAN2_FM1R_FBM21 ( -- x addr ) 21 bit CAN2_FM1R ; \ CAN2_FM1R_FBM21, Filter mode
    : CAN2_FM1R_FBM22 ( -- x addr ) 22 bit CAN2_FM1R ; \ CAN2_FM1R_FBM22, Filter mode
    : CAN2_FM1R_FBM23 ( -- x addr ) 23 bit CAN2_FM1R ; \ CAN2_FM1R_FBM23, Filter mode
    : CAN2_FM1R_FBM24 ( -- x addr ) 24 bit CAN2_FM1R ; \ CAN2_FM1R_FBM24, Filter mode
    : CAN2_FM1R_FBM25 ( -- x addr ) 25 bit CAN2_FM1R ; \ CAN2_FM1R_FBM25, Filter mode
    : CAN2_FM1R_FBM26 ( -- x addr ) 26 bit CAN2_FM1R ; \ CAN2_FM1R_FBM26, Filter mode
    : CAN2_FM1R_FBM27 ( -- x addr ) 27 bit CAN2_FM1R ; \ CAN2_FM1R_FBM27, Filter mode
  [then]

  [if]
    \ CAN2_FS1R (read-write) Reset:0x00000000
    : CAN2_FS1R_FSC0 ( -- x addr ) 0 bit CAN2_FS1R ; \ CAN2_FS1R_FSC0, Filter scale configuration
    : CAN2_FS1R_FSC1 ( -- x addr ) 1 bit CAN2_FS1R ; \ CAN2_FS1R_FSC1, Filter scale configuration
    : CAN2_FS1R_FSC2 ( -- x addr ) 2 bit CAN2_FS1R ; \ CAN2_FS1R_FSC2, Filter scale configuration
    : CAN2_FS1R_FSC3 ( -- x addr ) 3 bit CAN2_FS1R ; \ CAN2_FS1R_FSC3, Filter scale configuration
    : CAN2_FS1R_FSC4 ( -- x addr ) 4 bit CAN2_FS1R ; \ CAN2_FS1R_FSC4, Filter scale configuration
    : CAN2_FS1R_FSC5 ( -- x addr ) 5 bit CAN2_FS1R ; \ CAN2_FS1R_FSC5, Filter scale configuration
    : CAN2_FS1R_FSC6 ( -- x addr ) 6 bit CAN2_FS1R ; \ CAN2_FS1R_FSC6, Filter scale configuration
    : CAN2_FS1R_FSC7 ( -- x addr ) 7 bit CAN2_FS1R ; \ CAN2_FS1R_FSC7, Filter scale configuration
    : CAN2_FS1R_FSC8 ( -- x addr ) 8 bit CAN2_FS1R ; \ CAN2_FS1R_FSC8, Filter scale configuration
    : CAN2_FS1R_FSC9 ( -- x addr ) 9 bit CAN2_FS1R ; \ CAN2_FS1R_FSC9, Filter scale configuration
    : CAN2_FS1R_FSC10 ( -- x addr ) 10 bit CAN2_FS1R ; \ CAN2_FS1R_FSC10, Filter scale configuration
    : CAN2_FS1R_FSC11 ( -- x addr ) 11 bit CAN2_FS1R ; \ CAN2_FS1R_FSC11, Filter scale configuration
    : CAN2_FS1R_FSC12 ( -- x addr ) 12 bit CAN2_FS1R ; \ CAN2_FS1R_FSC12, Filter scale configuration
    : CAN2_FS1R_FSC13 ( -- x addr ) 13 bit CAN2_FS1R ; \ CAN2_FS1R_FSC13, Filter scale configuration
    : CAN2_FS1R_FSC14 ( -- x addr ) 14 bit CAN2_FS1R ; \ CAN2_FS1R_FSC14, Filter scale configuration
    : CAN2_FS1R_FSC15 ( -- x addr ) 15 bit CAN2_FS1R ; \ CAN2_FS1R_FSC15, Filter scale configuration
    : CAN2_FS1R_FSC16 ( -- x addr ) 16 bit CAN2_FS1R ; \ CAN2_FS1R_FSC16, Filter scale configuration
    : CAN2_FS1R_FSC17 ( -- x addr ) 17 bit CAN2_FS1R ; \ CAN2_FS1R_FSC17, Filter scale configuration
    : CAN2_FS1R_FSC18 ( -- x addr ) 18 bit CAN2_FS1R ; \ CAN2_FS1R_FSC18, Filter scale configuration
    : CAN2_FS1R_FSC19 ( -- x addr ) 19 bit CAN2_FS1R ; \ CAN2_FS1R_FSC19, Filter scale configuration
    : CAN2_FS1R_FSC20 ( -- x addr ) 20 bit CAN2_FS1R ; \ CAN2_FS1R_FSC20, Filter scale configuration
    : CAN2_FS1R_FSC21 ( -- x addr ) 21 bit CAN2_FS1R ; \ CAN2_FS1R_FSC21, Filter scale configuration
    : CAN2_FS1R_FSC22 ( -- x addr ) 22 bit CAN2_FS1R ; \ CAN2_FS1R_FSC22, Filter scale configuration
    : CAN2_FS1R_FSC23 ( -- x addr ) 23 bit CAN2_FS1R ; \ CAN2_FS1R_FSC23, Filter scale configuration
    : CAN2_FS1R_FSC24 ( -- x addr ) 24 bit CAN2_FS1R ; \ CAN2_FS1R_FSC24, Filter scale configuration
    : CAN2_FS1R_FSC25 ( -- x addr ) 25 bit CAN2_FS1R ; \ CAN2_FS1R_FSC25, Filter scale configuration
    : CAN2_FS1R_FSC26 ( -- x addr ) 26 bit CAN2_FS1R ; \ CAN2_FS1R_FSC26, Filter scale configuration
    : CAN2_FS1R_FSC27 ( -- x addr ) 27 bit CAN2_FS1R ; \ CAN2_FS1R_FSC27, Filter scale configuration
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_FFA1R (read-write) Reset:0x00000000
    : CAN2_FFA1R_FFA0 ( -- x addr ) 0 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA0, Filter FIFO assignment for filter  0
    : CAN2_FFA1R_FFA1 ( -- x addr ) 1 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA1, Filter FIFO assignment for filter  1
    : CAN2_FFA1R_FFA2 ( -- x addr ) 2 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA2, Filter FIFO assignment for filter  2
    : CAN2_FFA1R_FFA3 ( -- x addr ) 3 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA3, Filter FIFO assignment for filter  3
    : CAN2_FFA1R_FFA4 ( -- x addr ) 4 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA4, Filter FIFO assignment for filter  4
    : CAN2_FFA1R_FFA5 ( -- x addr ) 5 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA5, Filter FIFO assignment for filter  5
    : CAN2_FFA1R_FFA6 ( -- x addr ) 6 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA6, Filter FIFO assignment for filter  6
    : CAN2_FFA1R_FFA7 ( -- x addr ) 7 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA7, Filter FIFO assignment for filter  7
    : CAN2_FFA1R_FFA8 ( -- x addr ) 8 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA8, Filter FIFO assignment for filter  8
    : CAN2_FFA1R_FFA9 ( -- x addr ) 9 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA9, Filter FIFO assignment for filter  9
    : CAN2_FFA1R_FFA10 ( -- x addr ) 10 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA10, Filter FIFO assignment for filter  10
    : CAN2_FFA1R_FFA11 ( -- x addr ) 11 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA11, Filter FIFO assignment for filter  11
    : CAN2_FFA1R_FFA12 ( -- x addr ) 12 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA12, Filter FIFO assignment for filter  12
    : CAN2_FFA1R_FFA13 ( -- x addr ) 13 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA13, Filter FIFO assignment for filter  13
    : CAN2_FFA1R_FFA14 ( -- x addr ) 14 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA14, Filter FIFO assignment for filter  14
    : CAN2_FFA1R_FFA15 ( -- x addr ) 15 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA15, Filter FIFO assignment for filter  15
    : CAN2_FFA1R_FFA16 ( -- x addr ) 16 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA16, Filter FIFO assignment for filter  16
    : CAN2_FFA1R_FFA17 ( -- x addr ) 17 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA17, Filter FIFO assignment for filter  17
    : CAN2_FFA1R_FFA18 ( -- x addr ) 18 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA18, Filter FIFO assignment for filter  18
    : CAN2_FFA1R_FFA19 ( -- x addr ) 19 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA19, Filter FIFO assignment for filter  19
    : CAN2_FFA1R_FFA20 ( -- x addr ) 20 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA20, Filter FIFO assignment for filter  20
    : CAN2_FFA1R_FFA21 ( -- x addr ) 21 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA21, Filter FIFO assignment for filter  21
    : CAN2_FFA1R_FFA22 ( -- x addr ) 22 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA22, Filter FIFO assignment for filter  22
    : CAN2_FFA1R_FFA23 ( -- x addr ) 23 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA23, Filter FIFO assignment for filter  23
    : CAN2_FFA1R_FFA24 ( -- x addr ) 24 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA24, Filter FIFO assignment for filter  24
    : CAN2_FFA1R_FFA25 ( -- x addr ) 25 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA25, Filter FIFO assignment for filter  25
    : CAN2_FFA1R_FFA26 ( -- x addr ) 26 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA26, Filter FIFO assignment for filter  26
    : CAN2_FFA1R_FFA27 ( -- x addr ) 27 bit CAN2_FFA1R ; \ CAN2_FFA1R_FFA27, Filter FIFO assignment for filter  27
  [then]

  [if]
    \ CAN2_FA1R (read-write) Reset:0x00000000
    : CAN2_FA1R_FACT0 ( -- x addr ) 0 bit CAN2_FA1R ; \ CAN2_FA1R_FACT0, Filter active
    : CAN2_FA1R_FACT1 ( -- x addr ) 1 bit CAN2_FA1R ; \ CAN2_FA1R_FACT1, Filter active
    : CAN2_FA1R_FACT2 ( -- x addr ) 2 bit CAN2_FA1R ; \ CAN2_FA1R_FACT2, Filter active
    : CAN2_FA1R_FACT3 ( -- x addr ) 3 bit CAN2_FA1R ; \ CAN2_FA1R_FACT3, Filter active
    : CAN2_FA1R_FACT4 ( -- x addr ) 4 bit CAN2_FA1R ; \ CAN2_FA1R_FACT4, Filter active
    : CAN2_FA1R_FACT5 ( -- x addr ) 5 bit CAN2_FA1R ; \ CAN2_FA1R_FACT5, Filter active
    : CAN2_FA1R_FACT6 ( -- x addr ) 6 bit CAN2_FA1R ; \ CAN2_FA1R_FACT6, Filter active
    : CAN2_FA1R_FACT7 ( -- x addr ) 7 bit CAN2_FA1R ; \ CAN2_FA1R_FACT7, Filter active
    : CAN2_FA1R_FACT8 ( -- x addr ) 8 bit CAN2_FA1R ; \ CAN2_FA1R_FACT8, Filter active
    : CAN2_FA1R_FACT9 ( -- x addr ) 9 bit CAN2_FA1R ; \ CAN2_FA1R_FACT9, Filter active
    : CAN2_FA1R_FACT10 ( -- x addr ) 10 bit CAN2_FA1R ; \ CAN2_FA1R_FACT10, Filter active
    : CAN2_FA1R_FACT11 ( -- x addr ) 11 bit CAN2_FA1R ; \ CAN2_FA1R_FACT11, Filter active
    : CAN2_FA1R_FACT12 ( -- x addr ) 12 bit CAN2_FA1R ; \ CAN2_FA1R_FACT12, Filter active
    : CAN2_FA1R_FACT13 ( -- x addr ) 13 bit CAN2_FA1R ; \ CAN2_FA1R_FACT13, Filter active
    : CAN2_FA1R_FACT14 ( -- x addr ) 14 bit CAN2_FA1R ; \ CAN2_FA1R_FACT14, Filter active
    : CAN2_FA1R_FACT15 ( -- x addr ) 15 bit CAN2_FA1R ; \ CAN2_FA1R_FACT15, Filter active
    : CAN2_FA1R_FACT16 ( -- x addr ) 16 bit CAN2_FA1R ; \ CAN2_FA1R_FACT16, Filter active
    : CAN2_FA1R_FACT17 ( -- x addr ) 17 bit CAN2_FA1R ; \ CAN2_FA1R_FACT17, Filter active
    : CAN2_FA1R_FACT18 ( -- x addr ) 18 bit CAN2_FA1R ; \ CAN2_FA1R_FACT18, Filter active
    : CAN2_FA1R_FACT19 ( -- x addr ) 19 bit CAN2_FA1R ; \ CAN2_FA1R_FACT19, Filter active
    : CAN2_FA1R_FACT20 ( -- x addr ) 20 bit CAN2_FA1R ; \ CAN2_FA1R_FACT20, Filter active
    : CAN2_FA1R_FACT21 ( -- x addr ) 21 bit CAN2_FA1R ; \ CAN2_FA1R_FACT21, Filter active
    : CAN2_FA1R_FACT22 ( -- x addr ) 22 bit CAN2_FA1R ; \ CAN2_FA1R_FACT22, Filter active
    : CAN2_FA1R_FACT23 ( -- x addr ) 23 bit CAN2_FA1R ; \ CAN2_FA1R_FACT23, Filter active
    : CAN2_FA1R_FACT24 ( -- x addr ) 24 bit CAN2_FA1R ; \ CAN2_FA1R_FACT24, Filter active
    : CAN2_FA1R_FACT25 ( -- x addr ) 25 bit CAN2_FA1R ; \ CAN2_FA1R_FACT25, Filter active
    : CAN2_FA1R_FACT26 ( -- x addr ) 26 bit CAN2_FA1R ; \ CAN2_FA1R_FACT26, Filter active
    : CAN2_FA1R_FACT27 ( -- x addr ) 27 bit CAN2_FA1R ; \ CAN2_FA1R_FACT27, Filter active
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F0R1 (read-write) Reset:0x00000000
    : CAN2_F0R1_FB0 ( -- x addr ) 0 bit CAN2_F0R1 ; \ CAN2_F0R1_FB0, Filter bits
    : CAN2_F0R1_FB1 ( -- x addr ) 1 bit CAN2_F0R1 ; \ CAN2_F0R1_FB1, Filter bits
    : CAN2_F0R1_FB2 ( -- x addr ) 2 bit CAN2_F0R1 ; \ CAN2_F0R1_FB2, Filter bits
    : CAN2_F0R1_FB3 ( -- x addr ) 3 bit CAN2_F0R1 ; \ CAN2_F0R1_FB3, Filter bits
    : CAN2_F0R1_FB4 ( -- x addr ) 4 bit CAN2_F0R1 ; \ CAN2_F0R1_FB4, Filter bits
    : CAN2_F0R1_FB5 ( -- x addr ) 5 bit CAN2_F0R1 ; \ CAN2_F0R1_FB5, Filter bits
    : CAN2_F0R1_FB6 ( -- x addr ) 6 bit CAN2_F0R1 ; \ CAN2_F0R1_FB6, Filter bits
    : CAN2_F0R1_FB7 ( -- x addr ) 7 bit CAN2_F0R1 ; \ CAN2_F0R1_FB7, Filter bits
    : CAN2_F0R1_FB8 ( -- x addr ) 8 bit CAN2_F0R1 ; \ CAN2_F0R1_FB8, Filter bits
    : CAN2_F0R1_FB9 ( -- x addr ) 9 bit CAN2_F0R1 ; \ CAN2_F0R1_FB9, Filter bits
    : CAN2_F0R1_FB10 ( -- x addr ) 10 bit CAN2_F0R1 ; \ CAN2_F0R1_FB10, Filter bits
    : CAN2_F0R1_FB11 ( -- x addr ) 11 bit CAN2_F0R1 ; \ CAN2_F0R1_FB11, Filter bits
    : CAN2_F0R1_FB12 ( -- x addr ) 12 bit CAN2_F0R1 ; \ CAN2_F0R1_FB12, Filter bits
    : CAN2_F0R1_FB13 ( -- x addr ) 13 bit CAN2_F0R1 ; \ CAN2_F0R1_FB13, Filter bits
    : CAN2_F0R1_FB14 ( -- x addr ) 14 bit CAN2_F0R1 ; \ CAN2_F0R1_FB14, Filter bits
    : CAN2_F0R1_FB15 ( -- x addr ) 15 bit CAN2_F0R1 ; \ CAN2_F0R1_FB15, Filter bits
    : CAN2_F0R1_FB16 ( -- x addr ) 16 bit CAN2_F0R1 ; \ CAN2_F0R1_FB16, Filter bits
    : CAN2_F0R1_FB17 ( -- x addr ) 17 bit CAN2_F0R1 ; \ CAN2_F0R1_FB17, Filter bits
    : CAN2_F0R1_FB18 ( -- x addr ) 18 bit CAN2_F0R1 ; \ CAN2_F0R1_FB18, Filter bits
    : CAN2_F0R1_FB19 ( -- x addr ) 19 bit CAN2_F0R1 ; \ CAN2_F0R1_FB19, Filter bits
    : CAN2_F0R1_FB20 ( -- x addr ) 20 bit CAN2_F0R1 ; \ CAN2_F0R1_FB20, Filter bits
    : CAN2_F0R1_FB21 ( -- x addr ) 21 bit CAN2_F0R1 ; \ CAN2_F0R1_FB21, Filter bits
    : CAN2_F0R1_FB22 ( -- x addr ) 22 bit CAN2_F0R1 ; \ CAN2_F0R1_FB22, Filter bits
    : CAN2_F0R1_FB23 ( -- x addr ) 23 bit CAN2_F0R1 ; \ CAN2_F0R1_FB23, Filter bits
    : CAN2_F0R1_FB24 ( -- x addr ) 24 bit CAN2_F0R1 ; \ CAN2_F0R1_FB24, Filter bits
    : CAN2_F0R1_FB25 ( -- x addr ) 25 bit CAN2_F0R1 ; \ CAN2_F0R1_FB25, Filter bits
    : CAN2_F0R1_FB26 ( -- x addr ) 26 bit CAN2_F0R1 ; \ CAN2_F0R1_FB26, Filter bits
    : CAN2_F0R1_FB27 ( -- x addr ) 27 bit CAN2_F0R1 ; \ CAN2_F0R1_FB27, Filter bits
    : CAN2_F0R1_FB28 ( -- x addr ) 28 bit CAN2_F0R1 ; \ CAN2_F0R1_FB28, Filter bits
    : CAN2_F0R1_FB29 ( -- x addr ) 29 bit CAN2_F0R1 ; \ CAN2_F0R1_FB29, Filter bits
    : CAN2_F0R1_FB30 ( -- x addr ) 30 bit CAN2_F0R1 ; \ CAN2_F0R1_FB30, Filter bits
    : CAN2_F0R1_FB31 ( -- x addr ) 31 bit CAN2_F0R1 ; \ CAN2_F0R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F0R2 (read-write) Reset:0x00000000
    : CAN2_F0R2_FB0 ( -- x addr ) 0 bit CAN2_F0R2 ; \ CAN2_F0R2_FB0, Filter bits
    : CAN2_F0R2_FB1 ( -- x addr ) 1 bit CAN2_F0R2 ; \ CAN2_F0R2_FB1, Filter bits
    : CAN2_F0R2_FB2 ( -- x addr ) 2 bit CAN2_F0R2 ; \ CAN2_F0R2_FB2, Filter bits
    : CAN2_F0R2_FB3 ( -- x addr ) 3 bit CAN2_F0R2 ; \ CAN2_F0R2_FB3, Filter bits
    : CAN2_F0R2_FB4 ( -- x addr ) 4 bit CAN2_F0R2 ; \ CAN2_F0R2_FB4, Filter bits
    : CAN2_F0R2_FB5 ( -- x addr ) 5 bit CAN2_F0R2 ; \ CAN2_F0R2_FB5, Filter bits
    : CAN2_F0R2_FB6 ( -- x addr ) 6 bit CAN2_F0R2 ; \ CAN2_F0R2_FB6, Filter bits
    : CAN2_F0R2_FB7 ( -- x addr ) 7 bit CAN2_F0R2 ; \ CAN2_F0R2_FB7, Filter bits
    : CAN2_F0R2_FB8 ( -- x addr ) 8 bit CAN2_F0R2 ; \ CAN2_F0R2_FB8, Filter bits
    : CAN2_F0R2_FB9 ( -- x addr ) 9 bit CAN2_F0R2 ; \ CAN2_F0R2_FB9, Filter bits
    : CAN2_F0R2_FB10 ( -- x addr ) 10 bit CAN2_F0R2 ; \ CAN2_F0R2_FB10, Filter bits
    : CAN2_F0R2_FB11 ( -- x addr ) 11 bit CAN2_F0R2 ; \ CAN2_F0R2_FB11, Filter bits
    : CAN2_F0R2_FB12 ( -- x addr ) 12 bit CAN2_F0R2 ; \ CAN2_F0R2_FB12, Filter bits
    : CAN2_F0R2_FB13 ( -- x addr ) 13 bit CAN2_F0R2 ; \ CAN2_F0R2_FB13, Filter bits
    : CAN2_F0R2_FB14 ( -- x addr ) 14 bit CAN2_F0R2 ; \ CAN2_F0R2_FB14, Filter bits
    : CAN2_F0R2_FB15 ( -- x addr ) 15 bit CAN2_F0R2 ; \ CAN2_F0R2_FB15, Filter bits
    : CAN2_F0R2_FB16 ( -- x addr ) 16 bit CAN2_F0R2 ; \ CAN2_F0R2_FB16, Filter bits
    : CAN2_F0R2_FB17 ( -- x addr ) 17 bit CAN2_F0R2 ; \ CAN2_F0R2_FB17, Filter bits
    : CAN2_F0R2_FB18 ( -- x addr ) 18 bit CAN2_F0R2 ; \ CAN2_F0R2_FB18, Filter bits
    : CAN2_F0R2_FB19 ( -- x addr ) 19 bit CAN2_F0R2 ; \ CAN2_F0R2_FB19, Filter bits
    : CAN2_F0R2_FB20 ( -- x addr ) 20 bit CAN2_F0R2 ; \ CAN2_F0R2_FB20, Filter bits
    : CAN2_F0R2_FB21 ( -- x addr ) 21 bit CAN2_F0R2 ; \ CAN2_F0R2_FB21, Filter bits
    : CAN2_F0R2_FB22 ( -- x addr ) 22 bit CAN2_F0R2 ; \ CAN2_F0R2_FB22, Filter bits
    : CAN2_F0R2_FB23 ( -- x addr ) 23 bit CAN2_F0R2 ; \ CAN2_F0R2_FB23, Filter bits
    : CAN2_F0R2_FB24 ( -- x addr ) 24 bit CAN2_F0R2 ; \ CAN2_F0R2_FB24, Filter bits
    : CAN2_F0R2_FB25 ( -- x addr ) 25 bit CAN2_F0R2 ; \ CAN2_F0R2_FB25, Filter bits
    : CAN2_F0R2_FB26 ( -- x addr ) 26 bit CAN2_F0R2 ; \ CAN2_F0R2_FB26, Filter bits
    : CAN2_F0R2_FB27 ( -- x addr ) 27 bit CAN2_F0R2 ; \ CAN2_F0R2_FB27, Filter bits
    : CAN2_F0R2_FB28 ( -- x addr ) 28 bit CAN2_F0R2 ; \ CAN2_F0R2_FB28, Filter bits
    : CAN2_F0R2_FB29 ( -- x addr ) 29 bit CAN2_F0R2 ; \ CAN2_F0R2_FB29, Filter bits
    : CAN2_F0R2_FB30 ( -- x addr ) 30 bit CAN2_F0R2 ; \ CAN2_F0R2_FB30, Filter bits
    : CAN2_F0R2_FB31 ( -- x addr ) 31 bit CAN2_F0R2 ; \ CAN2_F0R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F1R1 (read-write) Reset:0x00000000
    : CAN2_F1R1_FB0 ( -- x addr ) 0 bit CAN2_F1R1 ; \ CAN2_F1R1_FB0, Filter bits
    : CAN2_F1R1_FB1 ( -- x addr ) 1 bit CAN2_F1R1 ; \ CAN2_F1R1_FB1, Filter bits
    : CAN2_F1R1_FB2 ( -- x addr ) 2 bit CAN2_F1R1 ; \ CAN2_F1R1_FB2, Filter bits
    : CAN2_F1R1_FB3 ( -- x addr ) 3 bit CAN2_F1R1 ; \ CAN2_F1R1_FB3, Filter bits
    : CAN2_F1R1_FB4 ( -- x addr ) 4 bit CAN2_F1R1 ; \ CAN2_F1R1_FB4, Filter bits
    : CAN2_F1R1_FB5 ( -- x addr ) 5 bit CAN2_F1R1 ; \ CAN2_F1R1_FB5, Filter bits
    : CAN2_F1R1_FB6 ( -- x addr ) 6 bit CAN2_F1R1 ; \ CAN2_F1R1_FB6, Filter bits
    : CAN2_F1R1_FB7 ( -- x addr ) 7 bit CAN2_F1R1 ; \ CAN2_F1R1_FB7, Filter bits
    : CAN2_F1R1_FB8 ( -- x addr ) 8 bit CAN2_F1R1 ; \ CAN2_F1R1_FB8, Filter bits
    : CAN2_F1R1_FB9 ( -- x addr ) 9 bit CAN2_F1R1 ; \ CAN2_F1R1_FB9, Filter bits
    : CAN2_F1R1_FB10 ( -- x addr ) 10 bit CAN2_F1R1 ; \ CAN2_F1R1_FB10, Filter bits
    : CAN2_F1R1_FB11 ( -- x addr ) 11 bit CAN2_F1R1 ; \ CAN2_F1R1_FB11, Filter bits
    : CAN2_F1R1_FB12 ( -- x addr ) 12 bit CAN2_F1R1 ; \ CAN2_F1R1_FB12, Filter bits
    : CAN2_F1R1_FB13 ( -- x addr ) 13 bit CAN2_F1R1 ; \ CAN2_F1R1_FB13, Filter bits
    : CAN2_F1R1_FB14 ( -- x addr ) 14 bit CAN2_F1R1 ; \ CAN2_F1R1_FB14, Filter bits
    : CAN2_F1R1_FB15 ( -- x addr ) 15 bit CAN2_F1R1 ; \ CAN2_F1R1_FB15, Filter bits
    : CAN2_F1R1_FB16 ( -- x addr ) 16 bit CAN2_F1R1 ; \ CAN2_F1R1_FB16, Filter bits
    : CAN2_F1R1_FB17 ( -- x addr ) 17 bit CAN2_F1R1 ; \ CAN2_F1R1_FB17, Filter bits
    : CAN2_F1R1_FB18 ( -- x addr ) 18 bit CAN2_F1R1 ; \ CAN2_F1R1_FB18, Filter bits
    : CAN2_F1R1_FB19 ( -- x addr ) 19 bit CAN2_F1R1 ; \ CAN2_F1R1_FB19, Filter bits
    : CAN2_F1R1_FB20 ( -- x addr ) 20 bit CAN2_F1R1 ; \ CAN2_F1R1_FB20, Filter bits
    : CAN2_F1R1_FB21 ( -- x addr ) 21 bit CAN2_F1R1 ; \ CAN2_F1R1_FB21, Filter bits
    : CAN2_F1R1_FB22 ( -- x addr ) 22 bit CAN2_F1R1 ; \ CAN2_F1R1_FB22, Filter bits
    : CAN2_F1R1_FB23 ( -- x addr ) 23 bit CAN2_F1R1 ; \ CAN2_F1R1_FB23, Filter bits
    : CAN2_F1R1_FB24 ( -- x addr ) 24 bit CAN2_F1R1 ; \ CAN2_F1R1_FB24, Filter bits
    : CAN2_F1R1_FB25 ( -- x addr ) 25 bit CAN2_F1R1 ; \ CAN2_F1R1_FB25, Filter bits
    : CAN2_F1R1_FB26 ( -- x addr ) 26 bit CAN2_F1R1 ; \ CAN2_F1R1_FB26, Filter bits
    : CAN2_F1R1_FB27 ( -- x addr ) 27 bit CAN2_F1R1 ; \ CAN2_F1R1_FB27, Filter bits
    : CAN2_F1R1_FB28 ( -- x addr ) 28 bit CAN2_F1R1 ; \ CAN2_F1R1_FB28, Filter bits
    : CAN2_F1R1_FB29 ( -- x addr ) 29 bit CAN2_F1R1 ; \ CAN2_F1R1_FB29, Filter bits
    : CAN2_F1R1_FB30 ( -- x addr ) 30 bit CAN2_F1R1 ; \ CAN2_F1R1_FB30, Filter bits
    : CAN2_F1R1_FB31 ( -- x addr ) 31 bit CAN2_F1R1 ; \ CAN2_F1R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F1R2 (read-write) Reset:0x00000000
    : CAN2_F1R2_FB0 ( -- x addr ) 0 bit CAN2_F1R2 ; \ CAN2_F1R2_FB0, Filter bits
    : CAN2_F1R2_FB1 ( -- x addr ) 1 bit CAN2_F1R2 ; \ CAN2_F1R2_FB1, Filter bits
    : CAN2_F1R2_FB2 ( -- x addr ) 2 bit CAN2_F1R2 ; \ CAN2_F1R2_FB2, Filter bits
    : CAN2_F1R2_FB3 ( -- x addr ) 3 bit CAN2_F1R2 ; \ CAN2_F1R2_FB3, Filter bits
    : CAN2_F1R2_FB4 ( -- x addr ) 4 bit CAN2_F1R2 ; \ CAN2_F1R2_FB4, Filter bits
    : CAN2_F1R2_FB5 ( -- x addr ) 5 bit CAN2_F1R2 ; \ CAN2_F1R2_FB5, Filter bits
    : CAN2_F1R2_FB6 ( -- x addr ) 6 bit CAN2_F1R2 ; \ CAN2_F1R2_FB6, Filter bits
    : CAN2_F1R2_FB7 ( -- x addr ) 7 bit CAN2_F1R2 ; \ CAN2_F1R2_FB7, Filter bits
    : CAN2_F1R2_FB8 ( -- x addr ) 8 bit CAN2_F1R2 ; \ CAN2_F1R2_FB8, Filter bits
    : CAN2_F1R2_FB9 ( -- x addr ) 9 bit CAN2_F1R2 ; \ CAN2_F1R2_FB9, Filter bits
    : CAN2_F1R2_FB10 ( -- x addr ) 10 bit CAN2_F1R2 ; \ CAN2_F1R2_FB10, Filter bits
    : CAN2_F1R2_FB11 ( -- x addr ) 11 bit CAN2_F1R2 ; \ CAN2_F1R2_FB11, Filter bits
    : CAN2_F1R2_FB12 ( -- x addr ) 12 bit CAN2_F1R2 ; \ CAN2_F1R2_FB12, Filter bits
    : CAN2_F1R2_FB13 ( -- x addr ) 13 bit CAN2_F1R2 ; \ CAN2_F1R2_FB13, Filter bits
    : CAN2_F1R2_FB14 ( -- x addr ) 14 bit CAN2_F1R2 ; \ CAN2_F1R2_FB14, Filter bits
    : CAN2_F1R2_FB15 ( -- x addr ) 15 bit CAN2_F1R2 ; \ CAN2_F1R2_FB15, Filter bits
    : CAN2_F1R2_FB16 ( -- x addr ) 16 bit CAN2_F1R2 ; \ CAN2_F1R2_FB16, Filter bits
    : CAN2_F1R2_FB17 ( -- x addr ) 17 bit CAN2_F1R2 ; \ CAN2_F1R2_FB17, Filter bits
    : CAN2_F1R2_FB18 ( -- x addr ) 18 bit CAN2_F1R2 ; \ CAN2_F1R2_FB18, Filter bits
    : CAN2_F1R2_FB19 ( -- x addr ) 19 bit CAN2_F1R2 ; \ CAN2_F1R2_FB19, Filter bits
    : CAN2_F1R2_FB20 ( -- x addr ) 20 bit CAN2_F1R2 ; \ CAN2_F1R2_FB20, Filter bits
    : CAN2_F1R2_FB21 ( -- x addr ) 21 bit CAN2_F1R2 ; \ CAN2_F1R2_FB21, Filter bits
    : CAN2_F1R2_FB22 ( -- x addr ) 22 bit CAN2_F1R2 ; \ CAN2_F1R2_FB22, Filter bits
    : CAN2_F1R2_FB23 ( -- x addr ) 23 bit CAN2_F1R2 ; \ CAN2_F1R2_FB23, Filter bits
    : CAN2_F1R2_FB24 ( -- x addr ) 24 bit CAN2_F1R2 ; \ CAN2_F1R2_FB24, Filter bits
    : CAN2_F1R2_FB25 ( -- x addr ) 25 bit CAN2_F1R2 ; \ CAN2_F1R2_FB25, Filter bits
    : CAN2_F1R2_FB26 ( -- x addr ) 26 bit CAN2_F1R2 ; \ CAN2_F1R2_FB26, Filter bits
    : CAN2_F1R2_FB27 ( -- x addr ) 27 bit CAN2_F1R2 ; \ CAN2_F1R2_FB27, Filter bits
    : CAN2_F1R2_FB28 ( -- x addr ) 28 bit CAN2_F1R2 ; \ CAN2_F1R2_FB28, Filter bits
    : CAN2_F1R2_FB29 ( -- x addr ) 29 bit CAN2_F1R2 ; \ CAN2_F1R2_FB29, Filter bits
    : CAN2_F1R2_FB30 ( -- x addr ) 30 bit CAN2_F1R2 ; \ CAN2_F1R2_FB30, Filter bits
    : CAN2_F1R2_FB31 ( -- x addr ) 31 bit CAN2_F1R2 ; \ CAN2_F1R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F2R1 (read-write) Reset:0x00000000
    : CAN2_F2R1_FB0 ( -- x addr ) 0 bit CAN2_F2R1 ; \ CAN2_F2R1_FB0, Filter bits
    : CAN2_F2R1_FB1 ( -- x addr ) 1 bit CAN2_F2R1 ; \ CAN2_F2R1_FB1, Filter bits
    : CAN2_F2R1_FB2 ( -- x addr ) 2 bit CAN2_F2R1 ; \ CAN2_F2R1_FB2, Filter bits
    : CAN2_F2R1_FB3 ( -- x addr ) 3 bit CAN2_F2R1 ; \ CAN2_F2R1_FB3, Filter bits
    : CAN2_F2R1_FB4 ( -- x addr ) 4 bit CAN2_F2R1 ; \ CAN2_F2R1_FB4, Filter bits
    : CAN2_F2R1_FB5 ( -- x addr ) 5 bit CAN2_F2R1 ; \ CAN2_F2R1_FB5, Filter bits
    : CAN2_F2R1_FB6 ( -- x addr ) 6 bit CAN2_F2R1 ; \ CAN2_F2R1_FB6, Filter bits
    : CAN2_F2R1_FB7 ( -- x addr ) 7 bit CAN2_F2R1 ; \ CAN2_F2R1_FB7, Filter bits
    : CAN2_F2R1_FB8 ( -- x addr ) 8 bit CAN2_F2R1 ; \ CAN2_F2R1_FB8, Filter bits
    : CAN2_F2R1_FB9 ( -- x addr ) 9 bit CAN2_F2R1 ; \ CAN2_F2R1_FB9, Filter bits
    : CAN2_F2R1_FB10 ( -- x addr ) 10 bit CAN2_F2R1 ; \ CAN2_F2R1_FB10, Filter bits
    : CAN2_F2R1_FB11 ( -- x addr ) 11 bit CAN2_F2R1 ; \ CAN2_F2R1_FB11, Filter bits
    : CAN2_F2R1_FB12 ( -- x addr ) 12 bit CAN2_F2R1 ; \ CAN2_F2R1_FB12, Filter bits
    : CAN2_F2R1_FB13 ( -- x addr ) 13 bit CAN2_F2R1 ; \ CAN2_F2R1_FB13, Filter bits
    : CAN2_F2R1_FB14 ( -- x addr ) 14 bit CAN2_F2R1 ; \ CAN2_F2R1_FB14, Filter bits
    : CAN2_F2R1_FB15 ( -- x addr ) 15 bit CAN2_F2R1 ; \ CAN2_F2R1_FB15, Filter bits
    : CAN2_F2R1_FB16 ( -- x addr ) 16 bit CAN2_F2R1 ; \ CAN2_F2R1_FB16, Filter bits
    : CAN2_F2R1_FB17 ( -- x addr ) 17 bit CAN2_F2R1 ; \ CAN2_F2R1_FB17, Filter bits
    : CAN2_F2R1_FB18 ( -- x addr ) 18 bit CAN2_F2R1 ; \ CAN2_F2R1_FB18, Filter bits
    : CAN2_F2R1_FB19 ( -- x addr ) 19 bit CAN2_F2R1 ; \ CAN2_F2R1_FB19, Filter bits
    : CAN2_F2R1_FB20 ( -- x addr ) 20 bit CAN2_F2R1 ; \ CAN2_F2R1_FB20, Filter bits
    : CAN2_F2R1_FB21 ( -- x addr ) 21 bit CAN2_F2R1 ; \ CAN2_F2R1_FB21, Filter bits
    : CAN2_F2R1_FB22 ( -- x addr ) 22 bit CAN2_F2R1 ; \ CAN2_F2R1_FB22, Filter bits
    : CAN2_F2R1_FB23 ( -- x addr ) 23 bit CAN2_F2R1 ; \ CAN2_F2R1_FB23, Filter bits
    : CAN2_F2R1_FB24 ( -- x addr ) 24 bit CAN2_F2R1 ; \ CAN2_F2R1_FB24, Filter bits
    : CAN2_F2R1_FB25 ( -- x addr ) 25 bit CAN2_F2R1 ; \ CAN2_F2R1_FB25, Filter bits
    : CAN2_F2R1_FB26 ( -- x addr ) 26 bit CAN2_F2R1 ; \ CAN2_F2R1_FB26, Filter bits
    : CAN2_F2R1_FB27 ( -- x addr ) 27 bit CAN2_F2R1 ; \ CAN2_F2R1_FB27, Filter bits
    : CAN2_F2R1_FB28 ( -- x addr ) 28 bit CAN2_F2R1 ; \ CAN2_F2R1_FB28, Filter bits
    : CAN2_F2R1_FB29 ( -- x addr ) 29 bit CAN2_F2R1 ; \ CAN2_F2R1_FB29, Filter bits
    : CAN2_F2R1_FB30 ( -- x addr ) 30 bit CAN2_F2R1 ; \ CAN2_F2R1_FB30, Filter bits
    : CAN2_F2R1_FB31 ( -- x addr ) 31 bit CAN2_F2R1 ; \ CAN2_F2R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F2R2 (read-write) Reset:0x00000000
    : CAN2_F2R2_FB0 ( -- x addr ) 0 bit CAN2_F2R2 ; \ CAN2_F2R2_FB0, Filter bits
    : CAN2_F2R2_FB1 ( -- x addr ) 1 bit CAN2_F2R2 ; \ CAN2_F2R2_FB1, Filter bits
    : CAN2_F2R2_FB2 ( -- x addr ) 2 bit CAN2_F2R2 ; \ CAN2_F2R2_FB2, Filter bits
    : CAN2_F2R2_FB3 ( -- x addr ) 3 bit CAN2_F2R2 ; \ CAN2_F2R2_FB3, Filter bits
    : CAN2_F2R2_FB4 ( -- x addr ) 4 bit CAN2_F2R2 ; \ CAN2_F2R2_FB4, Filter bits
    : CAN2_F2R2_FB5 ( -- x addr ) 5 bit CAN2_F2R2 ; \ CAN2_F2R2_FB5, Filter bits
    : CAN2_F2R2_FB6 ( -- x addr ) 6 bit CAN2_F2R2 ; \ CAN2_F2R2_FB6, Filter bits
    : CAN2_F2R2_FB7 ( -- x addr ) 7 bit CAN2_F2R2 ; \ CAN2_F2R2_FB7, Filter bits
    : CAN2_F2R2_FB8 ( -- x addr ) 8 bit CAN2_F2R2 ; \ CAN2_F2R2_FB8, Filter bits
    : CAN2_F2R2_FB9 ( -- x addr ) 9 bit CAN2_F2R2 ; \ CAN2_F2R2_FB9, Filter bits
    : CAN2_F2R2_FB10 ( -- x addr ) 10 bit CAN2_F2R2 ; \ CAN2_F2R2_FB10, Filter bits
    : CAN2_F2R2_FB11 ( -- x addr ) 11 bit CAN2_F2R2 ; \ CAN2_F2R2_FB11, Filter bits
    : CAN2_F2R2_FB12 ( -- x addr ) 12 bit CAN2_F2R2 ; \ CAN2_F2R2_FB12, Filter bits
    : CAN2_F2R2_FB13 ( -- x addr ) 13 bit CAN2_F2R2 ; \ CAN2_F2R2_FB13, Filter bits
    : CAN2_F2R2_FB14 ( -- x addr ) 14 bit CAN2_F2R2 ; \ CAN2_F2R2_FB14, Filter bits
    : CAN2_F2R2_FB15 ( -- x addr ) 15 bit CAN2_F2R2 ; \ CAN2_F2R2_FB15, Filter bits
    : CAN2_F2R2_FB16 ( -- x addr ) 16 bit CAN2_F2R2 ; \ CAN2_F2R2_FB16, Filter bits
    : CAN2_F2R2_FB17 ( -- x addr ) 17 bit CAN2_F2R2 ; \ CAN2_F2R2_FB17, Filter bits
    : CAN2_F2R2_FB18 ( -- x addr ) 18 bit CAN2_F2R2 ; \ CAN2_F2R2_FB18, Filter bits
    : CAN2_F2R2_FB19 ( -- x addr ) 19 bit CAN2_F2R2 ; \ CAN2_F2R2_FB19, Filter bits
    : CAN2_F2R2_FB20 ( -- x addr ) 20 bit CAN2_F2R2 ; \ CAN2_F2R2_FB20, Filter bits
    : CAN2_F2R2_FB21 ( -- x addr ) 21 bit CAN2_F2R2 ; \ CAN2_F2R2_FB21, Filter bits
    : CAN2_F2R2_FB22 ( -- x addr ) 22 bit CAN2_F2R2 ; \ CAN2_F2R2_FB22, Filter bits
    : CAN2_F2R2_FB23 ( -- x addr ) 23 bit CAN2_F2R2 ; \ CAN2_F2R2_FB23, Filter bits
    : CAN2_F2R2_FB24 ( -- x addr ) 24 bit CAN2_F2R2 ; \ CAN2_F2R2_FB24, Filter bits
    : CAN2_F2R2_FB25 ( -- x addr ) 25 bit CAN2_F2R2 ; \ CAN2_F2R2_FB25, Filter bits
    : CAN2_F2R2_FB26 ( -- x addr ) 26 bit CAN2_F2R2 ; \ CAN2_F2R2_FB26, Filter bits
    : CAN2_F2R2_FB27 ( -- x addr ) 27 bit CAN2_F2R2 ; \ CAN2_F2R2_FB27, Filter bits
    : CAN2_F2R2_FB28 ( -- x addr ) 28 bit CAN2_F2R2 ; \ CAN2_F2R2_FB28, Filter bits
    : CAN2_F2R2_FB29 ( -- x addr ) 29 bit CAN2_F2R2 ; \ CAN2_F2R2_FB29, Filter bits
    : CAN2_F2R2_FB30 ( -- x addr ) 30 bit CAN2_F2R2 ; \ CAN2_F2R2_FB30, Filter bits
    : CAN2_F2R2_FB31 ( -- x addr ) 31 bit CAN2_F2R2 ; \ CAN2_F2R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F3R1 (read-write) Reset:0x00000000
    : CAN2_F3R1_FB0 ( -- x addr ) 0 bit CAN2_F3R1 ; \ CAN2_F3R1_FB0, Filter bits
    : CAN2_F3R1_FB1 ( -- x addr ) 1 bit CAN2_F3R1 ; \ CAN2_F3R1_FB1, Filter bits
    : CAN2_F3R1_FB2 ( -- x addr ) 2 bit CAN2_F3R1 ; \ CAN2_F3R1_FB2, Filter bits
    : CAN2_F3R1_FB3 ( -- x addr ) 3 bit CAN2_F3R1 ; \ CAN2_F3R1_FB3, Filter bits
    : CAN2_F3R1_FB4 ( -- x addr ) 4 bit CAN2_F3R1 ; \ CAN2_F3R1_FB4, Filter bits
    : CAN2_F3R1_FB5 ( -- x addr ) 5 bit CAN2_F3R1 ; \ CAN2_F3R1_FB5, Filter bits
    : CAN2_F3R1_FB6 ( -- x addr ) 6 bit CAN2_F3R1 ; \ CAN2_F3R1_FB6, Filter bits
    : CAN2_F3R1_FB7 ( -- x addr ) 7 bit CAN2_F3R1 ; \ CAN2_F3R1_FB7, Filter bits
    : CAN2_F3R1_FB8 ( -- x addr ) 8 bit CAN2_F3R1 ; \ CAN2_F3R1_FB8, Filter bits
    : CAN2_F3R1_FB9 ( -- x addr ) 9 bit CAN2_F3R1 ; \ CAN2_F3R1_FB9, Filter bits
    : CAN2_F3R1_FB10 ( -- x addr ) 10 bit CAN2_F3R1 ; \ CAN2_F3R1_FB10, Filter bits
    : CAN2_F3R1_FB11 ( -- x addr ) 11 bit CAN2_F3R1 ; \ CAN2_F3R1_FB11, Filter bits
    : CAN2_F3R1_FB12 ( -- x addr ) 12 bit CAN2_F3R1 ; \ CAN2_F3R1_FB12, Filter bits
    : CAN2_F3R1_FB13 ( -- x addr ) 13 bit CAN2_F3R1 ; \ CAN2_F3R1_FB13, Filter bits
    : CAN2_F3R1_FB14 ( -- x addr ) 14 bit CAN2_F3R1 ; \ CAN2_F3R1_FB14, Filter bits
    : CAN2_F3R1_FB15 ( -- x addr ) 15 bit CAN2_F3R1 ; \ CAN2_F3R1_FB15, Filter bits
    : CAN2_F3R1_FB16 ( -- x addr ) 16 bit CAN2_F3R1 ; \ CAN2_F3R1_FB16, Filter bits
    : CAN2_F3R1_FB17 ( -- x addr ) 17 bit CAN2_F3R1 ; \ CAN2_F3R1_FB17, Filter bits
    : CAN2_F3R1_FB18 ( -- x addr ) 18 bit CAN2_F3R1 ; \ CAN2_F3R1_FB18, Filter bits
    : CAN2_F3R1_FB19 ( -- x addr ) 19 bit CAN2_F3R1 ; \ CAN2_F3R1_FB19, Filter bits
    : CAN2_F3R1_FB20 ( -- x addr ) 20 bit CAN2_F3R1 ; \ CAN2_F3R1_FB20, Filter bits
    : CAN2_F3R1_FB21 ( -- x addr ) 21 bit CAN2_F3R1 ; \ CAN2_F3R1_FB21, Filter bits
    : CAN2_F3R1_FB22 ( -- x addr ) 22 bit CAN2_F3R1 ; \ CAN2_F3R1_FB22, Filter bits
    : CAN2_F3R1_FB23 ( -- x addr ) 23 bit CAN2_F3R1 ; \ CAN2_F3R1_FB23, Filter bits
    : CAN2_F3R1_FB24 ( -- x addr ) 24 bit CAN2_F3R1 ; \ CAN2_F3R1_FB24, Filter bits
    : CAN2_F3R1_FB25 ( -- x addr ) 25 bit CAN2_F3R1 ; \ CAN2_F3R1_FB25, Filter bits
    : CAN2_F3R1_FB26 ( -- x addr ) 26 bit CAN2_F3R1 ; \ CAN2_F3R1_FB26, Filter bits
    : CAN2_F3R1_FB27 ( -- x addr ) 27 bit CAN2_F3R1 ; \ CAN2_F3R1_FB27, Filter bits
    : CAN2_F3R1_FB28 ( -- x addr ) 28 bit CAN2_F3R1 ; \ CAN2_F3R1_FB28, Filter bits
    : CAN2_F3R1_FB29 ( -- x addr ) 29 bit CAN2_F3R1 ; \ CAN2_F3R1_FB29, Filter bits
    : CAN2_F3R1_FB30 ( -- x addr ) 30 bit CAN2_F3R1 ; \ CAN2_F3R1_FB30, Filter bits
    : CAN2_F3R1_FB31 ( -- x addr ) 31 bit CAN2_F3R1 ; \ CAN2_F3R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F3R2 (read-write) Reset:0x00000000
    : CAN2_F3R2_FB0 ( -- x addr ) 0 bit CAN2_F3R2 ; \ CAN2_F3R2_FB0, Filter bits
    : CAN2_F3R2_FB1 ( -- x addr ) 1 bit CAN2_F3R2 ; \ CAN2_F3R2_FB1, Filter bits
    : CAN2_F3R2_FB2 ( -- x addr ) 2 bit CAN2_F3R2 ; \ CAN2_F3R2_FB2, Filter bits
    : CAN2_F3R2_FB3 ( -- x addr ) 3 bit CAN2_F3R2 ; \ CAN2_F3R2_FB3, Filter bits
    : CAN2_F3R2_FB4 ( -- x addr ) 4 bit CAN2_F3R2 ; \ CAN2_F3R2_FB4, Filter bits
    : CAN2_F3R2_FB5 ( -- x addr ) 5 bit CAN2_F3R2 ; \ CAN2_F3R2_FB5, Filter bits
    : CAN2_F3R2_FB6 ( -- x addr ) 6 bit CAN2_F3R2 ; \ CAN2_F3R2_FB6, Filter bits
    : CAN2_F3R2_FB7 ( -- x addr ) 7 bit CAN2_F3R2 ; \ CAN2_F3R2_FB7, Filter bits
    : CAN2_F3R2_FB8 ( -- x addr ) 8 bit CAN2_F3R2 ; \ CAN2_F3R2_FB8, Filter bits
    : CAN2_F3R2_FB9 ( -- x addr ) 9 bit CAN2_F3R2 ; \ CAN2_F3R2_FB9, Filter bits
    : CAN2_F3R2_FB10 ( -- x addr ) 10 bit CAN2_F3R2 ; \ CAN2_F3R2_FB10, Filter bits
    : CAN2_F3R2_FB11 ( -- x addr ) 11 bit CAN2_F3R2 ; \ CAN2_F3R2_FB11, Filter bits
    : CAN2_F3R2_FB12 ( -- x addr ) 12 bit CAN2_F3R2 ; \ CAN2_F3R2_FB12, Filter bits
    : CAN2_F3R2_FB13 ( -- x addr ) 13 bit CAN2_F3R2 ; \ CAN2_F3R2_FB13, Filter bits
    : CAN2_F3R2_FB14 ( -- x addr ) 14 bit CAN2_F3R2 ; \ CAN2_F3R2_FB14, Filter bits
    : CAN2_F3R2_FB15 ( -- x addr ) 15 bit CAN2_F3R2 ; \ CAN2_F3R2_FB15, Filter bits
    : CAN2_F3R2_FB16 ( -- x addr ) 16 bit CAN2_F3R2 ; \ CAN2_F3R2_FB16, Filter bits
    : CAN2_F3R2_FB17 ( -- x addr ) 17 bit CAN2_F3R2 ; \ CAN2_F3R2_FB17, Filter bits
    : CAN2_F3R2_FB18 ( -- x addr ) 18 bit CAN2_F3R2 ; \ CAN2_F3R2_FB18, Filter bits
    : CAN2_F3R2_FB19 ( -- x addr ) 19 bit CAN2_F3R2 ; \ CAN2_F3R2_FB19, Filter bits
    : CAN2_F3R2_FB20 ( -- x addr ) 20 bit CAN2_F3R2 ; \ CAN2_F3R2_FB20, Filter bits
    : CAN2_F3R2_FB21 ( -- x addr ) 21 bit CAN2_F3R2 ; \ CAN2_F3R2_FB21, Filter bits
    : CAN2_F3R2_FB22 ( -- x addr ) 22 bit CAN2_F3R2 ; \ CAN2_F3R2_FB22, Filter bits
    : CAN2_F3R2_FB23 ( -- x addr ) 23 bit CAN2_F3R2 ; \ CAN2_F3R2_FB23, Filter bits
    : CAN2_F3R2_FB24 ( -- x addr ) 24 bit CAN2_F3R2 ; \ CAN2_F3R2_FB24, Filter bits
    : CAN2_F3R2_FB25 ( -- x addr ) 25 bit CAN2_F3R2 ; \ CAN2_F3R2_FB25, Filter bits
    : CAN2_F3R2_FB26 ( -- x addr ) 26 bit CAN2_F3R2 ; \ CAN2_F3R2_FB26, Filter bits
    : CAN2_F3R2_FB27 ( -- x addr ) 27 bit CAN2_F3R2 ; \ CAN2_F3R2_FB27, Filter bits
    : CAN2_F3R2_FB28 ( -- x addr ) 28 bit CAN2_F3R2 ; \ CAN2_F3R2_FB28, Filter bits
    : CAN2_F3R2_FB29 ( -- x addr ) 29 bit CAN2_F3R2 ; \ CAN2_F3R2_FB29, Filter bits
    : CAN2_F3R2_FB30 ( -- x addr ) 30 bit CAN2_F3R2 ; \ CAN2_F3R2_FB30, Filter bits
    : CAN2_F3R2_FB31 ( -- x addr ) 31 bit CAN2_F3R2 ; \ CAN2_F3R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F4R1 (read-write) Reset:0x00000000
    : CAN2_F4R1_FB0 ( -- x addr ) 0 bit CAN2_F4R1 ; \ CAN2_F4R1_FB0, Filter bits
    : CAN2_F4R1_FB1 ( -- x addr ) 1 bit CAN2_F4R1 ; \ CAN2_F4R1_FB1, Filter bits
    : CAN2_F4R1_FB2 ( -- x addr ) 2 bit CAN2_F4R1 ; \ CAN2_F4R1_FB2, Filter bits
    : CAN2_F4R1_FB3 ( -- x addr ) 3 bit CAN2_F4R1 ; \ CAN2_F4R1_FB3, Filter bits
    : CAN2_F4R1_FB4 ( -- x addr ) 4 bit CAN2_F4R1 ; \ CAN2_F4R1_FB4, Filter bits
    : CAN2_F4R1_FB5 ( -- x addr ) 5 bit CAN2_F4R1 ; \ CAN2_F4R1_FB5, Filter bits
    : CAN2_F4R1_FB6 ( -- x addr ) 6 bit CAN2_F4R1 ; \ CAN2_F4R1_FB6, Filter bits
    : CAN2_F4R1_FB7 ( -- x addr ) 7 bit CAN2_F4R1 ; \ CAN2_F4R1_FB7, Filter bits
    : CAN2_F4R1_FB8 ( -- x addr ) 8 bit CAN2_F4R1 ; \ CAN2_F4R1_FB8, Filter bits
    : CAN2_F4R1_FB9 ( -- x addr ) 9 bit CAN2_F4R1 ; \ CAN2_F4R1_FB9, Filter bits
    : CAN2_F4R1_FB10 ( -- x addr ) 10 bit CAN2_F4R1 ; \ CAN2_F4R1_FB10, Filter bits
    : CAN2_F4R1_FB11 ( -- x addr ) 11 bit CAN2_F4R1 ; \ CAN2_F4R1_FB11, Filter bits
    : CAN2_F4R1_FB12 ( -- x addr ) 12 bit CAN2_F4R1 ; \ CAN2_F4R1_FB12, Filter bits
    : CAN2_F4R1_FB13 ( -- x addr ) 13 bit CAN2_F4R1 ; \ CAN2_F4R1_FB13, Filter bits
    : CAN2_F4R1_FB14 ( -- x addr ) 14 bit CAN2_F4R1 ; \ CAN2_F4R1_FB14, Filter bits
    : CAN2_F4R1_FB15 ( -- x addr ) 15 bit CAN2_F4R1 ; \ CAN2_F4R1_FB15, Filter bits
    : CAN2_F4R1_FB16 ( -- x addr ) 16 bit CAN2_F4R1 ; \ CAN2_F4R1_FB16, Filter bits
    : CAN2_F4R1_FB17 ( -- x addr ) 17 bit CAN2_F4R1 ; \ CAN2_F4R1_FB17, Filter bits
    : CAN2_F4R1_FB18 ( -- x addr ) 18 bit CAN2_F4R1 ; \ CAN2_F4R1_FB18, Filter bits
    : CAN2_F4R1_FB19 ( -- x addr ) 19 bit CAN2_F4R1 ; \ CAN2_F4R1_FB19, Filter bits
    : CAN2_F4R1_FB20 ( -- x addr ) 20 bit CAN2_F4R1 ; \ CAN2_F4R1_FB20, Filter bits
    : CAN2_F4R1_FB21 ( -- x addr ) 21 bit CAN2_F4R1 ; \ CAN2_F4R1_FB21, Filter bits
    : CAN2_F4R1_FB22 ( -- x addr ) 22 bit CAN2_F4R1 ; \ CAN2_F4R1_FB22, Filter bits
    : CAN2_F4R1_FB23 ( -- x addr ) 23 bit CAN2_F4R1 ; \ CAN2_F4R1_FB23, Filter bits
    : CAN2_F4R1_FB24 ( -- x addr ) 24 bit CAN2_F4R1 ; \ CAN2_F4R1_FB24, Filter bits
    : CAN2_F4R1_FB25 ( -- x addr ) 25 bit CAN2_F4R1 ; \ CAN2_F4R1_FB25, Filter bits
    : CAN2_F4R1_FB26 ( -- x addr ) 26 bit CAN2_F4R1 ; \ CAN2_F4R1_FB26, Filter bits
    : CAN2_F4R1_FB27 ( -- x addr ) 27 bit CAN2_F4R1 ; \ CAN2_F4R1_FB27, Filter bits
    : CAN2_F4R1_FB28 ( -- x addr ) 28 bit CAN2_F4R1 ; \ CAN2_F4R1_FB28, Filter bits
    : CAN2_F4R1_FB29 ( -- x addr ) 29 bit CAN2_F4R1 ; \ CAN2_F4R1_FB29, Filter bits
    : CAN2_F4R1_FB30 ( -- x addr ) 30 bit CAN2_F4R1 ; \ CAN2_F4R1_FB30, Filter bits
    : CAN2_F4R1_FB31 ( -- x addr ) 31 bit CAN2_F4R1 ; \ CAN2_F4R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F4R2 (read-write) Reset:0x00000000
    : CAN2_F4R2_FB0 ( -- x addr ) 0 bit CAN2_F4R2 ; \ CAN2_F4R2_FB0, Filter bits
    : CAN2_F4R2_FB1 ( -- x addr ) 1 bit CAN2_F4R2 ; \ CAN2_F4R2_FB1, Filter bits
    : CAN2_F4R2_FB2 ( -- x addr ) 2 bit CAN2_F4R2 ; \ CAN2_F4R2_FB2, Filter bits
    : CAN2_F4R2_FB3 ( -- x addr ) 3 bit CAN2_F4R2 ; \ CAN2_F4R2_FB3, Filter bits
    : CAN2_F4R2_FB4 ( -- x addr ) 4 bit CAN2_F4R2 ; \ CAN2_F4R2_FB4, Filter bits
    : CAN2_F4R2_FB5 ( -- x addr ) 5 bit CAN2_F4R2 ; \ CAN2_F4R2_FB5, Filter bits
    : CAN2_F4R2_FB6 ( -- x addr ) 6 bit CAN2_F4R2 ; \ CAN2_F4R2_FB6, Filter bits
    : CAN2_F4R2_FB7 ( -- x addr ) 7 bit CAN2_F4R2 ; \ CAN2_F4R2_FB7, Filter bits
    : CAN2_F4R2_FB8 ( -- x addr ) 8 bit CAN2_F4R2 ; \ CAN2_F4R2_FB8, Filter bits
    : CAN2_F4R2_FB9 ( -- x addr ) 9 bit CAN2_F4R2 ; \ CAN2_F4R2_FB9, Filter bits
    : CAN2_F4R2_FB10 ( -- x addr ) 10 bit CAN2_F4R2 ; \ CAN2_F4R2_FB10, Filter bits
    : CAN2_F4R2_FB11 ( -- x addr ) 11 bit CAN2_F4R2 ; \ CAN2_F4R2_FB11, Filter bits
    : CAN2_F4R2_FB12 ( -- x addr ) 12 bit CAN2_F4R2 ; \ CAN2_F4R2_FB12, Filter bits
    : CAN2_F4R2_FB13 ( -- x addr ) 13 bit CAN2_F4R2 ; \ CAN2_F4R2_FB13, Filter bits
    : CAN2_F4R2_FB14 ( -- x addr ) 14 bit CAN2_F4R2 ; \ CAN2_F4R2_FB14, Filter bits
    : CAN2_F4R2_FB15 ( -- x addr ) 15 bit CAN2_F4R2 ; \ CAN2_F4R2_FB15, Filter bits
    : CAN2_F4R2_FB16 ( -- x addr ) 16 bit CAN2_F4R2 ; \ CAN2_F4R2_FB16, Filter bits
    : CAN2_F4R2_FB17 ( -- x addr ) 17 bit CAN2_F4R2 ; \ CAN2_F4R2_FB17, Filter bits
    : CAN2_F4R2_FB18 ( -- x addr ) 18 bit CAN2_F4R2 ; \ CAN2_F4R2_FB18, Filter bits
    : CAN2_F4R2_FB19 ( -- x addr ) 19 bit CAN2_F4R2 ; \ CAN2_F4R2_FB19, Filter bits
    : CAN2_F4R2_FB20 ( -- x addr ) 20 bit CAN2_F4R2 ; \ CAN2_F4R2_FB20, Filter bits
    : CAN2_F4R2_FB21 ( -- x addr ) 21 bit CAN2_F4R2 ; \ CAN2_F4R2_FB21, Filter bits
    : CAN2_F4R2_FB22 ( -- x addr ) 22 bit CAN2_F4R2 ; \ CAN2_F4R2_FB22, Filter bits
    : CAN2_F4R2_FB23 ( -- x addr ) 23 bit CAN2_F4R2 ; \ CAN2_F4R2_FB23, Filter bits
    : CAN2_F4R2_FB24 ( -- x addr ) 24 bit CAN2_F4R2 ; \ CAN2_F4R2_FB24, Filter bits
    : CAN2_F4R2_FB25 ( -- x addr ) 25 bit CAN2_F4R2 ; \ CAN2_F4R2_FB25, Filter bits
    : CAN2_F4R2_FB26 ( -- x addr ) 26 bit CAN2_F4R2 ; \ CAN2_F4R2_FB26, Filter bits
    : CAN2_F4R2_FB27 ( -- x addr ) 27 bit CAN2_F4R2 ; \ CAN2_F4R2_FB27, Filter bits
    : CAN2_F4R2_FB28 ( -- x addr ) 28 bit CAN2_F4R2 ; \ CAN2_F4R2_FB28, Filter bits
    : CAN2_F4R2_FB29 ( -- x addr ) 29 bit CAN2_F4R2 ; \ CAN2_F4R2_FB29, Filter bits
    : CAN2_F4R2_FB30 ( -- x addr ) 30 bit CAN2_F4R2 ; \ CAN2_F4R2_FB30, Filter bits
    : CAN2_F4R2_FB31 ( -- x addr ) 31 bit CAN2_F4R2 ; \ CAN2_F4R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F5R1 (read-write) Reset:0x00000000
    : CAN2_F5R1_FB0 ( -- x addr ) 0 bit CAN2_F5R1 ; \ CAN2_F5R1_FB0, Filter bits
    : CAN2_F5R1_FB1 ( -- x addr ) 1 bit CAN2_F5R1 ; \ CAN2_F5R1_FB1, Filter bits
    : CAN2_F5R1_FB2 ( -- x addr ) 2 bit CAN2_F5R1 ; \ CAN2_F5R1_FB2, Filter bits
    : CAN2_F5R1_FB3 ( -- x addr ) 3 bit CAN2_F5R1 ; \ CAN2_F5R1_FB3, Filter bits
    : CAN2_F5R1_FB4 ( -- x addr ) 4 bit CAN2_F5R1 ; \ CAN2_F5R1_FB4, Filter bits
    : CAN2_F5R1_FB5 ( -- x addr ) 5 bit CAN2_F5R1 ; \ CAN2_F5R1_FB5, Filter bits
    : CAN2_F5R1_FB6 ( -- x addr ) 6 bit CAN2_F5R1 ; \ CAN2_F5R1_FB6, Filter bits
    : CAN2_F5R1_FB7 ( -- x addr ) 7 bit CAN2_F5R1 ; \ CAN2_F5R1_FB7, Filter bits
    : CAN2_F5R1_FB8 ( -- x addr ) 8 bit CAN2_F5R1 ; \ CAN2_F5R1_FB8, Filter bits
    : CAN2_F5R1_FB9 ( -- x addr ) 9 bit CAN2_F5R1 ; \ CAN2_F5R1_FB9, Filter bits
    : CAN2_F5R1_FB10 ( -- x addr ) 10 bit CAN2_F5R1 ; \ CAN2_F5R1_FB10, Filter bits
    : CAN2_F5R1_FB11 ( -- x addr ) 11 bit CAN2_F5R1 ; \ CAN2_F5R1_FB11, Filter bits
    : CAN2_F5R1_FB12 ( -- x addr ) 12 bit CAN2_F5R1 ; \ CAN2_F5R1_FB12, Filter bits
    : CAN2_F5R1_FB13 ( -- x addr ) 13 bit CAN2_F5R1 ; \ CAN2_F5R1_FB13, Filter bits
    : CAN2_F5R1_FB14 ( -- x addr ) 14 bit CAN2_F5R1 ; \ CAN2_F5R1_FB14, Filter bits
    : CAN2_F5R1_FB15 ( -- x addr ) 15 bit CAN2_F5R1 ; \ CAN2_F5R1_FB15, Filter bits
    : CAN2_F5R1_FB16 ( -- x addr ) 16 bit CAN2_F5R1 ; \ CAN2_F5R1_FB16, Filter bits
    : CAN2_F5R1_FB17 ( -- x addr ) 17 bit CAN2_F5R1 ; \ CAN2_F5R1_FB17, Filter bits
    : CAN2_F5R1_FB18 ( -- x addr ) 18 bit CAN2_F5R1 ; \ CAN2_F5R1_FB18, Filter bits
    : CAN2_F5R1_FB19 ( -- x addr ) 19 bit CAN2_F5R1 ; \ CAN2_F5R1_FB19, Filter bits
    : CAN2_F5R1_FB20 ( -- x addr ) 20 bit CAN2_F5R1 ; \ CAN2_F5R1_FB20, Filter bits
    : CAN2_F5R1_FB21 ( -- x addr ) 21 bit CAN2_F5R1 ; \ CAN2_F5R1_FB21, Filter bits
    : CAN2_F5R1_FB22 ( -- x addr ) 22 bit CAN2_F5R1 ; \ CAN2_F5R1_FB22, Filter bits
    : CAN2_F5R1_FB23 ( -- x addr ) 23 bit CAN2_F5R1 ; \ CAN2_F5R1_FB23, Filter bits
    : CAN2_F5R1_FB24 ( -- x addr ) 24 bit CAN2_F5R1 ; \ CAN2_F5R1_FB24, Filter bits
    : CAN2_F5R1_FB25 ( -- x addr ) 25 bit CAN2_F5R1 ; \ CAN2_F5R1_FB25, Filter bits
    : CAN2_F5R1_FB26 ( -- x addr ) 26 bit CAN2_F5R1 ; \ CAN2_F5R1_FB26, Filter bits
    : CAN2_F5R1_FB27 ( -- x addr ) 27 bit CAN2_F5R1 ; \ CAN2_F5R1_FB27, Filter bits
    : CAN2_F5R1_FB28 ( -- x addr ) 28 bit CAN2_F5R1 ; \ CAN2_F5R1_FB28, Filter bits
    : CAN2_F5R1_FB29 ( -- x addr ) 29 bit CAN2_F5R1 ; \ CAN2_F5R1_FB29, Filter bits
    : CAN2_F5R1_FB30 ( -- x addr ) 30 bit CAN2_F5R1 ; \ CAN2_F5R1_FB30, Filter bits
    : CAN2_F5R1_FB31 ( -- x addr ) 31 bit CAN2_F5R1 ; \ CAN2_F5R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F5R2 (read-write) Reset:0x00000000
    : CAN2_F5R2_FB0 ( -- x addr ) 0 bit CAN2_F5R2 ; \ CAN2_F5R2_FB0, Filter bits
    : CAN2_F5R2_FB1 ( -- x addr ) 1 bit CAN2_F5R2 ; \ CAN2_F5R2_FB1, Filter bits
    : CAN2_F5R2_FB2 ( -- x addr ) 2 bit CAN2_F5R2 ; \ CAN2_F5R2_FB2, Filter bits
    : CAN2_F5R2_FB3 ( -- x addr ) 3 bit CAN2_F5R2 ; \ CAN2_F5R2_FB3, Filter bits
    : CAN2_F5R2_FB4 ( -- x addr ) 4 bit CAN2_F5R2 ; \ CAN2_F5R2_FB4, Filter bits
    : CAN2_F5R2_FB5 ( -- x addr ) 5 bit CAN2_F5R2 ; \ CAN2_F5R2_FB5, Filter bits
    : CAN2_F5R2_FB6 ( -- x addr ) 6 bit CAN2_F5R2 ; \ CAN2_F5R2_FB6, Filter bits
    : CAN2_F5R2_FB7 ( -- x addr ) 7 bit CAN2_F5R2 ; \ CAN2_F5R2_FB7, Filter bits
    : CAN2_F5R2_FB8 ( -- x addr ) 8 bit CAN2_F5R2 ; \ CAN2_F5R2_FB8, Filter bits
    : CAN2_F5R2_FB9 ( -- x addr ) 9 bit CAN2_F5R2 ; \ CAN2_F5R2_FB9, Filter bits
    : CAN2_F5R2_FB10 ( -- x addr ) 10 bit CAN2_F5R2 ; \ CAN2_F5R2_FB10, Filter bits
    : CAN2_F5R2_FB11 ( -- x addr ) 11 bit CAN2_F5R2 ; \ CAN2_F5R2_FB11, Filter bits
    : CAN2_F5R2_FB12 ( -- x addr ) 12 bit CAN2_F5R2 ; \ CAN2_F5R2_FB12, Filter bits
    : CAN2_F5R2_FB13 ( -- x addr ) 13 bit CAN2_F5R2 ; \ CAN2_F5R2_FB13, Filter bits
    : CAN2_F5R2_FB14 ( -- x addr ) 14 bit CAN2_F5R2 ; \ CAN2_F5R2_FB14, Filter bits
    : CAN2_F5R2_FB15 ( -- x addr ) 15 bit CAN2_F5R2 ; \ CAN2_F5R2_FB15, Filter bits
    : CAN2_F5R2_FB16 ( -- x addr ) 16 bit CAN2_F5R2 ; \ CAN2_F5R2_FB16, Filter bits
    : CAN2_F5R2_FB17 ( -- x addr ) 17 bit CAN2_F5R2 ; \ CAN2_F5R2_FB17, Filter bits
    : CAN2_F5R2_FB18 ( -- x addr ) 18 bit CAN2_F5R2 ; \ CAN2_F5R2_FB18, Filter bits
    : CAN2_F5R2_FB19 ( -- x addr ) 19 bit CAN2_F5R2 ; \ CAN2_F5R2_FB19, Filter bits
    : CAN2_F5R2_FB20 ( -- x addr ) 20 bit CAN2_F5R2 ; \ CAN2_F5R2_FB20, Filter bits
    : CAN2_F5R2_FB21 ( -- x addr ) 21 bit CAN2_F5R2 ; \ CAN2_F5R2_FB21, Filter bits
    : CAN2_F5R2_FB22 ( -- x addr ) 22 bit CAN2_F5R2 ; \ CAN2_F5R2_FB22, Filter bits
    : CAN2_F5R2_FB23 ( -- x addr ) 23 bit CAN2_F5R2 ; \ CAN2_F5R2_FB23, Filter bits
    : CAN2_F5R2_FB24 ( -- x addr ) 24 bit CAN2_F5R2 ; \ CAN2_F5R2_FB24, Filter bits
    : CAN2_F5R2_FB25 ( -- x addr ) 25 bit CAN2_F5R2 ; \ CAN2_F5R2_FB25, Filter bits
    : CAN2_F5R2_FB26 ( -- x addr ) 26 bit CAN2_F5R2 ; \ CAN2_F5R2_FB26, Filter bits
    : CAN2_F5R2_FB27 ( -- x addr ) 27 bit CAN2_F5R2 ; \ CAN2_F5R2_FB27, Filter bits
    : CAN2_F5R2_FB28 ( -- x addr ) 28 bit CAN2_F5R2 ; \ CAN2_F5R2_FB28, Filter bits
    : CAN2_F5R2_FB29 ( -- x addr ) 29 bit CAN2_F5R2 ; \ CAN2_F5R2_FB29, Filter bits
    : CAN2_F5R2_FB30 ( -- x addr ) 30 bit CAN2_F5R2 ; \ CAN2_F5R2_FB30, Filter bits
    : CAN2_F5R2_FB31 ( -- x addr ) 31 bit CAN2_F5R2 ; \ CAN2_F5R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F6R1 (read-write) Reset:0x00000000
    : CAN2_F6R1_FB0 ( -- x addr ) 0 bit CAN2_F6R1 ; \ CAN2_F6R1_FB0, Filter bits
    : CAN2_F6R1_FB1 ( -- x addr ) 1 bit CAN2_F6R1 ; \ CAN2_F6R1_FB1, Filter bits
    : CAN2_F6R1_FB2 ( -- x addr ) 2 bit CAN2_F6R1 ; \ CAN2_F6R1_FB2, Filter bits
    : CAN2_F6R1_FB3 ( -- x addr ) 3 bit CAN2_F6R1 ; \ CAN2_F6R1_FB3, Filter bits
    : CAN2_F6R1_FB4 ( -- x addr ) 4 bit CAN2_F6R1 ; \ CAN2_F6R1_FB4, Filter bits
    : CAN2_F6R1_FB5 ( -- x addr ) 5 bit CAN2_F6R1 ; \ CAN2_F6R1_FB5, Filter bits
    : CAN2_F6R1_FB6 ( -- x addr ) 6 bit CAN2_F6R1 ; \ CAN2_F6R1_FB6, Filter bits
    : CAN2_F6R1_FB7 ( -- x addr ) 7 bit CAN2_F6R1 ; \ CAN2_F6R1_FB7, Filter bits
    : CAN2_F6R1_FB8 ( -- x addr ) 8 bit CAN2_F6R1 ; \ CAN2_F6R1_FB8, Filter bits
    : CAN2_F6R1_FB9 ( -- x addr ) 9 bit CAN2_F6R1 ; \ CAN2_F6R1_FB9, Filter bits
    : CAN2_F6R1_FB10 ( -- x addr ) 10 bit CAN2_F6R1 ; \ CAN2_F6R1_FB10, Filter bits
    : CAN2_F6R1_FB11 ( -- x addr ) 11 bit CAN2_F6R1 ; \ CAN2_F6R1_FB11, Filter bits
    : CAN2_F6R1_FB12 ( -- x addr ) 12 bit CAN2_F6R1 ; \ CAN2_F6R1_FB12, Filter bits
    : CAN2_F6R1_FB13 ( -- x addr ) 13 bit CAN2_F6R1 ; \ CAN2_F6R1_FB13, Filter bits
    : CAN2_F6R1_FB14 ( -- x addr ) 14 bit CAN2_F6R1 ; \ CAN2_F6R1_FB14, Filter bits
    : CAN2_F6R1_FB15 ( -- x addr ) 15 bit CAN2_F6R1 ; \ CAN2_F6R1_FB15, Filter bits
    : CAN2_F6R1_FB16 ( -- x addr ) 16 bit CAN2_F6R1 ; \ CAN2_F6R1_FB16, Filter bits
    : CAN2_F6R1_FB17 ( -- x addr ) 17 bit CAN2_F6R1 ; \ CAN2_F6R1_FB17, Filter bits
    : CAN2_F6R1_FB18 ( -- x addr ) 18 bit CAN2_F6R1 ; \ CAN2_F6R1_FB18, Filter bits
    : CAN2_F6R1_FB19 ( -- x addr ) 19 bit CAN2_F6R1 ; \ CAN2_F6R1_FB19, Filter bits
    : CAN2_F6R1_FB20 ( -- x addr ) 20 bit CAN2_F6R1 ; \ CAN2_F6R1_FB20, Filter bits
    : CAN2_F6R1_FB21 ( -- x addr ) 21 bit CAN2_F6R1 ; \ CAN2_F6R1_FB21, Filter bits
    : CAN2_F6R1_FB22 ( -- x addr ) 22 bit CAN2_F6R1 ; \ CAN2_F6R1_FB22, Filter bits
    : CAN2_F6R1_FB23 ( -- x addr ) 23 bit CAN2_F6R1 ; \ CAN2_F6R1_FB23, Filter bits
    : CAN2_F6R1_FB24 ( -- x addr ) 24 bit CAN2_F6R1 ; \ CAN2_F6R1_FB24, Filter bits
    : CAN2_F6R1_FB25 ( -- x addr ) 25 bit CAN2_F6R1 ; \ CAN2_F6R1_FB25, Filter bits
    : CAN2_F6R1_FB26 ( -- x addr ) 26 bit CAN2_F6R1 ; \ CAN2_F6R1_FB26, Filter bits
    : CAN2_F6R1_FB27 ( -- x addr ) 27 bit CAN2_F6R1 ; \ CAN2_F6R1_FB27, Filter bits
    : CAN2_F6R1_FB28 ( -- x addr ) 28 bit CAN2_F6R1 ; \ CAN2_F6R1_FB28, Filter bits
    : CAN2_F6R1_FB29 ( -- x addr ) 29 bit CAN2_F6R1 ; \ CAN2_F6R1_FB29, Filter bits
    : CAN2_F6R1_FB30 ( -- x addr ) 30 bit CAN2_F6R1 ; \ CAN2_F6R1_FB30, Filter bits
    : CAN2_F6R1_FB31 ( -- x addr ) 31 bit CAN2_F6R1 ; \ CAN2_F6R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F6R2 (read-write) Reset:0x00000000
    : CAN2_F6R2_FB0 ( -- x addr ) 0 bit CAN2_F6R2 ; \ CAN2_F6R2_FB0, Filter bits
    : CAN2_F6R2_FB1 ( -- x addr ) 1 bit CAN2_F6R2 ; \ CAN2_F6R2_FB1, Filter bits
    : CAN2_F6R2_FB2 ( -- x addr ) 2 bit CAN2_F6R2 ; \ CAN2_F6R2_FB2, Filter bits
    : CAN2_F6R2_FB3 ( -- x addr ) 3 bit CAN2_F6R2 ; \ CAN2_F6R2_FB3, Filter bits
    : CAN2_F6R2_FB4 ( -- x addr ) 4 bit CAN2_F6R2 ; \ CAN2_F6R2_FB4, Filter bits
    : CAN2_F6R2_FB5 ( -- x addr ) 5 bit CAN2_F6R2 ; \ CAN2_F6R2_FB5, Filter bits
    : CAN2_F6R2_FB6 ( -- x addr ) 6 bit CAN2_F6R2 ; \ CAN2_F6R2_FB6, Filter bits
    : CAN2_F6R2_FB7 ( -- x addr ) 7 bit CAN2_F6R2 ; \ CAN2_F6R2_FB7, Filter bits
    : CAN2_F6R2_FB8 ( -- x addr ) 8 bit CAN2_F6R2 ; \ CAN2_F6R2_FB8, Filter bits
    : CAN2_F6R2_FB9 ( -- x addr ) 9 bit CAN2_F6R2 ; \ CAN2_F6R2_FB9, Filter bits
    : CAN2_F6R2_FB10 ( -- x addr ) 10 bit CAN2_F6R2 ; \ CAN2_F6R2_FB10, Filter bits
    : CAN2_F6R2_FB11 ( -- x addr ) 11 bit CAN2_F6R2 ; \ CAN2_F6R2_FB11, Filter bits
    : CAN2_F6R2_FB12 ( -- x addr ) 12 bit CAN2_F6R2 ; \ CAN2_F6R2_FB12, Filter bits
    : CAN2_F6R2_FB13 ( -- x addr ) 13 bit CAN2_F6R2 ; \ CAN2_F6R2_FB13, Filter bits
    : CAN2_F6R2_FB14 ( -- x addr ) 14 bit CAN2_F6R2 ; \ CAN2_F6R2_FB14, Filter bits
    : CAN2_F6R2_FB15 ( -- x addr ) 15 bit CAN2_F6R2 ; \ CAN2_F6R2_FB15, Filter bits
    : CAN2_F6R2_FB16 ( -- x addr ) 16 bit CAN2_F6R2 ; \ CAN2_F6R2_FB16, Filter bits
    : CAN2_F6R2_FB17 ( -- x addr ) 17 bit CAN2_F6R2 ; \ CAN2_F6R2_FB17, Filter bits
    : CAN2_F6R2_FB18 ( -- x addr ) 18 bit CAN2_F6R2 ; \ CAN2_F6R2_FB18, Filter bits
    : CAN2_F6R2_FB19 ( -- x addr ) 19 bit CAN2_F6R2 ; \ CAN2_F6R2_FB19, Filter bits
    : CAN2_F6R2_FB20 ( -- x addr ) 20 bit CAN2_F6R2 ; \ CAN2_F6R2_FB20, Filter bits
    : CAN2_F6R2_FB21 ( -- x addr ) 21 bit CAN2_F6R2 ; \ CAN2_F6R2_FB21, Filter bits
    : CAN2_F6R2_FB22 ( -- x addr ) 22 bit CAN2_F6R2 ; \ CAN2_F6R2_FB22, Filter bits
    : CAN2_F6R2_FB23 ( -- x addr ) 23 bit CAN2_F6R2 ; \ CAN2_F6R2_FB23, Filter bits
    : CAN2_F6R2_FB24 ( -- x addr ) 24 bit CAN2_F6R2 ; \ CAN2_F6R2_FB24, Filter bits
    : CAN2_F6R2_FB25 ( -- x addr ) 25 bit CAN2_F6R2 ; \ CAN2_F6R2_FB25, Filter bits
    : CAN2_F6R2_FB26 ( -- x addr ) 26 bit CAN2_F6R2 ; \ CAN2_F6R2_FB26, Filter bits
    : CAN2_F6R2_FB27 ( -- x addr ) 27 bit CAN2_F6R2 ; \ CAN2_F6R2_FB27, Filter bits
    : CAN2_F6R2_FB28 ( -- x addr ) 28 bit CAN2_F6R2 ; \ CAN2_F6R2_FB28, Filter bits
    : CAN2_F6R2_FB29 ( -- x addr ) 29 bit CAN2_F6R2 ; \ CAN2_F6R2_FB29, Filter bits
    : CAN2_F6R2_FB30 ( -- x addr ) 30 bit CAN2_F6R2 ; \ CAN2_F6R2_FB30, Filter bits
    : CAN2_F6R2_FB31 ( -- x addr ) 31 bit CAN2_F6R2 ; \ CAN2_F6R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F7R1 (read-write) Reset:0x00000000
    : CAN2_F7R1_FB0 ( -- x addr ) 0 bit CAN2_F7R1 ; \ CAN2_F7R1_FB0, Filter bits
    : CAN2_F7R1_FB1 ( -- x addr ) 1 bit CAN2_F7R1 ; \ CAN2_F7R1_FB1, Filter bits
    : CAN2_F7R1_FB2 ( -- x addr ) 2 bit CAN2_F7R1 ; \ CAN2_F7R1_FB2, Filter bits
    : CAN2_F7R1_FB3 ( -- x addr ) 3 bit CAN2_F7R1 ; \ CAN2_F7R1_FB3, Filter bits
    : CAN2_F7R1_FB4 ( -- x addr ) 4 bit CAN2_F7R1 ; \ CAN2_F7R1_FB4, Filter bits
    : CAN2_F7R1_FB5 ( -- x addr ) 5 bit CAN2_F7R1 ; \ CAN2_F7R1_FB5, Filter bits
    : CAN2_F7R1_FB6 ( -- x addr ) 6 bit CAN2_F7R1 ; \ CAN2_F7R1_FB6, Filter bits
    : CAN2_F7R1_FB7 ( -- x addr ) 7 bit CAN2_F7R1 ; \ CAN2_F7R1_FB7, Filter bits
    : CAN2_F7R1_FB8 ( -- x addr ) 8 bit CAN2_F7R1 ; \ CAN2_F7R1_FB8, Filter bits
    : CAN2_F7R1_FB9 ( -- x addr ) 9 bit CAN2_F7R1 ; \ CAN2_F7R1_FB9, Filter bits
    : CAN2_F7R1_FB10 ( -- x addr ) 10 bit CAN2_F7R1 ; \ CAN2_F7R1_FB10, Filter bits
    : CAN2_F7R1_FB11 ( -- x addr ) 11 bit CAN2_F7R1 ; \ CAN2_F7R1_FB11, Filter bits
    : CAN2_F7R1_FB12 ( -- x addr ) 12 bit CAN2_F7R1 ; \ CAN2_F7R1_FB12, Filter bits
    : CAN2_F7R1_FB13 ( -- x addr ) 13 bit CAN2_F7R1 ; \ CAN2_F7R1_FB13, Filter bits
    : CAN2_F7R1_FB14 ( -- x addr ) 14 bit CAN2_F7R1 ; \ CAN2_F7R1_FB14, Filter bits
    : CAN2_F7R1_FB15 ( -- x addr ) 15 bit CAN2_F7R1 ; \ CAN2_F7R1_FB15, Filter bits
    : CAN2_F7R1_FB16 ( -- x addr ) 16 bit CAN2_F7R1 ; \ CAN2_F7R1_FB16, Filter bits
    : CAN2_F7R1_FB17 ( -- x addr ) 17 bit CAN2_F7R1 ; \ CAN2_F7R1_FB17, Filter bits
    : CAN2_F7R1_FB18 ( -- x addr ) 18 bit CAN2_F7R1 ; \ CAN2_F7R1_FB18, Filter bits
    : CAN2_F7R1_FB19 ( -- x addr ) 19 bit CAN2_F7R1 ; \ CAN2_F7R1_FB19, Filter bits
    : CAN2_F7R1_FB20 ( -- x addr ) 20 bit CAN2_F7R1 ; \ CAN2_F7R1_FB20, Filter bits
    : CAN2_F7R1_FB21 ( -- x addr ) 21 bit CAN2_F7R1 ; \ CAN2_F7R1_FB21, Filter bits
    : CAN2_F7R1_FB22 ( -- x addr ) 22 bit CAN2_F7R1 ; \ CAN2_F7R1_FB22, Filter bits
    : CAN2_F7R1_FB23 ( -- x addr ) 23 bit CAN2_F7R1 ; \ CAN2_F7R1_FB23, Filter bits
    : CAN2_F7R1_FB24 ( -- x addr ) 24 bit CAN2_F7R1 ; \ CAN2_F7R1_FB24, Filter bits
    : CAN2_F7R1_FB25 ( -- x addr ) 25 bit CAN2_F7R1 ; \ CAN2_F7R1_FB25, Filter bits
    : CAN2_F7R1_FB26 ( -- x addr ) 26 bit CAN2_F7R1 ; \ CAN2_F7R1_FB26, Filter bits
    : CAN2_F7R1_FB27 ( -- x addr ) 27 bit CAN2_F7R1 ; \ CAN2_F7R1_FB27, Filter bits
    : CAN2_F7R1_FB28 ( -- x addr ) 28 bit CAN2_F7R1 ; \ CAN2_F7R1_FB28, Filter bits
    : CAN2_F7R1_FB29 ( -- x addr ) 29 bit CAN2_F7R1 ; \ CAN2_F7R1_FB29, Filter bits
    : CAN2_F7R1_FB30 ( -- x addr ) 30 bit CAN2_F7R1 ; \ CAN2_F7R1_FB30, Filter bits
    : CAN2_F7R1_FB31 ( -- x addr ) 31 bit CAN2_F7R1 ; \ CAN2_F7R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F7R2 (read-write) Reset:0x00000000
    : CAN2_F7R2_FB0 ( -- x addr ) 0 bit CAN2_F7R2 ; \ CAN2_F7R2_FB0, Filter bits
    : CAN2_F7R2_FB1 ( -- x addr ) 1 bit CAN2_F7R2 ; \ CAN2_F7R2_FB1, Filter bits
    : CAN2_F7R2_FB2 ( -- x addr ) 2 bit CAN2_F7R2 ; \ CAN2_F7R2_FB2, Filter bits
    : CAN2_F7R2_FB3 ( -- x addr ) 3 bit CAN2_F7R2 ; \ CAN2_F7R2_FB3, Filter bits
    : CAN2_F7R2_FB4 ( -- x addr ) 4 bit CAN2_F7R2 ; \ CAN2_F7R2_FB4, Filter bits
    : CAN2_F7R2_FB5 ( -- x addr ) 5 bit CAN2_F7R2 ; \ CAN2_F7R2_FB5, Filter bits
    : CAN2_F7R2_FB6 ( -- x addr ) 6 bit CAN2_F7R2 ; \ CAN2_F7R2_FB6, Filter bits
    : CAN2_F7R2_FB7 ( -- x addr ) 7 bit CAN2_F7R2 ; \ CAN2_F7R2_FB7, Filter bits
    : CAN2_F7R2_FB8 ( -- x addr ) 8 bit CAN2_F7R2 ; \ CAN2_F7R2_FB8, Filter bits
    : CAN2_F7R2_FB9 ( -- x addr ) 9 bit CAN2_F7R2 ; \ CAN2_F7R2_FB9, Filter bits
    : CAN2_F7R2_FB10 ( -- x addr ) 10 bit CAN2_F7R2 ; \ CAN2_F7R2_FB10, Filter bits
    : CAN2_F7R2_FB11 ( -- x addr ) 11 bit CAN2_F7R2 ; \ CAN2_F7R2_FB11, Filter bits
    : CAN2_F7R2_FB12 ( -- x addr ) 12 bit CAN2_F7R2 ; \ CAN2_F7R2_FB12, Filter bits
    : CAN2_F7R2_FB13 ( -- x addr ) 13 bit CAN2_F7R2 ; \ CAN2_F7R2_FB13, Filter bits
    : CAN2_F7R2_FB14 ( -- x addr ) 14 bit CAN2_F7R2 ; \ CAN2_F7R2_FB14, Filter bits
    : CAN2_F7R2_FB15 ( -- x addr ) 15 bit CAN2_F7R2 ; \ CAN2_F7R2_FB15, Filter bits
    : CAN2_F7R2_FB16 ( -- x addr ) 16 bit CAN2_F7R2 ; \ CAN2_F7R2_FB16, Filter bits
    : CAN2_F7R2_FB17 ( -- x addr ) 17 bit CAN2_F7R2 ; \ CAN2_F7R2_FB17, Filter bits
    : CAN2_F7R2_FB18 ( -- x addr ) 18 bit CAN2_F7R2 ; \ CAN2_F7R2_FB18, Filter bits
    : CAN2_F7R2_FB19 ( -- x addr ) 19 bit CAN2_F7R2 ; \ CAN2_F7R2_FB19, Filter bits
    : CAN2_F7R2_FB20 ( -- x addr ) 20 bit CAN2_F7R2 ; \ CAN2_F7R2_FB20, Filter bits
    : CAN2_F7R2_FB21 ( -- x addr ) 21 bit CAN2_F7R2 ; \ CAN2_F7R2_FB21, Filter bits
    : CAN2_F7R2_FB22 ( -- x addr ) 22 bit CAN2_F7R2 ; \ CAN2_F7R2_FB22, Filter bits
    : CAN2_F7R2_FB23 ( -- x addr ) 23 bit CAN2_F7R2 ; \ CAN2_F7R2_FB23, Filter bits
    : CAN2_F7R2_FB24 ( -- x addr ) 24 bit CAN2_F7R2 ; \ CAN2_F7R2_FB24, Filter bits
    : CAN2_F7R2_FB25 ( -- x addr ) 25 bit CAN2_F7R2 ; \ CAN2_F7R2_FB25, Filter bits
    : CAN2_F7R2_FB26 ( -- x addr ) 26 bit CAN2_F7R2 ; \ CAN2_F7R2_FB26, Filter bits
    : CAN2_F7R2_FB27 ( -- x addr ) 27 bit CAN2_F7R2 ; \ CAN2_F7R2_FB27, Filter bits
    : CAN2_F7R2_FB28 ( -- x addr ) 28 bit CAN2_F7R2 ; \ CAN2_F7R2_FB28, Filter bits
    : CAN2_F7R2_FB29 ( -- x addr ) 29 bit CAN2_F7R2 ; \ CAN2_F7R2_FB29, Filter bits
    : CAN2_F7R2_FB30 ( -- x addr ) 30 bit CAN2_F7R2 ; \ CAN2_F7R2_FB30, Filter bits
    : CAN2_F7R2_FB31 ( -- x addr ) 31 bit CAN2_F7R2 ; \ CAN2_F7R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F8R1 (read-write) Reset:0x00000000
    : CAN2_F8R1_FB0 ( -- x addr ) 0 bit CAN2_F8R1 ; \ CAN2_F8R1_FB0, Filter bits
    : CAN2_F8R1_FB1 ( -- x addr ) 1 bit CAN2_F8R1 ; \ CAN2_F8R1_FB1, Filter bits
    : CAN2_F8R1_FB2 ( -- x addr ) 2 bit CAN2_F8R1 ; \ CAN2_F8R1_FB2, Filter bits
    : CAN2_F8R1_FB3 ( -- x addr ) 3 bit CAN2_F8R1 ; \ CAN2_F8R1_FB3, Filter bits
    : CAN2_F8R1_FB4 ( -- x addr ) 4 bit CAN2_F8R1 ; \ CAN2_F8R1_FB4, Filter bits
    : CAN2_F8R1_FB5 ( -- x addr ) 5 bit CAN2_F8R1 ; \ CAN2_F8R1_FB5, Filter bits
    : CAN2_F8R1_FB6 ( -- x addr ) 6 bit CAN2_F8R1 ; \ CAN2_F8R1_FB6, Filter bits
    : CAN2_F8R1_FB7 ( -- x addr ) 7 bit CAN2_F8R1 ; \ CAN2_F8R1_FB7, Filter bits
    : CAN2_F8R1_FB8 ( -- x addr ) 8 bit CAN2_F8R1 ; \ CAN2_F8R1_FB8, Filter bits
    : CAN2_F8R1_FB9 ( -- x addr ) 9 bit CAN2_F8R1 ; \ CAN2_F8R1_FB9, Filter bits
    : CAN2_F8R1_FB10 ( -- x addr ) 10 bit CAN2_F8R1 ; \ CAN2_F8R1_FB10, Filter bits
    : CAN2_F8R1_FB11 ( -- x addr ) 11 bit CAN2_F8R1 ; \ CAN2_F8R1_FB11, Filter bits
    : CAN2_F8R1_FB12 ( -- x addr ) 12 bit CAN2_F8R1 ; \ CAN2_F8R1_FB12, Filter bits
    : CAN2_F8R1_FB13 ( -- x addr ) 13 bit CAN2_F8R1 ; \ CAN2_F8R1_FB13, Filter bits
    : CAN2_F8R1_FB14 ( -- x addr ) 14 bit CAN2_F8R1 ; \ CAN2_F8R1_FB14, Filter bits
    : CAN2_F8R1_FB15 ( -- x addr ) 15 bit CAN2_F8R1 ; \ CAN2_F8R1_FB15, Filter bits
    : CAN2_F8R1_FB16 ( -- x addr ) 16 bit CAN2_F8R1 ; \ CAN2_F8R1_FB16, Filter bits
    : CAN2_F8R1_FB17 ( -- x addr ) 17 bit CAN2_F8R1 ; \ CAN2_F8R1_FB17, Filter bits
    : CAN2_F8R1_FB18 ( -- x addr ) 18 bit CAN2_F8R1 ; \ CAN2_F8R1_FB18, Filter bits
    : CAN2_F8R1_FB19 ( -- x addr ) 19 bit CAN2_F8R1 ; \ CAN2_F8R1_FB19, Filter bits
    : CAN2_F8R1_FB20 ( -- x addr ) 20 bit CAN2_F8R1 ; \ CAN2_F8R1_FB20, Filter bits
    : CAN2_F8R1_FB21 ( -- x addr ) 21 bit CAN2_F8R1 ; \ CAN2_F8R1_FB21, Filter bits
    : CAN2_F8R1_FB22 ( -- x addr ) 22 bit CAN2_F8R1 ; \ CAN2_F8R1_FB22, Filter bits
    : CAN2_F8R1_FB23 ( -- x addr ) 23 bit CAN2_F8R1 ; \ CAN2_F8R1_FB23, Filter bits
    : CAN2_F8R1_FB24 ( -- x addr ) 24 bit CAN2_F8R1 ; \ CAN2_F8R1_FB24, Filter bits
    : CAN2_F8R1_FB25 ( -- x addr ) 25 bit CAN2_F8R1 ; \ CAN2_F8R1_FB25, Filter bits
    : CAN2_F8R1_FB26 ( -- x addr ) 26 bit CAN2_F8R1 ; \ CAN2_F8R1_FB26, Filter bits
    : CAN2_F8R1_FB27 ( -- x addr ) 27 bit CAN2_F8R1 ; \ CAN2_F8R1_FB27, Filter bits
    : CAN2_F8R1_FB28 ( -- x addr ) 28 bit CAN2_F8R1 ; \ CAN2_F8R1_FB28, Filter bits
    : CAN2_F8R1_FB29 ( -- x addr ) 29 bit CAN2_F8R1 ; \ CAN2_F8R1_FB29, Filter bits
    : CAN2_F8R1_FB30 ( -- x addr ) 30 bit CAN2_F8R1 ; \ CAN2_F8R1_FB30, Filter bits
    : CAN2_F8R1_FB31 ( -- x addr ) 31 bit CAN2_F8R1 ; \ CAN2_F8R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F8R2 (read-write) Reset:0x00000000
    : CAN2_F8R2_FB0 ( -- x addr ) 0 bit CAN2_F8R2 ; \ CAN2_F8R2_FB0, Filter bits
    : CAN2_F8R2_FB1 ( -- x addr ) 1 bit CAN2_F8R2 ; \ CAN2_F8R2_FB1, Filter bits
    : CAN2_F8R2_FB2 ( -- x addr ) 2 bit CAN2_F8R2 ; \ CAN2_F8R2_FB2, Filter bits
    : CAN2_F8R2_FB3 ( -- x addr ) 3 bit CAN2_F8R2 ; \ CAN2_F8R2_FB3, Filter bits
    : CAN2_F8R2_FB4 ( -- x addr ) 4 bit CAN2_F8R2 ; \ CAN2_F8R2_FB4, Filter bits
    : CAN2_F8R2_FB5 ( -- x addr ) 5 bit CAN2_F8R2 ; \ CAN2_F8R2_FB5, Filter bits
    : CAN2_F8R2_FB6 ( -- x addr ) 6 bit CAN2_F8R2 ; \ CAN2_F8R2_FB6, Filter bits
    : CAN2_F8R2_FB7 ( -- x addr ) 7 bit CAN2_F8R2 ; \ CAN2_F8R2_FB7, Filter bits
    : CAN2_F8R2_FB8 ( -- x addr ) 8 bit CAN2_F8R2 ; \ CAN2_F8R2_FB8, Filter bits
    : CAN2_F8R2_FB9 ( -- x addr ) 9 bit CAN2_F8R2 ; \ CAN2_F8R2_FB9, Filter bits
    : CAN2_F8R2_FB10 ( -- x addr ) 10 bit CAN2_F8R2 ; \ CAN2_F8R2_FB10, Filter bits
    : CAN2_F8R2_FB11 ( -- x addr ) 11 bit CAN2_F8R2 ; \ CAN2_F8R2_FB11, Filter bits
    : CAN2_F8R2_FB12 ( -- x addr ) 12 bit CAN2_F8R2 ; \ CAN2_F8R2_FB12, Filter bits
    : CAN2_F8R2_FB13 ( -- x addr ) 13 bit CAN2_F8R2 ; \ CAN2_F8R2_FB13, Filter bits
    : CAN2_F8R2_FB14 ( -- x addr ) 14 bit CAN2_F8R2 ; \ CAN2_F8R2_FB14, Filter bits
    : CAN2_F8R2_FB15 ( -- x addr ) 15 bit CAN2_F8R2 ; \ CAN2_F8R2_FB15, Filter bits
    : CAN2_F8R2_FB16 ( -- x addr ) 16 bit CAN2_F8R2 ; \ CAN2_F8R2_FB16, Filter bits
    : CAN2_F8R2_FB17 ( -- x addr ) 17 bit CAN2_F8R2 ; \ CAN2_F8R2_FB17, Filter bits
    : CAN2_F8R2_FB18 ( -- x addr ) 18 bit CAN2_F8R2 ; \ CAN2_F8R2_FB18, Filter bits
    : CAN2_F8R2_FB19 ( -- x addr ) 19 bit CAN2_F8R2 ; \ CAN2_F8R2_FB19, Filter bits
    : CAN2_F8R2_FB20 ( -- x addr ) 20 bit CAN2_F8R2 ; \ CAN2_F8R2_FB20, Filter bits
    : CAN2_F8R2_FB21 ( -- x addr ) 21 bit CAN2_F8R2 ; \ CAN2_F8R2_FB21, Filter bits
    : CAN2_F8R2_FB22 ( -- x addr ) 22 bit CAN2_F8R2 ; \ CAN2_F8R2_FB22, Filter bits
    : CAN2_F8R2_FB23 ( -- x addr ) 23 bit CAN2_F8R2 ; \ CAN2_F8R2_FB23, Filter bits
    : CAN2_F8R2_FB24 ( -- x addr ) 24 bit CAN2_F8R2 ; \ CAN2_F8R2_FB24, Filter bits
    : CAN2_F8R2_FB25 ( -- x addr ) 25 bit CAN2_F8R2 ; \ CAN2_F8R2_FB25, Filter bits
    : CAN2_F8R2_FB26 ( -- x addr ) 26 bit CAN2_F8R2 ; \ CAN2_F8R2_FB26, Filter bits
    : CAN2_F8R2_FB27 ( -- x addr ) 27 bit CAN2_F8R2 ; \ CAN2_F8R2_FB27, Filter bits
    : CAN2_F8R2_FB28 ( -- x addr ) 28 bit CAN2_F8R2 ; \ CAN2_F8R2_FB28, Filter bits
    : CAN2_F8R2_FB29 ( -- x addr ) 29 bit CAN2_F8R2 ; \ CAN2_F8R2_FB29, Filter bits
    : CAN2_F8R2_FB30 ( -- x addr ) 30 bit CAN2_F8R2 ; \ CAN2_F8R2_FB30, Filter bits
    : CAN2_F8R2_FB31 ( -- x addr ) 31 bit CAN2_F8R2 ; \ CAN2_F8R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F9R1 (read-write) Reset:0x00000000
    : CAN2_F9R1_FB0 ( -- x addr ) 0 bit CAN2_F9R1 ; \ CAN2_F9R1_FB0, Filter bits
    : CAN2_F9R1_FB1 ( -- x addr ) 1 bit CAN2_F9R1 ; \ CAN2_F9R1_FB1, Filter bits
    : CAN2_F9R1_FB2 ( -- x addr ) 2 bit CAN2_F9R1 ; \ CAN2_F9R1_FB2, Filter bits
    : CAN2_F9R1_FB3 ( -- x addr ) 3 bit CAN2_F9R1 ; \ CAN2_F9R1_FB3, Filter bits
    : CAN2_F9R1_FB4 ( -- x addr ) 4 bit CAN2_F9R1 ; \ CAN2_F9R1_FB4, Filter bits
    : CAN2_F9R1_FB5 ( -- x addr ) 5 bit CAN2_F9R1 ; \ CAN2_F9R1_FB5, Filter bits
    : CAN2_F9R1_FB6 ( -- x addr ) 6 bit CAN2_F9R1 ; \ CAN2_F9R1_FB6, Filter bits
    : CAN2_F9R1_FB7 ( -- x addr ) 7 bit CAN2_F9R1 ; \ CAN2_F9R1_FB7, Filter bits
    : CAN2_F9R1_FB8 ( -- x addr ) 8 bit CAN2_F9R1 ; \ CAN2_F9R1_FB8, Filter bits
    : CAN2_F9R1_FB9 ( -- x addr ) 9 bit CAN2_F9R1 ; \ CAN2_F9R1_FB9, Filter bits
    : CAN2_F9R1_FB10 ( -- x addr ) 10 bit CAN2_F9R1 ; \ CAN2_F9R1_FB10, Filter bits
    : CAN2_F9R1_FB11 ( -- x addr ) 11 bit CAN2_F9R1 ; \ CAN2_F9R1_FB11, Filter bits
    : CAN2_F9R1_FB12 ( -- x addr ) 12 bit CAN2_F9R1 ; \ CAN2_F9R1_FB12, Filter bits
    : CAN2_F9R1_FB13 ( -- x addr ) 13 bit CAN2_F9R1 ; \ CAN2_F9R1_FB13, Filter bits
    : CAN2_F9R1_FB14 ( -- x addr ) 14 bit CAN2_F9R1 ; \ CAN2_F9R1_FB14, Filter bits
    : CAN2_F9R1_FB15 ( -- x addr ) 15 bit CAN2_F9R1 ; \ CAN2_F9R1_FB15, Filter bits
    : CAN2_F9R1_FB16 ( -- x addr ) 16 bit CAN2_F9R1 ; \ CAN2_F9R1_FB16, Filter bits
    : CAN2_F9R1_FB17 ( -- x addr ) 17 bit CAN2_F9R1 ; \ CAN2_F9R1_FB17, Filter bits
    : CAN2_F9R1_FB18 ( -- x addr ) 18 bit CAN2_F9R1 ; \ CAN2_F9R1_FB18, Filter bits
    : CAN2_F9R1_FB19 ( -- x addr ) 19 bit CAN2_F9R1 ; \ CAN2_F9R1_FB19, Filter bits
    : CAN2_F9R1_FB20 ( -- x addr ) 20 bit CAN2_F9R1 ; \ CAN2_F9R1_FB20, Filter bits
    : CAN2_F9R1_FB21 ( -- x addr ) 21 bit CAN2_F9R1 ; \ CAN2_F9R1_FB21, Filter bits
    : CAN2_F9R1_FB22 ( -- x addr ) 22 bit CAN2_F9R1 ; \ CAN2_F9R1_FB22, Filter bits
    : CAN2_F9R1_FB23 ( -- x addr ) 23 bit CAN2_F9R1 ; \ CAN2_F9R1_FB23, Filter bits
    : CAN2_F9R1_FB24 ( -- x addr ) 24 bit CAN2_F9R1 ; \ CAN2_F9R1_FB24, Filter bits
    : CAN2_F9R1_FB25 ( -- x addr ) 25 bit CAN2_F9R1 ; \ CAN2_F9R1_FB25, Filter bits
    : CAN2_F9R1_FB26 ( -- x addr ) 26 bit CAN2_F9R1 ; \ CAN2_F9R1_FB26, Filter bits
    : CAN2_F9R1_FB27 ( -- x addr ) 27 bit CAN2_F9R1 ; \ CAN2_F9R1_FB27, Filter bits
    : CAN2_F9R1_FB28 ( -- x addr ) 28 bit CAN2_F9R1 ; \ CAN2_F9R1_FB28, Filter bits
    : CAN2_F9R1_FB29 ( -- x addr ) 29 bit CAN2_F9R1 ; \ CAN2_F9R1_FB29, Filter bits
    : CAN2_F9R1_FB30 ( -- x addr ) 30 bit CAN2_F9R1 ; \ CAN2_F9R1_FB30, Filter bits
    : CAN2_F9R1_FB31 ( -- x addr ) 31 bit CAN2_F9R1 ; \ CAN2_F9R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F9R2 (read-write) Reset:0x00000000
    : CAN2_F9R2_FB0 ( -- x addr ) 0 bit CAN2_F9R2 ; \ CAN2_F9R2_FB0, Filter bits
    : CAN2_F9R2_FB1 ( -- x addr ) 1 bit CAN2_F9R2 ; \ CAN2_F9R2_FB1, Filter bits
    : CAN2_F9R2_FB2 ( -- x addr ) 2 bit CAN2_F9R2 ; \ CAN2_F9R2_FB2, Filter bits
    : CAN2_F9R2_FB3 ( -- x addr ) 3 bit CAN2_F9R2 ; \ CAN2_F9R2_FB3, Filter bits
    : CAN2_F9R2_FB4 ( -- x addr ) 4 bit CAN2_F9R2 ; \ CAN2_F9R2_FB4, Filter bits
    : CAN2_F9R2_FB5 ( -- x addr ) 5 bit CAN2_F9R2 ; \ CAN2_F9R2_FB5, Filter bits
    : CAN2_F9R2_FB6 ( -- x addr ) 6 bit CAN2_F9R2 ; \ CAN2_F9R2_FB6, Filter bits
    : CAN2_F9R2_FB7 ( -- x addr ) 7 bit CAN2_F9R2 ; \ CAN2_F9R2_FB7, Filter bits
    : CAN2_F9R2_FB8 ( -- x addr ) 8 bit CAN2_F9R2 ; \ CAN2_F9R2_FB8, Filter bits
    : CAN2_F9R2_FB9 ( -- x addr ) 9 bit CAN2_F9R2 ; \ CAN2_F9R2_FB9, Filter bits
    : CAN2_F9R2_FB10 ( -- x addr ) 10 bit CAN2_F9R2 ; \ CAN2_F9R2_FB10, Filter bits
    : CAN2_F9R2_FB11 ( -- x addr ) 11 bit CAN2_F9R2 ; \ CAN2_F9R2_FB11, Filter bits
    : CAN2_F9R2_FB12 ( -- x addr ) 12 bit CAN2_F9R2 ; \ CAN2_F9R2_FB12, Filter bits
    : CAN2_F9R2_FB13 ( -- x addr ) 13 bit CAN2_F9R2 ; \ CAN2_F9R2_FB13, Filter bits
    : CAN2_F9R2_FB14 ( -- x addr ) 14 bit CAN2_F9R2 ; \ CAN2_F9R2_FB14, Filter bits
    : CAN2_F9R2_FB15 ( -- x addr ) 15 bit CAN2_F9R2 ; \ CAN2_F9R2_FB15, Filter bits
    : CAN2_F9R2_FB16 ( -- x addr ) 16 bit CAN2_F9R2 ; \ CAN2_F9R2_FB16, Filter bits
    : CAN2_F9R2_FB17 ( -- x addr ) 17 bit CAN2_F9R2 ; \ CAN2_F9R2_FB17, Filter bits
    : CAN2_F9R2_FB18 ( -- x addr ) 18 bit CAN2_F9R2 ; \ CAN2_F9R2_FB18, Filter bits
    : CAN2_F9R2_FB19 ( -- x addr ) 19 bit CAN2_F9R2 ; \ CAN2_F9R2_FB19, Filter bits
    : CAN2_F9R2_FB20 ( -- x addr ) 20 bit CAN2_F9R2 ; \ CAN2_F9R2_FB20, Filter bits
    : CAN2_F9R2_FB21 ( -- x addr ) 21 bit CAN2_F9R2 ; \ CAN2_F9R2_FB21, Filter bits
    : CAN2_F9R2_FB22 ( -- x addr ) 22 bit CAN2_F9R2 ; \ CAN2_F9R2_FB22, Filter bits
    : CAN2_F9R2_FB23 ( -- x addr ) 23 bit CAN2_F9R2 ; \ CAN2_F9R2_FB23, Filter bits
    : CAN2_F9R2_FB24 ( -- x addr ) 24 bit CAN2_F9R2 ; \ CAN2_F9R2_FB24, Filter bits
    : CAN2_F9R2_FB25 ( -- x addr ) 25 bit CAN2_F9R2 ; \ CAN2_F9R2_FB25, Filter bits
    : CAN2_F9R2_FB26 ( -- x addr ) 26 bit CAN2_F9R2 ; \ CAN2_F9R2_FB26, Filter bits
    : CAN2_F9R2_FB27 ( -- x addr ) 27 bit CAN2_F9R2 ; \ CAN2_F9R2_FB27, Filter bits
    : CAN2_F9R2_FB28 ( -- x addr ) 28 bit CAN2_F9R2 ; \ CAN2_F9R2_FB28, Filter bits
    : CAN2_F9R2_FB29 ( -- x addr ) 29 bit CAN2_F9R2 ; \ CAN2_F9R2_FB29, Filter bits
    : CAN2_F9R2_FB30 ( -- x addr ) 30 bit CAN2_F9R2 ; \ CAN2_F9R2_FB30, Filter bits
    : CAN2_F9R2_FB31 ( -- x addr ) 31 bit CAN2_F9R2 ; \ CAN2_F9R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F10R1 (read-write) Reset:0x00000000
    : CAN2_F10R1_FB0 ( -- x addr ) 0 bit CAN2_F10R1 ; \ CAN2_F10R1_FB0, Filter bits
    : CAN2_F10R1_FB1 ( -- x addr ) 1 bit CAN2_F10R1 ; \ CAN2_F10R1_FB1, Filter bits
    : CAN2_F10R1_FB2 ( -- x addr ) 2 bit CAN2_F10R1 ; \ CAN2_F10R1_FB2, Filter bits
    : CAN2_F10R1_FB3 ( -- x addr ) 3 bit CAN2_F10R1 ; \ CAN2_F10R1_FB3, Filter bits
    : CAN2_F10R1_FB4 ( -- x addr ) 4 bit CAN2_F10R1 ; \ CAN2_F10R1_FB4, Filter bits
    : CAN2_F10R1_FB5 ( -- x addr ) 5 bit CAN2_F10R1 ; \ CAN2_F10R1_FB5, Filter bits
    : CAN2_F10R1_FB6 ( -- x addr ) 6 bit CAN2_F10R1 ; \ CAN2_F10R1_FB6, Filter bits
    : CAN2_F10R1_FB7 ( -- x addr ) 7 bit CAN2_F10R1 ; \ CAN2_F10R1_FB7, Filter bits
    : CAN2_F10R1_FB8 ( -- x addr ) 8 bit CAN2_F10R1 ; \ CAN2_F10R1_FB8, Filter bits
    : CAN2_F10R1_FB9 ( -- x addr ) 9 bit CAN2_F10R1 ; \ CAN2_F10R1_FB9, Filter bits
    : CAN2_F10R1_FB10 ( -- x addr ) 10 bit CAN2_F10R1 ; \ CAN2_F10R1_FB10, Filter bits
    : CAN2_F10R1_FB11 ( -- x addr ) 11 bit CAN2_F10R1 ; \ CAN2_F10R1_FB11, Filter bits
    : CAN2_F10R1_FB12 ( -- x addr ) 12 bit CAN2_F10R1 ; \ CAN2_F10R1_FB12, Filter bits
    : CAN2_F10R1_FB13 ( -- x addr ) 13 bit CAN2_F10R1 ; \ CAN2_F10R1_FB13, Filter bits
    : CAN2_F10R1_FB14 ( -- x addr ) 14 bit CAN2_F10R1 ; \ CAN2_F10R1_FB14, Filter bits
    : CAN2_F10R1_FB15 ( -- x addr ) 15 bit CAN2_F10R1 ; \ CAN2_F10R1_FB15, Filter bits
    : CAN2_F10R1_FB16 ( -- x addr ) 16 bit CAN2_F10R1 ; \ CAN2_F10R1_FB16, Filter bits
    : CAN2_F10R1_FB17 ( -- x addr ) 17 bit CAN2_F10R1 ; \ CAN2_F10R1_FB17, Filter bits
    : CAN2_F10R1_FB18 ( -- x addr ) 18 bit CAN2_F10R1 ; \ CAN2_F10R1_FB18, Filter bits
    : CAN2_F10R1_FB19 ( -- x addr ) 19 bit CAN2_F10R1 ; \ CAN2_F10R1_FB19, Filter bits
    : CAN2_F10R1_FB20 ( -- x addr ) 20 bit CAN2_F10R1 ; \ CAN2_F10R1_FB20, Filter bits
    : CAN2_F10R1_FB21 ( -- x addr ) 21 bit CAN2_F10R1 ; \ CAN2_F10R1_FB21, Filter bits
    : CAN2_F10R1_FB22 ( -- x addr ) 22 bit CAN2_F10R1 ; \ CAN2_F10R1_FB22, Filter bits
    : CAN2_F10R1_FB23 ( -- x addr ) 23 bit CAN2_F10R1 ; \ CAN2_F10R1_FB23, Filter bits
    : CAN2_F10R1_FB24 ( -- x addr ) 24 bit CAN2_F10R1 ; \ CAN2_F10R1_FB24, Filter bits
    : CAN2_F10R1_FB25 ( -- x addr ) 25 bit CAN2_F10R1 ; \ CAN2_F10R1_FB25, Filter bits
    : CAN2_F10R1_FB26 ( -- x addr ) 26 bit CAN2_F10R1 ; \ CAN2_F10R1_FB26, Filter bits
    : CAN2_F10R1_FB27 ( -- x addr ) 27 bit CAN2_F10R1 ; \ CAN2_F10R1_FB27, Filter bits
    : CAN2_F10R1_FB28 ( -- x addr ) 28 bit CAN2_F10R1 ; \ CAN2_F10R1_FB28, Filter bits
    : CAN2_F10R1_FB29 ( -- x addr ) 29 bit CAN2_F10R1 ; \ CAN2_F10R1_FB29, Filter bits
    : CAN2_F10R1_FB30 ( -- x addr ) 30 bit CAN2_F10R1 ; \ CAN2_F10R1_FB30, Filter bits
    : CAN2_F10R1_FB31 ( -- x addr ) 31 bit CAN2_F10R1 ; \ CAN2_F10R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F10R2 (read-write) Reset:0x00000000
    : CAN2_F10R2_FB0 ( -- x addr ) 0 bit CAN2_F10R2 ; \ CAN2_F10R2_FB0, Filter bits
    : CAN2_F10R2_FB1 ( -- x addr ) 1 bit CAN2_F10R2 ; \ CAN2_F10R2_FB1, Filter bits
    : CAN2_F10R2_FB2 ( -- x addr ) 2 bit CAN2_F10R2 ; \ CAN2_F10R2_FB2, Filter bits
    : CAN2_F10R2_FB3 ( -- x addr ) 3 bit CAN2_F10R2 ; \ CAN2_F10R2_FB3, Filter bits
    : CAN2_F10R2_FB4 ( -- x addr ) 4 bit CAN2_F10R2 ; \ CAN2_F10R2_FB4, Filter bits
    : CAN2_F10R2_FB5 ( -- x addr ) 5 bit CAN2_F10R2 ; \ CAN2_F10R2_FB5, Filter bits
    : CAN2_F10R2_FB6 ( -- x addr ) 6 bit CAN2_F10R2 ; \ CAN2_F10R2_FB6, Filter bits
    : CAN2_F10R2_FB7 ( -- x addr ) 7 bit CAN2_F10R2 ; \ CAN2_F10R2_FB7, Filter bits
    : CAN2_F10R2_FB8 ( -- x addr ) 8 bit CAN2_F10R2 ; \ CAN2_F10R2_FB8, Filter bits
    : CAN2_F10R2_FB9 ( -- x addr ) 9 bit CAN2_F10R2 ; \ CAN2_F10R2_FB9, Filter bits
    : CAN2_F10R2_FB10 ( -- x addr ) 10 bit CAN2_F10R2 ; \ CAN2_F10R2_FB10, Filter bits
    : CAN2_F10R2_FB11 ( -- x addr ) 11 bit CAN2_F10R2 ; \ CAN2_F10R2_FB11, Filter bits
    : CAN2_F10R2_FB12 ( -- x addr ) 12 bit CAN2_F10R2 ; \ CAN2_F10R2_FB12, Filter bits
    : CAN2_F10R2_FB13 ( -- x addr ) 13 bit CAN2_F10R2 ; \ CAN2_F10R2_FB13, Filter bits
    : CAN2_F10R2_FB14 ( -- x addr ) 14 bit CAN2_F10R2 ; \ CAN2_F10R2_FB14, Filter bits
    : CAN2_F10R2_FB15 ( -- x addr ) 15 bit CAN2_F10R2 ; \ CAN2_F10R2_FB15, Filter bits
    : CAN2_F10R2_FB16 ( -- x addr ) 16 bit CAN2_F10R2 ; \ CAN2_F10R2_FB16, Filter bits
    : CAN2_F10R2_FB17 ( -- x addr ) 17 bit CAN2_F10R2 ; \ CAN2_F10R2_FB17, Filter bits
    : CAN2_F10R2_FB18 ( -- x addr ) 18 bit CAN2_F10R2 ; \ CAN2_F10R2_FB18, Filter bits
    : CAN2_F10R2_FB19 ( -- x addr ) 19 bit CAN2_F10R2 ; \ CAN2_F10R2_FB19, Filter bits
    : CAN2_F10R2_FB20 ( -- x addr ) 20 bit CAN2_F10R2 ; \ CAN2_F10R2_FB20, Filter bits
    : CAN2_F10R2_FB21 ( -- x addr ) 21 bit CAN2_F10R2 ; \ CAN2_F10R2_FB21, Filter bits
    : CAN2_F10R2_FB22 ( -- x addr ) 22 bit CAN2_F10R2 ; \ CAN2_F10R2_FB22, Filter bits
    : CAN2_F10R2_FB23 ( -- x addr ) 23 bit CAN2_F10R2 ; \ CAN2_F10R2_FB23, Filter bits
    : CAN2_F10R2_FB24 ( -- x addr ) 24 bit CAN2_F10R2 ; \ CAN2_F10R2_FB24, Filter bits
    : CAN2_F10R2_FB25 ( -- x addr ) 25 bit CAN2_F10R2 ; \ CAN2_F10R2_FB25, Filter bits
    : CAN2_F10R2_FB26 ( -- x addr ) 26 bit CAN2_F10R2 ; \ CAN2_F10R2_FB26, Filter bits
    : CAN2_F10R2_FB27 ( -- x addr ) 27 bit CAN2_F10R2 ; \ CAN2_F10R2_FB27, Filter bits
    : CAN2_F10R2_FB28 ( -- x addr ) 28 bit CAN2_F10R2 ; \ CAN2_F10R2_FB28, Filter bits
    : CAN2_F10R2_FB29 ( -- x addr ) 29 bit CAN2_F10R2 ; \ CAN2_F10R2_FB29, Filter bits
    : CAN2_F10R2_FB30 ( -- x addr ) 30 bit CAN2_F10R2 ; \ CAN2_F10R2_FB30, Filter bits
    : CAN2_F10R2_FB31 ( -- x addr ) 31 bit CAN2_F10R2 ; \ CAN2_F10R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F11R1 (read-write) Reset:0x00000000
    : CAN2_F11R1_FB0 ( -- x addr ) 0 bit CAN2_F11R1 ; \ CAN2_F11R1_FB0, Filter bits
    : CAN2_F11R1_FB1 ( -- x addr ) 1 bit CAN2_F11R1 ; \ CAN2_F11R1_FB1, Filter bits
    : CAN2_F11R1_FB2 ( -- x addr ) 2 bit CAN2_F11R1 ; \ CAN2_F11R1_FB2, Filter bits
    : CAN2_F11R1_FB3 ( -- x addr ) 3 bit CAN2_F11R1 ; \ CAN2_F11R1_FB3, Filter bits
    : CAN2_F11R1_FB4 ( -- x addr ) 4 bit CAN2_F11R1 ; \ CAN2_F11R1_FB4, Filter bits
    : CAN2_F11R1_FB5 ( -- x addr ) 5 bit CAN2_F11R1 ; \ CAN2_F11R1_FB5, Filter bits
    : CAN2_F11R1_FB6 ( -- x addr ) 6 bit CAN2_F11R1 ; \ CAN2_F11R1_FB6, Filter bits
    : CAN2_F11R1_FB7 ( -- x addr ) 7 bit CAN2_F11R1 ; \ CAN2_F11R1_FB7, Filter bits
    : CAN2_F11R1_FB8 ( -- x addr ) 8 bit CAN2_F11R1 ; \ CAN2_F11R1_FB8, Filter bits
    : CAN2_F11R1_FB9 ( -- x addr ) 9 bit CAN2_F11R1 ; \ CAN2_F11R1_FB9, Filter bits
    : CAN2_F11R1_FB10 ( -- x addr ) 10 bit CAN2_F11R1 ; \ CAN2_F11R1_FB10, Filter bits
    : CAN2_F11R1_FB11 ( -- x addr ) 11 bit CAN2_F11R1 ; \ CAN2_F11R1_FB11, Filter bits
    : CAN2_F11R1_FB12 ( -- x addr ) 12 bit CAN2_F11R1 ; \ CAN2_F11R1_FB12, Filter bits
    : CAN2_F11R1_FB13 ( -- x addr ) 13 bit CAN2_F11R1 ; \ CAN2_F11R1_FB13, Filter bits
    : CAN2_F11R1_FB14 ( -- x addr ) 14 bit CAN2_F11R1 ; \ CAN2_F11R1_FB14, Filter bits
    : CAN2_F11R1_FB15 ( -- x addr ) 15 bit CAN2_F11R1 ; \ CAN2_F11R1_FB15, Filter bits
    : CAN2_F11R1_FB16 ( -- x addr ) 16 bit CAN2_F11R1 ; \ CAN2_F11R1_FB16, Filter bits
    : CAN2_F11R1_FB17 ( -- x addr ) 17 bit CAN2_F11R1 ; \ CAN2_F11R1_FB17, Filter bits
    : CAN2_F11R1_FB18 ( -- x addr ) 18 bit CAN2_F11R1 ; \ CAN2_F11R1_FB18, Filter bits
    : CAN2_F11R1_FB19 ( -- x addr ) 19 bit CAN2_F11R1 ; \ CAN2_F11R1_FB19, Filter bits
    : CAN2_F11R1_FB20 ( -- x addr ) 20 bit CAN2_F11R1 ; \ CAN2_F11R1_FB20, Filter bits
    : CAN2_F11R1_FB21 ( -- x addr ) 21 bit CAN2_F11R1 ; \ CAN2_F11R1_FB21, Filter bits
    : CAN2_F11R1_FB22 ( -- x addr ) 22 bit CAN2_F11R1 ; \ CAN2_F11R1_FB22, Filter bits
    : CAN2_F11R1_FB23 ( -- x addr ) 23 bit CAN2_F11R1 ; \ CAN2_F11R1_FB23, Filter bits
    : CAN2_F11R1_FB24 ( -- x addr ) 24 bit CAN2_F11R1 ; \ CAN2_F11R1_FB24, Filter bits
    : CAN2_F11R1_FB25 ( -- x addr ) 25 bit CAN2_F11R1 ; \ CAN2_F11R1_FB25, Filter bits
    : CAN2_F11R1_FB26 ( -- x addr ) 26 bit CAN2_F11R1 ; \ CAN2_F11R1_FB26, Filter bits
    : CAN2_F11R1_FB27 ( -- x addr ) 27 bit CAN2_F11R1 ; \ CAN2_F11R1_FB27, Filter bits
    : CAN2_F11R1_FB28 ( -- x addr ) 28 bit CAN2_F11R1 ; \ CAN2_F11R1_FB28, Filter bits
    : CAN2_F11R1_FB29 ( -- x addr ) 29 bit CAN2_F11R1 ; \ CAN2_F11R1_FB29, Filter bits
    : CAN2_F11R1_FB30 ( -- x addr ) 30 bit CAN2_F11R1 ; \ CAN2_F11R1_FB30, Filter bits
    : CAN2_F11R1_FB31 ( -- x addr ) 31 bit CAN2_F11R1 ; \ CAN2_F11R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F11R2 (read-write) Reset:0x00000000
    : CAN2_F11R2_FB0 ( -- x addr ) 0 bit CAN2_F11R2 ; \ CAN2_F11R2_FB0, Filter bits
    : CAN2_F11R2_FB1 ( -- x addr ) 1 bit CAN2_F11R2 ; \ CAN2_F11R2_FB1, Filter bits
    : CAN2_F11R2_FB2 ( -- x addr ) 2 bit CAN2_F11R2 ; \ CAN2_F11R2_FB2, Filter bits
    : CAN2_F11R2_FB3 ( -- x addr ) 3 bit CAN2_F11R2 ; \ CAN2_F11R2_FB3, Filter bits
    : CAN2_F11R2_FB4 ( -- x addr ) 4 bit CAN2_F11R2 ; \ CAN2_F11R2_FB4, Filter bits
    : CAN2_F11R2_FB5 ( -- x addr ) 5 bit CAN2_F11R2 ; \ CAN2_F11R2_FB5, Filter bits
    : CAN2_F11R2_FB6 ( -- x addr ) 6 bit CAN2_F11R2 ; \ CAN2_F11R2_FB6, Filter bits
    : CAN2_F11R2_FB7 ( -- x addr ) 7 bit CAN2_F11R2 ; \ CAN2_F11R2_FB7, Filter bits
    : CAN2_F11R2_FB8 ( -- x addr ) 8 bit CAN2_F11R2 ; \ CAN2_F11R2_FB8, Filter bits
    : CAN2_F11R2_FB9 ( -- x addr ) 9 bit CAN2_F11R2 ; \ CAN2_F11R2_FB9, Filter bits
    : CAN2_F11R2_FB10 ( -- x addr ) 10 bit CAN2_F11R2 ; \ CAN2_F11R2_FB10, Filter bits
    : CAN2_F11R2_FB11 ( -- x addr ) 11 bit CAN2_F11R2 ; \ CAN2_F11R2_FB11, Filter bits
    : CAN2_F11R2_FB12 ( -- x addr ) 12 bit CAN2_F11R2 ; \ CAN2_F11R2_FB12, Filter bits
    : CAN2_F11R2_FB13 ( -- x addr ) 13 bit CAN2_F11R2 ; \ CAN2_F11R2_FB13, Filter bits
    : CAN2_F11R2_FB14 ( -- x addr ) 14 bit CAN2_F11R2 ; \ CAN2_F11R2_FB14, Filter bits
    : CAN2_F11R2_FB15 ( -- x addr ) 15 bit CAN2_F11R2 ; \ CAN2_F11R2_FB15, Filter bits
    : CAN2_F11R2_FB16 ( -- x addr ) 16 bit CAN2_F11R2 ; \ CAN2_F11R2_FB16, Filter bits
    : CAN2_F11R2_FB17 ( -- x addr ) 17 bit CAN2_F11R2 ; \ CAN2_F11R2_FB17, Filter bits
    : CAN2_F11R2_FB18 ( -- x addr ) 18 bit CAN2_F11R2 ; \ CAN2_F11R2_FB18, Filter bits
    : CAN2_F11R2_FB19 ( -- x addr ) 19 bit CAN2_F11R2 ; \ CAN2_F11R2_FB19, Filter bits
    : CAN2_F11R2_FB20 ( -- x addr ) 20 bit CAN2_F11R2 ; \ CAN2_F11R2_FB20, Filter bits
    : CAN2_F11R2_FB21 ( -- x addr ) 21 bit CAN2_F11R2 ; \ CAN2_F11R2_FB21, Filter bits
    : CAN2_F11R2_FB22 ( -- x addr ) 22 bit CAN2_F11R2 ; \ CAN2_F11R2_FB22, Filter bits
    : CAN2_F11R2_FB23 ( -- x addr ) 23 bit CAN2_F11R2 ; \ CAN2_F11R2_FB23, Filter bits
    : CAN2_F11R2_FB24 ( -- x addr ) 24 bit CAN2_F11R2 ; \ CAN2_F11R2_FB24, Filter bits
    : CAN2_F11R2_FB25 ( -- x addr ) 25 bit CAN2_F11R2 ; \ CAN2_F11R2_FB25, Filter bits
    : CAN2_F11R2_FB26 ( -- x addr ) 26 bit CAN2_F11R2 ; \ CAN2_F11R2_FB26, Filter bits
    : CAN2_F11R2_FB27 ( -- x addr ) 27 bit CAN2_F11R2 ; \ CAN2_F11R2_FB27, Filter bits
    : CAN2_F11R2_FB28 ( -- x addr ) 28 bit CAN2_F11R2 ; \ CAN2_F11R2_FB28, Filter bits
    : CAN2_F11R2_FB29 ( -- x addr ) 29 bit CAN2_F11R2 ; \ CAN2_F11R2_FB29, Filter bits
    : CAN2_F11R2_FB30 ( -- x addr ) 30 bit CAN2_F11R2 ; \ CAN2_F11R2_FB30, Filter bits
    : CAN2_F11R2_FB31 ( -- x addr ) 31 bit CAN2_F11R2 ; \ CAN2_F11R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F12R1 (read-write) Reset:0x00000000
    : CAN2_F12R1_FB0 ( -- x addr ) 0 bit CAN2_F12R1 ; \ CAN2_F12R1_FB0, Filter bits
    : CAN2_F12R1_FB1 ( -- x addr ) 1 bit CAN2_F12R1 ; \ CAN2_F12R1_FB1, Filter bits
    : CAN2_F12R1_FB2 ( -- x addr ) 2 bit CAN2_F12R1 ; \ CAN2_F12R1_FB2, Filter bits
    : CAN2_F12R1_FB3 ( -- x addr ) 3 bit CAN2_F12R1 ; \ CAN2_F12R1_FB3, Filter bits
    : CAN2_F12R1_FB4 ( -- x addr ) 4 bit CAN2_F12R1 ; \ CAN2_F12R1_FB4, Filter bits
    : CAN2_F12R1_FB5 ( -- x addr ) 5 bit CAN2_F12R1 ; \ CAN2_F12R1_FB5, Filter bits
    : CAN2_F12R1_FB6 ( -- x addr ) 6 bit CAN2_F12R1 ; \ CAN2_F12R1_FB6, Filter bits
    : CAN2_F12R1_FB7 ( -- x addr ) 7 bit CAN2_F12R1 ; \ CAN2_F12R1_FB7, Filter bits
    : CAN2_F12R1_FB8 ( -- x addr ) 8 bit CAN2_F12R1 ; \ CAN2_F12R1_FB8, Filter bits
    : CAN2_F12R1_FB9 ( -- x addr ) 9 bit CAN2_F12R1 ; \ CAN2_F12R1_FB9, Filter bits
    : CAN2_F12R1_FB10 ( -- x addr ) 10 bit CAN2_F12R1 ; \ CAN2_F12R1_FB10, Filter bits
    : CAN2_F12R1_FB11 ( -- x addr ) 11 bit CAN2_F12R1 ; \ CAN2_F12R1_FB11, Filter bits
    : CAN2_F12R1_FB12 ( -- x addr ) 12 bit CAN2_F12R1 ; \ CAN2_F12R1_FB12, Filter bits
    : CAN2_F12R1_FB13 ( -- x addr ) 13 bit CAN2_F12R1 ; \ CAN2_F12R1_FB13, Filter bits
    : CAN2_F12R1_FB14 ( -- x addr ) 14 bit CAN2_F12R1 ; \ CAN2_F12R1_FB14, Filter bits
    : CAN2_F12R1_FB15 ( -- x addr ) 15 bit CAN2_F12R1 ; \ CAN2_F12R1_FB15, Filter bits
    : CAN2_F12R1_FB16 ( -- x addr ) 16 bit CAN2_F12R1 ; \ CAN2_F12R1_FB16, Filter bits
    : CAN2_F12R1_FB17 ( -- x addr ) 17 bit CAN2_F12R1 ; \ CAN2_F12R1_FB17, Filter bits
    : CAN2_F12R1_FB18 ( -- x addr ) 18 bit CAN2_F12R1 ; \ CAN2_F12R1_FB18, Filter bits
    : CAN2_F12R1_FB19 ( -- x addr ) 19 bit CAN2_F12R1 ; \ CAN2_F12R1_FB19, Filter bits
    : CAN2_F12R1_FB20 ( -- x addr ) 20 bit CAN2_F12R1 ; \ CAN2_F12R1_FB20, Filter bits
    : CAN2_F12R1_FB21 ( -- x addr ) 21 bit CAN2_F12R1 ; \ CAN2_F12R1_FB21, Filter bits
    : CAN2_F12R1_FB22 ( -- x addr ) 22 bit CAN2_F12R1 ; \ CAN2_F12R1_FB22, Filter bits
    : CAN2_F12R1_FB23 ( -- x addr ) 23 bit CAN2_F12R1 ; \ CAN2_F12R1_FB23, Filter bits
    : CAN2_F12R1_FB24 ( -- x addr ) 24 bit CAN2_F12R1 ; \ CAN2_F12R1_FB24, Filter bits
    : CAN2_F12R1_FB25 ( -- x addr ) 25 bit CAN2_F12R1 ; \ CAN2_F12R1_FB25, Filter bits
    : CAN2_F12R1_FB26 ( -- x addr ) 26 bit CAN2_F12R1 ; \ CAN2_F12R1_FB26, Filter bits
    : CAN2_F12R1_FB27 ( -- x addr ) 27 bit CAN2_F12R1 ; \ CAN2_F12R1_FB27, Filter bits
    : CAN2_F12R1_FB28 ( -- x addr ) 28 bit CAN2_F12R1 ; \ CAN2_F12R1_FB28, Filter bits
    : CAN2_F12R1_FB29 ( -- x addr ) 29 bit CAN2_F12R1 ; \ CAN2_F12R1_FB29, Filter bits
    : CAN2_F12R1_FB30 ( -- x addr ) 30 bit CAN2_F12R1 ; \ CAN2_F12R1_FB30, Filter bits
    : CAN2_F12R1_FB31 ( -- x addr ) 31 bit CAN2_F12R1 ; \ CAN2_F12R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F12R2 (read-write) Reset:0x00000000
    : CAN2_F12R2_FB0 ( -- x addr ) 0 bit CAN2_F12R2 ; \ CAN2_F12R2_FB0, Filter bits
    : CAN2_F12R2_FB1 ( -- x addr ) 1 bit CAN2_F12R2 ; \ CAN2_F12R2_FB1, Filter bits
    : CAN2_F12R2_FB2 ( -- x addr ) 2 bit CAN2_F12R2 ; \ CAN2_F12R2_FB2, Filter bits
    : CAN2_F12R2_FB3 ( -- x addr ) 3 bit CAN2_F12R2 ; \ CAN2_F12R2_FB3, Filter bits
    : CAN2_F12R2_FB4 ( -- x addr ) 4 bit CAN2_F12R2 ; \ CAN2_F12R2_FB4, Filter bits
    : CAN2_F12R2_FB5 ( -- x addr ) 5 bit CAN2_F12R2 ; \ CAN2_F12R2_FB5, Filter bits
    : CAN2_F12R2_FB6 ( -- x addr ) 6 bit CAN2_F12R2 ; \ CAN2_F12R2_FB6, Filter bits
    : CAN2_F12R2_FB7 ( -- x addr ) 7 bit CAN2_F12R2 ; \ CAN2_F12R2_FB7, Filter bits
    : CAN2_F12R2_FB8 ( -- x addr ) 8 bit CAN2_F12R2 ; \ CAN2_F12R2_FB8, Filter bits
    : CAN2_F12R2_FB9 ( -- x addr ) 9 bit CAN2_F12R2 ; \ CAN2_F12R2_FB9, Filter bits
    : CAN2_F12R2_FB10 ( -- x addr ) 10 bit CAN2_F12R2 ; \ CAN2_F12R2_FB10, Filter bits
    : CAN2_F12R2_FB11 ( -- x addr ) 11 bit CAN2_F12R2 ; \ CAN2_F12R2_FB11, Filter bits
    : CAN2_F12R2_FB12 ( -- x addr ) 12 bit CAN2_F12R2 ; \ CAN2_F12R2_FB12, Filter bits
    : CAN2_F12R2_FB13 ( -- x addr ) 13 bit CAN2_F12R2 ; \ CAN2_F12R2_FB13, Filter bits
    : CAN2_F12R2_FB14 ( -- x addr ) 14 bit CAN2_F12R2 ; \ CAN2_F12R2_FB14, Filter bits
    : CAN2_F12R2_FB15 ( -- x addr ) 15 bit CAN2_F12R2 ; \ CAN2_F12R2_FB15, Filter bits
    : CAN2_F12R2_FB16 ( -- x addr ) 16 bit CAN2_F12R2 ; \ CAN2_F12R2_FB16, Filter bits
    : CAN2_F12R2_FB17 ( -- x addr ) 17 bit CAN2_F12R2 ; \ CAN2_F12R2_FB17, Filter bits
    : CAN2_F12R2_FB18 ( -- x addr ) 18 bit CAN2_F12R2 ; \ CAN2_F12R2_FB18, Filter bits
    : CAN2_F12R2_FB19 ( -- x addr ) 19 bit CAN2_F12R2 ; \ CAN2_F12R2_FB19, Filter bits
    : CAN2_F12R2_FB20 ( -- x addr ) 20 bit CAN2_F12R2 ; \ CAN2_F12R2_FB20, Filter bits
    : CAN2_F12R2_FB21 ( -- x addr ) 21 bit CAN2_F12R2 ; \ CAN2_F12R2_FB21, Filter bits
    : CAN2_F12R2_FB22 ( -- x addr ) 22 bit CAN2_F12R2 ; \ CAN2_F12R2_FB22, Filter bits
    : CAN2_F12R2_FB23 ( -- x addr ) 23 bit CAN2_F12R2 ; \ CAN2_F12R2_FB23, Filter bits
    : CAN2_F12R2_FB24 ( -- x addr ) 24 bit CAN2_F12R2 ; \ CAN2_F12R2_FB24, Filter bits
    : CAN2_F12R2_FB25 ( -- x addr ) 25 bit CAN2_F12R2 ; \ CAN2_F12R2_FB25, Filter bits
    : CAN2_F12R2_FB26 ( -- x addr ) 26 bit CAN2_F12R2 ; \ CAN2_F12R2_FB26, Filter bits
    : CAN2_F12R2_FB27 ( -- x addr ) 27 bit CAN2_F12R2 ; \ CAN2_F12R2_FB27, Filter bits
    : CAN2_F12R2_FB28 ( -- x addr ) 28 bit CAN2_F12R2 ; \ CAN2_F12R2_FB28, Filter bits
    : CAN2_F12R2_FB29 ( -- x addr ) 29 bit CAN2_F12R2 ; \ CAN2_F12R2_FB29, Filter bits
    : CAN2_F12R2_FB30 ( -- x addr ) 30 bit CAN2_F12R2 ; \ CAN2_F12R2_FB30, Filter bits
    : CAN2_F12R2_FB31 ( -- x addr ) 31 bit CAN2_F12R2 ; \ CAN2_F12R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F13R1 (read-write) Reset:0x00000000
    : CAN2_F13R1_FB0 ( -- x addr ) 0 bit CAN2_F13R1 ; \ CAN2_F13R1_FB0, Filter bits
    : CAN2_F13R1_FB1 ( -- x addr ) 1 bit CAN2_F13R1 ; \ CAN2_F13R1_FB1, Filter bits
    : CAN2_F13R1_FB2 ( -- x addr ) 2 bit CAN2_F13R1 ; \ CAN2_F13R1_FB2, Filter bits
    : CAN2_F13R1_FB3 ( -- x addr ) 3 bit CAN2_F13R1 ; \ CAN2_F13R1_FB3, Filter bits
    : CAN2_F13R1_FB4 ( -- x addr ) 4 bit CAN2_F13R1 ; \ CAN2_F13R1_FB4, Filter bits
    : CAN2_F13R1_FB5 ( -- x addr ) 5 bit CAN2_F13R1 ; \ CAN2_F13R1_FB5, Filter bits
    : CAN2_F13R1_FB6 ( -- x addr ) 6 bit CAN2_F13R1 ; \ CAN2_F13R1_FB6, Filter bits
    : CAN2_F13R1_FB7 ( -- x addr ) 7 bit CAN2_F13R1 ; \ CAN2_F13R1_FB7, Filter bits
    : CAN2_F13R1_FB8 ( -- x addr ) 8 bit CAN2_F13R1 ; \ CAN2_F13R1_FB8, Filter bits
    : CAN2_F13R1_FB9 ( -- x addr ) 9 bit CAN2_F13R1 ; \ CAN2_F13R1_FB9, Filter bits
    : CAN2_F13R1_FB10 ( -- x addr ) 10 bit CAN2_F13R1 ; \ CAN2_F13R1_FB10, Filter bits
    : CAN2_F13R1_FB11 ( -- x addr ) 11 bit CAN2_F13R1 ; \ CAN2_F13R1_FB11, Filter bits
    : CAN2_F13R1_FB12 ( -- x addr ) 12 bit CAN2_F13R1 ; \ CAN2_F13R1_FB12, Filter bits
    : CAN2_F13R1_FB13 ( -- x addr ) 13 bit CAN2_F13R1 ; \ CAN2_F13R1_FB13, Filter bits
    : CAN2_F13R1_FB14 ( -- x addr ) 14 bit CAN2_F13R1 ; \ CAN2_F13R1_FB14, Filter bits
    : CAN2_F13R1_FB15 ( -- x addr ) 15 bit CAN2_F13R1 ; \ CAN2_F13R1_FB15, Filter bits
    : CAN2_F13R1_FB16 ( -- x addr ) 16 bit CAN2_F13R1 ; \ CAN2_F13R1_FB16, Filter bits
    : CAN2_F13R1_FB17 ( -- x addr ) 17 bit CAN2_F13R1 ; \ CAN2_F13R1_FB17, Filter bits
    : CAN2_F13R1_FB18 ( -- x addr ) 18 bit CAN2_F13R1 ; \ CAN2_F13R1_FB18, Filter bits
    : CAN2_F13R1_FB19 ( -- x addr ) 19 bit CAN2_F13R1 ; \ CAN2_F13R1_FB19, Filter bits
    : CAN2_F13R1_FB20 ( -- x addr ) 20 bit CAN2_F13R1 ; \ CAN2_F13R1_FB20, Filter bits
    : CAN2_F13R1_FB21 ( -- x addr ) 21 bit CAN2_F13R1 ; \ CAN2_F13R1_FB21, Filter bits
    : CAN2_F13R1_FB22 ( -- x addr ) 22 bit CAN2_F13R1 ; \ CAN2_F13R1_FB22, Filter bits
    : CAN2_F13R1_FB23 ( -- x addr ) 23 bit CAN2_F13R1 ; \ CAN2_F13R1_FB23, Filter bits
    : CAN2_F13R1_FB24 ( -- x addr ) 24 bit CAN2_F13R1 ; \ CAN2_F13R1_FB24, Filter bits
    : CAN2_F13R1_FB25 ( -- x addr ) 25 bit CAN2_F13R1 ; \ CAN2_F13R1_FB25, Filter bits
    : CAN2_F13R1_FB26 ( -- x addr ) 26 bit CAN2_F13R1 ; \ CAN2_F13R1_FB26, Filter bits
    : CAN2_F13R1_FB27 ( -- x addr ) 27 bit CAN2_F13R1 ; \ CAN2_F13R1_FB27, Filter bits
    : CAN2_F13R1_FB28 ( -- x addr ) 28 bit CAN2_F13R1 ; \ CAN2_F13R1_FB28, Filter bits
    : CAN2_F13R1_FB29 ( -- x addr ) 29 bit CAN2_F13R1 ; \ CAN2_F13R1_FB29, Filter bits
    : CAN2_F13R1_FB30 ( -- x addr ) 30 bit CAN2_F13R1 ; \ CAN2_F13R1_FB30, Filter bits
    : CAN2_F13R1_FB31 ( -- x addr ) 31 bit CAN2_F13R1 ; \ CAN2_F13R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F13R2 (read-write) Reset:0x00000000
    : CAN2_F13R2_FB0 ( -- x addr ) 0 bit CAN2_F13R2 ; \ CAN2_F13R2_FB0, Filter bits
    : CAN2_F13R2_FB1 ( -- x addr ) 1 bit CAN2_F13R2 ; \ CAN2_F13R2_FB1, Filter bits
    : CAN2_F13R2_FB2 ( -- x addr ) 2 bit CAN2_F13R2 ; \ CAN2_F13R2_FB2, Filter bits
    : CAN2_F13R2_FB3 ( -- x addr ) 3 bit CAN2_F13R2 ; \ CAN2_F13R2_FB3, Filter bits
    : CAN2_F13R2_FB4 ( -- x addr ) 4 bit CAN2_F13R2 ; \ CAN2_F13R2_FB4, Filter bits
    : CAN2_F13R2_FB5 ( -- x addr ) 5 bit CAN2_F13R2 ; \ CAN2_F13R2_FB5, Filter bits
    : CAN2_F13R2_FB6 ( -- x addr ) 6 bit CAN2_F13R2 ; \ CAN2_F13R2_FB6, Filter bits
    : CAN2_F13R2_FB7 ( -- x addr ) 7 bit CAN2_F13R2 ; \ CAN2_F13R2_FB7, Filter bits
    : CAN2_F13R2_FB8 ( -- x addr ) 8 bit CAN2_F13R2 ; \ CAN2_F13R2_FB8, Filter bits
    : CAN2_F13R2_FB9 ( -- x addr ) 9 bit CAN2_F13R2 ; \ CAN2_F13R2_FB9, Filter bits
    : CAN2_F13R2_FB10 ( -- x addr ) 10 bit CAN2_F13R2 ; \ CAN2_F13R2_FB10, Filter bits
    : CAN2_F13R2_FB11 ( -- x addr ) 11 bit CAN2_F13R2 ; \ CAN2_F13R2_FB11, Filter bits
    : CAN2_F13R2_FB12 ( -- x addr ) 12 bit CAN2_F13R2 ; \ CAN2_F13R2_FB12, Filter bits
    : CAN2_F13R2_FB13 ( -- x addr ) 13 bit CAN2_F13R2 ; \ CAN2_F13R2_FB13, Filter bits
    : CAN2_F13R2_FB14 ( -- x addr ) 14 bit CAN2_F13R2 ; \ CAN2_F13R2_FB14, Filter bits
    : CAN2_F13R2_FB15 ( -- x addr ) 15 bit CAN2_F13R2 ; \ CAN2_F13R2_FB15, Filter bits
    : CAN2_F13R2_FB16 ( -- x addr ) 16 bit CAN2_F13R2 ; \ CAN2_F13R2_FB16, Filter bits
    : CAN2_F13R2_FB17 ( -- x addr ) 17 bit CAN2_F13R2 ; \ CAN2_F13R2_FB17, Filter bits
    : CAN2_F13R2_FB18 ( -- x addr ) 18 bit CAN2_F13R2 ; \ CAN2_F13R2_FB18, Filter bits
    : CAN2_F13R2_FB19 ( -- x addr ) 19 bit CAN2_F13R2 ; \ CAN2_F13R2_FB19, Filter bits
    : CAN2_F13R2_FB20 ( -- x addr ) 20 bit CAN2_F13R2 ; \ CAN2_F13R2_FB20, Filter bits
    : CAN2_F13R2_FB21 ( -- x addr ) 21 bit CAN2_F13R2 ; \ CAN2_F13R2_FB21, Filter bits
    : CAN2_F13R2_FB22 ( -- x addr ) 22 bit CAN2_F13R2 ; \ CAN2_F13R2_FB22, Filter bits
    : CAN2_F13R2_FB23 ( -- x addr ) 23 bit CAN2_F13R2 ; \ CAN2_F13R2_FB23, Filter bits
    : CAN2_F13R2_FB24 ( -- x addr ) 24 bit CAN2_F13R2 ; \ CAN2_F13R2_FB24, Filter bits
    : CAN2_F13R2_FB25 ( -- x addr ) 25 bit CAN2_F13R2 ; \ CAN2_F13R2_FB25, Filter bits
    : CAN2_F13R2_FB26 ( -- x addr ) 26 bit CAN2_F13R2 ; \ CAN2_F13R2_FB26, Filter bits
    : CAN2_F13R2_FB27 ( -- x addr ) 27 bit CAN2_F13R2 ; \ CAN2_F13R2_FB27, Filter bits
    : CAN2_F13R2_FB28 ( -- x addr ) 28 bit CAN2_F13R2 ; \ CAN2_F13R2_FB28, Filter bits
    : CAN2_F13R2_FB29 ( -- x addr ) 29 bit CAN2_F13R2 ; \ CAN2_F13R2_FB29, Filter bits
    : CAN2_F13R2_FB30 ( -- x addr ) 30 bit CAN2_F13R2 ; \ CAN2_F13R2_FB30, Filter bits
    : CAN2_F13R2_FB31 ( -- x addr ) 31 bit CAN2_F13R2 ; \ CAN2_F13R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F14R1 (read-write) Reset:0x00000000
    : CAN2_F14R1_FB0 ( -- x addr ) 0 bit CAN2_F14R1 ; \ CAN2_F14R1_FB0, Filter bits
    : CAN2_F14R1_FB1 ( -- x addr ) 1 bit CAN2_F14R1 ; \ CAN2_F14R1_FB1, Filter bits
    : CAN2_F14R1_FB2 ( -- x addr ) 2 bit CAN2_F14R1 ; \ CAN2_F14R1_FB2, Filter bits
    : CAN2_F14R1_FB3 ( -- x addr ) 3 bit CAN2_F14R1 ; \ CAN2_F14R1_FB3, Filter bits
    : CAN2_F14R1_FB4 ( -- x addr ) 4 bit CAN2_F14R1 ; \ CAN2_F14R1_FB4, Filter bits
    : CAN2_F14R1_FB5 ( -- x addr ) 5 bit CAN2_F14R1 ; \ CAN2_F14R1_FB5, Filter bits
    : CAN2_F14R1_FB6 ( -- x addr ) 6 bit CAN2_F14R1 ; \ CAN2_F14R1_FB6, Filter bits
    : CAN2_F14R1_FB7 ( -- x addr ) 7 bit CAN2_F14R1 ; \ CAN2_F14R1_FB7, Filter bits
    : CAN2_F14R1_FB8 ( -- x addr ) 8 bit CAN2_F14R1 ; \ CAN2_F14R1_FB8, Filter bits
    : CAN2_F14R1_FB9 ( -- x addr ) 9 bit CAN2_F14R1 ; \ CAN2_F14R1_FB9, Filter bits
    : CAN2_F14R1_FB10 ( -- x addr ) 10 bit CAN2_F14R1 ; \ CAN2_F14R1_FB10, Filter bits
    : CAN2_F14R1_FB11 ( -- x addr ) 11 bit CAN2_F14R1 ; \ CAN2_F14R1_FB11, Filter bits
    : CAN2_F14R1_FB12 ( -- x addr ) 12 bit CAN2_F14R1 ; \ CAN2_F14R1_FB12, Filter bits
    : CAN2_F14R1_FB13 ( -- x addr ) 13 bit CAN2_F14R1 ; \ CAN2_F14R1_FB13, Filter bits
    : CAN2_F14R1_FB14 ( -- x addr ) 14 bit CAN2_F14R1 ; \ CAN2_F14R1_FB14, Filter bits
    : CAN2_F14R1_FB15 ( -- x addr ) 15 bit CAN2_F14R1 ; \ CAN2_F14R1_FB15, Filter bits
    : CAN2_F14R1_FB16 ( -- x addr ) 16 bit CAN2_F14R1 ; \ CAN2_F14R1_FB16, Filter bits
    : CAN2_F14R1_FB17 ( -- x addr ) 17 bit CAN2_F14R1 ; \ CAN2_F14R1_FB17, Filter bits
    : CAN2_F14R1_FB18 ( -- x addr ) 18 bit CAN2_F14R1 ; \ CAN2_F14R1_FB18, Filter bits
    : CAN2_F14R1_FB19 ( -- x addr ) 19 bit CAN2_F14R1 ; \ CAN2_F14R1_FB19, Filter bits
    : CAN2_F14R1_FB20 ( -- x addr ) 20 bit CAN2_F14R1 ; \ CAN2_F14R1_FB20, Filter bits
    : CAN2_F14R1_FB21 ( -- x addr ) 21 bit CAN2_F14R1 ; \ CAN2_F14R1_FB21, Filter bits
    : CAN2_F14R1_FB22 ( -- x addr ) 22 bit CAN2_F14R1 ; \ CAN2_F14R1_FB22, Filter bits
    : CAN2_F14R1_FB23 ( -- x addr ) 23 bit CAN2_F14R1 ; \ CAN2_F14R1_FB23, Filter bits
    : CAN2_F14R1_FB24 ( -- x addr ) 24 bit CAN2_F14R1 ; \ CAN2_F14R1_FB24, Filter bits
    : CAN2_F14R1_FB25 ( -- x addr ) 25 bit CAN2_F14R1 ; \ CAN2_F14R1_FB25, Filter bits
    : CAN2_F14R1_FB26 ( -- x addr ) 26 bit CAN2_F14R1 ; \ CAN2_F14R1_FB26, Filter bits
    : CAN2_F14R1_FB27 ( -- x addr ) 27 bit CAN2_F14R1 ; \ CAN2_F14R1_FB27, Filter bits
    : CAN2_F14R1_FB28 ( -- x addr ) 28 bit CAN2_F14R1 ; \ CAN2_F14R1_FB28, Filter bits
    : CAN2_F14R1_FB29 ( -- x addr ) 29 bit CAN2_F14R1 ; \ CAN2_F14R1_FB29, Filter bits
    : CAN2_F14R1_FB30 ( -- x addr ) 30 bit CAN2_F14R1 ; \ CAN2_F14R1_FB30, Filter bits
    : CAN2_F14R1_FB31 ( -- x addr ) 31 bit CAN2_F14R1 ; \ CAN2_F14R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F14R2 (read-write) Reset:0x00000000
    : CAN2_F14R2_FB0 ( -- x addr ) 0 bit CAN2_F14R2 ; \ CAN2_F14R2_FB0, Filter bits
    : CAN2_F14R2_FB1 ( -- x addr ) 1 bit CAN2_F14R2 ; \ CAN2_F14R2_FB1, Filter bits
    : CAN2_F14R2_FB2 ( -- x addr ) 2 bit CAN2_F14R2 ; \ CAN2_F14R2_FB2, Filter bits
    : CAN2_F14R2_FB3 ( -- x addr ) 3 bit CAN2_F14R2 ; \ CAN2_F14R2_FB3, Filter bits
    : CAN2_F14R2_FB4 ( -- x addr ) 4 bit CAN2_F14R2 ; \ CAN2_F14R2_FB4, Filter bits
    : CAN2_F14R2_FB5 ( -- x addr ) 5 bit CAN2_F14R2 ; \ CAN2_F14R2_FB5, Filter bits
    : CAN2_F14R2_FB6 ( -- x addr ) 6 bit CAN2_F14R2 ; \ CAN2_F14R2_FB6, Filter bits
    : CAN2_F14R2_FB7 ( -- x addr ) 7 bit CAN2_F14R2 ; \ CAN2_F14R2_FB7, Filter bits
    : CAN2_F14R2_FB8 ( -- x addr ) 8 bit CAN2_F14R2 ; \ CAN2_F14R2_FB8, Filter bits
    : CAN2_F14R2_FB9 ( -- x addr ) 9 bit CAN2_F14R2 ; \ CAN2_F14R2_FB9, Filter bits
    : CAN2_F14R2_FB10 ( -- x addr ) 10 bit CAN2_F14R2 ; \ CAN2_F14R2_FB10, Filter bits
    : CAN2_F14R2_FB11 ( -- x addr ) 11 bit CAN2_F14R2 ; \ CAN2_F14R2_FB11, Filter bits
    : CAN2_F14R2_FB12 ( -- x addr ) 12 bit CAN2_F14R2 ; \ CAN2_F14R2_FB12, Filter bits
    : CAN2_F14R2_FB13 ( -- x addr ) 13 bit CAN2_F14R2 ; \ CAN2_F14R2_FB13, Filter bits
    : CAN2_F14R2_FB14 ( -- x addr ) 14 bit CAN2_F14R2 ; \ CAN2_F14R2_FB14, Filter bits
    : CAN2_F14R2_FB15 ( -- x addr ) 15 bit CAN2_F14R2 ; \ CAN2_F14R2_FB15, Filter bits
    : CAN2_F14R2_FB16 ( -- x addr ) 16 bit CAN2_F14R2 ; \ CAN2_F14R2_FB16, Filter bits
    : CAN2_F14R2_FB17 ( -- x addr ) 17 bit CAN2_F14R2 ; \ CAN2_F14R2_FB17, Filter bits
    : CAN2_F14R2_FB18 ( -- x addr ) 18 bit CAN2_F14R2 ; \ CAN2_F14R2_FB18, Filter bits
    : CAN2_F14R2_FB19 ( -- x addr ) 19 bit CAN2_F14R2 ; \ CAN2_F14R2_FB19, Filter bits
    : CAN2_F14R2_FB20 ( -- x addr ) 20 bit CAN2_F14R2 ; \ CAN2_F14R2_FB20, Filter bits
    : CAN2_F14R2_FB21 ( -- x addr ) 21 bit CAN2_F14R2 ; \ CAN2_F14R2_FB21, Filter bits
    : CAN2_F14R2_FB22 ( -- x addr ) 22 bit CAN2_F14R2 ; \ CAN2_F14R2_FB22, Filter bits
    : CAN2_F14R2_FB23 ( -- x addr ) 23 bit CAN2_F14R2 ; \ CAN2_F14R2_FB23, Filter bits
    : CAN2_F14R2_FB24 ( -- x addr ) 24 bit CAN2_F14R2 ; \ CAN2_F14R2_FB24, Filter bits
    : CAN2_F14R2_FB25 ( -- x addr ) 25 bit CAN2_F14R2 ; \ CAN2_F14R2_FB25, Filter bits
    : CAN2_F14R2_FB26 ( -- x addr ) 26 bit CAN2_F14R2 ; \ CAN2_F14R2_FB26, Filter bits
    : CAN2_F14R2_FB27 ( -- x addr ) 27 bit CAN2_F14R2 ; \ CAN2_F14R2_FB27, Filter bits
    : CAN2_F14R2_FB28 ( -- x addr ) 28 bit CAN2_F14R2 ; \ CAN2_F14R2_FB28, Filter bits
    : CAN2_F14R2_FB29 ( -- x addr ) 29 bit CAN2_F14R2 ; \ CAN2_F14R2_FB29, Filter bits
    : CAN2_F14R2_FB30 ( -- x addr ) 30 bit CAN2_F14R2 ; \ CAN2_F14R2_FB30, Filter bits
    : CAN2_F14R2_FB31 ( -- x addr ) 31 bit CAN2_F14R2 ; \ CAN2_F14R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F15R1 (read-write) Reset:0x00000000
    : CAN2_F15R1_FB0 ( -- x addr ) 0 bit CAN2_F15R1 ; \ CAN2_F15R1_FB0, Filter bits
    : CAN2_F15R1_FB1 ( -- x addr ) 1 bit CAN2_F15R1 ; \ CAN2_F15R1_FB1, Filter bits
    : CAN2_F15R1_FB2 ( -- x addr ) 2 bit CAN2_F15R1 ; \ CAN2_F15R1_FB2, Filter bits
    : CAN2_F15R1_FB3 ( -- x addr ) 3 bit CAN2_F15R1 ; \ CAN2_F15R1_FB3, Filter bits
    : CAN2_F15R1_FB4 ( -- x addr ) 4 bit CAN2_F15R1 ; \ CAN2_F15R1_FB4, Filter bits
    : CAN2_F15R1_FB5 ( -- x addr ) 5 bit CAN2_F15R1 ; \ CAN2_F15R1_FB5, Filter bits
    : CAN2_F15R1_FB6 ( -- x addr ) 6 bit CAN2_F15R1 ; \ CAN2_F15R1_FB6, Filter bits
    : CAN2_F15R1_FB7 ( -- x addr ) 7 bit CAN2_F15R1 ; \ CAN2_F15R1_FB7, Filter bits
    : CAN2_F15R1_FB8 ( -- x addr ) 8 bit CAN2_F15R1 ; \ CAN2_F15R1_FB8, Filter bits
    : CAN2_F15R1_FB9 ( -- x addr ) 9 bit CAN2_F15R1 ; \ CAN2_F15R1_FB9, Filter bits
    : CAN2_F15R1_FB10 ( -- x addr ) 10 bit CAN2_F15R1 ; \ CAN2_F15R1_FB10, Filter bits
    : CAN2_F15R1_FB11 ( -- x addr ) 11 bit CAN2_F15R1 ; \ CAN2_F15R1_FB11, Filter bits
    : CAN2_F15R1_FB12 ( -- x addr ) 12 bit CAN2_F15R1 ; \ CAN2_F15R1_FB12, Filter bits
    : CAN2_F15R1_FB13 ( -- x addr ) 13 bit CAN2_F15R1 ; \ CAN2_F15R1_FB13, Filter bits
    : CAN2_F15R1_FB14 ( -- x addr ) 14 bit CAN2_F15R1 ; \ CAN2_F15R1_FB14, Filter bits
    : CAN2_F15R1_FB15 ( -- x addr ) 15 bit CAN2_F15R1 ; \ CAN2_F15R1_FB15, Filter bits
    : CAN2_F15R1_FB16 ( -- x addr ) 16 bit CAN2_F15R1 ; \ CAN2_F15R1_FB16, Filter bits
    : CAN2_F15R1_FB17 ( -- x addr ) 17 bit CAN2_F15R1 ; \ CAN2_F15R1_FB17, Filter bits
    : CAN2_F15R1_FB18 ( -- x addr ) 18 bit CAN2_F15R1 ; \ CAN2_F15R1_FB18, Filter bits
    : CAN2_F15R1_FB19 ( -- x addr ) 19 bit CAN2_F15R1 ; \ CAN2_F15R1_FB19, Filter bits
    : CAN2_F15R1_FB20 ( -- x addr ) 20 bit CAN2_F15R1 ; \ CAN2_F15R1_FB20, Filter bits
    : CAN2_F15R1_FB21 ( -- x addr ) 21 bit CAN2_F15R1 ; \ CAN2_F15R1_FB21, Filter bits
    : CAN2_F15R1_FB22 ( -- x addr ) 22 bit CAN2_F15R1 ; \ CAN2_F15R1_FB22, Filter bits
    : CAN2_F15R1_FB23 ( -- x addr ) 23 bit CAN2_F15R1 ; \ CAN2_F15R1_FB23, Filter bits
    : CAN2_F15R1_FB24 ( -- x addr ) 24 bit CAN2_F15R1 ; \ CAN2_F15R1_FB24, Filter bits
    : CAN2_F15R1_FB25 ( -- x addr ) 25 bit CAN2_F15R1 ; \ CAN2_F15R1_FB25, Filter bits
    : CAN2_F15R1_FB26 ( -- x addr ) 26 bit CAN2_F15R1 ; \ CAN2_F15R1_FB26, Filter bits
    : CAN2_F15R1_FB27 ( -- x addr ) 27 bit CAN2_F15R1 ; \ CAN2_F15R1_FB27, Filter bits
    : CAN2_F15R1_FB28 ( -- x addr ) 28 bit CAN2_F15R1 ; \ CAN2_F15R1_FB28, Filter bits
    : CAN2_F15R1_FB29 ( -- x addr ) 29 bit CAN2_F15R1 ; \ CAN2_F15R1_FB29, Filter bits
    : CAN2_F15R1_FB30 ( -- x addr ) 30 bit CAN2_F15R1 ; \ CAN2_F15R1_FB30, Filter bits
    : CAN2_F15R1_FB31 ( -- x addr ) 31 bit CAN2_F15R1 ; \ CAN2_F15R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F15R2 (read-write) Reset:0x00000000
    : CAN2_F15R2_FB0 ( -- x addr ) 0 bit CAN2_F15R2 ; \ CAN2_F15R2_FB0, Filter bits
    : CAN2_F15R2_FB1 ( -- x addr ) 1 bit CAN2_F15R2 ; \ CAN2_F15R2_FB1, Filter bits
    : CAN2_F15R2_FB2 ( -- x addr ) 2 bit CAN2_F15R2 ; \ CAN2_F15R2_FB2, Filter bits
    : CAN2_F15R2_FB3 ( -- x addr ) 3 bit CAN2_F15R2 ; \ CAN2_F15R2_FB3, Filter bits
    : CAN2_F15R2_FB4 ( -- x addr ) 4 bit CAN2_F15R2 ; \ CAN2_F15R2_FB4, Filter bits
    : CAN2_F15R2_FB5 ( -- x addr ) 5 bit CAN2_F15R2 ; \ CAN2_F15R2_FB5, Filter bits
    : CAN2_F15R2_FB6 ( -- x addr ) 6 bit CAN2_F15R2 ; \ CAN2_F15R2_FB6, Filter bits
    : CAN2_F15R2_FB7 ( -- x addr ) 7 bit CAN2_F15R2 ; \ CAN2_F15R2_FB7, Filter bits
    : CAN2_F15R2_FB8 ( -- x addr ) 8 bit CAN2_F15R2 ; \ CAN2_F15R2_FB8, Filter bits
    : CAN2_F15R2_FB9 ( -- x addr ) 9 bit CAN2_F15R2 ; \ CAN2_F15R2_FB9, Filter bits
    : CAN2_F15R2_FB10 ( -- x addr ) 10 bit CAN2_F15R2 ; \ CAN2_F15R2_FB10, Filter bits
    : CAN2_F15R2_FB11 ( -- x addr ) 11 bit CAN2_F15R2 ; \ CAN2_F15R2_FB11, Filter bits
    : CAN2_F15R2_FB12 ( -- x addr ) 12 bit CAN2_F15R2 ; \ CAN2_F15R2_FB12, Filter bits
    : CAN2_F15R2_FB13 ( -- x addr ) 13 bit CAN2_F15R2 ; \ CAN2_F15R2_FB13, Filter bits
    : CAN2_F15R2_FB14 ( -- x addr ) 14 bit CAN2_F15R2 ; \ CAN2_F15R2_FB14, Filter bits
    : CAN2_F15R2_FB15 ( -- x addr ) 15 bit CAN2_F15R2 ; \ CAN2_F15R2_FB15, Filter bits
    : CAN2_F15R2_FB16 ( -- x addr ) 16 bit CAN2_F15R2 ; \ CAN2_F15R2_FB16, Filter bits
    : CAN2_F15R2_FB17 ( -- x addr ) 17 bit CAN2_F15R2 ; \ CAN2_F15R2_FB17, Filter bits
    : CAN2_F15R2_FB18 ( -- x addr ) 18 bit CAN2_F15R2 ; \ CAN2_F15R2_FB18, Filter bits
    : CAN2_F15R2_FB19 ( -- x addr ) 19 bit CAN2_F15R2 ; \ CAN2_F15R2_FB19, Filter bits
    : CAN2_F15R2_FB20 ( -- x addr ) 20 bit CAN2_F15R2 ; \ CAN2_F15R2_FB20, Filter bits
    : CAN2_F15R2_FB21 ( -- x addr ) 21 bit CAN2_F15R2 ; \ CAN2_F15R2_FB21, Filter bits
    : CAN2_F15R2_FB22 ( -- x addr ) 22 bit CAN2_F15R2 ; \ CAN2_F15R2_FB22, Filter bits
    : CAN2_F15R2_FB23 ( -- x addr ) 23 bit CAN2_F15R2 ; \ CAN2_F15R2_FB23, Filter bits
    : CAN2_F15R2_FB24 ( -- x addr ) 24 bit CAN2_F15R2 ; \ CAN2_F15R2_FB24, Filter bits
    : CAN2_F15R2_FB25 ( -- x addr ) 25 bit CAN2_F15R2 ; \ CAN2_F15R2_FB25, Filter bits
    : CAN2_F15R2_FB26 ( -- x addr ) 26 bit CAN2_F15R2 ; \ CAN2_F15R2_FB26, Filter bits
    : CAN2_F15R2_FB27 ( -- x addr ) 27 bit CAN2_F15R2 ; \ CAN2_F15R2_FB27, Filter bits
    : CAN2_F15R2_FB28 ( -- x addr ) 28 bit CAN2_F15R2 ; \ CAN2_F15R2_FB28, Filter bits
    : CAN2_F15R2_FB29 ( -- x addr ) 29 bit CAN2_F15R2 ; \ CAN2_F15R2_FB29, Filter bits
    : CAN2_F15R2_FB30 ( -- x addr ) 30 bit CAN2_F15R2 ; \ CAN2_F15R2_FB30, Filter bits
    : CAN2_F15R2_FB31 ( -- x addr ) 31 bit CAN2_F15R2 ; \ CAN2_F15R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F16R1 (read-write) Reset:0x00000000
    : CAN2_F16R1_FB0 ( -- x addr ) 0 bit CAN2_F16R1 ; \ CAN2_F16R1_FB0, Filter bits
    : CAN2_F16R1_FB1 ( -- x addr ) 1 bit CAN2_F16R1 ; \ CAN2_F16R1_FB1, Filter bits
    : CAN2_F16R1_FB2 ( -- x addr ) 2 bit CAN2_F16R1 ; \ CAN2_F16R1_FB2, Filter bits
    : CAN2_F16R1_FB3 ( -- x addr ) 3 bit CAN2_F16R1 ; \ CAN2_F16R1_FB3, Filter bits
    : CAN2_F16R1_FB4 ( -- x addr ) 4 bit CAN2_F16R1 ; \ CAN2_F16R1_FB4, Filter bits
    : CAN2_F16R1_FB5 ( -- x addr ) 5 bit CAN2_F16R1 ; \ CAN2_F16R1_FB5, Filter bits
    : CAN2_F16R1_FB6 ( -- x addr ) 6 bit CAN2_F16R1 ; \ CAN2_F16R1_FB6, Filter bits
    : CAN2_F16R1_FB7 ( -- x addr ) 7 bit CAN2_F16R1 ; \ CAN2_F16R1_FB7, Filter bits
    : CAN2_F16R1_FB8 ( -- x addr ) 8 bit CAN2_F16R1 ; \ CAN2_F16R1_FB8, Filter bits
    : CAN2_F16R1_FB9 ( -- x addr ) 9 bit CAN2_F16R1 ; \ CAN2_F16R1_FB9, Filter bits
    : CAN2_F16R1_FB10 ( -- x addr ) 10 bit CAN2_F16R1 ; \ CAN2_F16R1_FB10, Filter bits
    : CAN2_F16R1_FB11 ( -- x addr ) 11 bit CAN2_F16R1 ; \ CAN2_F16R1_FB11, Filter bits
    : CAN2_F16R1_FB12 ( -- x addr ) 12 bit CAN2_F16R1 ; \ CAN2_F16R1_FB12, Filter bits
    : CAN2_F16R1_FB13 ( -- x addr ) 13 bit CAN2_F16R1 ; \ CAN2_F16R1_FB13, Filter bits
    : CAN2_F16R1_FB14 ( -- x addr ) 14 bit CAN2_F16R1 ; \ CAN2_F16R1_FB14, Filter bits
    : CAN2_F16R1_FB15 ( -- x addr ) 15 bit CAN2_F16R1 ; \ CAN2_F16R1_FB15, Filter bits
    : CAN2_F16R1_FB16 ( -- x addr ) 16 bit CAN2_F16R1 ; \ CAN2_F16R1_FB16, Filter bits
    : CAN2_F16R1_FB17 ( -- x addr ) 17 bit CAN2_F16R1 ; \ CAN2_F16R1_FB17, Filter bits
    : CAN2_F16R1_FB18 ( -- x addr ) 18 bit CAN2_F16R1 ; \ CAN2_F16R1_FB18, Filter bits
    : CAN2_F16R1_FB19 ( -- x addr ) 19 bit CAN2_F16R1 ; \ CAN2_F16R1_FB19, Filter bits
    : CAN2_F16R1_FB20 ( -- x addr ) 20 bit CAN2_F16R1 ; \ CAN2_F16R1_FB20, Filter bits
    : CAN2_F16R1_FB21 ( -- x addr ) 21 bit CAN2_F16R1 ; \ CAN2_F16R1_FB21, Filter bits
    : CAN2_F16R1_FB22 ( -- x addr ) 22 bit CAN2_F16R1 ; \ CAN2_F16R1_FB22, Filter bits
    : CAN2_F16R1_FB23 ( -- x addr ) 23 bit CAN2_F16R1 ; \ CAN2_F16R1_FB23, Filter bits
    : CAN2_F16R1_FB24 ( -- x addr ) 24 bit CAN2_F16R1 ; \ CAN2_F16R1_FB24, Filter bits
    : CAN2_F16R1_FB25 ( -- x addr ) 25 bit CAN2_F16R1 ; \ CAN2_F16R1_FB25, Filter bits
    : CAN2_F16R1_FB26 ( -- x addr ) 26 bit CAN2_F16R1 ; \ CAN2_F16R1_FB26, Filter bits
    : CAN2_F16R1_FB27 ( -- x addr ) 27 bit CAN2_F16R1 ; \ CAN2_F16R1_FB27, Filter bits
    : CAN2_F16R1_FB28 ( -- x addr ) 28 bit CAN2_F16R1 ; \ CAN2_F16R1_FB28, Filter bits
    : CAN2_F16R1_FB29 ( -- x addr ) 29 bit CAN2_F16R1 ; \ CAN2_F16R1_FB29, Filter bits
    : CAN2_F16R1_FB30 ( -- x addr ) 30 bit CAN2_F16R1 ; \ CAN2_F16R1_FB30, Filter bits
    : CAN2_F16R1_FB31 ( -- x addr ) 31 bit CAN2_F16R1 ; \ CAN2_F16R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F16R2 (read-write) Reset:0x00000000
    : CAN2_F16R2_FB0 ( -- x addr ) 0 bit CAN2_F16R2 ; \ CAN2_F16R2_FB0, Filter bits
    : CAN2_F16R2_FB1 ( -- x addr ) 1 bit CAN2_F16R2 ; \ CAN2_F16R2_FB1, Filter bits
    : CAN2_F16R2_FB2 ( -- x addr ) 2 bit CAN2_F16R2 ; \ CAN2_F16R2_FB2, Filter bits
    : CAN2_F16R2_FB3 ( -- x addr ) 3 bit CAN2_F16R2 ; \ CAN2_F16R2_FB3, Filter bits
    : CAN2_F16R2_FB4 ( -- x addr ) 4 bit CAN2_F16R2 ; \ CAN2_F16R2_FB4, Filter bits
    : CAN2_F16R2_FB5 ( -- x addr ) 5 bit CAN2_F16R2 ; \ CAN2_F16R2_FB5, Filter bits
    : CAN2_F16R2_FB6 ( -- x addr ) 6 bit CAN2_F16R2 ; \ CAN2_F16R2_FB6, Filter bits
    : CAN2_F16R2_FB7 ( -- x addr ) 7 bit CAN2_F16R2 ; \ CAN2_F16R2_FB7, Filter bits
    : CAN2_F16R2_FB8 ( -- x addr ) 8 bit CAN2_F16R2 ; \ CAN2_F16R2_FB8, Filter bits
    : CAN2_F16R2_FB9 ( -- x addr ) 9 bit CAN2_F16R2 ; \ CAN2_F16R2_FB9, Filter bits
    : CAN2_F16R2_FB10 ( -- x addr ) 10 bit CAN2_F16R2 ; \ CAN2_F16R2_FB10, Filter bits
    : CAN2_F16R2_FB11 ( -- x addr ) 11 bit CAN2_F16R2 ; \ CAN2_F16R2_FB11, Filter bits
    : CAN2_F16R2_FB12 ( -- x addr ) 12 bit CAN2_F16R2 ; \ CAN2_F16R2_FB12, Filter bits
    : CAN2_F16R2_FB13 ( -- x addr ) 13 bit CAN2_F16R2 ; \ CAN2_F16R2_FB13, Filter bits
    : CAN2_F16R2_FB14 ( -- x addr ) 14 bit CAN2_F16R2 ; \ CAN2_F16R2_FB14, Filter bits
    : CAN2_F16R2_FB15 ( -- x addr ) 15 bit CAN2_F16R2 ; \ CAN2_F16R2_FB15, Filter bits
    : CAN2_F16R2_FB16 ( -- x addr ) 16 bit CAN2_F16R2 ; \ CAN2_F16R2_FB16, Filter bits
    : CAN2_F16R2_FB17 ( -- x addr ) 17 bit CAN2_F16R2 ; \ CAN2_F16R2_FB17, Filter bits
    : CAN2_F16R2_FB18 ( -- x addr ) 18 bit CAN2_F16R2 ; \ CAN2_F16R2_FB18, Filter bits
    : CAN2_F16R2_FB19 ( -- x addr ) 19 bit CAN2_F16R2 ; \ CAN2_F16R2_FB19, Filter bits
    : CAN2_F16R2_FB20 ( -- x addr ) 20 bit CAN2_F16R2 ; \ CAN2_F16R2_FB20, Filter bits
    : CAN2_F16R2_FB21 ( -- x addr ) 21 bit CAN2_F16R2 ; \ CAN2_F16R2_FB21, Filter bits
    : CAN2_F16R2_FB22 ( -- x addr ) 22 bit CAN2_F16R2 ; \ CAN2_F16R2_FB22, Filter bits
    : CAN2_F16R2_FB23 ( -- x addr ) 23 bit CAN2_F16R2 ; \ CAN2_F16R2_FB23, Filter bits
    : CAN2_F16R2_FB24 ( -- x addr ) 24 bit CAN2_F16R2 ; \ CAN2_F16R2_FB24, Filter bits
    : CAN2_F16R2_FB25 ( -- x addr ) 25 bit CAN2_F16R2 ; \ CAN2_F16R2_FB25, Filter bits
    : CAN2_F16R2_FB26 ( -- x addr ) 26 bit CAN2_F16R2 ; \ CAN2_F16R2_FB26, Filter bits
    : CAN2_F16R2_FB27 ( -- x addr ) 27 bit CAN2_F16R2 ; \ CAN2_F16R2_FB27, Filter bits
    : CAN2_F16R2_FB28 ( -- x addr ) 28 bit CAN2_F16R2 ; \ CAN2_F16R2_FB28, Filter bits
    : CAN2_F16R2_FB29 ( -- x addr ) 29 bit CAN2_F16R2 ; \ CAN2_F16R2_FB29, Filter bits
    : CAN2_F16R2_FB30 ( -- x addr ) 30 bit CAN2_F16R2 ; \ CAN2_F16R2_FB30, Filter bits
    : CAN2_F16R2_FB31 ( -- x addr ) 31 bit CAN2_F16R2 ; \ CAN2_F16R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F17R1 (read-write) Reset:0x00000000
    : CAN2_F17R1_FB0 ( -- x addr ) 0 bit CAN2_F17R1 ; \ CAN2_F17R1_FB0, Filter bits
    : CAN2_F17R1_FB1 ( -- x addr ) 1 bit CAN2_F17R1 ; \ CAN2_F17R1_FB1, Filter bits
    : CAN2_F17R1_FB2 ( -- x addr ) 2 bit CAN2_F17R1 ; \ CAN2_F17R1_FB2, Filter bits
    : CAN2_F17R1_FB3 ( -- x addr ) 3 bit CAN2_F17R1 ; \ CAN2_F17R1_FB3, Filter bits
    : CAN2_F17R1_FB4 ( -- x addr ) 4 bit CAN2_F17R1 ; \ CAN2_F17R1_FB4, Filter bits
    : CAN2_F17R1_FB5 ( -- x addr ) 5 bit CAN2_F17R1 ; \ CAN2_F17R1_FB5, Filter bits
    : CAN2_F17R1_FB6 ( -- x addr ) 6 bit CAN2_F17R1 ; \ CAN2_F17R1_FB6, Filter bits
    : CAN2_F17R1_FB7 ( -- x addr ) 7 bit CAN2_F17R1 ; \ CAN2_F17R1_FB7, Filter bits
    : CAN2_F17R1_FB8 ( -- x addr ) 8 bit CAN2_F17R1 ; \ CAN2_F17R1_FB8, Filter bits
    : CAN2_F17R1_FB9 ( -- x addr ) 9 bit CAN2_F17R1 ; \ CAN2_F17R1_FB9, Filter bits
    : CAN2_F17R1_FB10 ( -- x addr ) 10 bit CAN2_F17R1 ; \ CAN2_F17R1_FB10, Filter bits
    : CAN2_F17R1_FB11 ( -- x addr ) 11 bit CAN2_F17R1 ; \ CAN2_F17R1_FB11, Filter bits
    : CAN2_F17R1_FB12 ( -- x addr ) 12 bit CAN2_F17R1 ; \ CAN2_F17R1_FB12, Filter bits
    : CAN2_F17R1_FB13 ( -- x addr ) 13 bit CAN2_F17R1 ; \ CAN2_F17R1_FB13, Filter bits
    : CAN2_F17R1_FB14 ( -- x addr ) 14 bit CAN2_F17R1 ; \ CAN2_F17R1_FB14, Filter bits
    : CAN2_F17R1_FB15 ( -- x addr ) 15 bit CAN2_F17R1 ; \ CAN2_F17R1_FB15, Filter bits
    : CAN2_F17R1_FB16 ( -- x addr ) 16 bit CAN2_F17R1 ; \ CAN2_F17R1_FB16, Filter bits
    : CAN2_F17R1_FB17 ( -- x addr ) 17 bit CAN2_F17R1 ; \ CAN2_F17R1_FB17, Filter bits
    : CAN2_F17R1_FB18 ( -- x addr ) 18 bit CAN2_F17R1 ; \ CAN2_F17R1_FB18, Filter bits
    : CAN2_F17R1_FB19 ( -- x addr ) 19 bit CAN2_F17R1 ; \ CAN2_F17R1_FB19, Filter bits
    : CAN2_F17R1_FB20 ( -- x addr ) 20 bit CAN2_F17R1 ; \ CAN2_F17R1_FB20, Filter bits
    : CAN2_F17R1_FB21 ( -- x addr ) 21 bit CAN2_F17R1 ; \ CAN2_F17R1_FB21, Filter bits
    : CAN2_F17R1_FB22 ( -- x addr ) 22 bit CAN2_F17R1 ; \ CAN2_F17R1_FB22, Filter bits
    : CAN2_F17R1_FB23 ( -- x addr ) 23 bit CAN2_F17R1 ; \ CAN2_F17R1_FB23, Filter bits
    : CAN2_F17R1_FB24 ( -- x addr ) 24 bit CAN2_F17R1 ; \ CAN2_F17R1_FB24, Filter bits
    : CAN2_F17R1_FB25 ( -- x addr ) 25 bit CAN2_F17R1 ; \ CAN2_F17R1_FB25, Filter bits
    : CAN2_F17R1_FB26 ( -- x addr ) 26 bit CAN2_F17R1 ; \ CAN2_F17R1_FB26, Filter bits
    : CAN2_F17R1_FB27 ( -- x addr ) 27 bit CAN2_F17R1 ; \ CAN2_F17R1_FB27, Filter bits
    : CAN2_F17R1_FB28 ( -- x addr ) 28 bit CAN2_F17R1 ; \ CAN2_F17R1_FB28, Filter bits
    : CAN2_F17R1_FB29 ( -- x addr ) 29 bit CAN2_F17R1 ; \ CAN2_F17R1_FB29, Filter bits
    : CAN2_F17R1_FB30 ( -- x addr ) 30 bit CAN2_F17R1 ; \ CAN2_F17R1_FB30, Filter bits
    : CAN2_F17R1_FB31 ( -- x addr ) 31 bit CAN2_F17R1 ; \ CAN2_F17R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F17R2 (read-write) Reset:0x00000000
    : CAN2_F17R2_FB0 ( -- x addr ) 0 bit CAN2_F17R2 ; \ CAN2_F17R2_FB0, Filter bits
    : CAN2_F17R2_FB1 ( -- x addr ) 1 bit CAN2_F17R2 ; \ CAN2_F17R2_FB1, Filter bits
    : CAN2_F17R2_FB2 ( -- x addr ) 2 bit CAN2_F17R2 ; \ CAN2_F17R2_FB2, Filter bits
    : CAN2_F17R2_FB3 ( -- x addr ) 3 bit CAN2_F17R2 ; \ CAN2_F17R2_FB3, Filter bits
    : CAN2_F17R2_FB4 ( -- x addr ) 4 bit CAN2_F17R2 ; \ CAN2_F17R2_FB4, Filter bits
    : CAN2_F17R2_FB5 ( -- x addr ) 5 bit CAN2_F17R2 ; \ CAN2_F17R2_FB5, Filter bits
    : CAN2_F17R2_FB6 ( -- x addr ) 6 bit CAN2_F17R2 ; \ CAN2_F17R2_FB6, Filter bits
    : CAN2_F17R2_FB7 ( -- x addr ) 7 bit CAN2_F17R2 ; \ CAN2_F17R2_FB7, Filter bits
    : CAN2_F17R2_FB8 ( -- x addr ) 8 bit CAN2_F17R2 ; \ CAN2_F17R2_FB8, Filter bits
    : CAN2_F17R2_FB9 ( -- x addr ) 9 bit CAN2_F17R2 ; \ CAN2_F17R2_FB9, Filter bits
    : CAN2_F17R2_FB10 ( -- x addr ) 10 bit CAN2_F17R2 ; \ CAN2_F17R2_FB10, Filter bits
    : CAN2_F17R2_FB11 ( -- x addr ) 11 bit CAN2_F17R2 ; \ CAN2_F17R2_FB11, Filter bits
    : CAN2_F17R2_FB12 ( -- x addr ) 12 bit CAN2_F17R2 ; \ CAN2_F17R2_FB12, Filter bits
    : CAN2_F17R2_FB13 ( -- x addr ) 13 bit CAN2_F17R2 ; \ CAN2_F17R2_FB13, Filter bits
    : CAN2_F17R2_FB14 ( -- x addr ) 14 bit CAN2_F17R2 ; \ CAN2_F17R2_FB14, Filter bits
    : CAN2_F17R2_FB15 ( -- x addr ) 15 bit CAN2_F17R2 ; \ CAN2_F17R2_FB15, Filter bits
    : CAN2_F17R2_FB16 ( -- x addr ) 16 bit CAN2_F17R2 ; \ CAN2_F17R2_FB16, Filter bits
    : CAN2_F17R2_FB17 ( -- x addr ) 17 bit CAN2_F17R2 ; \ CAN2_F17R2_FB17, Filter bits
    : CAN2_F17R2_FB18 ( -- x addr ) 18 bit CAN2_F17R2 ; \ CAN2_F17R2_FB18, Filter bits
    : CAN2_F17R2_FB19 ( -- x addr ) 19 bit CAN2_F17R2 ; \ CAN2_F17R2_FB19, Filter bits
    : CAN2_F17R2_FB20 ( -- x addr ) 20 bit CAN2_F17R2 ; \ CAN2_F17R2_FB20, Filter bits
    : CAN2_F17R2_FB21 ( -- x addr ) 21 bit CAN2_F17R2 ; \ CAN2_F17R2_FB21, Filter bits
    : CAN2_F17R2_FB22 ( -- x addr ) 22 bit CAN2_F17R2 ; \ CAN2_F17R2_FB22, Filter bits
    : CAN2_F17R2_FB23 ( -- x addr ) 23 bit CAN2_F17R2 ; \ CAN2_F17R2_FB23, Filter bits
    : CAN2_F17R2_FB24 ( -- x addr ) 24 bit CAN2_F17R2 ; \ CAN2_F17R2_FB24, Filter bits
    : CAN2_F17R2_FB25 ( -- x addr ) 25 bit CAN2_F17R2 ; \ CAN2_F17R2_FB25, Filter bits
    : CAN2_F17R2_FB26 ( -- x addr ) 26 bit CAN2_F17R2 ; \ CAN2_F17R2_FB26, Filter bits
    : CAN2_F17R2_FB27 ( -- x addr ) 27 bit CAN2_F17R2 ; \ CAN2_F17R2_FB27, Filter bits
    : CAN2_F17R2_FB28 ( -- x addr ) 28 bit CAN2_F17R2 ; \ CAN2_F17R2_FB28, Filter bits
    : CAN2_F17R2_FB29 ( -- x addr ) 29 bit CAN2_F17R2 ; \ CAN2_F17R2_FB29, Filter bits
    : CAN2_F17R2_FB30 ( -- x addr ) 30 bit CAN2_F17R2 ; \ CAN2_F17R2_FB30, Filter bits
    : CAN2_F17R2_FB31 ( -- x addr ) 31 bit CAN2_F17R2 ; \ CAN2_F17R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F18R1 (read-write) Reset:0x00000000
    : CAN2_F18R1_FB0 ( -- x addr ) 0 bit CAN2_F18R1 ; \ CAN2_F18R1_FB0, Filter bits
    : CAN2_F18R1_FB1 ( -- x addr ) 1 bit CAN2_F18R1 ; \ CAN2_F18R1_FB1, Filter bits
    : CAN2_F18R1_FB2 ( -- x addr ) 2 bit CAN2_F18R1 ; \ CAN2_F18R1_FB2, Filter bits
    : CAN2_F18R1_FB3 ( -- x addr ) 3 bit CAN2_F18R1 ; \ CAN2_F18R1_FB3, Filter bits
    : CAN2_F18R1_FB4 ( -- x addr ) 4 bit CAN2_F18R1 ; \ CAN2_F18R1_FB4, Filter bits
    : CAN2_F18R1_FB5 ( -- x addr ) 5 bit CAN2_F18R1 ; \ CAN2_F18R1_FB5, Filter bits
    : CAN2_F18R1_FB6 ( -- x addr ) 6 bit CAN2_F18R1 ; \ CAN2_F18R1_FB6, Filter bits
    : CAN2_F18R1_FB7 ( -- x addr ) 7 bit CAN2_F18R1 ; \ CAN2_F18R1_FB7, Filter bits
    : CAN2_F18R1_FB8 ( -- x addr ) 8 bit CAN2_F18R1 ; \ CAN2_F18R1_FB8, Filter bits
    : CAN2_F18R1_FB9 ( -- x addr ) 9 bit CAN2_F18R1 ; \ CAN2_F18R1_FB9, Filter bits
    : CAN2_F18R1_FB10 ( -- x addr ) 10 bit CAN2_F18R1 ; \ CAN2_F18R1_FB10, Filter bits
    : CAN2_F18R1_FB11 ( -- x addr ) 11 bit CAN2_F18R1 ; \ CAN2_F18R1_FB11, Filter bits
    : CAN2_F18R1_FB12 ( -- x addr ) 12 bit CAN2_F18R1 ; \ CAN2_F18R1_FB12, Filter bits
    : CAN2_F18R1_FB13 ( -- x addr ) 13 bit CAN2_F18R1 ; \ CAN2_F18R1_FB13, Filter bits
    : CAN2_F18R1_FB14 ( -- x addr ) 14 bit CAN2_F18R1 ; \ CAN2_F18R1_FB14, Filter bits
    : CAN2_F18R1_FB15 ( -- x addr ) 15 bit CAN2_F18R1 ; \ CAN2_F18R1_FB15, Filter bits
    : CAN2_F18R1_FB16 ( -- x addr ) 16 bit CAN2_F18R1 ; \ CAN2_F18R1_FB16, Filter bits
    : CAN2_F18R1_FB17 ( -- x addr ) 17 bit CAN2_F18R1 ; \ CAN2_F18R1_FB17, Filter bits
    : CAN2_F18R1_FB18 ( -- x addr ) 18 bit CAN2_F18R1 ; \ CAN2_F18R1_FB18, Filter bits
    : CAN2_F18R1_FB19 ( -- x addr ) 19 bit CAN2_F18R1 ; \ CAN2_F18R1_FB19, Filter bits
    : CAN2_F18R1_FB20 ( -- x addr ) 20 bit CAN2_F18R1 ; \ CAN2_F18R1_FB20, Filter bits
    : CAN2_F18R1_FB21 ( -- x addr ) 21 bit CAN2_F18R1 ; \ CAN2_F18R1_FB21, Filter bits
    : CAN2_F18R1_FB22 ( -- x addr ) 22 bit CAN2_F18R1 ; \ CAN2_F18R1_FB22, Filter bits
    : CAN2_F18R1_FB23 ( -- x addr ) 23 bit CAN2_F18R1 ; \ CAN2_F18R1_FB23, Filter bits
    : CAN2_F18R1_FB24 ( -- x addr ) 24 bit CAN2_F18R1 ; \ CAN2_F18R1_FB24, Filter bits
    : CAN2_F18R1_FB25 ( -- x addr ) 25 bit CAN2_F18R1 ; \ CAN2_F18R1_FB25, Filter bits
    : CAN2_F18R1_FB26 ( -- x addr ) 26 bit CAN2_F18R1 ; \ CAN2_F18R1_FB26, Filter bits
    : CAN2_F18R1_FB27 ( -- x addr ) 27 bit CAN2_F18R1 ; \ CAN2_F18R1_FB27, Filter bits
    : CAN2_F18R1_FB28 ( -- x addr ) 28 bit CAN2_F18R1 ; \ CAN2_F18R1_FB28, Filter bits
    : CAN2_F18R1_FB29 ( -- x addr ) 29 bit CAN2_F18R1 ; \ CAN2_F18R1_FB29, Filter bits
    : CAN2_F18R1_FB30 ( -- x addr ) 30 bit CAN2_F18R1 ; \ CAN2_F18R1_FB30, Filter bits
    : CAN2_F18R1_FB31 ( -- x addr ) 31 bit CAN2_F18R1 ; \ CAN2_F18R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F18R2 (read-write) Reset:0x00000000
    : CAN2_F18R2_FB0 ( -- x addr ) 0 bit CAN2_F18R2 ; \ CAN2_F18R2_FB0, Filter bits
    : CAN2_F18R2_FB1 ( -- x addr ) 1 bit CAN2_F18R2 ; \ CAN2_F18R2_FB1, Filter bits
    : CAN2_F18R2_FB2 ( -- x addr ) 2 bit CAN2_F18R2 ; \ CAN2_F18R2_FB2, Filter bits
    : CAN2_F18R2_FB3 ( -- x addr ) 3 bit CAN2_F18R2 ; \ CAN2_F18R2_FB3, Filter bits
    : CAN2_F18R2_FB4 ( -- x addr ) 4 bit CAN2_F18R2 ; \ CAN2_F18R2_FB4, Filter bits
    : CAN2_F18R2_FB5 ( -- x addr ) 5 bit CAN2_F18R2 ; \ CAN2_F18R2_FB5, Filter bits
    : CAN2_F18R2_FB6 ( -- x addr ) 6 bit CAN2_F18R2 ; \ CAN2_F18R2_FB6, Filter bits
    : CAN2_F18R2_FB7 ( -- x addr ) 7 bit CAN2_F18R2 ; \ CAN2_F18R2_FB7, Filter bits
    : CAN2_F18R2_FB8 ( -- x addr ) 8 bit CAN2_F18R2 ; \ CAN2_F18R2_FB8, Filter bits
    : CAN2_F18R2_FB9 ( -- x addr ) 9 bit CAN2_F18R2 ; \ CAN2_F18R2_FB9, Filter bits
    : CAN2_F18R2_FB10 ( -- x addr ) 10 bit CAN2_F18R2 ; \ CAN2_F18R2_FB10, Filter bits
    : CAN2_F18R2_FB11 ( -- x addr ) 11 bit CAN2_F18R2 ; \ CAN2_F18R2_FB11, Filter bits
    : CAN2_F18R2_FB12 ( -- x addr ) 12 bit CAN2_F18R2 ; \ CAN2_F18R2_FB12, Filter bits
    : CAN2_F18R2_FB13 ( -- x addr ) 13 bit CAN2_F18R2 ; \ CAN2_F18R2_FB13, Filter bits
    : CAN2_F18R2_FB14 ( -- x addr ) 14 bit CAN2_F18R2 ; \ CAN2_F18R2_FB14, Filter bits
    : CAN2_F18R2_FB15 ( -- x addr ) 15 bit CAN2_F18R2 ; \ CAN2_F18R2_FB15, Filter bits
    : CAN2_F18R2_FB16 ( -- x addr ) 16 bit CAN2_F18R2 ; \ CAN2_F18R2_FB16, Filter bits
    : CAN2_F18R2_FB17 ( -- x addr ) 17 bit CAN2_F18R2 ; \ CAN2_F18R2_FB17, Filter bits
    : CAN2_F18R2_FB18 ( -- x addr ) 18 bit CAN2_F18R2 ; \ CAN2_F18R2_FB18, Filter bits
    : CAN2_F18R2_FB19 ( -- x addr ) 19 bit CAN2_F18R2 ; \ CAN2_F18R2_FB19, Filter bits
    : CAN2_F18R2_FB20 ( -- x addr ) 20 bit CAN2_F18R2 ; \ CAN2_F18R2_FB20, Filter bits
    : CAN2_F18R2_FB21 ( -- x addr ) 21 bit CAN2_F18R2 ; \ CAN2_F18R2_FB21, Filter bits
    : CAN2_F18R2_FB22 ( -- x addr ) 22 bit CAN2_F18R2 ; \ CAN2_F18R2_FB22, Filter bits
    : CAN2_F18R2_FB23 ( -- x addr ) 23 bit CAN2_F18R2 ; \ CAN2_F18R2_FB23, Filter bits
    : CAN2_F18R2_FB24 ( -- x addr ) 24 bit CAN2_F18R2 ; \ CAN2_F18R2_FB24, Filter bits
    : CAN2_F18R2_FB25 ( -- x addr ) 25 bit CAN2_F18R2 ; \ CAN2_F18R2_FB25, Filter bits
    : CAN2_F18R2_FB26 ( -- x addr ) 26 bit CAN2_F18R2 ; \ CAN2_F18R2_FB26, Filter bits
    : CAN2_F18R2_FB27 ( -- x addr ) 27 bit CAN2_F18R2 ; \ CAN2_F18R2_FB27, Filter bits
    : CAN2_F18R2_FB28 ( -- x addr ) 28 bit CAN2_F18R2 ; \ CAN2_F18R2_FB28, Filter bits
    : CAN2_F18R2_FB29 ( -- x addr ) 29 bit CAN2_F18R2 ; \ CAN2_F18R2_FB29, Filter bits
    : CAN2_F18R2_FB30 ( -- x addr ) 30 bit CAN2_F18R2 ; \ CAN2_F18R2_FB30, Filter bits
    : CAN2_F18R2_FB31 ( -- x addr ) 31 bit CAN2_F18R2 ; \ CAN2_F18R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F19R1 (read-write) Reset:0x00000000
    : CAN2_F19R1_FB0 ( -- x addr ) 0 bit CAN2_F19R1 ; \ CAN2_F19R1_FB0, Filter bits
    : CAN2_F19R1_FB1 ( -- x addr ) 1 bit CAN2_F19R1 ; \ CAN2_F19R1_FB1, Filter bits
    : CAN2_F19R1_FB2 ( -- x addr ) 2 bit CAN2_F19R1 ; \ CAN2_F19R1_FB2, Filter bits
    : CAN2_F19R1_FB3 ( -- x addr ) 3 bit CAN2_F19R1 ; \ CAN2_F19R1_FB3, Filter bits
    : CAN2_F19R1_FB4 ( -- x addr ) 4 bit CAN2_F19R1 ; \ CAN2_F19R1_FB4, Filter bits
    : CAN2_F19R1_FB5 ( -- x addr ) 5 bit CAN2_F19R1 ; \ CAN2_F19R1_FB5, Filter bits
    : CAN2_F19R1_FB6 ( -- x addr ) 6 bit CAN2_F19R1 ; \ CAN2_F19R1_FB6, Filter bits
    : CAN2_F19R1_FB7 ( -- x addr ) 7 bit CAN2_F19R1 ; \ CAN2_F19R1_FB7, Filter bits
    : CAN2_F19R1_FB8 ( -- x addr ) 8 bit CAN2_F19R1 ; \ CAN2_F19R1_FB8, Filter bits
    : CAN2_F19R1_FB9 ( -- x addr ) 9 bit CAN2_F19R1 ; \ CAN2_F19R1_FB9, Filter bits
    : CAN2_F19R1_FB10 ( -- x addr ) 10 bit CAN2_F19R1 ; \ CAN2_F19R1_FB10, Filter bits
    : CAN2_F19R1_FB11 ( -- x addr ) 11 bit CAN2_F19R1 ; \ CAN2_F19R1_FB11, Filter bits
    : CAN2_F19R1_FB12 ( -- x addr ) 12 bit CAN2_F19R1 ; \ CAN2_F19R1_FB12, Filter bits
    : CAN2_F19R1_FB13 ( -- x addr ) 13 bit CAN2_F19R1 ; \ CAN2_F19R1_FB13, Filter bits
    : CAN2_F19R1_FB14 ( -- x addr ) 14 bit CAN2_F19R1 ; \ CAN2_F19R1_FB14, Filter bits
    : CAN2_F19R1_FB15 ( -- x addr ) 15 bit CAN2_F19R1 ; \ CAN2_F19R1_FB15, Filter bits
    : CAN2_F19R1_FB16 ( -- x addr ) 16 bit CAN2_F19R1 ; \ CAN2_F19R1_FB16, Filter bits
    : CAN2_F19R1_FB17 ( -- x addr ) 17 bit CAN2_F19R1 ; \ CAN2_F19R1_FB17, Filter bits
    : CAN2_F19R1_FB18 ( -- x addr ) 18 bit CAN2_F19R1 ; \ CAN2_F19R1_FB18, Filter bits
    : CAN2_F19R1_FB19 ( -- x addr ) 19 bit CAN2_F19R1 ; \ CAN2_F19R1_FB19, Filter bits
    : CAN2_F19R1_FB20 ( -- x addr ) 20 bit CAN2_F19R1 ; \ CAN2_F19R1_FB20, Filter bits
    : CAN2_F19R1_FB21 ( -- x addr ) 21 bit CAN2_F19R1 ; \ CAN2_F19R1_FB21, Filter bits
    : CAN2_F19R1_FB22 ( -- x addr ) 22 bit CAN2_F19R1 ; \ CAN2_F19R1_FB22, Filter bits
    : CAN2_F19R1_FB23 ( -- x addr ) 23 bit CAN2_F19R1 ; \ CAN2_F19R1_FB23, Filter bits
    : CAN2_F19R1_FB24 ( -- x addr ) 24 bit CAN2_F19R1 ; \ CAN2_F19R1_FB24, Filter bits
    : CAN2_F19R1_FB25 ( -- x addr ) 25 bit CAN2_F19R1 ; \ CAN2_F19R1_FB25, Filter bits
    : CAN2_F19R1_FB26 ( -- x addr ) 26 bit CAN2_F19R1 ; \ CAN2_F19R1_FB26, Filter bits
    : CAN2_F19R1_FB27 ( -- x addr ) 27 bit CAN2_F19R1 ; \ CAN2_F19R1_FB27, Filter bits
    : CAN2_F19R1_FB28 ( -- x addr ) 28 bit CAN2_F19R1 ; \ CAN2_F19R1_FB28, Filter bits
    : CAN2_F19R1_FB29 ( -- x addr ) 29 bit CAN2_F19R1 ; \ CAN2_F19R1_FB29, Filter bits
    : CAN2_F19R1_FB30 ( -- x addr ) 30 bit CAN2_F19R1 ; \ CAN2_F19R1_FB30, Filter bits
    : CAN2_F19R1_FB31 ( -- x addr ) 31 bit CAN2_F19R1 ; \ CAN2_F19R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F19R2 (read-write) Reset:0x00000000
    : CAN2_F19R2_FB0 ( -- x addr ) 0 bit CAN2_F19R2 ; \ CAN2_F19R2_FB0, Filter bits
    : CAN2_F19R2_FB1 ( -- x addr ) 1 bit CAN2_F19R2 ; \ CAN2_F19R2_FB1, Filter bits
    : CAN2_F19R2_FB2 ( -- x addr ) 2 bit CAN2_F19R2 ; \ CAN2_F19R2_FB2, Filter bits
    : CAN2_F19R2_FB3 ( -- x addr ) 3 bit CAN2_F19R2 ; \ CAN2_F19R2_FB3, Filter bits
    : CAN2_F19R2_FB4 ( -- x addr ) 4 bit CAN2_F19R2 ; \ CAN2_F19R2_FB4, Filter bits
    : CAN2_F19R2_FB5 ( -- x addr ) 5 bit CAN2_F19R2 ; \ CAN2_F19R2_FB5, Filter bits
    : CAN2_F19R2_FB6 ( -- x addr ) 6 bit CAN2_F19R2 ; \ CAN2_F19R2_FB6, Filter bits
    : CAN2_F19R2_FB7 ( -- x addr ) 7 bit CAN2_F19R2 ; \ CAN2_F19R2_FB7, Filter bits
    : CAN2_F19R2_FB8 ( -- x addr ) 8 bit CAN2_F19R2 ; \ CAN2_F19R2_FB8, Filter bits
    : CAN2_F19R2_FB9 ( -- x addr ) 9 bit CAN2_F19R2 ; \ CAN2_F19R2_FB9, Filter bits
    : CAN2_F19R2_FB10 ( -- x addr ) 10 bit CAN2_F19R2 ; \ CAN2_F19R2_FB10, Filter bits
    : CAN2_F19R2_FB11 ( -- x addr ) 11 bit CAN2_F19R2 ; \ CAN2_F19R2_FB11, Filter bits
    : CAN2_F19R2_FB12 ( -- x addr ) 12 bit CAN2_F19R2 ; \ CAN2_F19R2_FB12, Filter bits
    : CAN2_F19R2_FB13 ( -- x addr ) 13 bit CAN2_F19R2 ; \ CAN2_F19R2_FB13, Filter bits
    : CAN2_F19R2_FB14 ( -- x addr ) 14 bit CAN2_F19R2 ; \ CAN2_F19R2_FB14, Filter bits
    : CAN2_F19R2_FB15 ( -- x addr ) 15 bit CAN2_F19R2 ; \ CAN2_F19R2_FB15, Filter bits
    : CAN2_F19R2_FB16 ( -- x addr ) 16 bit CAN2_F19R2 ; \ CAN2_F19R2_FB16, Filter bits
    : CAN2_F19R2_FB17 ( -- x addr ) 17 bit CAN2_F19R2 ; \ CAN2_F19R2_FB17, Filter bits
    : CAN2_F19R2_FB18 ( -- x addr ) 18 bit CAN2_F19R2 ; \ CAN2_F19R2_FB18, Filter bits
    : CAN2_F19R2_FB19 ( -- x addr ) 19 bit CAN2_F19R2 ; \ CAN2_F19R2_FB19, Filter bits
    : CAN2_F19R2_FB20 ( -- x addr ) 20 bit CAN2_F19R2 ; \ CAN2_F19R2_FB20, Filter bits
    : CAN2_F19R2_FB21 ( -- x addr ) 21 bit CAN2_F19R2 ; \ CAN2_F19R2_FB21, Filter bits
    : CAN2_F19R2_FB22 ( -- x addr ) 22 bit CAN2_F19R2 ; \ CAN2_F19R2_FB22, Filter bits
    : CAN2_F19R2_FB23 ( -- x addr ) 23 bit CAN2_F19R2 ; \ CAN2_F19R2_FB23, Filter bits
    : CAN2_F19R2_FB24 ( -- x addr ) 24 bit CAN2_F19R2 ; \ CAN2_F19R2_FB24, Filter bits
    : CAN2_F19R2_FB25 ( -- x addr ) 25 bit CAN2_F19R2 ; \ CAN2_F19R2_FB25, Filter bits
    : CAN2_F19R2_FB26 ( -- x addr ) 26 bit CAN2_F19R2 ; \ CAN2_F19R2_FB26, Filter bits
    : CAN2_F19R2_FB27 ( -- x addr ) 27 bit CAN2_F19R2 ; \ CAN2_F19R2_FB27, Filter bits
    : CAN2_F19R2_FB28 ( -- x addr ) 28 bit CAN2_F19R2 ; \ CAN2_F19R2_FB28, Filter bits
    : CAN2_F19R2_FB29 ( -- x addr ) 29 bit CAN2_F19R2 ; \ CAN2_F19R2_FB29, Filter bits
    : CAN2_F19R2_FB30 ( -- x addr ) 30 bit CAN2_F19R2 ; \ CAN2_F19R2_FB30, Filter bits
    : CAN2_F19R2_FB31 ( -- x addr ) 31 bit CAN2_F19R2 ; \ CAN2_F19R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F20R1 (read-write) Reset:0x00000000
    : CAN2_F20R1_FB0 ( -- x addr ) 0 bit CAN2_F20R1 ; \ CAN2_F20R1_FB0, Filter bits
    : CAN2_F20R1_FB1 ( -- x addr ) 1 bit CAN2_F20R1 ; \ CAN2_F20R1_FB1, Filter bits
    : CAN2_F20R1_FB2 ( -- x addr ) 2 bit CAN2_F20R1 ; \ CAN2_F20R1_FB2, Filter bits
    : CAN2_F20R1_FB3 ( -- x addr ) 3 bit CAN2_F20R1 ; \ CAN2_F20R1_FB3, Filter bits
    : CAN2_F20R1_FB4 ( -- x addr ) 4 bit CAN2_F20R1 ; \ CAN2_F20R1_FB4, Filter bits
    : CAN2_F20R1_FB5 ( -- x addr ) 5 bit CAN2_F20R1 ; \ CAN2_F20R1_FB5, Filter bits
    : CAN2_F20R1_FB6 ( -- x addr ) 6 bit CAN2_F20R1 ; \ CAN2_F20R1_FB6, Filter bits
    : CAN2_F20R1_FB7 ( -- x addr ) 7 bit CAN2_F20R1 ; \ CAN2_F20R1_FB7, Filter bits
    : CAN2_F20R1_FB8 ( -- x addr ) 8 bit CAN2_F20R1 ; \ CAN2_F20R1_FB8, Filter bits
    : CAN2_F20R1_FB9 ( -- x addr ) 9 bit CAN2_F20R1 ; \ CAN2_F20R1_FB9, Filter bits
    : CAN2_F20R1_FB10 ( -- x addr ) 10 bit CAN2_F20R1 ; \ CAN2_F20R1_FB10, Filter bits
    : CAN2_F20R1_FB11 ( -- x addr ) 11 bit CAN2_F20R1 ; \ CAN2_F20R1_FB11, Filter bits
    : CAN2_F20R1_FB12 ( -- x addr ) 12 bit CAN2_F20R1 ; \ CAN2_F20R1_FB12, Filter bits
    : CAN2_F20R1_FB13 ( -- x addr ) 13 bit CAN2_F20R1 ; \ CAN2_F20R1_FB13, Filter bits
    : CAN2_F20R1_FB14 ( -- x addr ) 14 bit CAN2_F20R1 ; \ CAN2_F20R1_FB14, Filter bits
    : CAN2_F20R1_FB15 ( -- x addr ) 15 bit CAN2_F20R1 ; \ CAN2_F20R1_FB15, Filter bits
    : CAN2_F20R1_FB16 ( -- x addr ) 16 bit CAN2_F20R1 ; \ CAN2_F20R1_FB16, Filter bits
    : CAN2_F20R1_FB17 ( -- x addr ) 17 bit CAN2_F20R1 ; \ CAN2_F20R1_FB17, Filter bits
    : CAN2_F20R1_FB18 ( -- x addr ) 18 bit CAN2_F20R1 ; \ CAN2_F20R1_FB18, Filter bits
    : CAN2_F20R1_FB19 ( -- x addr ) 19 bit CAN2_F20R1 ; \ CAN2_F20R1_FB19, Filter bits
    : CAN2_F20R1_FB20 ( -- x addr ) 20 bit CAN2_F20R1 ; \ CAN2_F20R1_FB20, Filter bits
    : CAN2_F20R1_FB21 ( -- x addr ) 21 bit CAN2_F20R1 ; \ CAN2_F20R1_FB21, Filter bits
    : CAN2_F20R1_FB22 ( -- x addr ) 22 bit CAN2_F20R1 ; \ CAN2_F20R1_FB22, Filter bits
    : CAN2_F20R1_FB23 ( -- x addr ) 23 bit CAN2_F20R1 ; \ CAN2_F20R1_FB23, Filter bits
    : CAN2_F20R1_FB24 ( -- x addr ) 24 bit CAN2_F20R1 ; \ CAN2_F20R1_FB24, Filter bits
    : CAN2_F20R1_FB25 ( -- x addr ) 25 bit CAN2_F20R1 ; \ CAN2_F20R1_FB25, Filter bits
    : CAN2_F20R1_FB26 ( -- x addr ) 26 bit CAN2_F20R1 ; \ CAN2_F20R1_FB26, Filter bits
    : CAN2_F20R1_FB27 ( -- x addr ) 27 bit CAN2_F20R1 ; \ CAN2_F20R1_FB27, Filter bits
    : CAN2_F20R1_FB28 ( -- x addr ) 28 bit CAN2_F20R1 ; \ CAN2_F20R1_FB28, Filter bits
    : CAN2_F20R1_FB29 ( -- x addr ) 29 bit CAN2_F20R1 ; \ CAN2_F20R1_FB29, Filter bits
    : CAN2_F20R1_FB30 ( -- x addr ) 30 bit CAN2_F20R1 ; \ CAN2_F20R1_FB30, Filter bits
    : CAN2_F20R1_FB31 ( -- x addr ) 31 bit CAN2_F20R1 ; \ CAN2_F20R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F20R2 (read-write) Reset:0x00000000
    : CAN2_F20R2_FB0 ( -- x addr ) 0 bit CAN2_F20R2 ; \ CAN2_F20R2_FB0, Filter bits
    : CAN2_F20R2_FB1 ( -- x addr ) 1 bit CAN2_F20R2 ; \ CAN2_F20R2_FB1, Filter bits
    : CAN2_F20R2_FB2 ( -- x addr ) 2 bit CAN2_F20R2 ; \ CAN2_F20R2_FB2, Filter bits
    : CAN2_F20R2_FB3 ( -- x addr ) 3 bit CAN2_F20R2 ; \ CAN2_F20R2_FB3, Filter bits
    : CAN2_F20R2_FB4 ( -- x addr ) 4 bit CAN2_F20R2 ; \ CAN2_F20R2_FB4, Filter bits
    : CAN2_F20R2_FB5 ( -- x addr ) 5 bit CAN2_F20R2 ; \ CAN2_F20R2_FB5, Filter bits
    : CAN2_F20R2_FB6 ( -- x addr ) 6 bit CAN2_F20R2 ; \ CAN2_F20R2_FB6, Filter bits
    : CAN2_F20R2_FB7 ( -- x addr ) 7 bit CAN2_F20R2 ; \ CAN2_F20R2_FB7, Filter bits
    : CAN2_F20R2_FB8 ( -- x addr ) 8 bit CAN2_F20R2 ; \ CAN2_F20R2_FB8, Filter bits
    : CAN2_F20R2_FB9 ( -- x addr ) 9 bit CAN2_F20R2 ; \ CAN2_F20R2_FB9, Filter bits
    : CAN2_F20R2_FB10 ( -- x addr ) 10 bit CAN2_F20R2 ; \ CAN2_F20R2_FB10, Filter bits
    : CAN2_F20R2_FB11 ( -- x addr ) 11 bit CAN2_F20R2 ; \ CAN2_F20R2_FB11, Filter bits
    : CAN2_F20R2_FB12 ( -- x addr ) 12 bit CAN2_F20R2 ; \ CAN2_F20R2_FB12, Filter bits
    : CAN2_F20R2_FB13 ( -- x addr ) 13 bit CAN2_F20R2 ; \ CAN2_F20R2_FB13, Filter bits
    : CAN2_F20R2_FB14 ( -- x addr ) 14 bit CAN2_F20R2 ; \ CAN2_F20R2_FB14, Filter bits
    : CAN2_F20R2_FB15 ( -- x addr ) 15 bit CAN2_F20R2 ; \ CAN2_F20R2_FB15, Filter bits
    : CAN2_F20R2_FB16 ( -- x addr ) 16 bit CAN2_F20R2 ; \ CAN2_F20R2_FB16, Filter bits
    : CAN2_F20R2_FB17 ( -- x addr ) 17 bit CAN2_F20R2 ; \ CAN2_F20R2_FB17, Filter bits
    : CAN2_F20R2_FB18 ( -- x addr ) 18 bit CAN2_F20R2 ; \ CAN2_F20R2_FB18, Filter bits
    : CAN2_F20R2_FB19 ( -- x addr ) 19 bit CAN2_F20R2 ; \ CAN2_F20R2_FB19, Filter bits
    : CAN2_F20R2_FB20 ( -- x addr ) 20 bit CAN2_F20R2 ; \ CAN2_F20R2_FB20, Filter bits
    : CAN2_F20R2_FB21 ( -- x addr ) 21 bit CAN2_F20R2 ; \ CAN2_F20R2_FB21, Filter bits
    : CAN2_F20R2_FB22 ( -- x addr ) 22 bit CAN2_F20R2 ; \ CAN2_F20R2_FB22, Filter bits
    : CAN2_F20R2_FB23 ( -- x addr ) 23 bit CAN2_F20R2 ; \ CAN2_F20R2_FB23, Filter bits
    : CAN2_F20R2_FB24 ( -- x addr ) 24 bit CAN2_F20R2 ; \ CAN2_F20R2_FB24, Filter bits
    : CAN2_F20R2_FB25 ( -- x addr ) 25 bit CAN2_F20R2 ; \ CAN2_F20R2_FB25, Filter bits
    : CAN2_F20R2_FB26 ( -- x addr ) 26 bit CAN2_F20R2 ; \ CAN2_F20R2_FB26, Filter bits
    : CAN2_F20R2_FB27 ( -- x addr ) 27 bit CAN2_F20R2 ; \ CAN2_F20R2_FB27, Filter bits
    : CAN2_F20R2_FB28 ( -- x addr ) 28 bit CAN2_F20R2 ; \ CAN2_F20R2_FB28, Filter bits
    : CAN2_F20R2_FB29 ( -- x addr ) 29 bit CAN2_F20R2 ; \ CAN2_F20R2_FB29, Filter bits
    : CAN2_F20R2_FB30 ( -- x addr ) 30 bit CAN2_F20R2 ; \ CAN2_F20R2_FB30, Filter bits
    : CAN2_F20R2_FB31 ( -- x addr ) 31 bit CAN2_F20R2 ; \ CAN2_F20R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F21R1 (read-write) Reset:0x00000000
    : CAN2_F21R1_FB0 ( -- x addr ) 0 bit CAN2_F21R1 ; \ CAN2_F21R1_FB0, Filter bits
    : CAN2_F21R1_FB1 ( -- x addr ) 1 bit CAN2_F21R1 ; \ CAN2_F21R1_FB1, Filter bits
    : CAN2_F21R1_FB2 ( -- x addr ) 2 bit CAN2_F21R1 ; \ CAN2_F21R1_FB2, Filter bits
    : CAN2_F21R1_FB3 ( -- x addr ) 3 bit CAN2_F21R1 ; \ CAN2_F21R1_FB3, Filter bits
    : CAN2_F21R1_FB4 ( -- x addr ) 4 bit CAN2_F21R1 ; \ CAN2_F21R1_FB4, Filter bits
    : CAN2_F21R1_FB5 ( -- x addr ) 5 bit CAN2_F21R1 ; \ CAN2_F21R1_FB5, Filter bits
    : CAN2_F21R1_FB6 ( -- x addr ) 6 bit CAN2_F21R1 ; \ CAN2_F21R1_FB6, Filter bits
    : CAN2_F21R1_FB7 ( -- x addr ) 7 bit CAN2_F21R1 ; \ CAN2_F21R1_FB7, Filter bits
    : CAN2_F21R1_FB8 ( -- x addr ) 8 bit CAN2_F21R1 ; \ CAN2_F21R1_FB8, Filter bits
    : CAN2_F21R1_FB9 ( -- x addr ) 9 bit CAN2_F21R1 ; \ CAN2_F21R1_FB9, Filter bits
    : CAN2_F21R1_FB10 ( -- x addr ) 10 bit CAN2_F21R1 ; \ CAN2_F21R1_FB10, Filter bits
    : CAN2_F21R1_FB11 ( -- x addr ) 11 bit CAN2_F21R1 ; \ CAN2_F21R1_FB11, Filter bits
    : CAN2_F21R1_FB12 ( -- x addr ) 12 bit CAN2_F21R1 ; \ CAN2_F21R1_FB12, Filter bits
    : CAN2_F21R1_FB13 ( -- x addr ) 13 bit CAN2_F21R1 ; \ CAN2_F21R1_FB13, Filter bits
    : CAN2_F21R1_FB14 ( -- x addr ) 14 bit CAN2_F21R1 ; \ CAN2_F21R1_FB14, Filter bits
    : CAN2_F21R1_FB15 ( -- x addr ) 15 bit CAN2_F21R1 ; \ CAN2_F21R1_FB15, Filter bits
    : CAN2_F21R1_FB16 ( -- x addr ) 16 bit CAN2_F21R1 ; \ CAN2_F21R1_FB16, Filter bits
    : CAN2_F21R1_FB17 ( -- x addr ) 17 bit CAN2_F21R1 ; \ CAN2_F21R1_FB17, Filter bits
    : CAN2_F21R1_FB18 ( -- x addr ) 18 bit CAN2_F21R1 ; \ CAN2_F21R1_FB18, Filter bits
    : CAN2_F21R1_FB19 ( -- x addr ) 19 bit CAN2_F21R1 ; \ CAN2_F21R1_FB19, Filter bits
    : CAN2_F21R1_FB20 ( -- x addr ) 20 bit CAN2_F21R1 ; \ CAN2_F21R1_FB20, Filter bits
    : CAN2_F21R1_FB21 ( -- x addr ) 21 bit CAN2_F21R1 ; \ CAN2_F21R1_FB21, Filter bits
    : CAN2_F21R1_FB22 ( -- x addr ) 22 bit CAN2_F21R1 ; \ CAN2_F21R1_FB22, Filter bits
    : CAN2_F21R1_FB23 ( -- x addr ) 23 bit CAN2_F21R1 ; \ CAN2_F21R1_FB23, Filter bits
    : CAN2_F21R1_FB24 ( -- x addr ) 24 bit CAN2_F21R1 ; \ CAN2_F21R1_FB24, Filter bits
    : CAN2_F21R1_FB25 ( -- x addr ) 25 bit CAN2_F21R1 ; \ CAN2_F21R1_FB25, Filter bits
    : CAN2_F21R1_FB26 ( -- x addr ) 26 bit CAN2_F21R1 ; \ CAN2_F21R1_FB26, Filter bits
    : CAN2_F21R1_FB27 ( -- x addr ) 27 bit CAN2_F21R1 ; \ CAN2_F21R1_FB27, Filter bits
    : CAN2_F21R1_FB28 ( -- x addr ) 28 bit CAN2_F21R1 ; \ CAN2_F21R1_FB28, Filter bits
    : CAN2_F21R1_FB29 ( -- x addr ) 29 bit CAN2_F21R1 ; \ CAN2_F21R1_FB29, Filter bits
    : CAN2_F21R1_FB30 ( -- x addr ) 30 bit CAN2_F21R1 ; \ CAN2_F21R1_FB30, Filter bits
    : CAN2_F21R1_FB31 ( -- x addr ) 31 bit CAN2_F21R1 ; \ CAN2_F21R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F21R2 (read-write) Reset:0x00000000
    : CAN2_F21R2_FB0 ( -- x addr ) 0 bit CAN2_F21R2 ; \ CAN2_F21R2_FB0, Filter bits
    : CAN2_F21R2_FB1 ( -- x addr ) 1 bit CAN2_F21R2 ; \ CAN2_F21R2_FB1, Filter bits
    : CAN2_F21R2_FB2 ( -- x addr ) 2 bit CAN2_F21R2 ; \ CAN2_F21R2_FB2, Filter bits
    : CAN2_F21R2_FB3 ( -- x addr ) 3 bit CAN2_F21R2 ; \ CAN2_F21R2_FB3, Filter bits
    : CAN2_F21R2_FB4 ( -- x addr ) 4 bit CAN2_F21R2 ; \ CAN2_F21R2_FB4, Filter bits
    : CAN2_F21R2_FB5 ( -- x addr ) 5 bit CAN2_F21R2 ; \ CAN2_F21R2_FB5, Filter bits
    : CAN2_F21R2_FB6 ( -- x addr ) 6 bit CAN2_F21R2 ; \ CAN2_F21R2_FB6, Filter bits
    : CAN2_F21R2_FB7 ( -- x addr ) 7 bit CAN2_F21R2 ; \ CAN2_F21R2_FB7, Filter bits
    : CAN2_F21R2_FB8 ( -- x addr ) 8 bit CAN2_F21R2 ; \ CAN2_F21R2_FB8, Filter bits
    : CAN2_F21R2_FB9 ( -- x addr ) 9 bit CAN2_F21R2 ; \ CAN2_F21R2_FB9, Filter bits
    : CAN2_F21R2_FB10 ( -- x addr ) 10 bit CAN2_F21R2 ; \ CAN2_F21R2_FB10, Filter bits
    : CAN2_F21R2_FB11 ( -- x addr ) 11 bit CAN2_F21R2 ; \ CAN2_F21R2_FB11, Filter bits
    : CAN2_F21R2_FB12 ( -- x addr ) 12 bit CAN2_F21R2 ; \ CAN2_F21R2_FB12, Filter bits
    : CAN2_F21R2_FB13 ( -- x addr ) 13 bit CAN2_F21R2 ; \ CAN2_F21R2_FB13, Filter bits
    : CAN2_F21R2_FB14 ( -- x addr ) 14 bit CAN2_F21R2 ; \ CAN2_F21R2_FB14, Filter bits
    : CAN2_F21R2_FB15 ( -- x addr ) 15 bit CAN2_F21R2 ; \ CAN2_F21R2_FB15, Filter bits
    : CAN2_F21R2_FB16 ( -- x addr ) 16 bit CAN2_F21R2 ; \ CAN2_F21R2_FB16, Filter bits
    : CAN2_F21R2_FB17 ( -- x addr ) 17 bit CAN2_F21R2 ; \ CAN2_F21R2_FB17, Filter bits
    : CAN2_F21R2_FB18 ( -- x addr ) 18 bit CAN2_F21R2 ; \ CAN2_F21R2_FB18, Filter bits
    : CAN2_F21R2_FB19 ( -- x addr ) 19 bit CAN2_F21R2 ; \ CAN2_F21R2_FB19, Filter bits
    : CAN2_F21R2_FB20 ( -- x addr ) 20 bit CAN2_F21R2 ; \ CAN2_F21R2_FB20, Filter bits
    : CAN2_F21R2_FB21 ( -- x addr ) 21 bit CAN2_F21R2 ; \ CAN2_F21R2_FB21, Filter bits
    : CAN2_F21R2_FB22 ( -- x addr ) 22 bit CAN2_F21R2 ; \ CAN2_F21R2_FB22, Filter bits
    : CAN2_F21R2_FB23 ( -- x addr ) 23 bit CAN2_F21R2 ; \ CAN2_F21R2_FB23, Filter bits
    : CAN2_F21R2_FB24 ( -- x addr ) 24 bit CAN2_F21R2 ; \ CAN2_F21R2_FB24, Filter bits
    : CAN2_F21R2_FB25 ( -- x addr ) 25 bit CAN2_F21R2 ; \ CAN2_F21R2_FB25, Filter bits
    : CAN2_F21R2_FB26 ( -- x addr ) 26 bit CAN2_F21R2 ; \ CAN2_F21R2_FB26, Filter bits
    : CAN2_F21R2_FB27 ( -- x addr ) 27 bit CAN2_F21R2 ; \ CAN2_F21R2_FB27, Filter bits
    : CAN2_F21R2_FB28 ( -- x addr ) 28 bit CAN2_F21R2 ; \ CAN2_F21R2_FB28, Filter bits
    : CAN2_F21R2_FB29 ( -- x addr ) 29 bit CAN2_F21R2 ; \ CAN2_F21R2_FB29, Filter bits
    : CAN2_F21R2_FB30 ( -- x addr ) 30 bit CAN2_F21R2 ; \ CAN2_F21R2_FB30, Filter bits
    : CAN2_F21R2_FB31 ( -- x addr ) 31 bit CAN2_F21R2 ; \ CAN2_F21R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F22R1 (read-write) Reset:0x00000000
    : CAN2_F22R1_FB0 ( -- x addr ) 0 bit CAN2_F22R1 ; \ CAN2_F22R1_FB0, Filter bits
    : CAN2_F22R1_FB1 ( -- x addr ) 1 bit CAN2_F22R1 ; \ CAN2_F22R1_FB1, Filter bits
    : CAN2_F22R1_FB2 ( -- x addr ) 2 bit CAN2_F22R1 ; \ CAN2_F22R1_FB2, Filter bits
    : CAN2_F22R1_FB3 ( -- x addr ) 3 bit CAN2_F22R1 ; \ CAN2_F22R1_FB3, Filter bits
    : CAN2_F22R1_FB4 ( -- x addr ) 4 bit CAN2_F22R1 ; \ CAN2_F22R1_FB4, Filter bits
    : CAN2_F22R1_FB5 ( -- x addr ) 5 bit CAN2_F22R1 ; \ CAN2_F22R1_FB5, Filter bits
    : CAN2_F22R1_FB6 ( -- x addr ) 6 bit CAN2_F22R1 ; \ CAN2_F22R1_FB6, Filter bits
    : CAN2_F22R1_FB7 ( -- x addr ) 7 bit CAN2_F22R1 ; \ CAN2_F22R1_FB7, Filter bits
    : CAN2_F22R1_FB8 ( -- x addr ) 8 bit CAN2_F22R1 ; \ CAN2_F22R1_FB8, Filter bits
    : CAN2_F22R1_FB9 ( -- x addr ) 9 bit CAN2_F22R1 ; \ CAN2_F22R1_FB9, Filter bits
    : CAN2_F22R1_FB10 ( -- x addr ) 10 bit CAN2_F22R1 ; \ CAN2_F22R1_FB10, Filter bits
    : CAN2_F22R1_FB11 ( -- x addr ) 11 bit CAN2_F22R1 ; \ CAN2_F22R1_FB11, Filter bits
    : CAN2_F22R1_FB12 ( -- x addr ) 12 bit CAN2_F22R1 ; \ CAN2_F22R1_FB12, Filter bits
    : CAN2_F22R1_FB13 ( -- x addr ) 13 bit CAN2_F22R1 ; \ CAN2_F22R1_FB13, Filter bits
    : CAN2_F22R1_FB14 ( -- x addr ) 14 bit CAN2_F22R1 ; \ CAN2_F22R1_FB14, Filter bits
    : CAN2_F22R1_FB15 ( -- x addr ) 15 bit CAN2_F22R1 ; \ CAN2_F22R1_FB15, Filter bits
    : CAN2_F22R1_FB16 ( -- x addr ) 16 bit CAN2_F22R1 ; \ CAN2_F22R1_FB16, Filter bits
    : CAN2_F22R1_FB17 ( -- x addr ) 17 bit CAN2_F22R1 ; \ CAN2_F22R1_FB17, Filter bits
    : CAN2_F22R1_FB18 ( -- x addr ) 18 bit CAN2_F22R1 ; \ CAN2_F22R1_FB18, Filter bits
    : CAN2_F22R1_FB19 ( -- x addr ) 19 bit CAN2_F22R1 ; \ CAN2_F22R1_FB19, Filter bits
    : CAN2_F22R1_FB20 ( -- x addr ) 20 bit CAN2_F22R1 ; \ CAN2_F22R1_FB20, Filter bits
    : CAN2_F22R1_FB21 ( -- x addr ) 21 bit CAN2_F22R1 ; \ CAN2_F22R1_FB21, Filter bits
    : CAN2_F22R1_FB22 ( -- x addr ) 22 bit CAN2_F22R1 ; \ CAN2_F22R1_FB22, Filter bits
    : CAN2_F22R1_FB23 ( -- x addr ) 23 bit CAN2_F22R1 ; \ CAN2_F22R1_FB23, Filter bits
    : CAN2_F22R1_FB24 ( -- x addr ) 24 bit CAN2_F22R1 ; \ CAN2_F22R1_FB24, Filter bits
    : CAN2_F22R1_FB25 ( -- x addr ) 25 bit CAN2_F22R1 ; \ CAN2_F22R1_FB25, Filter bits
    : CAN2_F22R1_FB26 ( -- x addr ) 26 bit CAN2_F22R1 ; \ CAN2_F22R1_FB26, Filter bits
    : CAN2_F22R1_FB27 ( -- x addr ) 27 bit CAN2_F22R1 ; \ CAN2_F22R1_FB27, Filter bits
    : CAN2_F22R1_FB28 ( -- x addr ) 28 bit CAN2_F22R1 ; \ CAN2_F22R1_FB28, Filter bits
    : CAN2_F22R1_FB29 ( -- x addr ) 29 bit CAN2_F22R1 ; \ CAN2_F22R1_FB29, Filter bits
    : CAN2_F22R1_FB30 ( -- x addr ) 30 bit CAN2_F22R1 ; \ CAN2_F22R1_FB30, Filter bits
    : CAN2_F22R1_FB31 ( -- x addr ) 31 bit CAN2_F22R1 ; \ CAN2_F22R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F22R2 (read-write) Reset:0x00000000
    : CAN2_F22R2_FB0 ( -- x addr ) 0 bit CAN2_F22R2 ; \ CAN2_F22R2_FB0, Filter bits
    : CAN2_F22R2_FB1 ( -- x addr ) 1 bit CAN2_F22R2 ; \ CAN2_F22R2_FB1, Filter bits
    : CAN2_F22R2_FB2 ( -- x addr ) 2 bit CAN2_F22R2 ; \ CAN2_F22R2_FB2, Filter bits
    : CAN2_F22R2_FB3 ( -- x addr ) 3 bit CAN2_F22R2 ; \ CAN2_F22R2_FB3, Filter bits
    : CAN2_F22R2_FB4 ( -- x addr ) 4 bit CAN2_F22R2 ; \ CAN2_F22R2_FB4, Filter bits
    : CAN2_F22R2_FB5 ( -- x addr ) 5 bit CAN2_F22R2 ; \ CAN2_F22R2_FB5, Filter bits
    : CAN2_F22R2_FB6 ( -- x addr ) 6 bit CAN2_F22R2 ; \ CAN2_F22R2_FB6, Filter bits
    : CAN2_F22R2_FB7 ( -- x addr ) 7 bit CAN2_F22R2 ; \ CAN2_F22R2_FB7, Filter bits
    : CAN2_F22R2_FB8 ( -- x addr ) 8 bit CAN2_F22R2 ; \ CAN2_F22R2_FB8, Filter bits
    : CAN2_F22R2_FB9 ( -- x addr ) 9 bit CAN2_F22R2 ; \ CAN2_F22R2_FB9, Filter bits
    : CAN2_F22R2_FB10 ( -- x addr ) 10 bit CAN2_F22R2 ; \ CAN2_F22R2_FB10, Filter bits
    : CAN2_F22R2_FB11 ( -- x addr ) 11 bit CAN2_F22R2 ; \ CAN2_F22R2_FB11, Filter bits
    : CAN2_F22R2_FB12 ( -- x addr ) 12 bit CAN2_F22R2 ; \ CAN2_F22R2_FB12, Filter bits
    : CAN2_F22R2_FB13 ( -- x addr ) 13 bit CAN2_F22R2 ; \ CAN2_F22R2_FB13, Filter bits
    : CAN2_F22R2_FB14 ( -- x addr ) 14 bit CAN2_F22R2 ; \ CAN2_F22R2_FB14, Filter bits
    : CAN2_F22R2_FB15 ( -- x addr ) 15 bit CAN2_F22R2 ; \ CAN2_F22R2_FB15, Filter bits
    : CAN2_F22R2_FB16 ( -- x addr ) 16 bit CAN2_F22R2 ; \ CAN2_F22R2_FB16, Filter bits
    : CAN2_F22R2_FB17 ( -- x addr ) 17 bit CAN2_F22R2 ; \ CAN2_F22R2_FB17, Filter bits
    : CAN2_F22R2_FB18 ( -- x addr ) 18 bit CAN2_F22R2 ; \ CAN2_F22R2_FB18, Filter bits
    : CAN2_F22R2_FB19 ( -- x addr ) 19 bit CAN2_F22R2 ; \ CAN2_F22R2_FB19, Filter bits
    : CAN2_F22R2_FB20 ( -- x addr ) 20 bit CAN2_F22R2 ; \ CAN2_F22R2_FB20, Filter bits
    : CAN2_F22R2_FB21 ( -- x addr ) 21 bit CAN2_F22R2 ; \ CAN2_F22R2_FB21, Filter bits
    : CAN2_F22R2_FB22 ( -- x addr ) 22 bit CAN2_F22R2 ; \ CAN2_F22R2_FB22, Filter bits
    : CAN2_F22R2_FB23 ( -- x addr ) 23 bit CAN2_F22R2 ; \ CAN2_F22R2_FB23, Filter bits
    : CAN2_F22R2_FB24 ( -- x addr ) 24 bit CAN2_F22R2 ; \ CAN2_F22R2_FB24, Filter bits
    : CAN2_F22R2_FB25 ( -- x addr ) 25 bit CAN2_F22R2 ; \ CAN2_F22R2_FB25, Filter bits
    : CAN2_F22R2_FB26 ( -- x addr ) 26 bit CAN2_F22R2 ; \ CAN2_F22R2_FB26, Filter bits
    : CAN2_F22R2_FB27 ( -- x addr ) 27 bit CAN2_F22R2 ; \ CAN2_F22R2_FB27, Filter bits
    : CAN2_F22R2_FB28 ( -- x addr ) 28 bit CAN2_F22R2 ; \ CAN2_F22R2_FB28, Filter bits
    : CAN2_F22R2_FB29 ( -- x addr ) 29 bit CAN2_F22R2 ; \ CAN2_F22R2_FB29, Filter bits
    : CAN2_F22R2_FB30 ( -- x addr ) 30 bit CAN2_F22R2 ; \ CAN2_F22R2_FB30, Filter bits
    : CAN2_F22R2_FB31 ( -- x addr ) 31 bit CAN2_F22R2 ; \ CAN2_F22R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F23R1 (read-write) Reset:0x00000000
    : CAN2_F23R1_FB0 ( -- x addr ) 0 bit CAN2_F23R1 ; \ CAN2_F23R1_FB0, Filter bits
    : CAN2_F23R1_FB1 ( -- x addr ) 1 bit CAN2_F23R1 ; \ CAN2_F23R1_FB1, Filter bits
    : CAN2_F23R1_FB2 ( -- x addr ) 2 bit CAN2_F23R1 ; \ CAN2_F23R1_FB2, Filter bits
    : CAN2_F23R1_FB3 ( -- x addr ) 3 bit CAN2_F23R1 ; \ CAN2_F23R1_FB3, Filter bits
    : CAN2_F23R1_FB4 ( -- x addr ) 4 bit CAN2_F23R1 ; \ CAN2_F23R1_FB4, Filter bits
    : CAN2_F23R1_FB5 ( -- x addr ) 5 bit CAN2_F23R1 ; \ CAN2_F23R1_FB5, Filter bits
    : CAN2_F23R1_FB6 ( -- x addr ) 6 bit CAN2_F23R1 ; \ CAN2_F23R1_FB6, Filter bits
    : CAN2_F23R1_FB7 ( -- x addr ) 7 bit CAN2_F23R1 ; \ CAN2_F23R1_FB7, Filter bits
    : CAN2_F23R1_FB8 ( -- x addr ) 8 bit CAN2_F23R1 ; \ CAN2_F23R1_FB8, Filter bits
    : CAN2_F23R1_FB9 ( -- x addr ) 9 bit CAN2_F23R1 ; \ CAN2_F23R1_FB9, Filter bits
    : CAN2_F23R1_FB10 ( -- x addr ) 10 bit CAN2_F23R1 ; \ CAN2_F23R1_FB10, Filter bits
    : CAN2_F23R1_FB11 ( -- x addr ) 11 bit CAN2_F23R1 ; \ CAN2_F23R1_FB11, Filter bits
    : CAN2_F23R1_FB12 ( -- x addr ) 12 bit CAN2_F23R1 ; \ CAN2_F23R1_FB12, Filter bits
    : CAN2_F23R1_FB13 ( -- x addr ) 13 bit CAN2_F23R1 ; \ CAN2_F23R1_FB13, Filter bits
    : CAN2_F23R1_FB14 ( -- x addr ) 14 bit CAN2_F23R1 ; \ CAN2_F23R1_FB14, Filter bits
    : CAN2_F23R1_FB15 ( -- x addr ) 15 bit CAN2_F23R1 ; \ CAN2_F23R1_FB15, Filter bits
    : CAN2_F23R1_FB16 ( -- x addr ) 16 bit CAN2_F23R1 ; \ CAN2_F23R1_FB16, Filter bits
    : CAN2_F23R1_FB17 ( -- x addr ) 17 bit CAN2_F23R1 ; \ CAN2_F23R1_FB17, Filter bits
    : CAN2_F23R1_FB18 ( -- x addr ) 18 bit CAN2_F23R1 ; \ CAN2_F23R1_FB18, Filter bits
    : CAN2_F23R1_FB19 ( -- x addr ) 19 bit CAN2_F23R1 ; \ CAN2_F23R1_FB19, Filter bits
    : CAN2_F23R1_FB20 ( -- x addr ) 20 bit CAN2_F23R1 ; \ CAN2_F23R1_FB20, Filter bits
    : CAN2_F23R1_FB21 ( -- x addr ) 21 bit CAN2_F23R1 ; \ CAN2_F23R1_FB21, Filter bits
    : CAN2_F23R1_FB22 ( -- x addr ) 22 bit CAN2_F23R1 ; \ CAN2_F23R1_FB22, Filter bits
    : CAN2_F23R1_FB23 ( -- x addr ) 23 bit CAN2_F23R1 ; \ CAN2_F23R1_FB23, Filter bits
    : CAN2_F23R1_FB24 ( -- x addr ) 24 bit CAN2_F23R1 ; \ CAN2_F23R1_FB24, Filter bits
    : CAN2_F23R1_FB25 ( -- x addr ) 25 bit CAN2_F23R1 ; \ CAN2_F23R1_FB25, Filter bits
    : CAN2_F23R1_FB26 ( -- x addr ) 26 bit CAN2_F23R1 ; \ CAN2_F23R1_FB26, Filter bits
    : CAN2_F23R1_FB27 ( -- x addr ) 27 bit CAN2_F23R1 ; \ CAN2_F23R1_FB27, Filter bits
    : CAN2_F23R1_FB28 ( -- x addr ) 28 bit CAN2_F23R1 ; \ CAN2_F23R1_FB28, Filter bits
    : CAN2_F23R1_FB29 ( -- x addr ) 29 bit CAN2_F23R1 ; \ CAN2_F23R1_FB29, Filter bits
    : CAN2_F23R1_FB30 ( -- x addr ) 30 bit CAN2_F23R1 ; \ CAN2_F23R1_FB30, Filter bits
    : CAN2_F23R1_FB31 ( -- x addr ) 31 bit CAN2_F23R1 ; \ CAN2_F23R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F23R2 (read-write) Reset:0x00000000
    : CAN2_F23R2_FB0 ( -- x addr ) 0 bit CAN2_F23R2 ; \ CAN2_F23R2_FB0, Filter bits
    : CAN2_F23R2_FB1 ( -- x addr ) 1 bit CAN2_F23R2 ; \ CAN2_F23R2_FB1, Filter bits
    : CAN2_F23R2_FB2 ( -- x addr ) 2 bit CAN2_F23R2 ; \ CAN2_F23R2_FB2, Filter bits
    : CAN2_F23R2_FB3 ( -- x addr ) 3 bit CAN2_F23R2 ; \ CAN2_F23R2_FB3, Filter bits
    : CAN2_F23R2_FB4 ( -- x addr ) 4 bit CAN2_F23R2 ; \ CAN2_F23R2_FB4, Filter bits
    : CAN2_F23R2_FB5 ( -- x addr ) 5 bit CAN2_F23R2 ; \ CAN2_F23R2_FB5, Filter bits
    : CAN2_F23R2_FB6 ( -- x addr ) 6 bit CAN2_F23R2 ; \ CAN2_F23R2_FB6, Filter bits
    : CAN2_F23R2_FB7 ( -- x addr ) 7 bit CAN2_F23R2 ; \ CAN2_F23R2_FB7, Filter bits
    : CAN2_F23R2_FB8 ( -- x addr ) 8 bit CAN2_F23R2 ; \ CAN2_F23R2_FB8, Filter bits
    : CAN2_F23R2_FB9 ( -- x addr ) 9 bit CAN2_F23R2 ; \ CAN2_F23R2_FB9, Filter bits
    : CAN2_F23R2_FB10 ( -- x addr ) 10 bit CAN2_F23R2 ; \ CAN2_F23R2_FB10, Filter bits
    : CAN2_F23R2_FB11 ( -- x addr ) 11 bit CAN2_F23R2 ; \ CAN2_F23R2_FB11, Filter bits
    : CAN2_F23R2_FB12 ( -- x addr ) 12 bit CAN2_F23R2 ; \ CAN2_F23R2_FB12, Filter bits
    : CAN2_F23R2_FB13 ( -- x addr ) 13 bit CAN2_F23R2 ; \ CAN2_F23R2_FB13, Filter bits
    : CAN2_F23R2_FB14 ( -- x addr ) 14 bit CAN2_F23R2 ; \ CAN2_F23R2_FB14, Filter bits
    : CAN2_F23R2_FB15 ( -- x addr ) 15 bit CAN2_F23R2 ; \ CAN2_F23R2_FB15, Filter bits
    : CAN2_F23R2_FB16 ( -- x addr ) 16 bit CAN2_F23R2 ; \ CAN2_F23R2_FB16, Filter bits
    : CAN2_F23R2_FB17 ( -- x addr ) 17 bit CAN2_F23R2 ; \ CAN2_F23R2_FB17, Filter bits
    : CAN2_F23R2_FB18 ( -- x addr ) 18 bit CAN2_F23R2 ; \ CAN2_F23R2_FB18, Filter bits
    : CAN2_F23R2_FB19 ( -- x addr ) 19 bit CAN2_F23R2 ; \ CAN2_F23R2_FB19, Filter bits
    : CAN2_F23R2_FB20 ( -- x addr ) 20 bit CAN2_F23R2 ; \ CAN2_F23R2_FB20, Filter bits
    : CAN2_F23R2_FB21 ( -- x addr ) 21 bit CAN2_F23R2 ; \ CAN2_F23R2_FB21, Filter bits
    : CAN2_F23R2_FB22 ( -- x addr ) 22 bit CAN2_F23R2 ; \ CAN2_F23R2_FB22, Filter bits
    : CAN2_F23R2_FB23 ( -- x addr ) 23 bit CAN2_F23R2 ; \ CAN2_F23R2_FB23, Filter bits
    : CAN2_F23R2_FB24 ( -- x addr ) 24 bit CAN2_F23R2 ; \ CAN2_F23R2_FB24, Filter bits
    : CAN2_F23R2_FB25 ( -- x addr ) 25 bit CAN2_F23R2 ; \ CAN2_F23R2_FB25, Filter bits
    : CAN2_F23R2_FB26 ( -- x addr ) 26 bit CAN2_F23R2 ; \ CAN2_F23R2_FB26, Filter bits
    : CAN2_F23R2_FB27 ( -- x addr ) 27 bit CAN2_F23R2 ; \ CAN2_F23R2_FB27, Filter bits
    : CAN2_F23R2_FB28 ( -- x addr ) 28 bit CAN2_F23R2 ; \ CAN2_F23R2_FB28, Filter bits
    : CAN2_F23R2_FB29 ( -- x addr ) 29 bit CAN2_F23R2 ; \ CAN2_F23R2_FB29, Filter bits
    : CAN2_F23R2_FB30 ( -- x addr ) 30 bit CAN2_F23R2 ; \ CAN2_F23R2_FB30, Filter bits
    : CAN2_F23R2_FB31 ( -- x addr ) 31 bit CAN2_F23R2 ; \ CAN2_F23R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F24R1 (read-write) Reset:0x00000000
    : CAN2_F24R1_FB0 ( -- x addr ) 0 bit CAN2_F24R1 ; \ CAN2_F24R1_FB0, Filter bits
    : CAN2_F24R1_FB1 ( -- x addr ) 1 bit CAN2_F24R1 ; \ CAN2_F24R1_FB1, Filter bits
    : CAN2_F24R1_FB2 ( -- x addr ) 2 bit CAN2_F24R1 ; \ CAN2_F24R1_FB2, Filter bits
    : CAN2_F24R1_FB3 ( -- x addr ) 3 bit CAN2_F24R1 ; \ CAN2_F24R1_FB3, Filter bits
    : CAN2_F24R1_FB4 ( -- x addr ) 4 bit CAN2_F24R1 ; \ CAN2_F24R1_FB4, Filter bits
    : CAN2_F24R1_FB5 ( -- x addr ) 5 bit CAN2_F24R1 ; \ CAN2_F24R1_FB5, Filter bits
    : CAN2_F24R1_FB6 ( -- x addr ) 6 bit CAN2_F24R1 ; \ CAN2_F24R1_FB6, Filter bits
    : CAN2_F24R1_FB7 ( -- x addr ) 7 bit CAN2_F24R1 ; \ CAN2_F24R1_FB7, Filter bits
    : CAN2_F24R1_FB8 ( -- x addr ) 8 bit CAN2_F24R1 ; \ CAN2_F24R1_FB8, Filter bits
    : CAN2_F24R1_FB9 ( -- x addr ) 9 bit CAN2_F24R1 ; \ CAN2_F24R1_FB9, Filter bits
    : CAN2_F24R1_FB10 ( -- x addr ) 10 bit CAN2_F24R1 ; \ CAN2_F24R1_FB10, Filter bits
    : CAN2_F24R1_FB11 ( -- x addr ) 11 bit CAN2_F24R1 ; \ CAN2_F24R1_FB11, Filter bits
    : CAN2_F24R1_FB12 ( -- x addr ) 12 bit CAN2_F24R1 ; \ CAN2_F24R1_FB12, Filter bits
    : CAN2_F24R1_FB13 ( -- x addr ) 13 bit CAN2_F24R1 ; \ CAN2_F24R1_FB13, Filter bits
    : CAN2_F24R1_FB14 ( -- x addr ) 14 bit CAN2_F24R1 ; \ CAN2_F24R1_FB14, Filter bits
    : CAN2_F24R1_FB15 ( -- x addr ) 15 bit CAN2_F24R1 ; \ CAN2_F24R1_FB15, Filter bits
    : CAN2_F24R1_FB16 ( -- x addr ) 16 bit CAN2_F24R1 ; \ CAN2_F24R1_FB16, Filter bits
    : CAN2_F24R1_FB17 ( -- x addr ) 17 bit CAN2_F24R1 ; \ CAN2_F24R1_FB17, Filter bits
    : CAN2_F24R1_FB18 ( -- x addr ) 18 bit CAN2_F24R1 ; \ CAN2_F24R1_FB18, Filter bits
    : CAN2_F24R1_FB19 ( -- x addr ) 19 bit CAN2_F24R1 ; \ CAN2_F24R1_FB19, Filter bits
    : CAN2_F24R1_FB20 ( -- x addr ) 20 bit CAN2_F24R1 ; \ CAN2_F24R1_FB20, Filter bits
    : CAN2_F24R1_FB21 ( -- x addr ) 21 bit CAN2_F24R1 ; \ CAN2_F24R1_FB21, Filter bits
    : CAN2_F24R1_FB22 ( -- x addr ) 22 bit CAN2_F24R1 ; \ CAN2_F24R1_FB22, Filter bits
    : CAN2_F24R1_FB23 ( -- x addr ) 23 bit CAN2_F24R1 ; \ CAN2_F24R1_FB23, Filter bits
    : CAN2_F24R1_FB24 ( -- x addr ) 24 bit CAN2_F24R1 ; \ CAN2_F24R1_FB24, Filter bits
    : CAN2_F24R1_FB25 ( -- x addr ) 25 bit CAN2_F24R1 ; \ CAN2_F24R1_FB25, Filter bits
    : CAN2_F24R1_FB26 ( -- x addr ) 26 bit CAN2_F24R1 ; \ CAN2_F24R1_FB26, Filter bits
    : CAN2_F24R1_FB27 ( -- x addr ) 27 bit CAN2_F24R1 ; \ CAN2_F24R1_FB27, Filter bits
    : CAN2_F24R1_FB28 ( -- x addr ) 28 bit CAN2_F24R1 ; \ CAN2_F24R1_FB28, Filter bits
    : CAN2_F24R1_FB29 ( -- x addr ) 29 bit CAN2_F24R1 ; \ CAN2_F24R1_FB29, Filter bits
    : CAN2_F24R1_FB30 ( -- x addr ) 30 bit CAN2_F24R1 ; \ CAN2_F24R1_FB30, Filter bits
    : CAN2_F24R1_FB31 ( -- x addr ) 31 bit CAN2_F24R1 ; \ CAN2_F24R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F24R2 (read-write) Reset:0x00000000
    : CAN2_F24R2_FB0 ( -- x addr ) 0 bit CAN2_F24R2 ; \ CAN2_F24R2_FB0, Filter bits
    : CAN2_F24R2_FB1 ( -- x addr ) 1 bit CAN2_F24R2 ; \ CAN2_F24R2_FB1, Filter bits
    : CAN2_F24R2_FB2 ( -- x addr ) 2 bit CAN2_F24R2 ; \ CAN2_F24R2_FB2, Filter bits
    : CAN2_F24R2_FB3 ( -- x addr ) 3 bit CAN2_F24R2 ; \ CAN2_F24R2_FB3, Filter bits
    : CAN2_F24R2_FB4 ( -- x addr ) 4 bit CAN2_F24R2 ; \ CAN2_F24R2_FB4, Filter bits
    : CAN2_F24R2_FB5 ( -- x addr ) 5 bit CAN2_F24R2 ; \ CAN2_F24R2_FB5, Filter bits
    : CAN2_F24R2_FB6 ( -- x addr ) 6 bit CAN2_F24R2 ; \ CAN2_F24R2_FB6, Filter bits
    : CAN2_F24R2_FB7 ( -- x addr ) 7 bit CAN2_F24R2 ; \ CAN2_F24R2_FB7, Filter bits
    : CAN2_F24R2_FB8 ( -- x addr ) 8 bit CAN2_F24R2 ; \ CAN2_F24R2_FB8, Filter bits
    : CAN2_F24R2_FB9 ( -- x addr ) 9 bit CAN2_F24R2 ; \ CAN2_F24R2_FB9, Filter bits
    : CAN2_F24R2_FB10 ( -- x addr ) 10 bit CAN2_F24R2 ; \ CAN2_F24R2_FB10, Filter bits
    : CAN2_F24R2_FB11 ( -- x addr ) 11 bit CAN2_F24R2 ; \ CAN2_F24R2_FB11, Filter bits
    : CAN2_F24R2_FB12 ( -- x addr ) 12 bit CAN2_F24R2 ; \ CAN2_F24R2_FB12, Filter bits
    : CAN2_F24R2_FB13 ( -- x addr ) 13 bit CAN2_F24R2 ; \ CAN2_F24R2_FB13, Filter bits
    : CAN2_F24R2_FB14 ( -- x addr ) 14 bit CAN2_F24R2 ; \ CAN2_F24R2_FB14, Filter bits
    : CAN2_F24R2_FB15 ( -- x addr ) 15 bit CAN2_F24R2 ; \ CAN2_F24R2_FB15, Filter bits
    : CAN2_F24R2_FB16 ( -- x addr ) 16 bit CAN2_F24R2 ; \ CAN2_F24R2_FB16, Filter bits
    : CAN2_F24R2_FB17 ( -- x addr ) 17 bit CAN2_F24R2 ; \ CAN2_F24R2_FB17, Filter bits
    : CAN2_F24R2_FB18 ( -- x addr ) 18 bit CAN2_F24R2 ; \ CAN2_F24R2_FB18, Filter bits
    : CAN2_F24R2_FB19 ( -- x addr ) 19 bit CAN2_F24R2 ; \ CAN2_F24R2_FB19, Filter bits
    : CAN2_F24R2_FB20 ( -- x addr ) 20 bit CAN2_F24R2 ; \ CAN2_F24R2_FB20, Filter bits
    : CAN2_F24R2_FB21 ( -- x addr ) 21 bit CAN2_F24R2 ; \ CAN2_F24R2_FB21, Filter bits
    : CAN2_F24R2_FB22 ( -- x addr ) 22 bit CAN2_F24R2 ; \ CAN2_F24R2_FB22, Filter bits
    : CAN2_F24R2_FB23 ( -- x addr ) 23 bit CAN2_F24R2 ; \ CAN2_F24R2_FB23, Filter bits
    : CAN2_F24R2_FB24 ( -- x addr ) 24 bit CAN2_F24R2 ; \ CAN2_F24R2_FB24, Filter bits
    : CAN2_F24R2_FB25 ( -- x addr ) 25 bit CAN2_F24R2 ; \ CAN2_F24R2_FB25, Filter bits
    : CAN2_F24R2_FB26 ( -- x addr ) 26 bit CAN2_F24R2 ; \ CAN2_F24R2_FB26, Filter bits
    : CAN2_F24R2_FB27 ( -- x addr ) 27 bit CAN2_F24R2 ; \ CAN2_F24R2_FB27, Filter bits
    : CAN2_F24R2_FB28 ( -- x addr ) 28 bit CAN2_F24R2 ; \ CAN2_F24R2_FB28, Filter bits
    : CAN2_F24R2_FB29 ( -- x addr ) 29 bit CAN2_F24R2 ; \ CAN2_F24R2_FB29, Filter bits
    : CAN2_F24R2_FB30 ( -- x addr ) 30 bit CAN2_F24R2 ; \ CAN2_F24R2_FB30, Filter bits
    : CAN2_F24R2_FB31 ( -- x addr ) 31 bit CAN2_F24R2 ; \ CAN2_F24R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F25R1 (read-write) Reset:0x00000000
    : CAN2_F25R1_FB0 ( -- x addr ) 0 bit CAN2_F25R1 ; \ CAN2_F25R1_FB0, Filter bits
    : CAN2_F25R1_FB1 ( -- x addr ) 1 bit CAN2_F25R1 ; \ CAN2_F25R1_FB1, Filter bits
    : CAN2_F25R1_FB2 ( -- x addr ) 2 bit CAN2_F25R1 ; \ CAN2_F25R1_FB2, Filter bits
    : CAN2_F25R1_FB3 ( -- x addr ) 3 bit CAN2_F25R1 ; \ CAN2_F25R1_FB3, Filter bits
    : CAN2_F25R1_FB4 ( -- x addr ) 4 bit CAN2_F25R1 ; \ CAN2_F25R1_FB4, Filter bits
    : CAN2_F25R1_FB5 ( -- x addr ) 5 bit CAN2_F25R1 ; \ CAN2_F25R1_FB5, Filter bits
    : CAN2_F25R1_FB6 ( -- x addr ) 6 bit CAN2_F25R1 ; \ CAN2_F25R1_FB6, Filter bits
    : CAN2_F25R1_FB7 ( -- x addr ) 7 bit CAN2_F25R1 ; \ CAN2_F25R1_FB7, Filter bits
    : CAN2_F25R1_FB8 ( -- x addr ) 8 bit CAN2_F25R1 ; \ CAN2_F25R1_FB8, Filter bits
    : CAN2_F25R1_FB9 ( -- x addr ) 9 bit CAN2_F25R1 ; \ CAN2_F25R1_FB9, Filter bits
    : CAN2_F25R1_FB10 ( -- x addr ) 10 bit CAN2_F25R1 ; \ CAN2_F25R1_FB10, Filter bits
    : CAN2_F25R1_FB11 ( -- x addr ) 11 bit CAN2_F25R1 ; \ CAN2_F25R1_FB11, Filter bits
    : CAN2_F25R1_FB12 ( -- x addr ) 12 bit CAN2_F25R1 ; \ CAN2_F25R1_FB12, Filter bits
    : CAN2_F25R1_FB13 ( -- x addr ) 13 bit CAN2_F25R1 ; \ CAN2_F25R1_FB13, Filter bits
    : CAN2_F25R1_FB14 ( -- x addr ) 14 bit CAN2_F25R1 ; \ CAN2_F25R1_FB14, Filter bits
    : CAN2_F25R1_FB15 ( -- x addr ) 15 bit CAN2_F25R1 ; \ CAN2_F25R1_FB15, Filter bits
    : CAN2_F25R1_FB16 ( -- x addr ) 16 bit CAN2_F25R1 ; \ CAN2_F25R1_FB16, Filter bits
    : CAN2_F25R1_FB17 ( -- x addr ) 17 bit CAN2_F25R1 ; \ CAN2_F25R1_FB17, Filter bits
    : CAN2_F25R1_FB18 ( -- x addr ) 18 bit CAN2_F25R1 ; \ CAN2_F25R1_FB18, Filter bits
    : CAN2_F25R1_FB19 ( -- x addr ) 19 bit CAN2_F25R1 ; \ CAN2_F25R1_FB19, Filter bits
    : CAN2_F25R1_FB20 ( -- x addr ) 20 bit CAN2_F25R1 ; \ CAN2_F25R1_FB20, Filter bits
    : CAN2_F25R1_FB21 ( -- x addr ) 21 bit CAN2_F25R1 ; \ CAN2_F25R1_FB21, Filter bits
    : CAN2_F25R1_FB22 ( -- x addr ) 22 bit CAN2_F25R1 ; \ CAN2_F25R1_FB22, Filter bits
    : CAN2_F25R1_FB23 ( -- x addr ) 23 bit CAN2_F25R1 ; \ CAN2_F25R1_FB23, Filter bits
    : CAN2_F25R1_FB24 ( -- x addr ) 24 bit CAN2_F25R1 ; \ CAN2_F25R1_FB24, Filter bits
    : CAN2_F25R1_FB25 ( -- x addr ) 25 bit CAN2_F25R1 ; \ CAN2_F25R1_FB25, Filter bits
    : CAN2_F25R1_FB26 ( -- x addr ) 26 bit CAN2_F25R1 ; \ CAN2_F25R1_FB26, Filter bits
    : CAN2_F25R1_FB27 ( -- x addr ) 27 bit CAN2_F25R1 ; \ CAN2_F25R1_FB27, Filter bits
    : CAN2_F25R1_FB28 ( -- x addr ) 28 bit CAN2_F25R1 ; \ CAN2_F25R1_FB28, Filter bits
    : CAN2_F25R1_FB29 ( -- x addr ) 29 bit CAN2_F25R1 ; \ CAN2_F25R1_FB29, Filter bits
    : CAN2_F25R1_FB30 ( -- x addr ) 30 bit CAN2_F25R1 ; \ CAN2_F25R1_FB30, Filter bits
    : CAN2_F25R1_FB31 ( -- x addr ) 31 bit CAN2_F25R1 ; \ CAN2_F25R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F25R2 (read-write) Reset:0x00000000
    : CAN2_F25R2_FB0 ( -- x addr ) 0 bit CAN2_F25R2 ; \ CAN2_F25R2_FB0, Filter bits
    : CAN2_F25R2_FB1 ( -- x addr ) 1 bit CAN2_F25R2 ; \ CAN2_F25R2_FB1, Filter bits
    : CAN2_F25R2_FB2 ( -- x addr ) 2 bit CAN2_F25R2 ; \ CAN2_F25R2_FB2, Filter bits
    : CAN2_F25R2_FB3 ( -- x addr ) 3 bit CAN2_F25R2 ; \ CAN2_F25R2_FB3, Filter bits
    : CAN2_F25R2_FB4 ( -- x addr ) 4 bit CAN2_F25R2 ; \ CAN2_F25R2_FB4, Filter bits
    : CAN2_F25R2_FB5 ( -- x addr ) 5 bit CAN2_F25R2 ; \ CAN2_F25R2_FB5, Filter bits
    : CAN2_F25R2_FB6 ( -- x addr ) 6 bit CAN2_F25R2 ; \ CAN2_F25R2_FB6, Filter bits
    : CAN2_F25R2_FB7 ( -- x addr ) 7 bit CAN2_F25R2 ; \ CAN2_F25R2_FB7, Filter bits
    : CAN2_F25R2_FB8 ( -- x addr ) 8 bit CAN2_F25R2 ; \ CAN2_F25R2_FB8, Filter bits
    : CAN2_F25R2_FB9 ( -- x addr ) 9 bit CAN2_F25R2 ; \ CAN2_F25R2_FB9, Filter bits
    : CAN2_F25R2_FB10 ( -- x addr ) 10 bit CAN2_F25R2 ; \ CAN2_F25R2_FB10, Filter bits
    : CAN2_F25R2_FB11 ( -- x addr ) 11 bit CAN2_F25R2 ; \ CAN2_F25R2_FB11, Filter bits
    : CAN2_F25R2_FB12 ( -- x addr ) 12 bit CAN2_F25R2 ; \ CAN2_F25R2_FB12, Filter bits
    : CAN2_F25R2_FB13 ( -- x addr ) 13 bit CAN2_F25R2 ; \ CAN2_F25R2_FB13, Filter bits
    : CAN2_F25R2_FB14 ( -- x addr ) 14 bit CAN2_F25R2 ; \ CAN2_F25R2_FB14, Filter bits
    : CAN2_F25R2_FB15 ( -- x addr ) 15 bit CAN2_F25R2 ; \ CAN2_F25R2_FB15, Filter bits
    : CAN2_F25R2_FB16 ( -- x addr ) 16 bit CAN2_F25R2 ; \ CAN2_F25R2_FB16, Filter bits
    : CAN2_F25R2_FB17 ( -- x addr ) 17 bit CAN2_F25R2 ; \ CAN2_F25R2_FB17, Filter bits
    : CAN2_F25R2_FB18 ( -- x addr ) 18 bit CAN2_F25R2 ; \ CAN2_F25R2_FB18, Filter bits
    : CAN2_F25R2_FB19 ( -- x addr ) 19 bit CAN2_F25R2 ; \ CAN2_F25R2_FB19, Filter bits
    : CAN2_F25R2_FB20 ( -- x addr ) 20 bit CAN2_F25R2 ; \ CAN2_F25R2_FB20, Filter bits
    : CAN2_F25R2_FB21 ( -- x addr ) 21 bit CAN2_F25R2 ; \ CAN2_F25R2_FB21, Filter bits
    : CAN2_F25R2_FB22 ( -- x addr ) 22 bit CAN2_F25R2 ; \ CAN2_F25R2_FB22, Filter bits
    : CAN2_F25R2_FB23 ( -- x addr ) 23 bit CAN2_F25R2 ; \ CAN2_F25R2_FB23, Filter bits
    : CAN2_F25R2_FB24 ( -- x addr ) 24 bit CAN2_F25R2 ; \ CAN2_F25R2_FB24, Filter bits
    : CAN2_F25R2_FB25 ( -- x addr ) 25 bit CAN2_F25R2 ; \ CAN2_F25R2_FB25, Filter bits
    : CAN2_F25R2_FB26 ( -- x addr ) 26 bit CAN2_F25R2 ; \ CAN2_F25R2_FB26, Filter bits
    : CAN2_F25R2_FB27 ( -- x addr ) 27 bit CAN2_F25R2 ; \ CAN2_F25R2_FB27, Filter bits
    : CAN2_F25R2_FB28 ( -- x addr ) 28 bit CAN2_F25R2 ; \ CAN2_F25R2_FB28, Filter bits
    : CAN2_F25R2_FB29 ( -- x addr ) 29 bit CAN2_F25R2 ; \ CAN2_F25R2_FB29, Filter bits
    : CAN2_F25R2_FB30 ( -- x addr ) 30 bit CAN2_F25R2 ; \ CAN2_F25R2_FB30, Filter bits
    : CAN2_F25R2_FB31 ( -- x addr ) 31 bit CAN2_F25R2 ; \ CAN2_F25R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F26R1 (read-write) Reset:0x00000000
    : CAN2_F26R1_FB0 ( -- x addr ) 0 bit CAN2_F26R1 ; \ CAN2_F26R1_FB0, Filter bits
    : CAN2_F26R1_FB1 ( -- x addr ) 1 bit CAN2_F26R1 ; \ CAN2_F26R1_FB1, Filter bits
    : CAN2_F26R1_FB2 ( -- x addr ) 2 bit CAN2_F26R1 ; \ CAN2_F26R1_FB2, Filter bits
    : CAN2_F26R1_FB3 ( -- x addr ) 3 bit CAN2_F26R1 ; \ CAN2_F26R1_FB3, Filter bits
    : CAN2_F26R1_FB4 ( -- x addr ) 4 bit CAN2_F26R1 ; \ CAN2_F26R1_FB4, Filter bits
    : CAN2_F26R1_FB5 ( -- x addr ) 5 bit CAN2_F26R1 ; \ CAN2_F26R1_FB5, Filter bits
    : CAN2_F26R1_FB6 ( -- x addr ) 6 bit CAN2_F26R1 ; \ CAN2_F26R1_FB6, Filter bits
    : CAN2_F26R1_FB7 ( -- x addr ) 7 bit CAN2_F26R1 ; \ CAN2_F26R1_FB7, Filter bits
    : CAN2_F26R1_FB8 ( -- x addr ) 8 bit CAN2_F26R1 ; \ CAN2_F26R1_FB8, Filter bits
    : CAN2_F26R1_FB9 ( -- x addr ) 9 bit CAN2_F26R1 ; \ CAN2_F26R1_FB9, Filter bits
    : CAN2_F26R1_FB10 ( -- x addr ) 10 bit CAN2_F26R1 ; \ CAN2_F26R1_FB10, Filter bits
    : CAN2_F26R1_FB11 ( -- x addr ) 11 bit CAN2_F26R1 ; \ CAN2_F26R1_FB11, Filter bits
    : CAN2_F26R1_FB12 ( -- x addr ) 12 bit CAN2_F26R1 ; \ CAN2_F26R1_FB12, Filter bits
    : CAN2_F26R1_FB13 ( -- x addr ) 13 bit CAN2_F26R1 ; \ CAN2_F26R1_FB13, Filter bits
    : CAN2_F26R1_FB14 ( -- x addr ) 14 bit CAN2_F26R1 ; \ CAN2_F26R1_FB14, Filter bits
    : CAN2_F26R1_FB15 ( -- x addr ) 15 bit CAN2_F26R1 ; \ CAN2_F26R1_FB15, Filter bits
    : CAN2_F26R1_FB16 ( -- x addr ) 16 bit CAN2_F26R1 ; \ CAN2_F26R1_FB16, Filter bits
    : CAN2_F26R1_FB17 ( -- x addr ) 17 bit CAN2_F26R1 ; \ CAN2_F26R1_FB17, Filter bits
    : CAN2_F26R1_FB18 ( -- x addr ) 18 bit CAN2_F26R1 ; \ CAN2_F26R1_FB18, Filter bits
    : CAN2_F26R1_FB19 ( -- x addr ) 19 bit CAN2_F26R1 ; \ CAN2_F26R1_FB19, Filter bits
    : CAN2_F26R1_FB20 ( -- x addr ) 20 bit CAN2_F26R1 ; \ CAN2_F26R1_FB20, Filter bits
    : CAN2_F26R1_FB21 ( -- x addr ) 21 bit CAN2_F26R1 ; \ CAN2_F26R1_FB21, Filter bits
    : CAN2_F26R1_FB22 ( -- x addr ) 22 bit CAN2_F26R1 ; \ CAN2_F26R1_FB22, Filter bits
    : CAN2_F26R1_FB23 ( -- x addr ) 23 bit CAN2_F26R1 ; \ CAN2_F26R1_FB23, Filter bits
    : CAN2_F26R1_FB24 ( -- x addr ) 24 bit CAN2_F26R1 ; \ CAN2_F26R1_FB24, Filter bits
    : CAN2_F26R1_FB25 ( -- x addr ) 25 bit CAN2_F26R1 ; \ CAN2_F26R1_FB25, Filter bits
    : CAN2_F26R1_FB26 ( -- x addr ) 26 bit CAN2_F26R1 ; \ CAN2_F26R1_FB26, Filter bits
    : CAN2_F26R1_FB27 ( -- x addr ) 27 bit CAN2_F26R1 ; \ CAN2_F26R1_FB27, Filter bits
    : CAN2_F26R1_FB28 ( -- x addr ) 28 bit CAN2_F26R1 ; \ CAN2_F26R1_FB28, Filter bits
    : CAN2_F26R1_FB29 ( -- x addr ) 29 bit CAN2_F26R1 ; \ CAN2_F26R1_FB29, Filter bits
    : CAN2_F26R1_FB30 ( -- x addr ) 30 bit CAN2_F26R1 ; \ CAN2_F26R1_FB30, Filter bits
    : CAN2_F26R1_FB31 ( -- x addr ) 31 bit CAN2_F26R1 ; \ CAN2_F26R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F26R2 (read-write) Reset:0x00000000
    : CAN2_F26R2_FB0 ( -- x addr ) 0 bit CAN2_F26R2 ; \ CAN2_F26R2_FB0, Filter bits
    : CAN2_F26R2_FB1 ( -- x addr ) 1 bit CAN2_F26R2 ; \ CAN2_F26R2_FB1, Filter bits
    : CAN2_F26R2_FB2 ( -- x addr ) 2 bit CAN2_F26R2 ; \ CAN2_F26R2_FB2, Filter bits
    : CAN2_F26R2_FB3 ( -- x addr ) 3 bit CAN2_F26R2 ; \ CAN2_F26R2_FB3, Filter bits
    : CAN2_F26R2_FB4 ( -- x addr ) 4 bit CAN2_F26R2 ; \ CAN2_F26R2_FB4, Filter bits
    : CAN2_F26R2_FB5 ( -- x addr ) 5 bit CAN2_F26R2 ; \ CAN2_F26R2_FB5, Filter bits
    : CAN2_F26R2_FB6 ( -- x addr ) 6 bit CAN2_F26R2 ; \ CAN2_F26R2_FB6, Filter bits
    : CAN2_F26R2_FB7 ( -- x addr ) 7 bit CAN2_F26R2 ; \ CAN2_F26R2_FB7, Filter bits
    : CAN2_F26R2_FB8 ( -- x addr ) 8 bit CAN2_F26R2 ; \ CAN2_F26R2_FB8, Filter bits
    : CAN2_F26R2_FB9 ( -- x addr ) 9 bit CAN2_F26R2 ; \ CAN2_F26R2_FB9, Filter bits
    : CAN2_F26R2_FB10 ( -- x addr ) 10 bit CAN2_F26R2 ; \ CAN2_F26R2_FB10, Filter bits
    : CAN2_F26R2_FB11 ( -- x addr ) 11 bit CAN2_F26R2 ; \ CAN2_F26R2_FB11, Filter bits
    : CAN2_F26R2_FB12 ( -- x addr ) 12 bit CAN2_F26R2 ; \ CAN2_F26R2_FB12, Filter bits
    : CAN2_F26R2_FB13 ( -- x addr ) 13 bit CAN2_F26R2 ; \ CAN2_F26R2_FB13, Filter bits
    : CAN2_F26R2_FB14 ( -- x addr ) 14 bit CAN2_F26R2 ; \ CAN2_F26R2_FB14, Filter bits
    : CAN2_F26R2_FB15 ( -- x addr ) 15 bit CAN2_F26R2 ; \ CAN2_F26R2_FB15, Filter bits
    : CAN2_F26R2_FB16 ( -- x addr ) 16 bit CAN2_F26R2 ; \ CAN2_F26R2_FB16, Filter bits
    : CAN2_F26R2_FB17 ( -- x addr ) 17 bit CAN2_F26R2 ; \ CAN2_F26R2_FB17, Filter bits
    : CAN2_F26R2_FB18 ( -- x addr ) 18 bit CAN2_F26R2 ; \ CAN2_F26R2_FB18, Filter bits
    : CAN2_F26R2_FB19 ( -- x addr ) 19 bit CAN2_F26R2 ; \ CAN2_F26R2_FB19, Filter bits
    : CAN2_F26R2_FB20 ( -- x addr ) 20 bit CAN2_F26R2 ; \ CAN2_F26R2_FB20, Filter bits
    : CAN2_F26R2_FB21 ( -- x addr ) 21 bit CAN2_F26R2 ; \ CAN2_F26R2_FB21, Filter bits
    : CAN2_F26R2_FB22 ( -- x addr ) 22 bit CAN2_F26R2 ; \ CAN2_F26R2_FB22, Filter bits
    : CAN2_F26R2_FB23 ( -- x addr ) 23 bit CAN2_F26R2 ; \ CAN2_F26R2_FB23, Filter bits
    : CAN2_F26R2_FB24 ( -- x addr ) 24 bit CAN2_F26R2 ; \ CAN2_F26R2_FB24, Filter bits
    : CAN2_F26R2_FB25 ( -- x addr ) 25 bit CAN2_F26R2 ; \ CAN2_F26R2_FB25, Filter bits
    : CAN2_F26R2_FB26 ( -- x addr ) 26 bit CAN2_F26R2 ; \ CAN2_F26R2_FB26, Filter bits
    : CAN2_F26R2_FB27 ( -- x addr ) 27 bit CAN2_F26R2 ; \ CAN2_F26R2_FB27, Filter bits
    : CAN2_F26R2_FB28 ( -- x addr ) 28 bit CAN2_F26R2 ; \ CAN2_F26R2_FB28, Filter bits
    : CAN2_F26R2_FB29 ( -- x addr ) 29 bit CAN2_F26R2 ; \ CAN2_F26R2_FB29, Filter bits
    : CAN2_F26R2_FB30 ( -- x addr ) 30 bit CAN2_F26R2 ; \ CAN2_F26R2_FB30, Filter bits
    : CAN2_F26R2_FB31 ( -- x addr ) 31 bit CAN2_F26R2 ; \ CAN2_F26R2_FB31, Filter bits
  [then]

  execute-defined? use-CAN2 [if]
    \ CAN2_F27R1 (read-write) Reset:0x00000000
    : CAN2_F27R1_FB0 ( -- x addr ) 0 bit CAN2_F27R1 ; \ CAN2_F27R1_FB0, Filter bits
    : CAN2_F27R1_FB1 ( -- x addr ) 1 bit CAN2_F27R1 ; \ CAN2_F27R1_FB1, Filter bits
    : CAN2_F27R1_FB2 ( -- x addr ) 2 bit CAN2_F27R1 ; \ CAN2_F27R1_FB2, Filter bits
    : CAN2_F27R1_FB3 ( -- x addr ) 3 bit CAN2_F27R1 ; \ CAN2_F27R1_FB3, Filter bits
    : CAN2_F27R1_FB4 ( -- x addr ) 4 bit CAN2_F27R1 ; \ CAN2_F27R1_FB4, Filter bits
    : CAN2_F27R1_FB5 ( -- x addr ) 5 bit CAN2_F27R1 ; \ CAN2_F27R1_FB5, Filter bits
    : CAN2_F27R1_FB6 ( -- x addr ) 6 bit CAN2_F27R1 ; \ CAN2_F27R1_FB6, Filter bits
    : CAN2_F27R1_FB7 ( -- x addr ) 7 bit CAN2_F27R1 ; \ CAN2_F27R1_FB7, Filter bits
    : CAN2_F27R1_FB8 ( -- x addr ) 8 bit CAN2_F27R1 ; \ CAN2_F27R1_FB8, Filter bits
    : CAN2_F27R1_FB9 ( -- x addr ) 9 bit CAN2_F27R1 ; \ CAN2_F27R1_FB9, Filter bits
    : CAN2_F27R1_FB10 ( -- x addr ) 10 bit CAN2_F27R1 ; \ CAN2_F27R1_FB10, Filter bits
    : CAN2_F27R1_FB11 ( -- x addr ) 11 bit CAN2_F27R1 ; \ CAN2_F27R1_FB11, Filter bits
    : CAN2_F27R1_FB12 ( -- x addr ) 12 bit CAN2_F27R1 ; \ CAN2_F27R1_FB12, Filter bits
    : CAN2_F27R1_FB13 ( -- x addr ) 13 bit CAN2_F27R1 ; \ CAN2_F27R1_FB13, Filter bits
    : CAN2_F27R1_FB14 ( -- x addr ) 14 bit CAN2_F27R1 ; \ CAN2_F27R1_FB14, Filter bits
    : CAN2_F27R1_FB15 ( -- x addr ) 15 bit CAN2_F27R1 ; \ CAN2_F27R1_FB15, Filter bits
    : CAN2_F27R1_FB16 ( -- x addr ) 16 bit CAN2_F27R1 ; \ CAN2_F27R1_FB16, Filter bits
    : CAN2_F27R1_FB17 ( -- x addr ) 17 bit CAN2_F27R1 ; \ CAN2_F27R1_FB17, Filter bits
    : CAN2_F27R1_FB18 ( -- x addr ) 18 bit CAN2_F27R1 ; \ CAN2_F27R1_FB18, Filter bits
    : CAN2_F27R1_FB19 ( -- x addr ) 19 bit CAN2_F27R1 ; \ CAN2_F27R1_FB19, Filter bits
    : CAN2_F27R1_FB20 ( -- x addr ) 20 bit CAN2_F27R1 ; \ CAN2_F27R1_FB20, Filter bits
    : CAN2_F27R1_FB21 ( -- x addr ) 21 bit CAN2_F27R1 ; \ CAN2_F27R1_FB21, Filter bits
    : CAN2_F27R1_FB22 ( -- x addr ) 22 bit CAN2_F27R1 ; \ CAN2_F27R1_FB22, Filter bits
    : CAN2_F27R1_FB23 ( -- x addr ) 23 bit CAN2_F27R1 ; \ CAN2_F27R1_FB23, Filter bits
    : CAN2_F27R1_FB24 ( -- x addr ) 24 bit CAN2_F27R1 ; \ CAN2_F27R1_FB24, Filter bits
    : CAN2_F27R1_FB25 ( -- x addr ) 25 bit CAN2_F27R1 ; \ CAN2_F27R1_FB25, Filter bits
    : CAN2_F27R1_FB26 ( -- x addr ) 26 bit CAN2_F27R1 ; \ CAN2_F27R1_FB26, Filter bits
    : CAN2_F27R1_FB27 ( -- x addr ) 27 bit CAN2_F27R1 ; \ CAN2_F27R1_FB27, Filter bits
    : CAN2_F27R1_FB28 ( -- x addr ) 28 bit CAN2_F27R1 ; \ CAN2_F27R1_FB28, Filter bits
    : CAN2_F27R1_FB29 ( -- x addr ) 29 bit CAN2_F27R1 ; \ CAN2_F27R1_FB29, Filter bits
    : CAN2_F27R1_FB30 ( -- x addr ) 30 bit CAN2_F27R1 ; \ CAN2_F27R1_FB30, Filter bits
    : CAN2_F27R1_FB31 ( -- x addr ) 31 bit CAN2_F27R1 ; \ CAN2_F27R1_FB31, Filter bits
  [then]

  [if]
    \ CAN2_F27R2 (read-write) Reset:0x00000000
    : CAN2_F27R2_FB0 ( -- x addr ) 0 bit CAN2_F27R2 ; \ CAN2_F27R2_FB0, Filter bits
    : CAN2_F27R2_FB1 ( -- x addr ) 1 bit CAN2_F27R2 ; \ CAN2_F27R2_FB1, Filter bits
    : CAN2_F27R2_FB2 ( -- x addr ) 2 bit CAN2_F27R2 ; \ CAN2_F27R2_FB2, Filter bits
    : CAN2_F27R2_FB3 ( -- x addr ) 3 bit CAN2_F27R2 ; \ CAN2_F27R2_FB3, Filter bits
    : CAN2_F27R2_FB4 ( -- x addr ) 4 bit CAN2_F27R2 ; \ CAN2_F27R2_FB4, Filter bits
    : CAN2_F27R2_FB5 ( -- x addr ) 5 bit CAN2_F27R2 ; \ CAN2_F27R2_FB5, Filter bits
    : CAN2_F27R2_FB6 ( -- x addr ) 6 bit CAN2_F27R2 ; \ CAN2_F27R2_FB6, Filter bits
    : CAN2_F27R2_FB7 ( -- x addr ) 7 bit CAN2_F27R2 ; \ CAN2_F27R2_FB7, Filter bits
    : CAN2_F27R2_FB8 ( -- x addr ) 8 bit CAN2_F27R2 ; \ CAN2_F27R2_FB8, Filter bits
    : CAN2_F27R2_FB9 ( -- x addr ) 9 bit CAN2_F27R2 ; \ CAN2_F27R2_FB9, Filter bits
    : CAN2_F27R2_FB10 ( -- x addr ) 10 bit CAN2_F27R2 ; \ CAN2_F27R2_FB10, Filter bits
    : CAN2_F27R2_FB11 ( -- x addr ) 11 bit CAN2_F27R2 ; \ CAN2_F27R2_FB11, Filter bits
    : CAN2_F27R2_FB12 ( -- x addr ) 12 bit CAN2_F27R2 ; \ CAN2_F27R2_FB12, Filter bits
    : CAN2_F27R2_FB13 ( -- x addr ) 13 bit CAN2_F27R2 ; \ CAN2_F27R2_FB13, Filter bits
    : CAN2_F27R2_FB14 ( -- x addr ) 14 bit CAN2_F27R2 ; \ CAN2_F27R2_FB14, Filter bits
    : CAN2_F27R2_FB15 ( -- x addr ) 15 bit CAN2_F27R2 ; \ CAN2_F27R2_FB15, Filter bits
    : CAN2_F27R2_FB16 ( -- x addr ) 16 bit CAN2_F27R2 ; \ CAN2_F27R2_FB16, Filter bits
    : CAN2_F27R2_FB17 ( -- x addr ) 17 bit CAN2_F27R2 ; \ CAN2_F27R2_FB17, Filter bits
    : CAN2_F27R2_FB18 ( -- x addr ) 18 bit CAN2_F27R2 ; \ CAN2_F27R2_FB18, Filter bits
    : CAN2_F27R2_FB19 ( -- x addr ) 19 bit CAN2_F27R2 ; \ CAN2_F27R2_FB19, Filter bits
    : CAN2_F27R2_FB20 ( -- x addr ) 20 bit CAN2_F27R2 ; \ CAN2_F27R2_FB20, Filter bits
    : CAN2_F27R2_FB21 ( -- x addr ) 21 bit CAN2_F27R2 ; \ CAN2_F27R2_FB21, Filter bits
    : CAN2_F27R2_FB22 ( -- x addr ) 22 bit CAN2_F27R2 ; \ CAN2_F27R2_FB22, Filter bits
    : CAN2_F27R2_FB23 ( -- x addr ) 23 bit CAN2_F27R2 ; \ CAN2_F27R2_FB23, Filter bits
    : CAN2_F27R2_FB24 ( -- x addr ) 24 bit CAN2_F27R2 ; \ CAN2_F27R2_FB24, Filter bits
    : CAN2_F27R2_FB25 ( -- x addr ) 25 bit CAN2_F27R2 ; \ CAN2_F27R2_FB25, Filter bits
    : CAN2_F27R2_FB26 ( -- x addr ) 26 bit CAN2_F27R2 ; \ CAN2_F27R2_FB26, Filter bits
    : CAN2_F27R2_FB27 ( -- x addr ) 27 bit CAN2_F27R2 ; \ CAN2_F27R2_FB27, Filter bits
    : CAN2_F27R2_FB28 ( -- x addr ) 28 bit CAN2_F27R2 ; \ CAN2_F27R2_FB28, Filter bits
    : CAN2_F27R2_FB29 ( -- x addr ) 29 bit CAN2_F27R2 ; \ CAN2_F27R2_FB29, Filter bits
    : CAN2_F27R2_FB30 ( -- x addr ) 30 bit CAN2_F27R2 ; \ CAN2_F27R2_FB30, Filter bits
    : CAN2_F27R2_FB31 ( -- x addr ) 31 bit CAN2_F27R2 ; \ CAN2_F27R2_FB31, Filter bits
  [then]

  execute-defined? use-FLASH [if]
    \ FLASH_ACR (multiple-access)  Reset:0x00000000
    : FLASH_ACR_LATENCY ( %bbb -- x addr ) FLASH_ACR ; \ FLASH_ACR_LATENCY, Latency
    : FLASH_ACR_PRFTEN ( -- x addr ) 8 bit FLASH_ACR ; \ FLASH_ACR_PRFTEN, Prefetch enable
    : FLASH_ACR_ICEN ( -- x addr ) 9 bit FLASH_ACR ; \ FLASH_ACR_ICEN, Instruction cache enable
    : FLASH_ACR_DCEN ( -- x addr ) 10 bit FLASH_ACR ; \ FLASH_ACR_DCEN, Data cache enable
    : FLASH_ACR_ICRST ( -- x addr ) 11 bit FLASH_ACR ; \ FLASH_ACR_ICRST, Instruction cache reset
    : FLASH_ACR_DCRST ( -- x addr ) 12 bit FLASH_ACR ; \ FLASH_ACR_DCRST, Data cache reset
  [then]

  [if]
    \ FLASH_KEYR (write-only) Reset:0x00000000
    : FLASH_KEYR_KEY ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) FLASH_KEYR ; \ FLASH_KEYR_KEY, FPEC key
  [then]

  execute-defined? use-FLASH [if]
    \ FLASH_OPTKEYR (write-only) Reset:0x00000000
    : FLASH_OPTKEYR_OPTKEY ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) FLASH_OPTKEYR ; \ FLASH_OPTKEYR_OPTKEY, Option byte key
  [then]

  [if]
    \ FLASH_SR (multiple-access)  Reset:0x00000000
    : FLASH_SR_EOP ( -- x addr ) 0 bit FLASH_SR ; \ FLASH_SR_EOP, End of operation
    : FLASH_SR_OPERR ( -- x addr ) 1 bit FLASH_SR ; \ FLASH_SR_OPERR, Operation error
    : FLASH_SR_WRPERR ( -- x addr ) 4 bit FLASH_SR ; \ FLASH_SR_WRPERR, Write protection error
    : FLASH_SR_PGAERR ( -- x addr ) 5 bit FLASH_SR ; \ FLASH_SR_PGAERR, Programming alignment  error
    : FLASH_SR_PGPERR ( -- x addr ) 6 bit FLASH_SR ; \ FLASH_SR_PGPERR, Programming parallelism  error
    : FLASH_SR_PGSERR ( -- x addr ) 7 bit FLASH_SR ; \ FLASH_SR_PGSERR, Programming sequence error
    : FLASH_SR_BSY ( -- x addr ) 16 bit FLASH_SR ; \ FLASH_SR_BSY, Busy
  [then]

  execute-defined? use-FLASH [if]
    \ FLASH_CR (read-write) Reset:0x80000000
    : FLASH_CR_PG ( -- x addr ) 0 bit FLASH_CR ; \ FLASH_CR_PG, Programming
    : FLASH_CR_SER ( -- x addr ) 1 bit FLASH_CR ; \ FLASH_CR_SER, Sector Erase
    : FLASH_CR_MER ( -- x addr ) 2 bit FLASH_CR ; \ FLASH_CR_MER, Mass Erase
    : FLASH_CR_SNB ( %bbbb -- x addr ) 3 lshift FLASH_CR ; \ FLASH_CR_SNB, Sector number
    : FLASH_CR_PSIZE ( %bb -- x addr ) 8 lshift FLASH_CR ; \ FLASH_CR_PSIZE, Program size
    : FLASH_CR_STRT ( -- x addr ) 16 bit FLASH_CR ; \ FLASH_CR_STRT, Start
    : FLASH_CR_EOPIE ( -- x addr ) 24 bit FLASH_CR ; \ FLASH_CR_EOPIE, End of operation interrupt  enable
    : FLASH_CR_ERRIE ( -- x addr ) 25 bit FLASH_CR ; \ FLASH_CR_ERRIE, Error interrupt enable
    : FLASH_CR_LOCK ( -- x addr ) 31 bit FLASH_CR ; \ FLASH_CR_LOCK, Lock
  [then]

  [if]
    \ FLASH_OPTCR (read-write) Reset:0x00000014
    : FLASH_OPTCR_OPTLOCK ( -- x addr ) 0 bit FLASH_OPTCR ; \ FLASH_OPTCR_OPTLOCK, Option lock
    : FLASH_OPTCR_OPTSTRT ( -- x addr ) 1 bit FLASH_OPTCR ; \ FLASH_OPTCR_OPTSTRT, Option start
    : FLASH_OPTCR_BOR_LEV ( %bb -- x addr ) 2 lshift FLASH_OPTCR ; \ FLASH_OPTCR_BOR_LEV, BOR reset Level
    : FLASH_OPTCR_WDG_SW ( -- x addr ) 5 bit FLASH_OPTCR ; \ FLASH_OPTCR_WDG_SW, WDG_SW User option bytes
    : FLASH_OPTCR_nRST_STOP ( -- x addr ) 6 bit FLASH_OPTCR ; \ FLASH_OPTCR_nRST_STOP, nRST_STOP User option  bytes
    : FLASH_OPTCR_nRST_STDBY ( -- x addr ) 7 bit FLASH_OPTCR ; \ FLASH_OPTCR_nRST_STDBY, nRST_STDBY User option  bytes
    : FLASH_OPTCR_RDP ( %bbbbbbbb -- x addr ) 8 lshift FLASH_OPTCR ; \ FLASH_OPTCR_RDP, Read protect
    : FLASH_OPTCR_nWRP ( %bbbbbbbbbbb -- x addr ) 16 lshift FLASH_OPTCR ; \ FLASH_OPTCR_nWRP, Not write protect
  [then]

  execute-defined? use-EXTI [if]
    \ EXTI_IMR (read-write) Reset:0x00000000
    : EXTI_IMR_MR0 ( -- x addr ) 0 bit EXTI_IMR ; \ EXTI_IMR_MR0, Interrupt Mask on line 0
    : EXTI_IMR_MR1 ( -- x addr ) 1 bit EXTI_IMR ; \ EXTI_IMR_MR1, Interrupt Mask on line 1
    : EXTI_IMR_MR2 ( -- x addr ) 2 bit EXTI_IMR ; \ EXTI_IMR_MR2, Interrupt Mask on line 2
    : EXTI_IMR_MR3 ( -- x addr ) 3 bit EXTI_IMR ; \ EXTI_IMR_MR3, Interrupt Mask on line 3
    : EXTI_IMR_MR4 ( -- x addr ) 4 bit EXTI_IMR ; \ EXTI_IMR_MR4, Interrupt Mask on line 4
    : EXTI_IMR_MR5 ( -- x addr ) 5 bit EXTI_IMR ; \ EXTI_IMR_MR5, Interrupt Mask on line 5
    : EXTI_IMR_MR6 ( -- x addr ) 6 bit EXTI_IMR ; \ EXTI_IMR_MR6, Interrupt Mask on line 6
    : EXTI_IMR_MR7 ( -- x addr ) 7 bit EXTI_IMR ; \ EXTI_IMR_MR7, Interrupt Mask on line 7
    : EXTI_IMR_MR8 ( -- x addr ) 8 bit EXTI_IMR ; \ EXTI_IMR_MR8, Interrupt Mask on line 8
    : EXTI_IMR_MR9 ( -- x addr ) 9 bit EXTI_IMR ; \ EXTI_IMR_MR9, Interrupt Mask on line 9
    : EXTI_IMR_MR10 ( -- x addr ) 10 bit EXTI_IMR ; \ EXTI_IMR_MR10, Interrupt Mask on line 10
    : EXTI_IMR_MR11 ( -- x addr ) 11 bit EXTI_IMR ; \ EXTI_IMR_MR11, Interrupt Mask on line 11
    : EXTI_IMR_MR12 ( -- x addr ) 12 bit EXTI_IMR ; \ EXTI_IMR_MR12, Interrupt Mask on line 12
    : EXTI_IMR_MR13 ( -- x addr ) 13 bit EXTI_IMR ; \ EXTI_IMR_MR13, Interrupt Mask on line 13
    : EXTI_IMR_MR14 ( -- x addr ) 14 bit EXTI_IMR ; \ EXTI_IMR_MR14, Interrupt Mask on line 14
    : EXTI_IMR_MR15 ( -- x addr ) 15 bit EXTI_IMR ; \ EXTI_IMR_MR15, Interrupt Mask on line 15
    : EXTI_IMR_MR16 ( -- x addr ) 16 bit EXTI_IMR ; \ EXTI_IMR_MR16, Interrupt Mask on line 16
    : EXTI_IMR_MR17 ( -- x addr ) 17 bit EXTI_IMR ; \ EXTI_IMR_MR17, Interrupt Mask on line 17
    : EXTI_IMR_MR18 ( -- x addr ) 18 bit EXTI_IMR ; \ EXTI_IMR_MR18, Interrupt Mask on line 18
    : EXTI_IMR_MR19 ( -- x addr ) 19 bit EXTI_IMR ; \ EXTI_IMR_MR19, Interrupt Mask on line 19
    : EXTI_IMR_MR20 ( -- x addr ) 20 bit EXTI_IMR ; \ EXTI_IMR_MR20, Interrupt Mask on line 20
    : EXTI_IMR_MR21 ( -- x addr ) 21 bit EXTI_IMR ; \ EXTI_IMR_MR21, Interrupt Mask on line 21
    : EXTI_IMR_MR22 ( -- x addr ) 22 bit EXTI_IMR ; \ EXTI_IMR_MR22, Interrupt Mask on line 22
  [then]

  [if]
    \ EXTI_EMR (read-write) Reset:0x00000000
    : EXTI_EMR_MR0 ( -- x addr ) 0 bit EXTI_EMR ; \ EXTI_EMR_MR0, Event Mask on line 0
    : EXTI_EMR_MR1 ( -- x addr ) 1 bit EXTI_EMR ; \ EXTI_EMR_MR1, Event Mask on line 1
    : EXTI_EMR_MR2 ( -- x addr ) 2 bit EXTI_EMR ; \ EXTI_EMR_MR2, Event Mask on line 2
    : EXTI_EMR_MR3 ( -- x addr ) 3 bit EXTI_EMR ; \ EXTI_EMR_MR3, Event Mask on line 3
    : EXTI_EMR_MR4 ( -- x addr ) 4 bit EXTI_EMR ; \ EXTI_EMR_MR4, Event Mask on line 4
    : EXTI_EMR_MR5 ( -- x addr ) 5 bit EXTI_EMR ; \ EXTI_EMR_MR5, Event Mask on line 5
    : EXTI_EMR_MR6 ( -- x addr ) 6 bit EXTI_EMR ; \ EXTI_EMR_MR6, Event Mask on line 6
    : EXTI_EMR_MR7 ( -- x addr ) 7 bit EXTI_EMR ; \ EXTI_EMR_MR7, Event Mask on line 7
    : EXTI_EMR_MR8 ( -- x addr ) 8 bit EXTI_EMR ; \ EXTI_EMR_MR8, Event Mask on line 8
    : EXTI_EMR_MR9 ( -- x addr ) 9 bit EXTI_EMR ; \ EXTI_EMR_MR9, Event Mask on line 9
    : EXTI_EMR_MR10 ( -- x addr ) 10 bit EXTI_EMR ; \ EXTI_EMR_MR10, Event Mask on line 10
    : EXTI_EMR_MR11 ( -- x addr ) 11 bit EXTI_EMR ; \ EXTI_EMR_MR11, Event Mask on line 11
    : EXTI_EMR_MR12 ( -- x addr ) 12 bit EXTI_EMR ; \ EXTI_EMR_MR12, Event Mask on line 12
    : EXTI_EMR_MR13 ( -- x addr ) 13 bit EXTI_EMR ; \ EXTI_EMR_MR13, Event Mask on line 13
    : EXTI_EMR_MR14 ( -- x addr ) 14 bit EXTI_EMR ; \ EXTI_EMR_MR14, Event Mask on line 14
    : EXTI_EMR_MR15 ( -- x addr ) 15 bit EXTI_EMR ; \ EXTI_EMR_MR15, Event Mask on line 15
    : EXTI_EMR_MR16 ( -- x addr ) 16 bit EXTI_EMR ; \ EXTI_EMR_MR16, Event Mask on line 16
    : EXTI_EMR_MR17 ( -- x addr ) 17 bit EXTI_EMR ; \ EXTI_EMR_MR17, Event Mask on line 17
    : EXTI_EMR_MR18 ( -- x addr ) 18 bit EXTI_EMR ; \ EXTI_EMR_MR18, Event Mask on line 18
    : EXTI_EMR_MR19 ( -- x addr ) 19 bit EXTI_EMR ; \ EXTI_EMR_MR19, Event Mask on line 19
    : EXTI_EMR_MR20 ( -- x addr ) 20 bit EXTI_EMR ; \ EXTI_EMR_MR20, Event Mask on line 20
    : EXTI_EMR_MR21 ( -- x addr ) 21 bit EXTI_EMR ; \ EXTI_EMR_MR21, Event Mask on line 21
    : EXTI_EMR_MR22 ( -- x addr ) 22 bit EXTI_EMR ; \ EXTI_EMR_MR22, Event Mask on line 22
  [then]

  execute-defined? use-EXTI [if]
    \ EXTI_RTSR (read-write) Reset:0x00000000
    : EXTI_RTSR_TR0 ( -- x addr ) 0 bit EXTI_RTSR ; \ EXTI_RTSR_TR0, Rising trigger event configuration of  line 0
    : EXTI_RTSR_TR1 ( -- x addr ) 1 bit EXTI_RTSR ; \ EXTI_RTSR_TR1, Rising trigger event configuration of  line 1
    : EXTI_RTSR_TR2 ( -- x addr ) 2 bit EXTI_RTSR ; \ EXTI_RTSR_TR2, Rising trigger event configuration of  line 2
    : EXTI_RTSR_TR3 ( -- x addr ) 3 bit EXTI_RTSR ; \ EXTI_RTSR_TR3, Rising trigger event configuration of  line 3
    : EXTI_RTSR_TR4 ( -- x addr ) 4 bit EXTI_RTSR ; \ EXTI_RTSR_TR4, Rising trigger event configuration of  line 4
    : EXTI_RTSR_TR5 ( -- x addr ) 5 bit EXTI_RTSR ; \ EXTI_RTSR_TR5, Rising trigger event configuration of  line 5
    : EXTI_RTSR_TR6 ( -- x addr ) 6 bit EXTI_RTSR ; \ EXTI_RTSR_TR6, Rising trigger event configuration of  line 6
    : EXTI_RTSR_TR7 ( -- x addr ) 7 bit EXTI_RTSR ; \ EXTI_RTSR_TR7, Rising trigger event configuration of  line 7
    : EXTI_RTSR_TR8 ( -- x addr ) 8 bit EXTI_RTSR ; \ EXTI_RTSR_TR8, Rising trigger event configuration of  line 8
    : EXTI_RTSR_TR9 ( -- x addr ) 9 bit EXTI_RTSR ; \ EXTI_RTSR_TR9, Rising trigger event configuration of  line 9
    : EXTI_RTSR_TR10 ( -- x addr ) 10 bit EXTI_RTSR ; \ EXTI_RTSR_TR10, Rising trigger event configuration of  line 10
    : EXTI_RTSR_TR11 ( -- x addr ) 11 bit EXTI_RTSR ; \ EXTI_RTSR_TR11, Rising trigger event configuration of  line 11
    : EXTI_RTSR_TR12 ( -- x addr ) 12 bit EXTI_RTSR ; \ EXTI_RTSR_TR12, Rising trigger event configuration of  line 12
    : EXTI_RTSR_TR13 ( -- x addr ) 13 bit EXTI_RTSR ; \ EXTI_RTSR_TR13, Rising trigger event configuration of  line 13
    : EXTI_RTSR_TR14 ( -- x addr ) 14 bit EXTI_RTSR ; \ EXTI_RTSR_TR14, Rising trigger event configuration of  line 14
    : EXTI_RTSR_TR15 ( -- x addr ) 15 bit EXTI_RTSR ; \ EXTI_RTSR_TR15, Rising trigger event configuration of  line 15
    : EXTI_RTSR_TR16 ( -- x addr ) 16 bit EXTI_RTSR ; \ EXTI_RTSR_TR16, Rising trigger event configuration of  line 16
    : EXTI_RTSR_TR17 ( -- x addr ) 17 bit EXTI_RTSR ; \ EXTI_RTSR_TR17, Rising trigger event configuration of  line 17
    : EXTI_RTSR_TR18 ( -- x addr ) 18 bit EXTI_RTSR ; \ EXTI_RTSR_TR18, Rising trigger event configuration of  line 18
    : EXTI_RTSR_TR19 ( -- x addr ) 19 bit EXTI_RTSR ; \ EXTI_RTSR_TR19, Rising trigger event configuration of  line 19
    : EXTI_RTSR_TR20 ( -- x addr ) 20 bit EXTI_RTSR ; \ EXTI_RTSR_TR20, Rising trigger event configuration of  line 20
    : EXTI_RTSR_TR21 ( -- x addr ) 21 bit EXTI_RTSR ; \ EXTI_RTSR_TR21, Rising trigger event configuration of  line 21
    : EXTI_RTSR_TR22 ( -- x addr ) 22 bit EXTI_RTSR ; \ EXTI_RTSR_TR22, Rising trigger event configuration of  line 22
  [then]

  [if]
    \ EXTI_FTSR (read-write) Reset:0x00000000
    : EXTI_FTSR_TR0 ( -- x addr ) 0 bit EXTI_FTSR ; \ EXTI_FTSR_TR0, Falling trigger event configuration of  line 0
    : EXTI_FTSR_TR1 ( -- x addr ) 1 bit EXTI_FTSR ; \ EXTI_FTSR_TR1, Falling trigger event configuration of  line 1
    : EXTI_FTSR_TR2 ( -- x addr ) 2 bit EXTI_FTSR ; \ EXTI_FTSR_TR2, Falling trigger event configuration of  line 2
    : EXTI_FTSR_TR3 ( -- x addr ) 3 bit EXTI_FTSR ; \ EXTI_FTSR_TR3, Falling trigger event configuration of  line 3
    : EXTI_FTSR_TR4 ( -- x addr ) 4 bit EXTI_FTSR ; \ EXTI_FTSR_TR4, Falling trigger event configuration of  line 4
    : EXTI_FTSR_TR5 ( -- x addr ) 5 bit EXTI_FTSR ; \ EXTI_FTSR_TR5, Falling trigger event configuration of  line 5
    : EXTI_FTSR_TR6 ( -- x addr ) 6 bit EXTI_FTSR ; \ EXTI_FTSR_TR6, Falling trigger event configuration of  line 6
    : EXTI_FTSR_TR7 ( -- x addr ) 7 bit EXTI_FTSR ; \ EXTI_FTSR_TR7, Falling trigger event configuration of  line 7
    : EXTI_FTSR_TR8 ( -- x addr ) 8 bit EXTI_FTSR ; \ EXTI_FTSR_TR8, Falling trigger event configuration of  line 8
    : EXTI_FTSR_TR9 ( -- x addr ) 9 bit EXTI_FTSR ; \ EXTI_FTSR_TR9, Falling trigger event configuration of  line 9
    : EXTI_FTSR_TR10 ( -- x addr ) 10 bit EXTI_FTSR ; \ EXTI_FTSR_TR10, Falling trigger event configuration of  line 10
    : EXTI_FTSR_TR11 ( -- x addr ) 11 bit EXTI_FTSR ; \ EXTI_FTSR_TR11, Falling trigger event configuration of  line 11
    : EXTI_FTSR_TR12 ( -- x addr ) 12 bit EXTI_FTSR ; \ EXTI_FTSR_TR12, Falling trigger event configuration of  line 12
    : EXTI_FTSR_TR13 ( -- x addr ) 13 bit EXTI_FTSR ; \ EXTI_FTSR_TR13, Falling trigger event configuration of  line 13
    : EXTI_FTSR_TR14 ( -- x addr ) 14 bit EXTI_FTSR ; \ EXTI_FTSR_TR14, Falling trigger event configuration of  line 14
    : EXTI_FTSR_TR15 ( -- x addr ) 15 bit EXTI_FTSR ; \ EXTI_FTSR_TR15, Falling trigger event configuration of  line 15
    : EXTI_FTSR_TR16 ( -- x addr ) 16 bit EXTI_FTSR ; \ EXTI_FTSR_TR16, Falling trigger event configuration of  line 16
    : EXTI_FTSR_TR17 ( -- x addr ) 17 bit EXTI_FTSR ; \ EXTI_FTSR_TR17, Falling trigger event configuration of  line 17
    : EXTI_FTSR_TR18 ( -- x addr ) 18 bit EXTI_FTSR ; \ EXTI_FTSR_TR18, Falling trigger event configuration of  line 18
    : EXTI_FTSR_TR19 ( -- x addr ) 19 bit EXTI_FTSR ; \ EXTI_FTSR_TR19, Falling trigger event configuration of  line 19
    : EXTI_FTSR_TR20 ( -- x addr ) 20 bit EXTI_FTSR ; \ EXTI_FTSR_TR20, Falling trigger event configuration of  line 20
    : EXTI_FTSR_TR21 ( -- x addr ) 21 bit EXTI_FTSR ; \ EXTI_FTSR_TR21, Falling trigger event configuration of  line 21
    : EXTI_FTSR_TR22 ( -- x addr ) 22 bit EXTI_FTSR ; \ EXTI_FTSR_TR22, Falling trigger event configuration of  line 22
  [then]

  execute-defined? use-EXTI [if]
    \ EXTI_SWIER (read-write) Reset:0x00000000
    : EXTI_SWIER_SWIER0 ( -- x addr ) 0 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER0, Software Interrupt on line  0
    : EXTI_SWIER_SWIER1 ( -- x addr ) 1 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER1, Software Interrupt on line  1
    : EXTI_SWIER_SWIER2 ( -- x addr ) 2 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER2, Software Interrupt on line  2
    : EXTI_SWIER_SWIER3 ( -- x addr ) 3 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER3, Software Interrupt on line  3
    : EXTI_SWIER_SWIER4 ( -- x addr ) 4 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER4, Software Interrupt on line  4
    : EXTI_SWIER_SWIER5 ( -- x addr ) 5 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER5, Software Interrupt on line  5
    : EXTI_SWIER_SWIER6 ( -- x addr ) 6 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER6, Software Interrupt on line  6
    : EXTI_SWIER_SWIER7 ( -- x addr ) 7 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER7, Software Interrupt on line  7
    : EXTI_SWIER_SWIER8 ( -- x addr ) 8 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER8, Software Interrupt on line  8
    : EXTI_SWIER_SWIER9 ( -- x addr ) 9 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER9, Software Interrupt on line  9
    : EXTI_SWIER_SWIER10 ( -- x addr ) 10 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER10, Software Interrupt on line  10
    : EXTI_SWIER_SWIER11 ( -- x addr ) 11 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER11, Software Interrupt on line  11
    : EXTI_SWIER_SWIER12 ( -- x addr ) 12 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER12, Software Interrupt on line  12
    : EXTI_SWIER_SWIER13 ( -- x addr ) 13 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER13, Software Interrupt on line  13
    : EXTI_SWIER_SWIER14 ( -- x addr ) 14 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER14, Software Interrupt on line  14
    : EXTI_SWIER_SWIER15 ( -- x addr ) 15 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER15, Software Interrupt on line  15
    : EXTI_SWIER_SWIER16 ( -- x addr ) 16 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER16, Software Interrupt on line  16
    : EXTI_SWIER_SWIER17 ( -- x addr ) 17 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER17, Software Interrupt on line  17
    : EXTI_SWIER_SWIER18 ( -- x addr ) 18 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER18, Software Interrupt on line  18
    : EXTI_SWIER_SWIER19 ( -- x addr ) 19 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER19, Software Interrupt on line  19
    : EXTI_SWIER_SWIER20 ( -- x addr ) 20 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER20, Software Interrupt on line  20
    : EXTI_SWIER_SWIER21 ( -- x addr ) 21 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER21, Software Interrupt on line  21
    : EXTI_SWIER_SWIER22 ( -- x addr ) 22 bit EXTI_SWIER ; \ EXTI_SWIER_SWIER22, Software Interrupt on line  22
  [then]

  [if]
    \ EXTI_PR (read-write) Reset:0x00000000
    : EXTI_PR_PR0 ( -- x addr ) 0 bit EXTI_PR ; \ EXTI_PR_PR0, Pending bit 0
    : EXTI_PR_PR1 ( -- x addr ) 1 bit EXTI_PR ; \ EXTI_PR_PR1, Pending bit 1
    : EXTI_PR_PR2 ( -- x addr ) 2 bit EXTI_PR ; \ EXTI_PR_PR2, Pending bit 2
    : EXTI_PR_PR3 ( -- x addr ) 3 bit EXTI_PR ; \ EXTI_PR_PR3, Pending bit 3
    : EXTI_PR_PR4 ( -- x addr ) 4 bit EXTI_PR ; \ EXTI_PR_PR4, Pending bit 4
    : EXTI_PR_PR5 ( -- x addr ) 5 bit EXTI_PR ; \ EXTI_PR_PR5, Pending bit 5
    : EXTI_PR_PR6 ( -- x addr ) 6 bit EXTI_PR ; \ EXTI_PR_PR6, Pending bit 6
    : EXTI_PR_PR7 ( -- x addr ) 7 bit EXTI_PR ; \ EXTI_PR_PR7, Pending bit 7
    : EXTI_PR_PR8 ( -- x addr ) 8 bit EXTI_PR ; \ EXTI_PR_PR8, Pending bit 8
    : EXTI_PR_PR9 ( -- x addr ) 9 bit EXTI_PR ; \ EXTI_PR_PR9, Pending bit 9
    : EXTI_PR_PR10 ( -- x addr ) 10 bit EXTI_PR ; \ EXTI_PR_PR10, Pending bit 10
    : EXTI_PR_PR11 ( -- x addr ) 11 bit EXTI_PR ; \ EXTI_PR_PR11, Pending bit 11
    : EXTI_PR_PR12 ( -- x addr ) 12 bit EXTI_PR ; \ EXTI_PR_PR12, Pending bit 12
    : EXTI_PR_PR13 ( -- x addr ) 13 bit EXTI_PR ; \ EXTI_PR_PR13, Pending bit 13
    : EXTI_PR_PR14 ( -- x addr ) 14 bit EXTI_PR ; \ EXTI_PR_PR14, Pending bit 14
    : EXTI_PR_PR15 ( -- x addr ) 15 bit EXTI_PR ; \ EXTI_PR_PR15, Pending bit 15
    : EXTI_PR_PR16 ( -- x addr ) 16 bit EXTI_PR ; \ EXTI_PR_PR16, Pending bit 16
    : EXTI_PR_PR17 ( -- x addr ) 17 bit EXTI_PR ; \ EXTI_PR_PR17, Pending bit 17
    : EXTI_PR_PR18 ( -- x addr ) 18 bit EXTI_PR ; \ EXTI_PR_PR18, Pending bit 18
    : EXTI_PR_PR19 ( -- x addr ) 19 bit EXTI_PR ; \ EXTI_PR_PR19, Pending bit 19
    : EXTI_PR_PR20 ( -- x addr ) 20 bit EXTI_PR ; \ EXTI_PR_PR20, Pending bit 20
    : EXTI_PR_PR21 ( -- x addr ) 21 bit EXTI_PR ; \ EXTI_PR_PR21, Pending bit 21
    : EXTI_PR_PR22 ( -- x addr ) 22 bit EXTI_PR ; \ EXTI_PR_PR22, Pending bit 22
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL (multiple-access)  Reset:0x00000800
    : OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQSCS ( -- x addr ) 0 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQSCS, Session request success
    : OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQ ( -- x addr ) 1 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQ, Session request
    : OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNGSCS ( -- x addr ) 8 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNGSCS, Host negotiation success
    : OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNPRQ ( -- x addr ) 9 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNPRQ, HNP request
    : OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HSHNPEN ( -- x addr ) 10 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HSHNPEN, Host set HNP enable
    : OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DHNPEN ( -- x addr ) 11 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DHNPEN, Device HNP enabled
    : OTG_HS_GLOBAL_OTG_HS_GOTGCTL_CIDSTS? ( -- 1|0 ) 16 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL bit@ ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_CIDSTS, Connector ID status
    : OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DBCT ( -- x addr ) 17 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DBCT, Long/short debounce time
    : OTG_HS_GLOBAL_OTG_HS_GOTGCTL_ASVLD ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_ASVLD, A-session valid
    : OTG_HS_GLOBAL_OTG_HS_GOTGCTL_BSVLD ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GOTGCTL ; \ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_BSVLD, B-session valid
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_GOTGINT (read-write) Reset:0x0
    : OTG_HS_GLOBAL_OTG_HS_GOTGINT_SEDET ( -- x addr ) 2 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_SEDET, Session end detected
    : OTG_HS_GLOBAL_OTG_HS_GOTGINT_SRSSCHG ( -- x addr ) 8 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_SRSSCHG, Session request success status  change
    : OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNSSCHG ( -- x addr ) 9 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNSSCHG, Host negotiation success status  change
    : OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNGDET ( -- x addr ) 17 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNGDET, Host negotiation detected
    : OTG_HS_GLOBAL_OTG_HS_GOTGINT_ADTOCHG ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_ADTOCHG, A-device timeout change
    : OTG_HS_GLOBAL_OTG_HS_GOTGINT_DBCDNE ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GOTGINT ; \ OTG_HS_GLOBAL_OTG_HS_GOTGINT_DBCDNE, Debounce done
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_GAHBCFG (read-write) Reset:0x0
    : OTG_HS_GLOBAL_OTG_HS_GAHBCFG_GINT ( -- x addr ) 0 bit OTG_HS_GLOBAL_OTG_HS_GAHBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_GINT, Global interrupt mask
    : OTG_HS_GLOBAL_OTG_HS_GAHBCFG_HBSTLEN ( %bbbb -- x addr ) 1 lshift OTG_HS_GLOBAL_OTG_HS_GAHBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_HBSTLEN, Burst length/type
    : OTG_HS_GLOBAL_OTG_HS_GAHBCFG_DMAEN ( -- x addr ) 5 bit OTG_HS_GLOBAL_OTG_HS_GAHBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_DMAEN, DMA enable
    : OTG_HS_GLOBAL_OTG_HS_GAHBCFG_TXFELVL ( -- x addr ) 7 bit OTG_HS_GLOBAL_OTG_HS_GAHBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_TXFELVL, TxFIFO empty level
    : OTG_HS_GLOBAL_OTG_HS_GAHBCFG_PTXFELVL ( -- x addr ) 8 bit OTG_HS_GLOBAL_OTG_HS_GAHBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_PTXFELVL, Periodic TxFIFO empty  level
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG (multiple-access)  Reset:0x00000A00
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TOCAL ( %bbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TOCAL, FS timeout calibration
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYSEL ( -- x addr ) 6 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYSEL, USB 2.0 high-speed ULPI PHY or USB 1.1  full-speed serial transceiver select
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_SRPCAP ( -- x addr ) 8 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_SRPCAP, SRP-capable
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_HNPCAP ( -- x addr ) 9 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_HNPCAP, HNP-capable
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TRDT ( %bbbb -- x addr ) 10 lshift OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TRDT, USB turnaround time
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYLPCS ( -- x addr ) 15 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYLPCS, PHY Low-power clock select
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIFSLS ( -- x addr ) 17 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIFSLS, ULPI FS/LS select
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIAR ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIAR, ULPI Auto-resume
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPICSM ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPICSM, ULPI Clock SuspendM
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSD ( -- x addr ) 20 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSD, ULPI External VBUS Drive
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSI ( -- x addr ) 21 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSI, ULPI external VBUS  indicator
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TSDPS ( -- x addr ) 22 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TSDPS, TermSel DLine pulsing  selection
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PCCI ( -- x addr ) 23 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PCCI, Indicator complement
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PTCI ( -- x addr ) 24 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PTCI, Indicator pass through
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIIPD ( -- x addr ) 25 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIIPD, ULPI interface protect  disable
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FHMOD ( -- x addr ) 29 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FHMOD, Forced host mode
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FDMOD ( -- x addr ) 30 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FDMOD, Forced peripheral mode
    : OTG_HS_GLOBAL_OTG_HS_GUSBCFG_CTXPKT ( -- x addr ) 31 bit OTG_HS_GLOBAL_OTG_HS_GUSBCFG ; \ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_CTXPKT, Corrupt Tx packet
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL (multiple-access)  Reset:0x20000000
    : OTG_HS_GLOBAL_OTG_HS_GRSTCTL_CSRST ( -- x addr ) 0 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_CSRST, Core soft reset
    : OTG_HS_GLOBAL_OTG_HS_GRSTCTL_HSRST ( -- x addr ) 1 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_HSRST, HCLK soft reset
    : OTG_HS_GLOBAL_OTG_HS_GRSTCTL_FCRST ( -- x addr ) 2 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_FCRST, Host frame counter reset
    : OTG_HS_GLOBAL_OTG_HS_GRSTCTL_RXFFLSH ( -- x addr ) 4 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_RXFFLSH, RxFIFO flush
    : OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFFLSH ( -- x addr ) 5 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFFLSH, TxFIFO flush
    : OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFNUM ( %bbbbb -- x addr ) 6 lshift OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFNUM, TxFIFO number
    : OTG_HS_GLOBAL_OTG_HS_GRSTCTL_DMAREQ ( -- x addr ) 30 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_DMAREQ, DMA request signal
    : OTG_HS_GLOBAL_OTG_HS_GRSTCTL_AHBIDL ( -- x addr ) 31 bit OTG_HS_GLOBAL_OTG_HS_GRSTCTL ; \ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_AHBIDL, AHB master idle
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_GINTSTS (multiple-access)  Reset:0x04000020
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_CMOD ( -- x addr ) 0 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_CMOD, Current mode of operation
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_MMIS ( -- x addr ) 1 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_MMIS, Mode mismatch interrupt
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_OTGINT ( -- x addr ) 2 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_OTGINT, OTG interrupt
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_SOF ( -- x addr ) 3 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_SOF, Start of frame
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_RXFLVL ( -- x addr ) 4 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_RXFLVL, RxFIFO nonempty
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_NPTXFE ( -- x addr ) 5 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_NPTXFE, Nonperiodic TxFIFO empty
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_GINAKEFF ( -- x addr ) 6 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_GINAKEFF, Global IN nonperiodic NAK  effective
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_BOUTNAKEFF ( -- x addr ) 7 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_BOUTNAKEFF, Global OUT NAK effective
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_ESUSP ( -- x addr ) 10 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ESUSP, Early suspend
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBSUSP ( -- x addr ) 11 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBSUSP, USB suspend
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBRST ( -- x addr ) 12 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBRST, USB reset
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_ENUMDNE ( -- x addr ) 13 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ENUMDNE, Enumeration done
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_ISOODRP ( -- x addr ) 14 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ISOODRP, Isochronous OUT packet dropped  interrupt
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_EOPF ( -- x addr ) 15 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_EOPF, End of periodic frame  interrupt
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_IEPINT ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_IEPINT, IN endpoint interrupt
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_OEPINT ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_OEPINT, OUT endpoint interrupt
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_IISOIXFR ( -- x addr ) 20 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_IISOIXFR, Incomplete isochronous IN  transfer
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_PXFR_INCOMPISOOUT ( -- x addr ) 21 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_PXFR_INCOMPISOOUT, Incomplete periodic  transfer
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_DATAFSUSP ( -- x addr ) 22 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_DATAFSUSP, Data fetch suspended
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_HPRTINT ( -- x addr ) 24 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_HPRTINT, Host port interrupt
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_HCINT ( -- x addr ) 25 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_HCINT, Host channels interrupt
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_PTXFE ( -- x addr ) 26 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_PTXFE, Periodic TxFIFO empty
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_CIDSCHG? ( -- 1|0 ) 28 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS bit@ ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_CIDSCHG, Connector ID status change
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_DISCINT ( -- x addr ) 29 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_DISCINT, Disconnect detected  interrupt
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_SRQINT ( -- x addr ) 30 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_SRQINT, Session request/new session detected  interrupt
    : OTG_HS_GLOBAL_OTG_HS_GINTSTS_WKUINT ( -- x addr ) 31 bit OTG_HS_GLOBAL_OTG_HS_GINTSTS ; \ OTG_HS_GLOBAL_OTG_HS_GINTSTS_WKUINT, Resume/remote wakeup detected  interrupt
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_GINTMSK (multiple-access)  Reset:0x0
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_MMISM ( -- x addr ) 1 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_MMISM, Mode mismatch interrupt  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_OTGINT ( -- x addr ) 2 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_OTGINT, OTG interrupt mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_SOFM ( -- x addr ) 3 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_SOFM, Start of frame mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_RXFLVLM ( -- x addr ) 4 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_RXFLVLM, Receive FIFO nonempty mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_NPTXFEM ( -- x addr ) 5 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_NPTXFEM, Nonperiodic TxFIFO empty  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_GINAKEFFM ( -- x addr ) 6 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_GINAKEFFM, Global nonperiodic IN NAK effective  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_GONAKEFFM ( -- x addr ) 7 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_GONAKEFFM, Global OUT NAK effective  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_ESUSPM ( -- x addr ) 10 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ESUSPM, Early suspend mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBSUSPM ( -- x addr ) 11 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBSUSPM, USB suspend mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBRST ( -- x addr ) 12 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBRST, USB reset mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_ENUMDNEM ( -- x addr ) 13 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ENUMDNEM, Enumeration done mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_ISOODRPM ( -- x addr ) 14 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ISOODRPM, Isochronous OUT packet dropped interrupt  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_EOPFM ( -- x addr ) 15 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_EOPFM, End of periodic frame interrupt  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_EPMISM ( -- x addr ) 17 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_EPMISM, Endpoint mismatch interrupt  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_IEPINT ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_IEPINT, IN endpoints interrupt  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_OEPINT ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_OEPINT, OUT endpoints interrupt  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_IISOIXFRM ( -- x addr ) 20 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_IISOIXFRM, Incomplete isochronous IN transfer  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_PXFRM_IISOOXFRM ( -- x addr ) 21 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PXFRM_IISOOXFRM, Incomplete periodic transfer  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_FSUSPM ( -- x addr ) 22 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_FSUSPM, Data fetch suspended mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_PRTIM ( -- x addr ) 24 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PRTIM, Host port interrupt mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_HCIM ( -- x addr ) 25 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_HCIM, Host channels interrupt  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_PTXFEM ( -- x addr ) 26 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PTXFEM, Periodic TxFIFO empty mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_CIDSCHGM? ( -- 1|0 ) 28 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK bit@ ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_CIDSCHGM, Connector ID status change  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_DISCINT ( -- x addr ) 29 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_DISCINT, Disconnect detected interrupt  mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_SRQIM ( -- x addr ) 30 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_SRQIM, Session request/new session detected  interrupt mask
    : OTG_HS_GLOBAL_OTG_HS_GINTMSK_WUIM ( -- x addr ) 31 bit OTG_HS_GLOBAL_OTG_HS_GINTMSK ; \ OTG_HS_GLOBAL_OTG_HS_GINTMSK_WUIM, Resume/remote wakeup detected interrupt  mask
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host (read-only) Reset:0x0
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_CHNUM? ( --  x ) OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_CHNUM, Channel number
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_BCNT? ( --  x ) 4 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_BCNT, Byte count
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_DPID? ( --  x ) 15 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_DPID, Data PID
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_PKTSTS? ( --  x ) 17 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_PKTSTS, Packet status
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host (read-only) Reset:0x0
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_CHNUM? ( --  x ) OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_CHNUM, Channel number
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_BCNT? ( --  x ) 4 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_BCNT, Byte count
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_DPID? ( --  x ) 15 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_DPID, Data PID
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_PKTSTS? ( --  x ) 17 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_PKTSTS, Packet status
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_GRXFSIZ (read-write) Reset:0x00000200
    : OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_RXFD ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_GRXFSIZ ; \ OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_RXFD, RxFIFO depth
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host (read-write) Reset:0x00000200
    : OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_NPTXFSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host ; \ OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_NPTXFSA, Nonperiodic transmit RAM start  address
    : OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_NPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host ; \ OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_NPTXFD, Nonperiodic TxFIFO depth
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral (read-write) Reset:0x00000200
    : OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_TX0FSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral ; \ OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_TX0FSA, Endpoint 0 transmit RAM start  address
    : OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_TX0FD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral ; \ OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_TX0FD, Endpoint 0 TxFIFO depth
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS (read-only) Reset:0x00080200
    : OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXFSAV? ( --  x ) OTG_HS_GLOBAL_OTG_HS_GNPTXSTS @ ; \ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXFSAV, Nonperiodic TxFIFO space  available
    : OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTQXSAV? ( --  x ) 16 lshift OTG_HS_GLOBAL_OTG_HS_GNPTXSTS @ ; \ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTQXSAV, Nonperiodic transmit request queue space  available
    : OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXQTOP? ( --  x ) 24 lshift OTG_HS_GLOBAL_OTG_HS_GNPTXSTS @ ; \ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXQTOP, Top of the nonperiodic transmit request  queue
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_GCCFG (read-write) Reset:0x0
    : OTG_HS_GLOBAL_OTG_HS_GCCFG_PWRDWN ( -- x addr ) 16 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_PWRDWN, Power down
    : OTG_HS_GLOBAL_OTG_HS_GCCFG_I2CPADEN ( -- x addr ) 17 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_I2CPADEN, Enable I2C bus connection for the  external I2C PHY interface
    : OTG_HS_GLOBAL_OTG_HS_GCCFG_VBUSASEN ( -- x addr ) 18 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_VBUSASEN, Enable the VBUS sensing  device
    : OTG_HS_GLOBAL_OTG_HS_GCCFG_VBUSBSEN ( -- x addr ) 19 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_VBUSBSEN, Enable the VBUS sensing device
    : OTG_HS_GLOBAL_OTG_HS_GCCFG_SOFOUTEN ( -- x addr ) 20 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_SOFOUTEN, SOF output enable
    : OTG_HS_GLOBAL_OTG_HS_GCCFG_NOVBUSSENS ( -- x addr ) 21 bit OTG_HS_GLOBAL_OTG_HS_GCCFG ; \ OTG_HS_GLOBAL_OTG_HS_GCCFG_NOVBUSSENS, VBUS sensing disable  option
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_CID (read-write) Reset:0x00001200
    : OTG_HS_GLOBAL_OTG_HS_CID_PRODUCT_ID ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_CID ; \ OTG_HS_GLOBAL_OTG_HS_CID_PRODUCT_ID, Product ID field
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ (read-write) Reset:0x02000600
    : OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ ; \ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXSA, Host periodic TxFIFO start  address
    : OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ ; \ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXFD, Host periodic TxFIFO depth
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1 (read-write) Reset:0x02000400
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF1 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXSA, IN endpoint FIFOx transmit RAM start  address
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF1 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXFD, IN endpoint TxFIFO depth
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2 (read-write) Reset:0x02000400
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF2 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXSA, IN endpoint FIFOx transmit RAM start  address
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF2 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXFD, IN endpoint TxFIFO depth
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3 (read-write) Reset:0x02000400
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF3 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXSA, IN endpoint FIFOx transmit RAM start  address
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF3 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXFD, IN endpoint TxFIFO depth
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4 (read-write) Reset:0x02000400
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF4 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXSA, IN endpoint FIFOx transmit RAM start  address
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF4 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXFD, IN endpoint TxFIFO depth
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5 (read-write) Reset:0x02000400
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF5 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXSA, IN endpoint FIFOx transmit RAM start  address
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF5 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXFD, IN endpoint TxFIFO depth
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6 (read-write) Reset:0x02000400
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF6 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXSA, IN endpoint FIFOx transmit RAM start  address
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF6 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXFD, IN endpoint TxFIFO depth
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7 (read-write) Reset:0x02000400
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXSA ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_GLOBAL_OTG_HS_DIEPTXF7 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXSA, IN endpoint FIFOx transmit RAM start  address
    : OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXFD ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_GLOBAL_OTG_HS_DIEPTXF7 ; \ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXFD, IN endpoint TxFIFO depth
  [then]

  [if]
    \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral (read-only) Reset:0x0
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_EPNUM? ( --  x ) OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_EPNUM, Endpoint number
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_BCNT? ( --  x ) 4 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_BCNT, Byte count
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_DPID? ( --  x ) 15 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_DPID, Data PID
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_PKTSTS? ( --  x ) 17 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_PKTSTS, Packet status
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_FRMNUM? ( --  x ) 21 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_FRMNUM, Frame number
  [then]

  execute-defined? use-OTG_HS_GLOBAL [if]
    \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral (read-only) Reset:0x0
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_EPNUM? ( --  x ) OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_EPNUM, Endpoint number
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_BCNT? ( --  x ) 4 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_BCNT, Byte count
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_DPID? ( --  x ) 15 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_DPID, Data PID
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_PKTSTS? ( --  x ) 17 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_PKTSTS, Packet status
    : OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_FRMNUM? ( --  x ) 21 lshift OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral @ ; \ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_FRMNUM, Frame number
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCFG (multiple-access)  Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCFG_FSLSPCS ( %bb -- x addr ) OTG_HS_HOST_OTG_HS_HCFG ; \ OTG_HS_HOST_OTG_HS_HCFG_FSLSPCS, FS/LS PHY clock select
    : OTG_HS_HOST_OTG_HS_HCFG_FSLSS ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCFG ; \ OTG_HS_HOST_OTG_HS_HCFG_FSLSS, FS- and LS-only support
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HFIR (read-write) Reset:0x0000EA60
    : OTG_HS_HOST_OTG_HS_HFIR_FRIVL ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HFIR ; \ OTG_HS_HOST_OTG_HS_HFIR_FRIVL, Frame interval
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HFNUM (read-only) Reset:0x00003FFF
    : OTG_HS_HOST_OTG_HS_HFNUM_FRNUM? ( --  x ) OTG_HS_HOST_OTG_HS_HFNUM @ ; \ OTG_HS_HOST_OTG_HS_HFNUM_FRNUM, Frame number
    : OTG_HS_HOST_OTG_HS_HFNUM_FTREM? ( --  x ) 16 lshift OTG_HS_HOST_OTG_HS_HFNUM @ ; \ OTG_HS_HOST_OTG_HS_HFNUM_FTREM, Frame time remaining
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HPTXSTS (multiple-access)  Reset:0x00080100
    : OTG_HS_HOST_OTG_HS_HPTXSTS_PTXFSAVL ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HPTXSTS ; \ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXFSAVL, Periodic transmit data FIFO space  available
    : OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQSAV ( %bbbbbbbb -- x addr ) 16 lshift OTG_HS_HOST_OTG_HS_HPTXSTS ; \ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQSAV, Periodic transmit request queue space  available
    : OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQTOP ( %bbbbbbbb -- x addr ) 24 lshift OTG_HS_HOST_OTG_HS_HPTXSTS ; \ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQTOP, Top of the periodic transmit request  queue
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HAINT (read-only) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HAINT_HAINT? ( --  x ) OTG_HS_HOST_OTG_HS_HAINT @ ; \ OTG_HS_HOST_OTG_HS_HAINT_HAINT, Channel interrupts
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HAINTMSK (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HAINTMSK_HAINTM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HAINTMSK ; \ OTG_HS_HOST_OTG_HS_HAINTMSK_HAINTM, Channel interrupt mask
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HPRT (multiple-access)  Reset:0x0
    : OTG_HS_HOST_OTG_HS_HPRT_PCSTS? ( -- 1|0 ) 0 bit OTG_HS_HOST_OTG_HS_HPRT bit@ ; \ OTG_HS_HOST_OTG_HS_HPRT_PCSTS, Port connect status
    : OTG_HS_HOST_OTG_HS_HPRT_PCDET ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PCDET, Port connect detected
    : OTG_HS_HOST_OTG_HS_HPRT_PENA ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PENA, Port enable
    : OTG_HS_HOST_OTG_HS_HPRT_PENCHNG ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PENCHNG, Port enable/disable change
    : OTG_HS_HOST_OTG_HS_HPRT_POCA ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_POCA, Port overcurrent active
    : OTG_HS_HOST_OTG_HS_HPRT_POCCHNG ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_POCCHNG, Port overcurrent change
    : OTG_HS_HOST_OTG_HS_HPRT_PRES ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PRES, Port resume
    : OTG_HS_HOST_OTG_HS_HPRT_PSUSP ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PSUSP, Port suspend
    : OTG_HS_HOST_OTG_HS_HPRT_PRST ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PRST, Port reset
    : OTG_HS_HOST_OTG_HS_HPRT_PLSTS? ( %bb -- 1|0 ) 10 lshift OTG_HS_HOST_OTG_HS_HPRT bit@ ; \ OTG_HS_HOST_OTG_HS_HPRT_PLSTS, Port line status
    : OTG_HS_HOST_OTG_HS_HPRT_PPWR ( -- x addr ) 12 bit OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PPWR, Port power
    : OTG_HS_HOST_OTG_HS_HPRT_PTCTL ( %bbbb -- x addr ) 13 lshift OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PTCTL, Port test control
    : OTG_HS_HOST_OTG_HS_HPRT_PSPD ( %bb -- x addr ) 17 lshift OTG_HS_HOST_OTG_HS_HPRT ; \ OTG_HS_HOST_OTG_HS_HPRT_PSPD, Port speed
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR0 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR0_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR0_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR0_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR0_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR0_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR0_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR0_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR0_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR0_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR0_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR0 ; \ OTG_HS_HOST_OTG_HS_HCCHAR0_CHENA, Channel enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR1 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR1_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR1_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR1_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR1_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR1_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR1_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR1_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR1_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR1_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR1_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR1 ; \ OTG_HS_HOST_OTG_HS_HCCHAR1_CHENA, Channel enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR2 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR2_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR2_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR2_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR2_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR2_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR2_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR2_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR2_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR2_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR2_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR2 ; \ OTG_HS_HOST_OTG_HS_HCCHAR2_CHENA, Channel enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR3 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR3_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR3_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR3_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR3_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR3_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR3_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR3_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR3_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR3_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR3_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR3 ; \ OTG_HS_HOST_OTG_HS_HCCHAR3_CHENA, Channel enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR4 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR4_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR4_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR4_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR4_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR4_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR4_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR4_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR4_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR4_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR4_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR4 ; \ OTG_HS_HOST_OTG_HS_HCCHAR4_CHENA, Channel enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR5 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR5_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR5_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR5_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR5_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR5_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR5_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR5_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR5_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR5_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR5_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR5 ; \ OTG_HS_HOST_OTG_HS_HCCHAR5_CHENA, Channel enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR6 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR6_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR6_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR6_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR6_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR6_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR6_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR6_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR6_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR6_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR6_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR6 ; \ OTG_HS_HOST_OTG_HS_HCCHAR6_CHENA, Channel enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR7 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR7_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR7_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR7_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR7_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR7_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR7_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR7_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR7_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR7_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR7_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR7 ; \ OTG_HS_HOST_OTG_HS_HCCHAR7_CHENA, Channel enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR8 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR8_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR8_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR8_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR8_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR8_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR8_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR8_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR8_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR8_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR8_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR8 ; \ OTG_HS_HOST_OTG_HS_HCCHAR8_CHENA, Channel enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR9 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR9_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR9_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR9_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR9_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR9_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR9_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR9_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR9_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR9_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR9_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR9 ; \ OTG_HS_HOST_OTG_HS_HCCHAR9_CHENA, Channel enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR10 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR10_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR10_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR10_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR10_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR10_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR10_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR10_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR10_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR10_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR10_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR10 ; \ OTG_HS_HOST_OTG_HS_HCCHAR10_CHENA, Channel enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCCHAR11 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCCHAR11_MPSIZ x addr ) OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_MPSIZ, Maximum packet size
    : OTG_HS_HOST_OTG_HS_HCCHAR11_EPNUM ( %bbbb -- x addr ) 11 lshift OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_EPNUM, Endpoint number
    : OTG_HS_HOST_OTG_HS_HCCHAR11_EPDIR ( -- x addr ) 15 bit OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_EPDIR, Endpoint direction
    : OTG_HS_HOST_OTG_HS_HCCHAR11_LSDEV ( -- x addr ) 17 bit OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_LSDEV, Low-speed device
    : OTG_HS_HOST_OTG_HS_HCCHAR11_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_EPTYP, Endpoint type
    : OTG_HS_HOST_OTG_HS_HCCHAR11_MC ( %bb -- x addr ) 20 lshift OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_MC, Multi Count MC / Error Count  EC
    : OTG_HS_HOST_OTG_HS_HCCHAR11_DAD ( %bbbbbbb -- x addr ) 22 lshift OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_DAD, Device address
    : OTG_HS_HOST_OTG_HS_HCCHAR11_ODDFRM ( -- x addr ) 29 bit OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_ODDFRM, Odd frame
    : OTG_HS_HOST_OTG_HS_HCCHAR11_CHDIS ( -- x addr ) 30 bit OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_CHDIS, Channel disable
    : OTG_HS_HOST_OTG_HS_HCCHAR11_CHENA ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCCHAR11 ; \ OTG_HS_HOST_OTG_HS_HCCHAR11_CHENA, Channel enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT0 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT0_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT0 ; \ OTG_HS_HOST_OTG_HS_HCSPLT0_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT0_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT0 ; \ OTG_HS_HOST_OTG_HS_HCSPLT0_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT0_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT0 ; \ OTG_HS_HOST_OTG_HS_HCSPLT0_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT0_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT0 ; \ OTG_HS_HOST_OTG_HS_HCSPLT0_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT0_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT0 ; \ OTG_HS_HOST_OTG_HS_HCSPLT0_SPLITEN, Split enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT1 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT1_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT1 ; \ OTG_HS_HOST_OTG_HS_HCSPLT1_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT1_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT1 ; \ OTG_HS_HOST_OTG_HS_HCSPLT1_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT1_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT1 ; \ OTG_HS_HOST_OTG_HS_HCSPLT1_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT1_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT1 ; \ OTG_HS_HOST_OTG_HS_HCSPLT1_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT1_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT1 ; \ OTG_HS_HOST_OTG_HS_HCSPLT1_SPLITEN, Split enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT2 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT2_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT2 ; \ OTG_HS_HOST_OTG_HS_HCSPLT2_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT2_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT2 ; \ OTG_HS_HOST_OTG_HS_HCSPLT2_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT2_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT2 ; \ OTG_HS_HOST_OTG_HS_HCSPLT2_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT2_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT2 ; \ OTG_HS_HOST_OTG_HS_HCSPLT2_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT2_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT2 ; \ OTG_HS_HOST_OTG_HS_HCSPLT2_SPLITEN, Split enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT3 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT3_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT3 ; \ OTG_HS_HOST_OTG_HS_HCSPLT3_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT3_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT3 ; \ OTG_HS_HOST_OTG_HS_HCSPLT3_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT3_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT3 ; \ OTG_HS_HOST_OTG_HS_HCSPLT3_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT3_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT3 ; \ OTG_HS_HOST_OTG_HS_HCSPLT3_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT3_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT3 ; \ OTG_HS_HOST_OTG_HS_HCSPLT3_SPLITEN, Split enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT4 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT4_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT4 ; \ OTG_HS_HOST_OTG_HS_HCSPLT4_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT4_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT4 ; \ OTG_HS_HOST_OTG_HS_HCSPLT4_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT4_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT4 ; \ OTG_HS_HOST_OTG_HS_HCSPLT4_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT4_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT4 ; \ OTG_HS_HOST_OTG_HS_HCSPLT4_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT4_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT4 ; \ OTG_HS_HOST_OTG_HS_HCSPLT4_SPLITEN, Split enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT5 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT5_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT5 ; \ OTG_HS_HOST_OTG_HS_HCSPLT5_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT5_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT5 ; \ OTG_HS_HOST_OTG_HS_HCSPLT5_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT5_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT5 ; \ OTG_HS_HOST_OTG_HS_HCSPLT5_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT5_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT5 ; \ OTG_HS_HOST_OTG_HS_HCSPLT5_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT5_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT5 ; \ OTG_HS_HOST_OTG_HS_HCSPLT5_SPLITEN, Split enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT6 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT6_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT6 ; \ OTG_HS_HOST_OTG_HS_HCSPLT6_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT6_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT6 ; \ OTG_HS_HOST_OTG_HS_HCSPLT6_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT6_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT6 ; \ OTG_HS_HOST_OTG_HS_HCSPLT6_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT6_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT6 ; \ OTG_HS_HOST_OTG_HS_HCSPLT6_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT6_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT6 ; \ OTG_HS_HOST_OTG_HS_HCSPLT6_SPLITEN, Split enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT7 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT7_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT7 ; \ OTG_HS_HOST_OTG_HS_HCSPLT7_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT7_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT7 ; \ OTG_HS_HOST_OTG_HS_HCSPLT7_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT7_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT7 ; \ OTG_HS_HOST_OTG_HS_HCSPLT7_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT7_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT7 ; \ OTG_HS_HOST_OTG_HS_HCSPLT7_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT7_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT7 ; \ OTG_HS_HOST_OTG_HS_HCSPLT7_SPLITEN, Split enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT8 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT8_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT8 ; \ OTG_HS_HOST_OTG_HS_HCSPLT8_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT8_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT8 ; \ OTG_HS_HOST_OTG_HS_HCSPLT8_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT8_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT8 ; \ OTG_HS_HOST_OTG_HS_HCSPLT8_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT8_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT8 ; \ OTG_HS_HOST_OTG_HS_HCSPLT8_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT8_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT8 ; \ OTG_HS_HOST_OTG_HS_HCSPLT8_SPLITEN, Split enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT9 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT9_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT9 ; \ OTG_HS_HOST_OTG_HS_HCSPLT9_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT9_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT9 ; \ OTG_HS_HOST_OTG_HS_HCSPLT9_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT9_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT9 ; \ OTG_HS_HOST_OTG_HS_HCSPLT9_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT9_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT9 ; \ OTG_HS_HOST_OTG_HS_HCSPLT9_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT9_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT9 ; \ OTG_HS_HOST_OTG_HS_HCSPLT9_SPLITEN, Split enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT10 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT10_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT10 ; \ OTG_HS_HOST_OTG_HS_HCSPLT10_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT10_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT10 ; \ OTG_HS_HOST_OTG_HS_HCSPLT10_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT10_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT10 ; \ OTG_HS_HOST_OTG_HS_HCSPLT10_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT10_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT10 ; \ OTG_HS_HOST_OTG_HS_HCSPLT10_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT10_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT10 ; \ OTG_HS_HOST_OTG_HS_HCSPLT10_SPLITEN, Split enable
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCSPLT11 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCSPLT11_PRTADDR ( %bbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCSPLT11 ; \ OTG_HS_HOST_OTG_HS_HCSPLT11_PRTADDR, Port address
    : OTG_HS_HOST_OTG_HS_HCSPLT11_HUBADDR ( %bbbbbbb -- x addr ) 7 lshift OTG_HS_HOST_OTG_HS_HCSPLT11 ; \ OTG_HS_HOST_OTG_HS_HCSPLT11_HUBADDR, Hub address
    : OTG_HS_HOST_OTG_HS_HCSPLT11_XACTPOS ( %bb -- x addr ) 14 lshift OTG_HS_HOST_OTG_HS_HCSPLT11 ; \ OTG_HS_HOST_OTG_HS_HCSPLT11_XACTPOS, XACTPOS
    : OTG_HS_HOST_OTG_HS_HCSPLT11_COMPLSPLT ( -- x addr ) 16 bit OTG_HS_HOST_OTG_HS_HCSPLT11 ; \ OTG_HS_HOST_OTG_HS_HCSPLT11_COMPLSPLT, Do complete split
    : OTG_HS_HOST_OTG_HS_HCSPLT11_SPLITEN ( -- x addr ) 31 bit OTG_HS_HOST_OTG_HS_HCSPLT11 ; \ OTG_HS_HOST_OTG_HS_HCSPLT11_SPLITEN, Split enable
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINT0 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT0_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT0_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT0_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT0_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT0_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT0_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT0_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT0_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT0_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT0_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT0_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT0 ; \ OTG_HS_HOST_OTG_HS_HCINT0_DTERR, Data toggle error
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINT1 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT1_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT1_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT1_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT1_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT1_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT1_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT1_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT1_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT1_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT1_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT1_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT1 ; \ OTG_HS_HOST_OTG_HS_HCINT1_DTERR, Data toggle error
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINT2 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT2_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT2_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT2_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT2_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT2_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT2_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT2_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT2_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT2_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT2_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT2_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT2 ; \ OTG_HS_HOST_OTG_HS_HCINT2_DTERR, Data toggle error
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINT3 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT3_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT3_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT3_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT3_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT3_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT3_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT3_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT3_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT3_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT3_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT3_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT3 ; \ OTG_HS_HOST_OTG_HS_HCINT3_DTERR, Data toggle error
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINT4 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT4_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT4_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT4_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT4_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT4_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT4_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT4_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT4_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT4_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT4_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT4_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT4 ; \ OTG_HS_HOST_OTG_HS_HCINT4_DTERR, Data toggle error
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINT5 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT5_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT5_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT5_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT5_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT5_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT5_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT5_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT5_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT5_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT5_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT5_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT5 ; \ OTG_HS_HOST_OTG_HS_HCINT5_DTERR, Data toggle error
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINT6 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT6_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT6_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT6_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT6_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT6_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT6_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT6_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT6_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT6_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT6_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT6_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT6 ; \ OTG_HS_HOST_OTG_HS_HCINT6_DTERR, Data toggle error
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINT7 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT7_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT7_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT7_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT7_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT7_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT7_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT7_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT7_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT7_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT7_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT7_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT7 ; \ OTG_HS_HOST_OTG_HS_HCINT7_DTERR, Data toggle error
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINT8 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT8_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT8_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT8_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT8_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT8_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT8_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT8_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT8_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT8_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT8_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT8_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT8 ; \ OTG_HS_HOST_OTG_HS_HCINT8_DTERR, Data toggle error
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINT9 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT9_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT9_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT9_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT9_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT9_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT9_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT9_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT9_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT9_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT9_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT9_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT9 ; \ OTG_HS_HOST_OTG_HS_HCINT9_DTERR, Data toggle error
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINT10 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT10_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT10_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT10_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT10_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT10_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT10_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT10_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT10_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT10_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT10_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT10_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT10 ; \ OTG_HS_HOST_OTG_HS_HCINT10_DTERR, Data toggle error
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINT11 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINT11_XFRC ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_XFRC, Transfer completed
    : OTG_HS_HOST_OTG_HS_HCINT11_CHH ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_CHH, Channel halted
    : OTG_HS_HOST_OTG_HS_HCINT11_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINT11_STALL ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_STALL, STALL response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT11_NAK ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_NAK, NAK response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT11_ACK ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_ACK, ACK response received/transmitted  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT11_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_NYET, Response received  interrupt
    : OTG_HS_HOST_OTG_HS_HCINT11_TXERR ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_TXERR, Transaction error
    : OTG_HS_HOST_OTG_HS_HCINT11_BBERR ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_BBERR, Babble error
    : OTG_HS_HOST_OTG_HS_HCINT11_FRMOR ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_FRMOR, Frame overrun
    : OTG_HS_HOST_OTG_HS_HCINT11_DTERR ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINT11 ; \ OTG_HS_HOST_OTG_HS_HCINT11_DTERR, Data toggle error
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK0 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK0_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK0_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK0_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK0_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK0_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK0_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK0_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK0_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK0_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK0_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK0_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK0 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK0_DTERRM, Data toggle error mask
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK1 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK1_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK1_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK1_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK1_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK1_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK1_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK1_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK1_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK1_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK1_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK1_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK1 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK1_DTERRM, Data toggle error mask
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK2 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK2_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK2_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK2_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK2_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK2_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK2_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK2_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK2_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK2_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK2_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK2_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK2 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK2_DTERRM, Data toggle error mask
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK3 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK3_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK3_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK3_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK3_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK3_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK3_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK3_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK3_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK3_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK3_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK3_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK3 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK3_DTERRM, Data toggle error mask
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK4 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK4_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK4_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK4_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK4_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK4_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK4_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK4_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK4_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK4_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK4_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK4_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK4 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK4_DTERRM, Data toggle error mask
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK5 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK5_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK5_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK5_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK5_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK5_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK5_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK5_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK5_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK5_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK5_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK5_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK5 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK5_DTERRM, Data toggle error mask
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK6 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK6_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK6_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK6_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK6_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK6_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK6_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK6_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK6_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK6_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK6_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK6_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK6 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK6_DTERRM, Data toggle error mask
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK7 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK7_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK7_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK7_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK7_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK7_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK7_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK7_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK7_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK7_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK7_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK7_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK7 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK7_DTERRM, Data toggle error mask
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK8 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK8_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK8_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK8_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK8_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK8_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK8_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK8_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK8_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK8_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK8_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK8_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK8 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK8_DTERRM, Data toggle error mask
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK9 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK9_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK9_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK9_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK9_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK9_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK9_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK9_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK9_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK9_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK9_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK9_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK9 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK9_DTERRM, Data toggle error mask
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK10 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK10_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK10_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK10_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK10_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK10_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK10_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK10_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK10_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK10_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK10_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK10_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK10 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK10_DTERRM, Data toggle error mask
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCINTMSK11 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCINTMSK11_XFRCM ( -- x addr ) 0 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_XFRCM, Transfer completed mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK11_CHHM ( -- x addr ) 1 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_CHHM, Channel halted mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK11_AHBERR ( -- x addr ) 2 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_AHBERR, AHB error
    : OTG_HS_HOST_OTG_HS_HCINTMSK11_STALLM ( -- x addr ) 3 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_STALLM, STALL response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK11_NAKM ( -- x addr ) 4 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_NAKM, NAK response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK11_ACKM ( -- x addr ) 5 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_ACKM, ACK response received/transmitted  interrupt mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK11_NYET ( -- x addr ) 6 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_NYET, response received interrupt  mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK11_TXERRM ( -- x addr ) 7 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_TXERRM, Transaction error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK11_BBERRM ( -- x addr ) 8 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_BBERRM, Babble error mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK11_FRMORM ( -- x addr ) 9 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_FRMORM, Frame overrun mask
    : OTG_HS_HOST_OTG_HS_HCINTMSK11_DTERRM ( -- x addr ) 10 bit OTG_HS_HOST_OTG_HS_HCINTMSK11 ; \ OTG_HS_HOST_OTG_HS_HCINTMSK11_DTERRM, Data toggle error mask
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ0 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ0_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ0 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ0_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ0_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ0 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ0_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ0_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ0 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ0_DPID, Data PID
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ1 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ1_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ1 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ1_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ1 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ1_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ1_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ1 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ1_DPID, Data PID
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ2 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ2_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ2 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ2_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ2 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ2_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ2_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ2 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ2_DPID, Data PID
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ3 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ3_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ3 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ3_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ3 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ3_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ3_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ3 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ3_DPID, Data PID
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ4 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ4_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ4 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ4_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ4_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ4 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ4_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ4_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ4 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ4_DPID, Data PID
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ5 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ5_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ5 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ5_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ5_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ5 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ5_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ5_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ5 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ5_DPID, Data PID
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ6 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ6_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ6 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ6_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ6_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ6 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ6_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ6_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ6 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ6_DPID, Data PID
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ7 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ7_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ7 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ7_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ7_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ7 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ7_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ7_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ7 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ7_DPID, Data PID
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ8 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ8_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ8 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ8_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ8_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ8 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ8_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ8_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ8 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ8_DPID, Data PID
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ9 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ9_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ9 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ9_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ9_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ9 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ9_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ9_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ9 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ9_DPID, Data PID
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ10 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ10_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ10 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ10_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ10_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ10 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ10_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ10_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ10 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ10_DPID, Data PID
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCTSIZ11 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCTSIZ11_XFRSIZ x addr ) OTG_HS_HOST_OTG_HS_HCTSIZ11 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ11_XFRSIZ, Transfer size
    : OTG_HS_HOST_OTG_HS_HCTSIZ11_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_HOST_OTG_HS_HCTSIZ11 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ11_PKTCNT, Packet count
    : OTG_HS_HOST_OTG_HS_HCTSIZ11_DPID ( %bb -- x addr ) 29 lshift OTG_HS_HOST_OTG_HS_HCTSIZ11 ; \ OTG_HS_HOST_OTG_HS_HCTSIZ11_DPID, Data PID
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA0 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA0_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA0 ; \ OTG_HS_HOST_OTG_HS_HCDMA0_DMAADDR, DMA address
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA1 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA1_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA1 ; \ OTG_HS_HOST_OTG_HS_HCDMA1_DMAADDR, DMA address
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA2 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA2_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA2 ; \ OTG_HS_HOST_OTG_HS_HCDMA2_DMAADDR, DMA address
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA3 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA3_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA3 ; \ OTG_HS_HOST_OTG_HS_HCDMA3_DMAADDR, DMA address
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA4 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA4_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA4 ; \ OTG_HS_HOST_OTG_HS_HCDMA4_DMAADDR, DMA address
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA5 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA5_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA5 ; \ OTG_HS_HOST_OTG_HS_HCDMA5_DMAADDR, DMA address
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA6 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA6_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA6 ; \ OTG_HS_HOST_OTG_HS_HCDMA6_DMAADDR, DMA address
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA7 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA7_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA7 ; \ OTG_HS_HOST_OTG_HS_HCDMA7_DMAADDR, DMA address
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA8 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA8_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA8 ; \ OTG_HS_HOST_OTG_HS_HCDMA8_DMAADDR, DMA address
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA9 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA9_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA9 ; \ OTG_HS_HOST_OTG_HS_HCDMA9_DMAADDR, DMA address
  [then]

  execute-defined? use-OTG_HS_HOST [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA10 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA10_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA10 ; \ OTG_HS_HOST_OTG_HS_HCDMA10_DMAADDR, DMA address
  [then]

  [if]
    \ OTG_HS_HOST_OTG_HS_HCDMA11 (read-write) Reset:0x0
    : OTG_HS_HOST_OTG_HS_HCDMA11_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_HOST_OTG_HS_HCDMA11 ; \ OTG_HS_HOST_OTG_HS_HCDMA11_DMAADDR, DMA address
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DCFG (read-write) Reset:0x02200000
    : OTG_HS_DEVICE_OTG_HS_DCFG_DSPD ( %bb -- x addr ) OTG_HS_DEVICE_OTG_HS_DCFG ; \ OTG_HS_DEVICE_OTG_HS_DCFG_DSPD, Device speed
    : OTG_HS_DEVICE_OTG_HS_DCFG_NZLSOHSK ( -- x addr ) 2 bit OTG_HS_DEVICE_OTG_HS_DCFG ; \ OTG_HS_DEVICE_OTG_HS_DCFG_NZLSOHSK, Nonzero-length status OUT  handshake
    : OTG_HS_DEVICE_OTG_HS_DCFG_DAD ( %bbbbbbb -- x addr ) 4 lshift OTG_HS_DEVICE_OTG_HS_DCFG ; \ OTG_HS_DEVICE_OTG_HS_DCFG_DAD, Device address
    : OTG_HS_DEVICE_OTG_HS_DCFG_PFIVL ( %bb -- x addr ) 11 lshift OTG_HS_DEVICE_OTG_HS_DCFG ; \ OTG_HS_DEVICE_OTG_HS_DCFG_PFIVL, Periodic microframe  interval
    : OTG_HS_DEVICE_OTG_HS_DCFG_PERSCHIVL ( %bb -- x addr ) 24 lshift OTG_HS_DEVICE_OTG_HS_DCFG ; \ OTG_HS_DEVICE_OTG_HS_DCFG_PERSCHIVL, Periodic scheduling  interval
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DCTL (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DCTL_RWUSIG ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_RWUSIG, Remote wakeup signaling
    : OTG_HS_DEVICE_OTG_HS_DCTL_SDIS ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_SDIS, Soft disconnect
    : OTG_HS_DEVICE_OTG_HS_DCTL_GINSTS? ( -- 1|0 ) 2 bit OTG_HS_DEVICE_OTG_HS_DCTL bit@ ; \ OTG_HS_DEVICE_OTG_HS_DCTL_GINSTS, Global IN NAK status
    : OTG_HS_DEVICE_OTG_HS_DCTL_GONSTS? ( -- 1|0 ) 3 bit OTG_HS_DEVICE_OTG_HS_DCTL bit@ ; \ OTG_HS_DEVICE_OTG_HS_DCTL_GONSTS, Global OUT NAK status
    : OTG_HS_DEVICE_OTG_HS_DCTL_TCTL ( %bbb -- x addr ) 4 lshift OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_TCTL, Test control
    : OTG_HS_DEVICE_OTG_HS_DCTL_SGINAK ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_SGINAK, Set global IN NAK
    : OTG_HS_DEVICE_OTG_HS_DCTL_CGINAK ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_CGINAK, Clear global IN NAK
    : OTG_HS_DEVICE_OTG_HS_DCTL_SGONAK ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_SGONAK, Set global OUT NAK
    : OTG_HS_DEVICE_OTG_HS_DCTL_CGONAK ( -- x addr ) 10 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_CGONAK, Clear global OUT NAK
    : OTG_HS_DEVICE_OTG_HS_DCTL_POPRGDNE ( -- x addr ) 11 bit OTG_HS_DEVICE_OTG_HS_DCTL ; \ OTG_HS_DEVICE_OTG_HS_DCTL_POPRGDNE, Power-on programming done
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DSTS (read-only) Reset:0x00000010
    : OTG_HS_DEVICE_OTG_HS_DSTS_SUSPSTS? ( --  1|0 ) 0 bit OTG_HS_DEVICE_OTG_HS_DSTS bit@ ; \ OTG_HS_DEVICE_OTG_HS_DSTS_SUSPSTS, Suspend status
    : OTG_HS_DEVICE_OTG_HS_DSTS_ENUMSPD? ( --  x ) 1 lshift OTG_HS_DEVICE_OTG_HS_DSTS @ ; \ OTG_HS_DEVICE_OTG_HS_DSTS_ENUMSPD, Enumerated speed
    : OTG_HS_DEVICE_OTG_HS_DSTS_EERR? ( --  1|0 ) 3 bit OTG_HS_DEVICE_OTG_HS_DSTS bit@ ; \ OTG_HS_DEVICE_OTG_HS_DSTS_EERR, Erratic error
    : OTG_HS_DEVICE_OTG_HS_DSTS_FNSOF? ( --  x ) 8 lshift OTG_HS_DEVICE_OTG_HS_DSTS @ ; \ OTG_HS_DEVICE_OTG_HS_DSTS_FNSOF, Frame number of the received  SOF
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPMSK (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPMSK_XFRCM ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_XFRCM, Transfer completed interrupt  mask
    : OTG_HS_DEVICE_OTG_HS_DIEPMSK_EPDM ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_EPDM, Endpoint disabled interrupt  mask
    : OTG_HS_DEVICE_OTG_HS_DIEPMSK_TOM ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_TOM, Timeout condition mask nonisochronous  endpoints
    : OTG_HS_DEVICE_OTG_HS_DIEPMSK_ITTXFEMSK ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_ITTXFEMSK, IN token received when TxFIFO empty  mask
    : OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNMM ( -- x addr ) 5 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNMM, IN token received with EP mismatch  mask
    : OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNEM ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNEM, IN endpoint NAK effective  mask
    : OTG_HS_DEVICE_OTG_HS_DIEPMSK_TXFURM ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_TXFURM, FIFO underrun mask
    : OTG_HS_DEVICE_OTG_HS_DIEPMSK_BIM ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPMSK_BIM, BNA interrupt mask
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPMSK (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPMSK_XFRCM ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_XFRCM, Transfer completed interrupt  mask
    : OTG_HS_DEVICE_OTG_HS_DOEPMSK_EPDM ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_EPDM, Endpoint disabled interrupt  mask
    : OTG_HS_DEVICE_OTG_HS_DOEPMSK_STUPM ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_STUPM, SETUP phase done mask
    : OTG_HS_DEVICE_OTG_HS_DOEPMSK_OTEPDM ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_OTEPDM, OUT token received when endpoint  disabled mask
    : OTG_HS_DEVICE_OTG_HS_DOEPMSK_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_B2BSTUP, Back-to-back SETUP packets received  mask
    : OTG_HS_DEVICE_OTG_HS_DOEPMSK_OPEM ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_OPEM, OUT packet error mask
    : OTG_HS_DEVICE_OTG_HS_DOEPMSK_BOIM ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DOEPMSK ; \ OTG_HS_DEVICE_OTG_HS_DOEPMSK_BOIM, BNA interrupt mask
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DAINT (read-only) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DAINT_IEPINT? ( --  x ) OTG_HS_DEVICE_OTG_HS_DAINT @ ; \ OTG_HS_DEVICE_OTG_HS_DAINT_IEPINT, IN endpoint interrupt bits
    : OTG_HS_DEVICE_OTG_HS_DAINT_OEPINT? ( --  x ) 16 lshift OTG_HS_DEVICE_OTG_HS_DAINT @ ; \ OTG_HS_DEVICE_OTG_HS_DAINT_OEPINT, OUT endpoint interrupt  bits
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DAINTMSK (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DAINTMSK_IEPM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DAINTMSK ; \ OTG_HS_DEVICE_OTG_HS_DAINTMSK_IEPM, IN EP interrupt mask bits
    : OTG_HS_DEVICE_OTG_HS_DAINTMSK_OEPM ( %bbbbbbbbbbbbbbbb -- x addr ) 16 lshift OTG_HS_DEVICE_OTG_HS_DAINTMSK ; \ OTG_HS_DEVICE_OTG_HS_DAINTMSK_OEPM, OUT EP interrupt mask bits
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DVBUSDIS (read-write) Reset:0x000017D7
    : OTG_HS_DEVICE_OTG_HS_DVBUSDIS_VBUSDT ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DVBUSDIS ; \ OTG_HS_DEVICE_OTG_HS_DVBUSDIS_VBUSDT, Device VBUS discharge time
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DVBUSPULSE (read-write) Reset:0x000005B8
    : OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_DVBUSP ( %bbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DVBUSPULSE ; \ OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_DVBUSP, Device VBUS pulsing time
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DTHRCTL (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DTHRCTL_NONISOTHREN ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_NONISOTHREN, Nonisochronous IN endpoints threshold  enable
    : OTG_HS_DEVICE_OTG_HS_DTHRCTL_ISOTHREN ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_ISOTHREN, ISO IN endpoint threshold  enable
    : OTG_HS_DEVICE_OTG_HS_DTHRCTL_TXTHRLEN ( %bbbbbbbbb -- x addr ) 2 lshift OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_TXTHRLEN, Transmit threshold length
    : OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHREN ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHREN, Receive threshold enable
    : OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHRLEN ( %bbbbbbbbb -- x addr ) 17 lshift OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHRLEN, Receive threshold length
    : OTG_HS_DEVICE_OTG_HS_DTHRCTL_ARPEN ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DTHRCTL ; \ OTG_HS_DEVICE_OTG_HS_DTHRCTL_ARPEN, Arbiter parking enable
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_INEPTXFEM ( %bbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK ; \ OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_INEPTXFEM, IN EP Tx FIFO empty interrupt mask  bits
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DEACHINT (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DEACHINT_IEP1INT ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DEACHINT ; \ OTG_HS_DEVICE_OTG_HS_DEACHINT_IEP1INT, IN endpoint 1interrupt bit
    : OTG_HS_DEVICE_OTG_HS_DEACHINT_OEP1INT ( -- x addr ) 17 bit OTG_HS_DEVICE_OTG_HS_DEACHINT ; \ OTG_HS_DEVICE_OTG_HS_DEACHINT_OEP1INT, OUT endpoint 1 interrupt  bit
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_IEP1INTM ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DEACHINTMSK ; \ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_IEP1INTM, IN Endpoint 1 interrupt mask  bit
    : OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_OEP1INTM ( -- x addr ) 17 bit OTG_HS_DEVICE_OTG_HS_DEACHINTMSK ; \ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_OEP1INTM, OUT Endpoint 1 interrupt mask  bit
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_XFRCM ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_XFRCM, Transfer completed interrupt  mask
    : OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_EPDM ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_EPDM, Endpoint disabled interrupt  mask
    : OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_TOM ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_TOM, Timeout condition mask nonisochronous  endpoints
    : OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_ITTXFEMSK ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_ITTXFEMSK, IN token received when TxFIFO empty  mask
    : OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_INEPNMM ( -- x addr ) 5 bit OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_INEPNMM, IN token received with EP mismatch  mask
    : OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_INEPNEM ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_INEPNEM, IN endpoint NAK effective  mask
    : OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_TXFURM ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_TXFURM, FIFO underrun mask
    : OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_BIM ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_BIM, BNA interrupt mask
    : OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_NAKM ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_NAKM, NAK interrupt mask
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_XFRCM ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_XFRCM, Transfer completed interrupt  mask
    : OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_EPDM ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_EPDM, Endpoint disabled interrupt  mask
    : OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_TOM ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_TOM, Timeout condition mask
    : OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_ITTXFEMSK ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_ITTXFEMSK, IN token received when TxFIFO empty  mask
    : OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_INEPNMM ( -- x addr ) 5 bit OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_INEPNMM, IN token received with EP mismatch  mask
    : OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_INEPNEM ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_INEPNEM, IN endpoint NAK effective  mask
    : OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_TXFURM ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_TXFURM, OUT packet error mask
    : OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_BIM ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_BIM, BNA interrupt mask
    : OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_BERRM ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_BERRM, Bubble error interrupt  mask
    : OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_NAKM ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_NAKM, NAK interrupt mask
    : OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_NYETM ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_NYETM, NYET interrupt mask
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EONUM_DPID, Even/odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_TXFNUM, TxFIFO number
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SD0PID_SEVNFRM, Set DATA0 PID
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SODDFRM, Set odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPENA, Endpoint enable
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EONUM_DPID, Even/odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_TXFNUM, TxFIFO number
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SD0PID_SEVNFRM, Set DATA0 PID
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SODDFRM, Set odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPENA, Endpoint enable
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EONUM_DPID, Even/odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_TXFNUM, TxFIFO number
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SD0PID_SEVNFRM, Set DATA0 PID
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SODDFRM, Set odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPENA, Endpoint enable
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EONUM_DPID, Even/odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_TXFNUM, TxFIFO number
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SD0PID_SEVNFRM, Set DATA0 PID
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SODDFRM, Set odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPENA, Endpoint enable
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EONUM_DPID, Even/odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_TXFNUM, TxFIFO number
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SD0PID_SEVNFRM, Set DATA0 PID
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SODDFRM, Set odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPENA, Endpoint enable
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EONUM_DPID, Even/odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_TXFNUM, TxFIFO number
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SD0PID_SEVNFRM, Set DATA0 PID
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SODDFRM, Set odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPENA, Endpoint enable
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EONUM_DPID, Even/odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_TXFNUM, TxFIFO number
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SD0PID_SEVNFRM, Set DATA0 PID
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SODDFRM, Set odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPENA, Endpoint enable
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EONUM_DPID, Even/odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_TXFNUM ( %bbbb -- x addr ) 22 lshift OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_TXFNUM, TxFIFO number
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SD0PID_SEVNFRM, Set DATA0 PID
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SODDFRM, Set odd frame
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DIEPCTL7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPENA, Endpoint enable
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPINT0 (multiple-access)  Reset:0x00000080
    : OTG_HS_DEVICE_OTG_HS_DIEPINT0_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT0_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT0_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TOC, Timeout condition
    : OTG_HS_DEVICE_OTG_HS_DIEPINT0_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_ITTXFE, IN token received when TxFIFO is  empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT0_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_INEPNE, IN endpoint NAK effective
    : OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFE, Transmit FIFO empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFIFOUDRN, Transmit Fifo Underrun
    : OTG_HS_DEVICE_OTG_HS_DIEPINT0_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_BNA, Buffer not available  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT0_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_PKTDRPSTS, Packet dropped status
    : OTG_HS_DEVICE_OTG_HS_DIEPINT0_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_BERR, Babble error interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT0_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT0_NAK, NAK interrupt
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPINT1 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPINT1_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT1_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT1_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TOC, Timeout condition
    : OTG_HS_DEVICE_OTG_HS_DIEPINT1_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_ITTXFE, IN token received when TxFIFO is  empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT1_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_INEPNE, IN endpoint NAK effective
    : OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFE, Transmit FIFO empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFIFOUDRN, Transmit Fifo Underrun
    : OTG_HS_DEVICE_OTG_HS_DIEPINT1_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_BNA, Buffer not available  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT1_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_PKTDRPSTS, Packet dropped status
    : OTG_HS_DEVICE_OTG_HS_DIEPINT1_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_BERR, Babble error interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT1_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT1_NAK, NAK interrupt
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPINT2 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPINT2_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT2_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT2_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TOC, Timeout condition
    : OTG_HS_DEVICE_OTG_HS_DIEPINT2_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_ITTXFE, IN token received when TxFIFO is  empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT2_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_INEPNE, IN endpoint NAK effective
    : OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFE, Transmit FIFO empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFIFOUDRN, Transmit Fifo Underrun
    : OTG_HS_DEVICE_OTG_HS_DIEPINT2_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_BNA, Buffer not available  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT2_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_PKTDRPSTS, Packet dropped status
    : OTG_HS_DEVICE_OTG_HS_DIEPINT2_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_BERR, Babble error interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT2_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT2_NAK, NAK interrupt
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPINT3 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPINT3_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT3_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT3_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TOC, Timeout condition
    : OTG_HS_DEVICE_OTG_HS_DIEPINT3_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_ITTXFE, IN token received when TxFIFO is  empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT3_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_INEPNE, IN endpoint NAK effective
    : OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFE, Transmit FIFO empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFIFOUDRN, Transmit Fifo Underrun
    : OTG_HS_DEVICE_OTG_HS_DIEPINT3_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_BNA, Buffer not available  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT3_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_PKTDRPSTS, Packet dropped status
    : OTG_HS_DEVICE_OTG_HS_DIEPINT3_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_BERR, Babble error interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT3_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT3_NAK, NAK interrupt
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPINT4 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPINT4_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT4_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT4_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TOC, Timeout condition
    : OTG_HS_DEVICE_OTG_HS_DIEPINT4_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_ITTXFE, IN token received when TxFIFO is  empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT4_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_INEPNE, IN endpoint NAK effective
    : OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFE, Transmit FIFO empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFIFOUDRN, Transmit Fifo Underrun
    : OTG_HS_DEVICE_OTG_HS_DIEPINT4_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_BNA, Buffer not available  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT4_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_PKTDRPSTS, Packet dropped status
    : OTG_HS_DEVICE_OTG_HS_DIEPINT4_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_BERR, Babble error interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT4_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT4_NAK, NAK interrupt
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPINT5 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPINT5_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT5_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT5_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TOC, Timeout condition
    : OTG_HS_DEVICE_OTG_HS_DIEPINT5_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_ITTXFE, IN token received when TxFIFO is  empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT5_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_INEPNE, IN endpoint NAK effective
    : OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFE, Transmit FIFO empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFIFOUDRN, Transmit Fifo Underrun
    : OTG_HS_DEVICE_OTG_HS_DIEPINT5_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_BNA, Buffer not available  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT5_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_PKTDRPSTS, Packet dropped status
    : OTG_HS_DEVICE_OTG_HS_DIEPINT5_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_BERR, Babble error interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT5_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT5_NAK, NAK interrupt
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPINT6 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPINT6_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT6_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT6_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TOC, Timeout condition
    : OTG_HS_DEVICE_OTG_HS_DIEPINT6_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_ITTXFE, IN token received when TxFIFO is  empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT6_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_INEPNE, IN endpoint NAK effective
    : OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFE, Transmit FIFO empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFIFOUDRN, Transmit Fifo Underrun
    : OTG_HS_DEVICE_OTG_HS_DIEPINT6_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_BNA, Buffer not available  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT6_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_PKTDRPSTS, Packet dropped status
    : OTG_HS_DEVICE_OTG_HS_DIEPINT6_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_BERR, Babble error interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT6_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT6_NAK, NAK interrupt
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPINT7 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPINT7_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT7_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT7_TOC ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TOC, Timeout condition
    : OTG_HS_DEVICE_OTG_HS_DIEPINT7_ITTXFE ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_ITTXFE, IN token received when TxFIFO is  empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT7_INEPNE ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_INEPNE, IN endpoint NAK effective
    : OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFE ( -- x addr ) 7 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFE, Transmit FIFO empty
    : OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFIFOUDRN ( -- x addr ) 8 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFIFOUDRN, Transmit Fifo Underrun
    : OTG_HS_DEVICE_OTG_HS_DIEPINT7_BNA ( -- x addr ) 9 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_BNA, Buffer not available  interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT7_PKTDRPSTS? ( -- 1|0 ) 11 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_PKTDRPSTS, Packet dropped status
    : OTG_HS_DEVICE_OTG_HS_DIEPINT7_BERR ( -- x addr ) 12 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_BERR, Babble error interrupt
    : OTG_HS_DEVICE_OTG_HS_DIEPINT7_NAK ( -- x addr ) 13 bit OTG_HS_DEVICE_OTG_HS_DIEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DIEPINT7_NAK, NAK interrupt
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_XFRSIZ ( %bbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_XFRSIZ, Transfer size
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_PKTCNT ( %bb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_PKTCNT, Packet count
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPDMA1 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPDMA1_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPDMA1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPDMA1_DMAADDR, DMA address
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPDMA2 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPDMA2_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPDMA2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPDMA2_DMAADDR, DMA address
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPDMA3 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPDMA3_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPDMA3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPDMA3_DMAADDR, DMA address
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPDMA4 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPDMA4_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPDMA4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPDMA4_DMAADDR, DMA address
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPDMA5 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPDMA5_DMAADDR ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DIEPDMA5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPDMA5_DMAADDR, DMA address
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DTXFSTS0 (read-only) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DTXFSTS0_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS0 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS0_INEPTFSAV, IN endpoint TxFIFO space  avail
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DTXFSTS1 (read-only) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DTXFSTS1_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS1 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS1_INEPTFSAV, IN endpoint TxFIFO space  avail
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DTXFSTS2 (read-only) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DTXFSTS2_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS2 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS2_INEPTFSAV, IN endpoint TxFIFO space  avail
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DTXFSTS3 (read-only) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DTXFSTS3_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS3 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS3_INEPTFSAV, IN endpoint TxFIFO space  avail
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DTXFSTS4 (read-only) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DTXFSTS4_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS4 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS4_INEPTFSAV, IN endpoint TxFIFO space  avail
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DTXFSTS5 (read-only) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DTXFSTS5_INEPTFSAV? ( --  x ) OTG_HS_DEVICE_OTG_HS_DTXFSTS5 @ ; \ OTG_HS_DEVICE_OTG_HS_DTXFSTS5_INEPTFSAV, IN endpoint TxFIFO space  avail
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_XFRSIZ, Transfer size
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_PKTCNT, Packet count
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_MCNT, Multi count
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_XFRSIZ, Transfer size
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_PKTCNT, Packet count
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_MCNT, Multi count
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_XFRSIZ, Transfer size
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_PKTCNT, Packet count
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_MCNT, Multi count
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_XFRSIZ, Transfer size
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_PKTCNT, Packet count
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_MCNT, Multi count
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_XFRSIZ, Transfer size
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_PKTCNT, Packet count
    : OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_MCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5 ; \ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_MCNT, Multi count
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0 (multiple-access)  Reset:0x00008000
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL0_MPSIZ ( %bb -- x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL0_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL0_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNPM, Snoop mode
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL0_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPENA, Endpoint enable
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EONUM_DPID, Even odd frame/Endpoint data  PID
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNPM, Snoop mode
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SD0PID_SEVNFRM, Set DATA0 PID/Set even  frame
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SODDFRM, Set odd frame
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPENA, Endpoint enable
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EONUM_DPID, Even odd frame/Endpoint data  PID
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNPM, Snoop mode
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SD0PID_SEVNFRM, Set DATA0 PID/Set even  frame
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SODDFRM, Set odd frame
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPENA, Endpoint enable
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3 (multiple-access)  Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_MPSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_MPSIZ, Maximum packet size
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_USBAEP ( -- x addr ) 15 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_USBAEP, USB active endpoint
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EONUM_DPID ( -- x addr ) 16 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EONUM_DPID, Even odd frame/Endpoint data  PID
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_NAKSTS? ( -- 1|0 ) 17 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 bit@ ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_NAKSTS, NAK status
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPTYP ( %bb -- x addr ) 18 lshift OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPTYP, Endpoint type
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNPM ( -- x addr ) 20 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNPM, Snoop mode
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Stall ( -- x addr ) 21 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Stall, STALL handshake
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_CNAK ( -- x addr ) 26 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_CNAK, Clear NAK
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNAK ( -- x addr ) 27 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNAK, Set NAK
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SD0PID_SEVNFRM ( -- x addr ) 28 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SD0PID_SEVNFRM, Set DATA0 PID/Set even  frame
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SODDFRM ( -- x addr ) 29 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SODDFRM, Set odd frame
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPDIS ( -- x addr ) 30 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPDIS, Endpoint disable
    : OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPENA ( -- x addr ) 31 bit OTG_HS_DEVICE_OTG_HS_DOEPCTL3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPENA, Endpoint enable
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPINT0 (read-write) Reset:0x00000080
    : OTG_HS_DEVICE_OTG_HS_DOEPINT0_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT0_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT0_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_STUP, SETUP phase done
    : OTG_HS_DEVICE_OTG_HS_DOEPINT0_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_OTEPDIS, OUT token received when endpoint  disabled
    : OTG_HS_DEVICE_OTG_HS_DOEPINT0_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_B2BSTUP, Back-to-back SETUP packets  received
    : OTG_HS_DEVICE_OTG_HS_DOEPINT0_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT0_NYET, NYET interrupt
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPINT1 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPINT1_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT1_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT1_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_STUP, SETUP phase done
    : OTG_HS_DEVICE_OTG_HS_DOEPINT1_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_OTEPDIS, OUT token received when endpoint  disabled
    : OTG_HS_DEVICE_OTG_HS_DOEPINT1_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_B2BSTUP, Back-to-back SETUP packets  received
    : OTG_HS_DEVICE_OTG_HS_DOEPINT1_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT1_NYET, NYET interrupt
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPINT2 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPINT2_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT2_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT2_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_STUP, SETUP phase done
    : OTG_HS_DEVICE_OTG_HS_DOEPINT2_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_OTEPDIS, OUT token received when endpoint  disabled
    : OTG_HS_DEVICE_OTG_HS_DOEPINT2_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_B2BSTUP, Back-to-back SETUP packets  received
    : OTG_HS_DEVICE_OTG_HS_DOEPINT2_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT2_NYET, NYET interrupt
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPINT3 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPINT3_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT3_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT3_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_STUP, SETUP phase done
    : OTG_HS_DEVICE_OTG_HS_DOEPINT3_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_OTEPDIS, OUT token received when endpoint  disabled
    : OTG_HS_DEVICE_OTG_HS_DOEPINT3_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_B2BSTUP, Back-to-back SETUP packets  received
    : OTG_HS_DEVICE_OTG_HS_DOEPINT3_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT3_NYET, NYET interrupt
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPINT4 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPINT4_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT4_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT4_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_STUP, SETUP phase done
    : OTG_HS_DEVICE_OTG_HS_DOEPINT4_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_OTEPDIS, OUT token received when endpoint  disabled
    : OTG_HS_DEVICE_OTG_HS_DOEPINT4_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_B2BSTUP, Back-to-back SETUP packets  received
    : OTG_HS_DEVICE_OTG_HS_DOEPINT4_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT4_NYET, NYET interrupt
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPINT5 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPINT5_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT5_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT5_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_STUP, SETUP phase done
    : OTG_HS_DEVICE_OTG_HS_DOEPINT5_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_OTEPDIS, OUT token received when endpoint  disabled
    : OTG_HS_DEVICE_OTG_HS_DOEPINT5_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_B2BSTUP, Back-to-back SETUP packets  received
    : OTG_HS_DEVICE_OTG_HS_DOEPINT5_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT5 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT5_NYET, NYET interrupt
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPINT6 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPINT6_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT6_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT6_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_STUP, SETUP phase done
    : OTG_HS_DEVICE_OTG_HS_DOEPINT6_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_OTEPDIS, OUT token received when endpoint  disabled
    : OTG_HS_DEVICE_OTG_HS_DOEPINT6_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_B2BSTUP, Back-to-back SETUP packets  received
    : OTG_HS_DEVICE_OTG_HS_DOEPINT6_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT6 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT6_NYET, NYET interrupt
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPINT7 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPINT7_XFRC ( -- x addr ) 0 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_XFRC, Transfer completed  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT7_EPDISD ( -- x addr ) 1 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_EPDISD, Endpoint disabled  interrupt
    : OTG_HS_DEVICE_OTG_HS_DOEPINT7_STUP ( -- x addr ) 3 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_STUP, SETUP phase done
    : OTG_HS_DEVICE_OTG_HS_DOEPINT7_OTEPDIS ( -- x addr ) 4 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_OTEPDIS, OUT token received when endpoint  disabled
    : OTG_HS_DEVICE_OTG_HS_DOEPINT7_B2BSTUP ( -- x addr ) 6 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_B2BSTUP, Back-to-back SETUP packets  received
    : OTG_HS_DEVICE_OTG_HS_DOEPINT7_NYET ( -- x addr ) 14 bit OTG_HS_DEVICE_OTG_HS_DOEPINT7 ; \ OTG_HS_DEVICE_OTG_HS_DOEPINT7_NYET, NYET interrupt
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_XFRSIZ ( %bbbbbbb -- x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_XFRSIZ, Transfer size
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_PKTCNT ( -- x addr ) 19 bit OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_PKTCNT, Packet count
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_STUPCNT, SETUP packet count
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_XFRSIZ, Transfer size
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_PKTCNT, Packet count
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_RXDPID_STUPCNT, Received data PID/SETUP packet  count
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_XFRSIZ, Transfer size
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_PKTCNT, Packet count
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_RXDPID_STUPCNT, Received data PID/SETUP packet  count
  [then]

  [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_XFRSIZ, Transfer size
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_PKTCNT, Packet count
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_RXDPID_STUPCNT, Received data PID/SETUP packet  count
  [then]

  execute-defined? use-OTG_HS_DEVICE [if]
    \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4 (read-write) Reset:0x0
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_XFRSIZ x addr ) OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_XFRSIZ, Transfer size
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_PKTCNT ( %bbbbbbbbbb -- x addr ) 19 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_PKTCNT, Packet count
    : OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_RXDPID_STUPCNT ( %bb -- x addr ) 29 lshift OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4 ; \ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_RXDPID_STUPCNT, Received data PID/SETUP packet  count
  [then]

  [if]
    \ OTG_HS_PWRCLK_OTG_HS_PCGCR (read-write) Reset:0x0
    : OTG_HS_PWRCLK_OTG_HS_PCGCR_STPPCLK ( -- x addr ) 0 bit OTG_HS_PWRCLK_OTG_HS_PCGCR ; \ OTG_HS_PWRCLK_OTG_HS_PCGCR_STPPCLK, Stop PHY clock
    : OTG_HS_PWRCLK_OTG_HS_PCGCR_GATEHCLK ( -- x addr ) 1 bit OTG_HS_PWRCLK_OTG_HS_PCGCR ; \ OTG_HS_PWRCLK_OTG_HS_PCGCR_GATEHCLK, Gate HCLK
    : OTG_HS_PWRCLK_OTG_HS_PCGCR_PHYSUSP ( -- x addr ) 4 bit OTG_HS_PWRCLK_OTG_HS_PCGCR ; \ OTG_HS_PWRCLK_OTG_HS_PCGCR_PHYSUSP, PHY suspended
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_ICTR (read-only) Reset:0x00000000
    : NVIC_ICTR_INTLINESNUM? ( --  x ) NVIC_ICTR @ ; \ NVIC_ICTR_INTLINESNUM, Total number of interrupt lines in  groups
  [then]

  [if]
    \ NVIC_STIR (write-only) Reset:0x00000000
    : NVIC_STIR_INTID ( %bbbbbbbbb -- x addr ) NVIC_STIR ; \ NVIC_STIR_INTID, interrupt to be triggered
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_ISER0 (read-write) Reset:0x00000000
    : NVIC_ISER0_SETENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISER0 ; \ NVIC_ISER0_SETENA, SETENA
  [then]

  [if]
    \ NVIC_ISER1 (read-write) Reset:0x00000000
    : NVIC_ISER1_SETENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISER1 ; \ NVIC_ISER1_SETENA, SETENA
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_ISER2 (read-write) Reset:0x00000000
    : NVIC_ISER2_SETENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISER2 ; \ NVIC_ISER2_SETENA, SETENA
  [then]

  [if]
    \ NVIC_ICER0 (read-write) Reset:0x00000000
    : NVIC_ICER0_CLRENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICER0 ; \ NVIC_ICER0_CLRENA, CLRENA
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_ICER1 (read-write) Reset:0x00000000
    : NVIC_ICER1_CLRENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICER1 ; \ NVIC_ICER1_CLRENA, CLRENA
  [then]

  [if]
    \ NVIC_ICER2 (read-write) Reset:0x00000000
    : NVIC_ICER2_CLRENA ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICER2 ; \ NVIC_ICER2_CLRENA, CLRENA
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_ISPR0 (read-write) Reset:0x00000000
    : NVIC_ISPR0_SETPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISPR0 ; \ NVIC_ISPR0_SETPEND, SETPEND
  [then]

  [if]
    \ NVIC_ISPR1 (read-write) Reset:0x00000000
    : NVIC_ISPR1_SETPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISPR1 ; \ NVIC_ISPR1_SETPEND, SETPEND
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_ISPR2 (read-write) Reset:0x00000000
    : NVIC_ISPR2_SETPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ISPR2 ; \ NVIC_ISPR2_SETPEND, SETPEND
  [then]

  [if]
    \ NVIC_ICPR0 (read-write) Reset:0x00000000
    : NVIC_ICPR0_CLRPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICPR0 ; \ NVIC_ICPR0_CLRPEND, CLRPEND
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_ICPR1 (read-write) Reset:0x00000000
    : NVIC_ICPR1_CLRPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICPR1 ; \ NVIC_ICPR1_CLRPEND, CLRPEND
  [then]

  [if]
    \ NVIC_ICPR2 (read-write) Reset:0x00000000
    : NVIC_ICPR2_CLRPEND ( %bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -- x addr ) NVIC_ICPR2 ; \ NVIC_ICPR2_CLRPEND, CLRPEND
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IABR0 (read-only) Reset:0x00000000
    : NVIC_IABR0_ACTIVE? ( --  x ) NVIC_IABR0 @ ; \ NVIC_IABR0_ACTIVE, ACTIVE
  [then]

  [if]
    \ NVIC_IABR1 (read-only) Reset:0x00000000
    : NVIC_IABR1_ACTIVE? ( --  x ) NVIC_IABR1 @ ; \ NVIC_IABR1_ACTIVE, ACTIVE
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IABR2 (read-only) Reset:0x00000000
    : NVIC_IABR2_ACTIVE? ( --  x ) NVIC_IABR2 @ ; \ NVIC_IABR2_ACTIVE, ACTIVE
  [then]

  [if]
    \ NVIC_IPR0 (read-write) Reset:0x00000000
    : NVIC_IPR0_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR0 ; \ NVIC_IPR0_IPR_N0, IPR_N0
    : NVIC_IPR0_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR0 ; \ NVIC_IPR0_IPR_N1, IPR_N1
    : NVIC_IPR0_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR0 ; \ NVIC_IPR0_IPR_N2, IPR_N2
    : NVIC_IPR0_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR0 ; \ NVIC_IPR0_IPR_N3, IPR_N3
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IPR1 (read-write) Reset:0x00000000
    : NVIC_IPR1_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR1 ; \ NVIC_IPR1_IPR_N0, IPR_N0
    : NVIC_IPR1_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR1 ; \ NVIC_IPR1_IPR_N1, IPR_N1
    : NVIC_IPR1_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR1 ; \ NVIC_IPR1_IPR_N2, IPR_N2
    : NVIC_IPR1_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR1 ; \ NVIC_IPR1_IPR_N3, IPR_N3
  [then]

  [if]
    \ NVIC_IPR2 (read-write) Reset:0x00000000
    : NVIC_IPR2_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR2 ; \ NVIC_IPR2_IPR_N0, IPR_N0
    : NVIC_IPR2_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR2 ; \ NVIC_IPR2_IPR_N1, IPR_N1
    : NVIC_IPR2_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR2 ; \ NVIC_IPR2_IPR_N2, IPR_N2
    : NVIC_IPR2_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR2 ; \ NVIC_IPR2_IPR_N3, IPR_N3
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IPR3 (read-write) Reset:0x00000000
    : NVIC_IPR3_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR3 ; \ NVIC_IPR3_IPR_N0, IPR_N0
    : NVIC_IPR3_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR3 ; \ NVIC_IPR3_IPR_N1, IPR_N1
    : NVIC_IPR3_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR3 ; \ NVIC_IPR3_IPR_N2, IPR_N2
    : NVIC_IPR3_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR3 ; \ NVIC_IPR3_IPR_N3, IPR_N3
  [then]

  [if]
    \ NVIC_IPR4 (read-write) Reset:0x00000000
    : NVIC_IPR4_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR4 ; \ NVIC_IPR4_IPR_N0, IPR_N0
    : NVIC_IPR4_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR4 ; \ NVIC_IPR4_IPR_N1, IPR_N1
    : NVIC_IPR4_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR4 ; \ NVIC_IPR4_IPR_N2, IPR_N2
    : NVIC_IPR4_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR4 ; \ NVIC_IPR4_IPR_N3, IPR_N3
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IPR5 (read-write) Reset:0x00000000
    : NVIC_IPR5_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR5 ; \ NVIC_IPR5_IPR_N0, IPR_N0
    : NVIC_IPR5_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR5 ; \ NVIC_IPR5_IPR_N1, IPR_N1
    : NVIC_IPR5_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR5 ; \ NVIC_IPR5_IPR_N2, IPR_N2
    : NVIC_IPR5_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR5 ; \ NVIC_IPR5_IPR_N3, IPR_N3
  [then]

  [if]
    \ NVIC_IPR6 (read-write) Reset:0x00000000
    : NVIC_IPR6_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR6 ; \ NVIC_IPR6_IPR_N0, IPR_N0
    : NVIC_IPR6_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR6 ; \ NVIC_IPR6_IPR_N1, IPR_N1
    : NVIC_IPR6_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR6 ; \ NVIC_IPR6_IPR_N2, IPR_N2
    : NVIC_IPR6_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR6 ; \ NVIC_IPR6_IPR_N3, IPR_N3
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IPR7 (read-write) Reset:0x00000000
    : NVIC_IPR7_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR7 ; \ NVIC_IPR7_IPR_N0, IPR_N0
    : NVIC_IPR7_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR7 ; \ NVIC_IPR7_IPR_N1, IPR_N1
    : NVIC_IPR7_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR7 ; \ NVIC_IPR7_IPR_N2, IPR_N2
    : NVIC_IPR7_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR7 ; \ NVIC_IPR7_IPR_N3, IPR_N3
  [then]

  [if]
    \ NVIC_IPR8 (read-write) Reset:0x00000000
    : NVIC_IPR8_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR8 ; \ NVIC_IPR8_IPR_N0, IPR_N0
    : NVIC_IPR8_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR8 ; \ NVIC_IPR8_IPR_N1, IPR_N1
    : NVIC_IPR8_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR8 ; \ NVIC_IPR8_IPR_N2, IPR_N2
    : NVIC_IPR8_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR8 ; \ NVIC_IPR8_IPR_N3, IPR_N3
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IPR9 (read-write) Reset:0x00000000
    : NVIC_IPR9_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR9 ; \ NVIC_IPR9_IPR_N0, IPR_N0
    : NVIC_IPR9_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR9 ; \ NVIC_IPR9_IPR_N1, IPR_N1
    : NVIC_IPR9_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR9 ; \ NVIC_IPR9_IPR_N2, IPR_N2
    : NVIC_IPR9_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR9 ; \ NVIC_IPR9_IPR_N3, IPR_N3
  [then]

  [if]
    \ NVIC_IPR10 (read-write) Reset:0x00000000
    : NVIC_IPR10_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR10 ; \ NVIC_IPR10_IPR_N0, IPR_N0
    : NVIC_IPR10_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR10 ; \ NVIC_IPR10_IPR_N1, IPR_N1
    : NVIC_IPR10_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR10 ; \ NVIC_IPR10_IPR_N2, IPR_N2
    : NVIC_IPR10_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR10 ; \ NVIC_IPR10_IPR_N3, IPR_N3
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IPR11 (read-write) Reset:0x00000000
    : NVIC_IPR11_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR11 ; \ NVIC_IPR11_IPR_N0, IPR_N0
    : NVIC_IPR11_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR11 ; \ NVIC_IPR11_IPR_N1, IPR_N1
    : NVIC_IPR11_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR11 ; \ NVIC_IPR11_IPR_N2, IPR_N2
    : NVIC_IPR11_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR11 ; \ NVIC_IPR11_IPR_N3, IPR_N3
  [then]

  [if]
    \ NVIC_IPR12 (read-write) Reset:0x00000000
    : NVIC_IPR12_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR12 ; \ NVIC_IPR12_IPR_N0, IPR_N0
    : NVIC_IPR12_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR12 ; \ NVIC_IPR12_IPR_N1, IPR_N1
    : NVIC_IPR12_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR12 ; \ NVIC_IPR12_IPR_N2, IPR_N2
    : NVIC_IPR12_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR12 ; \ NVIC_IPR12_IPR_N3, IPR_N3
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IPR13 (read-write) Reset:0x00000000
    : NVIC_IPR13_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR13 ; \ NVIC_IPR13_IPR_N0, IPR_N0
    : NVIC_IPR13_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR13 ; \ NVIC_IPR13_IPR_N1, IPR_N1
    : NVIC_IPR13_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR13 ; \ NVIC_IPR13_IPR_N2, IPR_N2
    : NVIC_IPR13_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR13 ; \ NVIC_IPR13_IPR_N3, IPR_N3
  [then]

  [if]
    \ NVIC_IPR14 (read-write) Reset:0x00000000
    : NVIC_IPR14_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR14 ; \ NVIC_IPR14_IPR_N0, IPR_N0
    : NVIC_IPR14_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR14 ; \ NVIC_IPR14_IPR_N1, IPR_N1
    : NVIC_IPR14_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR14 ; \ NVIC_IPR14_IPR_N2, IPR_N2
    : NVIC_IPR14_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR14 ; \ NVIC_IPR14_IPR_N3, IPR_N3
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IPR15 (read-write) Reset:0x00000000
    : NVIC_IPR15_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR15 ; \ NVIC_IPR15_IPR_N0, IPR_N0
    : NVIC_IPR15_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR15 ; \ NVIC_IPR15_IPR_N1, IPR_N1
    : NVIC_IPR15_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR15 ; \ NVIC_IPR15_IPR_N2, IPR_N2
    : NVIC_IPR15_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR15 ; \ NVIC_IPR15_IPR_N3, IPR_N3
  [then]

  [if]
    \ NVIC_IPR16 (read-write) Reset:0x00000000
    : NVIC_IPR16_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR16 ; \ NVIC_IPR16_IPR_N0, IPR_N0
    : NVIC_IPR16_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR16 ; \ NVIC_IPR16_IPR_N1, IPR_N1
    : NVIC_IPR16_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR16 ; \ NVIC_IPR16_IPR_N2, IPR_N2
    : NVIC_IPR16_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR16 ; \ NVIC_IPR16_IPR_N3, IPR_N3
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IPR17 (read-write) Reset:0x00000000
    : NVIC_IPR17_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR17 ; \ NVIC_IPR17_IPR_N0, IPR_N0
    : NVIC_IPR17_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR17 ; \ NVIC_IPR17_IPR_N1, IPR_N1
    : NVIC_IPR17_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR17 ; \ NVIC_IPR17_IPR_N2, IPR_N2
    : NVIC_IPR17_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR17 ; \ NVIC_IPR17_IPR_N3, IPR_N3
  [then]

  [if]
    \ NVIC_IPR18 (read-write) Reset:0x00000000
    : NVIC_IPR18_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR18 ; \ NVIC_IPR18_IPR_N0, IPR_N0
    : NVIC_IPR18_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR18 ; \ NVIC_IPR18_IPR_N1, IPR_N1
    : NVIC_IPR18_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR18 ; \ NVIC_IPR18_IPR_N2, IPR_N2
    : NVIC_IPR18_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR18 ; \ NVIC_IPR18_IPR_N3, IPR_N3
  [then]

  execute-defined? use-NVIC [if]
    \ NVIC_IPR19 (read-write) Reset:0x00000000
    : NVIC_IPR19_IPR_N0 ( %bbbbbbbb -- x addr ) NVIC_IPR19 ; \ NVIC_IPR19_IPR_N0, IPR_N0
    : NVIC_IPR19_IPR_N1 ( %bbbbbbbb -- x addr ) 8 lshift NVIC_IPR19 ; \ NVIC_IPR19_IPR_N1, IPR_N1
    : NVIC_IPR19_IPR_N2 ( %bbbbbbbb -- x addr ) 16 lshift NVIC_IPR19 ; \ NVIC_IPR19_IPR_N2, IPR_N2
    : NVIC_IPR19_IPR_N3 ( %bbbbbbbb -- x addr ) 24 lshift NVIC_IPR19 ; \ NVIC_IPR19_IPR_N3, IPR_N3
  [then]

end-module

compile-to-ram
