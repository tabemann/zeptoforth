<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Pulse Width Modulation Words</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section class="tex2jax_ignore mathjax_ignore" id="pulse-width-modulation-words">
<h1>Pulse Width Modulation Words</h1>
<p>The RP2040 (which is in the Raspberry Pi Pico) has support for Pulse Width Modulation (PWM for short), which includes a counter capability. There are eight PWM “slices”, each of which have pair of GPIO pins as outputs, pins A and B, and pin B can also be used as an input. Also, each of the PWM slices, aside from PWM slice 7, maps to four separate GPIO pins, two of which are A pins and two of which are B pins (PWM slice 7 only maps to one A pin and one B pin).</p>
<p>Each PWM slice is associated with a counter value and a top value at which the counter wraps back to zero. Also, the A and B outputs each have a compare value at which their output transitions from high to low. Note that PWM slices have a “phase correct” mode which modifies this functionality so that the phase of a PWM output does not change with changes to its compare value.</p>
<p>PWM slices have a clock divider which divides the system clock by an integral value, from 1 to 255, plus a fractional value, of 0 to 15 divided by 16.</p>
<p>PWM slices have four different primary modes. One is free-running mode, where the counter increases by one each cycle. Another is gating mode, where the counter increases by one each cycle the B input of the PWM slice is high. Another is risng-edge mode, where the counter increases by one for each rising edge detected on the B input of the PWM slice. And last but not least, there is falling-edge mode, where the counter increase by one for each falling edge detected on the B input of the PWM slice.</p>
<p>When a PWM slice’s counter reaches its top value, an interrupt can be raised. All PWM slices share the same IRQ. They have separate flags indicating their interrupt status, which can be cleared independent of one another, and interrupts can be enabled and disabled independently of each of them.</p>
<p>Last but not least, PWM slices’ A and B outputs can be inverted independent of one another.</p>
<section id="pwm">
<h2><code class="docutils literal notranslate"><span class="pre">pwm</span></code></h2>
<p>The following words are in the <code class="docutils literal notranslate"><span class="pre">pwm</span></code> module:</p>
<section id="x-out-of-range-pwm">
<h3><code class="docutils literal notranslate"><span class="pre">x-out-of-range-pwm</span></code></h3>
<p>( – )</p>
<p>Out of range PWM index exception.</p>
</section>
<section id="x-out-of-range-clock-div">
<h3><code class="docutils literal notranslate"><span class="pre">x-out-of-range-clock-div</span></code></h3>
<p>( – )</p>
<p>Out of range clock divisor exception.</p>
</section>
<section id="x-out-of-range-counter">
<h3><code class="docutils literal notranslate"><span class="pre">x-out-of-range-counter</span></code></h3>
<p>( – )</p>
<p>Out of range counter value exception.</p>
</section>
<section id="x-out-of-range-compare">
<h3><code class="docutils literal notranslate"><span class="pre">x-out-of-range-compare</span></code></h3>
<p>( – )</p>
<p>Out of range compare value exception.</p>
</section>
<section id="x-out-of-range-top">
<h3><code class="docutils literal notranslate"><span class="pre">x-out-of-range-top</span></code></h3>
<p>( – )</p>
<p>Out of range top value exception.</p>
</section>
<section id="pwm-pin">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-pin</span></code></h3>
<p>( pin – )</p>
<p>Set a pin as a PWM pin.</p>
</section>
<section id="pwm-vector">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-vector!</span></code></h3>
<p>( xt – )</p>
<p>Set PWM IRQ handler.</p>
</section>
<section id="enable-pwm">
<h3><code class="docutils literal notranslate"><span class="pre">enable-pwm</span></code></h3>
<p>( bits – )</p>
<p>Enable any set of slices, expressed as bits from 0 to 7.</p>
</section>
<section id="disable-pwm">
<h3><code class="docutils literal notranslate"><span class="pre">disable-pwm</span></code></h3>
<p>( bits – )</p>
<p>Disable any set of slices, expressed as bits from 0 to 7.</p>
</section>
<section id="enable-pwm-int">
<h3><code class="docutils literal notranslate"><span class="pre">enable-pwm-int</span></code></h3>
<p>( bits – )</p>
<p>Enable interrupts for any set of slices, expressed as bits from 0 to 7.</p>
</section>
<section id="disable-pwm-int">
<h3><code class="docutils literal notranslate"><span class="pre">disable-pwm-int</span></code></h3>
<p>( bits – )</p>
<p>Disable interrupts for any set of slices, expressed as bits from 0 to 7.</p>
</section>
<section id="clear-pwm-int">
<h3><code class="docutils literal notranslate"><span class="pre">clear-pwm-int</span></code></h3>
<p>( bits – )</p>
<p>Clear an interrupt for any set of slices, expressed as bits from 0 to 7.</p>
</section>
<section id="pwm-int">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-int&#64;</span></code></h3>
<p>( – bits )</p>
<p>Get the interrupt state for all slices, expressed as one bit per slice from 0 to 7.</p>
</section>
<section id="clear-pwm-pending">
<h3><code class="docutils literal notranslate"><span class="pre">clear-pwm-pending</span></code></h3>
<p>( – )</p>
<p>Clear pending PWM interrupt.</p>
</section>
<section id="advance-pwm-phase">
<h3><code class="docutils literal notranslate"><span class="pre">advance-pwm-phase</span></code></h3>
<p>( index – )</p>
<p>Advance the phase of a running counter by 1 count.</p>
</section>
<section id="retard-pwm-phase">
<h3><code class="docutils literal notranslate"><span class="pre">retard-pwm-phase</span></code></h3>
<p>( index – )</p>
<p>Retard the phase of a running counter by 1 count.</p>
</section>
<section id="free-running-pwm">
<h3><code class="docutils literal notranslate"><span class="pre">free-running-pwm</span></code></h3>
<p>( index – )</p>
<p>Set a slice to be free-running.</p>
</section>
<section id="gated-pwm">
<h3><code class="docutils literal notranslate"><span class="pre">gated-pwm</span></code></h3>
<p>( index – )</p>
<p>Set a slice to be gated by the PWM B pin.</p>
</section>
<section id="rising-edge-pwm">
<h3><code class="docutils literal notranslate"><span class="pre">rising-edge-pwm</span></code></h3>
<p>( index – )</p>
<p>Set a slice to advance with each rising eddge of the PWM B pin.</p>
</section>
<section id="falling-edge-pwm">
<h3><code class="docutils literal notranslate"><span class="pre">falling-edge-pwm</span></code></h3>
<p>( index – )</p>
<p>Set a slice to advance with each falling edge of the PWM B pin.</p>
</section>
<section id="pwm-invert-b">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-invert-b!</span></code></h3>
<p>( state index – )</p>
<p>Set invert PWM output B for a slice.</p>
</section>
<section id="pwm-invert-a">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-invert-a!</span></code></h3>
<p>( state index – )</p>
<p>Set invert PWM output A for a slice.</p>
</section>
<section id="pwm-phase-correct">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-phase-correct!</span></code></h3>
<p>( state index – )</p>
<p>Set phase-correct modulation for a slice.</p>
</section>
<section id="pwm-clock-div">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-clock-div!</span></code></h3>
<p>( fract int index – )</p>
<p>Set clock frequency divisor; int is the integral portion from 1 to 255 and fract is the fractional portion from 0 to 15.</p>
</section>
<section id="pwm-counter-compare-b">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-counter-compare-b!</span></code></h3>
<p>( value index – )</p>
<p>Set the PWM output B for a slice counter compare value.</p>
</section>
<section id="pwm-counter-compare-a">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-counter-compare-a!</span></code></h3>
<p>( value index – )</p>
<p>Set the PWM output A for a slice counter compare value.</p>
</section>
<section id="pwm-top">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-top!</span></code></h3>
<p>( value index – )</p>
<p>Set the slice counter wrap value.</p>
</section>
<section id="pwm-counter">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-counter!</span></code></h3>
<p>( value index – )</p>
<p>Set the slice counter value.</p>
</section>
<section id="id1">
<h3><code class="docutils literal notranslate"><span class="pre">pwm-counter&#64;</span></code></h3>
<p>( index – value )</p>
<p>Get the slice counter value.</p>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>