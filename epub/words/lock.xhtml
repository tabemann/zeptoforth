<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Lock Words</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section class="tex2jax_ignore mathjax_ignore" id="lock-words">
<h1>Lock Words</h1>
<p>A lock enforces mutual exclusion, typically with regard to control of a resource, between multiple tasks. It also serves as a queue for multiple tasks waiting on the lock which is held by another task. Furthermore, it provides a mechanism to avoid priority inversion, by temporarily elevating each task holding a lock’s priority to the maximum priority of all the tasks waiting for it; this applies even when chaining together multiple locks held by tasks holding some locks and waiting on others.</p>
<section id="lock">
<h2><code class="docutils literal notranslate"><span class="pre">lock</span></code></h2>
<p>The following words are in <code class="docutils literal notranslate"><span class="pre">lock</span></code>:</p>
<section id="x-not-currently-owned">
<h3><code class="docutils literal notranslate"><span class="pre">x-not-currently-owned</span></code></h3>
<p>( – )</p>
<p>Exception raised if a task attempts to unlock a lock it is not the holder of.</p>
</section>
<section id="x-double-lock">
<h3><code class="docutils literal notranslate"><span class="pre">x-double-lock</span></code></h3>
<p>( – )</p>
<p>Exception raised if a task attempts to lock a lock it has already locked.</p>
</section>
<section id="lock-size">
<h3><code class="docutils literal notranslate"><span class="pre">lock-size</span></code></h3>
<p>( – bytes )</p>
<p>Get the size of a lock in bytes.</p>
</section>
<section id="init-lock">
<h3><code class="docutils literal notranslate"><span class="pre">init-lock</span></code></h3>
<p>( addr – )</p>
<p>Initialize a lock starting at the specified address <em>addr</em>; note that it must be <code class="docutils literal notranslate"><span class="pre">lock-size</span></code> bytes in size.</p>
</section>
<section id="claim-lock">
<h3><code class="docutils literal notranslate"><span class="pre">claim-lock</span></code></h3>
<p>( lock – )</p>
<p>Attempt to acquire a lock <em>lock</em>; if the lock is already held, put the current task in a queue and disable it. In that case, update the priority of the holder of a lock, and any subsequent holders of any locks waited for by the holder of this lock, in order to avoid priority inversion. Note that this must not be called within a critical section. If a task attempts to lock a lock it has already locked, <code class="docutils literal notranslate"><span class="pre">x-double-lock</span></code> is raised.</p>
</section>
<section id="release-lock">
<h3><code class="docutils literal notranslate"><span class="pre">release-lock</span></code></h3>
<p>( lock – )</p>
<p>Attempt to release a lock <em>lock</em>; if the current task is not the holder of the lock, raise <code class="docutils literal notranslate"><span class="pre">x-not-currently-owned</span></code>. If releasing the lock is successful, restore the priority of the current task to what it would be had its priority not been updated in order to avoid priority inversion; afterwards, carry out all the functionality that <code class="docutils literal notranslate"><span class="pre">lock</span></code> would carry out had it been called by the task at the head of the queue if there is one. Note that this must not be called within a critical section.</p>
</section>
<section id="with-lock">
<h3><code class="docutils literal notranslate"><span class="pre">with-lock</span></code></h3>
<p>( xt lock – )</p>
<p>Execute an xt with a given lock <em>lock</em> locked while it executes, unlocking it afterwards. If an exception is raised by <em>xt</em>, unlock <em>lock</em> and then re-raise the exception.</p>
</section>
<section id="update-lock-priority">
<h3><code class="docutils literal notranslate"><span class="pre">update-lock-priority</span></code></h3>
<p>( lock – )</p>
<p>Update the priority of the holder of a lock, and the priority of the holder of a lock waited on by the holder of this lock, and so on, in order to avoid priority inversion. Note that this must not be called within a critical section.</p>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>