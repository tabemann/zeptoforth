<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Semaphore Words</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section class="tex2jax_ignore mathjax_ignore" id="semaphore-words">
<h1>Semaphore Words</h1>
<p>A semaphore is a task synchronization construct which keeps a counter indicating some resource and, when the counter is negative, a queue of waiting tasks. Tasks can <em>give</em> a semaphore, which increments the counter, and if there one or more waiting tasks, readies the task that has been blocked the longest in an FIFO fashion. Note that a limit can be specified where <em>giving</em> a semaphore will not increase the counter beyond the specified limit. Tasks can also <em>take</em> a semaphore, which decrements the counter, and if afterwards the counter is negative, blocks the task and places it at the end of the queue of waiting tasks. Additionally there are operations for <em>ungiving</em> a semaphore, in the case where one needs to decrement the counter without potentially blocking the current task, and for <em>broadcasting</em> a semaphore, which is equivalent to <em>giving</em> each waiting task.</p>
<section id="sema">
<h2><code class="docutils literal notranslate"><span class="pre">sema</span></code></h2>
<p>The following words are in <code class="docutils literal notranslate"><span class="pre">sema</span></code>:</p>
<section id="sema-size">
<h3><code class="docutils literal notranslate"><span class="pre">sema-size</span></code></h3>
<p>( – bytes )</p>
<p>The size of a semaphore in bytes.</p>
</section>
<section id="no-sema-limit">
<h3><code class="docutils literal notranslate"><span class="pre">no-sema-limit</span></code></h3>
<p>( – n )</p>
<p>Magic value indicating no semaphore limit.</p>
</section>
<section id="init-sema">
<h3><code class="docutils literal notranslate"><span class="pre">init-sema</span></code></h3>
<p>( limit counter addr – )</p>
<p>Initialize a semaphore at the specified address <em>addr</em>, which must have size <code class="docutils literal notranslate"><span class="pre">sema-size</span></code>, with <em>counter</em> as the initial counter and <em>limit</em> as the counter limit; a <em>limit</em> of <code class="docutils literal notranslate"><span class="pre">no-sema-limit</span></code> will disable counter limits.</p>
</section>
<section id="take">
<h3><code class="docutils literal notranslate"><span class="pre">take</span></code></h3>
<p>( semaphore – )</p>
<p>Decrement the counter of a semaphore, blocking the current task if the counter after decrementing is negative; if a timeout is specified via the user variable <code class="docutils literal notranslate"><span class="pre">timeout</span></code> and the current task is not readied before the timeout is reached, the exception <code class="docutils literal notranslate"><span class="pre">x-timed-out</span></code> is raised (both <code class="docutils literal notranslate"><span class="pre">timeout</span></code> and <code class="docutils literal notranslate"><span class="pre">x-timed-out</span></code> are defined in <code class="docutils literal notranslate"><span class="pre">task</span></code>). This is not safe to call within an interrupt service routine or critical section.</p>
</section>
<section id="give">
<h3><code class="docutils literal notranslate"><span class="pre">give</span></code></h3>
<p>( semaphore – )</p>
<p>Increment the counter of a semaphore, up to the counter limit if one is set; if one or more tasks are blocked on the semaphore, the one that has been blocked the longest is readied. This is not safe to call within an interrupt service routine or critical section.</p>
</section>
<section id="ungive">
<h3><code class="docutils literal notranslate"><span class="pre">ungive</span></code></h3>
<p>( semaphore – )</p>
<p>Decrement the counter of a semaphore without blocking the current task. This is not safe to call within an interrupt service routine or critical section.</p>
</section>
<section id="broadcast">
<h3><code class="docutils literal notranslate"><span class="pre">broadcast</span></code></h3>
<p>( semaphore – )</p>
<p><em>Give</em> all of the tasks blocked on a semaphore. This is not safe to call within an interrupt service routine or critical section.</p>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>