<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>Exposed Kernel Variables</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="exposed-kernel-variables">
<h1>Exposed Kernel Variables</h1>
<section id="forth">
<h2><code class="docutils literal notranslate"><span class="pre">forth</span></code></h2>
<p>These words are in <code class="docutils literal notranslate"><span class="pre">forth</span></code>.</p>
<section id="state">
<h3><code class="docutils literal notranslate"><span class="pre">state</span></code></h3>
<p>Get the STATE variable address</p>
</section>
<section id="base">
<h3><code class="docutils literal notranslate"><span class="pre">base</span></code></h3>
<p>Get the BASE variable address</p>
</section>
<section id="pause-enabled">
<h3><code class="docutils literal notranslate"><span class="pre">pause-enabled</span></code></h3>
<p>Get the PAUSE enabled variable address.</p>
</section>
<section id="xon-xoff-enabled">
<h3><code class="docutils literal notranslate"><span class="pre">xon-xoff-enabled</span></code></h3>
<p>Get the XON/XOFF enabled variable address; note that this variable defaults to 0 (disabled).</p>
</section>
<section id="ack-nak-enabled">
<h3><code class="docutils literal notranslate"><span class="pre">ack-nak-enabled</span></code></h3>
<p>Get the ACK/NAK enabled variable address; note that this variable defaults to -1 (enabled).</p>
</section>
<section id="bel-enabled">
<h3><code class="docutils literal notranslate"><span class="pre">bel-enabled</span></code></h3>
<p>Get the BEL enabled variable address; note that this variable defaults to -1 (enabled).</p>
</section>
<section id="color-enabled">
<h3><code class="docutils literal notranslate"><span class="pre">color-enabled</span></code></h3>
<p>Get the color enabled variable address; note that this variable defaults to -1 (enabled).</p>
</section>
<section id="uart-special-enabled">
<h3><code class="docutils literal notranslate"><span class="pre">uart-special-enabled</span></code></h3>
<p>Get the UART special character (control-C and control-T) handling enabled variable address; note that this variable defaults to -1 (enabled).</p>
</section>
<section id="dict-base">
<h3><code class="docutils literal notranslate"><span class="pre">dict-base</span></code></h3>
<p>Get the RAM dictionary base variable address</p>
</section>
<section id="ram-base">
<h3><code class="docutils literal notranslate"><span class="pre">ram-base</span></code></h3>
<p>Get the RAM base</p>
</section>
<section id="ram-end">
<h3><code class="docutils literal notranslate"><span class="pre">ram-end</span></code></h3>
<p>Get the RAM end</p>
</section>
<section id="flash-base">
<h3><code class="docutils literal notranslate"><span class="pre">flash-base</span></code></h3>
<p>Get the flash base</p>
</section>
<section id="flash-end">
<h3><code class="docutils literal notranslate"><span class="pre">flash-end</span></code></h3>
<p>Get the flash end</p>
</section>
<section id="stack-base">
<h3><code class="docutils literal notranslate"><span class="pre">stack-base</span></code></h3>
<p>Get the current stack base variable address</p>
</section>
<section id="stack-end">
<h3><code class="docutils literal notranslate"><span class="pre">stack-end</span></code></h3>
<p>Get the current stack end variable address</p>
</section>
<section id="rstack-base">
<h3><code class="docutils literal notranslate"><span class="pre">rstack-base</span></code></h3>
<p>Get the current return stack base variable address</p>
</section>
<section id="rstack-end">
<h3><code class="docutils literal notranslate"><span class="pre">rstack-end</span></code></h3>
<p>Get the current returns stack end variable address</p>
</section>
<section id="handler">
<h3><code class="docutils literal notranslate"><span class="pre">handler</span></code></h3>
<p>Get the current exception handler variable address</p>
</section>
<section id="parse">
<h3><code class="docutils literal notranslate"><span class="pre">&gt;parse</span></code></h3>
<p>( – parse-index-addr )</p>
<p>The parse index; note that the address of the parse index is returned and not the parse index itself, and it may be modified by the user (it must remain in the range from 0 to the size of the parse buffer returned by <code class="docutils literal notranslate"><span class="pre">source</span></code> - 1, and reducing its value is not recommended).</p>
</section>
<section id="source">
<h3><code class="docutils literal notranslate"><span class="pre">source</span></code></h3>
<p>( – parse-buffer-addr parse-buffer-size )</p>
<p>The current string in the parse buffer, as defined by its starting address and its size in bytes.</p>
</section>
<section id="build-target">
<h3><code class="docutils literal notranslate"><span class="pre">build-target</span></code></h3>
<p>Get the address to store a literal in for the word currently being
built</p>
</section>
<section id="sys-ram-dict-base">
<h3><code class="docutils literal notranslate"><span class="pre">sys-ram-dict-base</span></code></h3>
<p>Get the base of the system RAM dictionary space</p>
</section>
<section id="in">
<h3><code class="docutils literal notranslate"><span class="pre">&gt;in</span></code></h3>
<p>The input buffer index</p>
</section>
<section id="input">
<h3><code class="docutils literal notranslate"><span class="pre">input#</span></code></h3>
<p>The input buffer count</p>
</section>
<section id="id1">
<h3><code class="docutils literal notranslate"><span class="pre">input</span></code></h3>
<p>The input buffer</p>
</section>
<section id="order-count">
<h3><code class="docutils literal notranslate"><span class="pre">order-count</span></code></h3>
<p>The wordlist count</p>
</section>
<section id="order">
<h3><code class="docutils literal notranslate"><span class="pre">order</span></code></h3>
<p>The wordlist order</p>
</section>
<section id="prompt-hook">
<h3><code class="docutils literal notranslate"><span class="pre">prompt-hook</span></code></h3>
<p>The prompt hook</p>
</section>
<section id="handle-number-hook">
<h3><code class="docutils literal notranslate"><span class="pre">handle-number-hook</span></code></h3>
<p>The handle number hook</p>
</section>
<section id="failed-parse-hook">
<h3><code class="docutils literal notranslate"><span class="pre">failed-parse-hook</span></code></h3>
<p>The failed parse hook</p>
</section>
<section id="refill-hook">
<h3><code class="docutils literal notranslate"><span class="pre">refill-hook</span></code></h3>
<p>The refill hook</p>
</section>
<section id="pause-hook">
<h3><code class="docutils literal notranslate"><span class="pre">pause-hook</span></code></h3>
<p>The pause hook</p>
</section>
<section id="validate-dict-hook">
<h3><code class="docutils literal notranslate"><span class="pre">validate-dict-hook</span></code></h3>
<p>The dictionary size validation hook</p>
</section>
<section id="fault-handler-hook">
<h3><code class="docutils literal notranslate"><span class="pre">fault-handler-hook</span></code></h3>
<p>Get the FAULT-HANDLER-HOOK variable address</p>
</section>
<section id="null-handler-hook">
<h3><code class="docutils literal notranslate"><span class="pre">null-handler-hook</span></code></h3>
<p>Get the NULL-HANDLER-HOOK variable address</p>
</section>
<section id="svcall-handler-hook">
<h3><code class="docutils literal notranslate"><span class="pre">svcall-handler-hook</span></code></h3>
<p>Get the SVCALL-HANDLER-HOOK variable address</p>
</section>
<section id="pendsv-handler-hook">
<h3><code class="docutils literal notranslate"><span class="pre">pendsv-handler-hook</span></code></h3>
<p>Get the PENDSV-HANDLER-HOOK variable address</p>
</section>
<section id="systick-handler-hook">
<h3><code class="docutils literal notranslate"><span class="pre">systick-handler-hook</span></code></h3>
<p>Get the SYSTICK-HANDLER-HOOK variable address</p>
</section>
<section id="cortex-m7">
<h3><code class="docutils literal notranslate"><span class="pre">cortex-m7?</span></code></h3>
<p>( – flag )</p>
<p>Get whether zeptoforth is built for ARM Cortex-M7.</p>
</section>
<section id="cortex-m33">
<h3><code class="docutils literal notranslate"><span class="pre">cortex-m33?</span></code></h3>
<p>( – flag )</p>
<p>Get whether zeptoforth is built for ARM Cortex-M33.</p>
</section>
<section id="chip">
<h3><code class="docutils literal notranslate"><span class="pre">chip</span></code></h3>
<p>( – chip1 chip0 )</p>
<p>Get ID codes indicating the CPU make and model.</p>
<ul class="simple">
<li><p><em>chip0</em> of <code class="docutils literal notranslate"><span class="pre">$7270</span></code> indicates Raspberry Pi Ltd.</p></li>
<li><p><em>chip0</em> of <code class="docutils literal notranslate"><span class="pre">$73746D</span></code> indicates STMicroelectronics.</p></li>
<li><p><em>chip1</em> of <code class="docutils literal notranslate"><span class="pre">2040</span></code> indicates RP2040.</p></li>
<li><p><em>chip1</em> of <code class="docutils literal notranslate"><span class="pre">2350</span></code> indicates RP2350.</p></li>
<li><p><em>chip1</em> of <code class="docutils literal notranslate"><span class="pre">$66000197</span></code> indicates STM32F407.</p></li>
<li><p><em>chip1</em> of <code class="docutils literal notranslate"><span class="pre">$6600019B</span></code> indicates STM32F411.</p></li>
<li><p><em>chip1</em> of <code class="docutils literal notranslate"><span class="pre">$660002EA</span></code> indicates STM32F746.</p></li>
<li><p><em>chip1</em> of <code class="docutils literal notranslate"><span class="pre">$6C0001DC</span></code> indicates STM32L476.</p></li>
</ul>
</section>
</section>
<section id="rp2040-and-rp2350-words">
<h2>RP2040 and RP2350 Words</h2>
<section id="id2">
<h3><code class="docutils literal notranslate"><span class="pre">forth</span></code></h3>
<p>This word is in <code class="docutils literal notranslate"><span class="pre">forth</span></code>.</p>
<section id="rp2040">
<h4><code class="docutils literal notranslate"><span class="pre">rp2040?</span></code></h4>
<p>( – flag )</p>
<p>Get whether zeptoforth is built for RP2040.</p>
</section>
<section id="rp2350">
<h4><code class="docutils literal notranslate"><span class="pre">rp2350?</span></code></h4>
<p>( – flag )</p>
<p>Get whether zeptoforth is built for RP2350.</p>
</section>
<section id="unique-id">
<h4><code class="docutils literal notranslate"><span class="pre">unique-id</span></code></h4>
<p>( – d )</p>
<p>Returns the 64-bit board unique ID value, as a double number.</p>
</section>
<section id="chip-revision">
<h4><code class="docutils literal notranslate"><span class="pre">chip-revision</span></code></h4>
<p>( – u )</p>
<p>Get the REVISION field of the CHIP_ID register in the SYSINFO address space.</p>
</section>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>