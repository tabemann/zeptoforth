<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Multitasking Words</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section class="tex2jax_ignore mathjax_ignore" id="multitasking-words">
<h1>Multitasking Words</h1>
<p>Multitasking in zeptoforth is not part of the zeptoforth kernel, but is provided by <code class="docutils literal notranslate"><span class="pre">src/common/forth/task.fs</span></code>, which in turn relies upon <code class="docutils literal notranslate"><span class="pre">src/&lt;platform&gt;/forth/int_io.fs</span></code> and <code class="docutils literal notranslate"><span class="pre">src/common/forth/systick.fs</span></code>. It is preemptive and priority-scheduled, but <code class="docutils literal notranslate"><span class="pre">PAUSE</span></code> may be called to explicitly relinquish control of the processor (which is highly recommended when possible); note that some words do this implicitly, such as <code class="docutils literal notranslate"><span class="pre">MS</span></code>, <code class="docutils literal notranslate"><span class="pre">KEY</span></code>, or <code class="docutils literal notranslate"><span class="pre">EMIT</span></code> (which are in turn called by words such as <code class="docutils literal notranslate"><span class="pre">REFILL</span></code> or <code class="docutils literal notranslate"><span class="pre">TYPE</span></code>).</p>
<p>Note that tasks in zeptoforth are a relatively heavy-weight asynchronous computing means. For lighter-weight asynchronous computing, consider creating a single task for running a scheduler within (so the main task can be devoted to the REPL), and then put all asynchronous actions within that.</p>
<p>There are a number of intertask communication and synchronization constructs available in full builds, including semaphores, locks, message-oriented queue channels, message-oriented rendezvous channels, byte-oriented streams, and last but not least, task notifications. All of these except for task notifications are discussed in other documentation pages.</p>
<p>Task notifications are the lightest-weight of all these mechanisms; simple synchronization between two tasks using task notifications take roughly 1/4 the time of using rendezvous channels, and task notifications have no extra memory overhead other than the mailboxes allocated by the user for each task, at one cell per mailbox whereas rendezvous channels take a minimum of 76 bytes of RAM. Mailboxes may only contain one cell each, and a task may have a maximum of 32 mailboxes for notifications. Notifications may set them to fixed values, update them with provided execution tokens, or leave them as-is. Note that improperly-written code using notifications may be subject to race conditions and data loss because no mechanism exists built-in to prevent a notification sent to a task in close succession after another notification from overwriting the contents of the mailbox in question. Also note that task notifications must be configured for a task <code class="docutils literal notranslate"><span class="pre">config-notify</span></code> before they may be used; the user must provide a pointer to a buffer containing a number of cells equal to the specified number of notification mailboxes.</p>
<p>Multitasking is enabled by default once <code class="docutils literal notranslate"><span class="pre">src/common/forth/task.fs</span></code> has been loaded and the MCU has been rebooted; afterwards each time the MCU is booted a new task is created for the REPL, the main task, and multitasking is initiated.</p>
<p>The “attention” key combination Control-T <code class="docutils literal notranslate"><span class="pre">z</span></code> sends the exception <code class="docutils literal notranslate"><span class="pre">x-interrupt-main</span></code> to the main task. The “attention” key combination Control-T <code class="docutils literal notranslate"><span class="pre">t</span></code>, after the task monitor has been started with <code class="docutils literal notranslate"><span class="pre">start-monitor</span></code> in the <code class="docutils literal notranslate"><span class="pre">monitor</span></code> module, displays information on all the tasks running.</p>
<section id="forth">
<h2><code class="docutils literal notranslate"><span class="pre">forth</span></code></h2>
<p>This word is in <code class="docutils literal notranslate"><span class="pre">forth</span></code>:</p>
<section id="pause">
<h3><code class="docutils literal notranslate"><span class="pre">pause</span></code></h3>
<p>( – )</p>
<p>Pass off control to the next active task; if no tasks are active, put the MCU to sleep until an interrupt occurs (typically due to SysTick or USART activity).</p>
</section>
</section>
<section id="task">
<h2><code class="docutils literal notranslate"><span class="pre">task</span></code></h2>
<p>These words are in <code class="docutils literal notranslate"><span class="pre">task</span></code>:</p>
<section id="current-task">
<h3><code class="docutils literal notranslate"><span class="pre">current-task</span></code></h3>
<p>( – task )</p>
<p>The current task.</p>
</section>
<section id="main-task">
<h3><code class="docutils literal notranslate"><span class="pre">main-task</span></code></h3>
<p>( – task )</p>
<p>The main task.</p>
</section>
<section id="pause-count">
<h3><code class="docutils literal notranslate"><span class="pre">pause-count</span></code></h3>
<p>( – count )</p>
<p>Get the current pause count, an unsigned 32-bit value which rolls over.xs</p>
<p>To create a task in zeptoforth, one should execute the following:</p>
</section>
<section id="spawn">
<h3><code class="docutils literal notranslate"><span class="pre">spawn</span></code></h3>
<p>( xn…x0 count xt dictionary-size stack-size rstack-size – task )</p>
<p>where <em>xn</em> through <em>x0</em> are parameters to pass to the <em>xt</em> when executed, <em>count</em> is the number of such parameters, <em>xt</em> is the entry point to the task, <em>dictionary-size</em> is the size of the dictionary for the spawned task in bytes, <em>stack-size</em> is the size of the data stack for the spawned task in bytes, <em>rstack-size</em> is the size of the return stack for the spawned task in bytes, and <em>task</em> is the header for the newly spawned task. <em>dictionary-size</em>, <em>stack-size</em>, and <em>rstack-size</em> must be multiples of four I have had good luck with values of 256 for each of these; I do not know how well smaller values will work out, especially in the case of <em>rstack-size</em>, where too small of a size will almost certainly result in a crash. This in turn returns a pointer to the task header on the stack, which can then be stored in a variable or constant.</p>
<p>Note that it is not recommended to execute this while compiling to flash; rather, it should be put in the <code class="docutils literal notranslate"><span class="pre">init</span></code> routine and then the result should be stored to a variable in RAM.</p>
<p>Note that tasks may be enabled or disabled but once created exist until the MCU is rebooted.</p>
<p>New task default to a priority of zero; to change this use <code class="docutils literal notranslate"><span class="pre">task-priority!</span></code>.</p>
<p>Tasks default to having no support for notifications; notifications must be configured for tasks with <code class="docutils literal notranslate"><span class="pre">config-notify</span></code>.</p>
<p>Uncaught exceptions within a task will be handled, with the message for them being displayed, but they will result in said task being terminated.</p>
</section>
<section id="spawn-on-core">
<h3><code class="docutils literal notranslate"><span class="pre">spawn-on-core</span></code></h3>
<p>( xn … x0 count xt dict-size stack-size rstack-size core – task )</p>
<p>Allocate the space for a task (with <em>rstack-size</em> bytes of return stack space, <em>stack-size</em> bytes of data stack space, and <em>dict-size</em> bytes of dictionary space), place <em>count</em> cells on its data stack (<em>xn</em> through <em>x0</em>, with <em>x0</em> on the top of the data stack), and set it to execute <em>xt</em> on core <em>core</em>, booting the core if necessary. If the core is to be booted, the Systick is initiated on the booted core and the booted core is initialized for multitasking.</p>
<p>The same as applies to <code class="docutils literal notranslate"><span class="pre">spawn</span></code> applies here.</p>
</section>
<section id="pause-wo-reschedule">
<h3><code class="docutils literal notranslate"><span class="pre">pause-wo-reschedule</span></code></h3>
<p>( – )</p>
<p>Relinquish control of the current core without rescheduling the current task, i.e. reinserting it into the schedule. This ensures that once the task will not move in the schedule despite its giving up control ofthe current core.</p>
</section>
<section id="config-notify">
<h3><code class="docutils literal notranslate"><span class="pre">config-notify</span></code></h3>
<p>( notify-area-addr notify-count task – )</p>
<p>Configure notification for a task, with <em>notify-count</em> being the number of supported notifications, from 0 to 32, and <em>notify-area-addr</em> being the address to an area of memory that may contain <em>notify-count</em> cells.</p>
<p>To reinitialize existing tasks, one executes:</p>
</section>
<section id="init-task">
<h3><code class="docutils literal notranslate"><span class="pre">init-task</span></code></h3>
<p>( xn…x0 count xt task – )</p>
<p>These tasks may be in any state, including being terminated. <em>xn</em> through <em>x0</em> are parameters to pass to the <em>xt</em> when executed.</p>
<p>New tasks do not execute right away, rather to enable their execution, one executes:</p>
</section>
<section id="run">
<h3><code class="docutils literal notranslate"><span class="pre">run</span></code></h3>
<p>( task – )</p>
<p>which increments the active counter for the <em>task</em> (which is initialized to zero); the task executes if this counter is greater than zero.</p>
<p>In turn a task can be disabled with:</p>
</section>
<section id="stop">
<h3><code class="docutils literal notranslate"><span class="pre">stop</span></code></h3>
<p>( task – )</p>
<p>which decrements the active counter for the <em>task</em>.</p>
<p>To raise an exception in a task, one executes:</p>
</section>
<section id="signal">
<h3><code class="docutils literal notranslate"><span class="pre">signal</span></code></h3>
<p>( xt task – )</p>
<p>which readies the task and raises an exception within it, which may be caught by the task in question.</p>
<p>To force a task to call an execution token next time it is scheduled, one executes:</p>
</section>
<section id="force-call">
<h3><code class="docutils literal notranslate"><span class="pre">force-call</span></code></h3>
<p>( xt task – )</p>
<p>which sets control to be passed to the specified execution token. Note that said execution token must never return except by raising an exception or calling <code class="docutils literal notranslate"><span class="pre">abort</span></code>, <code class="docutils literal notranslate"><span class="pre">quit-reset</span></code>, or <code class="docutils literal notranslate"><span class="pre">quit</span></code> if it is the main task. The only other actions it may ultimately take are to enter into an infinite loop or to kill the task in question.</p>
<p>To terminate a task, one executes:</p>
</section>
<section id="kill">
<h3><code class="docutils literal notranslate"><span class="pre">kill</span></code></h3>
<p>( task – )</p>
<p>which immediately halts that task’s executing, including if it is the current task, and puts it in a terminated state. Note that the task’s termination reason is set to <code class="docutils literal notranslate"><span class="pre">terminated-killed</span></code>.</p>
<p>To get whether a task is terminated, one executes:</p>
</section>
<section id="terminated">
<h3><code class="docutils literal notranslate"><span class="pre">terminated?</span></code></h3>
<p>( task – terminated )</p>
<p>which returns the terminated state of a task.</p>
<p>If one attempts to execute a word against a terminated task, aside from <code class="docutils literal notranslate"><span class="pre">init-task</span></code> or <code class="docutils literal notranslate"><span class="pre">terminated?</span></code>, the following exception is raised:</p>
</section>
<section id="x-terminated">
<h3><code class="docutils literal notranslate"><span class="pre">x-terminated</span></code></h3>
<p>( – )</p>
<p>This exception is raised when executed displays the task terminated error message.</p>
</section>
<section id="x-out-of-range-notify">
<h3><code class="docutils literal notranslate"><span class="pre">x-out-of-range-notify</span></code></h3>
<p>( – )</p>
<p>This exception is raised when an out of range notification mailbox index or count is specified.</p>
</section>
<section id="x-interrupt-main">
<h3><code class="docutils literal notranslate"><span class="pre">x-interrupt-main</span></code></h3>
<p>( – )</p>
<p>This exception is sent to the main task by issuing Control-T <code class="docutils literal notranslate"><span class="pre">z</span></code> at the console.</p>
</section>
<section id="timeout">
<h3><code class="docutils literal notranslate"><span class="pre">timeout</span></code></h3>
<p>( – addr )</p>
<p>A user variable used for storing a timeout value in ticks for various operations.</p>
</section>
<section id="no-timeout">
<h3><code class="docutils literal notranslate"><span class="pre">no-timeout</span></code></h3>
<p>( – n )</p>
<p>A constant representing no timeout</p>
</section>
<section id="last-delay">
<h3><code class="docutils literal notranslate"><span class="pre">last-delay</span></code></h3>
<p>( task – ticks-delay ticks-start )</p>
<p>Get the last delay setting, from calling <code class="docutils literal notranslate"><span class="pre">delay</span></code> or <code class="docutils literal notranslate"><span class="pre">block-timeout</span></code>, for a task.</p>
</section>
<section id="delay">
<h3><code class="docutils literal notranslate"><span class="pre">delay</span></code></h3>
<p>( delay start task – )</p>
<p>Delay a task until <em>delay</em> ticks after the time represented by <em>start</em> ticks.</p>
</section>
<section id="delay-critical">
<h3><code class="docutils literal notranslate"><span class="pre">delay-critical</span></code></h3>
<p>( delay start task – )</p>
<p>Delay a task until <em>delay</em> ticks after the time represented by <em>start</em> ticks, and afterwards immediately start a critical section.</p>
</section>
<section id="block-timeout">
<h3><code class="docutils literal notranslate"><span class="pre">block-timeout</span></code></h3>
<p>( delay start task – )</p>
<p>Block a task until <em>delay</em> ticks after the time represented by <em>start</em> ticks, and signal timed out if this time is reached without the task being readied first.</p>
</section>
<section id="block-timeout-critical">
<h3><code class="docutils literal notranslate"><span class="pre">block-timeout-critical</span></code></h3>
<p>( delay start task – )</p>
<p>Block a task until <em>delay</em> ticks after the time represented by <em>start</em> ticks, and signal timed out if this time is reached without the task being readied first; after blocking finishes, immediately start a critical section.</p>
</section>
<section id="block-wait">
<h3><code class="docutils literal notranslate"><span class="pre">block-wait</span></code></h3>
<p>( task – )</p>
<p>Block a task until all waiting task are woken with <code class="docutils literal notranslate"><span class="pre">wake</span></code>.</p>
</section>
<section id="block-wait-critical">
<h3><code class="docutils literal notranslate"><span class="pre">block-wait-critical</span></code></h3>
<p>( task – )</p>
<p>Block a task until all waiting task are woken with <code class="docutils literal notranslate"><span class="pre">wake</span></code>, and then immediately start a critical section.</p>
</section>
<section id="block-indefinite">
<h3><code class="docutils literal notranslate"><span class="pre">block-indefinite</span></code></h3>
<p>( task – )</p>
<p>Block a task indefinitely until the task is readied.</p>
</section>
<section id="block-indefinite-critical">
<h3><code class="docutils literal notranslate"><span class="pre">block-indefinite-critical</span></code></h3>
<p>( task – )</p>
<p>Block a task indefinitely until the task is readied, and then immediately start a critical section.</p>
</section>
<section id="wait-notify-timeout">
<h3><code class="docutils literal notranslate"><span class="pre">wait-notify-timeout</span></code></h3>
<p>( delay start notify-index – x )</p>
<p>If the current task has not been notified for the specified notification, set the task in an awaiting notification state for that notification until <em>delay</em> ticks after the time represented by <em>start</em> ticks, and raise <code class="docutils literal notranslate"><span class="pre">x-timed-out</span></code> if this time is reached without the task being notified for that notification first. If successful, the notified state for the specified notification is cleared and the contents of the notification mailbox in question is returned.</p>
</section>
<section id="wait-notify-timeout-critical">
<h3><code class="docutils literal notranslate"><span class="pre">wait-notify-timeout-critical</span></code></h3>
<p>( delay start notify-index – x )</p>
<p>If the current task has not been notified for the specified notification, set the task in an awaiting notification state for that notification until <em>delay</em> ticks after the time represented by <em>start</em> ticks, and raise <code class="docutils literal notranslate"><span class="pre">x-timed-out</span></code> if this time is reached without the task being notified for that notification first; after blocking finishes, immediately start a critical section unless an exception has been raised. If successful, the notified state for the specified notification is cleared and the contents of the notification mailbox in question is returned.</p>
</section>
<section id="wait-notify-indefinite">
<h3><code class="docutils literal notranslate"><span class="pre">wait-notify-indefinite</span></code></h3>
<p>( notify-index – x )</p>
<p>If the current task has not been notified for the specified notification, set the task in an awaiting notification state for that notification until the task is notified for that notification. If successful, the notified state for the specified notification is cleared and the contents of the notification mailbox in question is returned.</p>
</section>
<section id="wait-notify-indefinite-critical">
<h3><code class="docutils literal notranslate"><span class="pre">wait-notify-indefinite-critical</span></code></h3>
<p>( notify-index – x )</p>
<p>If the current task has not been notified for the specified notification, set the task in an awaiting notification state for that notification until the task is notified for that notification; after blocking finishes, immediately start a critical section unless an exception has been raised. If successful, the notified state for the specified notification is cleared and the contents of the notification mailbox in question is returned.</p>
</section>
<section id="ready">
<h3><code class="docutils literal notranslate"><span class="pre">ready</span></code></h3>
<p>( task – )</p>
<p>Ready a blocked or delayed task.</p>
</section>
<section id="notify">
<h3><code class="docutils literal notranslate"><span class="pre">notify</span></code></h3>
<p>( notify-index task – )</p>
<p>Notify a task on a specified notification index <em>notify-index</em> without changing the value of the notification mailbox at <em>notify-index</em>, readying the task if it is currently waiting on that notification.</p>
</section>
<section id="notify-set">
<h3><code class="docutils literal notranslate"><span class="pre">notify-set</span></code></h3>
<p>( x notify-index task – )</p>
<p>Notify a task on a specified notification index <em>notify-index</em>, setting the value of its notification mailbox at <em>notify-index</em> to <em>x</em>, readying the task if it is currently waiting on that notification.</p>
</section>
<section id="notify-update">
<h3><code class="docutils literal notranslate"><span class="pre">notify-update</span></code></h3>
<p>( xt notify-index task – )</p>
<p>Notify a task on a specified notification index <em>notify-index</em>, updating the value of its notification mailbox at <em>notify-index</em> by applying the execution token <em>xt</em> with the signature ( x0 – x1 ) to it, readying the task if it is currently waiting on that notification. Note that the code executed has full access to the contents of the stack below <em>xt</em> on it when <code class="docutils literal notranslate"><span class="pre">notify-update</span></code> was executed.</p>
</section>
<section id="clear-notify">
<h3><code class="docutils literal notranslate"><span class="pre">clear-notify</span></code></h3>
<p>( notify-index task – )</p>
<p>Clear a notification state for a specified notification index <em>notify-index</em> for a task <em>task</em>. A subsequent <code class="docutils literal notranslate"><span class="pre">wait-notify</span></code> etc. on this notification index will block until another notification occurs for this notification index even if a notifcation had occurred prior to calling <code class="docutils literal notranslate"><span class="pre">clear-notify</span></code>.</p>
</section>
<section id="block">
<h3><code class="docutils literal notranslate"><span class="pre">block</span></code></h3>
<p>( task – )</p>
<p>Block a task for which blocking has been prepared.</p>
</section>
<section id="block-critical">
<h3><code class="docutils literal notranslate"><span class="pre">block-critical</span></code></h3>
<p>( task – )</p>
<p>Block a task for which blocking has been prepared, and immediately start a new critical section once it finishes blocking.</p>
</section>
<section id="mailbox">
<h3><code class="docutils literal notranslate"><span class="pre">mailbox&#64;</span></code></h3>
<p>( notify-index task – x )</p>
<p>Get the value for a mailbox at notification index <em>notify-index</em> for task <em>task</em> without blocking.</p>
</section>
<section id="id1">
<h3><code class="docutils literal notranslate"><span class="pre">mailbox!</span></code></h3>
<p>( x notify-index task – )</p>
<p>Set the value for a mailbox at notification index <em>notify-index</em> for task <em>task</em> without setting the corresponding notification state and unblocking any wait on that notification index.</p>
</section>
<section id="wait-notify">
<h3><code class="docutils literal notranslate"><span class="pre">wait-notify</span></code></h3>
<p>( notify-index – x )</p>
<p>If the current task has not been notified for the specified notification, set the task in an awaiting notification state for that notification that may be blockign or indefinite depending on how blocking has been prepared. If successful, the notified state for the specified notification is cleared and the contents of the notification mailbox in question is returned.</p>
</section>
<section id="wait-notify-critical">
<h3><code class="docutils literal notranslate"><span class="pre">wait-notify-critical</span></code></h3>
<p>( notify-index – x )</p>
<p>If the current task has not been notified for the specified notification, set the task in an awaiting notification state for that notification that may be blockign or indefinite depending on how blocking has been prepared; after blocking finishes, immediately start a critical section unless an exception has been raised. If successful, the notified state for the specified notification is cleared and the contents of the notification mailbox in question is returned.</p>
</section>
<section id="id2">
<h3><code class="docutils literal notranslate"><span class="pre">wait-notify</span></code></h3>
<p>( task – )</p>
<p>If a task has not been notified, set the task in an awaiting notification state for which blocking has been prepared. If the task has already been notified, clear its notification state.</p>
</section>
<section id="id3">
<h3><code class="docutils literal notranslate"><span class="pre">wait-notify-critical</span></code></h3>
<p>( task – )</p>
<p>If a task has not been notified, set the task in an awaiting notification state for blocking has been prepared, and immediately start a new critical section once it finishes blocking. If the task has already been notified, clear its notification state.</p>
</section>
<section id="prepare-block">
<h3><code class="docutils literal notranslate"><span class="pre">prepare-block</span></code></h3>
<p>( task – )</p>
<p>Prepare blocking timeouts for a given task.</p>
</section>
<section id="timed-out">
<h3><code class="docutils literal notranslate"><span class="pre">timed-out?</span></code></h3>
<p>( task – timed-out )</p>
<p>Get whether a task has timed out.</p>
</section>
<section id="x-timed-out">
<h3><code class="docutils literal notranslate"><span class="pre">x-timed-out</span></code></h3>
<p>( – )</p>
<p>An exception raised when timeout validation fails.</p>
</section>
<section id="validate-timeout">
<h3><code class="docutils literal notranslate"><span class="pre">validate-timeout</span></code></h3>
<p>( task – )</p>
<p>Validate whether a task has timed out, raising <code class="docutils literal notranslate"><span class="pre">x-timed-out</span></code> if it has.</p>
</section>
<section id="x-would-block">
<h3><code class="docutils literal notranslate"><span class="pre">x-would-block</span></code></h3>
<p>( – )</p>
<p>Operation would block exception. Raised on attempting to carry out a non-blocking operation when blocking would normally be necessary for the equivalent blocking operation.</p>
</section>
<section id="task-core">
<h3><code class="docutils literal notranslate"><span class="pre">task-core&#64;</span></code></h3>
<p>( task – core )</p>
<p>Get the core that a task is running on or is set to run on.</p>
</section>
<section id="task-priority">
<h3><code class="docutils literal notranslate"><span class="pre">task-priority!</span></code></h3>
<p>( priority task – )</p>
<p>Set the priority of a task, from -32768 to 32767, with higher numbers being greater task priorities.</p>
</section>
<section id="id4">
<h3><code class="docutils literal notranslate"><span class="pre">task-priority&#64;</span></code></h3>
<p>( task – priority )</p>
<p>Get the priority of a task.</p>
</section>
<section id="x-out-of-range-priority">
<h3><code class="docutils literal notranslate"><span class="pre">x-out-of-range-priority</span></code></h3>
<p>( – )</p>
<p>The exception raised when setting an out-of-range task priority</p>
</section>
<section id="task-saved-priority">
<h3><code class="docutils literal notranslate"><span class="pre">task-saved-priority!</span></code></h3>
<p>( priority task – )</p>
<p>Set the saved priority of a task, from -32768 to 32767, with higher numbers being greater task priorities.</p>
</section>
<section id="id5">
<h3><code class="docutils literal notranslate"><span class="pre">task-saved-priority&#64;</span></code></h3>
<p>( task – priority )</p>
<p>Get the saved priority of a task.</p>
</section>
<section id="task-timeslice">
<h3><code class="docutils literal notranslate"><span class="pre">task-timeslice!</span></code></h3>
<p>( timeslice task – )</p>
<p>Set the timeslice, in ticks (usually 100 us increments), of a task, indicating the minimum amount of time a task will run before being preempted. If a task does not use up all of its timeslice before it gives up control of the processor, it will start off with the remainder of its timeslice next time it has control of the processor, unless it exhausted its timeslice, where then the timeslice value is added onto the tick counter (which may be negative) to yield the new timeslice (but which may not be less than the task’s minimum timeslice). Note that the default setting for this for a newly initialized task is 10.</p>
</section>
<section id="id6">
<h3><code class="docutils literal notranslate"><span class="pre">task-timeslice&#64;</span></code></h3>
<p>( task – timeslice )</p>
<p>Get the timeslice, in ticks (usually 100 us increments), of a task.</p>
</section>
<section id="task-min-timeslice">
<h3><code class="docutils literal notranslate"><span class="pre">task-min-timeslice!</span></code></h3>
<p>( timeslice task – )</p>
<p>Set the minimum timeslice, in ticks (usually 100 us increments), that a task will be guaranteed to run when scheduled, regardless of how many ticks the task executed for the last time it was scheduled. For instance, to ensure that each time a task will run for at least 10 ticks each time it is scheduled, this should be set to 10. By default, this value is set to 0 for each task, such that a given task is not guaranteed to not be descheduled immediately on a SysTick if it had already used up both its timeslice and also the next timeslice (through, e.g., spending time in critical sections).</p>
</section>
<section id="task-active">
<h3><code class="docutils literal notranslate"><span class="pre">task-active&#64;</span></code></h3>
<p>( task – level )</p>
<p>Get the activation level of a task, with values 0 and lower indicating that a task is inactive, and values 1 and greater indicating that a task is active.</p>
<p>The simplest case of delaying a task is simply to execute:</p>
</section>
<section id="task-name">
<h3><code class="docutils literal notranslate"><span class="pre">task-name&#64;</span></code></h3>
<p>( task – addr )</p>
<p>Get the name of a task as a counted string; an address of zero indicates no name is set.</p>
</section>
<section id="id7">
<h3><code class="docutils literal notranslate"><span class="pre">task-name!</span></code></h3>
<p>( addr task – )</p>
<p>Set the name of a task as a counted string; an address of zero indicates to set no name.</p>
</section>
<section id="task-terminate-hook">
<h3><code class="docutils literal notranslate"><span class="pre">task-terminate-hook!</span></code></h3>
<p>( xt task – )</p>
<p>Set a task’s termination hook, to be invoked in the context of the task when the task terminates. The execution token invoked as the hook has the stack signature ( data reason – ) where <em>data</em> is the task termination data associated with the task. Note that the task is re-initialized, aside from being with the same name and on the same core, before the task’s termination hook is invoked, and will have a priority of 32768 (the maximum priority). Also note that a task termination hook of 0, the default, means that no task termination hook is to be invoked. <em>Reason</em> is the <em>immediate</em> task termination reason, which is overwritten with <code class="docutils literal notranslate"><span class="pre">not-terminated</span></code> due to the task being reinitialized when the task termination hook is called.</p>
</section>
<section id="id8">
<h3><code class="docutils literal notranslate"><span class="pre">task-terminate-hook&#64;</span></code></h3>
<p>( task – xt )</p>
<p>Get a task’s termination hook.</p>
</section>
<section id="task-terminate-data">
<h3><code class="docutils literal notranslate"><span class="pre">task-terminate-data!</span></code></h3>
<p>( data task – )</p>
<p>Set a task’s termination data, to be passed to the task’s termination hook when it is invoked.</p>
</section>
<section id="id9">
<h3><code class="docutils literal notranslate"><span class="pre">task-terminate-data&#64;</span></code></h3>
<p>( task – data )</p>
<p>Get a task’s termination data.</p>
</section>
<section id="task-terminate-immed-reason">
<h3><code class="docutils literal notranslate"><span class="pre">task-terminate-immed-reason&#64;</span></code></h3>
<p>( task – reason )</p>
<p>Get a task’s termination immediate reason. Note that this is set back to <code class="docutils literal notranslate"><span class="pre">not-terminated</span></code> if there is a task termination hook.</p>
</section>
<section id="task-terminate-reason">
<h3><code class="docutils literal notranslate"><span class="pre">task-terminate-reason&#64;</span></code></h3>
<p>( task – reason )</p>
<p>Get a task’s termination reason.</p>
<p>Task termination reasons are either uncaught exceptions or one of the following:</p>
</section>
<section id="not-terminated">
<h3><code class="docutils literal notranslate"><span class="pre">not-terminated</span></code></h3>
<p>( – reason )</p>
<p>Task has not been terminated.</p>
</section>
<section id="terminated-normally">
<h3><code class="docutils literal notranslate"><span class="pre">terminated-normally</span></code></h3>
<p>( – reason )</p>
<p>Task terminated normally.</p>
</section>
<section id="terminated-killed">
<h3><code class="docutils literal notranslate"><span class="pre">terminated-killed</span></code></h3>
<p>( – reason )</p>
<p>Task was killed.</p>
</section>
<section id="terminated-crashed">
<h3><code class="docutils literal notranslate"><span class="pre">terminated-crashed</span></code></h3>
<p>( – reason )</p>
<p>Task was terminated due to a hardware exception.</p>
</section>
<section id="dump-tasks">
<h3><code class="docutils literal notranslate"><span class="pre">dump-tasks</span></code></h3>
<p>( – )</p>
<p>Dump information for each task that is in the schedule.</p>
</section>
<section id="enable-trace">
<h3><code class="docutils literal notranslate"><span class="pre">enable-trace</span></code></h3>
<p>( – )</p>
<p>Enable dumping trace information when trace points are reached, i.e. the associated name of the trace point, the data stack of the task that hit the trace point, the critical depth at that time, and the states of all the tasks at at that point in time.</p>
</section>
<section id="disable-trace">
<h3><code class="docutils literal notranslate"><span class="pre">disable-trace</span></code></h3>
<p>( – )</p>
<p>Disable dumping trace information.</p>
</section>
<section id="trace-enable">
<h3><code class="docutils literal notranslate"><span class="pre">trace-enable?</span></code></h3>
<p>( – flag )</p>
<p>Get whether dumping trace information is enabled.</p>
</section>
<section id="trace">
<h3><code class="docutils literal notranslate"><span class="pre">trace</span></code></h3>
<p>( c-addr bytes – )</p>
<p>Specify a trace point with the given name which is displayed when the trace point is reached.</p>
</section>
</section>
<section id="monitor">
<h2><code class="docutils literal notranslate"><span class="pre">monitor</span></code></h2>
<p>The following words are in the <code class="docutils literal notranslate"><span class="pre">monitor</span></code> module (note that this module is only present in full builds):</p>
<section id="start-monitor">
<h3><code class="docutils literal notranslate"><span class="pre">start-monitor</span></code></h3>
<p>( – )</p>
<p>This word starts the task monitor in the current core; if the task monitor has already been started, it has no effect. Once started, Control-T <code class="docutils literal notranslate"><span class="pre">t</span></code> dumps information on all running tasks.</p>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>