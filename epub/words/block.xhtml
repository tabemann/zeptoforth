<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Block words</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section class="tex2jax_ignore mathjax_ignore" id="block-words">
<h1>Block words</h1>
<p>The block interface is written for the STM32F746 DISCOVERY board and the Raspberry Pico (along with other RP2040 boards with Quad SPI flash compatible with the Winbond Quad SPI flash used by the Raspberry Pi Pico). It provides a convenient interface for turning the Quad SPI flash functionality into a map of block id’s to 1K blocks of memory.</p>
<p>Note that block ids start from zero, unlike on many Forths where they traditionally started from one.</p>
<section id="forth">
<h2><code class="docutils literal notranslate"><span class="pre">forth</span></code></h2>
<p>The following words are in <code class="docutils literal notranslate"><span class="pre">forth</span></code>:</p>
<section id="load">
<h3><code class="docutils literal notranslate"><span class="pre">load</span></code></h3>
<p>( id – )</p>
<p>Evaluate each 64-byte line in a block with the given id from first to last; if the block does not exist <code class="docutils literal notranslate"><span class="pre">x-block-not-found</span></code> is raised.</p>
</section>
<section id="load-range">
<h3><code class="docutils literal notranslate"><span class="pre">load-range</span></code></h3>
<p>( start-id end-id – )</p>
<p>Evaluate each 64-byte line from first to last in each block, if it exists, in the range from <code class="docutils literal notranslate"><span class="pre">start-id</span></code> to <code class="docutils literal notranslate"><span class="pre">end-id</span></code>.</p>
</section>
<section id="list">
<h3><code class="docutils literal notranslate"><span class="pre">list</span></code></h3>
<p>( id – )</p>
<p>Display each 64-byte line in a block with the given id from first to last; if the block does not exist <code class="docutils literal notranslate"><span class="pre">x-block-not-found</span></code> is raised.</p>
</section>
<section id="list-range">
<h3><code class="docutils literal notranslate"><span class="pre">list-range</span></code></h3>
<p>( start-id end-id – )</p>
<p>Display each 64-byte line from first to last in each block, if it exists, in the range from <code class="docutils literal notranslate"><span class="pre">start-id</span></code> to <code class="docutils literal notranslate"><span class="pre">end-id</span></code>.</p>
</section>
</section>
<section id="block">
<h2><code class="docutils literal notranslate"><span class="pre">block</span></code></h2>
<p>The following words are in <code class="docutils literal notranslate"><span class="pre">block</span></code>:</p>
<section id="block-size">
<h3><code class="docutils literal notranslate"><span class="pre">block-size</span></code></h3>
<p>( –  bytes )</p>
<p>The block size in bytes, currently 1024 bytes.</p>
</section>
<section id="x-invalid-block-id">
<h3><code class="docutils literal notranslate"><span class="pre">x-invalid-block-id</span></code></h3>
<p>( – )</p>
<p>Exception raised when an invalid block id (presently only $FFFFFFFF) is used.</p>
</section>
<section id="x-block-write-fail">
<h3><code class="docutils literal notranslate"><span class="pre">x-block-write-fail</span></code></h3>
<p>Exception when <code class="docutils literal notranslate"><span class="pre">block!</span></code> is unable to write a given block, due to no free space being available and not being unable to free up space due to no completely used sectors existing.</p>
</section>
<section id="x-block-not-found">
<h3><code class="docutils literal notranslate"><span class="pre">x-block-not-found</span></code></h3>
<p>Exception when attempting to delete, load, or list a nonexistent block.</p>
</section>
<section id="find-block">
<h3><code class="docutils literal notranslate"><span class="pre">find-block</span></code></h3>
<p>( id – addr | 0 )</p>
<p>Find a block in the memory-mapped Quad SPI flash space by id, or return 0 if no such block can be found.</p>
</section>
<section id="id1">
<h3><code class="docutils literal notranslate"><span class="pre">block?</span></code></h3>
<p>( id – flag )</p>
<p>Return whether a block by a given id exists.</p>
</section>
<section id="id2">
<h3><code class="docutils literal notranslate"><span class="pre">block!</span></code></h3>
<p>( addr id – )</p>
<p>Attempt to write a the 1K buffer at the specified address to a block with a given id; this may fail and raise <code class="docutils literal notranslate"><span class="pre">x-block-write-fail</span></code>. Note that this is not friendly to realtime performance, especially when it has to reclaim existing used sectors</p>
</section>
<section id="copy-block">
<h3><code class="docutils literal notranslate"><span class="pre">copy-block</span></code></h3>
<p>( src-id dest-id – )</p>
<p>Copy the block with id <code class="docutils literal notranslate"><span class="pre">src-id</span></code> to <code class="docutils literal notranslate"><span class="pre">dest-id</span></code>; if the block does not exist, delete <code class="docutils literal notranslate"><span class="pre">dest-id</span></code></p>
</section>
<section id="copy-blocks">
<h3><code class="docutils literal notranslate"><span class="pre">copy-blocks</span></code></h3>
<p>( src-id dest-id count – )</p>
<p>Copy <code class="docutils literal notranslate"><span class="pre">count-blocks</span></code> from the sequence of blocks starting with id <code class="docutils literal notranslate"><span class="pre">src-id</span></code> to the sequence of blocks starting with id <code class="docutils literal notranslate"><span class="pre">dest-id</span></code>; note that nonexistent blocks in the first range resulting in the corresponding blocks in the second range being deleted, and overlapping ranges of blocks are treated correctly.</p>
</section>
<section id="insert-blocks">
<h3><code class="docutils literal notranslate"><span class="pre">insert-blocks</span></code></h3>
<p>( start-id count – )</p>
<p>Insert <code class="docutils literal notranslate"><span class="pre">count</span></code> nonexistent blocks starting at id <code class="docutils literal notranslate"><span class="pre">start-id</span></code>, displacing any extant blocks in that range to higher ids (note that nonexistent blocks are ignored and may be eliminated in the process).</p>
</section>
<section id="delete-block">
<h3><code class="docutils literal notranslate"><span class="pre">delete-block</span></code></h3>
<p>( id – )</p>
<p>Attempt to delete a block with the given id; if the block does not exist, <code class="docutils literal notranslate"><span class="pre">x-block-not-found</span></code> is raised.</p>
</section>
<section id="delete-blocks">
<h3><code class="docutils literal notranslate"><span class="pre">delete-blocks</span></code></h3>
<p>( start-id count – )</p>
<p>Delete <code class="docutils literal notranslate"><span class="pre">count</span></code> blocks starting with id <code class="docutils literal notranslate"><span class="pre">start-id</span></code> ascending; note that non-existent blocks are ignored.</p>
</section>
<section id="erase-all-blocks">
<h3><code class="docutils literal notranslate"><span class="pre">erase-all-blocks</span></code></h3>
<p>( – )</p>
<p>Erase all blocks. Note that this is not friendly to realtime performance.</p>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>